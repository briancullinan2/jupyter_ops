// Generated from ./vhdl/vhdl.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import vhdlListener from './vhdlListener.js';
const serializedATN = [4,1,162,2599,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,1,0,1,0,1,1,
1,1,1,1,1,2,1,2,3,2,518,8,2,1,2,1,2,3,2,522,8,2,1,2,1,2,1,3,1,3,3,3,528,
8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,538,8,5,1,6,1,6,1,7,1,7,1,7,1,7,
5,7,546,8,7,10,7,12,7,549,9,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,557,8,8,1,8,1,
8,1,8,3,8,562,8,8,1,8,1,8,1,9,1,9,1,9,3,9,569,8,9,1,10,1,10,3,10,573,8,10,
1,11,1,11,1,11,3,11,578,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,3,12,590,8,12,1,12,3,12,593,8,12,1,12,1,12,1,13,5,13,598,8,13,10,13,
12,13,601,9,13,1,14,1,14,1,14,3,14,606,8,14,1,14,1,14,3,14,610,8,14,1,14,
1,14,3,14,614,8,14,1,14,3,14,617,8,14,1,14,1,14,1,14,1,14,1,14,3,14,624,
8,14,1,15,5,15,627,8,15,10,15,12,15,630,9,15,1,16,1,16,3,16,634,8,16,1,17,
1,17,3,17,638,8,17,1,18,1,18,1,18,1,18,3,18,644,8,18,1,18,1,18,3,18,648,
8,18,1,19,3,19,651,8,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,659,8,20,1,20,
1,20,1,21,1,21,1,21,5,21,666,8,21,10,21,12,21,669,9,21,1,22,1,22,1,22,1,
22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,683,8,23,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,698,8,26,1,26,3,26,
701,8,26,1,26,3,26,704,8,26,1,27,1,27,1,27,5,27,709,8,27,10,27,12,27,712,
9,27,1,27,5,27,715,8,27,10,27,12,27,718,9,27,1,27,1,27,1,27,1,27,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,3,28,746,8,28,1,29,5,29,749,8,29,10,29,12,
29,752,9,29,1,30,1,30,1,30,1,30,3,30,758,8,30,3,30,760,8,30,1,30,1,30,1,
30,1,30,3,30,766,8,30,3,30,768,8,30,1,31,1,31,1,31,1,31,1,31,3,31,775,8,
31,1,31,3,31,778,8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,786,8,32,1,32,3,
32,789,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,798,8,32,1,32,1,32,1,
33,5,33,803,8,33,10,33,12,33,806,9,33,1,34,1,34,3,34,810,8,34,1,34,3,34,
813,8,34,1,34,1,34,1,34,1,35,3,35,819,8,35,1,35,1,35,1,35,1,35,1,36,1,36,
1,36,5,36,828,8,36,10,36,12,36,831,9,36,1,37,1,37,1,37,1,37,1,38,3,38,838,
8,38,1,38,1,38,3,38,842,8,38,1,38,1,38,3,38,846,8,38,1,38,1,38,1,39,3,39,
851,8,39,1,39,1,39,1,39,1,39,4,39,857,8,39,11,39,12,39,858,1,39,1,39,1,39,
3,39,864,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,
877,8,41,1,42,1,42,1,42,5,42,882,8,42,10,42,12,42,885,9,42,1,43,1,43,1,43,
1,43,1,43,3,43,892,8,43,1,43,3,43,895,8,43,1,43,1,43,1,43,1,43,1,44,1,44,
1,44,3,44,904,8,44,1,44,3,44,907,8,44,1,44,3,44,910,8,44,1,44,1,44,1,44,
3,44,915,8,44,1,44,1,44,1,45,1,45,1,45,3,45,922,8,45,1,45,3,45,925,8,45,
1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,3,47,935,8,47,1,48,1,48,3,48,939,
8,48,1,49,3,49,942,8,49,1,49,3,49,945,8,49,1,49,1,49,1,49,1,50,3,50,951,
8,50,1,50,1,50,3,50,955,8,50,1,50,3,50,958,8,50,1,50,1,50,3,50,962,8,50,
1,50,1,50,1,51,3,51,967,8,51,1,51,3,51,970,8,51,1,51,1,51,1,51,1,52,3,52,
976,8,52,1,52,3,52,979,8,52,1,52,1,52,3,52,983,8,52,1,53,1,53,1,54,1,54,
1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,3,56,1001,8,
56,3,56,1003,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1014,
8,57,1,57,3,57,1017,8,57,1,57,1,57,1,58,1,58,1,58,3,58,1024,8,58,1,59,5,
59,1027,8,59,10,59,12,59,1030,9,59,1,60,1,60,3,60,1034,8,60,1,61,1,61,1,
61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1047,8,62,1,62,1,62,1,63,
1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,3,65,1063,8,65,1,
66,5,66,1066,8,66,10,66,12,66,1069,9,66,1,67,1,67,3,67,1073,8,67,1,68,1,
68,1,68,3,68,1078,8,68,1,68,3,68,1081,8,68,1,69,5,69,1084,8,69,10,69,12,
69,1087,9,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,3,71,1096,8,71,1,72,1,72,
1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,3,74,1108,8,74,1,75,1,75,1,75,3,
75,1113,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,
1,79,1,79,1,79,1,79,1,79,3,79,1132,8,79,1,79,1,79,1,79,3,79,1137,8,79,1,
80,1,80,1,81,1,81,3,81,1143,8,81,1,82,1,82,1,82,5,82,1148,8,82,10,82,12,
82,1151,9,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1160,8,83,1,83,1,83,
3,83,1164,8,83,1,83,3,83,1167,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,
84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
3,84,1191,8,84,1,85,5,85,1194,8,85,10,85,12,85,1197,9,85,1,86,1,86,3,86,
1201,8,86,1,87,3,87,1204,8,87,1,87,3,87,1207,8,87,1,88,1,88,1,88,5,88,1212,
8,88,10,88,12,88,1215,9,88,1,88,1,88,3,88,1219,8,88,1,89,1,89,1,89,1,89,
1,90,1,90,1,90,3,90,1228,8,90,1,91,5,91,1231,8,91,10,91,12,91,1234,9,91,
1,92,1,92,1,92,3,92,1239,8,92,1,93,1,93,3,93,1243,8,93,1,94,1,94,1,94,1,
94,5,94,1249,8,94,10,94,12,94,1252,9,94,1,94,1,94,1,95,3,95,1257,8,95,1,
95,1,95,3,95,1261,8,95,1,95,1,95,3,95,1265,8,95,1,95,1,95,1,96,1,96,1,96,
1,96,5,96,1273,8,96,10,96,12,96,1276,9,96,1,97,1,97,1,97,3,97,1281,8,97,
1,97,1,97,1,97,1,97,3,97,1287,8,97,1,98,1,98,1,98,1,98,1,98,3,98,1294,8,
98,1,98,1,98,1,99,1,99,1,100,1,100,3,100,1302,8,100,1,100,1,100,1,100,1,
101,1,101,1,101,1,101,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,3,
103,1319,8,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1327,8,104,1,104,
1,104,1,105,1,105,1,105,1,105,5,105,1335,8,105,10,105,12,105,1338,9,105,
1,105,3,105,1341,8,105,1,105,5,105,1344,8,105,10,105,12,105,1347,9,105,1,
105,1,105,1,105,3,105,1352,8,105,1,105,1,105,1,106,1,106,1,106,1,106,3,106,
1360,8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,5,108,1371,
8,108,10,108,12,108,1374,9,108,1,109,1,109,1,109,1,109,1,109,1,109,1,110,
1,110,3,110,1384,8,110,1,111,1,111,1,111,5,111,1389,8,111,10,111,12,111,
1392,9,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,
113,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,115,1,115,1,
116,1,116,1,116,5,116,1419,8,116,10,116,12,116,1422,9,116,1,117,3,117,1425,
8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,5,117,1436,8,
117,10,117,12,117,1439,9,117,1,117,1,117,3,117,1443,8,117,1,117,1,117,1,
117,3,117,1448,8,117,1,117,1,117,1,118,1,118,1,118,1,118,5,118,1456,8,118,
10,118,12,118,1459,9,118,1,118,1,118,1,119,1,119,3,119,1465,8,119,1,120,
1,120,1,120,1,120,1,121,3,121,1472,8,121,1,121,1,121,1,121,1,121,1,121,1,
121,1,121,3,121,1481,8,121,1,121,1,121,3,121,1485,8,121,1,122,1,122,1,122,
5,122,1490,8,122,10,122,12,122,1493,9,122,1,122,1,122,3,122,1497,8,122,1,
123,3,123,1500,8,123,1,123,1,123,1,123,3,123,1505,8,123,1,123,1,123,1,123,
3,123,1510,8,123,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1518,8,124,1,
125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,5,127,1530,8,127,
10,127,12,127,1533,9,127,1,128,1,128,1,128,5,128,1538,8,128,10,128,12,128,
1541,9,128,1,129,1,129,1,129,5,129,1546,8,129,10,129,12,129,1549,9,129,1,
130,1,130,1,130,1,130,3,130,1555,8,130,1,130,1,130,1,130,3,130,1560,8,130,
1,131,1,131,1,131,3,131,1565,8,131,1,131,1,131,3,131,1569,8,131,1,131,1,
131,3,131,1573,8,131,1,132,1,132,1,132,1,132,3,132,1579,8,132,1,132,1,132,
3,132,1583,8,132,1,132,1,132,3,132,1587,8,132,1,133,1,133,1,133,1,133,1,
133,1,134,3,134,1595,8,134,1,134,1,134,1,134,3,134,1600,8,134,1,134,1,134,
1,134,3,134,1605,8,134,1,135,1,135,1,135,1,135,3,135,1611,8,135,1,136,1,
136,1,136,1,137,1,137,1,137,1,137,1,138,1,138,3,138,1622,8,138,1,139,1,139,
1,139,1,139,1,139,3,139,1629,8,139,1,140,1,140,1,141,1,141,1,141,5,141,1636,
8,141,10,141,12,141,1639,9,141,1,142,1,142,1,143,3,143,1644,8,143,1,143,
3,143,1647,8,143,1,143,1,143,1,143,1,143,1,143,3,143,1654,8,143,1,143,1,
143,1,144,1,144,1,145,1,145,1,146,1,146,3,146,1664,8,146,1,146,5,146,1667,
8,146,10,146,12,146,1670,9,146,1,147,1,147,1,147,1,147,3,147,1676,8,147,
1,148,1,148,1,148,5,148,1681,8,148,10,148,12,148,1684,9,148,1,149,1,149,
4,149,1688,8,149,11,149,12,149,1689,1,150,1,150,1,150,1,150,1,151,1,151,
1,151,1,151,1,152,3,152,1701,8,152,1,152,1,152,1,152,1,152,1,152,1,152,3,
152,1709,8,152,1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,3,154,1719,
8,154,1,155,1,155,1,155,1,155,1,156,3,156,1726,8,156,1,156,1,156,3,156,1730,
8,156,1,156,1,156,3,156,1734,8,156,1,156,1,156,1,157,1,157,3,157,1740,8,
157,1,158,1,158,1,158,1,158,1,158,1,158,3,158,1748,8,158,1,159,3,159,1751,
8,159,1,159,3,159,1754,8,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,
160,3,160,1764,8,160,1,160,3,160,1767,8,160,1,160,1,160,1,161,1,161,1,161,
1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,1782,8,161,1,162,5,
162,1785,8,162,10,162,12,162,1788,9,162,1,163,1,163,1,163,1,163,1,163,1,
163,3,163,1796,8,163,1,163,3,163,1799,8,163,1,163,1,163,1,164,1,164,1,164,
1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
1,164,1,164,1,164,1,164,3,164,1822,8,164,1,165,5,165,1825,8,165,10,165,12,
165,1828,9,165,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,168,1,168,1,168,
1,168,5,168,1841,8,168,10,168,12,168,1844,9,168,1,168,1,168,1,168,3,168,
1849,8,168,1,169,1,169,1,169,1,169,1,169,1,169,1,170,1,170,1,171,1,171,1,
171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,
172,3,172,1874,8,172,1,173,1,173,1,173,3,173,1879,8,173,1,174,1,174,1,174,
1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,1893,8,174,1,
175,5,175,1896,8,175,10,175,12,175,1899,9,175,1,176,5,176,1902,8,176,10,
176,12,176,1905,9,176,1,177,1,177,1,177,1,177,1,177,3,177,1912,8,177,1,178,
3,178,1915,8,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,1,179,1,179,1,
179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,1933,8,179,1,180,5,180,1936,
8,180,10,180,12,180,1939,9,180,1,181,3,181,1942,8,181,1,181,3,181,1945,8,
181,1,181,1,181,1,181,1,181,1,181,3,181,1952,8,181,1,181,3,181,1955,8,181,
1,181,1,181,1,181,1,181,1,181,3,181,1962,8,181,1,181,1,181,3,181,1966,8,
181,1,181,1,181,1,182,5,182,1971,8,182,10,182,12,182,1974,9,182,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,3,183,1983,8,183,1,184,1,184,1,184,3,184,
1988,8,184,1,185,1,185,1,185,5,185,1993,8,185,10,185,12,185,1996,9,185,1,
185,1,185,3,185,2000,8,185,1,186,1,186,1,186,1,186,1,187,1,187,3,187,2008,
8,187,1,188,1,188,1,188,1,188,3,188,2014,8,188,1,189,1,189,1,189,1,190,1,
190,4,190,2021,8,190,11,190,12,190,2022,1,190,1,190,1,190,3,190,2028,8,190,
1,191,1,191,4,191,2032,8,191,11,191,12,191,2033,1,191,1,191,1,191,3,191,
2039,8,191,1,192,1,192,1,192,1,192,3,192,2045,8,192,1,193,1,193,1,194,3,
194,2050,8,194,1,194,1,194,1,194,1,194,3,194,2056,8,194,1,194,1,194,1,195,
3,195,2061,8,195,1,195,1,195,3,195,2065,8,195,1,195,1,195,1,196,1,196,1,
196,1,196,1,196,1,196,1,196,1,197,1,197,1,197,3,197,2079,8,197,1,198,1,198,
3,198,2083,8,198,1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,
200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,
201,5,201,2107,8,201,10,201,12,201,2110,9,201,1,202,1,202,1,202,1,203,1,
203,1,203,5,203,2118,8,203,10,203,12,203,2121,9,203,1,204,5,204,2124,8,204,
10,204,12,204,2127,9,204,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
1,205,1,205,1,205,1,205,3,205,2141,8,205,1,205,1,205,1,205,1,205,3,205,2147,
8,205,1,206,1,206,1,206,1,206,3,206,2153,8,206,1,207,1,207,1,208,3,208,2158,
8,208,1,208,1,208,1,208,3,208,2163,8,208,1,208,1,208,1,208,1,209,1,209,1,
209,1,209,1,209,3,209,2173,8,209,1,209,1,209,3,209,2177,8,209,1,209,1,209,
1,210,1,210,1,211,1,211,1,211,5,211,2186,8,211,10,211,12,211,2189,9,211,
1,211,1,211,3,211,2193,8,211,1,212,1,212,1,212,1,212,5,212,2199,8,212,10,
212,12,212,2202,9,212,3,212,2204,8,212,1,212,1,212,3,212,2208,8,212,1,212,
1,212,1,213,3,213,2213,8,213,1,213,1,213,1,213,1,213,5,213,2219,8,213,10,
213,12,213,2222,9,213,1,214,3,214,2225,8,214,1,214,1,214,1,214,1,214,3,214,
2231,8,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,216,3,216,2241,8,
216,1,216,1,216,1,216,1,216,4,216,2247,8,216,11,216,12,216,2248,1,216,1,
216,1,216,3,216,2254,8,216,1,216,1,216,1,217,3,217,2259,8,217,1,217,1,217,
1,217,1,217,1,217,1,217,1,217,1,217,1,217,5,217,2270,8,217,10,217,12,217,
2273,9,217,1,217,1,217,3,217,2277,8,217,1,217,1,217,1,217,3,217,2282,8,217,
1,217,1,217,1,218,3,218,2287,8,218,1,218,1,218,3,218,2291,8,218,1,218,1,
218,1,218,1,218,1,218,1,218,3,218,2299,8,218,1,218,1,218,1,219,1,219,1,219,
1,219,1,219,3,219,2308,8,219,1,219,1,219,3,219,2312,8,219,1,220,5,220,2315,
8,220,10,220,12,220,2318,9,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
3,221,2327,8,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,
223,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,1,225,1,225,3,
225,2350,8,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,2358,8,225,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,3,226,2367,8,226,1,226,3,226,2370,8,
226,1,226,1,226,1,227,1,227,1,227,1,228,1,228,1,228,1,228,1,228,1,228,1,
228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,2390,8,228,1,229,5,229,2393,
8,229,10,229,12,229,2396,9,229,1,230,1,230,1,231,1,231,3,231,2402,8,231,
1,232,1,232,1,232,1,232,1,232,1,232,3,232,2410,8,232,1,233,3,233,2413,8,
233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,2421,8,233,1,233,1,233,1,233,
1,234,5,234,2427,8,234,10,234,12,234,2430,9,234,1,235,1,235,1,235,1,235,
1,235,1,235,1,236,1,236,3,236,2440,8,236,1,236,3,236,2443,8,236,1,236,3,
236,2446,8,236,1,237,1,237,1,237,1,237,3,237,2452,8,237,1,238,1,238,3,238,
2456,8,238,1,239,1,239,1,239,1,239,5,239,2462,8,239,10,239,12,239,2465,9,
239,1,240,1,240,1,240,3,240,2470,8,240,1,241,1,241,1,241,1,241,1,241,1,241,
1,242,1,242,3,242,2480,8,242,1,242,1,242,3,242,2484,8,242,1,242,1,242,1,
243,1,243,1,243,1,244,1,244,1,244,1,245,1,245,1,245,1,245,3,245,2498,8,245,
1,245,1,245,1,246,1,246,1,246,1,246,3,246,2506,8,246,1,247,1,247,1,247,1,
247,1,247,5,247,2513,8,247,10,247,12,247,2516,9,247,1,247,1,247,1,247,1,
247,1,248,1,248,1,248,1,248,1,248,5,248,2527,8,248,10,248,12,248,2530,9,
248,1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,5,249,2540,8,249,10,
249,12,249,2543,9,249,1,249,1,249,1,250,3,250,2548,8,250,1,250,1,250,1,250,
1,250,1,250,1,251,3,251,2556,8,251,1,251,1,251,1,251,1,251,1,251,1,251,3,
251,2564,8,251,1,251,1,251,1,252,3,252,2569,8,252,1,252,1,252,3,252,2573,
8,252,1,252,3,252,2576,8,252,1,252,3,252,2579,8,252,1,252,1,252,1,253,1,
253,1,253,5,253,2586,8,253,10,253,12,253,2589,9,253,1,253,3,253,2592,8,253,
1,254,1,254,1,254,3,254,2597,8,254,1,254,0,0,255,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
508,0,15,3,0,112,112,117,117,158,158,2,0,140,140,148,149,2,0,23,23,97,97,
17,0,8,8,19,21,25,25,29,29,31,31,34,34,42,42,46,46,51,51,64,64,68,68,71,
71,86,86,92,94,100,100,102,102,105,105,1,0,118,119,2,0,38,38,63,63,5,0,7,
7,50,50,55,55,61,61,110,111,5,0,16,16,38,38,40,40,45,45,63,63,3,0,49,49,
75,75,146,147,3,0,131,132,134,134,150,152,3,0,81,82,87,88,90,91,2,0,17,17,
78,78,1,0,148,149,2,0,31,31,68,68,2,0,37,37,70,70,2797,0,510,1,0,0,0,2,512,
1,0,0,0,4,515,1,0,0,0,6,527,1,0,0,0,8,529,1,0,0,0,10,537,1,0,0,0,12,539,
1,0,0,0,14,541,1,0,0,0,16,552,1,0,0,0,18,568,1,0,0,0,20,572,1,0,0,0,22,574,
1,0,0,0,24,579,1,0,0,0,26,599,1,0,0,0,28,623,1,0,0,0,30,628,1,0,0,0,32,633,
1,0,0,0,34,637,1,0,0,0,36,639,1,0,0,0,38,650,1,0,0,0,40,658,1,0,0,0,42,662,
1,0,0,0,44,670,1,0,0,0,46,682,1,0,0,0,48,684,1,0,0,0,50,692,1,0,0,0,52,697,
1,0,0,0,54,705,1,0,0,0,56,745,1,0,0,0,58,750,1,0,0,0,60,759,1,0,0,0,62,777,
1,0,0,0,64,779,1,0,0,0,66,804,1,0,0,0,68,807,1,0,0,0,70,818,1,0,0,0,72,824,
1,0,0,0,74,832,1,0,0,0,76,837,1,0,0,0,78,850,1,0,0,0,80,867,1,0,0,0,82,876,
1,0,0,0,84,878,1,0,0,0,86,886,1,0,0,0,88,900,1,0,0,0,90,918,1,0,0,0,92,928,
1,0,0,0,94,934,1,0,0,0,96,938,1,0,0,0,98,941,1,0,0,0,100,950,1,0,0,0,102,
966,1,0,0,0,104,975,1,0,0,0,106,984,1,0,0,0,108,986,1,0,0,0,110,989,1,0,
0,0,112,995,1,0,0,0,114,1004,1,0,0,0,116,1023,1,0,0,0,118,1028,1,0,0,0,120,
1033,1,0,0,0,122,1035,1,0,0,0,124,1040,1,0,0,0,126,1050,1,0,0,0,128,1055,
1,0,0,0,130,1062,1,0,0,0,132,1067,1,0,0,0,134,1072,1,0,0,0,136,1080,1,0,
0,0,138,1085,1,0,0,0,140,1090,1,0,0,0,142,1095,1,0,0,0,144,1097,1,0,0,0,
146,1099,1,0,0,0,148,1107,1,0,0,0,150,1112,1,0,0,0,152,1116,1,0,0,0,154,
1121,1,0,0,0,156,1123,1,0,0,0,158,1136,1,0,0,0,160,1138,1,0,0,0,162,1140,
1,0,0,0,164,1144,1,0,0,0,166,1152,1,0,0,0,168,1190,1,0,0,0,170,1195,1,0,
0,0,172,1198,1,0,0,0,174,1203,1,0,0,0,176,1218,1,0,0,0,178,1220,1,0,0,0,
180,1227,1,0,0,0,182,1232,1,0,0,0,184,1238,1,0,0,0,186,1242,1,0,0,0,188,
1244,1,0,0,0,190,1256,1,0,0,0,192,1268,1,0,0,0,194,1286,1,0,0,0,196,1288,
1,0,0,0,198,1297,1,0,0,0,200,1301,1,0,0,0,202,1306,1,0,0,0,204,1310,1,0,
0,0,206,1318,1,0,0,0,208,1320,1,0,0,0,210,1330,1,0,0,0,212,1359,1,0,0,0,
214,1361,1,0,0,0,216,1367,1,0,0,0,218,1375,1,0,0,0,220,1383,1,0,0,0,222,
1385,1,0,0,0,224,1393,1,0,0,0,226,1401,1,0,0,0,228,1409,1,0,0,0,230,1413,
1,0,0,0,232,1415,1,0,0,0,234,1424,1,0,0,0,236,1451,1,0,0,0,238,1464,1,0,
0,0,240,1466,1,0,0,0,242,1484,1,0,0,0,244,1496,1,0,0,0,246,1499,1,0,0,0,
248,1517,1,0,0,0,250,1519,1,0,0,0,252,1521,1,0,0,0,254,1526,1,0,0,0,256,
1534,1,0,0,0,258,1542,1,0,0,0,260,1550,1,0,0,0,262,1561,1,0,0,0,264,1574,
1,0,0,0,266,1588,1,0,0,0,268,1594,1,0,0,0,270,1610,1,0,0,0,272,1612,1,0,
0,0,274,1615,1,0,0,0,276,1621,1,0,0,0,278,1628,1,0,0,0,280,1630,1,0,0,0,
282,1632,1,0,0,0,284,1640,1,0,0,0,286,1643,1,0,0,0,288,1657,1,0,0,0,290,
1659,1,0,0,0,292,1663,1,0,0,0,294,1675,1,0,0,0,296,1677,1,0,0,0,298,1687,
1,0,0,0,300,1691,1,0,0,0,302,1695,1,0,0,0,304,1700,1,0,0,0,306,1710,1,0,
0,0,308,1718,1,0,0,0,310,1720,1,0,0,0,312,1725,1,0,0,0,314,1739,1,0,0,0,
316,1747,1,0,0,0,318,1750,1,0,0,0,320,1755,1,0,0,0,322,1781,1,0,0,0,324,
1786,1,0,0,0,326,1789,1,0,0,0,328,1821,1,0,0,0,330,1826,1,0,0,0,332,1829,
1,0,0,0,334,1833,1,0,0,0,336,1836,1,0,0,0,338,1850,1,0,0,0,340,1856,1,0,
0,0,342,1858,1,0,0,0,344,1873,1,0,0,0,346,1878,1,0,0,0,348,1892,1,0,0,0,
350,1897,1,0,0,0,352,1903,1,0,0,0,354,1906,1,0,0,0,356,1914,1,0,0,0,358,
1932,1,0,0,0,360,1937,1,0,0,0,362,1941,1,0,0,0,364,1972,1,0,0,0,366,1975,
1,0,0,0,368,1987,1,0,0,0,370,1999,1,0,0,0,372,2001,1,0,0,0,374,2007,1,0,
0,0,376,2009,1,0,0,0,378,2015,1,0,0,0,380,2018,1,0,0,0,382,2029,1,0,0,0,
384,2040,1,0,0,0,386,2046,1,0,0,0,388,2049,1,0,0,0,390,2060,1,0,0,0,392,
2068,1,0,0,0,394,2078,1,0,0,0,396,2082,1,0,0,0,398,2084,1,0,0,0,400,2089,
1,0,0,0,402,2098,1,0,0,0,404,2111,1,0,0,0,406,2114,1,0,0,0,408,2125,1,0,
0,0,410,2146,1,0,0,0,412,2148,1,0,0,0,414,2154,1,0,0,0,416,2157,1,0,0,0,
418,2167,1,0,0,0,420,2180,1,0,0,0,422,2192,1,0,0,0,424,2194,1,0,0,0,426,
2212,1,0,0,0,428,2224,1,0,0,0,430,2234,1,0,0,0,432,2240,1,0,0,0,434,2258,
1,0,0,0,436,2286,1,0,0,0,438,2311,1,0,0,0,440,2316,1,0,0,0,442,2326,1,0,
0,0,444,2328,1,0,0,0,446,2335,1,0,0,0,448,2341,1,0,0,0,450,2347,1,0,0,0,
452,2359,1,0,0,0,454,2373,1,0,0,0,456,2389,1,0,0,0,458,2394,1,0,0,0,460,
2397,1,0,0,0,462,2401,1,0,0,0,464,2403,1,0,0,0,466,2412,1,0,0,0,468,2428,
1,0,0,0,470,2431,1,0,0,0,472,2437,1,0,0,0,474,2451,1,0,0,0,476,2455,1,0,
0,0,478,2457,1,0,0,0,480,2466,1,0,0,0,482,2471,1,0,0,0,484,2477,1,0,0,0,
486,2487,1,0,0,0,488,2490,1,0,0,0,490,2493,1,0,0,0,492,2505,1,0,0,0,494,
2507,1,0,0,0,496,2521,1,0,0,0,498,2535,1,0,0,0,500,2547,1,0,0,0,502,2555,
1,0,0,0,504,2568,1,0,0,0,506,2591,1,0,0,0,508,2593,1,0,0,0,510,511,7,0,0,
0,511,1,1,0,0,0,512,513,5,2,0,0,513,514,3,472,236,0,514,3,1,0,0,0,515,517,
3,232,116,0,516,518,3,488,244,0,517,516,1,0,0,0,517,518,1,0,0,0,518,521,
1,0,0,0,519,520,5,135,0,0,520,522,3,192,96,0,521,519,1,0,0,0,521,522,1,0,
0,0,522,523,1,0,0,0,523,524,5,3,0,0,524,5,1,0,0,0,525,528,3,192,96,0,526,
528,5,60,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,7,1,0,0,0,529,530,3,42,
21,0,530,9,1,0,0,0,531,532,3,292,146,0,532,533,5,141,0,0,533,534,3,6,3,0,
534,535,5,142,0,0,535,538,1,0,0,0,536,538,3,6,3,0,537,531,1,0,0,0,537,536,
1,0,0,0,538,11,1,0,0,0,539,540,7,1,0,0,540,13,1,0,0,0,541,542,5,141,0,0,
542,547,3,150,75,0,543,544,5,139,0,0,544,546,3,150,75,0,545,543,1,0,0,0,
546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,
1,0,0,0,550,551,5,142,0,0,551,15,1,0,0,0,552,553,5,5,0,0,553,556,3,18,9,
0,554,555,5,145,0,0,555,557,3,20,10,0,556,554,1,0,0,0,556,557,1,0,0,0,557,
558,1,0,0,0,558,559,5,41,0,0,559,561,3,292,146,0,560,562,3,424,212,0,561,
560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,5,138,0,0,564,17,1,0,
0,0,565,569,3,230,115,0,566,569,5,126,0,0,567,569,5,127,0,0,568,565,1,0,
0,0,568,566,1,0,0,0,568,567,1,0,0,0,569,19,1,0,0,0,570,573,3,450,225,0,571,
573,3,472,236,0,572,570,1,0,0,0,572,571,1,0,0,0,573,21,1,0,0,0,574,577,5,
52,0,0,575,578,3,366,183,0,576,578,3,472,236,0,577,575,1,0,0,0,577,576,1,
0,0,0,578,23,1,0,0,0,579,580,5,8,0,0,580,581,3,230,115,0,581,582,5,58,0,
0,582,583,3,230,115,0,583,584,5,41,0,0,584,585,3,26,13,0,585,586,5,12,0,
0,586,587,3,30,15,0,587,589,5,24,0,0,588,590,5,8,0,0,589,588,1,0,0,0,589,
590,1,0,0,0,590,592,1,0,0,0,591,593,3,230,115,0,592,591,1,0,0,0,592,593,
1,0,0,0,593,594,1,0,0,0,594,595,5,138,0,0,595,25,1,0,0,0,596,598,3,56,28,
0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,27,
1,0,0,0,601,599,1,0,0,0,602,624,3,64,32,0,603,624,3,362,181,0,604,606,3,
272,136,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,624,3,102,
51,0,608,610,3,272,136,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,
611,624,3,98,49,0,612,614,3,272,136,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
616,1,0,0,0,615,617,5,66,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,
0,0,618,624,3,104,52,0,619,624,3,90,45,0,620,624,3,210,105,0,621,624,3,100,
50,0,622,624,3,438,219,0,623,602,1,0,0,0,623,603,1,0,0,0,623,605,1,0,0,0,
623,609,1,0,0,0,623,613,1,0,0,0,623,619,1,0,0,0,623,620,1,0,0,0,623,621,
1,0,0,0,623,622,1,0,0,0,624,29,1,0,0,0,625,627,3,28,14,0,626,625,1,0,0,0,
627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,31,1,0,0,0,630,628,1,
0,0,0,631,634,3,496,248,0,632,634,3,128,64,0,633,631,1,0,0,0,633,632,1,0,
0,0,634,33,1,0,0,0,635,638,3,494,247,0,636,638,3,126,63,0,637,635,1,0,0,
0,637,636,1,0,0,0,638,35,1,0,0,0,639,640,5,10,0,0,640,643,3,106,53,0,641,
642,5,79,0,0,642,644,3,192,96,0,643,641,1,0,0,0,643,644,1,0,0,0,644,647,
1,0,0,0,645,646,5,84,0,0,646,648,3,192,96,0,647,645,1,0,0,0,647,648,1,0,
0,0,648,37,1,0,0,0,649,651,3,272,136,0,650,649,1,0,0,0,650,651,1,0,0,0,651,
652,1,0,0,0,652,653,3,36,18,0,653,654,5,138,0,0,654,39,1,0,0,0,655,656,3,
206,103,0,656,657,5,133,0,0,657,659,1,0,0,0,658,655,1,0,0,0,658,659,1,0,
0,0,659,660,1,0,0,0,660,661,3,10,5,0,661,41,1,0,0,0,662,667,3,40,20,0,663,
664,5,139,0,0,664,666,3,40,20,0,665,663,1,0,0,0,666,669,1,0,0,0,667,665,
1,0,0,0,667,668,1,0,0,0,668,43,1,0,0,0,669,667,1,0,0,0,670,671,5,11,0,0,
671,672,3,272,136,0,672,673,3,292,146,0,673,674,5,138,0,0,674,45,1,0,0,0,
675,683,3,230,115,0,676,683,5,72,0,0,677,683,5,73,0,0,678,683,5,3,0,0,679,
683,5,96,0,0,680,683,5,77,0,0,681,683,5,98,0,0,682,675,1,0,0,0,682,676,1,
0,0,0,682,677,1,0,0,0,682,678,1,0,0,0,682,679,1,0,0,0,682,680,1,0,0,0,682,
681,1,0,0,0,683,47,1,0,0,0,684,685,5,11,0,0,685,686,3,46,23,0,686,687,5,
58,0,0,687,688,3,178,89,0,688,689,5,41,0,0,689,690,3,192,96,0,690,691,5,
138,0,0,691,49,1,0,0,0,692,693,3,230,115,0,693,694,5,138,0,0,694,51,1,0,
0,0,695,696,5,104,0,0,696,698,3,158,79,0,697,695,1,0,0,0,697,698,1,0,0,0,
698,700,1,0,0,0,699,701,3,218,109,0,700,699,1,0,0,0,700,701,1,0,0,0,701,
703,1,0,0,0,702,704,3,342,171,0,703,702,1,0,0,0,703,704,1,0,0,0,704,53,1,
0,0,0,705,706,5,30,0,0,706,710,3,62,31,0,707,709,3,498,249,0,708,707,1,0,
0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,716,1,0,0,0,712,
710,1,0,0,0,713,715,3,120,60,0,714,713,1,0,0,0,715,718,1,0,0,0,716,714,1,
0,0,0,716,717,1,0,0,0,717,719,1,0,0,0,718,716,1,0,0,0,719,720,5,24,0,0,720,
721,5,30,0,0,721,722,5,138,0,0,722,55,1,0,0,0,723,746,3,454,227,0,724,746,
3,452,226,0,725,746,3,490,245,0,726,746,3,470,235,0,727,746,3,124,62,0,728,
746,3,418,209,0,729,746,3,502,251,0,730,746,3,196,98,0,731,746,3,16,8,0,
732,746,3,88,44,0,733,746,3,44,22,0,734,746,3,48,24,0,735,746,3,122,61,0,
736,746,3,146,73,0,737,746,3,446,223,0,738,746,3,498,249,0,739,746,3,226,
113,0,740,746,3,224,112,0,741,746,3,306,153,0,742,746,3,448,224,0,743,746,
3,368,184,0,744,746,3,482,241,0,745,723,1,0,0,0,745,724,1,0,0,0,745,725,
1,0,0,0,745,726,1,0,0,0,745,727,1,0,0,0,745,728,1,0,0,0,745,729,1,0,0,0,
745,730,1,0,0,0,745,731,1,0,0,0,745,732,1,0,0,0,745,733,1,0,0,0,745,734,
1,0,0,0,745,735,1,0,0,0,745,736,1,0,0,0,745,737,1,0,0,0,745,738,1,0,0,0,
745,739,1,0,0,0,745,740,1,0,0,0,745,741,1,0,0,0,745,742,1,0,0,0,745,743,
1,0,0,0,745,744,1,0,0,0,746,57,1,0,0,0,747,749,3,56,28,0,748,747,1,0,0,0,
749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,59,1,0,0,0,752,750,1,
0,0,0,753,757,3,214,107,0,754,755,3,218,109,0,755,756,5,138,0,0,756,758,
1,0,0,0,757,754,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,753,1,0,0,0,
759,760,1,0,0,0,760,767,1,0,0,0,761,765,3,338,169,0,762,763,3,342,171,0,
763,764,5,138,0,0,764,766,1,0,0,0,765,762,1,0,0,0,765,766,1,0,0,0,766,768,
1,0,0,0,767,761,1,0,0,0,767,768,1,0,0,0,768,61,1,0,0,0,769,774,3,230,115,
0,770,771,5,141,0,0,771,772,3,238,119,0,772,773,5,142,0,0,773,775,1,0,0,
0,774,770,1,0,0,0,774,775,1,0,0,0,775,778,1,0,0,0,776,778,3,292,146,0,777,
769,1,0,0,0,777,776,1,0,0,0,778,63,1,0,0,0,779,780,3,272,136,0,780,785,5,
13,0,0,781,782,5,141,0,0,782,783,3,192,96,0,783,784,5,142,0,0,784,786,1,
0,0,0,785,781,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,789,5,41,0,0,788,
787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,3,60,30,0,791,792,3,
58,29,0,792,793,5,12,0,0,793,794,3,66,33,0,794,795,5,24,0,0,795,797,5,13,
0,0,796,798,3,230,115,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,
799,800,5,138,0,0,800,65,1,0,0,0,801,803,3,28,14,0,802,801,1,0,0,0,803,806,
1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,67,1,0,0,0,806,804,1,0,0,0,807,
809,5,71,0,0,808,810,3,4,2,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,
0,0,811,813,3,484,242,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,
814,815,3,480,240,0,815,816,5,138,0,0,816,69,1,0,0,0,817,819,3,74,37,0,818,
817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,3,292,146,0,821,822,
5,133,0,0,822,823,3,192,96,0,823,71,1,0,0,0,824,829,3,70,35,0,825,826,5,
139,0,0,826,828,3,70,35,0,827,825,1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,
0,829,830,1,0,0,0,830,73,1,0,0,0,831,829,1,0,0,0,832,833,5,30,0,0,833,834,
3,292,146,0,834,835,5,104,0,0,835,75,1,0,0,0,836,838,3,272,136,0,837,836,
1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,841,5,15,0,0,840,842,3,72,36,
0,841,840,1,0,0,0,841,842,1,0,0,0,842,845,1,0,0,0,843,844,5,108,0,0,844,
846,3,106,53,0,845,843,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,848,5,
138,0,0,848,77,1,0,0,0,849,851,3,272,136,0,850,849,1,0,0,0,850,851,1,0,0,
0,851,852,1,0,0,0,852,853,5,18,0,0,853,854,3,192,96,0,854,856,5,41,0,0,855,
857,3,80,40,0,856,855,1,0,0,0,857,858,1,0,0,0,858,856,1,0,0,0,858,859,1,
0,0,0,859,860,1,0,0,0,860,861,5,24,0,0,861,863,5,18,0,0,862,864,3,230,115,
0,863,862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,138,0,0,866,
79,1,0,0,0,867,868,5,108,0,0,868,869,3,84,42,0,869,870,5,133,0,0,870,871,
3,408,204,0,871,81,1,0,0,0,872,877,3,230,115,0,873,877,3,148,74,0,874,877,
3,426,213,0,875,877,5,62,0,0,876,872,1,0,0,0,876,873,1,0,0,0,876,874,1,0,
0,0,876,875,1,0,0,0,877,83,1,0,0,0,878,883,3,82,41,0,879,880,5,153,0,0,880,
882,3,82,41,0,881,879,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,
0,0,0,884,85,1,0,0,0,885,883,1,0,0,0,886,887,5,30,0,0,887,891,3,92,46,0,
888,889,3,52,26,0,889,890,5,138,0,0,890,892,1,0,0,0,891,888,1,0,0,0,891,
892,1,0,0,0,892,894,1,0,0,0,893,895,3,54,27,0,894,893,1,0,0,0,894,895,1,
0,0,0,895,896,1,0,0,0,896,897,5,24,0,0,897,898,5,30,0,0,898,899,5,138,0,
0,899,87,1,0,0,0,900,901,5,19,0,0,901,903,3,230,115,0,902,904,5,41,0,0,903,
902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,907,3,214,107,0,906,905,
1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,910,3,338,169,0,909,908,1,0,
0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,912,5,24,0,0,912,914,5,19,0,0,913,
915,3,230,115,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,
5,138,0,0,917,89,1,0,0,0,918,919,3,272,136,0,919,921,3,242,121,0,920,922,
3,218,109,0,921,920,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,925,3,342,
171,0,924,923,1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,927,5,138,0,0,
927,91,1,0,0,0,928,929,3,244,122,0,929,930,5,145,0,0,930,931,3,292,146,0,
931,93,1,0,0,0,932,935,3,32,16,0,933,935,3,380,190,0,934,932,1,0,0,0,934,
933,1,0,0,0,935,95,1,0,0,0,936,939,3,34,17,0,937,939,3,382,191,0,938,936,
1,0,0,0,938,937,1,0,0,0,939,97,1,0,0,0,940,942,3,272,136,0,941,940,1,0,0,
0,941,942,1,0,0,0,942,944,1,0,0,0,943,945,5,66,0,0,944,943,1,0,0,0,944,945,
1,0,0,0,945,946,1,0,0,0,946,947,3,36,18,0,947,948,5,138,0,0,948,99,1,0,0,
0,949,951,3,272,136,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,
954,5,15,0,0,953,955,3,72,36,0,954,953,1,0,0,0,954,955,1,0,0,0,955,957,1,
0,0,0,956,958,3,404,202,0,957,956,1,0,0,0,957,958,1,0,0,0,958,961,1,0,0,
0,959,960,5,108,0,0,960,962,3,106,53,0,961,959,1,0,0,0,961,962,1,0,0,0,962,
963,1,0,0,0,963,964,5,138,0,0,964,101,1,0,0,0,965,967,3,272,136,0,966,965,
1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,970,5,66,0,0,969,968,1,0,0,0,
969,970,1,0,0,0,970,971,1,0,0,0,971,972,3,354,177,0,972,973,5,138,0,0,973,
103,1,0,0,0,974,976,3,272,136,0,975,974,1,0,0,0,975,976,1,0,0,0,976,978,
1,0,0,0,977,979,5,66,0,0,978,977,1,0,0,0,978,979,1,0,0,0,979,982,1,0,0,0,
980,983,3,110,55,0,981,983,3,400,200,0,982,980,1,0,0,0,982,981,1,0,0,0,983,
105,1,0,0,0,984,985,3,192,96,0,985,107,1,0,0,0,986,987,5,103,0,0,987,988,
3,106,53,0,988,109,1,0,0,0,989,990,3,476,238,0,990,991,5,131,0,0,991,992,
3,318,159,0,992,993,3,112,56,0,993,994,5,138,0,0,994,111,1,0,0,0,995,1002,
3,506,253,0,996,997,5,108,0,0,997,1000,3,106,53,0,998,999,5,26,0,0,999,1001,
3,112,56,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1003,1,0,0,0,1002,996,
1,0,0,0,1002,1003,1,0,0,0,1003,113,1,0,0,0,1004,1005,5,20,0,0,1005,1006,
3,230,115,0,1006,1007,5,58,0,0,1007,1008,3,292,146,0,1008,1009,5,41,0,0,
1009,1010,3,118,59,0,1010,1011,3,54,27,0,1011,1013,5,24,0,0,1012,1014,5,
20,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,0,0,0,1015,1017,3,
230,115,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,
5,138,0,0,1019,115,1,0,0,0,1020,1024,3,498,249,0,1021,1024,3,48,24,0,1022,
1024,3,224,112,0,1023,1020,1,0,0,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,
117,1,0,0,0,1025,1027,3,116,58,0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,
1026,1,0,0,0,1028,1029,1,0,0,0,1029,119,1,0,0,0,1030,1028,1,0,0,0,1031,1034,
3,54,27,0,1032,1034,3,86,43,0,1033,1031,1,0,0,0,1033,1032,1,0,0,0,1034,121,
1,0,0,0,1035,1036,5,30,0,0,1036,1037,3,92,46,0,1037,1038,3,52,26,0,1038,
1039,5,138,0,0,1039,123,1,0,0,0,1040,1041,5,21,0,0,1041,1042,3,232,116,0,
1042,1043,5,145,0,0,1043,1046,3,472,236,0,1044,1045,5,135,0,0,1045,1047,
3,192,96,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,
5,138,0,0,1049,125,1,0,0,0,1050,1051,5,9,0,0,1051,1052,3,236,118,0,1052,
1053,5,58,0,0,1053,1054,3,472,236,0,1054,127,1,0,0,0,1055,1056,5,9,0,0,1056,
1057,3,236,118,0,1057,1058,5,58,0,0,1058,1059,3,450,225,0,1059,129,1,0,0,
0,1060,1063,3,378,189,0,1061,1063,3,236,118,0,1062,1060,1,0,0,0,1062,1061,
1,0,0,0,1063,131,1,0,0,0,1064,1066,3,134,67,0,1065,1064,1,0,0,0,1066,1069,
1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,133,1,0,0,0,1069,1067,1,
0,0,0,1070,1073,3,274,137,0,1071,1073,3,498,249,0,1072,1070,1,0,0,0,1072,
1071,1,0,0,0,1073,135,1,0,0,0,1074,1081,5,99,0,0,1075,1076,5,74,0,0,1076,
1078,3,192,96,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1079,1,0,0,0,1079,
1081,5,39,0,0,1080,1074,1,0,0,0,1080,1077,1,0,0,0,1081,137,1,0,0,0,1082,
1084,3,140,70,0,1083,1082,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1085,
1086,1,0,0,0,1086,1088,1,0,0,0,1087,1085,1,0,0,0,1088,1089,5,0,0,1,1089,
139,1,0,0,0,1090,1091,3,132,66,0,1091,1092,3,276,138,0,1092,141,1,0,0,0,
1093,1096,3,230,115,0,1094,1096,5,127,0,0,1095,1093,1,0,0,0,1095,1094,1,
0,0,0,1096,143,1,0,0,0,1097,1098,7,2,0,0,1098,145,1,0,0,0,1099,1100,5,22,
0,0,1100,1101,3,228,114,0,1101,1102,5,4,0,0,1102,1103,3,192,96,0,1103,1104,
5,138,0,0,1104,147,1,0,0,0,1105,1108,3,374,187,0,1106,1108,3,472,236,0,1107,
1105,1,0,0,0,1107,1106,1,0,0,0,1108,149,1,0,0,0,1109,1110,3,84,42,0,1110,
1111,5,133,0,0,1111,1113,1,0,0,0,1112,1109,1,0,0,0,1112,1113,1,0,0,0,1113,
1114,1,0,0,0,1114,1115,3,192,96,0,1115,151,1,0,0,0,1116,1117,3,232,116,0,
1117,1118,5,145,0,0,1118,1119,3,156,78,0,1119,1120,5,138,0,0,1120,153,1,
0,0,0,1121,1122,3,450,225,0,1122,155,1,0,0,0,1123,1124,3,472,236,0,1124,
157,1,0,0,0,1125,1126,5,25,0,0,1126,1131,3,292,146,0,1127,1128,5,141,0,0,
1128,1129,3,230,115,0,1129,1130,5,142,0,0,1130,1132,1,0,0,0,1131,1127,1,
0,0,0,1131,1132,1,0,0,0,1132,1137,1,0,0,0,1133,1134,5,20,0,0,1134,1137,3,
292,146,0,1135,1137,5,60,0,0,1136,1125,1,0,0,0,1136,1133,1,0,0,0,1136,1135,
1,0,0,0,1137,159,1,0,0,0,1138,1139,7,3,0,0,1139,161,1,0,0,0,1140,1142,3,
160,80,0,1141,1143,5,136,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,163,
1,0,0,0,1144,1149,3,162,81,0,1145,1146,5,139,0,0,1146,1148,3,162,81,0,1147,
1145,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,
165,1,0,0,0,1151,1149,1,0,0,0,1152,1153,5,25,0,0,1153,1154,3,230,115,0,1154,
1155,5,41,0,0,1155,1156,3,174,87,0,1156,1159,3,170,85,0,1157,1158,5,12,0,
0,1158,1160,3,182,91,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,
0,0,1161,1163,5,24,0,0,1162,1164,5,25,0,0,1163,1162,1,0,0,0,1163,1164,1,
0,0,0,1164,1166,1,0,0,0,1165,1167,3,230,115,0,1166,1165,1,0,0,0,1166,1167,
1,0,0,0,1167,1168,1,0,0,0,1168,1169,5,138,0,0,1169,167,1,0,0,0,1170,1191,
3,454,227,0,1171,1191,3,452,226,0,1172,1191,3,490,245,0,1173,1191,3,470,
235,0,1174,1191,3,124,62,0,1175,1191,3,418,209,0,1176,1191,3,502,251,0,1177,
1191,3,196,98,0,1178,1191,3,16,8,0,1179,1191,3,44,22,0,1180,1191,3,48,24,
0,1181,1191,3,146,73,0,1182,1191,3,446,223,0,1183,1191,3,498,249,0,1184,
1191,3,226,113,0,1185,1191,3,224,112,0,1186,1191,3,306,153,0,1187,1191,3,
448,224,0,1188,1191,3,368,184,0,1189,1191,3,482,241,0,1190,1170,1,0,0,0,
1190,1171,1,0,0,0,1190,1172,1,0,0,0,1190,1173,1,0,0,0,1190,1174,1,0,0,0,
1190,1175,1,0,0,0,1190,1176,1,0,0,0,1190,1177,1,0,0,0,1190,1178,1,0,0,0,
1190,1179,1,0,0,0,1190,1180,1,0,0,0,1190,1181,1,0,0,0,1190,1182,1,0,0,0,
1190,1183,1,0,0,0,1190,1184,1,0,0,0,1190,1185,1,0,0,0,1190,1186,1,0,0,0,
1190,1187,1,0,0,0,1190,1188,1,0,0,0,1190,1189,1,0,0,0,1191,169,1,0,0,0,1192,
1194,3,168,84,0,1193,1192,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,
1196,1,0,0,0,1196,171,1,0,0,0,1197,1195,1,0,0,0,1198,1200,3,184,92,0,1199,
1201,3,424,212,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,173,1,0,0,0,1202,
1204,3,214,107,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,
1207,3,338,169,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,175,1,0,0,0,1208,
1213,3,172,86,0,1209,1210,5,139,0,0,1210,1212,3,172,86,0,1211,1209,1,0,0,
0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1219,1,0,0,
0,1215,1213,1,0,0,0,1216,1219,5,62,0,0,1217,1219,5,6,0,0,1218,1208,1,0,0,
0,1218,1216,1,0,0,0,1218,1217,1,0,0,0,1219,177,1,0,0,0,1220,1221,3,176,88,
0,1221,1222,5,145,0,0,1222,1223,3,160,80,0,1223,179,1,0,0,0,1224,1228,3,
98,49,0,1225,1228,3,362,181,0,1226,1228,3,102,51,0,1227,1224,1,0,0,0,1227,
1225,1,0,0,0,1227,1226,1,0,0,0,1228,181,1,0,0,0,1229,1231,3,180,90,0,1230,
1229,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,
183,1,0,0,0,1234,1232,1,0,0,0,1235,1239,3,230,115,0,1236,1239,5,126,0,0,
1237,1239,5,127,0,0,1238,1235,1,0,0,0,1238,1236,1,0,0,0,1238,1237,1,0,0,
0,1239,185,1,0,0,0,1240,1243,3,230,115,0,1241,1243,5,126,0,0,1242,1240,1,
0,0,0,1242,1241,1,0,0,0,1243,187,1,0,0,0,1244,1245,5,141,0,0,1245,1250,3,
186,93,0,1246,1247,5,139,0,0,1247,1249,3,186,93,0,1248,1246,1,0,0,0,1249,
1252,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1253,1,0,0,0,1252,
1250,1,0,0,0,1253,1254,5,142,0,0,1254,189,1,0,0,0,1255,1257,3,272,136,0,
1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1260,5,28,0,0,
1259,1261,3,230,115,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1264,1,0,
0,0,1262,1263,5,108,0,0,1263,1265,3,106,53,0,1264,1262,1,0,0,0,1264,1265,
1,0,0,0,1265,1266,1,0,0,0,1266,1267,5,138,0,0,1267,191,1,0,0,0,1268,1274,
3,384,192,0,1269,1270,3,284,142,0,1270,1271,3,384,192,0,1271,1273,1,0,0,
0,1272,1269,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,
0,1275,193,1,0,0,0,1276,1274,1,0,0,0,1277,1280,3,344,172,0,1278,1279,5,129,
0,0,1279,1281,3,344,172,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,1287,
1,0,0,0,1282,1283,5,1,0,0,1283,1287,3,344,172,0,1284,1285,5,56,0,0,1285,
1287,3,344,172,0,1286,1277,1,0,0,0,1286,1282,1,0,0,0,1286,1284,1,0,0,0,1287,
195,1,0,0,0,1288,1289,5,29,0,0,1289,1290,3,232,116,0,1290,1291,5,145,0,0,
1291,1293,3,472,236,0,1292,1294,3,200,100,0,1293,1292,1,0,0,0,1293,1294,
1,0,0,0,1294,1295,1,0,0,0,1295,1296,5,138,0,0,1296,197,1,0,0,0,1297,1298,
3,192,96,0,1298,199,1,0,0,0,1299,1300,5,60,0,0,1300,1302,3,192,96,0,1301,
1299,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,5,41,0,0,1304,
1305,3,198,99,0,1305,201,1,0,0,0,1306,1307,5,29,0,0,1307,1308,5,58,0,0,1308,
1309,3,472,236,0,1309,203,1,0,0,0,1310,1311,3,258,129,0,1311,205,1,0,0,0,
1312,1319,3,230,115,0,1313,1314,3,230,115,0,1314,1315,5,141,0,0,1315,1316,
3,376,188,0,1316,1317,5,142,0,0,1317,1319,1,0,0,0,1318,1312,1,0,0,0,1318,
1313,1,0,0,0,1319,207,1,0,0,0,1320,1321,5,71,0,0,1321,1322,3,232,116,0,1322,
1323,5,145,0,0,1323,1326,3,472,236,0,1324,1325,5,135,0,0,1325,1327,3,192,
96,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1329,5,138,
0,0,1329,209,1,0,0,0,1330,1331,3,272,136,0,1331,1332,3,212,106,0,1332,1340,
5,32,0,0,1333,1335,3,56,28,0,1334,1333,1,0,0,0,1335,1338,1,0,0,0,1336,1334,
1,0,0,0,1336,1337,1,0,0,0,1337,1339,1,0,0,0,1338,1336,1,0,0,0,1339,1341,
5,12,0,0,1340,1336,1,0,0,0,1340,1341,1,0,0,0,1341,1345,1,0,0,0,1342,1344,
3,28,14,0,1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,
1,0,0,0,1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1349,5,24,0,0,1349,1351,
5,32,0,0,1350,1352,3,230,115,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,
1353,1,0,0,0,1353,1354,5,138,0,0,1354,211,1,0,0,0,1355,1356,5,30,0,0,1356,
1360,3,332,166,0,1357,1358,5,36,0,0,1358,1360,3,106,53,0,1359,1355,1,0,0,
0,1359,1357,1,0,0,0,1360,213,1,0,0,0,1361,1362,5,33,0,0,1362,1363,5,141,
0,0,1363,1364,3,216,108,0,1364,1365,5,142,0,0,1365,1366,5,138,0,0,1366,215,
1,0,0,0,1367,1372,3,246,123,0,1368,1369,5,138,0,0,1369,1371,3,246,123,0,
1370,1368,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,
1373,217,1,0,0,0,1374,1372,1,0,0,0,1375,1376,5,33,0,0,1376,1377,5,48,0,0,
1377,1378,5,141,0,0,1378,1379,3,42,21,0,1379,1380,5,142,0,0,1380,219,1,0,
0,0,1381,1384,3,292,146,0,1382,1384,5,126,0,0,1383,1381,1,0,0,0,1383,1382,
1,0,0,0,1384,221,1,0,0,0,1385,1390,3,220,110,0,1386,1387,5,139,0,0,1387,
1389,3,220,110,0,1388,1386,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,
1391,1,0,0,0,1391,223,1,0,0,0,1392,1390,1,0,0,0,1393,1394,5,34,0,0,1394,
1395,3,272,136,0,1395,1396,3,292,146,0,1396,1397,5,141,0,0,1397,1398,3,222,
111,0,1398,1399,5,142,0,0,1399,1400,5,138,0,0,1400,225,1,0,0,0,1401,1402,
5,34,0,0,1402,1403,3,230,115,0,1403,1404,5,41,0,0,1404,1405,5,141,0,0,1405,
1406,3,164,82,0,1406,1407,5,142,0,0,1407,1408,5,138,0,0,1408,227,1,0,0,0,
1409,1410,3,422,211,0,1410,1411,5,145,0,0,1411,1412,3,292,146,0,1412,229,
1,0,0,0,1413,1414,7,4,0,0,1414,231,1,0,0,0,1415,1420,3,230,115,0,1416,1417,
5,139,0,0,1417,1419,3,230,115,0,1418,1416,1,0,0,0,1419,1422,1,0,0,0,1420,
1418,1,0,0,0,1420,1421,1,0,0,0,1421,233,1,0,0,0,1422,1420,1,0,0,0,1423,1425,
3,272,136,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,
5,36,0,0,1427,1428,3,106,53,0,1428,1429,5,95,0,0,1429,1437,3,408,204,0,1430,
1431,5,27,0,0,1431,1432,3,106,53,0,1432,1433,5,95,0,0,1433,1434,3,408,204,
0,1434,1436,1,0,0,0,1435,1430,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,
0,1437,1438,1,0,0,0,1438,1442,1,0,0,0,1439,1437,1,0,0,0,1440,1441,5,26,0,
0,1441,1443,3,408,204,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,
0,0,0,1444,1445,5,24,0,0,1445,1447,5,36,0,0,1446,1448,3,230,115,0,1447,1446,
1,0,0,0,1447,1448,1,0,0,0,1448,1449,1,0,0,0,1449,1450,5,138,0,0,1450,235,
1,0,0,0,1451,1452,5,141,0,0,1452,1457,3,148,74,0,1453,1454,5,139,0,0,1454,
1456,3,148,74,0,1455,1453,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1457,
1458,1,0,0,0,1458,1460,1,0,0,0,1459,1457,1,0,0,0,1460,1461,5,142,0,0,1461,
237,1,0,0,0,1462,1465,3,148,74,0,1463,1465,3,192,96,0,1464,1462,1,0,0,0,
1464,1463,1,0,0,0,1465,239,1,0,0,0,1466,1467,3,292,146,0,1467,1468,5,72,
0,0,1468,1469,5,136,0,0,1469,241,1,0,0,0,1470,1472,5,19,0,0,1471,1470,1,
0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1485,3,292,146,0,1474,1475,
5,25,0,0,1475,1480,3,292,146,0,1476,1477,5,141,0,0,1477,1478,3,230,115,0,
1478,1479,5,142,0,0,1479,1481,1,0,0,0,1480,1476,1,0,0,0,1480,1481,1,0,0,
0,1481,1485,1,0,0,0,1482,1483,5,20,0,0,1483,1485,3,292,146,0,1484,1471,1,
0,0,0,1484,1474,1,0,0,0,1484,1482,1,0,0,0,1485,243,1,0,0,0,1486,1491,3,230,
115,0,1487,1488,5,139,0,0,1488,1490,3,230,115,0,1489,1487,1,0,0,0,1490,1493,
1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,1497,1,0,0,0,1493,1491,
1,0,0,0,1494,1497,5,62,0,0,1495,1497,5,6,0,0,1496,1486,1,0,0,0,1496,1494,
1,0,0,0,1496,1495,1,0,0,0,1497,245,1,0,0,0,1498,1500,5,21,0,0,1499,1498,
1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1502,3,232,116,0,1502,1504,
5,145,0,0,1503,1505,5,38,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,
1,0,0,0,1506,1509,3,472,236,0,1507,1508,5,135,0,0,1508,1510,3,192,96,0,1509,
1507,1,0,0,0,1509,1510,1,0,0,0,1510,247,1,0,0,0,1511,1518,3,246,123,0,1512,
1518,3,264,132,0,1513,1518,3,268,134,0,1514,1518,3,252,126,0,1515,1518,3,
266,133,0,1516,1518,3,260,130,0,1517,1511,1,0,0,0,1517,1512,1,0,0,0,1517,
1513,1,0,0,0,1517,1514,1,0,0,0,1517,1515,1,0,0,0,1517,1516,1,0,0,0,1518,
249,1,0,0,0,1519,1520,3,248,124,0,1520,251,1,0,0,0,1521,1522,5,29,0,0,1522,
1523,3,232,116,0,1523,1524,5,145,0,0,1524,1525,3,472,236,0,1525,253,1,0,
0,0,1526,1531,3,264,132,0,1527,1528,5,138,0,0,1528,1530,3,264,132,0,1529,
1527,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,
255,1,0,0,0,1533,1531,1,0,0,0,1534,1539,3,262,131,0,1535,1536,5,138,0,0,
1536,1538,3,262,131,0,1537,1535,1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,0,
0,0,1539,1540,1,0,0,0,1540,257,1,0,0,0,1541,1539,1,0,0,0,1542,1547,3,250,
125,0,1543,1544,5,138,0,0,1544,1546,3,250,125,0,1545,1543,1,0,0,0,1546,1549,
1,0,0,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,259,1,0,0,0,1549,1547,1,
0,0,0,1550,1551,5,71,0,0,1551,1552,3,232,116,0,1552,1554,5,145,0,0,1553,
1555,7,5,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1556,1,0,0,0,1556,
1559,3,472,236,0,1557,1558,5,135,0,0,1558,1560,3,192,96,0,1559,1557,1,0,
0,0,1559,1560,1,0,0,0,1560,261,1,0,0,0,1561,1562,3,232,116,0,1562,1564,5,
145,0,0,1563,1565,3,288,144,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1566,
1,0,0,0,1566,1568,3,472,236,0,1567,1569,5,17,0,0,1568,1567,1,0,0,0,1568,
1569,1,0,0,0,1569,1572,1,0,0,0,1570,1571,5,135,0,0,1571,1573,3,192,96,0,
1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,263,1,0,0,0,1574,1575,5,86,0,0,
1575,1576,3,232,116,0,1576,1578,5,145,0,0,1577,1579,3,288,144,0,1578,1577,
1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1582,3,472,236,0,1581,1583,
5,17,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1586,1,0,0,0,1584,1585,
5,135,0,0,1585,1587,3,192,96,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,
265,1,0,0,0,1588,1589,5,94,0,0,1589,1590,3,232,116,0,1590,1591,5,145,0,0,
1591,1592,3,450,225,0,1592,267,1,0,0,0,1593,1595,5,105,0,0,1594,1593,1,0,
0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,1597,3,232,116,0,1597,1599,
5,145,0,0,1598,1600,3,288,144,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,
1601,1,0,0,0,1601,1604,3,472,236,0,1602,1603,5,135,0,0,1603,1605,3,192,96,
0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,269,1,0,0,0,1606,1607,5,109,0,
0,1607,1611,3,106,53,0,1608,1609,5,30,0,0,1609,1611,3,332,166,0,1610,1606,
1,0,0,0,1610,1608,1,0,0,0,1611,271,1,0,0,0,1612,1613,3,230,115,0,1613,1614,
5,145,0,0,1614,273,1,0,0,0,1615,1616,5,43,0,0,1616,1617,3,282,141,0,1617,
1618,5,138,0,0,1618,275,1,0,0,0,1619,1622,3,396,198,0,1620,1622,3,346,173,
0,1621,1619,1,0,0,0,1621,1620,1,0,0,0,1622,277,1,0,0,0,1623,1629,5,57,0,
0,1624,1629,5,113,0,0,1625,1629,5,127,0,0,1626,1629,3,186,93,0,1627,1629,
3,314,157,0,1628,1623,1,0,0,0,1628,1624,1,0,0,0,1628,1625,1,0,0,0,1628,1626,
1,0,0,0,1628,1627,1,0,0,0,1629,279,1,0,0,0,1630,1631,3,230,115,0,1631,281,
1,0,0,0,1632,1637,3,280,140,0,1633,1634,5,139,0,0,1634,1636,3,280,140,0,
1635,1633,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,
1638,283,1,0,0,0,1639,1637,1,0,0,0,1640,1641,7,6,0,0,1641,285,1,0,0,0,1642,
1644,3,272,136,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,
1647,3,270,135,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,1648,1,0,0,0,1648,
1649,5,47,0,0,1649,1650,3,408,204,0,1650,1651,5,24,0,0,1651,1653,5,47,0,
0,1652,1654,3,230,115,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,
0,0,0,1655,1656,5,138,0,0,1656,287,1,0,0,0,1657,1658,7,7,0,0,1658,289,1,
0,0,0,1659,1660,7,8,0,0,1660,291,1,0,0,0,1661,1664,3,230,115,0,1662,1664,
5,127,0,0,1663,1661,1,0,0,0,1663,1662,1,0,0,0,1664,1668,1,0,0,0,1665,1667,
3,294,147,0,1666,1665,1,0,0,0,1667,1670,1,0,0,0,1668,1666,1,0,0,0,1668,1669,
1,0,0,0,1669,293,1,0,0,0,1670,1668,1,0,0,0,1671,1676,3,298,149,0,1672,1676,
3,300,150,0,1673,1676,3,302,151,0,1674,1676,3,304,152,0,1675,1671,1,0,0,
0,1675,1672,1,0,0,0,1675,1673,1,0,0,0,1675,1674,1,0,0,0,1676,295,1,0,0,0,
1677,1682,3,230,115,0,1678,1679,5,154,0,0,1679,1681,3,474,237,0,1680,1678,
1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,297,1,
0,0,0,1684,1682,1,0,0,0,1685,1686,5,154,0,0,1686,1688,3,474,237,0,1687,1685,
1,0,0,0,1688,1689,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,299,1,
0,0,0,1691,1692,5,141,0,0,1692,1693,3,8,4,0,1693,1694,5,142,0,0,1694,301,
1,0,0,0,1695,1696,5,141,0,0,1696,1697,3,148,74,0,1697,1698,5,142,0,0,1698,
303,1,0,0,0,1699,1701,3,424,212,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,
1702,1,0,0,0,1702,1703,5,162,0,0,1703,1708,3,46,23,0,1704,1705,5,141,0,0,
1705,1706,3,192,96,0,1706,1707,5,142,0,0,1707,1709,1,0,0,0,1708,1704,1,0,
0,0,1708,1709,1,0,0,0,1709,305,1,0,0,0,1710,1711,5,51,0,0,1711,1712,3,230,
115,0,1712,1713,5,41,0,0,1713,1714,3,308,154,0,1714,1715,5,138,0,0,1715,
307,1,0,0,0,1716,1719,3,392,196,0,1717,1719,3,94,47,0,1718,1716,1,0,0,0,
1718,1717,1,0,0,0,1719,309,1,0,0,0,1720,1721,3,232,116,0,1721,1722,5,145,
0,0,1722,1723,3,154,77,0,1723,311,1,0,0,0,1724,1726,3,272,136,0,1725,1724,
1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1729,5,53,0,0,1728,1730,
3,230,115,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1733,1,0,0,0,1731,1732,
5,108,0,0,1732,1734,3,106,53,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,
1735,1,0,0,0,1735,1736,5,138,0,0,1736,313,1,0,0,0,1737,1740,3,0,0,0,1738,
1740,3,334,167,0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,1740,315,1,0,0,0,1741,
1748,3,124,62,0,1742,1748,3,418,209,0,1743,1748,3,502,251,0,1744,1748,3,
196,98,0,1745,1748,3,482,241,0,1746,1748,3,368,184,0,1747,1741,1,0,0,0,1747,
1742,1,0,0,0,1747,1743,1,0,0,0,1747,1744,1,0,0,0,1747,1745,1,0,0,0,1747,
1746,1,0,0,0,1748,317,1,0,0,0,1749,1751,5,35,0,0,1750,1749,1,0,0,0,1750,
1751,1,0,0,0,1751,1753,1,0,0,0,1752,1754,3,136,68,0,1753,1752,1,0,0,0,1753,
1754,1,0,0,0,1754,319,1,0,0,0,1755,1756,5,64,0,0,1756,1757,5,14,0,0,1757,
1758,3,230,115,0,1758,1759,5,41,0,0,1759,1760,3,324,162,0,1760,1763,5,24,
0,0,1761,1762,5,64,0,0,1762,1764,5,14,0,0,1763,1761,1,0,0,0,1763,1764,1,
0,0,0,1764,1766,1,0,0,0,1765,1767,3,230,115,0,1766,1765,1,0,0,0,1766,1767,
1,0,0,0,1767,1768,1,0,0,0,1768,1769,5,138,0,0,1769,321,1,0,0,0,1770,1782,
3,454,227,0,1771,1782,3,452,226,0,1772,1782,3,490,245,0,1773,1782,3,470,
235,0,1774,1782,3,124,62,0,1775,1782,3,502,251,0,1776,1782,3,196,98,0,1777,
1782,3,16,8,0,1778,1782,3,498,249,0,1779,1782,3,226,113,0,1780,1782,3,224,
112,0,1781,1770,1,0,0,0,1781,1771,1,0,0,0,1781,1772,1,0,0,0,1781,1773,1,
0,0,0,1781,1774,1,0,0,0,1781,1775,1,0,0,0,1781,1776,1,0,0,0,1781,1777,1,
0,0,0,1781,1778,1,0,0,0,1781,1779,1,0,0,0,1781,1780,1,0,0,0,1782,323,1,0,
0,0,1783,1785,3,322,161,0,1784,1783,1,0,0,0,1785,1788,1,0,0,0,1786,1784,
1,0,0,0,1786,1787,1,0,0,0,1787,325,1,0,0,0,1788,1786,1,0,0,0,1789,1790,5,
64,0,0,1790,1791,3,230,115,0,1791,1792,5,41,0,0,1792,1793,3,330,165,0,1793,
1795,5,24,0,0,1794,1796,5,64,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,
1798,1,0,0,0,1797,1799,3,230,115,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
1800,1,0,0,0,1800,1801,5,138,0,0,1801,327,1,0,0,0,1802,1822,3,454,227,0,
1803,1822,3,452,226,0,1804,1822,3,490,245,0,1805,1822,3,470,235,0,1806,1822,
3,124,62,0,1807,1822,3,418,209,0,1808,1822,3,502,251,0,1809,1822,3,196,98,
0,1810,1822,3,16,8,0,1811,1822,3,88,44,0,1812,1822,3,44,22,0,1813,1822,3,
48,24,0,1814,1822,3,146,73,0,1815,1822,3,498,249,0,1816,1822,3,226,113,0,
1817,1822,3,224,112,0,1818,1822,3,306,153,0,1819,1822,3,448,224,0,1820,1822,
3,482,241,0,1821,1802,1,0,0,0,1821,1803,1,0,0,0,1821,1804,1,0,0,0,1821,1805,
1,0,0,0,1821,1806,1,0,0,0,1821,1807,1,0,0,0,1821,1808,1,0,0,0,1821,1809,
1,0,0,0,1821,1810,1,0,0,0,1821,1811,1,0,0,0,1821,1812,1,0,0,0,1821,1813,
1,0,0,0,1821,1814,1,0,0,0,1821,1815,1,0,0,0,1821,1816,1,0,0,0,1821,1817,
1,0,0,0,1821,1818,1,0,0,0,1821,1819,1,0,0,0,1821,1820,1,0,0,0,1822,329,1,
0,0,0,1823,1825,3,328,164,0,1824,1823,1,0,0,0,1825,1828,1,0,0,0,1826,1824,
1,0,0,0,1826,1827,1,0,0,0,1827,331,1,0,0,0,1828,1826,1,0,0,0,1829,1830,3,
230,115,0,1830,1831,5,38,0,0,1831,1832,3,148,74,0,1832,333,1,0,0,0,1833,
1834,3,0,0,0,1834,1835,3,230,115,0,1835,335,1,0,0,0,1836,1837,3,378,189,
0,1837,1838,5,102,0,0,1838,1842,3,50,25,0,1839,1841,3,398,199,0,1840,1839,
1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,1845,
1,0,0,0,1844,1842,1,0,0,0,1845,1846,5,24,0,0,1846,1848,5,102,0,0,1847,1849,
3,230,115,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,337,1,0,0,0,1850,1851,
5,65,0,0,1851,1852,5,141,0,0,1852,1853,3,340,170,0,1853,1854,5,142,0,0,1854,
1855,5,138,0,0,1855,339,1,0,0,0,1856,1857,3,256,128,0,1857,341,1,0,0,0,1858,
1859,5,65,0,0,1859,1860,5,48,0,0,1860,1861,5,141,0,0,1861,1862,3,42,21,0,
1862,1863,5,142,0,0,1863,343,1,0,0,0,1864,1874,3,278,139,0,1865,1874,3,366,
183,0,1866,1867,5,141,0,0,1867,1868,3,192,96,0,1868,1869,5,142,0,0,1869,
1874,1,0,0,0,1870,1874,3,22,11,0,1871,1874,3,14,7,0,1872,1874,3,292,146,
0,1873,1864,1,0,0,0,1873,1865,1,0,0,0,1873,1866,1,0,0,0,1873,1870,1,0,0,
0,1873,1871,1,0,0,0,1873,1872,1,0,0,0,1874,345,1,0,0,0,1875,1879,3,166,83,
0,1876,1879,3,114,57,0,1877,1879,3,326,163,0,1878,1875,1,0,0,0,1878,1876,
1,0,0,0,1878,1877,1,0,0,0,1879,347,1,0,0,0,1880,1893,3,454,227,0,1881,1893,
3,452,226,0,1882,1893,3,490,245,0,1883,1893,3,470,235,0,1884,1893,3,124,
62,0,1885,1893,3,502,251,0,1886,1893,3,16,8,0,1887,1893,3,44,22,0,1888,1893,
3,48,24,0,1889,1893,3,498,249,0,1890,1893,3,226,113,0,1891,1893,3,224,112,
0,1892,1880,1,0,0,0,1892,1881,1,0,0,0,1892,1882,1,0,0,0,1892,1883,1,0,0,
0,1892,1884,1,0,0,0,1892,1885,1,0,0,0,1892,1886,1,0,0,0,1892,1887,1,0,0,
0,1892,1888,1,0,0,0,1892,1889,1,0,0,0,1892,1890,1,0,0,0,1892,1891,1,0,0,
0,1893,349,1,0,0,0,1894,1896,3,348,174,0,1895,1894,1,0,0,0,1896,1899,1,0,
0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,351,1,0,0,0,1899,1897,1,0,0,
0,1900,1902,3,410,205,0,1901,1900,1,0,0,0,1902,1905,1,0,0,0,1903,1901,1,
0,0,0,1903,1904,1,0,0,0,1904,353,1,0,0,0,1905,1903,1,0,0,0,1906,1911,3,296,
148,0,1907,1908,5,141,0,0,1908,1909,3,8,4,0,1909,1910,5,142,0,0,1910,1912,
1,0,0,0,1911,1907,1,0,0,0,1911,1912,1,0,0,0,1912,355,1,0,0,0,1913,1915,3,
272,136,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1917,
3,354,177,0,1917,1918,5,138,0,0,1918,357,1,0,0,0,1919,1933,3,454,227,0,1920,
1933,3,452,226,0,1921,1933,3,490,245,0,1922,1933,3,470,235,0,1923,1933,3,
124,62,0,1924,1933,3,502,251,0,1925,1933,3,196,98,0,1926,1933,3,16,8,0,1927,
1933,3,44,22,0,1928,1933,3,48,24,0,1929,1933,3,498,249,0,1930,1933,3,226,
113,0,1931,1933,3,224,112,0,1932,1919,1,0,0,0,1932,1920,1,0,0,0,1932,1921,
1,0,0,0,1932,1922,1,0,0,0,1932,1923,1,0,0,0,1932,1924,1,0,0,0,1932,1925,
1,0,0,0,1932,1926,1,0,0,0,1932,1927,1,0,0,0,1932,1928,1,0,0,0,1932,1929,
1,0,0,0,1932,1930,1,0,0,0,1932,1931,1,0,0,0,1933,359,1,0,0,0,1934,1936,3,
358,179,0,1935,1934,1,0,0,0,1936,1939,1,0,0,0,1937,1935,1,0,0,0,1937,1938,
1,0,0,0,1938,361,1,0,0,0,1939,1937,1,0,0,0,1940,1942,3,272,136,0,1941,1940,
1,0,0,0,1941,1942,1,0,0,0,1942,1944,1,0,0,0,1943,1945,5,66,0,0,1944,1943,
1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,1946,1951,5,67,0,0,1947,1948,
5,141,0,0,1948,1949,3,406,203,0,1949,1950,5,142,0,0,1950,1952,1,0,0,0,1951,
1947,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,1955,5,41,0,0,1954,
1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,3,360,180,0,1957,
1958,5,12,0,0,1958,1959,3,364,182,0,1959,1961,5,24,0,0,1960,1962,5,66,0,
0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,5,67,0,
0,1964,1966,3,230,115,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,
0,0,0,1967,1968,5,138,0,0,1968,363,1,0,0,0,1969,1971,3,410,205,0,1970,1969,
1,0,0,0,1971,1974,1,0,0,0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,365,1,
0,0,0,1974,1972,1,0,0,0,1975,1976,3,472,236,0,1976,1982,5,162,0,0,1977,1983,
3,14,7,0,1978,1979,5,141,0,0,1979,1980,3,192,96,0,1980,1981,5,142,0,0,1981,
1983,1,0,0,0,1982,1977,1,0,0,0,1982,1978,1,0,0,0,1983,367,1,0,0,0,1984,1988,
3,208,104,0,1985,1988,3,68,34,0,1986,1988,3,444,222,0,1987,1984,1,0,0,0,
1987,1985,1,0,0,0,1987,1986,1,0,0,0,1988,369,1,0,0,0,1989,1994,3,292,146,
0,1990,1991,5,139,0,0,1991,1993,3,292,146,0,1992,1990,1,0,0,0,1993,1996,
1,0,0,0,1994,1992,1,0,0,0,1994,1995,1,0,0,0,1995,2000,1,0,0,0,1996,1994,
1,0,0,0,1997,2000,5,62,0,0,1998,2000,5,6,0,0,1999,1989,1,0,0,0,1999,1997,
1,0,0,0,1999,1998,1,0,0,0,2000,371,1,0,0,0,2001,2002,3,370,185,0,2002,2003,
5,145,0,0,2003,2004,3,292,146,0,2004,373,1,0,0,0,2005,2008,3,376,188,0,2006,
2008,3,292,146,0,2007,2005,1,0,0,0,2007,2006,1,0,0,0,2008,375,1,0,0,0,2009,
2013,3,426,213,0,2010,2011,3,144,72,0,2011,2012,3,426,213,0,2012,2014,1,
0,0,0,2013,2010,1,0,0,0,2013,2014,1,0,0,0,2014,377,1,0,0,0,2015,2016,5,72,
0,0,2016,2017,3,374,187,0,2017,379,1,0,0,0,2018,2020,5,76,0,0,2019,2021,
3,310,155,0,2020,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2020,1,0,0,0,2022,2023,
1,0,0,0,2023,2024,1,0,0,0,2024,2025,5,24,0,0,2025,2027,5,76,0,0,2026,2028,
3,230,115,0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,2028,381,1,0,0,0,2029,2031,
5,76,0,0,2030,2032,3,152,76,0,2031,2030,1,0,0,0,2032,2033,1,0,0,0,2033,2031,
1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,0,0,0,2035,2036,5,24,0,0,2036,2038,
5,76,0,0,2037,2039,3,230,115,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,
383,1,0,0,0,2040,2044,3,412,206,0,2041,2042,3,386,193,0,2042,2043,3,412,
206,0,2043,2045,1,0,0,0,2044,2041,1,0,0,0,2044,2045,1,0,0,0,2045,385,1,0,
0,0,2046,2047,7,9,0,0,2047,387,1,0,0,0,2048,2050,3,272,136,0,2049,2048,1,
0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,5,79,0,0,2052,2055,3,
192,96,0,2053,2054,5,84,0,0,2054,2056,3,192,96,0,2055,2053,1,0,0,0,2055,
2056,1,0,0,0,2056,2057,1,0,0,0,2057,2058,5,138,0,0,2058,389,1,0,0,0,2059,
2061,3,272,136,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,
2064,5,80,0,0,2063,2065,3,192,96,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,
2066,1,0,0,0,2066,2067,5,138,0,0,2067,391,1,0,0,0,2068,2069,3,292,146,0,
2069,2070,5,3,0,0,2070,2071,3,292,146,0,2071,2072,5,96,0,0,2072,2073,3,292,
146,0,2073,2074,5,77,0,0,2074,393,1,0,0,0,2075,2079,3,336,168,0,2076,2079,
3,188,94,0,2077,2079,3,378,189,0,2078,2075,1,0,0,0,2078,2076,1,0,0,0,2078,
2077,1,0,0,0,2079,395,1,0,0,0,2080,2083,3,24,12,0,2081,2083,3,320,160,0,
2082,2080,1,0,0,0,2082,2081,1,0,0,0,2083,397,1,0,0,0,2084,2085,3,230,115,
0,2085,2086,5,152,0,0,2086,2087,3,334,167,0,2087,2088,5,138,0,0,2088,399,
1,0,0,0,2089,2090,5,107,0,0,2090,2091,3,192,96,0,2091,2092,5,83,0,0,2092,
2093,3,476,238,0,2093,2094,5,131,0,0,2094,2095,3,318,159,0,2095,2096,3,402,
201,0,2096,2097,5,138,0,0,2097,401,1,0,0,0,2098,2099,3,506,253,0,2099,2100,
5,108,0,0,2100,2108,3,84,42,0,2101,2102,5,139,0,0,2102,2103,3,506,253,0,
2103,2104,5,108,0,0,2104,2105,3,84,42,0,2105,2107,1,0,0,0,2106,2101,1,0,
0,0,2107,2110,1,0,0,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,403,1,0,0,
0,2110,2108,1,0,0,0,2111,2112,5,59,0,0,2112,2113,3,406,203,0,2113,405,1,
0,0,0,2114,2119,3,292,146,0,2115,2116,5,139,0,0,2116,2118,3,292,146,0,2117,
2115,1,0,0,0,2118,2121,1,0,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,
407,1,0,0,0,2121,2119,1,0,0,0,2122,2124,3,410,205,0,2123,2122,1,0,0,0,2124,
2127,1,0,0,0,2125,2123,1,0,0,0,2125,2126,1,0,0,0,2126,409,1,0,0,0,2127,2125,
1,0,0,0,2128,2147,3,504,252,0,2129,2147,3,38,19,0,2130,2147,3,388,194,0,
2131,2147,3,416,208,0,2132,2147,3,500,250,0,2133,2147,3,234,117,0,2134,2147,
3,78,39,0,2135,2147,3,286,143,0,2136,2147,3,312,156,0,2137,2147,3,190,95,
0,2138,2147,3,390,195,0,2139,2141,3,272,136,0,2140,2139,1,0,0,0,2140,2141,
1,0,0,0,2141,2142,1,0,0,0,2142,2143,5,57,0,0,2143,2147,5,138,0,0,2144,2147,
3,76,38,0,2145,2147,3,356,178,0,2146,2128,1,0,0,0,2146,2129,1,0,0,0,2146,
2130,1,0,0,0,2146,2131,1,0,0,0,2146,2132,1,0,0,0,2146,2133,1,0,0,0,2146,
2134,1,0,0,0,2146,2135,1,0,0,0,2146,2136,1,0,0,0,2146,2137,1,0,0,0,2146,
2138,1,0,0,0,2146,2140,1,0,0,0,2146,2144,1,0,0,0,2146,2145,1,0,0,0,2147,
411,1,0,0,0,2148,2152,3,426,213,0,2149,2150,3,414,207,0,2150,2151,3,426,
213,0,2151,2153,1,0,0,0,2152,2149,1,0,0,0,2152,2153,1,0,0,0,2153,413,1,0,
0,0,2154,2155,7,10,0,0,2155,415,1,0,0,0,2156,2158,3,272,136,0,2157,2156,
1,0,0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,2159,2160,3,476,238,0,2160,2162,
5,131,0,0,2161,2163,3,136,68,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,
2164,1,0,0,0,2164,2165,3,506,253,0,2165,2166,5,138,0,0,2166,417,1,0,0,0,
2167,2168,5,86,0,0,2168,2169,3,232,116,0,2169,2170,5,145,0,0,2170,2172,3,
472,236,0,2171,2173,3,420,210,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,
2176,1,0,0,0,2174,2175,5,135,0,0,2175,2177,3,192,96,0,2176,2174,1,0,0,0,
2176,2177,1,0,0,0,2177,2178,1,0,0,0,2178,2179,5,138,0,0,2179,419,1,0,0,0,
2180,2181,7,11,0,0,2181,421,1,0,0,0,2182,2187,3,292,146,0,2183,2184,5,139,
0,0,2184,2186,3,292,146,0,2185,2183,1,0,0,0,2186,2189,1,0,0,0,2187,2185,
1,0,0,0,2187,2188,1,0,0,0,2188,2193,1,0,0,0,2189,2187,1,0,0,0,2190,2193,
5,62,0,0,2191,2193,5,6,0,0,2192,2182,1,0,0,0,2192,2190,1,0,0,0,2192,2191,
1,0,0,0,2193,423,1,0,0,0,2194,2203,5,143,0,0,2195,2200,3,292,146,0,2196,
2197,5,139,0,0,2197,2199,3,292,146,0,2198,2196,1,0,0,0,2199,2202,1,0,0,0,
2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,
2203,2195,1,0,0,0,2203,2204,1,0,0,0,2204,2207,1,0,0,0,2205,2206,5,80,0,0,
2206,2208,3,292,146,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,
0,0,2209,2210,5,144,0,0,2210,425,1,0,0,0,2211,2213,7,12,0,0,2212,2211,1,
0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,2220,3,478,239,0,2215,2216,
3,12,6,0,2216,2217,3,478,239,0,2217,2219,1,0,0,0,2218,2215,1,0,0,0,2219,
2222,1,0,0,0,2220,2218,1,0,0,0,2220,2221,1,0,0,0,2221,427,1,0,0,0,2222,2220,
1,0,0,0,2223,2225,3,272,136,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,
1,0,0,0,2226,2227,3,426,213,0,2227,2228,5,130,0,0,2228,2230,3,426,213,0,
2229,2231,3,488,244,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,
0,0,2232,2233,5,138,0,0,2233,429,1,0,0,0,2234,2235,5,108,0,0,2235,2236,3,
84,42,0,2236,2237,5,133,0,0,2237,2238,3,440,220,0,2238,431,1,0,0,0,2239,
2241,3,272,136,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
2243,5,18,0,0,2243,2244,3,192,96,0,2244,2246,5,104,0,0,2245,2247,3,430,215,
0,2246,2245,1,0,0,0,2247,2248,1,0,0,0,2248,2246,1,0,0,0,2248,2249,1,0,0,
0,2249,2250,1,0,0,0,2250,2251,5,24,0,0,2251,2253,5,18,0,0,2252,2254,3,230,
115,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2255,1,0,0,0,2255,2256,5,
138,0,0,2256,433,1,0,0,0,2257,2259,3,272,136,0,2258,2257,1,0,0,0,2258,2259,
1,0,0,0,2259,2260,1,0,0,0,2260,2261,5,36,0,0,2261,2262,3,106,53,0,2262,2263,
5,104,0,0,2263,2271,3,440,220,0,2264,2265,5,27,0,0,2265,2266,3,106,53,0,
2266,2267,5,104,0,0,2267,2268,3,440,220,0,2268,2270,1,0,0,0,2269,2264,1,
0,0,0,2270,2273,1,0,0,0,2271,2269,1,0,0,0,2271,2272,1,0,0,0,2272,2276,1,
0,0,0,2273,2271,1,0,0,0,2274,2275,5,26,0,0,2275,2277,3,440,220,0,2276,2274,
1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2279,5,24,0,0,2279,2281,
5,104,0,0,2280,2282,3,230,115,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,
2283,1,0,0,0,2283,2284,5,138,0,0,2284,435,1,0,0,0,2285,2287,3,272,136,0,
2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,0,0,0,2288,2290,5,69,0,0,
2289,2291,5,41,0,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,0,0,
2292,2293,3,350,175,0,2293,2294,5,12,0,0,2294,2295,3,352,176,0,2295,2296,
5,24,0,0,2296,2298,5,69,0,0,2297,2299,3,230,115,0,2298,2297,1,0,0,0,2298,
2299,1,0,0,0,2299,2300,1,0,0,0,2300,2301,5,138,0,0,2301,437,1,0,0,0,2302,
2312,3,428,214,0,2303,2312,3,434,217,0,2304,2312,3,432,216,0,2305,2312,3,
436,218,0,2306,2308,3,272,136,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,
2309,1,0,0,0,2309,2310,5,57,0,0,2310,2312,5,138,0,0,2311,2302,1,0,0,0,2311,
2303,1,0,0,0,2311,2304,1,0,0,0,2311,2305,1,0,0,0,2311,2307,1,0,0,0,2312,
439,1,0,0,0,2313,2315,3,438,219,0,2314,2313,1,0,0,0,2315,2318,1,0,0,0,2316,
2314,1,0,0,0,2316,2317,1,0,0,0,2317,441,1,0,0,0,2318,2316,1,0,0,0,2319,2320,
5,89,0,0,2320,2321,3,426,213,0,2321,2322,5,139,0,0,2322,2323,3,426,213,0,
2323,2327,1,0,0,0,2324,2325,5,54,0,0,2325,2327,3,426,213,0,2326,2319,1,0,
0,0,2326,2324,1,0,0,0,2327,443,1,0,0,0,2328,2329,5,71,0,0,2329,2330,3,232,
116,0,2330,2331,5,145,0,0,2331,2332,3,472,236,0,2332,2333,3,442,221,0,2333,
2334,5,138,0,0,2334,445,1,0,0,0,2335,2336,5,44,0,0,2336,2337,3,372,186,0,
2337,2338,5,107,0,0,2338,2339,3,192,96,0,2339,2340,5,138,0,0,2340,447,1,
0,0,0,2341,2342,5,92,0,0,2342,2343,3,230,115,0,2343,2344,5,41,0,0,2344,2345,
3,450,225,0,2345,2346,5,138,0,0,2346,449,1,0,0,0,2347,2349,3,292,146,0,2348,
2350,3,236,118,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2357,1,0,0,0,2351,
2352,5,98,0,0,2352,2353,3,192,96,0,2353,2354,5,3,0,0,2354,2355,3,192,96,
0,2355,2356,5,96,0,0,2356,2358,1,0,0,0,2357,2351,1,0,0,0,2357,2358,1,0,0,
0,2358,451,1,0,0,0,2359,2360,3,462,231,0,2360,2361,5,41,0,0,2361,2362,3,
458,229,0,2362,2363,5,12,0,0,2363,2364,3,468,234,0,2364,2366,5,24,0,0,2365,
2367,3,460,230,0,2366,2365,1,0,0,0,2366,2367,1,0,0,0,2367,2369,1,0,0,0,2368,
2370,3,142,71,0,2369,2368,1,0,0,0,2369,2370,1,0,0,0,2370,2371,1,0,0,0,2371,
2372,5,138,0,0,2372,453,1,0,0,0,2373,2374,3,462,231,0,2374,2375,5,138,0,
0,2375,455,1,0,0,0,2376,2390,3,454,227,0,2377,2390,3,452,226,0,2378,2390,
3,490,245,0,2379,2390,3,470,235,0,2380,2390,3,124,62,0,2381,2390,3,502,251,
0,2382,2390,3,196,98,0,2383,2390,3,16,8,0,2384,2390,3,44,22,0,2385,2390,
3,48,24,0,2386,2390,3,498,249,0,2387,2390,3,226,113,0,2388,2390,3,224,112,
0,2389,2376,1,0,0,0,2389,2377,1,0,0,0,2389,2378,1,0,0,0,2389,2379,1,0,0,
0,2389,2380,1,0,0,0,2389,2381,1,0,0,0,2389,2382,1,0,0,0,2389,2383,1,0,0,
0,2389,2384,1,0,0,0,2389,2385,1,0,0,0,2389,2386,1,0,0,0,2389,2387,1,0,0,
0,2389,2388,1,0,0,0,2390,457,1,0,0,0,2391,2393,3,456,228,0,2392,2391,1,0,
0,0,2393,2396,1,0,0,0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,459,1,0,0,
0,2396,2394,1,0,0,0,2397,2398,7,13,0,0,2398,461,1,0,0,0,2399,2402,3,464,
232,0,2400,2402,3,466,233,0,2401,2399,1,0,0,0,2401,2400,1,0,0,0,2402,463,
1,0,0,0,2403,2404,5,68,0,0,2404,2409,3,142,71,0,2405,2406,5,141,0,0,2406,
2407,3,204,102,0,2407,2408,5,142,0,0,2408,2410,1,0,0,0,2409,2405,1,0,0,0,
2409,2410,1,0,0,0,2410,465,1,0,0,0,2411,2413,7,14,0,0,2412,2411,1,0,0,0,
2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,2415,5,31,0,0,2415,2420,3,142,71,
0,2416,2417,5,141,0,0,2417,2418,3,204,102,0,2418,2419,5,142,0,0,2419,2421,
1,0,0,0,2420,2416,1,0,0,0,2420,2421,1,0,0,0,2421,2422,1,0,0,0,2422,2423,
5,80,0,0,2423,2424,3,472,236,0,2424,467,1,0,0,0,2425,2427,3,410,205,0,2426,
2425,1,0,0,0,2427,2430,1,0,0,0,2428,2426,1,0,0,0,2428,2429,1,0,0,0,2429,
469,1,0,0,0,2430,2428,1,0,0,0,2431,2432,5,93,0,0,2432,2433,3,230,115,0,2433,
2434,5,41,0,0,2434,2435,3,472,236,0,2435,2436,5,138,0,0,2436,471,1,0,0,0,
2437,2439,3,296,148,0,2438,2440,3,296,148,0,2439,2438,1,0,0,0,2439,2440,
1,0,0,0,2440,2442,1,0,0,0,2441,2443,3,130,65,0,2442,2441,1,0,0,0,2442,2443,
1,0,0,0,2443,2445,1,0,0,0,2444,2446,3,488,244,0,2445,2444,1,0,0,0,2445,2446,
1,0,0,0,2446,473,1,0,0,0,2447,2452,3,230,115,0,2448,2452,5,126,0,0,2449,
2452,5,127,0,0,2450,2452,5,6,0,0,2451,2447,1,0,0,0,2451,2448,1,0,0,0,2451,
2449,1,0,0,0,2451,2450,1,0,0,0,2452,475,1,0,0,0,2453,2456,3,292,146,0,2454,
2456,3,14,7,0,2455,2453,1,0,0,0,2455,2454,1,0,0,0,2456,477,1,0,0,0,2457,
2463,3,194,97,0,2458,2459,3,290,145,0,2459,2460,3,194,97,0,2460,2462,1,0,
0,0,2461,2458,1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,
0,0,2464,479,1,0,0,0,2465,2463,1,0,0,0,2466,2469,3,292,146,0,2467,2468,5,
97,0,0,2468,2470,3,292,146,0,2469,2467,1,0,0,0,2469,2470,1,0,0,0,2470,481,
1,0,0,0,2471,2472,5,94,0,0,2472,2473,3,232,116,0,2473,2474,5,145,0,0,2474,
2475,3,450,225,0,2475,2476,5,138,0,0,2476,483,1,0,0,0,2477,2479,3,232,116,
0,2478,2480,3,488,244,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2483,1,
0,0,0,2481,2482,5,135,0,0,2482,2484,3,192,96,0,2483,2481,1,0,0,0,2483,2484,
1,0,0,0,2484,2485,1,0,0,0,2485,2486,5,96,0,0,2486,485,1,0,0,0,2487,2488,
5,30,0,0,2488,2489,3,192,96,0,2489,487,1,0,0,0,2490,2491,5,98,0,0,2491,2492,
3,192,96,0,2492,489,1,0,0,0,2493,2494,5,100,0,0,2494,2497,3,230,115,0,2495,
2496,5,41,0,0,2496,2498,3,492,246,0,2497,2495,1,0,0,0,2497,2498,1,0,0,0,
2498,2499,1,0,0,0,2499,2500,5,138,0,0,2500,491,1,0,0,0,2501,2506,3,394,197,
0,2502,2506,3,96,48,0,2503,2506,3,2,1,0,2504,2506,3,202,101,0,2505,2501,
1,0,0,0,2505,2502,1,0,0,0,2505,2503,1,0,0,0,2505,2504,1,0,0,0,2506,493,1,
0,0,0,2507,2508,5,9,0,0,2508,2509,5,141,0,0,2509,2514,3,240,120,0,2510,2511,
5,139,0,0,2511,2513,3,240,120,0,2512,2510,1,0,0,0,2513,2516,1,0,0,0,2514,
2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,2516,2514,1,0,0,0,2517,
2518,5,142,0,0,2518,2519,5,58,0,0,2519,2520,3,472,236,0,2520,495,1,0,0,0,
2521,2522,5,9,0,0,2522,2523,5,141,0,0,2523,2528,3,240,120,0,2524,2525,5,
139,0,0,2525,2527,3,240,120,0,2526,2524,1,0,0,0,2527,2530,1,0,0,0,2528,2526,
1,0,0,0,2528,2529,1,0,0,0,2529,2531,1,0,0,0,2530,2528,1,0,0,0,2531,2532,
5,142,0,0,2532,2533,5,58,0,0,2533,2534,3,450,225,0,2534,497,1,0,0,0,2535,
2536,5,104,0,0,2536,2541,3,296,148,0,2537,2538,5,139,0,0,2538,2540,3,296,
148,0,2539,2537,1,0,0,0,2540,2543,1,0,0,0,2541,2539,1,0,0,0,2541,2542,1,
0,0,0,2542,2544,1,0,0,0,2543,2541,1,0,0,0,2544,2545,5,138,0,0,2545,499,1,
0,0,0,2546,2548,3,272,136,0,2547,2546,1,0,0,0,2547,2548,1,0,0,0,2548,2549,
1,0,0,0,2549,2550,3,476,238,0,2550,2551,5,135,0,0,2551,2552,3,192,96,0,2552,
2553,5,138,0,0,2553,501,1,0,0,0,2554,2556,5,85,0,0,2555,2554,1,0,0,0,2555,
2556,1,0,0,0,2556,2557,1,0,0,0,2557,2558,5,105,0,0,2558,2559,3,232,116,0,
2559,2560,5,145,0,0,2560,2563,3,472,236,0,2561,2562,5,135,0,0,2562,2564,
3,192,96,0,2563,2561,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,2566,
5,138,0,0,2566,503,1,0,0,0,2567,2569,3,272,136,0,2568,2567,1,0,0,0,2568,
2569,1,0,0,0,2569,2570,1,0,0,0,2570,2572,5,106,0,0,2571,2573,3,404,202,0,
2572,2571,1,0,0,0,2572,2573,1,0,0,0,2573,2575,1,0,0,0,2574,2576,3,108,54,
0,2575,2574,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,2579,3,486,
243,0,2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,2581,5,
138,0,0,2581,505,1,0,0,0,2582,2587,3,508,254,0,2583,2584,5,139,0,0,2584,
2586,3,508,254,0,2585,2583,1,0,0,0,2586,2589,1,0,0,0,2587,2585,1,0,0,0,2587,
2588,1,0,0,0,2588,2592,1,0,0,0,2589,2587,1,0,0,0,2590,2592,5,101,0,0,2591,
2582,1,0,0,0,2591,2590,1,0,0,0,2592,507,1,0,0,0,2593,2596,3,192,96,0,2594,
2595,5,4,0,0,2595,2597,3,192,96,0,2596,2594,1,0,0,0,2596,2597,1,0,0,0,2597,
509,1,0,0,0,294,517,521,527,537,547,556,561,568,572,577,589,592,599,605,
609,613,616,623,628,633,637,643,647,650,658,667,682,697,700,703,710,716,
745,750,757,759,765,767,774,777,785,788,797,804,809,812,818,829,837,841,
845,850,858,863,876,883,891,894,903,906,909,914,921,924,934,938,941,944,
950,954,957,961,966,969,975,978,982,1000,1002,1013,1016,1023,1028,1033,1046,
1062,1067,1072,1077,1080,1085,1095,1107,1112,1131,1136,1142,1149,1159,1163,
1166,1190,1195,1200,1203,1206,1213,1218,1227,1232,1238,1242,1250,1256,1260,
1264,1274,1280,1286,1293,1301,1318,1326,1336,1340,1345,1351,1359,1372,1383,
1390,1420,1424,1437,1442,1447,1457,1464,1471,1480,1484,1491,1496,1499,1504,
1509,1517,1531,1539,1547,1554,1559,1564,1568,1572,1578,1582,1586,1594,1599,
1604,1610,1621,1628,1637,1643,1646,1653,1663,1668,1675,1682,1689,1700,1708,
1718,1725,1729,1733,1739,1747,1750,1753,1763,1766,1781,1786,1795,1798,1821,
1826,1842,1848,1873,1878,1892,1897,1903,1911,1914,1932,1937,1941,1944,1951,
1954,1961,1965,1972,1982,1987,1994,1999,2007,2013,2022,2027,2033,2038,2044,
2049,2055,2060,2064,2078,2082,2108,2119,2125,2140,2146,2152,2157,2162,2172,
2176,2187,2192,2200,2203,2207,2212,2220,2224,2230,2240,2248,2253,2258,2271,
2276,2281,2286,2290,2298,2307,2311,2316,2326,2349,2357,2366,2369,2389,2394,
2401,2409,2412,2420,2428,2439,2442,2445,2451,2455,2463,2469,2479,2483,2497,
2505,2514,2528,2541,2547,2555,2563,2568,2572,2575,2578,2587,2591,2596];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class vhdlParser extends antlr4.Parser {

    static grammarFileName = "vhdl.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'\\n'", "'\\r'", null, 
                            null, null, "'**'", "'=='", "'<='", "'>='", 
                            "'=>'", "'/='", "':='", "'<>'", "'\"'", "';'", 
                            "','", "'&'", "'('", "')'", "'['", "']'", "':'", 
                            "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", "'='", 
                            "'|'", "'.'", "'\\'", null, null, null, null, 
                            null, null, "'''" ];
    static symbolicNames = [ null, "ABS", "ACCESS", "ACROSS", "AFTER", "ALIAS", 
                             "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", 
                             "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BREAK", 
                             "BUFFER", "BUS", "CASE", "COMPONENT", "CONFIGURATION", 
                             "CONSTANT", "DISCONNECT", "DOWNTO", "END", 
                             "ENTITY", "ELSE", "ELSIF", "EXIT", "FILE", 
                             "FOR", "FUNCTION", "GENERATE", "GENERIC", "GROUP", 
                             "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", 
                             "INOUT", "IS", "LABEL", "LIBRARY", "LIMIT", 
                             "LINKAGE", "LITERAL", "LOOP", "MAP", "MOD", 
                             "NAND", "NATURE", "NEW", "NEXT", "NOISE", "NOR", 
                             "NOT", "NULL_", "OF", "ON", "OPEN", "OR", "OTHERS", 
                             "OUT", "PACKAGE", "PORT", "POSTPONED", "PROCESS", 
                             "PROCEDURE", "PROCEDURAL", "PURE", "QUANTITY", 
                             "RANGE", "REVERSE_RANGE", "REJECT", "REM", 
                             "RECORD", "REFERENCE", "REGISTER", "REPORT", 
                             "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", 
                             "SHARED", "SIGNAL", "SLA", "SLL", "SPECTRUM", 
                             "SRA", "SRL", "SUBNATURE", "SUBTYPE", "TERMINAL", 
                             "THEN", "THROUGH", "TO", "TOLERANCE", "TRANSPORT", 
                             "TYPE", "UNAFFECTED", "UNITS", "UNTIL", "USE", 
                             "VARIABLE", "WAIT", "WITH", "WHEN", "WHILE", 
                             "XNOR", "XOR", "BASE_LITERAL", "BIT_STRING_LITERAL", 
                             "BIT_STRING_LITERAL_BINARY", "BIT_STRING_LITERAL_OCTAL", 
                             "BIT_STRING_LITERAL_HEX", "REAL_LITERAL", "BASIC_IDENTIFIER", 
                             "EXTENDED_IDENTIFIER", "LETTER", "COMMENT", 
                             "TAB", "SPACE", "NEWLINE", "CR", "CHARACTER_LITERAL", 
                             "STRING_LITERAL", "OTHER_SPECIAL_CHARACTER", 
                             "DOUBLESTAR", "ASSIGN", "LE", "GE", "ARROW", 
                             "NEQ", "VARASGN", "BOX", "DBLQUOTE", "SEMI", 
                             "COMMA", "AMPERSAND", "LPAREN", "RPAREN", "LBRACKET", 
                             "RBRACKET", "COLON", "MUL", "DIV", "PLUS", 
                             "MINUS", "LOWERTHAN", "GREATERTHAN", "EQ", 
                             "BAR", "DOT", "BACKSLASH", "EXPONENT", "HEXDIGIT", 
                             "INTEGER", "DIGIT", "BASED_INTEGER", "EXTENDED_DIGIT", 
                             "APOSTROPHE" ];
    static ruleNames = [ "abstract_literal", "access_type_definition", "across_aspect", 
                         "actual_designator", "actual_parameter_part", "actual_part", 
                         "adding_operator", "aggregate", "alias_declaration", 
                         "alias_designator", "alias_indication", "allocator", 
                         "architecture_body", "architecture_declarative_part", 
                         "architecture_statement", "architecture_statement_part", 
                         "array_nature_definition", "array_type_definition", 
                         "assertion", "assertion_statement", "association_element", 
                         "association_list", "attribute_declaration", "attribute_designator", 
                         "attribute_specification", "base_unit_declaration", 
                         "binding_indication", "block_configuration", "block_declarative_item", 
                         "block_declarative_part", "block_header", "block_specification", 
                         "block_statement", "block_statement_part", "branch_quantity_declaration", 
                         "break_element", "break_list", "break_selector_clause", 
                         "break_statement", "case_statement", "case_statement_alternative", 
                         "choice", "choices", "component_configuration", 
                         "component_declaration", "component_instantiation_statement", 
                         "component_specification", "composite_nature_definition", 
                         "composite_type_definition", "concurrent_assertion_statement", 
                         "concurrent_break_statement", "concurrent_procedure_call_statement", 
                         "concurrent_signal_assignment_statement", "condition", 
                         "condition_clause", "conditional_signal_assignment", 
                         "conditional_waveforms", "configuration_declaration", 
                         "configuration_declarative_item", "configuration_declarative_part", 
                         "configuration_item", "configuration_specification", 
                         "constant_declaration", "constrained_array_definition", 
                         "constrained_nature_definition", "constraint", 
                         "context_clause", "context_item", "delay_mechanism", 
                         "design_file", "design_unit", "designator", "direction", 
                         "disconnection_specification", "discrete_range", 
                         "element_association", "element_declaration", "element_subnature_definition", 
                         "element_subtype_definition", "entity_aspect", 
                         "entity_class", "entity_class_entry", "entity_class_entry_list", 
                         "entity_declaration", "entity_declarative_item", 
                         "entity_declarative_part", "entity_designator", 
                         "entity_header", "entity_name_list", "entity_specification", 
                         "entity_statement", "entity_statement_part", "entity_tag", 
                         "enumeration_literal", "enumeration_type_definition", 
                         "exit_statement", "expression", "factor", "file_declaration", 
                         "file_logical_name", "file_open_information", "file_type_definition", 
                         "formal_parameter_list", "formal_part", "free_quantity_declaration", 
                         "generate_statement", "generation_scheme", "generic_clause", 
                         "generic_list", "generic_map_aspect", "group_constituent", 
                         "group_constituent_list", "group_declaration", 
                         "group_template_declaration", "guarded_signal_specification", 
                         "identifier", "identifier_list", "if_statement", 
                         "index_constraint", "index_specification", "index_subtype_definition", 
                         "instantiated_unit", "instantiation_list", "interface_constant_declaration", 
                         "interface_declaration", "interface_element", "interface_file_declaration", 
                         "interface_signal_list", "interface_port_list", 
                         "interface_list", "interface_quantity_declaration", 
                         "interface_port_declaration", "interface_signal_declaration", 
                         "interface_terminal_declaration", "interface_variable_declaration", 
                         "iteration_scheme", "label_colon", "library_clause", 
                         "library_unit", "literal", "logical_name", "logical_name_list", 
                         "logical_operator", "loop_statement", "signal_mode", 
                         "multiplying_operator", "name", "name_part", "selected_name", 
                         "selected_name_part", "function_call_or_indexed_name_part", 
                         "slice_name_part", "attribute_name_part", "nature_declaration", 
                         "nature_definition", "nature_element_declaration", 
                         "next_statement", "numeric_literal", "object_declaration", 
                         "opts", "package_body", "package_body_declarative_item", 
                         "package_body_declarative_part", "package_declaration", 
                         "package_declarative_item", "package_declarative_part", 
                         "parameter_specification", "physical_literal", 
                         "physical_type_definition", "port_clause", "port_list", 
                         "port_map_aspect", "primary", "primary_unit", "procedural_declarative_item", 
                         "procedural_declarative_part", "procedural_statement_part", 
                         "procedure_call", "procedure_call_statement", "process_declarative_item", 
                         "process_declarative_part", "process_statement", 
                         "process_statement_part", "qualified_expression", 
                         "quantity_declaration", "quantity_list", "quantity_specification", 
                         "range_decl", "explicit_range", "range_constraint", 
                         "record_nature_definition", "record_type_definition", 
                         "relation", "relational_operator", "report_statement", 
                         "return_statement", "scalar_nature_definition", 
                         "scalar_type_definition", "secondary_unit", "secondary_unit_declaration", 
                         "selected_signal_assignment", "selected_waveforms", 
                         "sensitivity_clause", "sensitivity_list", "sequence_of_statements", 
                         "sequential_statement", "shift_expression", "shift_operator", 
                         "signal_assignment_statement", "signal_declaration", 
                         "signal_kind", "signal_list", "signature", "simple_expression", 
                         "simple_simultaneous_statement", "simultaneous_alternative", 
                         "simultaneous_case_statement", "simultaneous_if_statement", 
                         "simultaneous_procedural_statement", "simultaneous_statement", 
                         "simultaneous_statement_part", "source_aspect", 
                         "source_quantity_declaration", "step_limit_specification", 
                         "subnature_declaration", "subnature_indication", 
                         "subprogram_body", "subprogram_declaration", "subprogram_declarative_item", 
                         "subprogram_declarative_part", "subprogram_kind", 
                         "subprogram_specification", "procedure_specification", 
                         "function_specification", "subprogram_statement_part", 
                         "subtype_declaration", "subtype_indication", "suffix", 
                         "target", "term", "terminal_aspect", "terminal_declaration", 
                         "through_aspect", "timeout_clause", "tolerance_aspect", 
                         "type_declaration", "type_definition", "unconstrained_array_definition", 
                         "unconstrained_nature_definition", "use_clause", 
                         "variable_assignment_statement", "variable_declaration", 
                         "wait_statement", "waveform", "waveform_element" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = vhdlParser.ruleNames;
        this.literalNames = vhdlParser.literalNames;
        this.symbolicNames = vhdlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	abstract_literal() {
	    let localctx = new Abstract_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, vhdlParser.RULE_abstract_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.BASE_LITERAL || _la===vhdlParser.REAL_LITERAL || _la===vhdlParser.INTEGER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	access_type_definition() {
	    let localctx = new Access_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, vhdlParser.RULE_access_type_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(vhdlParser.ACCESS);
	        this.state = 513;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	across_aspect() {
	    let localctx = new Across_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, vhdlParser.RULE_across_aspect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this.identifier_list();
	        this.state = 517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.TOLERANCE) {
	            this.state = 516;
	            this.tolerance_aspect();
	        }

	        this.state = 521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 519;
	            this.match(vhdlParser.VARASGN);
	            this.state = 520;
	            this.expression();
	        }

	        this.state = 523;
	        this.match(vhdlParser.ACROSS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actual_designator() {
	    let localctx = new Actual_designatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, vhdlParser.RULE_actual_designator);
	    try {
	        this.state = 527;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ABS:
	        case vhdlParser.NEW:
	        case vhdlParser.NOT:
	        case vhdlParser.NULL_:
	        case vhdlParser.BASE_LITERAL:
	        case vhdlParser.BIT_STRING_LITERAL:
	        case vhdlParser.REAL_LITERAL:
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.CHARACTER_LITERAL:
	        case vhdlParser.STRING_LITERAL:
	        case vhdlParser.LPAREN:
	        case vhdlParser.PLUS:
	        case vhdlParser.MINUS:
	        case vhdlParser.INTEGER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 525;
	            this.expression();
	            break;
	        case vhdlParser.OPEN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 526;
	            this.match(vhdlParser.OPEN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actual_parameter_part() {
	    let localctx = new Actual_parameter_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, vhdlParser.RULE_actual_parameter_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.association_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actual_part() {
	    let localctx = new Actual_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, vhdlParser.RULE_actual_part);
	    try {
	        this.state = 537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 531;
	            this.name();
	            this.state = 532;
	            this.match(vhdlParser.LPAREN);
	            this.state = 533;
	            this.actual_designator();
	            this.state = 534;
	            this.match(vhdlParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 536;
	            this.actual_designator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adding_operator() {
	    let localctx = new Adding_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, vhdlParser.RULE_adding_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        _la = this._input.LA(1);
	        if(!(((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (vhdlParser.AMPERSAND - 140)) | (1 << (vhdlParser.PLUS - 140)) | (1 << (vhdlParser.MINUS - 140)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate() {
	    let localctx = new AggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, vhdlParser.RULE_aggregate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(vhdlParser.LPAREN);
	        this.state = 542;
	        this.element_association();
	        this.state = 547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 543;
	            this.match(vhdlParser.COMMA);
	            this.state = 544;
	            this.element_association();
	            this.state = 549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 550;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias_declaration() {
	    let localctx = new Alias_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, vhdlParser.RULE_alias_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(vhdlParser.ALIAS);
	        this.state = 553;
	        this.alias_designator();
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.COLON) {
	            this.state = 554;
	            this.match(vhdlParser.COLON);
	            this.state = 555;
	            this.alias_indication();
	        }

	        this.state = 558;
	        this.match(vhdlParser.IS);
	        this.state = 559;
	        this.name();
	        this.state = 561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LBRACKET) {
	            this.state = 560;
	            this.signature();
	        }

	        this.state = 563;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias_designator() {
	    let localctx = new Alias_designatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, vhdlParser.RULE_alias_designator);
	    try {
	        this.state = 568;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.identifier();
	            break;
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.match(vhdlParser.CHARACTER_LITERAL);
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 567;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias_indication() {
	    let localctx = new Alias_indicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, vhdlParser.RULE_alias_indication);
	    try {
	        this.state = 572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 570;
	            this.subnature_indication();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 571;
	            this.subtype_indication();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allocator() {
	    let localctx = new AllocatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, vhdlParser.RULE_allocator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(vhdlParser.NEW);
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 575;
	            this.qualified_expression();
	            break;

	        case 2:
	            this.state = 576;
	            this.subtype_indication();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	architecture_body() {
	    let localctx = new Architecture_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, vhdlParser.RULE_architecture_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(vhdlParser.ARCHITECTURE);
	        this.state = 580;
	        this.identifier();
	        this.state = 581;
	        this.match(vhdlParser.OF);
	        this.state = 582;
	        this.identifier();
	        this.state = 583;
	        this.match(vhdlParser.IS);
	        this.state = 584;
	        this.architecture_declarative_part();
	        this.state = 585;
	        this.match(vhdlParser.BEGIN);
	        this.state = 586;
	        this.architecture_statement_part();
	        this.state = 587;
	        this.match(vhdlParser.END);
	        this.state = 589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ARCHITECTURE) {
	            this.state = 588;
	            this.match(vhdlParser.ARCHITECTURE);
	        }

	        this.state = 592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 591;
	            this.identifier();
	        }

	        this.state = 594;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	architecture_declarative_part() {
	    let localctx = new Architecture_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, vhdlParser.RULE_architecture_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 596;
	            this.block_declarative_item();
	            this.state = 601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	architecture_statement() {
	    let localctx = new Architecture_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, vhdlParser.RULE_architecture_statement);
	    try {
	        this.state = 623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 602;
	            this.block_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 603;
	            this.process_statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 605;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            if(la_===1) {
	                this.state = 604;
	                this.label_colon();

	            }
	            this.state = 607;
	            this.concurrent_procedure_call_statement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 609;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            if(la_===1) {
	                this.state = 608;
	                this.label_colon();

	            }
	            this.state = 611;
	            this.concurrent_assertion_statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 613;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 612;
	                this.label_colon();

	            }
	            this.state = 616;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 615;
	                this.match(vhdlParser.POSTPONED);

	            }
	            this.state = 618;
	            this.concurrent_signal_assignment_statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 619;
	            this.component_instantiation_statement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 620;
	            this.generate_statement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 621;
	            this.concurrent_break_statement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 622;
	            this.simultaneous_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	architecture_statement_part() {
	    let localctx = new Architecture_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, vhdlParser.RULE_architecture_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
	            this.state = 625;
	            this.architecture_statement();
	            this.state = 630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_nature_definition() {
	    let localctx = new Array_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, vhdlParser.RULE_array_nature_definition);
	    try {
	        this.state = 633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 631;
	            this.unconstrained_nature_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 632;
	            this.constrained_nature_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_type_definition() {
	    let localctx = new Array_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, vhdlParser.RULE_array_type_definition);
	    try {
	        this.state = 637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 635;
	            this.unconstrained_array_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 636;
	            this.constrained_array_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, vhdlParser.RULE_assertion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.match(vhdlParser.ASSERT);
	        this.state = 640;
	        this.condition();
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.REPORT) {
	            this.state = 641;
	            this.match(vhdlParser.REPORT);
	            this.state = 642;
	            this.expression();
	        }

	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.SEVERITY) {
	            this.state = 645;
	            this.match(vhdlParser.SEVERITY);
	            this.state = 646;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion_statement() {
	    let localctx = new Assertion_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, vhdlParser.RULE_assertion_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 649;
	            this.label_colon();
	        }

	        this.state = 652;
	        this.assertion();
	        this.state = 653;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	association_element() {
	    let localctx = new Association_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, vhdlParser.RULE_association_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 655;
	            this.formal_part();
	            this.state = 656;
	            this.match(vhdlParser.ARROW);

	        }
	        this.state = 660;
	        this.actual_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	association_list() {
	    let localctx = new Association_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, vhdlParser.RULE_association_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.association_element();
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 663;
	            this.match(vhdlParser.COMMA);
	            this.state = 664;
	            this.association_element();
	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_declaration() {
	    let localctx = new Attribute_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, vhdlParser.RULE_attribute_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.match(vhdlParser.ATTRIBUTE);
	        this.state = 671;
	        this.label_colon();
	        this.state = 672;
	        this.name();
	        this.state = 673;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_designator() {
	    let localctx = new Attribute_designatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, vhdlParser.RULE_attribute_designator);
	    try {
	        this.state = 682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 675;
	            this.identifier();
	            break;
	        case vhdlParser.RANGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.match(vhdlParser.RANGE);
	            break;
	        case vhdlParser.REVERSE_RANGE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 677;
	            this.match(vhdlParser.REVERSE_RANGE);
	            break;
	        case vhdlParser.ACROSS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 678;
	            this.match(vhdlParser.ACROSS);
	            break;
	        case vhdlParser.THROUGH:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 679;
	            this.match(vhdlParser.THROUGH);
	            break;
	        case vhdlParser.REFERENCE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 680;
	            this.match(vhdlParser.REFERENCE);
	            break;
	        case vhdlParser.TOLERANCE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 681;
	            this.match(vhdlParser.TOLERANCE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_specification() {
	    let localctx = new Attribute_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, vhdlParser.RULE_attribute_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.match(vhdlParser.ATTRIBUTE);
	        this.state = 685;
	        this.attribute_designator();
	        this.state = 686;
	        this.match(vhdlParser.OF);
	        this.state = 687;
	        this.entity_specification();
	        this.state = 688;
	        this.match(vhdlParser.IS);
	        this.state = 689;
	        this.expression();
	        this.state = 690;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_unit_declaration() {
	    let localctx = new Base_unit_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, vhdlParser.RULE_base_unit_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.identifier();
	        this.state = 693;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binding_indication() {
	    let localctx = new Binding_indicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, vhdlParser.RULE_binding_indication);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.USE) {
	            this.state = 695;
	            this.match(vhdlParser.USE);
	            this.state = 696;
	            this.entity_aspect();
	        }

	        this.state = 700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC) {
	            this.state = 699;
	            this.generic_map_aspect();
	        }

	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PORT) {
	            this.state = 702;
	            this.port_map_aspect();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_configuration() {
	    let localctx = new Block_configurationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, vhdlParser.RULE_block_configuration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.match(vhdlParser.FOR);
	        this.state = 706;
	        this.block_specification();
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.USE) {
	            this.state = 707;
	            this.use_clause();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.FOR) {
	            this.state = 713;
	            this.configuration_item();
	            this.state = 718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 719;
	        this.match(vhdlParser.END);
	        this.state = 720;
	        this.match(vhdlParser.FOR);
	        this.state = 721;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_declarative_item() {
	    let localctx = new Block_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, vhdlParser.RULE_block_declarative_item);
	    try {
	        this.state = 745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 723;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 724;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 725;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 726;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 727;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 728;
	            this.signal_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 729;
	            this.variable_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 730;
	            this.file_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 731;
	            this.alias_declaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 732;
	            this.component_declaration();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 733;
	            this.attribute_declaration();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 734;
	            this.attribute_specification();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 735;
	            this.configuration_specification();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 736;
	            this.disconnection_specification();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 737;
	            this.step_limit_specification();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 738;
	            this.use_clause();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 739;
	            this.group_template_declaration();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 740;
	            this.group_declaration();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 741;
	            this.nature_declaration();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 742;
	            this.subnature_declaration();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 743;
	            this.quantity_declaration();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 744;
	            this.terminal_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_declarative_part() {
	    let localctx = new Block_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, vhdlParser.RULE_block_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 747;
	            this.block_declarative_item();
	            this.state = 752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_header() {
	    let localctx = new Block_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, vhdlParser.RULE_block_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC) {
	            this.state = 753;
	            this.generic_clause();
	            this.state = 757;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.GENERIC) {
	                this.state = 754;
	                this.generic_map_aspect();
	                this.state = 755;
	                this.match(vhdlParser.SEMI);
	            }

	        }

	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PORT) {
	            this.state = 761;
	            this.port_clause();
	            this.state = 765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.PORT) {
	                this.state = 762;
	                this.port_map_aspect();
	                this.state = 763;
	                this.match(vhdlParser.SEMI);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_specification() {
	    let localctx = new Block_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, vhdlParser.RULE_block_specification);
	    var _la = 0; // Token type
	    try {
	        this.state = 777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 769;
	            this.identifier();
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.LPAREN) {
	                this.state = 770;
	                this.match(vhdlParser.LPAREN);
	                this.state = 771;
	                this.index_specification();
	                this.state = 772;
	                this.match(vhdlParser.RPAREN);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 776;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_statement() {
	    let localctx = new Block_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, vhdlParser.RULE_block_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.label_colon();
	        this.state = 780;
	        this.match(vhdlParser.BLOCK);
	        this.state = 785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 781;
	            this.match(vhdlParser.LPAREN);
	            this.state = 782;
	            this.expression();
	            this.state = 783;
	            this.match(vhdlParser.RPAREN);
	        }

	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS) {
	            this.state = 787;
	            this.match(vhdlParser.IS);
	        }

	        this.state = 790;
	        this.block_header();
	        this.state = 791;
	        this.block_declarative_part();
	        this.state = 792;
	        this.match(vhdlParser.BEGIN);
	        this.state = 793;
	        this.block_statement_part();
	        this.state = 794;
	        this.match(vhdlParser.END);
	        this.state = 795;
	        this.match(vhdlParser.BLOCK);
	        this.state = 797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 796;
	            this.identifier();
	        }

	        this.state = 799;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_statement_part() {
	    let localctx = new Block_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, vhdlParser.RULE_block_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
	            this.state = 801;
	            this.architecture_statement();
	            this.state = 806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	branch_quantity_declaration() {
	    let localctx = new Branch_quantity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, vhdlParser.RULE_branch_quantity_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(vhdlParser.QUANTITY);
	        this.state = 809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 808;
	            this.across_aspect();

	        }
	        this.state = 812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 811;
	            this.through_aspect();

	        }
	        this.state = 814;
	        this.terminal_aspect();
	        this.state = 815;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_element() {
	    let localctx = new Break_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, vhdlParser.RULE_break_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR) {
	            this.state = 817;
	            this.break_selector_clause();
	        }

	        this.state = 820;
	        this.name();
	        this.state = 821;
	        this.match(vhdlParser.ARROW);
	        this.state = 822;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_list() {
	    let localctx = new Break_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, vhdlParser.RULE_break_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.break_element();
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 825;
	            this.match(vhdlParser.COMMA);
	            this.state = 826;
	            this.break_element();
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_selector_clause() {
	    let localctx = new Break_selector_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, vhdlParser.RULE_break_selector_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.match(vhdlParser.FOR);
	        this.state = 833;
	        this.name();
	        this.state = 834;
	        this.match(vhdlParser.USE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_statement() {
	    let localctx = new Break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, vhdlParser.RULE_break_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 836;
	            this.label_colon();
	        }

	        this.state = 839;
	        this.match(vhdlParser.BREAK);
	        this.state = 841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
	            this.state = 840;
	            this.break_list();
	        }

	        this.state = 845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.WHEN) {
	            this.state = 843;
	            this.match(vhdlParser.WHEN);
	            this.state = 844;
	            this.condition();
	        }

	        this.state = 847;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_statement() {
	    let localctx = new Case_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, vhdlParser.RULE_case_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 849;
	            this.label_colon();
	        }

	        this.state = 852;
	        this.match(vhdlParser.CASE);
	        this.state = 853;
	        this.expression();
	        this.state = 854;
	        this.match(vhdlParser.IS);
	        this.state = 856; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 855;
	            this.case_statement_alternative();
	            this.state = 858; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===vhdlParser.WHEN);
	        this.state = 860;
	        this.match(vhdlParser.END);
	        this.state = 861;
	        this.match(vhdlParser.CASE);
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 862;
	            this.identifier();
	        }

	        this.state = 865;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_statement_alternative() {
	    let localctx = new Case_statement_alternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, vhdlParser.RULE_case_statement_alternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(vhdlParser.WHEN);
	        this.state = 868;
	        this.choices();
	        this.state = 869;
	        this.match(vhdlParser.ARROW);
	        this.state = 870;
	        this.sequence_of_statements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choice() {
	    let localctx = new ChoiceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, vhdlParser.RULE_choice);
	    try {
	        this.state = 876;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 872;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 873;
	            this.discrete_range();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 874;
	            this.simple_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 875;
	            this.match(vhdlParser.OTHERS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choices() {
	    let localctx = new ChoicesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, vhdlParser.RULE_choices);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.choice();
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.BAR) {
	            this.state = 879;
	            this.match(vhdlParser.BAR);
	            this.state = 880;
	            this.choice();
	            this.state = 885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_configuration() {
	    let localctx = new Component_configurationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, vhdlParser.RULE_component_configuration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.match(vhdlParser.FOR);
	        this.state = 887;
	        this.component_specification();
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC || _la===vhdlParser.PORT || _la===vhdlParser.USE || _la===vhdlParser.SEMI) {
	            this.state = 888;
	            this.binding_indication();
	            this.state = 889;
	            this.match(vhdlParser.SEMI);
	        }

	        this.state = 894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR) {
	            this.state = 893;
	            this.block_configuration();
	        }

	        this.state = 896;
	        this.match(vhdlParser.END);
	        this.state = 897;
	        this.match(vhdlParser.FOR);
	        this.state = 898;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_declaration() {
	    let localctx = new Component_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, vhdlParser.RULE_component_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this.match(vhdlParser.COMPONENT);
	        this.state = 901;
	        this.identifier();
	        this.state = 903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS) {
	            this.state = 902;
	            this.match(vhdlParser.IS);
	        }

	        this.state = 906;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC) {
	            this.state = 905;
	            this.generic_clause();
	        }

	        this.state = 909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PORT) {
	            this.state = 908;
	            this.port_clause();
	        }

	        this.state = 911;
	        this.match(vhdlParser.END);
	        this.state = 912;
	        this.match(vhdlParser.COMPONENT);
	        this.state = 914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 913;
	            this.identifier();
	        }

	        this.state = 916;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_instantiation_statement() {
	    let localctx = new Component_instantiation_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, vhdlParser.RULE_component_instantiation_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.label_colon();
	        this.state = 919;
	        this.instantiated_unit();
	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC) {
	            this.state = 920;
	            this.generic_map_aspect();
	        }

	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PORT) {
	            this.state = 923;
	            this.port_map_aspect();
	        }

	        this.state = 926;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_specification() {
	    let localctx = new Component_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, vhdlParser.RULE_component_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 928;
	        this.instantiation_list();
	        this.state = 929;
	        this.match(vhdlParser.COLON);
	        this.state = 930;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	composite_nature_definition() {
	    let localctx = new Composite_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, vhdlParser.RULE_composite_nature_definition);
	    try {
	        this.state = 934;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ARRAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 932;
	            this.array_nature_definition();
	            break;
	        case vhdlParser.RECORD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.record_nature_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	composite_type_definition() {
	    let localctx = new Composite_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, vhdlParser.RULE_composite_type_definition);
	    try {
	        this.state = 938;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ARRAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 936;
	            this.array_type_definition();
	            break;
	        case vhdlParser.RECORD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 937;
	            this.record_type_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concurrent_assertion_statement() {
	    let localctx = new Concurrent_assertion_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, vhdlParser.RULE_concurrent_assertion_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 940;
	            this.label_colon();
	        }

	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.POSTPONED) {
	            this.state = 943;
	            this.match(vhdlParser.POSTPONED);
	        }

	        this.state = 946;
	        this.assertion();
	        this.state = 947;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concurrent_break_statement() {
	    let localctx = new Concurrent_break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, vhdlParser.RULE_concurrent_break_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 949;
	            this.label_colon();
	        }

	        this.state = 952;
	        this.match(vhdlParser.BREAK);
	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
	            this.state = 953;
	            this.break_list();
	        }

	        this.state = 957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ON) {
	            this.state = 956;
	            this.sensitivity_clause();
	        }

	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.WHEN) {
	            this.state = 959;
	            this.match(vhdlParser.WHEN);
	            this.state = 960;
	            this.condition();
	        }

	        this.state = 963;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concurrent_procedure_call_statement() {
	    let localctx = new Concurrent_procedure_call_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, vhdlParser.RULE_concurrent_procedure_call_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 965;
	            this.label_colon();

	        }
	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.POSTPONED) {
	            this.state = 968;
	            this.match(vhdlParser.POSTPONED);
	        }

	        this.state = 971;
	        this.procedure_call();
	        this.state = 972;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concurrent_signal_assignment_statement() {
	    let localctx = new Concurrent_signal_assignment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, vhdlParser.RULE_concurrent_signal_assignment_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 974;
	            this.label_colon();

	        }
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.POSTPONED) {
	            this.state = 977;
	            this.match(vhdlParser.POSTPONED);
	        }

	        this.state = 982;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	        case vhdlParser.LPAREN:
	            this.state = 980;
	            this.conditional_signal_assignment();
	            break;
	        case vhdlParser.WITH:
	            this.state = 981;
	            this.selected_signal_assignment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, vhdlParser.RULE_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition_clause() {
	    let localctx = new Condition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, vhdlParser.RULE_condition_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this.match(vhdlParser.UNTIL);
	        this.state = 987;
	        this.condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_signal_assignment() {
	    let localctx = new Conditional_signal_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, vhdlParser.RULE_conditional_signal_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.target();
	        this.state = 990;
	        this.match(vhdlParser.LE);
	        this.state = 991;
	        this.opts();
	        this.state = 992;
	        this.conditional_waveforms();
	        this.state = 993;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_waveforms() {
	    let localctx = new Conditional_waveformsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, vhdlParser.RULE_conditional_waveforms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.waveform();
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.WHEN) {
	            this.state = 996;
	            this.match(vhdlParser.WHEN);
	            this.state = 997;
	            this.condition();
	            this.state = 1000;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.ELSE) {
	                this.state = 998;
	                this.match(vhdlParser.ELSE);
	                this.state = 999;
	                this.conditional_waveforms();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configuration_declaration() {
	    let localctx = new Configuration_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, vhdlParser.RULE_configuration_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        this.match(vhdlParser.CONFIGURATION);
	        this.state = 1005;
	        this.identifier();
	        this.state = 1006;
	        this.match(vhdlParser.OF);
	        this.state = 1007;
	        this.name();
	        this.state = 1008;
	        this.match(vhdlParser.IS);
	        this.state = 1009;
	        this.configuration_declarative_part();
	        this.state = 1010;
	        this.block_configuration();
	        this.state = 1011;
	        this.match(vhdlParser.END);
	        this.state = 1013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.CONFIGURATION) {
	            this.state = 1012;
	            this.match(vhdlParser.CONFIGURATION);
	        }

	        this.state = 1016;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1015;
	            this.identifier();
	        }

	        this.state = 1018;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configuration_declarative_item() {
	    let localctx = new Configuration_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, vhdlParser.RULE_configuration_declarative_item);
	    try {
	        this.state = 1023;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.USE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1020;
	            this.use_clause();
	            break;
	        case vhdlParser.ATTRIBUTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1021;
	            this.attribute_specification();
	            break;
	        case vhdlParser.GROUP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1022;
	            this.group_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configuration_declarative_part() {
	    let localctx = new Configuration_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, vhdlParser.RULE_configuration_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.ATTRIBUTE || _la===vhdlParser.GROUP || _la===vhdlParser.USE) {
	            this.state = 1025;
	            this.configuration_declarative_item();
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configuration_item() {
	    let localctx = new Configuration_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, vhdlParser.RULE_configuration_item);
	    try {
	        this.state = 1033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1031;
	            this.block_configuration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1032;
	            this.component_configuration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configuration_specification() {
	    let localctx = new Configuration_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, vhdlParser.RULE_configuration_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1035;
	        this.match(vhdlParser.FOR);
	        this.state = 1036;
	        this.component_specification();
	        this.state = 1037;
	        this.binding_indication();
	        this.state = 1038;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declaration() {
	    let localctx = new Constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, vhdlParser.RULE_constant_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.match(vhdlParser.CONSTANT);
	        this.state = 1041;
	        this.identifier_list();
	        this.state = 1042;
	        this.match(vhdlParser.COLON);
	        this.state = 1043;
	        this.subtype_indication();
	        this.state = 1046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1044;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1045;
	            this.expression();
	        }

	        this.state = 1048;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constrained_array_definition() {
	    let localctx = new Constrained_array_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, vhdlParser.RULE_constrained_array_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1050;
	        this.match(vhdlParser.ARRAY);
	        this.state = 1051;
	        this.index_constraint();
	        this.state = 1052;
	        this.match(vhdlParser.OF);
	        this.state = 1053;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constrained_nature_definition() {
	    let localctx = new Constrained_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, vhdlParser.RULE_constrained_nature_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1055;
	        this.match(vhdlParser.ARRAY);
	        this.state = 1056;
	        this.index_constraint();
	        this.state = 1057;
	        this.match(vhdlParser.OF);
	        this.state = 1058;
	        this.subnature_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint() {
	    let localctx = new ConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, vhdlParser.RULE_constraint);
	    try {
	        this.state = 1062;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1060;
	            this.range_constraint();
	            break;
	        case vhdlParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1061;
	            this.index_constraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	context_clause() {
	    let localctx = new Context_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, vhdlParser.RULE_context_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.LIBRARY || _la===vhdlParser.USE) {
	            this.state = 1064;
	            this.context_item();
	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	context_item() {
	    let localctx = new Context_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, vhdlParser.RULE_context_item);
	    try {
	        this.state = 1072;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.LIBRARY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1070;
	            this.library_clause();
	            break;
	        case vhdlParser.USE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.use_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delay_mechanism() {
	    let localctx = new Delay_mechanismContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, vhdlParser.RULE_delay_mechanism);
	    var _la = 0; // Token type
	    try {
	        this.state = 1080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.TRANSPORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1074;
	            this.match(vhdlParser.TRANSPORT);
	            break;
	        case vhdlParser.INERTIAL:
	        case vhdlParser.REJECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1077;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.REJECT) {
	                this.state = 1075;
	                this.match(vhdlParser.REJECT);
	                this.state = 1076;
	                this.expression();
	            }

	            this.state = 1079;
	            this.match(vhdlParser.INERTIAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	design_file() {
	    let localctx = new Design_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, vhdlParser.RULE_design_file);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1085;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ARCHITECTURE) | (1 << vhdlParser.CONFIGURATION) | (1 << vhdlParser.ENTITY))) !== 0) || _la===vhdlParser.LIBRARY || _la===vhdlParser.PACKAGE || _la===vhdlParser.USE) {
	            this.state = 1082;
	            this.design_unit();
	            this.state = 1087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1088;
	        this.match(vhdlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	design_unit() {
	    let localctx = new Design_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, vhdlParser.RULE_design_unit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.context_clause();
	        this.state = 1091;
	        this.library_unit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designator() {
	    let localctx = new DesignatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, vhdlParser.RULE_designator);
	    try {
	        this.state = 1095;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1093;
	            this.identifier();
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1094;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	direction() {
	    let localctx = new DirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, vhdlParser.RULE_direction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.DOWNTO || _la===vhdlParser.TO)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disconnection_specification() {
	    let localctx = new Disconnection_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, vhdlParser.RULE_disconnection_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1099;
	        this.match(vhdlParser.DISCONNECT);
	        this.state = 1100;
	        this.guarded_signal_specification();
	        this.state = 1101;
	        this.match(vhdlParser.AFTER);
	        this.state = 1102;
	        this.expression();
	        this.state = 1103;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discrete_range() {
	    let localctx = new Discrete_rangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, vhdlParser.RULE_discrete_range);
	    try {
	        this.state = 1107;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1105;
	            this.range_decl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1106;
	            this.subtype_indication();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_association() {
	    let localctx = new Element_associationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, vhdlParser.RULE_element_association);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 1109;
	            this.choices();
	            this.state = 1110;
	            this.match(vhdlParser.ARROW);

	        }
	        this.state = 1114;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_declaration() {
	    let localctx = new Element_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, vhdlParser.RULE_element_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1116;
	        this.identifier_list();
	        this.state = 1117;
	        this.match(vhdlParser.COLON);
	        this.state = 1118;
	        this.element_subtype_definition();
	        this.state = 1119;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_subnature_definition() {
	    let localctx = new Element_subnature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, vhdlParser.RULE_element_subnature_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this.subnature_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_subtype_definition() {
	    let localctx = new Element_subtype_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, vhdlParser.RULE_element_subtype_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1123;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_aspect() {
	    let localctx = new Entity_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, vhdlParser.RULE_entity_aspect);
	    var _la = 0; // Token type
	    try {
	        this.state = 1136;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ENTITY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1125;
	            this.match(vhdlParser.ENTITY);
	            this.state = 1126;
	            this.name();
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.LPAREN) {
	                this.state = 1127;
	                this.match(vhdlParser.LPAREN);
	                this.state = 1128;
	                this.identifier();
	                this.state = 1129;
	                this.match(vhdlParser.RPAREN);
	            }

	            break;
	        case vhdlParser.CONFIGURATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1133;
	            this.match(vhdlParser.CONFIGURATION);
	            this.state = 1134;
	            this.name();
	            break;
	        case vhdlParser.OPEN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1135;
	            this.match(vhdlParser.OPEN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_class() {
	    let localctx = new Entity_classContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, vhdlParser.RULE_entity_class);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        _la = this._input.LA(1);
	        if(!(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (vhdlParser.ARCHITECTURE - 8)) | (1 << (vhdlParser.COMPONENT - 8)) | (1 << (vhdlParser.CONFIGURATION - 8)) | (1 << (vhdlParser.CONSTANT - 8)) | (1 << (vhdlParser.ENTITY - 8)) | (1 << (vhdlParser.FILE - 8)) | (1 << (vhdlParser.FUNCTION - 8)) | (1 << (vhdlParser.GROUP - 8)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (vhdlParser.LABEL - 42)) | (1 << (vhdlParser.LITERAL - 42)) | (1 << (vhdlParser.NATURE - 42)) | (1 << (vhdlParser.PACKAGE - 42)) | (1 << (vhdlParser.PROCEDURE - 42)) | (1 << (vhdlParser.QUANTITY - 42)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (vhdlParser.SIGNAL - 86)) | (1 << (vhdlParser.SUBNATURE - 86)) | (1 << (vhdlParser.SUBTYPE - 86)) | (1 << (vhdlParser.TERMINAL - 86)) | (1 << (vhdlParser.TYPE - 86)) | (1 << (vhdlParser.UNITS - 86)) | (1 << (vhdlParser.VARIABLE - 86)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_class_entry() {
	    let localctx = new Entity_class_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, vhdlParser.RULE_entity_class_entry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this.entity_class();
	        this.state = 1142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BOX) {
	            this.state = 1141;
	            this.match(vhdlParser.BOX);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_class_entry_list() {
	    let localctx = new Entity_class_entry_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, vhdlParser.RULE_entity_class_entry_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1144;
	        this.entity_class_entry();
	        this.state = 1149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1145;
	            this.match(vhdlParser.COMMA);
	            this.state = 1146;
	            this.entity_class_entry();
	            this.state = 1151;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_declaration() {
	    let localctx = new Entity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, vhdlParser.RULE_entity_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        this.match(vhdlParser.ENTITY);
	        this.state = 1153;
	        this.identifier();
	        this.state = 1154;
	        this.match(vhdlParser.IS);
	        this.state = 1155;
	        this.entity_header();
	        this.state = 1156;
	        this.entity_declarative_part();
	        this.state = 1159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BEGIN) {
	            this.state = 1157;
	            this.match(vhdlParser.BEGIN);
	            this.state = 1158;
	            this.entity_statement_part();
	        }

	        this.state = 1161;
	        this.match(vhdlParser.END);
	        this.state = 1163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ENTITY) {
	            this.state = 1162;
	            this.match(vhdlParser.ENTITY);
	        }

	        this.state = 1166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1165;
	            this.identifier();
	        }

	        this.state = 1168;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_declarative_item() {
	    let localctx = new Entity_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, vhdlParser.RULE_entity_declarative_item);
	    try {
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1170;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1171;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1172;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1173;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1174;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1175;
	            this.signal_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1176;
	            this.variable_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1177;
	            this.file_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1178;
	            this.alias_declaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1179;
	            this.attribute_declaration();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1180;
	            this.attribute_specification();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1181;
	            this.disconnection_specification();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1182;
	            this.step_limit_specification();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1183;
	            this.use_clause();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1184;
	            this.group_template_declaration();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1185;
	            this.group_declaration();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1186;
	            this.nature_declaration();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1187;
	            this.subnature_declaration();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1188;
	            this.quantity_declaration();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1189;
	            this.terminal_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_declarative_part() {
	    let localctx = new Entity_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, vhdlParser.RULE_entity_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1192;
	            this.entity_declarative_item();
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_designator() {
	    let localctx = new Entity_designatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, vhdlParser.RULE_entity_designator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1198;
	        this.entity_tag();
	        this.state = 1200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LBRACKET) {
	            this.state = 1199;
	            this.signature();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_header() {
	    let localctx = new Entity_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, vhdlParser.RULE_entity_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GENERIC) {
	            this.state = 1202;
	            this.generic_clause();
	        }

	        this.state = 1206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PORT) {
	            this.state = 1205;
	            this.port_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_name_list() {
	    let localctx = new Entity_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, vhdlParser.RULE_entity_name_list);
	    var _la = 0; // Token type
	    try {
	        this.state = 1218;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.CHARACTER_LITERAL:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1208;
	            this.entity_designator();
	            this.state = 1213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 1209;
	                this.match(vhdlParser.COMMA);
	                this.state = 1210;
	                this.entity_designator();
	                this.state = 1215;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case vhdlParser.OTHERS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1216;
	            this.match(vhdlParser.OTHERS);
	            break;
	        case vhdlParser.ALL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1217;
	            this.match(vhdlParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_specification() {
	    let localctx = new Entity_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, vhdlParser.RULE_entity_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1220;
	        this.entity_name_list();
	        this.state = 1221;
	        this.match(vhdlParser.COLON);
	        this.state = 1222;
	        this.entity_class();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_statement() {
	    let localctx = new Entity_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, vhdlParser.RULE_entity_statement);
	    try {
	        this.state = 1227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1224;
	            this.concurrent_assertion_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1225;
	            this.process_statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1226;
	            this.concurrent_procedure_call_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_statement_part() {
	    let localctx = new Entity_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, vhdlParser.RULE_entity_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.ASSERT || _la===vhdlParser.POSTPONED || _la===vhdlParser.PROCESS || _la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1229;
	            this.entity_statement();
	            this.state = 1234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_tag() {
	    let localctx = new Entity_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, vhdlParser.RULE_entity_tag);
	    try {
	        this.state = 1238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.identifier();
	            break;
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1236;
	            this.match(vhdlParser.CHARACTER_LITERAL);
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1237;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeration_literal() {
	    let localctx = new Enumeration_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, vhdlParser.RULE_enumeration_literal);
	    try {
	        this.state = 1242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1240;
	            this.identifier();
	            break;
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1241;
	            this.match(vhdlParser.CHARACTER_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeration_type_definition() {
	    let localctx = new Enumeration_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, vhdlParser.RULE_enumeration_type_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1245;
	        this.enumeration_literal();
	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1246;
	            this.match(vhdlParser.COMMA);
	            this.state = 1247;
	            this.enumeration_literal();
	            this.state = 1252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1253;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exit_statement() {
	    let localctx = new Exit_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, vhdlParser.RULE_exit_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1255;
	            this.label_colon();
	        }

	        this.state = 1258;
	        this.match(vhdlParser.EXIT);
	        this.state = 1260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1259;
	            this.identifier();
	        }

	        this.state = 1264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.WHEN) {
	            this.state = 1262;
	            this.match(vhdlParser.WHEN);
	            this.state = 1263;
	            this.condition();
	        }

	        this.state = 1266;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, vhdlParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.relation();
	        this.state = 1274;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1269;
	                this.logical_operator();
	                this.state = 1270;
	                this.relation(); 
	            }
	            this.state = 1276;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, vhdlParser.RULE_factor);
	    try {
	        this.state = 1286;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.NEW:
	        case vhdlParser.NULL_:
	        case vhdlParser.BASE_LITERAL:
	        case vhdlParser.BIT_STRING_LITERAL:
	        case vhdlParser.REAL_LITERAL:
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.CHARACTER_LITERAL:
	        case vhdlParser.STRING_LITERAL:
	        case vhdlParser.LPAREN:
	        case vhdlParser.INTEGER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1277;
	            this.primary();
	            this.state = 1280;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	            if(la_===1) {
	                this.state = 1278;
	                this.match(vhdlParser.DOUBLESTAR);
	                this.state = 1279;
	                this.primary();

	            }
	            break;
	        case vhdlParser.ABS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1282;
	            this.match(vhdlParser.ABS);
	            this.state = 1283;
	            this.primary();
	            break;
	        case vhdlParser.NOT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1284;
	            this.match(vhdlParser.NOT);
	            this.state = 1285;
	            this.primary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_declaration() {
	    let localctx = new File_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, vhdlParser.RULE_file_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(vhdlParser.FILE);
	        this.state = 1289;
	        this.identifier_list();
	        this.state = 1290;
	        this.match(vhdlParser.COLON);
	        this.state = 1291;
	        this.subtype_indication();
	        this.state = 1293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS || _la===vhdlParser.OPEN) {
	            this.state = 1292;
	            this.file_open_information();
	        }

	        this.state = 1295;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_logical_name() {
	    let localctx = new File_logical_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, vhdlParser.RULE_file_logical_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1297;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_open_information() {
	    let localctx = new File_open_informationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, vhdlParser.RULE_file_open_information);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.OPEN) {
	            this.state = 1299;
	            this.match(vhdlParser.OPEN);
	            this.state = 1300;
	            this.expression();
	        }

	        this.state = 1303;
	        this.match(vhdlParser.IS);
	        this.state = 1304;
	        this.file_logical_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_type_definition() {
	    let localctx = new File_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, vhdlParser.RULE_file_type_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this.match(vhdlParser.FILE);
	        this.state = 1307;
	        this.match(vhdlParser.OF);
	        this.state = 1308;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formal_parameter_list() {
	    let localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, vhdlParser.RULE_formal_parameter_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this.interface_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formal_part() {
	    let localctx = new Formal_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, vhdlParser.RULE_formal_part);
	    try {
	        this.state = 1318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1312;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1313;
	            this.identifier();
	            this.state = 1314;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1315;
	            this.explicit_range();
	            this.state = 1316;
	            this.match(vhdlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	free_quantity_declaration() {
	    let localctx = new Free_quantity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, vhdlParser.RULE_free_quantity_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.match(vhdlParser.QUANTITY);
	        this.state = 1321;
	        this.identifier_list();
	        this.state = 1322;
	        this.match(vhdlParser.COLON);
	        this.state = 1323;
	        this.subtype_indication();
	        this.state = 1326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1324;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1325;
	            this.expression();
	        }

	        this.state = 1328;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generate_statement() {
	    let localctx = new Generate_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, vhdlParser.RULE_generate_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1330;
	        this.label_colon();
	        this.state = 1331;
	        this.generation_scheme();
	        this.state = 1332;
	        this.match(vhdlParser.GENERATE);
	        this.state = 1340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.BEGIN) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	                this.state = 1333;
	                this.block_declarative_item();
	                this.state = 1338;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1339;
	            this.match(vhdlParser.BEGIN);
	        }

	        this.state = 1345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
	            this.state = 1342;
	            this.architecture_statement();
	            this.state = 1347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1348;
	        this.match(vhdlParser.END);
	        this.state = 1349;
	        this.match(vhdlParser.GENERATE);
	        this.state = 1351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1350;
	            this.identifier();
	        }

	        this.state = 1353;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generation_scheme() {
	    let localctx = new Generation_schemeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, vhdlParser.RULE_generation_scheme);
	    try {
	        this.state = 1359;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1355;
	            this.match(vhdlParser.FOR);
	            this.state = 1356;
	            this.parameter_specification();
	            break;
	        case vhdlParser.IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1357;
	            this.match(vhdlParser.IF);
	            this.state = 1358;
	            this.condition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_clause() {
	    let localctx = new Generic_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, vhdlParser.RULE_generic_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.match(vhdlParser.GENERIC);
	        this.state = 1362;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1363;
	        this.generic_list();
	        this.state = 1364;
	        this.match(vhdlParser.RPAREN);
	        this.state = 1365;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_list() {
	    let localctx = new Generic_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, vhdlParser.RULE_generic_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this.interface_constant_declaration();
	        this.state = 1372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.SEMI) {
	            this.state = 1368;
	            this.match(vhdlParser.SEMI);
	            this.state = 1369;
	            this.interface_constant_declaration();
	            this.state = 1374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_map_aspect() {
	    let localctx = new Generic_map_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, vhdlParser.RULE_generic_map_aspect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1375;
	        this.match(vhdlParser.GENERIC);
	        this.state = 1376;
	        this.match(vhdlParser.MAP);
	        this.state = 1377;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1378;
	        this.association_list();
	        this.state = 1379;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_constituent() {
	    let localctx = new Group_constituentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, vhdlParser.RULE_group_constituent);
	    try {
	        this.state = 1383;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1381;
	            this.name();
	            break;
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1382;
	            this.match(vhdlParser.CHARACTER_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_constituent_list() {
	    let localctx = new Group_constituent_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, vhdlParser.RULE_group_constituent_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this.group_constituent();
	        this.state = 1390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1386;
	            this.match(vhdlParser.COMMA);
	            this.state = 1387;
	            this.group_constituent();
	            this.state = 1392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_declaration() {
	    let localctx = new Group_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, vhdlParser.RULE_group_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this.match(vhdlParser.GROUP);
	        this.state = 1394;
	        this.label_colon();
	        this.state = 1395;
	        this.name();
	        this.state = 1396;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1397;
	        this.group_constituent_list();
	        this.state = 1398;
	        this.match(vhdlParser.RPAREN);
	        this.state = 1399;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_template_declaration() {
	    let localctx = new Group_template_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, vhdlParser.RULE_group_template_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1401;
	        this.match(vhdlParser.GROUP);
	        this.state = 1402;
	        this.identifier();
	        this.state = 1403;
	        this.match(vhdlParser.IS);
	        this.state = 1404;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1405;
	        this.entity_class_entry_list();
	        this.state = 1406;
	        this.match(vhdlParser.RPAREN);
	        this.state = 1407;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guarded_signal_specification() {
	    let localctx = new Guarded_signal_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, vhdlParser.RULE_guarded_signal_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1409;
	        this.signal_list();
	        this.state = 1410;
	        this.match(vhdlParser.COLON);
	        this.state = 1411;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, vhdlParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier_list() {
	    let localctx = new Identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, vhdlParser.RULE_identifier_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1415;
	        this.identifier();
	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1416;
	            this.match(vhdlParser.COMMA);
	            this.state = 1417;
	            this.identifier();
	            this.state = 1422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, vhdlParser.RULE_if_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1423;
	            this.label_colon();
	        }

	        this.state = 1426;
	        this.match(vhdlParser.IF);
	        this.state = 1427;
	        this.condition();
	        this.state = 1428;
	        this.match(vhdlParser.THEN);
	        this.state = 1429;
	        this.sequence_of_statements();
	        this.state = 1437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.ELSIF) {
	            this.state = 1430;
	            this.match(vhdlParser.ELSIF);
	            this.state = 1431;
	            this.condition();
	            this.state = 1432;
	            this.match(vhdlParser.THEN);
	            this.state = 1433;
	            this.sequence_of_statements();
	            this.state = 1439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ELSE) {
	            this.state = 1440;
	            this.match(vhdlParser.ELSE);
	            this.state = 1441;
	            this.sequence_of_statements();
	        }

	        this.state = 1444;
	        this.match(vhdlParser.END);
	        this.state = 1445;
	        this.match(vhdlParser.IF);
	        this.state = 1447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1446;
	            this.identifier();
	        }

	        this.state = 1449;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_constraint() {
	    let localctx = new Index_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, vhdlParser.RULE_index_constraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1451;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1452;
	        this.discrete_range();
	        this.state = 1457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1453;
	            this.match(vhdlParser.COMMA);
	            this.state = 1454;
	            this.discrete_range();
	            this.state = 1459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1460;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_specification() {
	    let localctx = new Index_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, vhdlParser.RULE_index_specification);
	    try {
	        this.state = 1464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1462;
	            this.discrete_range();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1463;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_subtype_definition() {
	    let localctx = new Index_subtype_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, vhdlParser.RULE_index_subtype_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this.name();
	        this.state = 1467;
	        this.match(vhdlParser.RANGE);
	        this.state = 1468;
	        this.match(vhdlParser.BOX);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instantiated_unit() {
	    let localctx = new Instantiated_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, vhdlParser.RULE_instantiated_unit);
	    var _la = 0; // Token type
	    try {
	        this.state = 1484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.COMPONENT:
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.COMPONENT) {
	                this.state = 1470;
	                this.match(vhdlParser.COMPONENT);
	            }

	            this.state = 1473;
	            this.name();
	            break;
	        case vhdlParser.ENTITY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1474;
	            this.match(vhdlParser.ENTITY);
	            this.state = 1475;
	            this.name();
	            this.state = 1480;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.LPAREN) {
	                this.state = 1476;
	                this.match(vhdlParser.LPAREN);
	                this.state = 1477;
	                this.identifier();
	                this.state = 1478;
	                this.match(vhdlParser.RPAREN);
	            }

	            break;
	        case vhdlParser.CONFIGURATION:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1482;
	            this.match(vhdlParser.CONFIGURATION);
	            this.state = 1483;
	            this.name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instantiation_list() {
	    let localctx = new Instantiation_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, vhdlParser.RULE_instantiation_list);
	    var _la = 0; // Token type
	    try {
	        this.state = 1496;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1486;
	            this.identifier();
	            this.state = 1491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 1487;
	                this.match(vhdlParser.COMMA);
	                this.state = 1488;
	                this.identifier();
	                this.state = 1493;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case vhdlParser.OTHERS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1494;
	            this.match(vhdlParser.OTHERS);
	            break;
	        case vhdlParser.ALL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1495;
	            this.match(vhdlParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_constant_declaration() {
	    let localctx = new Interface_constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, vhdlParser.RULE_interface_constant_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.CONSTANT) {
	            this.state = 1498;
	            this.match(vhdlParser.CONSTANT);
	        }

	        this.state = 1501;
	        this.identifier_list();
	        this.state = 1502;
	        this.match(vhdlParser.COLON);
	        this.state = 1504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IN) {
	            this.state = 1503;
	            this.match(vhdlParser.IN);
	        }

	        this.state = 1506;
	        this.subtype_indication();
	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1507;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1508;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_declaration() {
	    let localctx = new Interface_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, vhdlParser.RULE_interface_declaration);
	    try {
	        this.state = 1517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.interface_constant_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1512;
	            this.interface_signal_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1513;
	            this.interface_variable_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1514;
	            this.interface_file_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1515;
	            this.interface_terminal_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1516;
	            this.interface_quantity_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_element() {
	    let localctx = new Interface_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, vhdlParser.RULE_interface_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.interface_declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_file_declaration() {
	    let localctx = new Interface_file_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, vhdlParser.RULE_interface_file_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1521;
	        this.match(vhdlParser.FILE);
	        this.state = 1522;
	        this.identifier_list();
	        this.state = 1523;
	        this.match(vhdlParser.COLON);
	        this.state = 1524;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_signal_list() {
	    let localctx = new Interface_signal_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, vhdlParser.RULE_interface_signal_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1526;
	        this.interface_signal_declaration();
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.SEMI) {
	            this.state = 1527;
	            this.match(vhdlParser.SEMI);
	            this.state = 1528;
	            this.interface_signal_declaration();
	            this.state = 1533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_port_list() {
	    let localctx = new Interface_port_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, vhdlParser.RULE_interface_port_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.interface_port_declaration();
	        this.state = 1539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.SEMI) {
	            this.state = 1535;
	            this.match(vhdlParser.SEMI);
	            this.state = 1536;
	            this.interface_port_declaration();
	            this.state = 1541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_list() {
	    let localctx = new Interface_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, vhdlParser.RULE_interface_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1542;
	        this.interface_element();
	        this.state = 1547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.SEMI) {
	            this.state = 1543;
	            this.match(vhdlParser.SEMI);
	            this.state = 1544;
	            this.interface_element();
	            this.state = 1549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_quantity_declaration() {
	    let localctx = new Interface_quantity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, vhdlParser.RULE_interface_quantity_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1550;
	        this.match(vhdlParser.QUANTITY);
	        this.state = 1551;
	        this.identifier_list();
	        this.state = 1552;
	        this.match(vhdlParser.COLON);
	        this.state = 1554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IN || _la===vhdlParser.OUT) {
	            this.state = 1553;
	            _la = this._input.LA(1);
	            if(!(_la===vhdlParser.IN || _la===vhdlParser.OUT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1556;
	        this.subtype_indication();
	        this.state = 1559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1557;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1558;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_port_declaration() {
	    let localctx = new Interface_port_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, vhdlParser.RULE_interface_port_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1561;
	        this.identifier_list();
	        this.state = 1562;
	        this.match(vhdlParser.COLON);
	        this.state = 1564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
	            this.state = 1563;
	            this.signal_mode();
	        }

	        this.state = 1566;
	        this.subtype_indication();
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUS) {
	            this.state = 1567;
	            this.match(vhdlParser.BUS);
	        }

	        this.state = 1572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1570;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1571;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_signal_declaration() {
	    let localctx = new Interface_signal_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, vhdlParser.RULE_interface_signal_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1574;
	        this.match(vhdlParser.SIGNAL);
	        this.state = 1575;
	        this.identifier_list();
	        this.state = 1576;
	        this.match(vhdlParser.COLON);
	        this.state = 1578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
	            this.state = 1577;
	            this.signal_mode();
	        }

	        this.state = 1580;
	        this.subtype_indication();
	        this.state = 1582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUS) {
	            this.state = 1581;
	            this.match(vhdlParser.BUS);
	        }

	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1584;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1585;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_terminal_declaration() {
	    let localctx = new Interface_terminal_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, vhdlParser.RULE_interface_terminal_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1588;
	        this.match(vhdlParser.TERMINAL);
	        this.state = 1589;
	        this.identifier_list();
	        this.state = 1590;
	        this.match(vhdlParser.COLON);
	        this.state = 1591;
	        this.subnature_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_variable_declaration() {
	    let localctx = new Interface_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, vhdlParser.RULE_interface_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARIABLE) {
	            this.state = 1593;
	            this.match(vhdlParser.VARIABLE);
	        }

	        this.state = 1596;
	        this.identifier_list();
	        this.state = 1597;
	        this.match(vhdlParser.COLON);
	        this.state = 1599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
	            this.state = 1598;
	            this.signal_mode();
	        }

	        this.state = 1601;
	        this.subtype_indication();
	        this.state = 1604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 1602;
	            this.match(vhdlParser.VARASGN);
	            this.state = 1603;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteration_scheme() {
	    let localctx = new Iteration_schemeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, vhdlParser.RULE_iteration_scheme);
	    try {
	        this.state = 1610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.WHILE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1606;
	            this.match(vhdlParser.WHILE);
	            this.state = 1607;
	            this.condition();
	            break;
	        case vhdlParser.FOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1608;
	            this.match(vhdlParser.FOR);
	            this.state = 1609;
	            this.parameter_specification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_colon() {
	    let localctx = new Label_colonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, vhdlParser.RULE_label_colon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        this.identifier();
	        this.state = 1613;
	        this.match(vhdlParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	library_clause() {
	    let localctx = new Library_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, vhdlParser.RULE_library_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this.match(vhdlParser.LIBRARY);
	        this.state = 1616;
	        this.logical_name_list();
	        this.state = 1617;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	library_unit() {
	    let localctx = new Library_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, vhdlParser.RULE_library_unit);
	    try {
	        this.state = 1621;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1619;
	            this.secondary_unit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1620;
	            this.primary_unit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, vhdlParser.RULE_literal);
	    try {
	        this.state = 1628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.NULL_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1623;
	            this.match(vhdlParser.NULL_);
	            break;
	        case vhdlParser.BIT_STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1624;
	            this.match(vhdlParser.BIT_STRING_LITERAL);
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1625;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1626;
	            this.enumeration_literal();
	            break;
	        case vhdlParser.BASE_LITERAL:
	        case vhdlParser.REAL_LITERAL:
	        case vhdlParser.INTEGER:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1627;
	            this.numeric_literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_name() {
	    let localctx = new Logical_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, vhdlParser.RULE_logical_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1630;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_name_list() {
	    let localctx = new Logical_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, vhdlParser.RULE_logical_name_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this.logical_name();
	        this.state = 1637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 1633;
	            this.match(vhdlParser.COMMA);
	            this.state = 1634;
	            this.logical_name();
	            this.state = 1639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_operator() {
	    let localctx = new Logical_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, vhdlParser.RULE_logical_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.AND || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (vhdlParser.NAND - 50)) | (1 << (vhdlParser.NOR - 50)) | (1 << (vhdlParser.OR - 50)))) !== 0) || _la===vhdlParser.XNOR || _la===vhdlParser.XOR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loop_statement() {
	    let localctx = new Loop_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, vhdlParser.RULE_loop_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1642;
	            this.label_colon();
	        }

	        this.state = 1646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR || _la===vhdlParser.WHILE) {
	            this.state = 1645;
	            this.iteration_scheme();
	        }

	        this.state = 1648;
	        this.match(vhdlParser.LOOP);
	        this.state = 1649;
	        this.sequence_of_statements();
	        this.state = 1650;
	        this.match(vhdlParser.END);
	        this.state = 1651;
	        this.match(vhdlParser.LOOP);
	        this.state = 1653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1652;
	            this.identifier();
	        }

	        this.state = 1655;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_mode() {
	    let localctx = new Signal_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, vhdlParser.RULE_signal_mode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1657;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplying_operator() {
	    let localctx = new Multiplying_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, vhdlParser.RULE_multiplying_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1659;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.MOD || _la===vhdlParser.REM || _la===vhdlParser.MUL || _la===vhdlParser.DIV)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, vhdlParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.state = 1661;
	            this.identifier();
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.state = 1662;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1668;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1665;
	                this.name_part(); 
	            }
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_part() {
	    let localctx = new Name_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, vhdlParser.RULE_name_part);
	    try {
	        this.state = 1675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1671;
	            this.selected_name_part();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1672;
	            this.function_call_or_indexed_name_part();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1673;
	            this.slice_name_part();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1674;
	            this.attribute_name_part();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selected_name() {
	    let localctx = new Selected_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, vhdlParser.RULE_selected_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1677;
	        this.identifier();
	        this.state = 1682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.DOT) {
	            this.state = 1678;
	            this.match(vhdlParser.DOT);
	            this.state = 1679;
	            this.suffix();
	            this.state = 1684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selected_name_part() {
	    let localctx = new Selected_name_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, vhdlParser.RULE_selected_name_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1685;
	        		this.match(vhdlParser.DOT);
	        		this.state = 1686;
	        		this.suffix();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1689; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,172, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_or_indexed_name_part() {
	    let localctx = new Function_call_or_indexed_name_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, vhdlParser.RULE_function_call_or_indexed_name_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1692;
	        this.actual_parameter_part();
	        this.state = 1693;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice_name_part() {
	    let localctx = new Slice_name_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, vhdlParser.RULE_slice_name_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1695;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1696;
	        this.discrete_range();
	        this.state = 1697;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_name_part() {
	    let localctx = new Attribute_name_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, vhdlParser.RULE_attribute_name_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LBRACKET) {
	            this.state = 1699;
	            this.signature();
	        }

	        this.state = 1702;
	        this.match(vhdlParser.APOSTROPHE);
	        this.state = 1703;
	        this.attribute_designator();
	        this.state = 1708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        if(la_===1) {
	            this.state = 1704;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1705;
	            this.expression();
	            this.state = 1706;
	            this.match(vhdlParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nature_declaration() {
	    let localctx = new Nature_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, vhdlParser.RULE_nature_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1710;
	        this.match(vhdlParser.NATURE);
	        this.state = 1711;
	        this.identifier();
	        this.state = 1712;
	        this.match(vhdlParser.IS);
	        this.state = 1713;
	        this.nature_definition();
	        this.state = 1714;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nature_definition() {
	    let localctx = new Nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, vhdlParser.RULE_nature_definition);
	    try {
	        this.state = 1718;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1716;
	            this.scalar_nature_definition();
	            break;
	        case vhdlParser.ARRAY:
	        case vhdlParser.RECORD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1717;
	            this.composite_nature_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nature_element_declaration() {
	    let localctx = new Nature_element_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, vhdlParser.RULE_nature_element_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1720;
	        this.identifier_list();
	        this.state = 1721;
	        this.match(vhdlParser.COLON);
	        this.state = 1722;
	        this.element_subnature_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	next_statement() {
	    let localctx = new Next_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, vhdlParser.RULE_next_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1724;
	            this.label_colon();
	        }

	        this.state = 1727;
	        this.match(vhdlParser.NEXT);
	        this.state = 1729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1728;
	            this.identifier();
	        }

	        this.state = 1733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.WHEN) {
	            this.state = 1731;
	            this.match(vhdlParser.WHEN);
	            this.state = 1732;
	            this.condition();
	        }

	        this.state = 1735;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_literal() {
	    let localctx = new Numeric_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, vhdlParser.RULE_numeric_literal);
	    try {
	        this.state = 1739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1737;
	            this.abstract_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1738;
	            this.physical_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_declaration() {
	    let localctx = new Object_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, vhdlParser.RULE_object_declaration);
	    try {
	        this.state = 1747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.CONSTANT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1741;
	            this.constant_declaration();
	            break;
	        case vhdlParser.SIGNAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1742;
	            this.signal_declaration();
	            break;
	        case vhdlParser.SHARED:
	        case vhdlParser.VARIABLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1743;
	            this.variable_declaration();
	            break;
	        case vhdlParser.FILE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1744;
	            this.file_declaration();
	            break;
	        case vhdlParser.TERMINAL:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1745;
	            this.terminal_declaration();
	            break;
	        case vhdlParser.QUANTITY:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1746;
	            this.quantity_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opts() {
	    let localctx = new OptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, vhdlParser.RULE_opts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.GUARDED) {
	            this.state = 1749;
	            this.match(vhdlParser.GUARDED);
	        }

	        this.state = 1753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.INERTIAL || _la===vhdlParser.REJECT || _la===vhdlParser.TRANSPORT) {
	            this.state = 1752;
	            this.delay_mechanism();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_body() {
	    let localctx = new Package_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, vhdlParser.RULE_package_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1755;
	        this.match(vhdlParser.PACKAGE);
	        this.state = 1756;
	        this.match(vhdlParser.BODY);
	        this.state = 1757;
	        this.identifier();
	        this.state = 1758;
	        this.match(vhdlParser.IS);
	        this.state = 1759;
	        this.package_body_declarative_part();
	        this.state = 1760;
	        this.match(vhdlParser.END);
	        this.state = 1763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PACKAGE) {
	            this.state = 1761;
	            this.match(vhdlParser.PACKAGE);
	            this.state = 1762;
	            this.match(vhdlParser.BODY);
	        }

	        this.state = 1766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1765;
	            this.identifier();
	        }

	        this.state = 1768;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_body_declarative_item() {
	    let localctx = new Package_body_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, vhdlParser.RULE_package_body_declarative_item);
	    try {
	        this.state = 1781;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1770;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1771;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1772;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1773;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1774;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1775;
	            this.variable_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1776;
	            this.file_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1777;
	            this.alias_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1778;
	            this.use_clause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1779;
	            this.group_template_declaration();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1780;
	            this.group_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_body_declarative_part() {
	    let localctx = new Package_body_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, vhdlParser.RULE_package_body_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1783;
	            this.package_body_declarative_item();
	            this.state = 1788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_declaration() {
	    let localctx = new Package_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, vhdlParser.RULE_package_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this.match(vhdlParser.PACKAGE);
	        this.state = 1790;
	        this.identifier();
	        this.state = 1791;
	        this.match(vhdlParser.IS);
	        this.state = 1792;
	        this.package_declarative_part();
	        this.state = 1793;
	        this.match(vhdlParser.END);
	        this.state = 1795;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PACKAGE) {
	            this.state = 1794;
	            this.match(vhdlParser.PACKAGE);
	        }

	        this.state = 1798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1797;
	            this.identifier();
	        }

	        this.state = 1800;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_declarative_item() {
	    let localctx = new Package_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, vhdlParser.RULE_package_declarative_item);
	    try {
	        this.state = 1821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1802;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1803;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1804;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1805;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1806;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1807;
	            this.signal_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1808;
	            this.variable_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1809;
	            this.file_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1810;
	            this.alias_declaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1811;
	            this.component_declaration();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1812;
	            this.attribute_declaration();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1813;
	            this.attribute_specification();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1814;
	            this.disconnection_specification();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1815;
	            this.use_clause();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1816;
	            this.group_template_declaration();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1817;
	            this.group_declaration();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1818;
	            this.nature_declaration();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1819;
	            this.subnature_declaration();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1820;
	            this.terminal_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	package_declarative_part() {
	    let localctx = new Package_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, vhdlParser.RULE_package_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1823;
	            this.package_declarative_item();
	            this.state = 1828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_specification() {
	    let localctx = new Parameter_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, vhdlParser.RULE_parameter_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        this.identifier();
	        this.state = 1830;
	        this.match(vhdlParser.IN);
	        this.state = 1831;
	        this.discrete_range();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	physical_literal() {
	    let localctx = new Physical_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, vhdlParser.RULE_physical_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1833;
	        this.abstract_literal();

	        this.state = 1834;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	physical_type_definition() {
	    let localctx = new Physical_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, vhdlParser.RULE_physical_type_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.range_constraint();
	        this.state = 1837;
	        this.match(vhdlParser.UNITS);
	        this.state = 1838;
	        this.base_unit_declaration();
	        this.state = 1842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1839;
	            this.secondary_unit_declaration();
	            this.state = 1844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1845;
	        this.match(vhdlParser.END);
	        this.state = 1846;
	        this.match(vhdlParser.UNITS);
	        this.state = 1848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1847;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	port_clause() {
	    let localctx = new Port_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, vhdlParser.RULE_port_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this.match(vhdlParser.PORT);
	        this.state = 1851;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1852;
	        this.port_list();
	        this.state = 1853;
	        this.match(vhdlParser.RPAREN);
	        this.state = 1854;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	port_list() {
	    let localctx = new Port_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, vhdlParser.RULE_port_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        this.interface_port_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	port_map_aspect() {
	    let localctx = new Port_map_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, vhdlParser.RULE_port_map_aspect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this.match(vhdlParser.PORT);
	        this.state = 1859;
	        this.match(vhdlParser.MAP);
	        this.state = 1860;
	        this.match(vhdlParser.LPAREN);
	        this.state = 1861;
	        this.association_list();
	        this.state = 1862;
	        this.match(vhdlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, vhdlParser.RULE_primary);
	    try {
	        this.state = 1873;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1864;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1865;
	            this.qualified_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1866;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1867;
	            this.expression();
	            this.state = 1868;
	            this.match(vhdlParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1870;
	            this.allocator();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1871;
	            this.aggregate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1872;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_unit() {
	    let localctx = new Primary_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, vhdlParser.RULE_primary_unit);
	    try {
	        this.state = 1878;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ENTITY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1875;
	            this.entity_declaration();
	            break;
	        case vhdlParser.CONFIGURATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1876;
	            this.configuration_declaration();
	            break;
	        case vhdlParser.PACKAGE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1877;
	            this.package_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedural_declarative_item() {
	    let localctx = new Procedural_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, vhdlParser.RULE_procedural_declarative_item);
	    try {
	        this.state = 1892;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1880;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1881;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1882;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1883;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1884;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1885;
	            this.variable_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1886;
	            this.alias_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1887;
	            this.attribute_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1888;
	            this.attribute_specification();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1889;
	            this.use_clause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1890;
	            this.group_template_declaration();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1891;
	            this.group_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedural_declarative_part() {
	    let localctx = new Procedural_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, vhdlParser.RULE_procedural_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1894;
	            this.procedural_declarative_item();
	            this.state = 1899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedural_statement_part() {
	    let localctx = new Procedural_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, vhdlParser.RULE_procedural_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
	            this.state = 1900;
	            this.sequential_statement();
	            this.state = 1905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure_call() {
	    let localctx = new Procedure_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, vhdlParser.RULE_procedure_call);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1906;
	        this.selected_name();
	        this.state = 1911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 1907;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1908;
	            this.actual_parameter_part();
	            this.state = 1909;
	            this.match(vhdlParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure_call_statement() {
	    let localctx = new Procedure_call_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, vhdlParser.RULE_procedure_call_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        if(la_===1) {
	            this.state = 1913;
	            this.label_colon();

	        }
	        this.state = 1916;
	        this.procedure_call();
	        this.state = 1917;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_declarative_item() {
	    let localctx = new Process_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, vhdlParser.RULE_process_declarative_item);
	    try {
	        this.state = 1932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1919;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1920;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1921;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1922;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1923;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1924;
	            this.variable_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1925;
	            this.file_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1926;
	            this.alias_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1927;
	            this.attribute_declaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1928;
	            this.attribute_specification();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1929;
	            this.use_clause();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1930;
	            this.group_template_declaration();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1931;
	            this.group_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_declarative_part() {
	    let localctx = new Process_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, vhdlParser.RULE_process_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 1934;
	            this.process_declarative_item();
	            this.state = 1939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_statement() {
	    let localctx = new Process_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, vhdlParser.RULE_process_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1940;
	            this.label_colon();
	        }

	        this.state = 1944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.POSTPONED) {
	            this.state = 1943;
	            this.match(vhdlParser.POSTPONED);
	        }

	        this.state = 1946;
	        this.match(vhdlParser.PROCESS);
	        this.state = 1951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 1947;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1948;
	            this.sensitivity_list();
	            this.state = 1949;
	            this.match(vhdlParser.RPAREN);
	        }

	        this.state = 1954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS) {
	            this.state = 1953;
	            this.match(vhdlParser.IS);
	        }

	        this.state = 1956;
	        this.process_declarative_part();
	        this.state = 1957;
	        this.match(vhdlParser.BEGIN);
	        this.state = 1958;
	        this.process_statement_part();
	        this.state = 1959;
	        this.match(vhdlParser.END);
	        this.state = 1961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.POSTPONED) {
	            this.state = 1960;
	            this.match(vhdlParser.POSTPONED);
	        }

	        this.state = 1963;
	        this.match(vhdlParser.PROCESS);
	        this.state = 1965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 1964;
	            this.identifier();
	        }

	        this.state = 1967;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_statement_part() {
	    let localctx = new Process_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, vhdlParser.RULE_process_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
	            this.state = 1969;
	            this.sequential_statement();
	            this.state = 1974;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_expression() {
	    let localctx = new Qualified_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, vhdlParser.RULE_qualified_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1975;
	        this.subtype_indication();
	        this.state = 1976;
	        this.match(vhdlParser.APOSTROPHE);
	        this.state = 1982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1977;
	            this.aggregate();
	            break;

	        case 2:
	            this.state = 1978;
	            this.match(vhdlParser.LPAREN);
	            this.state = 1979;
	            this.expression();
	            this.state = 1980;
	            this.match(vhdlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantity_declaration() {
	    let localctx = new Quantity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, vhdlParser.RULE_quantity_declaration);
	    try {
	        this.state = 1987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1984;
	            this.free_quantity_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1985;
	            this.branch_quantity_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1986;
	            this.source_quantity_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantity_list() {
	    let localctx = new Quantity_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, vhdlParser.RULE_quantity_list);
	    var _la = 0; // Token type
	    try {
	        this.state = 1999;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1989;
	            this.name();
	            this.state = 1994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 1990;
	                this.match(vhdlParser.COMMA);
	                this.state = 1991;
	                this.name();
	                this.state = 1996;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case vhdlParser.OTHERS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1997;
	            this.match(vhdlParser.OTHERS);
	            break;
	        case vhdlParser.ALL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1998;
	            this.match(vhdlParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantity_specification() {
	    let localctx = new Quantity_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, vhdlParser.RULE_quantity_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this.quantity_list();
	        this.state = 2002;
	        this.match(vhdlParser.COLON);
	        this.state = 2003;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_decl() {
	    let localctx = new Range_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, vhdlParser.RULE_range_decl);
	    try {
	        this.state = 2007;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2005;
	            this.explicit_range();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2006;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_range() {
	    let localctx = new Explicit_rangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, vhdlParser.RULE_explicit_range);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2009;
	        this.simple_expression();
	        this.state = 2013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 2010;
	            this.direction();
	            this.state = 2011;
	            this.simple_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_constraint() {
	    let localctx = new Range_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, vhdlParser.RULE_range_constraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2015;
	        this.match(vhdlParser.RANGE);
	        this.state = 2016;
	        this.range_decl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record_nature_definition() {
	    let localctx = new Record_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, vhdlParser.RULE_record_nature_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2018;
	        this.match(vhdlParser.RECORD);
	        this.state = 2020; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2019;
	            this.nature_element_declaration();
	            this.state = 2022; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER);
	        this.state = 2024;
	        this.match(vhdlParser.END);
	        this.state = 2025;
	        this.match(vhdlParser.RECORD);
	        this.state = 2027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2026;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record_type_definition() {
	    let localctx = new Record_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, vhdlParser.RULE_record_type_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this.match(vhdlParser.RECORD);
	        this.state = 2031; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2030;
	            this.element_declaration();
	            this.state = 2033; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER);
	        this.state = 2035;
	        this.match(vhdlParser.END);
	        this.state = 2036;
	        this.match(vhdlParser.RECORD);
	        this.state = 2038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2037;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, vhdlParser.RULE_relation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2040;
	        this.shift_expression();
	        this.state = 2044;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        if(la_===1) {
	            this.state = 2041;
	            this.relational_operator();
	            this.state = 2042;
	            this.shift_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relational_operator() {
	    let localctx = new Relational_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, vhdlParser.RULE_relational_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2046;
	        _la = this._input.LA(1);
	        if(!(((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (vhdlParser.LE - 131)) | (1 << (vhdlParser.GE - 131)) | (1 << (vhdlParser.NEQ - 131)) | (1 << (vhdlParser.LOWERTHAN - 131)) | (1 << (vhdlParser.GREATERTHAN - 131)) | (1 << (vhdlParser.EQ - 131)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	report_statement() {
	    let localctx = new Report_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, vhdlParser.RULE_report_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2048;
	            this.label_colon();
	        }

	        this.state = 2051;
	        this.match(vhdlParser.REPORT);
	        this.state = 2052;
	        this.expression();
	        this.state = 2055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.SEVERITY) {
	            this.state = 2053;
	            this.match(vhdlParser.SEVERITY);
	            this.state = 2054;
	            this.expression();
	        }

	        this.state = 2057;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_statement() {
	    let localctx = new Return_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, vhdlParser.RULE_return_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2059;
	            this.label_colon();
	        }

	        this.state = 2062;
	        this.match(vhdlParser.RETURN);
	        this.state = 2064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ABS || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (vhdlParser.NEW - 52)) | (1 << (vhdlParser.NOT - 52)) | (1 << (vhdlParser.NULL_ - 52)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (vhdlParser.BASE_LITERAL - 112)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 112)) | (1 << (vhdlParser.REAL_LITERAL - 112)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 112)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 112)) | (1 << (vhdlParser.CHARACTER_LITERAL - 112)) | (1 << (vhdlParser.STRING_LITERAL - 112)) | (1 << (vhdlParser.LPAREN - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vhdlParser.PLUS - 148)) | (1 << (vhdlParser.MINUS - 148)) | (1 << (vhdlParser.INTEGER - 148)))) !== 0)) {
	            this.state = 2063;
	            this.expression();
	        }

	        this.state = 2066;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalar_nature_definition() {
	    let localctx = new Scalar_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, vhdlParser.RULE_scalar_nature_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2068;
	        this.name();
	        this.state = 2069;
	        this.match(vhdlParser.ACROSS);
	        this.state = 2070;
	        this.name();
	        this.state = 2071;
	        this.match(vhdlParser.THROUGH);
	        this.state = 2072;
	        this.name();
	        this.state = 2073;
	        this.match(vhdlParser.REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalar_type_definition() {
	    let localctx = new Scalar_type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, vhdlParser.RULE_scalar_type_definition);
	    try {
	        this.state = 2078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2075;
	            this.physical_type_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2076;
	            this.enumeration_type_definition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2077;
	            this.range_constraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondary_unit() {
	    let localctx = new Secondary_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, vhdlParser.RULE_secondary_unit);
	    try {
	        this.state = 2082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ARCHITECTURE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2080;
	            this.architecture_body();
	            break;
	        case vhdlParser.PACKAGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2081;
	            this.package_body();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondary_unit_declaration() {
	    let localctx = new Secondary_unit_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, vhdlParser.RULE_secondary_unit_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.identifier();
	        this.state = 2085;
	        this.match(vhdlParser.EQ);
	        this.state = 2086;
	        this.physical_literal();
	        this.state = 2087;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selected_signal_assignment() {
	    let localctx = new Selected_signal_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, vhdlParser.RULE_selected_signal_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2089;
	        this.match(vhdlParser.WITH);
	        this.state = 2090;
	        this.expression();
	        this.state = 2091;
	        this.match(vhdlParser.SELECT);
	        this.state = 2092;
	        this.target();
	        this.state = 2093;
	        this.match(vhdlParser.LE);
	        this.state = 2094;
	        this.opts();
	        this.state = 2095;
	        this.selected_waveforms();
	        this.state = 2096;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selected_waveforms() {
	    let localctx = new Selected_waveformsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, vhdlParser.RULE_selected_waveforms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2098;
	        this.waveform();
	        this.state = 2099;
	        this.match(vhdlParser.WHEN);
	        this.state = 2100;
	        this.choices();
	        this.state = 2108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 2101;
	            this.match(vhdlParser.COMMA);
	            this.state = 2102;
	            this.waveform();
	            this.state = 2103;
	            this.match(vhdlParser.WHEN);
	            this.state = 2104;
	            this.choices();
	            this.state = 2110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sensitivity_clause() {
	    let localctx = new Sensitivity_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, vhdlParser.RULE_sensitivity_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2111;
	        this.match(vhdlParser.ON);
	        this.state = 2112;
	        this.sensitivity_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sensitivity_list() {
	    let localctx = new Sensitivity_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, vhdlParser.RULE_sensitivity_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2114;
	        this.name();
	        this.state = 2119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 2115;
	            this.match(vhdlParser.COMMA);
	            this.state = 2116;
	            this.name();
	            this.state = 2121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequence_of_statements() {
	    let localctx = new Sequence_of_statementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, vhdlParser.RULE_sequence_of_statements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
	            this.state = 2122;
	            this.sequential_statement();
	            this.state = 2127;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequential_statement() {
	    let localctx = new Sequential_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, vhdlParser.RULE_sequential_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2146;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2128;
	            this.wait_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2129;
	            this.assertion_statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2130;
	            this.report_statement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2131;
	            this.signal_assignment_statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2132;
	            this.variable_assignment_statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2133;
	            this.if_statement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2134;
	            this.case_statement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2135;
	            this.loop_statement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2136;
	            this.next_statement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2137;
	            this.exit_statement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2138;
	            this.return_statement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	                this.state = 2139;
	                this.label_colon();
	            }

	            this.state = 2142;
	            this.match(vhdlParser.NULL_);
	            this.state = 2143;
	            this.match(vhdlParser.SEMI);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2144;
	            this.break_statement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2145;
	            this.procedure_call_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expression() {
	    let localctx = new Shift_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, vhdlParser.RULE_shift_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2148;
	        this.simple_expression();
	        this.state = 2152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        if(la_===1) {
	            this.state = 2149;
	            this.shift_operator();
	            this.state = 2150;
	            this.simple_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_operator() {
	    let localctx = new Shift_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, vhdlParser.RULE_shift_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2154;
	        _la = this._input.LA(1);
	        if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (vhdlParser.ROL - 81)) | (1 << (vhdlParser.ROR - 81)) | (1 << (vhdlParser.SLA - 81)) | (1 << (vhdlParser.SLL - 81)) | (1 << (vhdlParser.SRA - 81)) | (1 << (vhdlParser.SRL - 81)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_assignment_statement() {
	    let localctx = new Signal_assignment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, vhdlParser.RULE_signal_assignment_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        if(la_===1) {
	            this.state = 2156;
	            this.label_colon();

	        }
	        this.state = 2159;
	        this.target();
	        this.state = 2160;
	        this.match(vhdlParser.LE);
	        this.state = 2162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.INERTIAL || _la===vhdlParser.REJECT || _la===vhdlParser.TRANSPORT) {
	            this.state = 2161;
	            this.delay_mechanism();
	        }

	        this.state = 2164;
	        this.waveform();
	        this.state = 2165;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_declaration() {
	    let localctx = new Signal_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, vhdlParser.RULE_signal_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2167;
	        this.match(vhdlParser.SIGNAL);
	        this.state = 2168;
	        this.identifier_list();
	        this.state = 2169;
	        this.match(vhdlParser.COLON);
	        this.state = 2170;
	        this.subtype_indication();
	        this.state = 2172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BUS || _la===vhdlParser.REGISTER) {
	            this.state = 2171;
	            this.signal_kind();
	        }

	        this.state = 2176;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 2174;
	            this.match(vhdlParser.VARASGN);
	            this.state = 2175;
	            this.expression();
	        }

	        this.state = 2178;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_kind() {
	    let localctx = new Signal_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, vhdlParser.RULE_signal_kind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2180;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.BUS || _la===vhdlParser.REGISTER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_list() {
	    let localctx = new Signal_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, vhdlParser.RULE_signal_list);
	    var _la = 0; // Token type
	    try {
	        this.state = 2192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2182;
	            this.name();
	            this.state = 2187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 2183;
	                this.match(vhdlParser.COMMA);
	                this.state = 2184;
	                this.name();
	                this.state = 2189;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case vhdlParser.OTHERS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2190;
	            this.match(vhdlParser.OTHERS);
	            break;
	        case vhdlParser.ALL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2191;
	            this.match(vhdlParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signature() {
	    let localctx = new SignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, vhdlParser.RULE_signature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2194;
	        this.match(vhdlParser.LBRACKET);
	        this.state = 2203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
	            this.state = 2195;
	            this.name();
	            this.state = 2200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 2196;
	                this.match(vhdlParser.COMMA);
	                this.state = 2197;
	                this.name();
	                this.state = 2202;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.RETURN) {
	            this.state = 2205;
	            this.match(vhdlParser.RETURN);
	            this.state = 2206;
	            this.name();
	        }

	        this.state = 2209;
	        this.match(vhdlParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_expression() {
	    let localctx = new Simple_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, vhdlParser.RULE_simple_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.PLUS || _la===vhdlParser.MINUS) {
	            this.state = 2211;
	            _la = this._input.LA(1);
	            if(!(_la===vhdlParser.PLUS || _la===vhdlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2214;
	        this.term();
	        this.state = 2220;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2215;
	                this.adding_operator();
	                this.state = 2216;
	                this.term(); 
	            }
	            this.state = 2222;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_simultaneous_statement() {
	    let localctx = new Simple_simultaneous_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, vhdlParser.RULE_simple_simultaneous_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        if(la_===1) {
	            this.state = 2223;
	            this.label_colon();

	        }
	        this.state = 2226;
	        this.simple_expression();
	        this.state = 2227;
	        this.match(vhdlParser.ASSIGN);
	        this.state = 2228;
	        this.simple_expression();
	        this.state = 2230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.TOLERANCE) {
	            this.state = 2229;
	            this.tolerance_aspect();
	        }

	        this.state = 2232;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_alternative() {
	    let localctx = new Simultaneous_alternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, vhdlParser.RULE_simultaneous_alternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2234;
	        this.match(vhdlParser.WHEN);
	        this.state = 2235;
	        this.choices();
	        this.state = 2236;
	        this.match(vhdlParser.ARROW);
	        this.state = 2237;
	        this.simultaneous_statement_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_case_statement() {
	    let localctx = new Simultaneous_case_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, vhdlParser.RULE_simultaneous_case_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2239;
	            this.label_colon();
	        }

	        this.state = 2242;
	        this.match(vhdlParser.CASE);
	        this.state = 2243;
	        this.expression();
	        this.state = 2244;
	        this.match(vhdlParser.USE);
	        this.state = 2246; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2245;
	            this.simultaneous_alternative();
	            this.state = 2248; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===vhdlParser.WHEN);
	        this.state = 2250;
	        this.match(vhdlParser.END);
	        this.state = 2251;
	        this.match(vhdlParser.CASE);
	        this.state = 2253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2252;
	            this.identifier();
	        }

	        this.state = 2255;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_if_statement() {
	    let localctx = new Simultaneous_if_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, vhdlParser.RULE_simultaneous_if_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2257;
	            this.label_colon();
	        }

	        this.state = 2260;
	        this.match(vhdlParser.IF);
	        this.state = 2261;
	        this.condition();
	        this.state = 2262;
	        this.match(vhdlParser.USE);
	        this.state = 2263;
	        this.simultaneous_statement_part();
	        this.state = 2271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.ELSIF) {
	            this.state = 2264;
	            this.match(vhdlParser.ELSIF);
	            this.state = 2265;
	            this.condition();
	            this.state = 2266;
	            this.match(vhdlParser.USE);
	            this.state = 2267;
	            this.simultaneous_statement_part();
	            this.state = 2273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ELSE) {
	            this.state = 2274;
	            this.match(vhdlParser.ELSE);
	            this.state = 2275;
	            this.simultaneous_statement_part();
	        }

	        this.state = 2278;
	        this.match(vhdlParser.END);
	        this.state = 2279;
	        this.match(vhdlParser.USE);
	        this.state = 2281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2280;
	            this.identifier();
	        }

	        this.state = 2283;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_procedural_statement() {
	    let localctx = new Simultaneous_procedural_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, vhdlParser.RULE_simultaneous_procedural_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2285;
	            this.label_colon();
	        }

	        this.state = 2288;
	        this.match(vhdlParser.PROCEDURAL);
	        this.state = 2290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS) {
	            this.state = 2289;
	            this.match(vhdlParser.IS);
	        }

	        this.state = 2292;
	        this.procedural_declarative_part();
	        this.state = 2293;
	        this.match(vhdlParser.BEGIN);
	        this.state = 2294;
	        this.procedural_statement_part();
	        this.state = 2295;
	        this.match(vhdlParser.END);
	        this.state = 2296;
	        this.match(vhdlParser.PROCEDURAL);
	        this.state = 2298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2297;
	            this.identifier();
	        }

	        this.state = 2300;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_statement() {
	    let localctx = new Simultaneous_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, vhdlParser.RULE_simultaneous_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2302;
	            this.simple_simultaneous_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2303;
	            this.simultaneous_if_statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2304;
	            this.simultaneous_case_statement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2305;
	            this.simultaneous_procedural_statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	                this.state = 2306;
	                this.label_colon();
	            }

	            this.state = 2309;
	            this.match(vhdlParser.NULL_);
	            this.state = 2310;
	            this.match(vhdlParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_statement_part() {
	    let localctx = new Simultaneous_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, vhdlParser.RULE_simultaneous_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.ABS || _la===vhdlParser.CASE || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (vhdlParser.BASE_LITERAL - 112)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 112)) | (1 << (vhdlParser.REAL_LITERAL - 112)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 112)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 112)) | (1 << (vhdlParser.CHARACTER_LITERAL - 112)) | (1 << (vhdlParser.STRING_LITERAL - 112)) | (1 << (vhdlParser.LPAREN - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vhdlParser.PLUS - 148)) | (1 << (vhdlParser.MINUS - 148)) | (1 << (vhdlParser.INTEGER - 148)))) !== 0)) {
	            this.state = 2313;
	            this.simultaneous_statement();
	            this.state = 2318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source_aspect() {
	    let localctx = new Source_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, vhdlParser.RULE_source_aspect);
	    try {
	        this.state = 2326;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.SPECTRUM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2319;
	            this.match(vhdlParser.SPECTRUM);
	            this.state = 2320;
	            this.simple_expression();
	            this.state = 2321;
	            this.match(vhdlParser.COMMA);
	            this.state = 2322;
	            this.simple_expression();
	            break;
	        case vhdlParser.NOISE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2324;
	            this.match(vhdlParser.NOISE);
	            this.state = 2325;
	            this.simple_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source_quantity_declaration() {
	    let localctx = new Source_quantity_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, vhdlParser.RULE_source_quantity_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2328;
	        this.match(vhdlParser.QUANTITY);
	        this.state = 2329;
	        this.identifier_list();
	        this.state = 2330;
	        this.match(vhdlParser.COLON);
	        this.state = 2331;
	        this.subtype_indication();
	        this.state = 2332;
	        this.source_aspect();
	        this.state = 2333;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	step_limit_specification() {
	    let localctx = new Step_limit_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, vhdlParser.RULE_step_limit_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2335;
	        this.match(vhdlParser.LIMIT);
	        this.state = 2336;
	        this.quantity_specification();
	        this.state = 2337;
	        this.match(vhdlParser.WITH);
	        this.state = 2338;
	        this.expression();
	        this.state = 2339;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subnature_declaration() {
	    let localctx = new Subnature_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, vhdlParser.RULE_subnature_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2341;
	        this.match(vhdlParser.SUBNATURE);
	        this.state = 2342;
	        this.identifier();
	        this.state = 2343;
	        this.match(vhdlParser.IS);
	        this.state = 2344;
	        this.subnature_indication();
	        this.state = 2345;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subnature_indication() {
	    let localctx = new Subnature_indicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, vhdlParser.RULE_subnature_indication);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2347;
	        this.name();
	        this.state = 2349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 2348;
	            this.index_constraint();
	        }

	        this.state = 2357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.TOLERANCE) {
	            this.state = 2351;
	            this.match(vhdlParser.TOLERANCE);
	            this.state = 2352;
	            this.expression();
	            this.state = 2353;
	            this.match(vhdlParser.ACROSS);
	            this.state = 2354;
	            this.expression();
	            this.state = 2355;
	            this.match(vhdlParser.THROUGH);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_body() {
	    let localctx = new Subprogram_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, vhdlParser.RULE_subprogram_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2359;
	        this.subprogram_specification();
	        this.state = 2360;
	        this.match(vhdlParser.IS);
	        this.state = 2361;
	        this.subprogram_declarative_part();
	        this.state = 2362;
	        this.match(vhdlParser.BEGIN);
	        this.state = 2363;
	        this.subprogram_statement_part();
	        this.state = 2364;
	        this.match(vhdlParser.END);
	        this.state = 2366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FUNCTION || _la===vhdlParser.PROCEDURE) {
	            this.state = 2365;
	            this.subprogram_kind();
	        }

	        this.state = 2369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
	            this.state = 2368;
	            this.designator();
	        }

	        this.state = 2371;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_declaration() {
	    let localctx = new Subprogram_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, vhdlParser.RULE_subprogram_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2373;
	        this.subprogram_specification();
	        this.state = 2374;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_declarative_item() {
	    let localctx = new Subprogram_declarative_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, vhdlParser.RULE_subprogram_declarative_item);
	    try {
	        this.state = 2389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2376;
	            this.subprogram_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2377;
	            this.subprogram_body();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2378;
	            this.type_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2379;
	            this.subtype_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2380;
	            this.constant_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2381;
	            this.variable_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2382;
	            this.file_declaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2383;
	            this.alias_declaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2384;
	            this.attribute_declaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2385;
	            this.attribute_specification();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2386;
	            this.use_clause();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2387;
	            this.group_template_declaration();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2388;
	            this.group_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_declarative_part() {
	    let localctx = new Subprogram_declarative_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, vhdlParser.RULE_subprogram_declarative_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
	            this.state = 2391;
	            this.subprogram_declarative_item();
	            this.state = 2396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_kind() {
	    let localctx = new Subprogram_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, vhdlParser.RULE_subprogram_kind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2397;
	        _la = this._input.LA(1);
	        if(!(_la===vhdlParser.FUNCTION || _la===vhdlParser.PROCEDURE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_specification() {
	    let localctx = new Subprogram_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, vhdlParser.RULE_subprogram_specification);
	    try {
	        this.state = 2401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.PROCEDURE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2399;
	            this.procedure_specification();
	            break;
	        case vhdlParser.FUNCTION:
	        case vhdlParser.IMPURE:
	        case vhdlParser.PURE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2400;
	            this.function_specification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure_specification() {
	    let localctx = new Procedure_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, vhdlParser.RULE_procedure_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2403;
	        this.match(vhdlParser.PROCEDURE);
	        this.state = 2404;
	        this.designator();
	        this.state = 2409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 2405;
	            this.match(vhdlParser.LPAREN);
	            this.state = 2406;
	            this.formal_parameter_list();
	            this.state = 2407;
	            this.match(vhdlParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_specification() {
	    let localctx = new Function_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, vhdlParser.RULE_function_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IMPURE || _la===vhdlParser.PURE) {
	            this.state = 2411;
	            _la = this._input.LA(1);
	            if(!(_la===vhdlParser.IMPURE || _la===vhdlParser.PURE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2414;
	        this.match(vhdlParser.FUNCTION);
	        this.state = 2415;
	        this.designator();
	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.LPAREN) {
	            this.state = 2416;
	            this.match(vhdlParser.LPAREN);
	            this.state = 2417;
	            this.formal_parameter_list();
	            this.state = 2418;
	            this.match(vhdlParser.RPAREN);
	        }

	        this.state = 2422;
	        this.match(vhdlParser.RETURN);
	        this.state = 2423;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogram_statement_part() {
	    let localctx = new Subprogram_statement_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, vhdlParser.RULE_subprogram_statement_part);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
	            this.state = 2425;
	            this.sequential_statement();
	            this.state = 2430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtype_declaration() {
	    let localctx = new Subtype_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, vhdlParser.RULE_subtype_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2431;
	        this.match(vhdlParser.SUBTYPE);
	        this.state = 2432;
	        this.identifier();
	        this.state = 2433;
	        this.match(vhdlParser.IS);
	        this.state = 2434;
	        this.subtype_indication();
	        this.state = 2435;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtype_indication() {
	    let localctx = new Subtype_indicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, vhdlParser.RULE_subtype_indication);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2437;
	        this.selected_name();
	        this.state = 2439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2438;
	            this.selected_name();
	        }

	        this.state = 2442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.RANGE || _la===vhdlParser.LPAREN) {
	            this.state = 2441;
	            this.constraint();
	        }

	        this.state = 2445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        if(la_===1) {
	            this.state = 2444;
	            this.tolerance_aspect();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	suffix() {
	    let localctx = new SuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, vhdlParser.RULE_suffix);
	    try {
	        this.state = 2451;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2447;
	            this.identifier();
	            break;
	        case vhdlParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2448;
	            this.match(vhdlParser.CHARACTER_LITERAL);
	            break;
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2449;
	            this.match(vhdlParser.STRING_LITERAL);
	            break;
	        case vhdlParser.ALL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2450;
	            this.match(vhdlParser.ALL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target() {
	    let localctx = new TargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, vhdlParser.RULE_target);
	    try {
	        this.state = 2455;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2453;
	            this.name();
	            break;
	        case vhdlParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2454;
	            this.aggregate();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, vhdlParser.RULE_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2457;
	        this.factor();
	        this.state = 2463;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,275,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2458;
	                this.multiplying_operator();
	                this.state = 2459;
	                this.factor(); 
	            }
	            this.state = 2465;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,275,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminal_aspect() {
	    let localctx = new Terminal_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, vhdlParser.RULE_terminal_aspect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2466;
	        this.name();
	        this.state = 2469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.TO) {
	            this.state = 2467;
	            this.match(vhdlParser.TO);
	            this.state = 2468;
	            this.name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminal_declaration() {
	    let localctx = new Terminal_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, vhdlParser.RULE_terminal_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2471;
	        this.match(vhdlParser.TERMINAL);
	        this.state = 2472;
	        this.identifier_list();
	        this.state = 2473;
	        this.match(vhdlParser.COLON);
	        this.state = 2474;
	        this.subnature_indication();
	        this.state = 2475;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	through_aspect() {
	    let localctx = new Through_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, vhdlParser.RULE_through_aspect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2477;
	        this.identifier_list();
	        this.state = 2479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.TOLERANCE) {
	            this.state = 2478;
	            this.tolerance_aspect();
	        }

	        this.state = 2483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 2481;
	            this.match(vhdlParser.VARASGN);
	            this.state = 2482;
	            this.expression();
	        }

	        this.state = 2485;
	        this.match(vhdlParser.THROUGH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeout_clause() {
	    let localctx = new Timeout_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, vhdlParser.RULE_timeout_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2487;
	        this.match(vhdlParser.FOR);
	        this.state = 2488;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tolerance_aspect() {
	    let localctx = new Tolerance_aspectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, vhdlParser.RULE_tolerance_aspect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2490;
	        this.match(vhdlParser.TOLERANCE);
	        this.state = 2491;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_declaration() {
	    let localctx = new Type_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, vhdlParser.RULE_type_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2493;
	        this.match(vhdlParser.TYPE);
	        this.state = 2494;
	        this.identifier();
	        this.state = 2497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.IS) {
	            this.state = 2495;
	            this.match(vhdlParser.IS);
	            this.state = 2496;
	            this.type_definition();
	        }

	        this.state = 2499;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_definition() {
	    let localctx = new Type_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, vhdlParser.RULE_type_definition);
	    try {
	        this.state = 2505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.RANGE:
	        case vhdlParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2501;
	            this.scalar_type_definition();
	            break;
	        case vhdlParser.ARRAY:
	        case vhdlParser.RECORD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2502;
	            this.composite_type_definition();
	            break;
	        case vhdlParser.ACCESS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2503;
	            this.access_type_definition();
	            break;
	        case vhdlParser.FILE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2504;
	            this.file_type_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unconstrained_array_definition() {
	    let localctx = new Unconstrained_array_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, vhdlParser.RULE_unconstrained_array_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2507;
	        this.match(vhdlParser.ARRAY);
	        this.state = 2508;
	        this.match(vhdlParser.LPAREN);
	        this.state = 2509;
	        this.index_subtype_definition();
	        this.state = 2514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 2510;
	            this.match(vhdlParser.COMMA);
	            this.state = 2511;
	            this.index_subtype_definition();
	            this.state = 2516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2517;
	        this.match(vhdlParser.RPAREN);
	        this.state = 2518;
	        this.match(vhdlParser.OF);
	        this.state = 2519;
	        this.subtype_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unconstrained_nature_definition() {
	    let localctx = new Unconstrained_nature_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, vhdlParser.RULE_unconstrained_nature_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2521;
	        this.match(vhdlParser.ARRAY);
	        this.state = 2522;
	        this.match(vhdlParser.LPAREN);
	        this.state = 2523;
	        this.index_subtype_definition();
	        this.state = 2528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 2524;
	            this.match(vhdlParser.COMMA);
	            this.state = 2525;
	            this.index_subtype_definition();
	            this.state = 2530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2531;
	        this.match(vhdlParser.RPAREN);
	        this.state = 2532;
	        this.match(vhdlParser.OF);
	        this.state = 2533;
	        this.subnature_indication();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_clause() {
	    let localctx = new Use_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, vhdlParser.RULE_use_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2535;
	        this.match(vhdlParser.USE);
	        this.state = 2536;
	        this.selected_name();
	        this.state = 2541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vhdlParser.COMMA) {
	            this.state = 2537;
	            this.match(vhdlParser.COMMA);
	            this.state = 2538;
	            this.selected_name();
	            this.state = 2543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2544;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_assignment_statement() {
	    let localctx = new Variable_assignment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, vhdlParser.RULE_variable_assignment_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        if(la_===1) {
	            this.state = 2546;
	            this.label_colon();

	        }
	        this.state = 2549;
	        this.target();
	        this.state = 2550;
	        this.match(vhdlParser.VARASGN);
	        this.state = 2551;
	        this.expression();
	        this.state = 2552;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declaration() {
	    let localctx = new Variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, vhdlParser.RULE_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.SHARED) {
	            this.state = 2554;
	            this.match(vhdlParser.SHARED);
	        }

	        this.state = 2557;
	        this.match(vhdlParser.VARIABLE);
	        this.state = 2558;
	        this.identifier_list();
	        this.state = 2559;
	        this.match(vhdlParser.COLON);
	        this.state = 2560;
	        this.subtype_indication();
	        this.state = 2563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.VARASGN) {
	            this.state = 2561;
	            this.match(vhdlParser.VARASGN);
	            this.state = 2562;
	            this.expression();
	        }

	        this.state = 2565;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_statement() {
	    let localctx = new Wait_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, vhdlParser.RULE_wait_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
	            this.state = 2567;
	            this.label_colon();
	        }

	        this.state = 2570;
	        this.match(vhdlParser.WAIT);
	        this.state = 2572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.ON) {
	            this.state = 2571;
	            this.sensitivity_clause();
	        }

	        this.state = 2575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.UNTIL) {
	            this.state = 2574;
	            this.condition_clause();
	        }

	        this.state = 2578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.FOR) {
	            this.state = 2577;
	            this.timeout_clause();
	        }

	        this.state = 2580;
	        this.match(vhdlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	waveform() {
	    let localctx = new WaveformContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, vhdlParser.RULE_waveform);
	    var _la = 0; // Token type
	    try {
	        this.state = 2591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vhdlParser.ABS:
	        case vhdlParser.NEW:
	        case vhdlParser.NOT:
	        case vhdlParser.NULL_:
	        case vhdlParser.BASE_LITERAL:
	        case vhdlParser.BIT_STRING_LITERAL:
	        case vhdlParser.REAL_LITERAL:
	        case vhdlParser.BASIC_IDENTIFIER:
	        case vhdlParser.EXTENDED_IDENTIFIER:
	        case vhdlParser.CHARACTER_LITERAL:
	        case vhdlParser.STRING_LITERAL:
	        case vhdlParser.LPAREN:
	        case vhdlParser.PLUS:
	        case vhdlParser.MINUS:
	        case vhdlParser.INTEGER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2582;
	            this.waveform_element();
	            this.state = 2587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vhdlParser.COMMA) {
	                this.state = 2583;
	                this.match(vhdlParser.COMMA);
	                this.state = 2584;
	                this.waveform_element();
	                this.state = 2589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case vhdlParser.UNAFFECTED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2590;
	            this.match(vhdlParser.UNAFFECTED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	waveform_element() {
	    let localctx = new Waveform_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, vhdlParser.RULE_waveform_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2593;
	        this.expression();
	        this.state = 2596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vhdlParser.AFTER) {
	            this.state = 2594;
	            this.match(vhdlParser.AFTER);
	            this.state = 2595;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

vhdlParser.EOF = antlr4.Token.EOF;
vhdlParser.ABS = 1;
vhdlParser.ACCESS = 2;
vhdlParser.ACROSS = 3;
vhdlParser.AFTER = 4;
vhdlParser.ALIAS = 5;
vhdlParser.ALL = 6;
vhdlParser.AND = 7;
vhdlParser.ARCHITECTURE = 8;
vhdlParser.ARRAY = 9;
vhdlParser.ASSERT = 10;
vhdlParser.ATTRIBUTE = 11;
vhdlParser.BEGIN = 12;
vhdlParser.BLOCK = 13;
vhdlParser.BODY = 14;
vhdlParser.BREAK = 15;
vhdlParser.BUFFER = 16;
vhdlParser.BUS = 17;
vhdlParser.CASE = 18;
vhdlParser.COMPONENT = 19;
vhdlParser.CONFIGURATION = 20;
vhdlParser.CONSTANT = 21;
vhdlParser.DISCONNECT = 22;
vhdlParser.DOWNTO = 23;
vhdlParser.END = 24;
vhdlParser.ENTITY = 25;
vhdlParser.ELSE = 26;
vhdlParser.ELSIF = 27;
vhdlParser.EXIT = 28;
vhdlParser.FILE = 29;
vhdlParser.FOR = 30;
vhdlParser.FUNCTION = 31;
vhdlParser.GENERATE = 32;
vhdlParser.GENERIC = 33;
vhdlParser.GROUP = 34;
vhdlParser.GUARDED = 35;
vhdlParser.IF = 36;
vhdlParser.IMPURE = 37;
vhdlParser.IN = 38;
vhdlParser.INERTIAL = 39;
vhdlParser.INOUT = 40;
vhdlParser.IS = 41;
vhdlParser.LABEL = 42;
vhdlParser.LIBRARY = 43;
vhdlParser.LIMIT = 44;
vhdlParser.LINKAGE = 45;
vhdlParser.LITERAL = 46;
vhdlParser.LOOP = 47;
vhdlParser.MAP = 48;
vhdlParser.MOD = 49;
vhdlParser.NAND = 50;
vhdlParser.NATURE = 51;
vhdlParser.NEW = 52;
vhdlParser.NEXT = 53;
vhdlParser.NOISE = 54;
vhdlParser.NOR = 55;
vhdlParser.NOT = 56;
vhdlParser.NULL_ = 57;
vhdlParser.OF = 58;
vhdlParser.ON = 59;
vhdlParser.OPEN = 60;
vhdlParser.OR = 61;
vhdlParser.OTHERS = 62;
vhdlParser.OUT = 63;
vhdlParser.PACKAGE = 64;
vhdlParser.PORT = 65;
vhdlParser.POSTPONED = 66;
vhdlParser.PROCESS = 67;
vhdlParser.PROCEDURE = 68;
vhdlParser.PROCEDURAL = 69;
vhdlParser.PURE = 70;
vhdlParser.QUANTITY = 71;
vhdlParser.RANGE = 72;
vhdlParser.REVERSE_RANGE = 73;
vhdlParser.REJECT = 74;
vhdlParser.REM = 75;
vhdlParser.RECORD = 76;
vhdlParser.REFERENCE = 77;
vhdlParser.REGISTER = 78;
vhdlParser.REPORT = 79;
vhdlParser.RETURN = 80;
vhdlParser.ROL = 81;
vhdlParser.ROR = 82;
vhdlParser.SELECT = 83;
vhdlParser.SEVERITY = 84;
vhdlParser.SHARED = 85;
vhdlParser.SIGNAL = 86;
vhdlParser.SLA = 87;
vhdlParser.SLL = 88;
vhdlParser.SPECTRUM = 89;
vhdlParser.SRA = 90;
vhdlParser.SRL = 91;
vhdlParser.SUBNATURE = 92;
vhdlParser.SUBTYPE = 93;
vhdlParser.TERMINAL = 94;
vhdlParser.THEN = 95;
vhdlParser.THROUGH = 96;
vhdlParser.TO = 97;
vhdlParser.TOLERANCE = 98;
vhdlParser.TRANSPORT = 99;
vhdlParser.TYPE = 100;
vhdlParser.UNAFFECTED = 101;
vhdlParser.UNITS = 102;
vhdlParser.UNTIL = 103;
vhdlParser.USE = 104;
vhdlParser.VARIABLE = 105;
vhdlParser.WAIT = 106;
vhdlParser.WITH = 107;
vhdlParser.WHEN = 108;
vhdlParser.WHILE = 109;
vhdlParser.XNOR = 110;
vhdlParser.XOR = 111;
vhdlParser.BASE_LITERAL = 112;
vhdlParser.BIT_STRING_LITERAL = 113;
vhdlParser.BIT_STRING_LITERAL_BINARY = 114;
vhdlParser.BIT_STRING_LITERAL_OCTAL = 115;
vhdlParser.BIT_STRING_LITERAL_HEX = 116;
vhdlParser.REAL_LITERAL = 117;
vhdlParser.BASIC_IDENTIFIER = 118;
vhdlParser.EXTENDED_IDENTIFIER = 119;
vhdlParser.LETTER = 120;
vhdlParser.COMMENT = 121;
vhdlParser.TAB = 122;
vhdlParser.SPACE = 123;
vhdlParser.NEWLINE = 124;
vhdlParser.CR = 125;
vhdlParser.CHARACTER_LITERAL = 126;
vhdlParser.STRING_LITERAL = 127;
vhdlParser.OTHER_SPECIAL_CHARACTER = 128;
vhdlParser.DOUBLESTAR = 129;
vhdlParser.ASSIGN = 130;
vhdlParser.LE = 131;
vhdlParser.GE = 132;
vhdlParser.ARROW = 133;
vhdlParser.NEQ = 134;
vhdlParser.VARASGN = 135;
vhdlParser.BOX = 136;
vhdlParser.DBLQUOTE = 137;
vhdlParser.SEMI = 138;
vhdlParser.COMMA = 139;
vhdlParser.AMPERSAND = 140;
vhdlParser.LPAREN = 141;
vhdlParser.RPAREN = 142;
vhdlParser.LBRACKET = 143;
vhdlParser.RBRACKET = 144;
vhdlParser.COLON = 145;
vhdlParser.MUL = 146;
vhdlParser.DIV = 147;
vhdlParser.PLUS = 148;
vhdlParser.MINUS = 149;
vhdlParser.LOWERTHAN = 150;
vhdlParser.GREATERTHAN = 151;
vhdlParser.EQ = 152;
vhdlParser.BAR = 153;
vhdlParser.DOT = 154;
vhdlParser.BACKSLASH = 155;
vhdlParser.EXPONENT = 156;
vhdlParser.HEXDIGIT = 157;
vhdlParser.INTEGER = 158;
vhdlParser.DIGIT = 159;
vhdlParser.BASED_INTEGER = 160;
vhdlParser.EXTENDED_DIGIT = 161;
vhdlParser.APOSTROPHE = 162;

vhdlParser.RULE_abstract_literal = 0;
vhdlParser.RULE_access_type_definition = 1;
vhdlParser.RULE_across_aspect = 2;
vhdlParser.RULE_actual_designator = 3;
vhdlParser.RULE_actual_parameter_part = 4;
vhdlParser.RULE_actual_part = 5;
vhdlParser.RULE_adding_operator = 6;
vhdlParser.RULE_aggregate = 7;
vhdlParser.RULE_alias_declaration = 8;
vhdlParser.RULE_alias_designator = 9;
vhdlParser.RULE_alias_indication = 10;
vhdlParser.RULE_allocator = 11;
vhdlParser.RULE_architecture_body = 12;
vhdlParser.RULE_architecture_declarative_part = 13;
vhdlParser.RULE_architecture_statement = 14;
vhdlParser.RULE_architecture_statement_part = 15;
vhdlParser.RULE_array_nature_definition = 16;
vhdlParser.RULE_array_type_definition = 17;
vhdlParser.RULE_assertion = 18;
vhdlParser.RULE_assertion_statement = 19;
vhdlParser.RULE_association_element = 20;
vhdlParser.RULE_association_list = 21;
vhdlParser.RULE_attribute_declaration = 22;
vhdlParser.RULE_attribute_designator = 23;
vhdlParser.RULE_attribute_specification = 24;
vhdlParser.RULE_base_unit_declaration = 25;
vhdlParser.RULE_binding_indication = 26;
vhdlParser.RULE_block_configuration = 27;
vhdlParser.RULE_block_declarative_item = 28;
vhdlParser.RULE_block_declarative_part = 29;
vhdlParser.RULE_block_header = 30;
vhdlParser.RULE_block_specification = 31;
vhdlParser.RULE_block_statement = 32;
vhdlParser.RULE_block_statement_part = 33;
vhdlParser.RULE_branch_quantity_declaration = 34;
vhdlParser.RULE_break_element = 35;
vhdlParser.RULE_break_list = 36;
vhdlParser.RULE_break_selector_clause = 37;
vhdlParser.RULE_break_statement = 38;
vhdlParser.RULE_case_statement = 39;
vhdlParser.RULE_case_statement_alternative = 40;
vhdlParser.RULE_choice = 41;
vhdlParser.RULE_choices = 42;
vhdlParser.RULE_component_configuration = 43;
vhdlParser.RULE_component_declaration = 44;
vhdlParser.RULE_component_instantiation_statement = 45;
vhdlParser.RULE_component_specification = 46;
vhdlParser.RULE_composite_nature_definition = 47;
vhdlParser.RULE_composite_type_definition = 48;
vhdlParser.RULE_concurrent_assertion_statement = 49;
vhdlParser.RULE_concurrent_break_statement = 50;
vhdlParser.RULE_concurrent_procedure_call_statement = 51;
vhdlParser.RULE_concurrent_signal_assignment_statement = 52;
vhdlParser.RULE_condition = 53;
vhdlParser.RULE_condition_clause = 54;
vhdlParser.RULE_conditional_signal_assignment = 55;
vhdlParser.RULE_conditional_waveforms = 56;
vhdlParser.RULE_configuration_declaration = 57;
vhdlParser.RULE_configuration_declarative_item = 58;
vhdlParser.RULE_configuration_declarative_part = 59;
vhdlParser.RULE_configuration_item = 60;
vhdlParser.RULE_configuration_specification = 61;
vhdlParser.RULE_constant_declaration = 62;
vhdlParser.RULE_constrained_array_definition = 63;
vhdlParser.RULE_constrained_nature_definition = 64;
vhdlParser.RULE_constraint = 65;
vhdlParser.RULE_context_clause = 66;
vhdlParser.RULE_context_item = 67;
vhdlParser.RULE_delay_mechanism = 68;
vhdlParser.RULE_design_file = 69;
vhdlParser.RULE_design_unit = 70;
vhdlParser.RULE_designator = 71;
vhdlParser.RULE_direction = 72;
vhdlParser.RULE_disconnection_specification = 73;
vhdlParser.RULE_discrete_range = 74;
vhdlParser.RULE_element_association = 75;
vhdlParser.RULE_element_declaration = 76;
vhdlParser.RULE_element_subnature_definition = 77;
vhdlParser.RULE_element_subtype_definition = 78;
vhdlParser.RULE_entity_aspect = 79;
vhdlParser.RULE_entity_class = 80;
vhdlParser.RULE_entity_class_entry = 81;
vhdlParser.RULE_entity_class_entry_list = 82;
vhdlParser.RULE_entity_declaration = 83;
vhdlParser.RULE_entity_declarative_item = 84;
vhdlParser.RULE_entity_declarative_part = 85;
vhdlParser.RULE_entity_designator = 86;
vhdlParser.RULE_entity_header = 87;
vhdlParser.RULE_entity_name_list = 88;
vhdlParser.RULE_entity_specification = 89;
vhdlParser.RULE_entity_statement = 90;
vhdlParser.RULE_entity_statement_part = 91;
vhdlParser.RULE_entity_tag = 92;
vhdlParser.RULE_enumeration_literal = 93;
vhdlParser.RULE_enumeration_type_definition = 94;
vhdlParser.RULE_exit_statement = 95;
vhdlParser.RULE_expression = 96;
vhdlParser.RULE_factor = 97;
vhdlParser.RULE_file_declaration = 98;
vhdlParser.RULE_file_logical_name = 99;
vhdlParser.RULE_file_open_information = 100;
vhdlParser.RULE_file_type_definition = 101;
vhdlParser.RULE_formal_parameter_list = 102;
vhdlParser.RULE_formal_part = 103;
vhdlParser.RULE_free_quantity_declaration = 104;
vhdlParser.RULE_generate_statement = 105;
vhdlParser.RULE_generation_scheme = 106;
vhdlParser.RULE_generic_clause = 107;
vhdlParser.RULE_generic_list = 108;
vhdlParser.RULE_generic_map_aspect = 109;
vhdlParser.RULE_group_constituent = 110;
vhdlParser.RULE_group_constituent_list = 111;
vhdlParser.RULE_group_declaration = 112;
vhdlParser.RULE_group_template_declaration = 113;
vhdlParser.RULE_guarded_signal_specification = 114;
vhdlParser.RULE_identifier = 115;
vhdlParser.RULE_identifier_list = 116;
vhdlParser.RULE_if_statement = 117;
vhdlParser.RULE_index_constraint = 118;
vhdlParser.RULE_index_specification = 119;
vhdlParser.RULE_index_subtype_definition = 120;
vhdlParser.RULE_instantiated_unit = 121;
vhdlParser.RULE_instantiation_list = 122;
vhdlParser.RULE_interface_constant_declaration = 123;
vhdlParser.RULE_interface_declaration = 124;
vhdlParser.RULE_interface_element = 125;
vhdlParser.RULE_interface_file_declaration = 126;
vhdlParser.RULE_interface_signal_list = 127;
vhdlParser.RULE_interface_port_list = 128;
vhdlParser.RULE_interface_list = 129;
vhdlParser.RULE_interface_quantity_declaration = 130;
vhdlParser.RULE_interface_port_declaration = 131;
vhdlParser.RULE_interface_signal_declaration = 132;
vhdlParser.RULE_interface_terminal_declaration = 133;
vhdlParser.RULE_interface_variable_declaration = 134;
vhdlParser.RULE_iteration_scheme = 135;
vhdlParser.RULE_label_colon = 136;
vhdlParser.RULE_library_clause = 137;
vhdlParser.RULE_library_unit = 138;
vhdlParser.RULE_literal = 139;
vhdlParser.RULE_logical_name = 140;
vhdlParser.RULE_logical_name_list = 141;
vhdlParser.RULE_logical_operator = 142;
vhdlParser.RULE_loop_statement = 143;
vhdlParser.RULE_signal_mode = 144;
vhdlParser.RULE_multiplying_operator = 145;
vhdlParser.RULE_name = 146;
vhdlParser.RULE_name_part = 147;
vhdlParser.RULE_selected_name = 148;
vhdlParser.RULE_selected_name_part = 149;
vhdlParser.RULE_function_call_or_indexed_name_part = 150;
vhdlParser.RULE_slice_name_part = 151;
vhdlParser.RULE_attribute_name_part = 152;
vhdlParser.RULE_nature_declaration = 153;
vhdlParser.RULE_nature_definition = 154;
vhdlParser.RULE_nature_element_declaration = 155;
vhdlParser.RULE_next_statement = 156;
vhdlParser.RULE_numeric_literal = 157;
vhdlParser.RULE_object_declaration = 158;
vhdlParser.RULE_opts = 159;
vhdlParser.RULE_package_body = 160;
vhdlParser.RULE_package_body_declarative_item = 161;
vhdlParser.RULE_package_body_declarative_part = 162;
vhdlParser.RULE_package_declaration = 163;
vhdlParser.RULE_package_declarative_item = 164;
vhdlParser.RULE_package_declarative_part = 165;
vhdlParser.RULE_parameter_specification = 166;
vhdlParser.RULE_physical_literal = 167;
vhdlParser.RULE_physical_type_definition = 168;
vhdlParser.RULE_port_clause = 169;
vhdlParser.RULE_port_list = 170;
vhdlParser.RULE_port_map_aspect = 171;
vhdlParser.RULE_primary = 172;
vhdlParser.RULE_primary_unit = 173;
vhdlParser.RULE_procedural_declarative_item = 174;
vhdlParser.RULE_procedural_declarative_part = 175;
vhdlParser.RULE_procedural_statement_part = 176;
vhdlParser.RULE_procedure_call = 177;
vhdlParser.RULE_procedure_call_statement = 178;
vhdlParser.RULE_process_declarative_item = 179;
vhdlParser.RULE_process_declarative_part = 180;
vhdlParser.RULE_process_statement = 181;
vhdlParser.RULE_process_statement_part = 182;
vhdlParser.RULE_qualified_expression = 183;
vhdlParser.RULE_quantity_declaration = 184;
vhdlParser.RULE_quantity_list = 185;
vhdlParser.RULE_quantity_specification = 186;
vhdlParser.RULE_range_decl = 187;
vhdlParser.RULE_explicit_range = 188;
vhdlParser.RULE_range_constraint = 189;
vhdlParser.RULE_record_nature_definition = 190;
vhdlParser.RULE_record_type_definition = 191;
vhdlParser.RULE_relation = 192;
vhdlParser.RULE_relational_operator = 193;
vhdlParser.RULE_report_statement = 194;
vhdlParser.RULE_return_statement = 195;
vhdlParser.RULE_scalar_nature_definition = 196;
vhdlParser.RULE_scalar_type_definition = 197;
vhdlParser.RULE_secondary_unit = 198;
vhdlParser.RULE_secondary_unit_declaration = 199;
vhdlParser.RULE_selected_signal_assignment = 200;
vhdlParser.RULE_selected_waveforms = 201;
vhdlParser.RULE_sensitivity_clause = 202;
vhdlParser.RULE_sensitivity_list = 203;
vhdlParser.RULE_sequence_of_statements = 204;
vhdlParser.RULE_sequential_statement = 205;
vhdlParser.RULE_shift_expression = 206;
vhdlParser.RULE_shift_operator = 207;
vhdlParser.RULE_signal_assignment_statement = 208;
vhdlParser.RULE_signal_declaration = 209;
vhdlParser.RULE_signal_kind = 210;
vhdlParser.RULE_signal_list = 211;
vhdlParser.RULE_signature = 212;
vhdlParser.RULE_simple_expression = 213;
vhdlParser.RULE_simple_simultaneous_statement = 214;
vhdlParser.RULE_simultaneous_alternative = 215;
vhdlParser.RULE_simultaneous_case_statement = 216;
vhdlParser.RULE_simultaneous_if_statement = 217;
vhdlParser.RULE_simultaneous_procedural_statement = 218;
vhdlParser.RULE_simultaneous_statement = 219;
vhdlParser.RULE_simultaneous_statement_part = 220;
vhdlParser.RULE_source_aspect = 221;
vhdlParser.RULE_source_quantity_declaration = 222;
vhdlParser.RULE_step_limit_specification = 223;
vhdlParser.RULE_subnature_declaration = 224;
vhdlParser.RULE_subnature_indication = 225;
vhdlParser.RULE_subprogram_body = 226;
vhdlParser.RULE_subprogram_declaration = 227;
vhdlParser.RULE_subprogram_declarative_item = 228;
vhdlParser.RULE_subprogram_declarative_part = 229;
vhdlParser.RULE_subprogram_kind = 230;
vhdlParser.RULE_subprogram_specification = 231;
vhdlParser.RULE_procedure_specification = 232;
vhdlParser.RULE_function_specification = 233;
vhdlParser.RULE_subprogram_statement_part = 234;
vhdlParser.RULE_subtype_declaration = 235;
vhdlParser.RULE_subtype_indication = 236;
vhdlParser.RULE_suffix = 237;
vhdlParser.RULE_target = 238;
vhdlParser.RULE_term = 239;
vhdlParser.RULE_terminal_aspect = 240;
vhdlParser.RULE_terminal_declaration = 241;
vhdlParser.RULE_through_aspect = 242;
vhdlParser.RULE_timeout_clause = 243;
vhdlParser.RULE_tolerance_aspect = 244;
vhdlParser.RULE_type_declaration = 245;
vhdlParser.RULE_type_definition = 246;
vhdlParser.RULE_unconstrained_array_definition = 247;
vhdlParser.RULE_unconstrained_nature_definition = 248;
vhdlParser.RULE_use_clause = 249;
vhdlParser.RULE_variable_assignment_statement = 250;
vhdlParser.RULE_variable_declaration = 251;
vhdlParser.RULE_wait_statement = 252;
vhdlParser.RULE_waveform = 253;
vhdlParser.RULE_waveform_element = 254;

class Abstract_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_abstract_literal;
    }

	INTEGER() {
	    return this.getToken(vhdlParser.INTEGER, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(vhdlParser.REAL_LITERAL, 0);
	};

	BASE_LITERAL() {
	    return this.getToken(vhdlParser.BASE_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAbstract_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAbstract_literal(this);
		}
	}


}



class Access_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_access_type_definition;
    }

	ACCESS() {
	    return this.getToken(vhdlParser.ACCESS, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAccess_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAccess_type_definition(this);
		}
	}


}



class Across_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_across_aspect;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	ACROSS() {
	    return this.getToken(vhdlParser.ACROSS, 0);
	};

	tolerance_aspect() {
	    return this.getTypedRuleContext(Tolerance_aspectContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAcross_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAcross_aspect(this);
		}
	}


}



class Actual_designatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_actual_designator;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OPEN() {
	    return this.getToken(vhdlParser.OPEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterActual_designator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitActual_designator(this);
		}
	}


}



class Actual_parameter_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_actual_parameter_part;
    }

	association_list() {
	    return this.getTypedRuleContext(Association_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterActual_parameter_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitActual_parameter_part(this);
		}
	}


}



class Actual_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_actual_part;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	actual_designator() {
	    return this.getTypedRuleContext(Actual_designatorContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterActual_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitActual_part(this);
		}
	}


}



class Adding_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_adding_operator;
    }

	PLUS() {
	    return this.getToken(vhdlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(vhdlParser.MINUS, 0);
	};

	AMPERSAND() {
	    return this.getToken(vhdlParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAdding_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAdding_operator(this);
		}
	}


}



class AggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_aggregate;
    }

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	element_association = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_associationContext);
	    } else {
	        return this.getTypedRuleContext(Element_associationContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAggregate(this);
		}
	}


}



class Alias_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_alias_declaration;
    }

	ALIAS() {
	    return this.getToken(vhdlParser.ALIAS, 0);
	};

	alias_designator() {
	    return this.getTypedRuleContext(Alias_designatorContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	alias_indication() {
	    return this.getTypedRuleContext(Alias_indicationContext,0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAlias_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAlias_declaration(this);
		}
	}


}



class Alias_designatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_alias_designator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAlias_designator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAlias_designator(this);
		}
	}


}



class Alias_indicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_alias_indication;
    }

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAlias_indication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAlias_indication(this);
		}
	}


}



class AllocatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_allocator;
    }

	NEW() {
	    return this.getToken(vhdlParser.NEW, 0);
	};

	qualified_expression() {
	    return this.getTypedRuleContext(Qualified_expressionContext,0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAllocator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAllocator(this);
		}
	}


}



class Architecture_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_architecture_body;
    }

	ARCHITECTURE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.ARCHITECTURE);
	    } else {
	        return this.getToken(vhdlParser.ARCHITECTURE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	architecture_declarative_part() {
	    return this.getTypedRuleContext(Architecture_declarative_partContext,0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	architecture_statement_part() {
	    return this.getTypedRuleContext(Architecture_statement_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArchitecture_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArchitecture_body(this);
		}
	}


}



class Architecture_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_architecture_declarative_part;
    }

	block_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Block_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Block_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArchitecture_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArchitecture_declarative_part(this);
		}
	}


}



class Architecture_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_architecture_statement;
    }

	block_statement() {
	    return this.getTypedRuleContext(Block_statementContext,0);
	};

	process_statement() {
	    return this.getTypedRuleContext(Process_statementContext,0);
	};

	concurrent_procedure_call_statement() {
	    return this.getTypedRuleContext(Concurrent_procedure_call_statementContext,0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	concurrent_assertion_statement() {
	    return this.getTypedRuleContext(Concurrent_assertion_statementContext,0);
	};

	concurrent_signal_assignment_statement() {
	    return this.getTypedRuleContext(Concurrent_signal_assignment_statementContext,0);
	};

	POSTPONED() {
	    return this.getToken(vhdlParser.POSTPONED, 0);
	};

	component_instantiation_statement() {
	    return this.getTypedRuleContext(Component_instantiation_statementContext,0);
	};

	generate_statement() {
	    return this.getTypedRuleContext(Generate_statementContext,0);
	};

	concurrent_break_statement() {
	    return this.getTypedRuleContext(Concurrent_break_statementContext,0);
	};

	simultaneous_statement() {
	    return this.getTypedRuleContext(Simultaneous_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArchitecture_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArchitecture_statement(this);
		}
	}


}



class Architecture_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_architecture_statement_part;
    }

	architecture_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Architecture_statementContext);
	    } else {
	        return this.getTypedRuleContext(Architecture_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArchitecture_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArchitecture_statement_part(this);
		}
	}


}



class Array_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_array_nature_definition;
    }

	unconstrained_nature_definition() {
	    return this.getTypedRuleContext(Unconstrained_nature_definitionContext,0);
	};

	constrained_nature_definition() {
	    return this.getTypedRuleContext(Constrained_nature_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArray_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArray_nature_definition(this);
		}
	}


}



class Array_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_array_type_definition;
    }

	unconstrained_array_definition() {
	    return this.getTypedRuleContext(Unconstrained_array_definitionContext,0);
	};

	constrained_array_definition() {
	    return this.getTypedRuleContext(Constrained_array_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterArray_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitArray_type_definition(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_assertion;
    }

	ASSERT() {
	    return this.getToken(vhdlParser.ASSERT, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	REPORT() {
	    return this.getToken(vhdlParser.REPORT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEVERITY() {
	    return this.getToken(vhdlParser.SEVERITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAssertion(this);
		}
	}


}



class Assertion_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_assertion_statement;
    }

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAssertion_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAssertion_statement(this);
		}
	}


}



class Association_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_association_element;
    }

	actual_part() {
	    return this.getTypedRuleContext(Actual_partContext,0);
	};

	formal_part() {
	    return this.getTypedRuleContext(Formal_partContext,0);
	};

	ARROW() {
	    return this.getToken(vhdlParser.ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAssociation_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAssociation_element(this);
		}
	}


}



class Association_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_association_list;
    }

	association_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Association_elementContext);
	    } else {
	        return this.getTypedRuleContext(Association_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAssociation_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAssociation_list(this);
		}
	}


}



class Attribute_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_attribute_declaration;
    }

	ATTRIBUTE() {
	    return this.getToken(vhdlParser.ATTRIBUTE, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAttribute_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAttribute_declaration(this);
		}
	}


}



class Attribute_designatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_attribute_designator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RANGE() {
	    return this.getToken(vhdlParser.RANGE, 0);
	};

	REVERSE_RANGE() {
	    return this.getToken(vhdlParser.REVERSE_RANGE, 0);
	};

	ACROSS() {
	    return this.getToken(vhdlParser.ACROSS, 0);
	};

	THROUGH() {
	    return this.getToken(vhdlParser.THROUGH, 0);
	};

	REFERENCE() {
	    return this.getToken(vhdlParser.REFERENCE, 0);
	};

	TOLERANCE() {
	    return this.getToken(vhdlParser.TOLERANCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAttribute_designator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAttribute_designator(this);
		}
	}


}



class Attribute_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_attribute_specification;
    }

	ATTRIBUTE() {
	    return this.getToken(vhdlParser.ATTRIBUTE, 0);
	};

	attribute_designator() {
	    return this.getTypedRuleContext(Attribute_designatorContext,0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	entity_specification() {
	    return this.getTypedRuleContext(Entity_specificationContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAttribute_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAttribute_specification(this);
		}
	}


}



class Base_unit_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_base_unit_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBase_unit_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBase_unit_declaration(this);
		}
	}


}



class Binding_indicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_binding_indication;
    }

	USE() {
	    return this.getToken(vhdlParser.USE, 0);
	};

	entity_aspect() {
	    return this.getTypedRuleContext(Entity_aspectContext,0);
	};

	generic_map_aspect() {
	    return this.getTypedRuleContext(Generic_map_aspectContext,0);
	};

	port_map_aspect() {
	    return this.getTypedRuleContext(Port_map_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBinding_indication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBinding_indication(this);
		}
	}


}



class Block_configurationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_configuration;
    }

	FOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.FOR);
	    } else {
	        return this.getToken(vhdlParser.FOR, i);
	    }
	};


	block_specification() {
	    return this.getTypedRuleContext(Block_specificationContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	use_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Use_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Use_clauseContext,i);
	    }
	};

	configuration_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Configuration_itemContext);
	    } else {
	        return this.getTypedRuleContext(Configuration_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_configuration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_configuration(this);
		}
	}


}



class Block_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	signal_declaration() {
	    return this.getTypedRuleContext(Signal_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	component_declaration() {
	    return this.getTypedRuleContext(Component_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	configuration_specification() {
	    return this.getTypedRuleContext(Configuration_specificationContext,0);
	};

	disconnection_specification() {
	    return this.getTypedRuleContext(Disconnection_specificationContext,0);
	};

	step_limit_specification() {
	    return this.getTypedRuleContext(Step_limit_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	nature_declaration() {
	    return this.getTypedRuleContext(Nature_declarationContext,0);
	};

	subnature_declaration() {
	    return this.getTypedRuleContext(Subnature_declarationContext,0);
	};

	quantity_declaration() {
	    return this.getTypedRuleContext(Quantity_declarationContext,0);
	};

	terminal_declaration() {
	    return this.getTypedRuleContext(Terminal_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_declarative_item(this);
		}
	}


}



class Block_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_declarative_part;
    }

	block_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Block_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Block_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_declarative_part(this);
		}
	}


}



class Block_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_header;
    }

	generic_clause() {
	    return this.getTypedRuleContext(Generic_clauseContext,0);
	};

	port_clause() {
	    return this.getTypedRuleContext(Port_clauseContext,0);
	};

	generic_map_aspect() {
	    return this.getTypedRuleContext(Generic_map_aspectContext,0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	port_map_aspect() {
	    return this.getTypedRuleContext(Port_map_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_header(this);
		}
	}


}



class Block_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_specification;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	index_specification() {
	    return this.getTypedRuleContext(Index_specificationContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_specification(this);
		}
	}


}



class Block_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_statement;
    }

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	BLOCK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.BLOCK);
	    } else {
	        return this.getToken(vhdlParser.BLOCK, i);
	    }
	};


	block_header() {
	    return this.getTypedRuleContext(Block_headerContext,0);
	};

	block_declarative_part() {
	    return this.getTypedRuleContext(Block_declarative_partContext,0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	block_statement_part() {
	    return this.getTypedRuleContext(Block_statement_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_statement(this);
		}
	}


}



class Block_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_block_statement_part;
    }

	architecture_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Architecture_statementContext);
	    } else {
	        return this.getTypedRuleContext(Architecture_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBlock_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBlock_statement_part(this);
		}
	}


}



class Branch_quantity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_branch_quantity_declaration;
    }

	QUANTITY() {
	    return this.getToken(vhdlParser.QUANTITY, 0);
	};

	terminal_aspect() {
	    return this.getTypedRuleContext(Terminal_aspectContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	across_aspect() {
	    return this.getTypedRuleContext(Across_aspectContext,0);
	};

	through_aspect() {
	    return this.getTypedRuleContext(Through_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBranch_quantity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBranch_quantity_declaration(this);
		}
	}


}



class Break_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_break_element;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ARROW() {
	    return this.getToken(vhdlParser.ARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	break_selector_clause() {
	    return this.getTypedRuleContext(Break_selector_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBreak_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBreak_element(this);
		}
	}


}



class Break_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_break_list;
    }

	break_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Break_elementContext);
	    } else {
	        return this.getTypedRuleContext(Break_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBreak_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBreak_list(this);
		}
	}


}



class Break_selector_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_break_selector_clause;
    }

	FOR() {
	    return this.getToken(vhdlParser.FOR, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	USE() {
	    return this.getToken(vhdlParser.USE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBreak_selector_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBreak_selector_clause(this);
		}
	}


}



class Break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_break_statement;
    }

	BREAK() {
	    return this.getToken(vhdlParser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	break_list() {
	    return this.getTypedRuleContext(Break_listContext,0);
	};

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterBreak_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitBreak_statement(this);
		}
	}


}



class Case_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_case_statement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.CASE);
	    } else {
	        return this.getToken(vhdlParser.CASE, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	case_statement_alternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_statement_alternativeContext);
	    } else {
	        return this.getTypedRuleContext(Case_statement_alternativeContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterCase_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitCase_statement(this);
		}
	}


}



class Case_statement_alternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_case_statement_alternative;
    }

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	choices() {
	    return this.getTypedRuleContext(ChoicesContext,0);
	};

	ARROW() {
	    return this.getToken(vhdlParser.ARROW, 0);
	};

	sequence_of_statements() {
	    return this.getTypedRuleContext(Sequence_of_statementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterCase_statement_alternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitCase_statement_alternative(this);
		}
	}


}



class ChoiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_choice;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	discrete_range() {
	    return this.getTypedRuleContext(Discrete_rangeContext,0);
	};

	simple_expression() {
	    return this.getTypedRuleContext(Simple_expressionContext,0);
	};

	OTHERS() {
	    return this.getToken(vhdlParser.OTHERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterChoice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitChoice(this);
		}
	}


}



class ChoicesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_choices;
    }

	choice = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoiceContext);
	    } else {
	        return this.getTypedRuleContext(ChoiceContext,i);
	    }
	};

	BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.BAR);
	    } else {
	        return this.getToken(vhdlParser.BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterChoices(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitChoices(this);
		}
	}


}



class Component_configurationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_component_configuration;
    }

	FOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.FOR);
	    } else {
	        return this.getToken(vhdlParser.FOR, i);
	    }
	};


	component_specification() {
	    return this.getTypedRuleContext(Component_specificationContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	binding_indication() {
	    return this.getTypedRuleContext(Binding_indicationContext,0);
	};

	block_configuration() {
	    return this.getTypedRuleContext(Block_configurationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComponent_configuration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComponent_configuration(this);
		}
	}


}



class Component_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_component_declaration;
    }

	COMPONENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMPONENT);
	    } else {
	        return this.getToken(vhdlParser.COMPONENT, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	generic_clause() {
	    return this.getTypedRuleContext(Generic_clauseContext,0);
	};

	port_clause() {
	    return this.getTypedRuleContext(Port_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComponent_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComponent_declaration(this);
		}
	}


}



class Component_instantiation_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_component_instantiation_statement;
    }

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	instantiated_unit() {
	    return this.getTypedRuleContext(Instantiated_unitContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	generic_map_aspect() {
	    return this.getTypedRuleContext(Generic_map_aspectContext,0);
	};

	port_map_aspect() {
	    return this.getTypedRuleContext(Port_map_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComponent_instantiation_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComponent_instantiation_statement(this);
		}
	}


}



class Component_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_component_specification;
    }

	instantiation_list() {
	    return this.getTypedRuleContext(Instantiation_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComponent_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComponent_specification(this);
		}
	}


}



class Composite_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_composite_nature_definition;
    }

	array_nature_definition() {
	    return this.getTypedRuleContext(Array_nature_definitionContext,0);
	};

	record_nature_definition() {
	    return this.getTypedRuleContext(Record_nature_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComposite_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComposite_nature_definition(this);
		}
	}


}



class Composite_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_composite_type_definition;
    }

	array_type_definition() {
	    return this.getTypedRuleContext(Array_type_definitionContext,0);
	};

	record_type_definition() {
	    return this.getTypedRuleContext(Record_type_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterComposite_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitComposite_type_definition(this);
		}
	}


}



class Concurrent_assertion_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_concurrent_assertion_statement;
    }

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	POSTPONED() {
	    return this.getToken(vhdlParser.POSTPONED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConcurrent_assertion_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConcurrent_assertion_statement(this);
		}
	}


}



class Concurrent_break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_concurrent_break_statement;
    }

	BREAK() {
	    return this.getToken(vhdlParser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	break_list() {
	    return this.getTypedRuleContext(Break_listContext,0);
	};

	sensitivity_clause() {
	    return this.getTypedRuleContext(Sensitivity_clauseContext,0);
	};

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConcurrent_break_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConcurrent_break_statement(this);
		}
	}


}



class Concurrent_procedure_call_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_concurrent_procedure_call_statement;
    }

	procedure_call() {
	    return this.getTypedRuleContext(Procedure_callContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	POSTPONED() {
	    return this.getToken(vhdlParser.POSTPONED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConcurrent_procedure_call_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConcurrent_procedure_call_statement(this);
		}
	}


}



class Concurrent_signal_assignment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_concurrent_signal_assignment_statement;
    }

	conditional_signal_assignment() {
	    return this.getTypedRuleContext(Conditional_signal_assignmentContext,0);
	};

	selected_signal_assignment() {
	    return this.getTypedRuleContext(Selected_signal_assignmentContext,0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	POSTPONED() {
	    return this.getToken(vhdlParser.POSTPONED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConcurrent_signal_assignment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConcurrent_signal_assignment_statement(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitCondition(this);
		}
	}


}



class Condition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_condition_clause;
    }

	UNTIL() {
	    return this.getToken(vhdlParser.UNTIL, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterCondition_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitCondition_clause(this);
		}
	}


}



class Conditional_signal_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_conditional_signal_assignment;
    }

	target() {
	    return this.getTypedRuleContext(TargetContext,0);
	};

	LE() {
	    return this.getToken(vhdlParser.LE, 0);
	};

	opts() {
	    return this.getTypedRuleContext(OptsContext,0);
	};

	conditional_waveforms() {
	    return this.getTypedRuleContext(Conditional_waveformsContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConditional_signal_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConditional_signal_assignment(this);
		}
	}


}



class Conditional_waveformsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_conditional_waveforms;
    }

	waveform() {
	    return this.getTypedRuleContext(WaveformContext,0);
	};

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	ELSE() {
	    return this.getToken(vhdlParser.ELSE, 0);
	};

	conditional_waveforms() {
	    return this.getTypedRuleContext(Conditional_waveformsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConditional_waveforms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConditional_waveforms(this);
		}
	}


}



class Configuration_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_configuration_declaration;
    }

	CONFIGURATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.CONFIGURATION);
	    } else {
	        return this.getToken(vhdlParser.CONFIGURATION, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	configuration_declarative_part() {
	    return this.getTypedRuleContext(Configuration_declarative_partContext,0);
	};

	block_configuration() {
	    return this.getTypedRuleContext(Block_configurationContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConfiguration_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConfiguration_declaration(this);
		}
	}


}



class Configuration_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_configuration_declarative_item;
    }

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConfiguration_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConfiguration_declarative_item(this);
		}
	}


}



class Configuration_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_configuration_declarative_part;
    }

	configuration_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Configuration_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Configuration_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConfiguration_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConfiguration_declarative_part(this);
		}
	}


}



class Configuration_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_configuration_item;
    }

	block_configuration() {
	    return this.getTypedRuleContext(Block_configurationContext,0);
	};

	component_configuration() {
	    return this.getTypedRuleContext(Component_configurationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConfiguration_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConfiguration_item(this);
		}
	}


}



class Configuration_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_configuration_specification;
    }

	FOR() {
	    return this.getToken(vhdlParser.FOR, 0);
	};

	component_specification() {
	    return this.getTypedRuleContext(Component_specificationContext,0);
	};

	binding_indication() {
	    return this.getTypedRuleContext(Binding_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConfiguration_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConfiguration_specification(this);
		}
	}


}



class Constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_constant_declaration;
    }

	CONSTANT() {
	    return this.getToken(vhdlParser.CONSTANT, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConstant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConstant_declaration(this);
		}
	}


}



class Constrained_array_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_constrained_array_definition;
    }

	ARRAY() {
	    return this.getToken(vhdlParser.ARRAY, 0);
	};

	index_constraint() {
	    return this.getTypedRuleContext(Index_constraintContext,0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConstrained_array_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConstrained_array_definition(this);
		}
	}


}



class Constrained_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_constrained_nature_definition;
    }

	ARRAY() {
	    return this.getToken(vhdlParser.ARRAY, 0);
	};

	index_constraint() {
	    return this.getTypedRuleContext(Index_constraintContext,0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConstrained_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConstrained_nature_definition(this);
		}
	}


}



class ConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_constraint;
    }

	range_constraint() {
	    return this.getTypedRuleContext(Range_constraintContext,0);
	};

	index_constraint() {
	    return this.getTypedRuleContext(Index_constraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitConstraint(this);
		}
	}


}



class Context_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_context_clause;
    }

	context_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Context_itemContext);
	    } else {
	        return this.getTypedRuleContext(Context_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterContext_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitContext_clause(this);
		}
	}


}



class Context_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_context_item;
    }

	library_clause() {
	    return this.getTypedRuleContext(Library_clauseContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterContext_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitContext_item(this);
		}
	}


}



class Delay_mechanismContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_delay_mechanism;
    }

	TRANSPORT() {
	    return this.getToken(vhdlParser.TRANSPORT, 0);
	};

	INERTIAL() {
	    return this.getToken(vhdlParser.INERTIAL, 0);
	};

	REJECT() {
	    return this.getToken(vhdlParser.REJECT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDelay_mechanism(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDelay_mechanism(this);
		}
	}


}



class Design_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_design_file;
    }

	EOF() {
	    return this.getToken(vhdlParser.EOF, 0);
	};

	design_unit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Design_unitContext);
	    } else {
	        return this.getTypedRuleContext(Design_unitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDesign_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDesign_file(this);
		}
	}


}



class Design_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_design_unit;
    }

	context_clause() {
	    return this.getTypedRuleContext(Context_clauseContext,0);
	};

	library_unit() {
	    return this.getTypedRuleContext(Library_unitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDesign_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDesign_unit(this);
		}
	}


}



class DesignatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_designator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDesignator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDesignator(this);
		}
	}


}



class DirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_direction;
    }

	TO() {
	    return this.getToken(vhdlParser.TO, 0);
	};

	DOWNTO() {
	    return this.getToken(vhdlParser.DOWNTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDirection(this);
		}
	}


}



class Disconnection_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_disconnection_specification;
    }

	DISCONNECT() {
	    return this.getToken(vhdlParser.DISCONNECT, 0);
	};

	guarded_signal_specification() {
	    return this.getTypedRuleContext(Guarded_signal_specificationContext,0);
	};

	AFTER() {
	    return this.getToken(vhdlParser.AFTER, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDisconnection_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDisconnection_specification(this);
		}
	}


}



class Discrete_rangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_discrete_range;
    }

	range_decl() {
	    return this.getTypedRuleContext(Range_declContext,0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterDiscrete_range(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitDiscrete_range(this);
		}
	}


}



class Element_associationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_element_association;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	choices() {
	    return this.getTypedRuleContext(ChoicesContext,0);
	};

	ARROW() {
	    return this.getToken(vhdlParser.ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterElement_association(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitElement_association(this);
		}
	}


}



class Element_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_element_declaration;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	element_subtype_definition() {
	    return this.getTypedRuleContext(Element_subtype_definitionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterElement_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitElement_declaration(this);
		}
	}


}



class Element_subnature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_element_subnature_definition;
    }

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterElement_subnature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitElement_subnature_definition(this);
		}
	}


}



class Element_subtype_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_element_subtype_definition;
    }

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterElement_subtype_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitElement_subtype_definition(this);
		}
	}


}



class Entity_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_aspect;
    }

	ENTITY() {
	    return this.getToken(vhdlParser.ENTITY, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	CONFIGURATION() {
	    return this.getToken(vhdlParser.CONFIGURATION, 0);
	};

	OPEN() {
	    return this.getToken(vhdlParser.OPEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_aspect(this);
		}
	}


}



class Entity_classContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_class;
    }

	ENTITY() {
	    return this.getToken(vhdlParser.ENTITY, 0);
	};

	ARCHITECTURE() {
	    return this.getToken(vhdlParser.ARCHITECTURE, 0);
	};

	CONFIGURATION() {
	    return this.getToken(vhdlParser.CONFIGURATION, 0);
	};

	PROCEDURE() {
	    return this.getToken(vhdlParser.PROCEDURE, 0);
	};

	FUNCTION() {
	    return this.getToken(vhdlParser.FUNCTION, 0);
	};

	PACKAGE() {
	    return this.getToken(vhdlParser.PACKAGE, 0);
	};

	TYPE() {
	    return this.getToken(vhdlParser.TYPE, 0);
	};

	SUBTYPE() {
	    return this.getToken(vhdlParser.SUBTYPE, 0);
	};

	CONSTANT() {
	    return this.getToken(vhdlParser.CONSTANT, 0);
	};

	SIGNAL() {
	    return this.getToken(vhdlParser.SIGNAL, 0);
	};

	VARIABLE() {
	    return this.getToken(vhdlParser.VARIABLE, 0);
	};

	COMPONENT() {
	    return this.getToken(vhdlParser.COMPONENT, 0);
	};

	LABEL() {
	    return this.getToken(vhdlParser.LABEL, 0);
	};

	LITERAL() {
	    return this.getToken(vhdlParser.LITERAL, 0);
	};

	UNITS() {
	    return this.getToken(vhdlParser.UNITS, 0);
	};

	GROUP() {
	    return this.getToken(vhdlParser.GROUP, 0);
	};

	FILE() {
	    return this.getToken(vhdlParser.FILE, 0);
	};

	NATURE() {
	    return this.getToken(vhdlParser.NATURE, 0);
	};

	SUBNATURE() {
	    return this.getToken(vhdlParser.SUBNATURE, 0);
	};

	QUANTITY() {
	    return this.getToken(vhdlParser.QUANTITY, 0);
	};

	TERMINAL() {
	    return this.getToken(vhdlParser.TERMINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_class(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_class(this);
		}
	}


}



class Entity_class_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_class_entry;
    }

	entity_class() {
	    return this.getTypedRuleContext(Entity_classContext,0);
	};

	BOX() {
	    return this.getToken(vhdlParser.BOX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_class_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_class_entry(this);
		}
	}


}



class Entity_class_entry_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_class_entry_list;
    }

	entity_class_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Entity_class_entryContext);
	    } else {
	        return this.getTypedRuleContext(Entity_class_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_class_entry_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_class_entry_list(this);
		}
	}


}



class Entity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_declaration;
    }

	ENTITY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.ENTITY);
	    } else {
	        return this.getToken(vhdlParser.ENTITY, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	entity_header() {
	    return this.getTypedRuleContext(Entity_headerContext,0);
	};

	entity_declarative_part() {
	    return this.getTypedRuleContext(Entity_declarative_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	entity_statement_part() {
	    return this.getTypedRuleContext(Entity_statement_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_declaration(this);
		}
	}


}



class Entity_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	signal_declaration() {
	    return this.getTypedRuleContext(Signal_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	disconnection_specification() {
	    return this.getTypedRuleContext(Disconnection_specificationContext,0);
	};

	step_limit_specification() {
	    return this.getTypedRuleContext(Step_limit_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	nature_declaration() {
	    return this.getTypedRuleContext(Nature_declarationContext,0);
	};

	subnature_declaration() {
	    return this.getTypedRuleContext(Subnature_declarationContext,0);
	};

	quantity_declaration() {
	    return this.getTypedRuleContext(Quantity_declarationContext,0);
	};

	terminal_declaration() {
	    return this.getTypedRuleContext(Terminal_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_declarative_item(this);
		}
	}


}



class Entity_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_declarative_part;
    }

	entity_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Entity_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Entity_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_declarative_part(this);
		}
	}


}



class Entity_designatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_designator;
    }

	entity_tag() {
	    return this.getTypedRuleContext(Entity_tagContext,0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_designator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_designator(this);
		}
	}


}



class Entity_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_header;
    }

	generic_clause() {
	    return this.getTypedRuleContext(Generic_clauseContext,0);
	};

	port_clause() {
	    return this.getTypedRuleContext(Port_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_header(this);
		}
	}


}



class Entity_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_name_list;
    }

	entity_designator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Entity_designatorContext);
	    } else {
	        return this.getTypedRuleContext(Entity_designatorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	OTHERS() {
	    return this.getToken(vhdlParser.OTHERS, 0);
	};

	ALL() {
	    return this.getToken(vhdlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_name_list(this);
		}
	}


}



class Entity_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_specification;
    }

	entity_name_list() {
	    return this.getTypedRuleContext(Entity_name_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	entity_class() {
	    return this.getTypedRuleContext(Entity_classContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_specification(this);
		}
	}


}



class Entity_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_statement;
    }

	concurrent_assertion_statement() {
	    return this.getTypedRuleContext(Concurrent_assertion_statementContext,0);
	};

	process_statement() {
	    return this.getTypedRuleContext(Process_statementContext,0);
	};

	concurrent_procedure_call_statement() {
	    return this.getTypedRuleContext(Concurrent_procedure_call_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_statement(this);
		}
	}


}



class Entity_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_statement_part;
    }

	entity_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Entity_statementContext);
	    } else {
	        return this.getTypedRuleContext(Entity_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_statement_part(this);
		}
	}


}



class Entity_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_entity_tag;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEntity_tag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEntity_tag(this);
		}
	}


}



class Enumeration_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_enumeration_literal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEnumeration_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEnumeration_literal(this);
		}
	}


}



class Enumeration_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_enumeration_type_definition;
    }

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	enumeration_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enumeration_literalContext);
	    } else {
	        return this.getTypedRuleContext(Enumeration_literalContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterEnumeration_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitEnumeration_type_definition(this);
		}
	}


}



class Exit_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_exit_statement;
    }

	EXIT() {
	    return this.getToken(vhdlParser.EXIT, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterExit_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitExit_statement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_expression;
    }

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	logical_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Logical_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitExpression(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_factor;
    }

	primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryContext,i);
	    }
	};

	DOUBLESTAR() {
	    return this.getToken(vhdlParser.DOUBLESTAR, 0);
	};

	ABS() {
	    return this.getToken(vhdlParser.ABS, 0);
	};

	NOT() {
	    return this.getToken(vhdlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFactor(this);
		}
	}


}



class File_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_file_declaration;
    }

	FILE() {
	    return this.getToken(vhdlParser.FILE, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	file_open_information() {
	    return this.getTypedRuleContext(File_open_informationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFile_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFile_declaration(this);
		}
	}


}



class File_logical_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_file_logical_name;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFile_logical_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFile_logical_name(this);
		}
	}


}



class File_open_informationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_file_open_information;
    }

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	file_logical_name() {
	    return this.getTypedRuleContext(File_logical_nameContext,0);
	};

	OPEN() {
	    return this.getToken(vhdlParser.OPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFile_open_information(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFile_open_information(this);
		}
	}


}



class File_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_file_type_definition;
    }

	FILE() {
	    return this.getToken(vhdlParser.FILE, 0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFile_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFile_type_definition(this);
		}
	}


}



class Formal_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_formal_parameter_list;
    }

	interface_list() {
	    return this.getTypedRuleContext(Interface_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFormal_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFormal_parameter_list(this);
		}
	}


}



class Formal_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_formal_part;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	explicit_range() {
	    return this.getTypedRuleContext(Explicit_rangeContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFormal_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFormal_part(this);
		}
	}


}



class Free_quantity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_free_quantity_declaration;
    }

	QUANTITY() {
	    return this.getToken(vhdlParser.QUANTITY, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFree_quantity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFree_quantity_declaration(this);
		}
	}


}



class Generate_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_generate_statement;
    }

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	generation_scheme() {
	    return this.getTypedRuleContext(Generation_schemeContext,0);
	};

	GENERATE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.GENERATE);
	    } else {
	        return this.getToken(vhdlParser.GENERATE, i);
	    }
	};


	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	architecture_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Architecture_statementContext);
	    } else {
	        return this.getTypedRuleContext(Architecture_statementContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	block_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Block_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Block_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGenerate_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGenerate_statement(this);
		}
	}


}



class Generation_schemeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_generation_scheme;
    }

	FOR() {
	    return this.getToken(vhdlParser.FOR, 0);
	};

	parameter_specification() {
	    return this.getTypedRuleContext(Parameter_specificationContext,0);
	};

	IF() {
	    return this.getToken(vhdlParser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGeneration_scheme(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGeneration_scheme(this);
		}
	}


}



class Generic_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_generic_clause;
    }

	GENERIC() {
	    return this.getToken(vhdlParser.GENERIC, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	generic_list() {
	    return this.getTypedRuleContext(Generic_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGeneric_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGeneric_clause(this);
		}
	}


}



class Generic_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_generic_list;
    }

	interface_constant_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_constant_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Interface_constant_declarationContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGeneric_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGeneric_list(this);
		}
	}


}



class Generic_map_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_generic_map_aspect;
    }

	GENERIC() {
	    return this.getToken(vhdlParser.GENERIC, 0);
	};

	MAP() {
	    return this.getToken(vhdlParser.MAP, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	association_list() {
	    return this.getTypedRuleContext(Association_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGeneric_map_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGeneric_map_aspect(this);
		}
	}


}



class Group_constituentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_group_constituent;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGroup_constituent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGroup_constituent(this);
		}
	}


}



class Group_constituent_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_group_constituent_list;
    }

	group_constituent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Group_constituentContext);
	    } else {
	        return this.getTypedRuleContext(Group_constituentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGroup_constituent_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGroup_constituent_list(this);
		}
	}


}



class Group_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_group_declaration;
    }

	GROUP() {
	    return this.getToken(vhdlParser.GROUP, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	group_constituent_list() {
	    return this.getTypedRuleContext(Group_constituent_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGroup_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGroup_declaration(this);
		}
	}


}



class Group_template_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_group_template_declaration;
    }

	GROUP() {
	    return this.getToken(vhdlParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	entity_class_entry_list() {
	    return this.getTypedRuleContext(Entity_class_entry_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGroup_template_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGroup_template_declaration(this);
		}
	}


}



class Guarded_signal_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_guarded_signal_specification;
    }

	signal_list() {
	    return this.getTypedRuleContext(Signal_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterGuarded_signal_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitGuarded_signal_specification(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_identifier;
    }

	BASIC_IDENTIFIER() {
	    return this.getToken(vhdlParser.BASIC_IDENTIFIER, 0);
	};

	EXTENDED_IDENTIFIER() {
	    return this.getToken(vhdlParser.EXTENDED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class Identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_identifier_list;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIdentifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIdentifier_list(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_if_statement;
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.IF);
	    } else {
	        return this.getToken(vhdlParser.IF, i);
	    }
	};


	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.THEN);
	    } else {
	        return this.getToken(vhdlParser.THEN, i);
	    }
	};


	sequence_of_statements = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sequence_of_statementsContext);
	    } else {
	        return this.getTypedRuleContext(Sequence_of_statementsContext,i);
	    }
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	ELSIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.ELSIF);
	    } else {
	        return this.getToken(vhdlParser.ELSIF, i);
	    }
	};


	ELSE() {
	    return this.getToken(vhdlParser.ELSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Index_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_index_constraint;
    }

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	discrete_range = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Discrete_rangeContext);
	    } else {
	        return this.getTypedRuleContext(Discrete_rangeContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIndex_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIndex_constraint(this);
		}
	}


}



class Index_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_index_specification;
    }

	discrete_range() {
	    return this.getTypedRuleContext(Discrete_rangeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIndex_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIndex_specification(this);
		}
	}


}



class Index_subtype_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_index_subtype_definition;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	RANGE() {
	    return this.getToken(vhdlParser.RANGE, 0);
	};

	BOX() {
	    return this.getToken(vhdlParser.BOX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIndex_subtype_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIndex_subtype_definition(this);
		}
	}


}



class Instantiated_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_instantiated_unit;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	COMPONENT() {
	    return this.getToken(vhdlParser.COMPONENT, 0);
	};

	ENTITY() {
	    return this.getToken(vhdlParser.ENTITY, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	CONFIGURATION() {
	    return this.getToken(vhdlParser.CONFIGURATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInstantiated_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInstantiated_unit(this);
		}
	}


}



class Instantiation_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_instantiation_list;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	OTHERS() {
	    return this.getToken(vhdlParser.OTHERS, 0);
	};

	ALL() {
	    return this.getToken(vhdlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInstantiation_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInstantiation_list(this);
		}
	}


}



class Interface_constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_constant_declaration;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	CONSTANT() {
	    return this.getToken(vhdlParser.CONSTANT, 0);
	};

	IN() {
	    return this.getToken(vhdlParser.IN, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_constant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_constant_declaration(this);
		}
	}


}



class Interface_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_declaration;
    }

	interface_constant_declaration() {
	    return this.getTypedRuleContext(Interface_constant_declarationContext,0);
	};

	interface_signal_declaration() {
	    return this.getTypedRuleContext(Interface_signal_declarationContext,0);
	};

	interface_variable_declaration() {
	    return this.getTypedRuleContext(Interface_variable_declarationContext,0);
	};

	interface_file_declaration() {
	    return this.getTypedRuleContext(Interface_file_declarationContext,0);
	};

	interface_terminal_declaration() {
	    return this.getTypedRuleContext(Interface_terminal_declarationContext,0);
	};

	interface_quantity_declaration() {
	    return this.getTypedRuleContext(Interface_quantity_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_declaration(this);
		}
	}


}



class Interface_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_element;
    }

	interface_declaration() {
	    return this.getTypedRuleContext(Interface_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_element(this);
		}
	}


}



class Interface_file_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_file_declaration;
    }

	FILE() {
	    return this.getToken(vhdlParser.FILE, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_file_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_file_declaration(this);
		}
	}


}



class Interface_signal_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_signal_list;
    }

	interface_signal_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_signal_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Interface_signal_declarationContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_signal_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_signal_list(this);
		}
	}


}



class Interface_port_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_port_list;
    }

	interface_port_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_port_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Interface_port_declarationContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_port_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_port_list(this);
		}
	}


}



class Interface_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_list;
    }

	interface_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_elementContext);
	    } else {
	        return this.getTypedRuleContext(Interface_elementContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.SEMI);
	    } else {
	        return this.getToken(vhdlParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_list(this);
		}
	}


}



class Interface_quantity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_quantity_declaration;
    }

	QUANTITY() {
	    return this.getToken(vhdlParser.QUANTITY, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IN() {
	    return this.getToken(vhdlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(vhdlParser.OUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_quantity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_quantity_declaration(this);
		}
	}


}



class Interface_port_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_port_declaration;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	signal_mode() {
	    return this.getTypedRuleContext(Signal_modeContext,0);
	};

	BUS() {
	    return this.getToken(vhdlParser.BUS, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_port_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_port_declaration(this);
		}
	}


}



class Interface_signal_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_signal_declaration;
    }

	SIGNAL() {
	    return this.getToken(vhdlParser.SIGNAL, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	signal_mode() {
	    return this.getTypedRuleContext(Signal_modeContext,0);
	};

	BUS() {
	    return this.getToken(vhdlParser.BUS, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_signal_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_signal_declaration(this);
		}
	}


}



class Interface_terminal_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_terminal_declaration;
    }

	TERMINAL() {
	    return this.getToken(vhdlParser.TERMINAL, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_terminal_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_terminal_declaration(this);
		}
	}


}



class Interface_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_interface_variable_declaration;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	VARIABLE() {
	    return this.getToken(vhdlParser.VARIABLE, 0);
	};

	signal_mode() {
	    return this.getTypedRuleContext(Signal_modeContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterInterface_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitInterface_variable_declaration(this);
		}
	}


}



class Iteration_schemeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_iteration_scheme;
    }

	WHILE() {
	    return this.getToken(vhdlParser.WHILE, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	FOR() {
	    return this.getToken(vhdlParser.FOR, 0);
	};

	parameter_specification() {
	    return this.getTypedRuleContext(Parameter_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterIteration_scheme(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitIteration_scheme(this);
		}
	}


}



class Label_colonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_label_colon;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLabel_colon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLabel_colon(this);
		}
	}


}



class Library_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_library_clause;
    }

	LIBRARY() {
	    return this.getToken(vhdlParser.LIBRARY, 0);
	};

	logical_name_list() {
	    return this.getTypedRuleContext(Logical_name_listContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLibrary_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLibrary_clause(this);
		}
	}


}



class Library_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_library_unit;
    }

	secondary_unit() {
	    return this.getTypedRuleContext(Secondary_unitContext,0);
	};

	primary_unit() {
	    return this.getTypedRuleContext(Primary_unitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLibrary_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLibrary_unit(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_literal;
    }

	NULL_() {
	    return this.getToken(vhdlParser.NULL_, 0);
	};

	BIT_STRING_LITERAL() {
	    return this.getToken(vhdlParser.BIT_STRING_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	enumeration_literal() {
	    return this.getTypedRuleContext(Enumeration_literalContext,0);
	};

	numeric_literal() {
	    return this.getTypedRuleContext(Numeric_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Logical_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_logical_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLogical_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLogical_name(this);
		}
	}


}



class Logical_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_logical_name_list;
    }

	logical_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_nameContext);
	    } else {
	        return this.getTypedRuleContext(Logical_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLogical_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLogical_name_list(this);
		}
	}


}



class Logical_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_logical_operator;
    }

	AND() {
	    return this.getToken(vhdlParser.AND, 0);
	};

	OR() {
	    return this.getToken(vhdlParser.OR, 0);
	};

	NAND() {
	    return this.getToken(vhdlParser.NAND, 0);
	};

	NOR() {
	    return this.getToken(vhdlParser.NOR, 0);
	};

	XOR() {
	    return this.getToken(vhdlParser.XOR, 0);
	};

	XNOR() {
	    return this.getToken(vhdlParser.XNOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLogical_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLogical_operator(this);
		}
	}


}



class Loop_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_loop_statement;
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.LOOP);
	    } else {
	        return this.getToken(vhdlParser.LOOP, i);
	    }
	};


	sequence_of_statements() {
	    return this.getTypedRuleContext(Sequence_of_statementsContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	iteration_scheme() {
	    return this.getTypedRuleContext(Iteration_schemeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterLoop_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitLoop_statement(this);
		}
	}


}



class Signal_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signal_mode;
    }

	IN() {
	    return this.getToken(vhdlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(vhdlParser.OUT, 0);
	};

	INOUT() {
	    return this.getToken(vhdlParser.INOUT, 0);
	};

	BUFFER() {
	    return this.getToken(vhdlParser.BUFFER, 0);
	};

	LINKAGE() {
	    return this.getToken(vhdlParser.LINKAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignal_mode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignal_mode(this);
		}
	}


}



class Multiplying_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_multiplying_operator;
    }

	MUL() {
	    return this.getToken(vhdlParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(vhdlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(vhdlParser.MOD, 0);
	};

	REM() {
	    return this.getToken(vhdlParser.REM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterMultiplying_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitMultiplying_operator(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	name_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Name_partContext);
	    } else {
	        return this.getTypedRuleContext(Name_partContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitName(this);
		}
	}


}



class Name_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_name_part;
    }

	selected_name_part() {
	    return this.getTypedRuleContext(Selected_name_partContext,0);
	};

	function_call_or_indexed_name_part() {
	    return this.getTypedRuleContext(Function_call_or_indexed_name_partContext,0);
	};

	slice_name_part() {
	    return this.getTypedRuleContext(Slice_name_partContext,0);
	};

	attribute_name_part() {
	    return this.getTypedRuleContext(Attribute_name_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterName_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitName_part(this);
		}
	}


}



class Selected_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_selected_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.DOT);
	    } else {
	        return this.getToken(vhdlParser.DOT, i);
	    }
	};


	suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuffixContext);
	    } else {
	        return this.getTypedRuleContext(SuffixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSelected_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSelected_name(this);
		}
	}


}



class Selected_name_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_selected_name_part;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.DOT);
	    } else {
	        return this.getToken(vhdlParser.DOT, i);
	    }
	};


	suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuffixContext);
	    } else {
	        return this.getTypedRuleContext(SuffixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSelected_name_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSelected_name_part(this);
		}
	}


}



class Function_call_or_indexed_name_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_function_call_or_indexed_name_part;
    }

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	actual_parameter_part() {
	    return this.getTypedRuleContext(Actual_parameter_partContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFunction_call_or_indexed_name_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFunction_call_or_indexed_name_part(this);
		}
	}


}



class Slice_name_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_slice_name_part;
    }

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	discrete_range() {
	    return this.getTypedRuleContext(Discrete_rangeContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSlice_name_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSlice_name_part(this);
		}
	}


}



class Attribute_name_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_attribute_name_part;
    }

	APOSTROPHE() {
	    return this.getToken(vhdlParser.APOSTROPHE, 0);
	};

	attribute_designator() {
	    return this.getTypedRuleContext(Attribute_designatorContext,0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterAttribute_name_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitAttribute_name_part(this);
		}
	}


}



class Nature_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_nature_declaration;
    }

	NATURE() {
	    return this.getToken(vhdlParser.NATURE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	nature_definition() {
	    return this.getTypedRuleContext(Nature_definitionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterNature_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitNature_declaration(this);
		}
	}


}



class Nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_nature_definition;
    }

	scalar_nature_definition() {
	    return this.getTypedRuleContext(Scalar_nature_definitionContext,0);
	};

	composite_nature_definition() {
	    return this.getTypedRuleContext(Composite_nature_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterNature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitNature_definition(this);
		}
	}


}



class Nature_element_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_nature_element_declaration;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	element_subnature_definition() {
	    return this.getTypedRuleContext(Element_subnature_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterNature_element_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitNature_element_declaration(this);
		}
	}


}



class Next_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_next_statement;
    }

	NEXT() {
	    return this.getToken(vhdlParser.NEXT, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterNext_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitNext_statement(this);
		}
	}


}



class Numeric_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_numeric_literal;
    }

	abstract_literal() {
	    return this.getTypedRuleContext(Abstract_literalContext,0);
	};

	physical_literal() {
	    return this.getTypedRuleContext(Physical_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterNumeric_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitNumeric_literal(this);
		}
	}


}



class Object_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_object_declaration;
    }

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	signal_declaration() {
	    return this.getTypedRuleContext(Signal_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	terminal_declaration() {
	    return this.getTypedRuleContext(Terminal_declarationContext,0);
	};

	quantity_declaration() {
	    return this.getTypedRuleContext(Quantity_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterObject_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitObject_declaration(this);
		}
	}


}



class OptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_opts;
    }

	GUARDED() {
	    return this.getToken(vhdlParser.GUARDED, 0);
	};

	delay_mechanism() {
	    return this.getTypedRuleContext(Delay_mechanismContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitOpts(this);
		}
	}


}



class Package_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_body;
    }

	PACKAGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.PACKAGE);
	    } else {
	        return this.getToken(vhdlParser.PACKAGE, i);
	    }
	};


	BODY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.BODY);
	    } else {
	        return this.getToken(vhdlParser.BODY, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	package_body_declarative_part() {
	    return this.getTypedRuleContext(Package_body_declarative_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_body(this);
		}
	}


}



class Package_body_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_body_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_body_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_body_declarative_item(this);
		}
	}


}



class Package_body_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_body_declarative_part;
    }

	package_body_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Package_body_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Package_body_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_body_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_body_declarative_part(this);
		}
	}


}



class Package_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_declaration;
    }

	PACKAGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.PACKAGE);
	    } else {
	        return this.getToken(vhdlParser.PACKAGE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	package_declarative_part() {
	    return this.getTypedRuleContext(Package_declarative_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_declaration(this);
		}
	}


}



class Package_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	signal_declaration() {
	    return this.getTypedRuleContext(Signal_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	component_declaration() {
	    return this.getTypedRuleContext(Component_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	disconnection_specification() {
	    return this.getTypedRuleContext(Disconnection_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	nature_declaration() {
	    return this.getTypedRuleContext(Nature_declarationContext,0);
	};

	subnature_declaration() {
	    return this.getTypedRuleContext(Subnature_declarationContext,0);
	};

	terminal_declaration() {
	    return this.getTypedRuleContext(Terminal_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_declarative_item(this);
		}
	}


}



class Package_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_package_declarative_part;
    }

	package_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Package_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Package_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPackage_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPackage_declarative_part(this);
		}
	}


}



class Parameter_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_parameter_specification;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(vhdlParser.IN, 0);
	};

	discrete_range() {
	    return this.getTypedRuleContext(Discrete_rangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterParameter_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitParameter_specification(this);
		}
	}


}



class Physical_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_physical_literal;
    }

	abstract_literal() {
	    return this.getTypedRuleContext(Abstract_literalContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPhysical_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPhysical_literal(this);
		}
	}


}



class Physical_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_physical_type_definition;
    }

	range_constraint() {
	    return this.getTypedRuleContext(Range_constraintContext,0);
	};

	UNITS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.UNITS);
	    } else {
	        return this.getToken(vhdlParser.UNITS, i);
	    }
	};


	base_unit_declaration() {
	    return this.getTypedRuleContext(Base_unit_declarationContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	secondary_unit_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Secondary_unit_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Secondary_unit_declarationContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPhysical_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPhysical_type_definition(this);
		}
	}


}



class Port_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_port_clause;
    }

	PORT() {
	    return this.getToken(vhdlParser.PORT, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	port_list() {
	    return this.getTypedRuleContext(Port_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPort_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPort_clause(this);
		}
	}


}



class Port_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_port_list;
    }

	interface_port_list() {
	    return this.getTypedRuleContext(Interface_port_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPort_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPort_list(this);
		}
	}


}



class Port_map_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_port_map_aspect;
    }

	PORT() {
	    return this.getToken(vhdlParser.PORT, 0);
	};

	MAP() {
	    return this.getToken(vhdlParser.MAP, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	association_list() {
	    return this.getTypedRuleContext(Association_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPort_map_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPort_map_aspect(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	qualified_expression() {
	    return this.getTypedRuleContext(Qualified_expressionContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	allocator() {
	    return this.getTypedRuleContext(AllocatorContext,0);
	};

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class Primary_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_primary_unit;
    }

	entity_declaration() {
	    return this.getTypedRuleContext(Entity_declarationContext,0);
	};

	configuration_declaration() {
	    return this.getTypedRuleContext(Configuration_declarationContext,0);
	};

	package_declaration() {
	    return this.getTypedRuleContext(Package_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterPrimary_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitPrimary_unit(this);
		}
	}


}



class Procedural_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedural_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedural_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedural_declarative_item(this);
		}
	}


}



class Procedural_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedural_declarative_part;
    }

	procedural_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Procedural_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Procedural_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedural_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedural_declarative_part(this);
		}
	}


}



class Procedural_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedural_statement_part;
    }

	sequential_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sequential_statementContext);
	    } else {
	        return this.getTypedRuleContext(Sequential_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedural_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedural_statement_part(this);
		}
	}


}



class Procedure_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedure_call;
    }

	selected_name() {
	    return this.getTypedRuleContext(Selected_nameContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	actual_parameter_part() {
	    return this.getTypedRuleContext(Actual_parameter_partContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedure_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedure_call(this);
		}
	}


}



class Procedure_call_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedure_call_statement;
    }

	procedure_call() {
	    return this.getTypedRuleContext(Procedure_callContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedure_call_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedure_call_statement(this);
		}
	}


}



class Process_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_process_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcess_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcess_declarative_item(this);
		}
	}


}



class Process_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_process_declarative_part;
    }

	process_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Process_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Process_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcess_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcess_declarative_part(this);
		}
	}


}



class Process_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_process_statement;
    }

	PROCESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.PROCESS);
	    } else {
	        return this.getToken(vhdlParser.PROCESS, i);
	    }
	};


	process_declarative_part() {
	    return this.getTypedRuleContext(Process_declarative_partContext,0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	process_statement_part() {
	    return this.getTypedRuleContext(Process_statement_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	POSTPONED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.POSTPONED);
	    } else {
	        return this.getToken(vhdlParser.POSTPONED, i);
	    }
	};


	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	sensitivity_list() {
	    return this.getTypedRuleContext(Sensitivity_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcess_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcess_statement(this);
		}
	}


}



class Process_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_process_statement_part;
    }

	sequential_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sequential_statementContext);
	    } else {
	        return this.getTypedRuleContext(Sequential_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcess_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcess_statement_part(this);
		}
	}


}



class Qualified_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_qualified_expression;
    }

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	APOSTROPHE() {
	    return this.getToken(vhdlParser.APOSTROPHE, 0);
	};

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterQualified_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitQualified_expression(this);
		}
	}


}



class Quantity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_quantity_declaration;
    }

	free_quantity_declaration() {
	    return this.getTypedRuleContext(Free_quantity_declarationContext,0);
	};

	branch_quantity_declaration() {
	    return this.getTypedRuleContext(Branch_quantity_declarationContext,0);
	};

	source_quantity_declaration() {
	    return this.getTypedRuleContext(Source_quantity_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterQuantity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitQuantity_declaration(this);
		}
	}


}



class Quantity_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_quantity_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	OTHERS() {
	    return this.getToken(vhdlParser.OTHERS, 0);
	};

	ALL() {
	    return this.getToken(vhdlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterQuantity_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitQuantity_list(this);
		}
	}


}



class Quantity_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_quantity_specification;
    }

	quantity_list() {
	    return this.getTypedRuleContext(Quantity_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterQuantity_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitQuantity_specification(this);
		}
	}


}



class Range_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_range_decl;
    }

	explicit_range() {
	    return this.getTypedRuleContext(Explicit_rangeContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRange_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRange_decl(this);
		}
	}


}



class Explicit_rangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_explicit_range;
    }

	simple_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_expressionContext,i);
	    }
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterExplicit_range(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitExplicit_range(this);
		}
	}


}



class Range_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_range_constraint;
    }

	RANGE() {
	    return this.getToken(vhdlParser.RANGE, 0);
	};

	range_decl() {
	    return this.getTypedRuleContext(Range_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRange_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRange_constraint(this);
		}
	}


}



class Record_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_record_nature_definition;
    }

	RECORD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.RECORD);
	    } else {
	        return this.getToken(vhdlParser.RECORD, i);
	    }
	};


	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	nature_element_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Nature_element_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Nature_element_declarationContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRecord_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRecord_nature_definition(this);
		}
	}


}



class Record_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_record_type_definition;
    }

	RECORD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.RECORD);
	    } else {
	        return this.getToken(vhdlParser.RECORD, i);
	    }
	};


	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	element_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Element_declarationContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRecord_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRecord_type_definition(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_relation;
    }

	shift_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Shift_expressionContext,i);
	    }
	};

	relational_operator() {
	    return this.getTypedRuleContext(Relational_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRelation(this);
		}
	}


}



class Relational_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_relational_operator;
    }

	EQ() {
	    return this.getToken(vhdlParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(vhdlParser.NEQ, 0);
	};

	LOWERTHAN() {
	    return this.getToken(vhdlParser.LOWERTHAN, 0);
	};

	LE() {
	    return this.getToken(vhdlParser.LE, 0);
	};

	GREATERTHAN() {
	    return this.getToken(vhdlParser.GREATERTHAN, 0);
	};

	GE() {
	    return this.getToken(vhdlParser.GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterRelational_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitRelational_operator(this);
		}
	}


}



class Report_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_report_statement;
    }

	REPORT() {
	    return this.getToken(vhdlParser.REPORT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	SEVERITY() {
	    return this.getToken(vhdlParser.SEVERITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterReport_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitReport_statement(this);
		}
	}


}



class Return_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_return_statement;
    }

	RETURN() {
	    return this.getToken(vhdlParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterReturn_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitReturn_statement(this);
		}
	}


}



class Scalar_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_scalar_nature_definition;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	ACROSS() {
	    return this.getToken(vhdlParser.ACROSS, 0);
	};

	THROUGH() {
	    return this.getToken(vhdlParser.THROUGH, 0);
	};

	REFERENCE() {
	    return this.getToken(vhdlParser.REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterScalar_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitScalar_nature_definition(this);
		}
	}


}



class Scalar_type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_scalar_type_definition;
    }

	physical_type_definition() {
	    return this.getTypedRuleContext(Physical_type_definitionContext,0);
	};

	enumeration_type_definition() {
	    return this.getTypedRuleContext(Enumeration_type_definitionContext,0);
	};

	range_constraint() {
	    return this.getTypedRuleContext(Range_constraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterScalar_type_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitScalar_type_definition(this);
		}
	}


}



class Secondary_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_secondary_unit;
    }

	architecture_body() {
	    return this.getTypedRuleContext(Architecture_bodyContext,0);
	};

	package_body() {
	    return this.getTypedRuleContext(Package_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSecondary_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSecondary_unit(this);
		}
	}


}



class Secondary_unit_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_secondary_unit_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(vhdlParser.EQ, 0);
	};

	physical_literal() {
	    return this.getTypedRuleContext(Physical_literalContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSecondary_unit_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSecondary_unit_declaration(this);
		}
	}


}



class Selected_signal_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_selected_signal_assignment;
    }

	WITH() {
	    return this.getToken(vhdlParser.WITH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SELECT() {
	    return this.getToken(vhdlParser.SELECT, 0);
	};

	target() {
	    return this.getTypedRuleContext(TargetContext,0);
	};

	LE() {
	    return this.getToken(vhdlParser.LE, 0);
	};

	opts() {
	    return this.getTypedRuleContext(OptsContext,0);
	};

	selected_waveforms() {
	    return this.getTypedRuleContext(Selected_waveformsContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSelected_signal_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSelected_signal_assignment(this);
		}
	}


}



class Selected_waveformsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_selected_waveforms;
    }

	waveform = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WaveformContext);
	    } else {
	        return this.getTypedRuleContext(WaveformContext,i);
	    }
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.WHEN);
	    } else {
	        return this.getToken(vhdlParser.WHEN, i);
	    }
	};


	choices = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChoicesContext);
	    } else {
	        return this.getTypedRuleContext(ChoicesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSelected_waveforms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSelected_waveforms(this);
		}
	}


}



class Sensitivity_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_sensitivity_clause;
    }

	ON() {
	    return this.getToken(vhdlParser.ON, 0);
	};

	sensitivity_list() {
	    return this.getTypedRuleContext(Sensitivity_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSensitivity_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSensitivity_clause(this);
		}
	}


}



class Sensitivity_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_sensitivity_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSensitivity_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSensitivity_list(this);
		}
	}


}



class Sequence_of_statementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_sequence_of_statements;
    }

	sequential_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sequential_statementContext);
	    } else {
	        return this.getTypedRuleContext(Sequential_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSequence_of_statements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSequence_of_statements(this);
		}
	}


}



class Sequential_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_sequential_statement;
    }

	wait_statement() {
	    return this.getTypedRuleContext(Wait_statementContext,0);
	};

	assertion_statement() {
	    return this.getTypedRuleContext(Assertion_statementContext,0);
	};

	report_statement() {
	    return this.getTypedRuleContext(Report_statementContext,0);
	};

	signal_assignment_statement() {
	    return this.getTypedRuleContext(Signal_assignment_statementContext,0);
	};

	variable_assignment_statement() {
	    return this.getTypedRuleContext(Variable_assignment_statementContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	case_statement() {
	    return this.getTypedRuleContext(Case_statementContext,0);
	};

	loop_statement() {
	    return this.getTypedRuleContext(Loop_statementContext,0);
	};

	next_statement() {
	    return this.getTypedRuleContext(Next_statementContext,0);
	};

	exit_statement() {
	    return this.getTypedRuleContext(Exit_statementContext,0);
	};

	return_statement() {
	    return this.getTypedRuleContext(Return_statementContext,0);
	};

	NULL_() {
	    return this.getToken(vhdlParser.NULL_, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	procedure_call_statement() {
	    return this.getTypedRuleContext(Procedure_call_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSequential_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSequential_statement(this);
		}
	}


}



class Shift_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_shift_expression;
    }

	simple_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_expressionContext,i);
	    }
	};

	shift_operator() {
	    return this.getTypedRuleContext(Shift_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterShift_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitShift_expression(this);
		}
	}


}



class Shift_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_shift_operator;
    }

	SLL() {
	    return this.getToken(vhdlParser.SLL, 0);
	};

	SRL() {
	    return this.getToken(vhdlParser.SRL, 0);
	};

	SLA() {
	    return this.getToken(vhdlParser.SLA, 0);
	};

	SRA() {
	    return this.getToken(vhdlParser.SRA, 0);
	};

	ROL() {
	    return this.getToken(vhdlParser.ROL, 0);
	};

	ROR() {
	    return this.getToken(vhdlParser.ROR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterShift_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitShift_operator(this);
		}
	}


}



class Signal_assignment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signal_assignment_statement;
    }

	target() {
	    return this.getTypedRuleContext(TargetContext,0);
	};

	LE() {
	    return this.getToken(vhdlParser.LE, 0);
	};

	waveform() {
	    return this.getTypedRuleContext(WaveformContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	delay_mechanism() {
	    return this.getTypedRuleContext(Delay_mechanismContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignal_assignment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignal_assignment_statement(this);
		}
	}


}



class Signal_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signal_declaration;
    }

	SIGNAL() {
	    return this.getToken(vhdlParser.SIGNAL, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	signal_kind() {
	    return this.getTypedRuleContext(Signal_kindContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignal_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignal_declaration(this);
		}
	}


}



class Signal_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signal_kind;
    }

	REGISTER() {
	    return this.getToken(vhdlParser.REGISTER, 0);
	};

	BUS() {
	    return this.getToken(vhdlParser.BUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignal_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignal_kind(this);
		}
	}


}



class Signal_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signal_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	OTHERS() {
	    return this.getToken(vhdlParser.OTHERS, 0);
	};

	ALL() {
	    return this.getToken(vhdlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignal_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignal_list(this);
		}
	}


}



class SignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_signature;
    }

	LBRACKET() {
	    return this.getToken(vhdlParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(vhdlParser.RBRACKET, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	RETURN() {
	    return this.getToken(vhdlParser.RETURN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSignature(this);
		}
	}


}



class Simple_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simple_expression;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	adding_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Adding_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Adding_operatorContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(vhdlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(vhdlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimple_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimple_expression(this);
		}
	}


}



class Simple_simultaneous_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simple_simultaneous_statement;
    }

	simple_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_expressionContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(vhdlParser.ASSIGN, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	tolerance_aspect() {
	    return this.getTypedRuleContext(Tolerance_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimple_simultaneous_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimple_simultaneous_statement(this);
		}
	}


}



class Simultaneous_alternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_alternative;
    }

	WHEN() {
	    return this.getToken(vhdlParser.WHEN, 0);
	};

	choices() {
	    return this.getTypedRuleContext(ChoicesContext,0);
	};

	ARROW() {
	    return this.getToken(vhdlParser.ARROW, 0);
	};

	simultaneous_statement_part() {
	    return this.getTypedRuleContext(Simultaneous_statement_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_alternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_alternative(this);
		}
	}


}



class Simultaneous_case_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_case_statement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.CASE);
	    } else {
	        return this.getToken(vhdlParser.CASE, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	USE() {
	    return this.getToken(vhdlParser.USE, 0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	simultaneous_alternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simultaneous_alternativeContext);
	    } else {
	        return this.getTypedRuleContext(Simultaneous_alternativeContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_case_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_case_statement(this);
		}
	}


}



class Simultaneous_if_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_if_statement;
    }

	IF() {
	    return this.getToken(vhdlParser.IF, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	USE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.USE);
	    } else {
	        return this.getToken(vhdlParser.USE, i);
	    }
	};


	simultaneous_statement_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simultaneous_statement_partContext);
	    } else {
	        return this.getTypedRuleContext(Simultaneous_statement_partContext,i);
	    }
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	ELSIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.ELSIF);
	    } else {
	        return this.getToken(vhdlParser.ELSIF, i);
	    }
	};


	ELSE() {
	    return this.getToken(vhdlParser.ELSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_if_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_if_statement(this);
		}
	}


}



class Simultaneous_procedural_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_procedural_statement;
    }

	PROCEDURAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.PROCEDURAL);
	    } else {
	        return this.getToken(vhdlParser.PROCEDURAL, i);
	    }
	};


	procedural_declarative_part() {
	    return this.getTypedRuleContext(Procedural_declarative_partContext,0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	procedural_statement_part() {
	    return this.getTypedRuleContext(Procedural_statement_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_procedural_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_procedural_statement(this);
		}
	}


}



class Simultaneous_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_statement;
    }

	simple_simultaneous_statement() {
	    return this.getTypedRuleContext(Simple_simultaneous_statementContext,0);
	};

	simultaneous_if_statement() {
	    return this.getTypedRuleContext(Simultaneous_if_statementContext,0);
	};

	simultaneous_case_statement() {
	    return this.getTypedRuleContext(Simultaneous_case_statementContext,0);
	};

	simultaneous_procedural_statement() {
	    return this.getTypedRuleContext(Simultaneous_procedural_statementContext,0);
	};

	NULL_() {
	    return this.getToken(vhdlParser.NULL_, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_statement(this);
		}
	}


}



class Simultaneous_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_simultaneous_statement_part;
    }

	simultaneous_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simultaneous_statementContext);
	    } else {
	        return this.getTypedRuleContext(Simultaneous_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSimultaneous_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSimultaneous_statement_part(this);
		}
	}


}



class Source_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_source_aspect;
    }

	SPECTRUM() {
	    return this.getToken(vhdlParser.SPECTRUM, 0);
	};

	simple_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_expressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(vhdlParser.COMMA, 0);
	};

	NOISE() {
	    return this.getToken(vhdlParser.NOISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSource_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSource_aspect(this);
		}
	}


}



class Source_quantity_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_source_quantity_declaration;
    }

	QUANTITY() {
	    return this.getToken(vhdlParser.QUANTITY, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	source_aspect() {
	    return this.getTypedRuleContext(Source_aspectContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSource_quantity_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSource_quantity_declaration(this);
		}
	}


}



class Step_limit_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_step_limit_specification;
    }

	LIMIT() {
	    return this.getToken(vhdlParser.LIMIT, 0);
	};

	quantity_specification() {
	    return this.getTypedRuleContext(Quantity_specificationContext,0);
	};

	WITH() {
	    return this.getToken(vhdlParser.WITH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterStep_limit_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitStep_limit_specification(this);
		}
	}


}



class Subnature_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subnature_declaration;
    }

	SUBNATURE() {
	    return this.getToken(vhdlParser.SUBNATURE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubnature_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubnature_declaration(this);
		}
	}


}



class Subnature_indicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subnature_indication;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	index_constraint() {
	    return this.getTypedRuleContext(Index_constraintContext,0);
	};

	TOLERANCE() {
	    return this.getToken(vhdlParser.TOLERANCE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ACROSS() {
	    return this.getToken(vhdlParser.ACROSS, 0);
	};

	THROUGH() {
	    return this.getToken(vhdlParser.THROUGH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubnature_indication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubnature_indication(this);
		}
	}


}



class Subprogram_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_body;
    }

	subprogram_specification() {
	    return this.getTypedRuleContext(Subprogram_specificationContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	subprogram_declarative_part() {
	    return this.getTypedRuleContext(Subprogram_declarative_partContext,0);
	};

	BEGIN() {
	    return this.getToken(vhdlParser.BEGIN, 0);
	};

	subprogram_statement_part() {
	    return this.getTypedRuleContext(Subprogram_statement_partContext,0);
	};

	END() {
	    return this.getToken(vhdlParser.END, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	subprogram_kind() {
	    return this.getTypedRuleContext(Subprogram_kindContext,0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_body(this);
		}
	}


}



class Subprogram_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_declaration;
    }

	subprogram_specification() {
	    return this.getTypedRuleContext(Subprogram_specificationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_declaration(this);
		}
	}


}



class Subprogram_declarative_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_declarative_item;
    }

	subprogram_declaration() {
	    return this.getTypedRuleContext(Subprogram_declarationContext,0);
	};

	subprogram_body() {
	    return this.getTypedRuleContext(Subprogram_bodyContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	subtype_declaration() {
	    return this.getTypedRuleContext(Subtype_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	file_declaration() {
	    return this.getTypedRuleContext(File_declarationContext,0);
	};

	alias_declaration() {
	    return this.getTypedRuleContext(Alias_declarationContext,0);
	};

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	attribute_specification() {
	    return this.getTypedRuleContext(Attribute_specificationContext,0);
	};

	use_clause() {
	    return this.getTypedRuleContext(Use_clauseContext,0);
	};

	group_template_declaration() {
	    return this.getTypedRuleContext(Group_template_declarationContext,0);
	};

	group_declaration() {
	    return this.getTypedRuleContext(Group_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_declarative_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_declarative_item(this);
		}
	}


}



class Subprogram_declarative_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_declarative_part;
    }

	subprogram_declarative_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subprogram_declarative_itemContext);
	    } else {
	        return this.getTypedRuleContext(Subprogram_declarative_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_declarative_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_declarative_part(this);
		}
	}


}



class Subprogram_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_kind;
    }

	PROCEDURE() {
	    return this.getToken(vhdlParser.PROCEDURE, 0);
	};

	FUNCTION() {
	    return this.getToken(vhdlParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_kind(this);
		}
	}


}



class Subprogram_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_specification;
    }

	procedure_specification() {
	    return this.getTypedRuleContext(Procedure_specificationContext,0);
	};

	function_specification() {
	    return this.getTypedRuleContext(Function_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_specification(this);
		}
	}


}



class Procedure_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_procedure_specification;
    }

	PROCEDURE() {
	    return this.getToken(vhdlParser.PROCEDURE, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterProcedure_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitProcedure_specification(this);
		}
	}


}



class Function_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_function_specification;
    }

	FUNCTION() {
	    return this.getToken(vhdlParser.FUNCTION, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	RETURN() {
	    return this.getToken(vhdlParser.RETURN, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	PURE() {
	    return this.getToken(vhdlParser.PURE, 0);
	};

	IMPURE() {
	    return this.getToken(vhdlParser.IMPURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterFunction_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitFunction_specification(this);
		}
	}


}



class Subprogram_statement_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subprogram_statement_part;
    }

	sequential_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sequential_statementContext);
	    } else {
	        return this.getTypedRuleContext(Sequential_statementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubprogram_statement_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubprogram_statement_part(this);
		}
	}


}



class Subtype_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subtype_declaration;
    }

	SUBTYPE() {
	    return this.getToken(vhdlParser.SUBTYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubtype_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubtype_declaration(this);
		}
	}


}



class Subtype_indicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_subtype_indication;
    }

	selected_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Selected_nameContext);
	    } else {
	        return this.getTypedRuleContext(Selected_nameContext,i);
	    }
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	tolerance_aspect() {
	    return this.getTypedRuleContext(Tolerance_aspectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSubtype_indication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSubtype_indication(this);
		}
	}


}



class SuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_suffix;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(vhdlParser.STRING_LITERAL, 0);
	};

	ALL() {
	    return this.getToken(vhdlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitSuffix(this);
		}
	}


}



class TargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_target;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTarget(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	multiplying_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Multiplying_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Multiplying_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Terminal_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_terminal_aspect;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	TO() {
	    return this.getToken(vhdlParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTerminal_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTerminal_aspect(this);
		}
	}


}



class Terminal_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_terminal_declaration;
    }

	TERMINAL() {
	    return this.getToken(vhdlParser.TERMINAL, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTerminal_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTerminal_declaration(this);
		}
	}


}



class Through_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_through_aspect;
    }

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	THROUGH() {
	    return this.getToken(vhdlParser.THROUGH, 0);
	};

	tolerance_aspect() {
	    return this.getTypedRuleContext(Tolerance_aspectContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterThrough_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitThrough_aspect(this);
		}
	}


}



class Timeout_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_timeout_clause;
    }

	FOR() {
	    return this.getToken(vhdlParser.FOR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTimeout_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTimeout_clause(this);
		}
	}


}



class Tolerance_aspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_tolerance_aspect;
    }

	TOLERANCE() {
	    return this.getToken(vhdlParser.TOLERANCE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterTolerance_aspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitTolerance_aspect(this);
		}
	}


}



class Type_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_type_declaration;
    }

	TYPE() {
	    return this.getToken(vhdlParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	IS() {
	    return this.getToken(vhdlParser.IS, 0);
	};

	type_definition() {
	    return this.getTypedRuleContext(Type_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterType_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitType_declaration(this);
		}
	}


}



class Type_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_type_definition;
    }

	scalar_type_definition() {
	    return this.getTypedRuleContext(Scalar_type_definitionContext,0);
	};

	composite_type_definition() {
	    return this.getTypedRuleContext(Composite_type_definitionContext,0);
	};

	access_type_definition() {
	    return this.getTypedRuleContext(Access_type_definitionContext,0);
	};

	file_type_definition() {
	    return this.getTypedRuleContext(File_type_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterType_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitType_definition(this);
		}
	}


}



class Unconstrained_array_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_unconstrained_array_definition;
    }

	ARRAY() {
	    return this.getToken(vhdlParser.ARRAY, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	index_subtype_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_subtype_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Index_subtype_definitionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterUnconstrained_array_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitUnconstrained_array_definition(this);
		}
	}


}



class Unconstrained_nature_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_unconstrained_nature_definition;
    }

	ARRAY() {
	    return this.getToken(vhdlParser.ARRAY, 0);
	};

	LPAREN() {
	    return this.getToken(vhdlParser.LPAREN, 0);
	};

	index_subtype_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_subtype_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Index_subtype_definitionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vhdlParser.RPAREN, 0);
	};

	OF() {
	    return this.getToken(vhdlParser.OF, 0);
	};

	subnature_indication() {
	    return this.getTypedRuleContext(Subnature_indicationContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterUnconstrained_nature_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitUnconstrained_nature_definition(this);
		}
	}


}



class Use_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_use_clause;
    }

	USE() {
	    return this.getToken(vhdlParser.USE, 0);
	};

	selected_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Selected_nameContext);
	    } else {
	        return this.getTypedRuleContext(Selected_nameContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterUse_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitUse_clause(this);
		}
	}


}



class Variable_assignment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_variable_assignment_statement;
    }

	target() {
	    return this.getTypedRuleContext(TargetContext,0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterVariable_assignment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitVariable_assignment_statement(this);
		}
	}


}



class Variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_variable_declaration;
    }

	VARIABLE() {
	    return this.getToken(vhdlParser.VARIABLE, 0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	COLON() {
	    return this.getToken(vhdlParser.COLON, 0);
	};

	subtype_indication() {
	    return this.getTypedRuleContext(Subtype_indicationContext,0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	SHARED() {
	    return this.getToken(vhdlParser.SHARED, 0);
	};

	VARASGN() {
	    return this.getToken(vhdlParser.VARASGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterVariable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitVariable_declaration(this);
		}
	}


}



class Wait_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_wait_statement;
    }

	WAIT() {
	    return this.getToken(vhdlParser.WAIT, 0);
	};

	SEMI() {
	    return this.getToken(vhdlParser.SEMI, 0);
	};

	label_colon() {
	    return this.getTypedRuleContext(Label_colonContext,0);
	};

	sensitivity_clause() {
	    return this.getTypedRuleContext(Sensitivity_clauseContext,0);
	};

	condition_clause() {
	    return this.getTypedRuleContext(Condition_clauseContext,0);
	};

	timeout_clause() {
	    return this.getTypedRuleContext(Timeout_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterWait_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitWait_statement(this);
		}
	}


}



class WaveformContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_waveform;
    }

	waveform_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Waveform_elementContext);
	    } else {
	        return this.getTypedRuleContext(Waveform_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vhdlParser.COMMA);
	    } else {
	        return this.getToken(vhdlParser.COMMA, i);
	    }
	};


	UNAFFECTED() {
	    return this.getToken(vhdlParser.UNAFFECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterWaveform(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitWaveform(this);
		}
	}


}



class Waveform_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vhdlParser.RULE_waveform_element;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AFTER() {
	    return this.getToken(vhdlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.enterWaveform_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vhdlListener ) {
	        listener.exitWaveform_element(this);
		}
	}


}




vhdlParser.Abstract_literalContext = Abstract_literalContext; 
vhdlParser.Access_type_definitionContext = Access_type_definitionContext; 
vhdlParser.Across_aspectContext = Across_aspectContext; 
vhdlParser.Actual_designatorContext = Actual_designatorContext; 
vhdlParser.Actual_parameter_partContext = Actual_parameter_partContext; 
vhdlParser.Actual_partContext = Actual_partContext; 
vhdlParser.Adding_operatorContext = Adding_operatorContext; 
vhdlParser.AggregateContext = AggregateContext; 
vhdlParser.Alias_declarationContext = Alias_declarationContext; 
vhdlParser.Alias_designatorContext = Alias_designatorContext; 
vhdlParser.Alias_indicationContext = Alias_indicationContext; 
vhdlParser.AllocatorContext = AllocatorContext; 
vhdlParser.Architecture_bodyContext = Architecture_bodyContext; 
vhdlParser.Architecture_declarative_partContext = Architecture_declarative_partContext; 
vhdlParser.Architecture_statementContext = Architecture_statementContext; 
vhdlParser.Architecture_statement_partContext = Architecture_statement_partContext; 
vhdlParser.Array_nature_definitionContext = Array_nature_definitionContext; 
vhdlParser.Array_type_definitionContext = Array_type_definitionContext; 
vhdlParser.AssertionContext = AssertionContext; 
vhdlParser.Assertion_statementContext = Assertion_statementContext; 
vhdlParser.Association_elementContext = Association_elementContext; 
vhdlParser.Association_listContext = Association_listContext; 
vhdlParser.Attribute_declarationContext = Attribute_declarationContext; 
vhdlParser.Attribute_designatorContext = Attribute_designatorContext; 
vhdlParser.Attribute_specificationContext = Attribute_specificationContext; 
vhdlParser.Base_unit_declarationContext = Base_unit_declarationContext; 
vhdlParser.Binding_indicationContext = Binding_indicationContext; 
vhdlParser.Block_configurationContext = Block_configurationContext; 
vhdlParser.Block_declarative_itemContext = Block_declarative_itemContext; 
vhdlParser.Block_declarative_partContext = Block_declarative_partContext; 
vhdlParser.Block_headerContext = Block_headerContext; 
vhdlParser.Block_specificationContext = Block_specificationContext; 
vhdlParser.Block_statementContext = Block_statementContext; 
vhdlParser.Block_statement_partContext = Block_statement_partContext; 
vhdlParser.Branch_quantity_declarationContext = Branch_quantity_declarationContext; 
vhdlParser.Break_elementContext = Break_elementContext; 
vhdlParser.Break_listContext = Break_listContext; 
vhdlParser.Break_selector_clauseContext = Break_selector_clauseContext; 
vhdlParser.Break_statementContext = Break_statementContext; 
vhdlParser.Case_statementContext = Case_statementContext; 
vhdlParser.Case_statement_alternativeContext = Case_statement_alternativeContext; 
vhdlParser.ChoiceContext = ChoiceContext; 
vhdlParser.ChoicesContext = ChoicesContext; 
vhdlParser.Component_configurationContext = Component_configurationContext; 
vhdlParser.Component_declarationContext = Component_declarationContext; 
vhdlParser.Component_instantiation_statementContext = Component_instantiation_statementContext; 
vhdlParser.Component_specificationContext = Component_specificationContext; 
vhdlParser.Composite_nature_definitionContext = Composite_nature_definitionContext; 
vhdlParser.Composite_type_definitionContext = Composite_type_definitionContext; 
vhdlParser.Concurrent_assertion_statementContext = Concurrent_assertion_statementContext; 
vhdlParser.Concurrent_break_statementContext = Concurrent_break_statementContext; 
vhdlParser.Concurrent_procedure_call_statementContext = Concurrent_procedure_call_statementContext; 
vhdlParser.Concurrent_signal_assignment_statementContext = Concurrent_signal_assignment_statementContext; 
vhdlParser.ConditionContext = ConditionContext; 
vhdlParser.Condition_clauseContext = Condition_clauseContext; 
vhdlParser.Conditional_signal_assignmentContext = Conditional_signal_assignmentContext; 
vhdlParser.Conditional_waveformsContext = Conditional_waveformsContext; 
vhdlParser.Configuration_declarationContext = Configuration_declarationContext; 
vhdlParser.Configuration_declarative_itemContext = Configuration_declarative_itemContext; 
vhdlParser.Configuration_declarative_partContext = Configuration_declarative_partContext; 
vhdlParser.Configuration_itemContext = Configuration_itemContext; 
vhdlParser.Configuration_specificationContext = Configuration_specificationContext; 
vhdlParser.Constant_declarationContext = Constant_declarationContext; 
vhdlParser.Constrained_array_definitionContext = Constrained_array_definitionContext; 
vhdlParser.Constrained_nature_definitionContext = Constrained_nature_definitionContext; 
vhdlParser.ConstraintContext = ConstraintContext; 
vhdlParser.Context_clauseContext = Context_clauseContext; 
vhdlParser.Context_itemContext = Context_itemContext; 
vhdlParser.Delay_mechanismContext = Delay_mechanismContext; 
vhdlParser.Design_fileContext = Design_fileContext; 
vhdlParser.Design_unitContext = Design_unitContext; 
vhdlParser.DesignatorContext = DesignatorContext; 
vhdlParser.DirectionContext = DirectionContext; 
vhdlParser.Disconnection_specificationContext = Disconnection_specificationContext; 
vhdlParser.Discrete_rangeContext = Discrete_rangeContext; 
vhdlParser.Element_associationContext = Element_associationContext; 
vhdlParser.Element_declarationContext = Element_declarationContext; 
vhdlParser.Element_subnature_definitionContext = Element_subnature_definitionContext; 
vhdlParser.Element_subtype_definitionContext = Element_subtype_definitionContext; 
vhdlParser.Entity_aspectContext = Entity_aspectContext; 
vhdlParser.Entity_classContext = Entity_classContext; 
vhdlParser.Entity_class_entryContext = Entity_class_entryContext; 
vhdlParser.Entity_class_entry_listContext = Entity_class_entry_listContext; 
vhdlParser.Entity_declarationContext = Entity_declarationContext; 
vhdlParser.Entity_declarative_itemContext = Entity_declarative_itemContext; 
vhdlParser.Entity_declarative_partContext = Entity_declarative_partContext; 
vhdlParser.Entity_designatorContext = Entity_designatorContext; 
vhdlParser.Entity_headerContext = Entity_headerContext; 
vhdlParser.Entity_name_listContext = Entity_name_listContext; 
vhdlParser.Entity_specificationContext = Entity_specificationContext; 
vhdlParser.Entity_statementContext = Entity_statementContext; 
vhdlParser.Entity_statement_partContext = Entity_statement_partContext; 
vhdlParser.Entity_tagContext = Entity_tagContext; 
vhdlParser.Enumeration_literalContext = Enumeration_literalContext; 
vhdlParser.Enumeration_type_definitionContext = Enumeration_type_definitionContext; 
vhdlParser.Exit_statementContext = Exit_statementContext; 
vhdlParser.ExpressionContext = ExpressionContext; 
vhdlParser.FactorContext = FactorContext; 
vhdlParser.File_declarationContext = File_declarationContext; 
vhdlParser.File_logical_nameContext = File_logical_nameContext; 
vhdlParser.File_open_informationContext = File_open_informationContext; 
vhdlParser.File_type_definitionContext = File_type_definitionContext; 
vhdlParser.Formal_parameter_listContext = Formal_parameter_listContext; 
vhdlParser.Formal_partContext = Formal_partContext; 
vhdlParser.Free_quantity_declarationContext = Free_quantity_declarationContext; 
vhdlParser.Generate_statementContext = Generate_statementContext; 
vhdlParser.Generation_schemeContext = Generation_schemeContext; 
vhdlParser.Generic_clauseContext = Generic_clauseContext; 
vhdlParser.Generic_listContext = Generic_listContext; 
vhdlParser.Generic_map_aspectContext = Generic_map_aspectContext; 
vhdlParser.Group_constituentContext = Group_constituentContext; 
vhdlParser.Group_constituent_listContext = Group_constituent_listContext; 
vhdlParser.Group_declarationContext = Group_declarationContext; 
vhdlParser.Group_template_declarationContext = Group_template_declarationContext; 
vhdlParser.Guarded_signal_specificationContext = Guarded_signal_specificationContext; 
vhdlParser.IdentifierContext = IdentifierContext; 
vhdlParser.Identifier_listContext = Identifier_listContext; 
vhdlParser.If_statementContext = If_statementContext; 
vhdlParser.Index_constraintContext = Index_constraintContext; 
vhdlParser.Index_specificationContext = Index_specificationContext; 
vhdlParser.Index_subtype_definitionContext = Index_subtype_definitionContext; 
vhdlParser.Instantiated_unitContext = Instantiated_unitContext; 
vhdlParser.Instantiation_listContext = Instantiation_listContext; 
vhdlParser.Interface_constant_declarationContext = Interface_constant_declarationContext; 
vhdlParser.Interface_declarationContext = Interface_declarationContext; 
vhdlParser.Interface_elementContext = Interface_elementContext; 
vhdlParser.Interface_file_declarationContext = Interface_file_declarationContext; 
vhdlParser.Interface_signal_listContext = Interface_signal_listContext; 
vhdlParser.Interface_port_listContext = Interface_port_listContext; 
vhdlParser.Interface_listContext = Interface_listContext; 
vhdlParser.Interface_quantity_declarationContext = Interface_quantity_declarationContext; 
vhdlParser.Interface_port_declarationContext = Interface_port_declarationContext; 
vhdlParser.Interface_signal_declarationContext = Interface_signal_declarationContext; 
vhdlParser.Interface_terminal_declarationContext = Interface_terminal_declarationContext; 
vhdlParser.Interface_variable_declarationContext = Interface_variable_declarationContext; 
vhdlParser.Iteration_schemeContext = Iteration_schemeContext; 
vhdlParser.Label_colonContext = Label_colonContext; 
vhdlParser.Library_clauseContext = Library_clauseContext; 
vhdlParser.Library_unitContext = Library_unitContext; 
vhdlParser.LiteralContext = LiteralContext; 
vhdlParser.Logical_nameContext = Logical_nameContext; 
vhdlParser.Logical_name_listContext = Logical_name_listContext; 
vhdlParser.Logical_operatorContext = Logical_operatorContext; 
vhdlParser.Loop_statementContext = Loop_statementContext; 
vhdlParser.Signal_modeContext = Signal_modeContext; 
vhdlParser.Multiplying_operatorContext = Multiplying_operatorContext; 
vhdlParser.NameContext = NameContext; 
vhdlParser.Name_partContext = Name_partContext; 
vhdlParser.Selected_nameContext = Selected_nameContext; 
vhdlParser.Selected_name_partContext = Selected_name_partContext; 
vhdlParser.Function_call_or_indexed_name_partContext = Function_call_or_indexed_name_partContext; 
vhdlParser.Slice_name_partContext = Slice_name_partContext; 
vhdlParser.Attribute_name_partContext = Attribute_name_partContext; 
vhdlParser.Nature_declarationContext = Nature_declarationContext; 
vhdlParser.Nature_definitionContext = Nature_definitionContext; 
vhdlParser.Nature_element_declarationContext = Nature_element_declarationContext; 
vhdlParser.Next_statementContext = Next_statementContext; 
vhdlParser.Numeric_literalContext = Numeric_literalContext; 
vhdlParser.Object_declarationContext = Object_declarationContext; 
vhdlParser.OptsContext = OptsContext; 
vhdlParser.Package_bodyContext = Package_bodyContext; 
vhdlParser.Package_body_declarative_itemContext = Package_body_declarative_itemContext; 
vhdlParser.Package_body_declarative_partContext = Package_body_declarative_partContext; 
vhdlParser.Package_declarationContext = Package_declarationContext; 
vhdlParser.Package_declarative_itemContext = Package_declarative_itemContext; 
vhdlParser.Package_declarative_partContext = Package_declarative_partContext; 
vhdlParser.Parameter_specificationContext = Parameter_specificationContext; 
vhdlParser.Physical_literalContext = Physical_literalContext; 
vhdlParser.Physical_type_definitionContext = Physical_type_definitionContext; 
vhdlParser.Port_clauseContext = Port_clauseContext; 
vhdlParser.Port_listContext = Port_listContext; 
vhdlParser.Port_map_aspectContext = Port_map_aspectContext; 
vhdlParser.PrimaryContext = PrimaryContext; 
vhdlParser.Primary_unitContext = Primary_unitContext; 
vhdlParser.Procedural_declarative_itemContext = Procedural_declarative_itemContext; 
vhdlParser.Procedural_declarative_partContext = Procedural_declarative_partContext; 
vhdlParser.Procedural_statement_partContext = Procedural_statement_partContext; 
vhdlParser.Procedure_callContext = Procedure_callContext; 
vhdlParser.Procedure_call_statementContext = Procedure_call_statementContext; 
vhdlParser.Process_declarative_itemContext = Process_declarative_itemContext; 
vhdlParser.Process_declarative_partContext = Process_declarative_partContext; 
vhdlParser.Process_statementContext = Process_statementContext; 
vhdlParser.Process_statement_partContext = Process_statement_partContext; 
vhdlParser.Qualified_expressionContext = Qualified_expressionContext; 
vhdlParser.Quantity_declarationContext = Quantity_declarationContext; 
vhdlParser.Quantity_listContext = Quantity_listContext; 
vhdlParser.Quantity_specificationContext = Quantity_specificationContext; 
vhdlParser.Range_declContext = Range_declContext; 
vhdlParser.Explicit_rangeContext = Explicit_rangeContext; 
vhdlParser.Range_constraintContext = Range_constraintContext; 
vhdlParser.Record_nature_definitionContext = Record_nature_definitionContext; 
vhdlParser.Record_type_definitionContext = Record_type_definitionContext; 
vhdlParser.RelationContext = RelationContext; 
vhdlParser.Relational_operatorContext = Relational_operatorContext; 
vhdlParser.Report_statementContext = Report_statementContext; 
vhdlParser.Return_statementContext = Return_statementContext; 
vhdlParser.Scalar_nature_definitionContext = Scalar_nature_definitionContext; 
vhdlParser.Scalar_type_definitionContext = Scalar_type_definitionContext; 
vhdlParser.Secondary_unitContext = Secondary_unitContext; 
vhdlParser.Secondary_unit_declarationContext = Secondary_unit_declarationContext; 
vhdlParser.Selected_signal_assignmentContext = Selected_signal_assignmentContext; 
vhdlParser.Selected_waveformsContext = Selected_waveformsContext; 
vhdlParser.Sensitivity_clauseContext = Sensitivity_clauseContext; 
vhdlParser.Sensitivity_listContext = Sensitivity_listContext; 
vhdlParser.Sequence_of_statementsContext = Sequence_of_statementsContext; 
vhdlParser.Sequential_statementContext = Sequential_statementContext; 
vhdlParser.Shift_expressionContext = Shift_expressionContext; 
vhdlParser.Shift_operatorContext = Shift_operatorContext; 
vhdlParser.Signal_assignment_statementContext = Signal_assignment_statementContext; 
vhdlParser.Signal_declarationContext = Signal_declarationContext; 
vhdlParser.Signal_kindContext = Signal_kindContext; 
vhdlParser.Signal_listContext = Signal_listContext; 
vhdlParser.SignatureContext = SignatureContext; 
vhdlParser.Simple_expressionContext = Simple_expressionContext; 
vhdlParser.Simple_simultaneous_statementContext = Simple_simultaneous_statementContext; 
vhdlParser.Simultaneous_alternativeContext = Simultaneous_alternativeContext; 
vhdlParser.Simultaneous_case_statementContext = Simultaneous_case_statementContext; 
vhdlParser.Simultaneous_if_statementContext = Simultaneous_if_statementContext; 
vhdlParser.Simultaneous_procedural_statementContext = Simultaneous_procedural_statementContext; 
vhdlParser.Simultaneous_statementContext = Simultaneous_statementContext; 
vhdlParser.Simultaneous_statement_partContext = Simultaneous_statement_partContext; 
vhdlParser.Source_aspectContext = Source_aspectContext; 
vhdlParser.Source_quantity_declarationContext = Source_quantity_declarationContext; 
vhdlParser.Step_limit_specificationContext = Step_limit_specificationContext; 
vhdlParser.Subnature_declarationContext = Subnature_declarationContext; 
vhdlParser.Subnature_indicationContext = Subnature_indicationContext; 
vhdlParser.Subprogram_bodyContext = Subprogram_bodyContext; 
vhdlParser.Subprogram_declarationContext = Subprogram_declarationContext; 
vhdlParser.Subprogram_declarative_itemContext = Subprogram_declarative_itemContext; 
vhdlParser.Subprogram_declarative_partContext = Subprogram_declarative_partContext; 
vhdlParser.Subprogram_kindContext = Subprogram_kindContext; 
vhdlParser.Subprogram_specificationContext = Subprogram_specificationContext; 
vhdlParser.Procedure_specificationContext = Procedure_specificationContext; 
vhdlParser.Function_specificationContext = Function_specificationContext; 
vhdlParser.Subprogram_statement_partContext = Subprogram_statement_partContext; 
vhdlParser.Subtype_declarationContext = Subtype_declarationContext; 
vhdlParser.Subtype_indicationContext = Subtype_indicationContext; 
vhdlParser.SuffixContext = SuffixContext; 
vhdlParser.TargetContext = TargetContext; 
vhdlParser.TermContext = TermContext; 
vhdlParser.Terminal_aspectContext = Terminal_aspectContext; 
vhdlParser.Terminal_declarationContext = Terminal_declarationContext; 
vhdlParser.Through_aspectContext = Through_aspectContext; 
vhdlParser.Timeout_clauseContext = Timeout_clauseContext; 
vhdlParser.Tolerance_aspectContext = Tolerance_aspectContext; 
vhdlParser.Type_declarationContext = Type_declarationContext; 
vhdlParser.Type_definitionContext = Type_definitionContext; 
vhdlParser.Unconstrained_array_definitionContext = Unconstrained_array_definitionContext; 
vhdlParser.Unconstrained_nature_definitionContext = Unconstrained_nature_definitionContext; 
vhdlParser.Use_clauseContext = Use_clauseContext; 
vhdlParser.Variable_assignment_statementContext = Variable_assignment_statementContext; 
vhdlParser.Variable_declarationContext = Variable_declarationContext; 
vhdlParser.Wait_statementContext = Wait_statementContext; 
vhdlParser.WaveformContext = WaveformContext; 
vhdlParser.Waveform_elementContext = Waveform_elementContext; 
