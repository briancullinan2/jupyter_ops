// Generated from ./mumps/mumps.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,61,478,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
85,7,85,2,86,7,86,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,50,1,50,
1,51,1,51,1,52,1,52,1,53,1,53,5,53,376,8,53,10,53,12,53,379,9,53,1,54,1,
54,1,54,1,54,5,54,385,8,54,10,54,12,54,388,9,54,1,54,1,54,1,55,4,55,393,
8,55,11,55,12,55,394,1,55,1,55,4,55,399,8,55,11,55,12,55,400,3,55,403,8,
55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,
70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,
1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,5,83,461,
8,83,10,83,12,83,464,9,83,1,83,1,83,1,84,1,84,1,85,4,85,471,8,85,11,85,12,
85,472,1,86,1,86,1,86,1,86,0,0,87,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
113,57,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,
137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,0,157,0,159,0,
161,0,163,0,165,0,167,58,169,59,171,60,173,61,1,0,31,2,0,65,90,97,122,3,
0,48,57,65,90,97,122,1,0,34,34,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,
99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,
103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,
107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,
111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,
115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,
119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,2,0,10,10,13,13,
1,0,9,9,459,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
0,0,111,1,0,0,0,0,113,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,
0,173,1,0,0,0,1,175,1,0,0,0,3,181,1,0,0,0,5,187,1,0,0,0,7,190,1,0,0,0,9,
195,1,0,0,0,11,199,1,0,0,0,13,204,1,0,0,0,15,209,1,0,0,0,17,214,1,0,0,0,
19,217,1,0,0,0,21,221,1,0,0,0,23,226,1,0,0,0,25,231,1,0,0,0,27,237,1,0,0,
0,29,241,1,0,0,0,31,246,1,0,0,0,33,251,1,0,0,0,35,256,1,0,0,0,37,260,1,0,
0,0,39,268,1,0,0,0,41,277,1,0,0,0,43,287,1,0,0,0,45,294,1,0,0,0,47,298,1,
0,0,0,49,303,1,0,0,0,51,309,1,0,0,0,53,316,1,0,0,0,55,318,1,0,0,0,57,320,
1,0,0,0,59,322,1,0,0,0,61,324,1,0,0,0,63,326,1,0,0,0,65,328,1,0,0,0,67,330,
1,0,0,0,69,332,1,0,0,0,71,334,1,0,0,0,73,336,1,0,0,0,75,338,1,0,0,0,77,340,
1,0,0,0,79,343,1,0,0,0,81,346,1,0,0,0,83,348,1,0,0,0,85,350,1,0,0,0,87,352,
1,0,0,0,89,354,1,0,0,0,91,356,1,0,0,0,93,358,1,0,0,0,95,360,1,0,0,0,97,362,
1,0,0,0,99,365,1,0,0,0,101,367,1,0,0,0,103,369,1,0,0,0,105,371,1,0,0,0,107,
373,1,0,0,0,109,380,1,0,0,0,111,392,1,0,0,0,113,404,1,0,0,0,115,406,1,0,
0,0,117,408,1,0,0,0,119,410,1,0,0,0,121,412,1,0,0,0,123,414,1,0,0,0,125,
416,1,0,0,0,127,418,1,0,0,0,129,420,1,0,0,0,131,422,1,0,0,0,133,424,1,0,
0,0,135,426,1,0,0,0,137,428,1,0,0,0,139,430,1,0,0,0,141,432,1,0,0,0,143,
434,1,0,0,0,145,436,1,0,0,0,147,438,1,0,0,0,149,440,1,0,0,0,151,442,1,0,
0,0,153,444,1,0,0,0,155,446,1,0,0,0,157,448,1,0,0,0,159,450,1,0,0,0,161,
452,1,0,0,0,163,454,1,0,0,0,165,456,1,0,0,0,167,458,1,0,0,0,169,467,1,0,
0,0,171,470,1,0,0,0,173,474,1,0,0,0,175,176,3,117,58,0,176,177,3,149,74,
0,177,178,3,123,61,0,178,179,3,115,57,0,179,180,3,135,67,0,180,2,1,0,0,0,
181,182,3,119,59,0,182,183,3,137,68,0,183,184,3,143,71,0,184,185,3,151,75,
0,185,186,3,123,61,0,186,4,1,0,0,0,187,188,3,121,60,0,188,189,3,143,71,0,
189,6,1,0,0,0,190,191,3,123,61,0,191,192,3,137,68,0,192,193,3,151,75,0,193,
194,3,123,61,0,194,8,1,0,0,0,195,196,3,125,62,0,196,197,3,143,71,0,197,198,
3,149,74,0,198,10,1,0,0,0,199,200,3,127,63,0,200,201,3,143,71,0,201,202,
3,153,76,0,202,203,3,143,71,0,203,12,1,0,0,0,204,205,3,129,64,0,205,206,
3,115,57,0,206,207,3,137,68,0,207,208,3,153,76,0,208,14,1,0,0,0,209,210,
3,129,64,0,210,211,3,115,57,0,211,212,3,141,70,0,212,213,3,127,63,0,213,
16,1,0,0,0,214,215,3,131,65,0,215,216,3,125,62,0,216,18,1,0,0,0,217,218,
3,133,66,0,218,219,3,143,71,0,219,220,3,117,58,0,220,20,1,0,0,0,221,222,
3,135,67,0,222,223,3,131,65,0,223,224,3,137,68,0,224,225,3,137,68,0,225,
22,1,0,0,0,226,227,3,137,68,0,227,228,3,143,71,0,228,229,3,119,59,0,229,
230,3,135,67,0,230,24,1,0,0,0,231,232,3,139,69,0,232,233,3,123,61,0,233,
234,3,149,74,0,234,235,3,127,63,0,235,236,3,123,61,0,236,26,1,0,0,0,237,
238,3,141,70,0,238,239,3,123,61,0,239,240,3,159,79,0,240,28,1,0,0,0,241,
242,3,143,71,0,242,243,3,145,72,0,243,244,3,123,61,0,244,245,3,141,70,0,
245,30,1,0,0,0,246,247,3,147,73,0,247,248,3,155,77,0,248,249,3,131,65,0,
249,250,3,153,76,0,250,32,1,0,0,0,251,252,3,149,74,0,252,253,3,123,61,0,
253,254,3,115,57,0,254,255,3,121,60,0,255,34,1,0,0,0,256,257,3,151,75,0,
257,258,3,123,61,0,258,259,3,153,76,0,259,36,1,0,0,0,260,261,3,153,76,0,
261,262,3,119,59,0,262,263,3,143,71,0,263,264,3,139,69,0,264,265,3,139,69,
0,265,266,3,131,65,0,266,267,3,153,76,0,267,38,1,0,0,0,268,269,3,153,76,
0,269,270,3,149,74,0,270,271,3,123,61,0,271,272,3,151,75,0,272,273,3,153,
76,0,273,274,3,115,57,0,274,275,3,149,74,0,275,276,3,153,76,0,276,40,1,0,
0,0,277,278,3,153,76,0,278,279,3,149,74,0,279,280,3,143,71,0,280,281,3,137,
68,0,281,282,3,137,68,0,282,283,3,117,58,0,283,284,3,115,57,0,284,285,3,
119,59,0,285,286,3,135,67,0,286,42,1,0,0,0,287,288,3,153,76,0,288,289,3,
151,75,0,289,290,3,153,76,0,290,291,3,115,57,0,291,292,3,149,74,0,292,293,
3,153,76,0,293,44,1,0,0,0,294,295,3,155,77,0,295,296,3,151,75,0,296,297,
3,123,61,0,297,46,1,0,0,0,298,299,3,157,78,0,299,300,3,131,65,0,300,301,
3,123,61,0,301,302,3,159,79,0,302,48,1,0,0,0,303,304,3,159,79,0,304,305,
3,149,74,0,305,306,3,131,65,0,306,307,3,153,76,0,307,308,3,123,61,0,308,
50,1,0,0,0,309,310,3,161,80,0,310,311,3,123,61,0,311,312,3,119,59,0,312,
313,3,155,77,0,313,314,3,153,76,0,314,315,3,123,61,0,315,52,1,0,0,0,316,
317,5,58,0,0,317,54,1,0,0,0,318,319,5,44,0,0,319,56,1,0,0,0,320,321,5,36,
0,0,321,58,1,0,0,0,322,323,5,37,0,0,323,60,1,0,0,0,324,325,5,38,0,0,325,
62,1,0,0,0,326,327,5,64,0,0,327,64,1,0,0,0,328,329,5,94,0,0,329,66,1,0,0,
0,330,331,5,33,0,0,331,68,1,0,0,0,332,333,5,40,0,0,333,70,1,0,0,0,334,335,
5,41,0,0,335,72,1,0,0,0,336,337,5,123,0,0,337,74,1,0,0,0,338,339,5,125,0,
0,339,76,1,0,0,0,340,341,5,39,0,0,341,342,5,62,0,0,342,78,1,0,0,0,343,344,
5,39,0,0,344,345,5,60,0,0,345,80,1,0,0,0,346,347,5,62,0,0,347,82,1,0,0,0,
348,349,5,60,0,0,349,84,1,0,0,0,350,351,5,43,0,0,351,86,1,0,0,0,352,353,
5,45,0,0,353,88,1,0,0,0,354,355,5,42,0,0,355,90,1,0,0,0,356,357,5,47,0,0,
357,92,1,0,0,0,358,359,5,92,0,0,359,94,1,0,0,0,360,361,5,35,0,0,361,96,1,
0,0,0,362,363,5,42,0,0,363,364,5,42,0,0,364,98,1,0,0,0,365,366,5,61,0,0,
366,100,1,0,0,0,367,368,5,63,0,0,368,102,1,0,0,0,369,370,5,46,0,0,370,104,
1,0,0,0,371,372,5,95,0,0,372,106,1,0,0,0,373,377,7,0,0,0,374,376,7,1,0,0,
375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,108,
1,0,0,0,379,377,1,0,0,0,380,386,5,34,0,0,381,382,5,34,0,0,382,385,5,34,0,
0,383,385,8,2,0,0,384,381,1,0,0,0,384,383,1,0,0,0,385,388,1,0,0,0,386,384,
1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,5,34,0,0,
390,110,1,0,0,0,391,393,2,48,57,0,392,391,1,0,0,0,393,394,1,0,0,0,394,392,
1,0,0,0,394,395,1,0,0,0,395,402,1,0,0,0,396,398,5,46,0,0,397,399,2,48,57,
0,398,397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,
1,0,0,0,402,396,1,0,0,0,402,403,1,0,0,0,403,112,1,0,0,0,404,405,5,39,0,0,
405,114,1,0,0,0,406,407,7,3,0,0,407,116,1,0,0,0,408,409,7,4,0,0,409,118,
1,0,0,0,410,411,7,5,0,0,411,120,1,0,0,0,412,413,7,6,0,0,413,122,1,0,0,0,
414,415,7,7,0,0,415,124,1,0,0,0,416,417,7,8,0,0,417,126,1,0,0,0,418,419,
7,9,0,0,419,128,1,0,0,0,420,421,7,10,0,0,421,130,1,0,0,0,422,423,7,11,0,
0,423,132,1,0,0,0,424,425,7,12,0,0,425,134,1,0,0,0,426,427,7,13,0,0,427,
136,1,0,0,0,428,429,7,14,0,0,429,138,1,0,0,0,430,431,7,15,0,0,431,140,1,
0,0,0,432,433,7,16,0,0,433,142,1,0,0,0,434,435,7,17,0,0,435,144,1,0,0,0,
436,437,7,18,0,0,437,146,1,0,0,0,438,439,7,19,0,0,439,148,1,0,0,0,440,441,
7,20,0,0,441,150,1,0,0,0,442,443,7,21,0,0,443,152,1,0,0,0,444,445,7,22,0,
0,445,154,1,0,0,0,446,447,7,23,0,0,447,156,1,0,0,0,448,449,7,24,0,0,449,
158,1,0,0,0,450,451,7,25,0,0,451,160,1,0,0,0,452,453,7,26,0,0,453,162,1,
0,0,0,454,455,7,27,0,0,455,164,1,0,0,0,456,457,7,28,0,0,457,166,1,0,0,0,
458,462,5,59,0,0,459,461,8,29,0,0,460,459,1,0,0,0,461,464,1,0,0,0,462,460,
1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,462,1,0,0,0,465,466,6,83,0,0,
466,168,1,0,0,0,467,468,5,32,0,0,468,170,1,0,0,0,469,471,7,29,0,0,470,469,
1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,172,1,0,0,0,
474,475,7,30,0,0,475,476,1,0,0,0,476,477,6,86,0,0,477,174,1,0,0,0,9,0,377,
384,386,394,400,402,462,472,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class mumpsLexer extends antlr4.Lexer {

    static grammarFileName = "mumps.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, null, "':'", "','", "'$'", "'%'", "'&'", 
                         "'@'", "'^'", "'!'", "'('", "')'", "'{'", "'}'", 
                         "''>'", "''<'", "'>'", "'<'", "'+'", "'-'", "'*'", 
                         "'/'", "'\\'", "'#'", "'**'", "'='", "'?'", "'.'", 
                         "'_'", null, null, null, "'''", null, "' '" ];
	static symbolicNames = [ null, "BREAK", "CLOSE", "DO", "ELSE", "FOR", "GOTO", 
                          "HALT", "HANG", "IF", "JOB", "KILL", "LOCK", "MERGE", 
                          "NEW", "OPEN", "QUIT", "READ", "SET", "TCOMMIT", 
                          "TRESTART", "TROLLBACK", "TSTART", "USE", "VIEW", 
                          "WRITE", "XECUTE", "COLON", "COMMA", "DOLLAR", 
                          "PERCENT", "AMPERSAND", "INDIRECT", "CARAT", "BANG", 
                          "LPAREN", "RPAREN", "LBRACE", "RBRACE", "NGT", 
                          "NLT", "GT", "LT", "ADD", "SUBTRACT", "MULTIPLY", 
                          "DIVIDE", "INTDIVIDE", "MODULO", "EXPONENT", "EQUALS", 
                          "QUESTION", "DOT", "CONCAT", "IDENTIFIER", "STRING_LITERAL", 
                          "NUMBER", "NOT", "COMMENT", "SPACE", "CR", "WS" ];
	static ruleNames = [ "BREAK", "CLOSE", "DO", "ELSE", "FOR", "GOTO", "HALT", 
                      "HANG", "IF", "JOB", "KILL", "LOCK", "MERGE", "NEW", 
                      "OPEN", "QUIT", "READ", "SET", "TCOMMIT", "TRESTART", 
                      "TROLLBACK", "TSTART", "USE", "VIEW", "WRITE", "XECUTE", 
                      "COLON", "COMMA", "DOLLAR", "PERCENT", "AMPERSAND", 
                      "INDIRECT", "CARAT", "BANG", "LPAREN", "RPAREN", "LBRACE", 
                      "RBRACE", "NGT", "NLT", "GT", "LT", "ADD", "SUBTRACT", 
                      "MULTIPLY", "DIVIDE", "INTDIVIDE", "MODULO", "EXPONENT", 
                      "EQUALS", "QUESTION", "DOT", "CONCAT", "IDENTIFIER", 
                      "STRING_LITERAL", "NUMBER", "NOT", "A", "B", "C", 
                      "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
                      "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", 
                      "X", "Y", "Z", "COMMENT", "SPACE", "CR", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

mumpsLexer.EOF = antlr4.Token.EOF;
mumpsLexer.BREAK = 1;
mumpsLexer.CLOSE = 2;
mumpsLexer.DO = 3;
mumpsLexer.ELSE = 4;
mumpsLexer.FOR = 5;
mumpsLexer.GOTO = 6;
mumpsLexer.HALT = 7;
mumpsLexer.HANG = 8;
mumpsLexer.IF = 9;
mumpsLexer.JOB = 10;
mumpsLexer.KILL = 11;
mumpsLexer.LOCK = 12;
mumpsLexer.MERGE = 13;
mumpsLexer.NEW = 14;
mumpsLexer.OPEN = 15;
mumpsLexer.QUIT = 16;
mumpsLexer.READ = 17;
mumpsLexer.SET = 18;
mumpsLexer.TCOMMIT = 19;
mumpsLexer.TRESTART = 20;
mumpsLexer.TROLLBACK = 21;
mumpsLexer.TSTART = 22;
mumpsLexer.USE = 23;
mumpsLexer.VIEW = 24;
mumpsLexer.WRITE = 25;
mumpsLexer.XECUTE = 26;
mumpsLexer.COLON = 27;
mumpsLexer.COMMA = 28;
mumpsLexer.DOLLAR = 29;
mumpsLexer.PERCENT = 30;
mumpsLexer.AMPERSAND = 31;
mumpsLexer.INDIRECT = 32;
mumpsLexer.CARAT = 33;
mumpsLexer.BANG = 34;
mumpsLexer.LPAREN = 35;
mumpsLexer.RPAREN = 36;
mumpsLexer.LBRACE = 37;
mumpsLexer.RBRACE = 38;
mumpsLexer.NGT = 39;
mumpsLexer.NLT = 40;
mumpsLexer.GT = 41;
mumpsLexer.LT = 42;
mumpsLexer.ADD = 43;
mumpsLexer.SUBTRACT = 44;
mumpsLexer.MULTIPLY = 45;
mumpsLexer.DIVIDE = 46;
mumpsLexer.INTDIVIDE = 47;
mumpsLexer.MODULO = 48;
mumpsLexer.EXPONENT = 49;
mumpsLexer.EQUALS = 50;
mumpsLexer.QUESTION = 51;
mumpsLexer.DOT = 52;
mumpsLexer.CONCAT = 53;
mumpsLexer.IDENTIFIER = 54;
mumpsLexer.STRING_LITERAL = 55;
mumpsLexer.NUMBER = 56;
mumpsLexer.NOT = 57;
mumpsLexer.COMMENT = 58;
mumpsLexer.SPACE = 59;
mumpsLexer.CR = 60;
mumpsLexer.WS = 61;



