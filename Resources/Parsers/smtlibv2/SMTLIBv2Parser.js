// Generated from ./smtlibv2/SMTLIBv2.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SMTLIBv2Listener from './SMTLIBv2Listener.js';
const serializedATN = [4,1,114,1101,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,
0,203,8,0,1,1,1,1,1,2,1,2,3,2,209,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,3,
6,219,8,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,3,12,
234,8,12,1,13,1,13,1,13,1,13,1,13,3,13,241,8,13,1,14,1,14,1,14,1,14,1,14,
5,14,248,8,14,10,14,12,14,251,9,14,1,14,3,14,254,8,14,1,15,1,15,3,15,258,
8,15,1,16,1,16,1,16,1,16,1,16,4,16,265,8,16,11,16,12,16,266,1,16,1,16,3,
16,271,8,16,1,17,1,17,1,17,1,17,5,17,277,8,17,10,17,12,17,280,9,17,1,17,
3,17,283,8,17,1,18,1,18,1,18,1,18,3,18,289,8,18,1,19,1,19,1,19,1,19,4,19,
295,8,19,11,19,12,19,296,1,19,1,19,3,19,301,8,19,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,3,20,310,8,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
1,23,1,23,1,23,1,23,4,23,326,8,23,11,23,12,23,327,1,23,1,23,3,23,332,8,23,
1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,4,25,344,8,25,11,25,12,
25,345,1,25,1,25,1,25,1,25,1,25,1,25,4,25,354,8,25,11,25,12,25,355,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,366,8,25,11,25,12,25,367,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,378,8,25,11,25,12,25,379,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,391,8,25,11,25,12,25,392,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,4,25,402,8,25,11,25,12,25,403,1,25,1,25,3,25,
408,8,25,1,26,1,26,1,26,1,26,5,26,414,8,26,10,26,12,26,417,9,26,1,26,1,26,
1,27,1,27,1,28,1,28,1,28,1,28,5,28,427,8,28,10,28,12,28,430,9,28,1,28,1,
28,1,28,1,28,1,28,1,28,5,28,438,8,28,10,28,12,28,441,9,28,1,28,1,28,1,28,
1,28,1,28,4,28,448,8,28,11,28,12,28,449,1,28,5,28,453,8,28,10,28,12,28,456,
9,28,1,28,1,28,3,28,460,8,28,1,29,1,29,1,29,1,29,1,29,4,29,467,8,29,11,29,
12,29,468,1,29,1,29,1,29,1,29,4,29,475,8,29,11,29,12,29,476,1,29,5,29,480,
8,29,10,29,12,29,483,9,29,1,29,1,29,1,29,3,29,488,8,29,1,30,1,30,1,30,4,
30,493,8,30,11,30,12,30,494,1,30,1,30,1,30,1,30,1,30,4,30,502,8,30,11,30,
12,30,503,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
30,3,30,519,8,30,1,31,1,31,1,31,1,31,4,31,525,8,31,11,31,12,31,526,1,31,
1,31,1,32,1,32,1,32,4,32,534,8,32,11,32,12,32,535,1,32,1,32,1,32,1,32,1,
32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,549,8,32,1,33,1,33,1,33,1,33,4,33,
555,8,33,11,33,12,33,556,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
35,1,35,1,35,1,36,1,36,1,36,5,36,574,8,36,10,36,12,36,577,9,36,1,36,1,36,
1,37,1,37,4,37,583,8,37,11,37,12,37,584,1,37,1,37,1,37,1,37,1,37,1,37,4,
37,593,8,37,11,37,12,37,594,1,37,1,37,1,37,4,37,600,8,37,11,37,12,37,601,
1,37,1,37,1,37,3,37,607,8,37,1,38,1,38,1,38,1,38,5,38,613,8,38,10,38,12,
38,616,9,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,625,8,39,10,39,12,39,
628,9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,640,8,40,
1,41,5,41,643,8,41,10,41,12,41,646,9,41,1,42,1,42,1,42,1,43,1,43,1,44,1,
44,1,44,5,44,656,8,44,10,44,12,44,659,9,44,1,44,1,44,1,45,1,45,1,45,1,45,
1,46,1,46,1,46,1,46,1,47,1,47,1,47,4,47,674,8,47,11,47,12,47,675,1,47,1,
47,1,47,4,47,681,8,47,11,47,12,47,682,1,47,1,47,1,48,1,48,1,48,1,48,5,48,
691,8,48,10,48,12,48,694,9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,
50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,4,52,712,8,52,11,52,12,52,713,1,52,
1,52,1,52,4,52,719,8,52,11,52,12,52,720,1,52,1,52,1,53,1,53,1,53,1,53,5,
53,729,8,53,10,53,12,53,732,9,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,
1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,
62,1,62,1,63,1,63,1,64,1,64,1,64,4,64,763,8,64,11,64,12,64,764,1,64,1,64,
1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,1,
70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,908,8,72,1,73,1,73,1,74,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
941,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,951,8,75,1,76,1,76,
1,77,1,77,1,77,3,77,958,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,3,78,972,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,3,79,987,8,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,
1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,5,84,1005,8,84,10,84,12,84,1008,
9,84,1,84,1,84,1,85,1,85,5,85,1014,8,85,10,85,12,85,1017,9,85,1,85,1,85,
1,86,1,86,4,86,1023,8,86,11,86,12,86,1024,1,86,1,86,1,87,1,87,1,87,5,87,
1032,8,87,10,87,12,87,1035,9,87,1,87,1,87,1,87,5,87,1040,8,87,10,87,12,87,
1043,9,87,1,87,3,87,1046,8,87,1,88,1,88,1,89,1,89,1,90,1,90,5,90,1054,8,
90,10,90,12,90,1057,9,90,1,90,1,90,1,91,1,91,5,91,1063,8,91,10,91,12,91,
1066,9,91,1,91,1,91,1,92,1,92,4,92,1072,8,92,11,92,12,92,1073,1,92,1,92,
1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1089,8,93,1,
94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1099,8,94,1,94,0,0,95,0,2,4,6,
8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,0,7,2,0,53,65,112,112,1,0,7,22,1,0,71,111,3,0,57,
57,63,63,65,65,2,0,11,11,19,19,2,0,9,9,12,12,3,0,16,16,20,20,22,22,1171,
0,202,1,0,0,0,2,204,1,0,0,0,4,208,1,0,0,0,6,210,1,0,0,0,8,212,1,0,0,0,10,
214,1,0,0,0,12,218,1,0,0,0,14,220,1,0,0,0,16,222,1,0,0,0,18,224,1,0,0,0,
20,226,1,0,0,0,22,228,1,0,0,0,24,233,1,0,0,0,26,240,1,0,0,0,28,253,1,0,0,
0,30,257,1,0,0,0,32,270,1,0,0,0,34,282,1,0,0,0,36,288,1,0,0,0,38,300,1,0,
0,0,40,309,1,0,0,0,42,311,1,0,0,0,44,316,1,0,0,0,46,331,1,0,0,0,48,333,1,
0,0,0,50,407,1,0,0,0,52,409,1,0,0,0,54,420,1,0,0,0,56,459,1,0,0,0,58,487,
1,0,0,0,60,518,1,0,0,0,62,520,1,0,0,0,64,548,1,0,0,0,66,550,1,0,0,0,68,560,
1,0,0,0,70,565,1,0,0,0,72,570,1,0,0,0,74,606,1,0,0,0,76,608,1,0,0,0,78,621,
1,0,0,0,80,639,1,0,0,0,82,644,1,0,0,0,84,647,1,0,0,0,86,650,1,0,0,0,88,652,
1,0,0,0,90,662,1,0,0,0,92,666,1,0,0,0,94,670,1,0,0,0,96,686,1,0,0,0,98,698,
1,0,0,0,100,702,1,0,0,0,102,705,1,0,0,0,104,708,1,0,0,0,106,724,1,0,0,0,
108,736,1,0,0,0,110,739,1,0,0,0,112,741,1,0,0,0,114,743,1,0,0,0,116,745,
1,0,0,0,118,748,1,0,0,0,120,750,1,0,0,0,122,753,1,0,0,0,124,755,1,0,0,0,
126,757,1,0,0,0,128,759,1,0,0,0,130,768,1,0,0,0,132,771,1,0,0,0,134,774,
1,0,0,0,136,776,1,0,0,0,138,778,1,0,0,0,140,781,1,0,0,0,142,784,1,0,0,0,
144,907,1,0,0,0,146,909,1,0,0,0,148,940,1,0,0,0,150,950,1,0,0,0,152,952,
1,0,0,0,154,957,1,0,0,0,156,971,1,0,0,0,158,986,1,0,0,0,160,988,1,0,0,0,
162,993,1,0,0,0,164,998,1,0,0,0,166,1000,1,0,0,0,168,1002,1,0,0,0,170,1011,
1,0,0,0,172,1020,1,0,0,0,174,1045,1,0,0,0,176,1047,1,0,0,0,178,1049,1,0,
0,0,180,1051,1,0,0,0,182,1060,1,0,0,0,184,1069,1,0,0,0,186,1088,1,0,0,0,
188,1098,1,0,0,0,190,191,3,66,33,0,191,192,5,0,0,1,192,203,1,0,0,0,193,194,
3,62,31,0,194,195,5,0,0,1,195,203,1,0,0,0,196,197,3,82,41,0,197,198,5,0,
0,1,198,203,1,0,0,0,199,200,3,188,94,0,200,201,5,0,0,1,201,203,1,0,0,0,202,
190,1,0,0,0,202,193,1,0,0,0,202,196,1,0,0,0,202,199,1,0,0,0,203,1,1,0,0,
0,204,205,7,0,0,0,205,3,1,0,0,0,206,209,3,8,4,0,207,209,5,113,0,0,208,206,
1,0,0,0,208,207,1,0,0,0,209,5,1,0,0,0,210,211,5,6,0,0,211,7,1,0,0,0,212,
213,7,1,0,0,213,9,1,0,0,0,214,215,7,2,0,0,215,11,1,0,0,0,216,219,3,4,2,0,
217,219,3,6,3,0,218,216,1,0,0,0,218,217,1,0,0,0,219,13,1,0,0,0,220,221,5,
66,0,0,221,15,1,0,0,0,222,223,5,69,0,0,223,17,1,0,0,0,224,225,5,68,0,0,225,
19,1,0,0,0,226,227,5,67,0,0,227,21,1,0,0,0,228,229,5,5,0,0,229,23,1,0,0,
0,230,234,3,10,5,0,231,232,5,70,0,0,232,234,3,4,2,0,233,230,1,0,0,0,233,
231,1,0,0,0,234,25,1,0,0,0,235,241,3,14,7,0,236,241,3,16,8,0,237,241,3,18,
9,0,238,241,3,20,10,0,239,241,3,22,11,0,240,235,1,0,0,0,240,236,1,0,0,0,
240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,27,1,0,0,0,242,254,3,
26,13,0,243,254,3,12,6,0,244,254,3,24,12,0,245,249,5,2,0,0,246,248,3,28,
14,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,
252,1,0,0,0,251,249,1,0,0,0,252,254,5,3,0,0,253,242,1,0,0,0,253,243,1,0,
0,0,253,244,1,0,0,0,253,245,1,0,0,0,254,29,1,0,0,0,255,258,3,14,7,0,256,
258,3,12,6,0,257,255,1,0,0,0,257,256,1,0,0,0,258,31,1,0,0,0,259,271,3,12,
6,0,260,261,5,2,0,0,261,262,5,54,0,0,262,264,3,12,6,0,263,265,3,30,15,0,
264,263,1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,268,
1,0,0,0,268,269,5,3,0,0,269,271,1,0,0,0,270,259,1,0,0,0,270,260,1,0,0,0,
271,33,1,0,0,0,272,283,3,26,13,0,273,283,3,12,6,0,274,278,5,2,0,0,275,277,
3,28,14,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
0,279,281,1,0,0,0,280,278,1,0,0,0,281,283,5,3,0,0,282,272,1,0,0,0,282,273,
1,0,0,0,282,274,1,0,0,0,283,35,1,0,0,0,284,289,3,24,12,0,285,286,3,24,12,
0,286,287,3,34,17,0,287,289,1,0,0,0,288,284,1,0,0,0,288,285,1,0,0,0,289,
37,1,0,0,0,290,301,3,32,16,0,291,292,5,2,0,0,292,294,3,32,16,0,293,295,3,
38,19,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,
297,298,1,0,0,0,298,299,5,3,0,0,299,301,1,0,0,0,300,290,1,0,0,0,300,291,
1,0,0,0,301,39,1,0,0,0,302,310,3,32,16,0,303,304,5,2,0,0,304,305,5,55,0,
0,305,306,3,32,16,0,306,307,3,38,19,0,307,308,5,3,0,0,308,310,1,0,0,0,309,
302,1,0,0,0,309,303,1,0,0,0,310,41,1,0,0,0,311,312,5,2,0,0,312,313,3,12,
6,0,313,314,3,50,25,0,314,315,5,3,0,0,315,43,1,0,0,0,316,317,5,2,0,0,317,
318,3,12,6,0,318,319,3,38,19,0,319,320,5,3,0,0,320,45,1,0,0,0,321,332,3,
12,6,0,322,323,5,2,0,0,323,325,3,12,6,0,324,326,3,12,6,0,325,324,1,0,0,0,
326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,
5,3,0,0,330,332,1,0,0,0,331,321,1,0,0,0,331,322,1,0,0,0,332,47,1,0,0,0,333,
334,5,2,0,0,334,335,3,46,23,0,335,336,3,50,25,0,336,337,5,3,0,0,337,49,1,
0,0,0,338,408,3,26,13,0,339,408,3,40,20,0,340,341,5,2,0,0,341,343,3,40,20,
0,342,344,3,50,25,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,
346,1,0,0,0,346,347,1,0,0,0,347,348,5,3,0,0,348,408,1,0,0,0,349,350,5,2,
0,0,350,351,5,61,0,0,351,353,5,2,0,0,352,354,3,42,21,0,353,352,1,0,0,0,354,
355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,3,
0,0,358,359,3,50,25,0,359,360,5,3,0,0,360,408,1,0,0,0,361,362,5,2,0,0,362,
363,5,60,0,0,363,365,5,2,0,0,364,366,3,44,22,0,365,364,1,0,0,0,366,367,1,
0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,3,0,0,370,
371,3,50,25,0,371,372,5,3,0,0,372,408,1,0,0,0,373,374,5,2,0,0,374,375,5,
58,0,0,375,377,5,2,0,0,376,378,3,44,22,0,377,376,1,0,0,0,378,379,1,0,0,0,
379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,3,0,0,382,383,
3,50,25,0,383,384,5,3,0,0,384,408,1,0,0,0,385,386,5,2,0,0,386,387,5,62,0,
0,387,388,3,50,25,0,388,390,5,2,0,0,389,391,3,48,24,0,390,389,1,0,0,0,391,
392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,3,
0,0,395,396,5,3,0,0,396,408,1,0,0,0,397,398,5,2,0,0,398,399,5,53,0,0,399,
401,3,50,25,0,400,402,3,36,18,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,
1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,3,0,0,406,408,1,0,0,0,
407,338,1,0,0,0,407,339,1,0,0,0,407,340,1,0,0,0,407,349,1,0,0,0,407,361,
1,0,0,0,407,373,1,0,0,0,407,385,1,0,0,0,407,397,1,0,0,0,408,51,1,0,0,0,409,
410,5,2,0,0,410,411,3,32,16,0,411,415,3,14,7,0,412,414,3,36,18,0,413,412,
1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,
417,415,1,0,0,0,418,419,5,3,0,0,419,53,1,0,0,0,420,421,7,3,0,0,421,55,1,
0,0,0,422,423,5,2,0,0,423,424,3,26,13,0,424,428,3,38,19,0,425,427,3,36,18,
0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,
1,0,0,0,430,428,1,0,0,0,431,432,5,3,0,0,432,460,1,0,0,0,433,434,5,2,0,0,
434,435,3,54,27,0,435,439,3,38,19,0,436,438,3,36,18,0,437,436,1,0,0,0,438,
441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,
0,0,442,443,5,3,0,0,443,460,1,0,0,0,444,445,5,2,0,0,445,447,3,32,16,0,446,
448,3,38,19,0,447,446,1,0,0,0,448,449,1,0,0,0,449,447,1,0,0,0,449,450,1,
0,0,0,450,454,1,0,0,0,451,453,3,36,18,0,452,451,1,0,0,0,453,456,1,0,0,0,
454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,458,
5,3,0,0,458,460,1,0,0,0,459,422,1,0,0,0,459,433,1,0,0,0,459,444,1,0,0,0,
460,57,1,0,0,0,461,488,3,56,28,0,462,463,5,2,0,0,463,464,5,64,0,0,464,466,
5,2,0,0,465,467,3,12,6,0,466,465,1,0,0,0,467,468,1,0,0,0,468,466,1,0,0,0,
468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,3,0,0,471,472,5,2,0,0,472,474,
3,32,16,0,473,475,3,38,19,0,474,473,1,0,0,0,475,476,1,0,0,0,476,474,1,0,
0,0,476,477,1,0,0,0,477,481,1,0,0,0,478,480,3,36,18,0,479,478,1,0,0,0,480,
483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,
0,0,484,485,5,3,0,0,485,486,5,3,0,0,486,488,1,0,0,0,487,461,1,0,0,0,487,
462,1,0,0,0,488,59,1,0,0,0,489,490,5,104,0,0,490,492,5,2,0,0,491,493,3,52,
26,0,492,491,1,0,0,0,493,494,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,
496,1,0,0,0,496,497,5,3,0,0,497,519,1,0,0,0,498,499,5,80,0,0,499,501,5,2,
0,0,500,502,3,58,29,0,501,500,1,0,0,0,502,503,1,0,0,0,503,501,1,0,0,0,503,
504,1,0,0,0,504,505,1,0,0,0,505,506,5,3,0,0,506,519,1,0,0,0,507,508,5,105,
0,0,508,519,3,22,11,0,509,510,5,81,0,0,510,519,3,22,11,0,511,512,5,76,0,
0,512,519,3,22,11,0,513,514,5,109,0,0,514,519,3,22,11,0,515,516,5,89,0,0,
516,519,3,22,11,0,517,519,3,36,18,0,518,489,1,0,0,0,518,498,1,0,0,0,518,
507,1,0,0,0,518,509,1,0,0,0,518,511,1,0,0,0,518,513,1,0,0,0,518,515,1,0,
0,0,518,517,1,0,0,0,519,61,1,0,0,0,520,521,5,2,0,0,521,522,5,18,0,0,522,
524,3,12,6,0,523,525,3,60,30,0,524,523,1,0,0,0,525,526,1,0,0,0,526,524,1,
0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,3,0,0,529,63,1,0,0,0,530,
531,5,108,0,0,531,533,5,2,0,0,532,534,3,12,6,0,533,532,1,0,0,0,534,535,1,
0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,5,3,0,0,538,
549,1,0,0,0,539,540,5,84,0,0,540,549,3,22,11,0,541,542,5,79,0,0,542,549,
3,22,11,0,543,544,5,109,0,0,544,549,3,22,11,0,545,546,5,89,0,0,546,549,3,
22,11,0,547,549,3,36,18,0,548,530,1,0,0,0,548,539,1,0,0,0,548,541,1,0,0,
0,548,543,1,0,0,0,548,545,1,0,0,0,548,547,1,0,0,0,549,65,1,0,0,0,550,551,
5,2,0,0,551,552,5,14,0,0,552,554,3,12,6,0,553,555,3,64,32,0,554,553,1,0,
0,0,555,556,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,
559,5,3,0,0,559,67,1,0,0,0,560,561,5,2,0,0,561,562,3,12,6,0,562,563,3,14,
7,0,563,564,5,3,0,0,564,69,1,0,0,0,565,566,5,2,0,0,566,567,3,12,6,0,567,
568,3,38,19,0,568,569,5,3,0,0,569,71,1,0,0,0,570,571,5,2,0,0,571,575,3,12,
6,0,572,574,3,70,35,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,
576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,3,0,0,579,73,1,0,0,
0,580,582,5,2,0,0,581,583,3,72,36,0,582,581,1,0,0,0,583,584,1,0,0,0,584,
582,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,3,0,0,587,607,1,0,
0,0,588,589,5,2,0,0,589,590,5,64,0,0,590,592,5,2,0,0,591,593,3,12,6,0,592,
591,1,0,0,0,593,594,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,596,1,0,
0,0,596,597,5,3,0,0,597,599,5,2,0,0,598,600,3,72,36,0,599,598,1,0,0,0,600,
601,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,5,3,
0,0,604,605,5,3,0,0,605,607,1,0,0,0,606,580,1,0,0,0,606,588,1,0,0,0,607,
75,1,0,0,0,608,609,5,2,0,0,609,610,3,12,6,0,610,614,5,2,0,0,611,613,3,44,
22,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,
617,1,0,0,0,616,614,1,0,0,0,617,618,5,3,0,0,618,619,3,38,19,0,619,620,5,
3,0,0,620,77,1,0,0,0,621,622,3,12,6,0,622,626,5,2,0,0,623,625,3,44,22,0,
624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,
1,0,0,0,628,626,1,0,0,0,629,630,5,3,0,0,630,631,3,38,19,0,631,632,3,50,25,
0,632,79,1,0,0,0,633,640,3,12,6,0,634,635,5,2,0,0,635,636,5,7,0,0,636,637,
3,12,6,0,637,638,5,3,0,0,638,640,1,0,0,0,639,633,1,0,0,0,639,634,1,0,0,0,
640,81,1,0,0,0,641,643,3,144,72,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,
1,0,0,0,644,645,1,0,0,0,645,83,1,0,0,0,646,644,1,0,0,0,647,648,5,23,0,0,
648,649,3,50,25,0,649,85,1,0,0,0,650,651,5,24,0,0,651,87,1,0,0,0,652,653,
5,25,0,0,653,657,5,2,0,0,654,656,3,80,40,0,655,654,1,0,0,0,656,659,1,0,0,
0,657,655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,
5,3,0,0,661,89,1,0,0,0,662,663,5,26,0,0,663,664,3,12,6,0,664,665,3,38,19,
0,665,91,1,0,0,0,666,667,5,27,0,0,667,668,3,12,6,0,668,669,3,74,37,0,669,
93,1,0,0,0,670,671,5,28,0,0,671,673,5,2,0,0,672,674,3,68,34,0,673,672,1,
0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,
678,5,3,0,0,678,680,5,2,0,0,679,681,3,74,37,0,680,679,1,0,0,0,681,682,1,
0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,3,0,0,685,
95,1,0,0,0,686,687,5,29,0,0,687,688,3,12,6,0,688,692,5,2,0,0,689,691,3,38,
19,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,
695,1,0,0,0,694,692,1,0,0,0,695,696,5,3,0,0,696,697,3,38,19,0,697,97,1,0,
0,0,698,699,5,30,0,0,699,700,3,12,6,0,700,701,3,14,7,0,701,99,1,0,0,0,702,
703,5,31,0,0,703,704,3,78,39,0,704,101,1,0,0,0,705,706,5,32,0,0,706,707,
3,78,39,0,707,103,1,0,0,0,708,709,5,33,0,0,709,711,5,2,0,0,710,712,3,76,
38,0,711,710,1,0,0,0,712,713,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,
715,1,0,0,0,715,716,5,3,0,0,716,718,5,2,0,0,717,719,3,50,25,0,718,717,1,
0,0,0,719,720,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,
723,5,3,0,0,723,105,1,0,0,0,724,725,5,34,0,0,725,726,3,12,6,0,726,730,5,
2,0,0,727,729,3,12,6,0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,
731,1,0,0,0,731,733,1,0,0,0,732,730,1,0,0,0,733,734,5,3,0,0,734,735,3,38,
19,0,735,107,1,0,0,0,736,737,5,35,0,0,737,738,3,22,11,0,738,109,1,0,0,0,
739,740,5,36,0,0,740,111,1,0,0,0,741,742,5,37,0,0,742,113,1,0,0,0,743,744,
5,38,0,0,744,115,1,0,0,0,745,746,5,39,0,0,746,747,3,150,75,0,747,117,1,0,
0,0,748,749,5,40,0,0,749,119,1,0,0,0,750,751,5,41,0,0,751,752,3,24,12,0,
752,121,1,0,0,0,753,754,5,42,0,0,754,123,1,0,0,0,755,756,5,43,0,0,756,125,
1,0,0,0,757,758,5,44,0,0,758,127,1,0,0,0,759,760,5,45,0,0,760,762,5,2,0,
0,761,763,3,50,25,0,762,761,1,0,0,0,763,764,1,0,0,0,764,762,1,0,0,0,764,
765,1,0,0,0,765,766,1,0,0,0,766,767,5,3,0,0,767,129,1,0,0,0,768,769,5,46,
0,0,769,770,3,14,7,0,770,131,1,0,0,0,771,772,5,47,0,0,772,773,3,14,7,0,773,
133,1,0,0,0,774,775,5,48,0,0,775,135,1,0,0,0,776,777,5,49,0,0,777,137,1,
0,0,0,778,779,5,50,0,0,779,780,3,36,18,0,780,139,1,0,0,0,781,782,5,51,0,
0,782,783,3,12,6,0,783,141,1,0,0,0,784,785,5,52,0,0,785,786,3,148,74,0,786,
143,1,0,0,0,787,788,5,2,0,0,788,789,3,84,42,0,789,790,5,3,0,0,790,908,1,
0,0,0,791,792,5,2,0,0,792,793,3,86,43,0,793,794,5,3,0,0,794,908,1,0,0,0,
795,796,5,2,0,0,796,797,3,88,44,0,797,798,5,3,0,0,798,908,1,0,0,0,799,800,
5,2,0,0,800,801,3,90,45,0,801,802,5,3,0,0,802,908,1,0,0,0,803,804,5,2,0,
0,804,805,3,92,46,0,805,806,5,3,0,0,806,908,1,0,0,0,807,808,5,2,0,0,808,
809,3,94,47,0,809,810,5,3,0,0,810,908,1,0,0,0,811,812,5,2,0,0,812,813,3,
96,48,0,813,814,5,3,0,0,814,908,1,0,0,0,815,816,5,2,0,0,816,817,3,98,49,
0,817,818,5,3,0,0,818,908,1,0,0,0,819,820,5,2,0,0,820,821,3,100,50,0,821,
822,5,3,0,0,822,908,1,0,0,0,823,824,5,2,0,0,824,825,3,102,51,0,825,826,5,
3,0,0,826,908,1,0,0,0,827,828,5,2,0,0,828,829,3,104,52,0,829,830,5,3,0,0,
830,908,1,0,0,0,831,832,5,2,0,0,832,833,3,106,53,0,833,834,5,3,0,0,834,908,
1,0,0,0,835,836,5,2,0,0,836,837,3,108,54,0,837,838,5,3,0,0,838,908,1,0,0,
0,839,840,5,2,0,0,840,841,3,110,55,0,841,842,5,3,0,0,842,908,1,0,0,0,843,
844,5,2,0,0,844,845,3,112,56,0,845,846,5,3,0,0,846,908,1,0,0,0,847,848,5,
2,0,0,848,849,3,114,57,0,849,850,5,3,0,0,850,908,1,0,0,0,851,852,5,2,0,0,
852,853,3,116,58,0,853,854,5,3,0,0,854,908,1,0,0,0,855,856,5,2,0,0,856,857,
3,118,59,0,857,858,5,3,0,0,858,908,1,0,0,0,859,860,5,2,0,0,860,861,3,120,
60,0,861,862,5,3,0,0,862,908,1,0,0,0,863,864,5,2,0,0,864,865,3,122,61,0,
865,866,5,3,0,0,866,908,1,0,0,0,867,868,5,2,0,0,868,869,3,124,62,0,869,870,
5,3,0,0,870,908,1,0,0,0,871,872,5,2,0,0,872,873,3,126,63,0,873,874,5,3,0,
0,874,908,1,0,0,0,875,876,5,2,0,0,876,877,3,128,64,0,877,878,5,3,0,0,878,
908,1,0,0,0,879,880,5,2,0,0,880,881,3,130,65,0,881,882,5,3,0,0,882,908,1,
0,0,0,883,884,5,2,0,0,884,885,3,132,66,0,885,886,5,3,0,0,886,908,1,0,0,0,
887,888,5,2,0,0,888,889,3,134,67,0,889,890,5,3,0,0,890,908,1,0,0,0,891,892,
5,2,0,0,892,893,3,136,68,0,893,894,5,3,0,0,894,908,1,0,0,0,895,896,5,2,0,
0,896,897,3,138,69,0,897,898,5,3,0,0,898,908,1,0,0,0,899,900,5,2,0,0,900,
901,3,140,70,0,901,902,5,3,0,0,902,908,1,0,0,0,903,904,5,2,0,0,904,905,3,
142,71,0,905,906,5,3,0,0,906,908,1,0,0,0,907,787,1,0,0,0,907,791,1,0,0,0,
907,795,1,0,0,0,907,799,1,0,0,0,907,803,1,0,0,0,907,807,1,0,0,0,907,811,
1,0,0,0,907,815,1,0,0,0,907,819,1,0,0,0,907,823,1,0,0,0,907,827,1,0,0,0,
907,831,1,0,0,0,907,835,1,0,0,0,907,839,1,0,0,0,907,843,1,0,0,0,907,847,
1,0,0,0,907,851,1,0,0,0,907,855,1,0,0,0,907,859,1,0,0,0,907,863,1,0,0,0,
907,867,1,0,0,0,907,871,1,0,0,0,907,875,1,0,0,0,907,879,1,0,0,0,907,883,
1,0,0,0,907,887,1,0,0,0,907,891,1,0,0,0,907,895,1,0,0,0,907,899,1,0,0,0,
907,903,1,0,0,0,908,145,1,0,0,0,909,910,7,4,0,0,910,147,1,0,0,0,911,912,
5,77,0,0,912,941,3,22,11,0,913,914,5,82,0,0,914,941,3,146,73,0,915,916,5,
83,0,0,916,941,3,146,73,0,917,918,5,91,0,0,918,941,3,146,73,0,919,920,5,
92,0,0,920,941,3,146,73,0,921,922,5,93,0,0,922,941,3,146,73,0,923,924,5,
94,0,0,924,941,3,146,73,0,925,926,5,95,0,0,926,941,3,146,73,0,927,928,5,
96,0,0,928,941,3,146,73,0,929,930,5,97,0,0,930,941,3,146,73,0,931,932,5,
98,0,0,932,941,3,14,7,0,933,934,5,100,0,0,934,941,3,22,11,0,935,936,5,101,
0,0,936,941,3,14,7,0,937,938,5,110,0,0,938,941,3,14,7,0,939,941,3,36,18,
0,940,911,1,0,0,0,940,913,1,0,0,0,940,915,1,0,0,0,940,917,1,0,0,0,940,919,
1,0,0,0,940,921,1,0,0,0,940,923,1,0,0,0,940,925,1,0,0,0,940,927,1,0,0,0,
940,929,1,0,0,0,940,931,1,0,0,0,940,933,1,0,0,0,940,935,1,0,0,0,940,937,
1,0,0,0,940,939,1,0,0,0,941,149,1,0,0,0,942,951,5,71,0,0,943,951,5,72,0,
0,944,951,5,73,0,0,945,951,5,78,0,0,946,951,5,88,0,0,947,951,5,99,0,0,948,
951,5,111,0,0,949,951,3,24,12,0,950,942,1,0,0,0,950,943,1,0,0,0,950,944,
1,0,0,0,950,945,1,0,0,0,950,946,1,0,0,0,950,947,1,0,0,0,950,948,1,0,0,0,
950,949,1,0,0,0,951,151,1,0,0,0,952,953,7,5,0,0,953,153,1,0,0,0,954,958,
5,15,0,0,955,958,5,13,0,0,956,958,3,28,14,0,957,954,1,0,0,0,957,955,1,0,
0,0,957,956,1,0,0,0,958,155,1,0,0,0,959,960,5,2,0,0,960,961,3,100,50,0,961,
962,5,3,0,0,962,972,1,0,0,0,963,964,5,2,0,0,964,965,3,102,51,0,965,966,5,
3,0,0,966,972,1,0,0,0,967,968,5,2,0,0,968,969,3,104,52,0,969,970,5,3,0,0,
970,972,1,0,0,0,971,959,1,0,0,0,971,963,1,0,0,0,971,967,1,0,0,0,972,157,
1,0,0,0,973,974,5,72,0,0,974,987,3,14,7,0,975,976,5,73,0,0,976,987,3,22,
11,0,977,978,5,78,0,0,978,987,3,152,76,0,979,980,5,88,0,0,980,987,3,22,11,
0,981,982,5,99,0,0,982,987,3,154,77,0,983,984,5,111,0,0,984,987,3,22,11,
0,985,987,3,36,18,0,986,973,1,0,0,0,986,975,1,0,0,0,986,977,1,0,0,0,986,
979,1,0,0,0,986,981,1,0,0,0,986,983,1,0,0,0,986,985,1,0,0,0,987,159,1,0,
0,0,988,989,5,2,0,0,989,990,3,50,25,0,990,991,3,50,25,0,991,992,5,3,0,0,
992,161,1,0,0,0,993,994,5,2,0,0,994,995,3,12,6,0,995,996,3,146,73,0,996,
997,5,3,0,0,997,163,1,0,0,0,998,999,7,6,0,0,999,165,1,0,0,0,1000,1001,3,
22,11,0,1001,167,1,0,0,0,1002,1006,5,2,0,0,1003,1005,3,50,25,0,1004,1003,
1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1009,
1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,3,0,0,1010,169,1,0,0,0,1011,1015,5,
2,0,0,1012,1014,3,162,81,0,1013,1012,1,0,0,0,1014,1017,1,0,0,0,1015,1013,
1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,1015,1,0,0,0,1018,1019,
5,3,0,0,1019,171,1,0,0,0,1020,1022,5,2,0,0,1021,1023,3,158,79,0,1022,1021,
1,0,0,0,1023,1024,1,0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1026,
1,0,0,0,1026,1027,5,3,0,0,1027,173,1,0,0,0,1028,1029,5,2,0,0,1029,1033,5,
112,0,0,1030,1032,3,156,78,0,1031,1030,1,0,0,0,1032,1035,1,0,0,0,1033,1031,
1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1033,1,0,0,0,1036,1046,
5,3,0,0,1037,1041,5,2,0,0,1038,1040,3,156,78,0,1039,1038,1,0,0,0,1040,1043,
1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,1041,
1,0,0,0,1044,1046,5,3,0,0,1045,1028,1,0,0,0,1045,1037,1,0,0,0,1046,175,1,
0,0,0,1047,1048,3,34,17,0,1048,177,1,0,0,0,1049,1050,3,28,14,0,1050,179,
1,0,0,0,1051,1055,5,2,0,0,1052,1054,3,12,6,0,1053,1052,1,0,0,0,1054,1057,
1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1055,
1,0,0,0,1058,1059,5,3,0,0,1059,181,1,0,0,0,1060,1064,5,2,0,0,1061,1063,3,
12,6,0,1062,1061,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,
0,0,0,1065,1067,1,0,0,0,1066,1064,1,0,0,0,1067,1068,5,3,0,0,1068,183,1,0,
0,0,1069,1071,5,2,0,0,1070,1072,3,160,80,0,1071,1070,1,0,0,0,1072,1073,1,
0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,5,
3,0,0,1076,185,1,0,0,0,1077,1089,3,164,82,0,1078,1089,3,166,83,0,1079,1089,
3,168,84,0,1080,1089,3,170,85,0,1081,1089,3,172,86,0,1082,1089,3,174,87,
0,1083,1089,3,176,88,0,1084,1089,3,178,89,0,1085,1089,3,180,90,0,1086,1089,
3,182,91,0,1087,1089,3,184,92,0,1088,1077,1,0,0,0,1088,1078,1,0,0,0,1088,
1079,1,0,0,0,1088,1080,1,0,0,0,1088,1081,1,0,0,0,1088,1082,1,0,0,0,1088,
1083,1,0,0,0,1088,1084,1,0,0,0,1088,1085,1,0,0,0,1088,1086,1,0,0,0,1088,
1087,1,0,0,0,1089,187,1,0,0,0,1090,1099,5,17,0,0,1091,1099,3,186,93,0,1092,
1099,5,21,0,0,1093,1094,5,2,0,0,1094,1095,5,10,0,0,1095,1096,3,22,11,0,1096,
1097,5,3,0,0,1097,1099,1,0,0,0,1098,1090,1,0,0,0,1098,1091,1,0,0,0,1098,
1092,1,0,0,0,1098,1093,1,0,0,0,1099,189,1,0,0,0,76,202,208,218,233,240,249,
253,257,266,270,278,282,288,296,300,309,327,331,345,355,367,379,392,403,
407,415,428,439,449,454,459,468,476,481,487,494,503,518,526,535,548,556,
575,584,594,601,606,614,626,639,644,657,675,682,692,713,720,730,764,907,
940,950,957,971,986,1006,1015,1024,1033,1041,1045,1055,1064,1073,1088,1098];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SMTLIBv2Parser extends antlr4.Parser {

    static grammarFileName = "SMTLIBv2.g4";
    static literalNames = [ null, null, "'('", "')'", "';'", null, null, 
                            "'not'", "'Bool'", "'continued-execution'", 
                            "'error'", "'false'", "'immediate-exit'", "'incomplete'", 
                            "'logic'", "'memout'", "'sat'", "'success'", 
                            "'theory'", "'true'", "'unknown'", "'unsupported'", 
                            "'unsat'", "'assert'", "'check-sat'", "'check-sat-assuming'", 
                            "'declare-const'", "'declare-datatype'", "'declare-datatypes'", 
                            "'declare-fun'", "'declare-sort'", "'define-fun'", 
                            "'define-fun-rec'", "'define-funs-rec'", "'define-sort'", 
                            "'echo'", "'exit'", "'get-assertions'", "'get-assignment'", 
                            "'get-info'", "'get-model'", "'get-option'", 
                            "'get-proof'", "'get-unsat-assumptions'", "'get-unsat-core'", 
                            "'get-value'", "'pop'", "'push'", "'reset'", 
                            "'reset-assertions'", "'set-info'", "'set-logic'", 
                            "'set-option'", "'!'", "'_'", "'as'", "'BINARY'", 
                            "'DECIMAL'", "'exists'", "'HEXADECIMAL'", "'forall'", 
                            "'let'", "'match'", "'NUMERAL'", "'par'", "'string'", 
                            null, null, null, null, "':'", "':all-statistics'", 
                            "':assertion-stack-levels'", "':authors'", "':category'", 
                            "':chainable'", "':definition'", "':diagnostic-output-channel'", 
                            "':error-behavior'", "':extensions'", "':funs'", 
                            "':funs-description'", "':global-declarations'", 
                            "':interactive-mode'", "':language'", "':left-assoc'", 
                            "':license'", "':named'", "':name'", "':notes'", 
                            "':pattern'", "':print-success'", "':produce-assertions'", 
                            "':produce-assignments'", "':produce-models'", 
                            "':produce-proofs'", "':produce-unsat-assumptions'", 
                            "':produce-unsat-cores'", "':random-seed'", 
                            "':reason-unknown'", "':regular-output-channel'", 
                            "':reproducible-resource-limit'", "':right-assoc'", 
                            "':smt-lib-version'", "':sorts'", "':sorts-description'", 
                            "':source'", "':status'", "':theories'", "':values'", 
                            "':verbosity'", "':version'", "'model'" ];
    static symbolicNames = [ null, "Comment", "ParOpen", "ParClose", "Semicolon", 
                             "String", "QuotedSymbol", "PS_Not", "PS_Bool", 
                             "PS_ContinuedExecution", "PS_Error", "PS_False", 
                             "PS_ImmediateExit", "PS_Incomplete", "PS_Logic", 
                             "PS_Memout", "PS_Sat", "PS_Success", "PS_Theory", 
                             "PS_True", "PS_Unknown", "PS_Unsupported", 
                             "PS_Unsat", "CMD_Assert", "CMD_CheckSat", "CMD_CheckSatAssuming", 
                             "CMD_DeclareConst", "CMD_DeclareDatatype", 
                             "CMD_DeclareDatatypes", "CMD_DeclareFun", "CMD_DeclareSort", 
                             "CMD_DefineFun", "CMD_DefineFunRec", "CMD_DefineFunsRec", 
                             "CMD_DefineSort", "CMD_Echo", "CMD_Exit", "CMD_GetAssertions", 
                             "CMD_GetAssignment", "CMD_GetInfo", "CMD_GetModel", 
                             "CMD_GetOption", "CMD_GetProof", "CMD_GetUnsatAssumptions", 
                             "CMD_GetUnsatCore", "CMD_GetValue", "CMD_Pop", 
                             "CMD_Push", "CMD_Reset", "CMD_ResetAssertions", 
                             "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", 
                             "GRW_Exclamation", "GRW_Underscore", "GRW_As", 
                             "GRW_Binary", "GRW_Decimal", "GRW_Exists", 
                             "GRW_Hexadecimal", "GRW_Forall", "GRW_Let", 
                             "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
                             "Numeral", "Binary", "HexDecimal", "Decimal", 
                             "Colon", "PK_AllStatistics", "PK_AssertionStackLevels", 
                             "PK_Authors", "PK_Category", "PK_Chainable", 
                             "PK_Definition", "PK_DiagnosticOutputChannel", 
                             "PK_ErrorBehaviour", "PK_Extension", "PK_Funs", 
                             "PK_FunsDescription", "PK_GlobalDeclarations", 
                             "PK_InteractiveMode", "PK_Language", "PK_LeftAssoc", 
                             "PK_License", "PK_Named", "PK_Name", "PK_Notes", 
                             "PK_Pattern", "PK_PrintSuccess", "PK_ProduceAssertions", 
                             "PK_ProduceAssignments", "PK_ProduceModels", 
                             "PK_ProduceProofs", "PK_ProduceUnsatAssumptions", 
                             "PK_ProduceUnsatCores", "PK_RandomSeed", "PK_ReasonUnknown", 
                             "PK_RegularOutputChannel", "PK_ReproducibleResourceLimit", 
                             "PK_RightAssoc", "PK_SmtLibVersion", "PK_Sorts", 
                             "PK_SortsDescription", "PK_Source", "PK_Status", 
                             "PK_Theories", "PK_Values", "PK_Verbosity", 
                             "PK_Version", "RS_Model", "UndefinedSymbol", 
                             "WS" ];
    static ruleNames = [ "start", "generalReservedWord", "simpleSymbol", 
                         "quotedSymbol", "predefSymbol", "predefKeyword", 
                         "symbol", "numeral", "decimal", "hexadecimal", 
                         "binary", "string", "keyword", "spec_constant", 
                         "s_expr", "index", "identifier", "attribute_value", 
                         "attribute", "sort", "qual_identifer", "var_binding", 
                         "sorted_var", "pattern", "match_case", "term", 
                         "sort_symbol_decl", "meta_spec_constant", "fun_symbol_decl", 
                         "par_fun_symbol_decl", "theory_attribute", "theory_decl", 
                         "logic_attribue", "logic", "sort_dec", "selector_dec", 
                         "constructor_dec", "datatype_dec", "function_dec", 
                         "function_def", "prop_literal", "script", "cmd_assert", 
                         "cmd_checkSat", "cmd_checkSatAssuming", "cmd_declareConst", 
                         "cmd_declareDatatype", "cmd_declareDatatypes", 
                         "cmd_declareFun", "cmd_declareSort", "cmd_defineFun", 
                         "cmd_defineFunRec", "cmd_defineFunsRec", "cmd_defineSort", 
                         "cmd_echo", "cmd_exit", "cmd_getAssertions", "cmd_getAssignment", 
                         "cmd_getInfo", "cmd_getModel", "cmd_getOption", 
                         "cmd_getProof", "cmd_getUnsatAssumptions", "cmd_getUnsatCore", 
                         "cmd_getValue", "cmd_pop", "cmd_push", "cmd_reset", 
                         "cmd_resetAssertions", "cmd_setInfo", "cmd_setLogic", 
                         "cmd_setOption", "command", "b_value", "option", 
                         "info_flag", "error_behaviour", "reason_unknown", 
                         "model_response", "info_response", "valuation_pair", 
                         "t_valuation_pair", "check_sat_response", "echo_response", 
                         "get_assertions_response", "get_assignment_response", 
                         "get_info_response", "get_model_response", "get_option_response", 
                         "get_proof_response", "get_unsat_assump_response", 
                         "get_unsat_core_response", "get_value_response", 
                         "specific_success_response", "general_response" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SMTLIBv2Parser.ruleNames;
        this.literalNames = SMTLIBv2Parser.literalNames;
        this.symbolicNames = SMTLIBv2Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SMTLIBv2Parser.RULE_start);
	    try {
	        this.state = 202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 190;
	            this.logic();
	            this.state = 191;
	            this.match(SMTLIBv2Parser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 193;
	            this.theory_decl();
	            this.state = 194;
	            this.match(SMTLIBv2Parser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 196;
	            this.script();
	            this.state = 197;
	            this.match(SMTLIBv2Parser.EOF);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 199;
	            this.general_response();
	            this.state = 200;
	            this.match(SMTLIBv2Parser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalReservedWord() {
	    let localctx = new GeneralReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SMTLIBv2Parser.RULE_generalReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (SMTLIBv2Parser.GRW_Exclamation - 53)) | (1 << (SMTLIBv2Parser.GRW_Underscore - 53)) | (1 << (SMTLIBv2Parser.GRW_As - 53)) | (1 << (SMTLIBv2Parser.GRW_Binary - 53)) | (1 << (SMTLIBv2Parser.GRW_Decimal - 53)) | (1 << (SMTLIBv2Parser.GRW_Exists - 53)) | (1 << (SMTLIBv2Parser.GRW_Hexadecimal - 53)) | (1 << (SMTLIBv2Parser.GRW_Forall - 53)) | (1 << (SMTLIBv2Parser.GRW_Let - 53)) | (1 << (SMTLIBv2Parser.GRW_Match - 53)) | (1 << (SMTLIBv2Parser.GRW_Numeral - 53)) | (1 << (SMTLIBv2Parser.GRW_Par - 53)) | (1 << (SMTLIBv2Parser.GRW_String - 53)))) !== 0) || _la===SMTLIBv2Parser.RS_Model)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleSymbol() {
	    let localctx = new SimpleSymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SMTLIBv2Parser.RULE_simpleSymbol);
	    try {
	        this.state = 208;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 206;
	            this.predefSymbol();
	            break;
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 207;
	            this.match(SMTLIBv2Parser.UndefinedSymbol);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotedSymbol() {
	    let localctx = new QuotedSymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SMTLIBv2Parser.RULE_quotedSymbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 210;
	        this.match(SMTLIBv2Parser.QuotedSymbol);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefSymbol() {
	    let localctx = new PredefSymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SMTLIBv2Parser.RULE_predefSymbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 212;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefKeyword() {
	    let localctx = new PredefKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SMTLIBv2Parser.RULE_predefKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 214;
	        _la = this._input.LA(1);
	        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (SMTLIBv2Parser.PK_AllStatistics - 71)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 71)) | (1 << (SMTLIBv2Parser.PK_Authors - 71)) | (1 << (SMTLIBv2Parser.PK_Category - 71)) | (1 << (SMTLIBv2Parser.PK_Chainable - 71)) | (1 << (SMTLIBv2Parser.PK_Definition - 71)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 71)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 71)) | (1 << (SMTLIBv2Parser.PK_Extension - 71)) | (1 << (SMTLIBv2Parser.PK_Funs - 71)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 71)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 71)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 71)) | (1 << (SMTLIBv2Parser.PK_Language - 71)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 71)) | (1 << (SMTLIBv2Parser.PK_License - 71)) | (1 << (SMTLIBv2Parser.PK_Named - 71)) | (1 << (SMTLIBv2Parser.PK_Name - 71)) | (1 << (SMTLIBv2Parser.PK_Notes - 71)) | (1 << (SMTLIBv2Parser.PK_Pattern - 71)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 71)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 71)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 71)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 71)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 71)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 71)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (SMTLIBv2Parser.PK_SmtLibVersion - 103)) | (1 << (SMTLIBv2Parser.PK_Sorts - 103)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 103)) | (1 << (SMTLIBv2Parser.PK_Source - 103)) | (1 << (SMTLIBv2Parser.PK_Status - 103)) | (1 << (SMTLIBv2Parser.PK_Theories - 103)) | (1 << (SMTLIBv2Parser.PK_Values - 103)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 103)) | (1 << (SMTLIBv2Parser.PK_Version - 103)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol() {
	    let localctx = new SymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SMTLIBv2Parser.RULE_symbol);
	    try {
	        this.state = 218;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 216;
	            this.simpleSymbol();
	            break;
	        case SMTLIBv2Parser.QuotedSymbol:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 217;
	            this.quotedSymbol();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeral() {
	    let localctx = new NumeralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SMTLIBv2Parser.RULE_numeral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 220;
	        this.match(SMTLIBv2Parser.Numeral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimal() {
	    let localctx = new DecimalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SMTLIBv2Parser.RULE_decimal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this.match(SMTLIBv2Parser.Decimal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexadecimal() {
	    let localctx = new HexadecimalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SMTLIBv2Parser.RULE_hexadecimal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(SMTLIBv2Parser.HexDecimal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary() {
	    let localctx = new BinaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SMTLIBv2Parser.RULE_binary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 226;
	        this.match(SMTLIBv2Parser.Binary);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SMTLIBv2Parser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228;
	        this.match(SMTLIBv2Parser.String);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SMTLIBv2Parser.RULE_keyword);
	    try {
	        this.state = 233;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.PK_AllStatistics:
	        case SMTLIBv2Parser.PK_AssertionStackLevels:
	        case SMTLIBv2Parser.PK_Authors:
	        case SMTLIBv2Parser.PK_Category:
	        case SMTLIBv2Parser.PK_Chainable:
	        case SMTLIBv2Parser.PK_Definition:
	        case SMTLIBv2Parser.PK_DiagnosticOutputChannel:
	        case SMTLIBv2Parser.PK_ErrorBehaviour:
	        case SMTLIBv2Parser.PK_Extension:
	        case SMTLIBv2Parser.PK_Funs:
	        case SMTLIBv2Parser.PK_FunsDescription:
	        case SMTLIBv2Parser.PK_GlobalDeclarations:
	        case SMTLIBv2Parser.PK_InteractiveMode:
	        case SMTLIBv2Parser.PK_Language:
	        case SMTLIBv2Parser.PK_LeftAssoc:
	        case SMTLIBv2Parser.PK_License:
	        case SMTLIBv2Parser.PK_Named:
	        case SMTLIBv2Parser.PK_Name:
	        case SMTLIBv2Parser.PK_Notes:
	        case SMTLIBv2Parser.PK_Pattern:
	        case SMTLIBv2Parser.PK_PrintSuccess:
	        case SMTLIBv2Parser.PK_ProduceAssertions:
	        case SMTLIBv2Parser.PK_ProduceAssignments:
	        case SMTLIBv2Parser.PK_ProduceModels:
	        case SMTLIBv2Parser.PK_ProduceProofs:
	        case SMTLIBv2Parser.PK_ProduceUnsatAssumptions:
	        case SMTLIBv2Parser.PK_ProduceUnsatCores:
	        case SMTLIBv2Parser.PK_RandomSeed:
	        case SMTLIBv2Parser.PK_ReasonUnknown:
	        case SMTLIBv2Parser.PK_RegularOutputChannel:
	        case SMTLIBv2Parser.PK_ReproducibleResourceLimit:
	        case SMTLIBv2Parser.PK_RightAssoc:
	        case SMTLIBv2Parser.PK_SmtLibVersion:
	        case SMTLIBv2Parser.PK_Sorts:
	        case SMTLIBv2Parser.PK_SortsDescription:
	        case SMTLIBv2Parser.PK_Source:
	        case SMTLIBv2Parser.PK_Status:
	        case SMTLIBv2Parser.PK_Theories:
	        case SMTLIBv2Parser.PK_Values:
	        case SMTLIBv2Parser.PK_Verbosity:
	        case SMTLIBv2Parser.PK_Version:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 230;
	            this.predefKeyword();
	            break;
	        case SMTLIBv2Parser.Colon:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 231;
	            this.match(SMTLIBv2Parser.Colon);
	            this.state = 232;
	            this.simpleSymbol();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spec_constant() {
	    let localctx = new Spec_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SMTLIBv2Parser.RULE_spec_constant);
	    try {
	        this.state = 240;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.Numeral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 235;
	            this.numeral();
	            break;
	        case SMTLIBv2Parser.Decimal:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 236;
	            this.decimal();
	            break;
	        case SMTLIBv2Parser.HexDecimal:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 237;
	            this.hexadecimal();
	            break;
	        case SMTLIBv2Parser.Binary:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 238;
	            this.binary();
	            break;
	        case SMTLIBv2Parser.String:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 239;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s_expr() {
	    let localctx = new S_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SMTLIBv2Parser.RULE_s_expr);
	    var _la = 0; // Token type
	    try {
	        this.state = 253;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.String:
	        case SMTLIBv2Parser.Numeral:
	        case SMTLIBv2Parser.Binary:
	        case SMTLIBv2Parser.HexDecimal:
	        case SMTLIBv2Parser.Decimal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 242;
	            this.spec_constant();
	            break;
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 243;
	            this.symbol();
	            break;
	        case SMTLIBv2Parser.Colon:
	        case SMTLIBv2Parser.PK_AllStatistics:
	        case SMTLIBv2Parser.PK_AssertionStackLevels:
	        case SMTLIBv2Parser.PK_Authors:
	        case SMTLIBv2Parser.PK_Category:
	        case SMTLIBv2Parser.PK_Chainable:
	        case SMTLIBv2Parser.PK_Definition:
	        case SMTLIBv2Parser.PK_DiagnosticOutputChannel:
	        case SMTLIBv2Parser.PK_ErrorBehaviour:
	        case SMTLIBv2Parser.PK_Extension:
	        case SMTLIBv2Parser.PK_Funs:
	        case SMTLIBv2Parser.PK_FunsDescription:
	        case SMTLIBv2Parser.PK_GlobalDeclarations:
	        case SMTLIBv2Parser.PK_InteractiveMode:
	        case SMTLIBv2Parser.PK_Language:
	        case SMTLIBv2Parser.PK_LeftAssoc:
	        case SMTLIBv2Parser.PK_License:
	        case SMTLIBv2Parser.PK_Named:
	        case SMTLIBv2Parser.PK_Name:
	        case SMTLIBv2Parser.PK_Notes:
	        case SMTLIBv2Parser.PK_Pattern:
	        case SMTLIBv2Parser.PK_PrintSuccess:
	        case SMTLIBv2Parser.PK_ProduceAssertions:
	        case SMTLIBv2Parser.PK_ProduceAssignments:
	        case SMTLIBv2Parser.PK_ProduceModels:
	        case SMTLIBv2Parser.PK_ProduceProofs:
	        case SMTLIBv2Parser.PK_ProduceUnsatAssumptions:
	        case SMTLIBv2Parser.PK_ProduceUnsatCores:
	        case SMTLIBv2Parser.PK_RandomSeed:
	        case SMTLIBv2Parser.PK_ReasonUnknown:
	        case SMTLIBv2Parser.PK_RegularOutputChannel:
	        case SMTLIBv2Parser.PK_ReproducibleResourceLimit:
	        case SMTLIBv2Parser.PK_RightAssoc:
	        case SMTLIBv2Parser.PK_SmtLibVersion:
	        case SMTLIBv2Parser.PK_Sorts:
	        case SMTLIBv2Parser.PK_SortsDescription:
	        case SMTLIBv2Parser.PK_Source:
	        case SMTLIBv2Parser.PK_Status:
	        case SMTLIBv2Parser.PK_Theories:
	        case SMTLIBv2Parser.PK_Values:
	        case SMTLIBv2Parser.PK_Verbosity:
	        case SMTLIBv2Parser.PK_Version:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 244;
	            this.keyword();
	            break;
	        case SMTLIBv2Parser.ParOpen:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 245;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 249;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.Colon - 66)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 66)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 66)) | (1 << (SMTLIBv2Parser.PK_Authors - 66)) | (1 << (SMTLIBv2Parser.PK_Category - 66)) | (1 << (SMTLIBv2Parser.PK_Chainable - 66)) | (1 << (SMTLIBv2Parser.PK_Definition - 66)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 66)) | (1 << (SMTLIBv2Parser.PK_Extension - 66)) | (1 << (SMTLIBv2Parser.PK_Funs - 66)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 66)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 66)) | (1 << (SMTLIBv2Parser.PK_Language - 66)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_License - 66)) | (1 << (SMTLIBv2Parser.PK_Named - 66)) | (1 << (SMTLIBv2Parser.PK_Name - 66)) | (1 << (SMTLIBv2Parser.PK_Notes - 66)) | (1 << (SMTLIBv2Parser.PK_Pattern - 66)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SMTLIBv2Parser.PK_RandomSeed - 98)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 98)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 98)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 98)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 98)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 98)) | (1 << (SMTLIBv2Parser.PK_Sorts - 98)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 98)) | (1 << (SMTLIBv2Parser.PK_Source - 98)) | (1 << (SMTLIBv2Parser.PK_Status - 98)) | (1 << (SMTLIBv2Parser.PK_Theories - 98)) | (1 << (SMTLIBv2Parser.PK_Values - 98)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 98)) | (1 << (SMTLIBv2Parser.PK_Version - 98)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 98)))) !== 0)) {
	                this.state = 246;
	                this.s_expr();
	                this.state = 251;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 252;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index() {
	    let localctx = new IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SMTLIBv2Parser.RULE_index);
	    try {
	        this.state = 257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.Numeral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 255;
	            this.numeral();
	            break;
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 256;
	            this.symbol();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SMTLIBv2Parser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 259;
	            this.symbol();
	            break;
	        case SMTLIBv2Parser.ParOpen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 260;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 261;
	            this.match(SMTLIBv2Parser.GRW_Underscore);
	            this.state = 262;
	            this.symbol();
	            this.state = 264; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 263;
	                this.index();
	                this.state = 266; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.Numeral || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 268;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_value() {
	    let localctx = new Attribute_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SMTLIBv2Parser.RULE_attribute_value);
	    var _la = 0; // Token type
	    try {
	        this.state = 282;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.String:
	        case SMTLIBv2Parser.Numeral:
	        case SMTLIBv2Parser.Binary:
	        case SMTLIBv2Parser.HexDecimal:
	        case SMTLIBv2Parser.Decimal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            this.spec_constant();
	            break;
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.symbol();
	            break;
	        case SMTLIBv2Parser.ParOpen:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 274;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.Colon - 66)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 66)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 66)) | (1 << (SMTLIBv2Parser.PK_Authors - 66)) | (1 << (SMTLIBv2Parser.PK_Category - 66)) | (1 << (SMTLIBv2Parser.PK_Chainable - 66)) | (1 << (SMTLIBv2Parser.PK_Definition - 66)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 66)) | (1 << (SMTLIBv2Parser.PK_Extension - 66)) | (1 << (SMTLIBv2Parser.PK_Funs - 66)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 66)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 66)) | (1 << (SMTLIBv2Parser.PK_Language - 66)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_License - 66)) | (1 << (SMTLIBv2Parser.PK_Named - 66)) | (1 << (SMTLIBv2Parser.PK_Name - 66)) | (1 << (SMTLIBv2Parser.PK_Notes - 66)) | (1 << (SMTLIBv2Parser.PK_Pattern - 66)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SMTLIBv2Parser.PK_RandomSeed - 98)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 98)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 98)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 98)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 98)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 98)) | (1 << (SMTLIBv2Parser.PK_Sorts - 98)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 98)) | (1 << (SMTLIBv2Parser.PK_Source - 98)) | (1 << (SMTLIBv2Parser.PK_Status - 98)) | (1 << (SMTLIBv2Parser.PK_Theories - 98)) | (1 << (SMTLIBv2Parser.PK_Values - 98)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 98)) | (1 << (SMTLIBv2Parser.PK_Version - 98)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 98)))) !== 0)) {
	                this.state = 275;
	                this.s_expr();
	                this.state = 280;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 281;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SMTLIBv2Parser.RULE_attribute);
	    try {
	        this.state = 288;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 284;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 285;
	            this.keyword();
	            this.state = 286;
	            this.attribute_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort() {
	    let localctx = new SortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SMTLIBv2Parser.RULE_sort);
	    var _la = 0; // Token type
	    try {
	        this.state = 300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 290;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 291;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 292;
	            this.identifier();
	            this.state = 294; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 293;
	                this.sort();
	                this.state = 296; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 298;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qual_identifer() {
	    let localctx = new Qual_identiferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SMTLIBv2Parser.RULE_qual_identifer);
	    try {
	        this.state = 309;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 302;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 303;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 304;
	            this.match(SMTLIBv2Parser.GRW_As);
	            this.state = 305;
	            this.identifier();
	            this.state = 306;
	            this.sort();
	            this.state = 307;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_binding() {
	    let localctx = new Var_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SMTLIBv2Parser.RULE_var_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 311;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 312;
	        this.symbol();
	        this.state = 313;
	        this.term();
	        this.state = 314;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sorted_var() {
	    let localctx = new Sorted_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SMTLIBv2Parser.RULE_sorted_var);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 317;
	        this.symbol();
	        this.state = 318;
	        this.sort();
	        this.state = 319;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SMTLIBv2Parser.RULE_pattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 331;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 321;
	            this.symbol();
	            break;
	        case SMTLIBv2Parser.ParOpen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 322;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 323;
	            this.symbol();
	            this.state = 325; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 324;
	                this.symbol();
	                this.state = 327; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 329;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_case() {
	    let localctx = new Match_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SMTLIBv2Parser.RULE_match_case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 334;
	        this.pattern();
	        this.state = 335;
	        this.term();
	        this.state = 336;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SMTLIBv2Parser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.state = 407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 338;
	            this.spec_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 339;
	            this.qual_identifer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 340;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 341;
	            this.qual_identifer();
	            this.state = 343; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 342;
	                this.term();
	                this.state = 345; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 347;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 349;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 350;
	            this.match(SMTLIBv2Parser.GRW_Let);
	            this.state = 351;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 353; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 352;
	                this.var_binding();
	                this.state = 355; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 357;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 358;
	            this.term();
	            this.state = 359;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 361;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 362;
	            this.match(SMTLIBv2Parser.GRW_Forall);
	            this.state = 363;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 365; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 364;
	                this.sorted_var();
	                this.state = 367; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 369;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 370;
	            this.term();
	            this.state = 371;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 373;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 374;
	            this.match(SMTLIBv2Parser.GRW_Exists);
	            this.state = 375;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 377; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 376;
	                this.sorted_var();
	                this.state = 379; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 381;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 382;
	            this.term();
	            this.state = 383;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 385;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 386;
	            this.match(SMTLIBv2Parser.GRW_Match);
	            this.state = 387;
	            this.term();
	            this.state = 388;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 390; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 389;
	                this.match_case();
	                this.state = 392; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 394;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 395;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 397;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 398;
	            this.match(SMTLIBv2Parser.GRW_Exclamation);
	            this.state = 399;
	            this.term();
	            this.state = 401; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 400;
	                this.attribute();
	                this.state = 403; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0));
	            this.state = 405;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_symbol_decl() {
	    let localctx = new Sort_symbol_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SMTLIBv2Parser.RULE_sort_symbol_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 410;
	        this.identifier();
	        this.state = 411;
	        this.numeral();
	        this.state = 415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0)) {
	            this.state = 412;
	            this.attribute();
	            this.state = 417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 418;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_spec_constant() {
	    let localctx = new Meta_spec_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SMTLIBv2Parser.RULE_meta_spec_constant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 420;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SMTLIBv2Parser.GRW_Decimal - 57)) | (1 << (SMTLIBv2Parser.GRW_Numeral - 57)) | (1 << (SMTLIBv2Parser.GRW_String - 57)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fun_symbol_decl() {
	    let localctx = new Fun_symbol_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SMTLIBv2Parser.RULE_fun_symbol_decl);
	    var _la = 0; // Token type
	    try {
	        this.state = 459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 422;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 423;
	            this.spec_constant();
	            this.state = 424;
	            this.sort();
	            this.state = 428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0)) {
	                this.state = 425;
	                this.attribute();
	                this.state = 430;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 431;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 433;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 434;
	            this.meta_spec_constant();
	            this.state = 435;
	            this.sort();
	            this.state = 439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0)) {
	                this.state = 436;
	                this.attribute();
	                this.state = 441;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 442;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 444;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 445;
	            this.identifier();
	            this.state = 447; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 446;
	                this.sort();
	                this.state = 449; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0)) {
	                this.state = 451;
	                this.attribute();
	                this.state = 456;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 457;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	par_fun_symbol_decl() {
	    let localctx = new Par_fun_symbol_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SMTLIBv2Parser.RULE_par_fun_symbol_decl);
	    var _la = 0; // Token type
	    try {
	        this.state = 487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 461;
	            this.fun_symbol_decl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 462;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 463;
	            this.match(SMTLIBv2Parser.GRW_Par);
	            this.state = 464;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 466; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 465;
	                this.symbol();
	                this.state = 468; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 470;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 471;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 472;
	            this.identifier();
	            this.state = 474; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 473;
	                this.sort();
	                this.state = 476; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0)) {
	                this.state = 478;
	                this.attribute();
	                this.state = 483;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 484;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 485;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory_attribute() {
	    let localctx = new Theory_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SMTLIBv2Parser.RULE_theory_attribute);
	    var _la = 0; // Token type
	    try {
	        this.state = 518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 489;
	            this.match(SMTLIBv2Parser.PK_Sorts);
	            this.state = 490;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 492; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 491;
	                this.sort_symbol_decl();
	                this.state = 494; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 496;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 498;
	            this.match(SMTLIBv2Parser.PK_Funs);
	            this.state = 499;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 501; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 500;
	                this.par_fun_symbol_decl();
	                this.state = 503; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 505;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 507;
	            this.match(SMTLIBv2Parser.PK_SortsDescription);
	            this.state = 508;
	            this.string();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 509;
	            this.match(SMTLIBv2Parser.PK_FunsDescription);
	            this.state = 510;
	            this.string();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 511;
	            this.match(SMTLIBv2Parser.PK_Definition);
	            this.state = 512;
	            this.string();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 513;
	            this.match(SMTLIBv2Parser.PK_Values);
	            this.state = 514;
	            this.string();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 515;
	            this.match(SMTLIBv2Parser.PK_Notes);
	            this.state = 516;
	            this.string();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 517;
	            this.attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory_decl() {
	    let localctx = new Theory_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SMTLIBv2Parser.RULE_theory_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 521;
	        this.match(SMTLIBv2Parser.PS_Theory);
	        this.state = 522;
	        this.symbol();
	        this.state = 524; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 523;
	            this.theory_attribute();
	            this.state = 526; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0));
	        this.state = 528;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logic_attribue() {
	    let localctx = new Logic_attribueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SMTLIBv2Parser.RULE_logic_attribue);
	    var _la = 0; // Token type
	    try {
	        this.state = 548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 530;
	            this.match(SMTLIBv2Parser.PK_Theories);
	            this.state = 531;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 533; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 532;
	                this.symbol();
	                this.state = 535; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 537;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 539;
	            this.match(SMTLIBv2Parser.PK_Language);
	            this.state = 540;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 541;
	            this.match(SMTLIBv2Parser.PK_Extension);
	            this.state = 542;
	            this.string();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 543;
	            this.match(SMTLIBv2Parser.PK_Values);
	            this.state = 544;
	            this.string();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 545;
	            this.match(SMTLIBv2Parser.PK_Notes);
	            this.state = 546;
	            this.string();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 547;
	            this.attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logic() {
	    let localctx = new LogicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SMTLIBv2Parser.RULE_logic);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 551;
	        this.match(SMTLIBv2Parser.PS_Logic);
	        this.state = 552;
	        this.symbol();
	        this.state = 554; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 553;
	            this.logic_attribue();
	            this.state = 556; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0));
	        this.state = 558;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_dec() {
	    let localctx = new Sort_decContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SMTLIBv2Parser.RULE_sort_dec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 561;
	        this.symbol();
	        this.state = 562;
	        this.numeral();
	        this.state = 563;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector_dec() {
	    let localctx = new Selector_decContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SMTLIBv2Parser.RULE_selector_dec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 566;
	        this.symbol();
	        this.state = 567;
	        this.sort();
	        this.state = 568;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_dec() {
	    let localctx = new Constructor_decContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SMTLIBv2Parser.RULE_constructor_dec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 571;
	        this.symbol();
	        this.state = 575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SMTLIBv2Parser.ParOpen) {
	            this.state = 572;
	            this.selector_dec();
	            this.state = 577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 578;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datatype_dec() {
	    let localctx = new Datatype_decContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SMTLIBv2Parser.RULE_datatype_dec);
	    var _la = 0; // Token type
	    try {
	        this.state = 606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 582; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 581;
	                this.constructor_dec();
	                this.state = 584; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 586;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 588;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 589;
	            this.match(SMTLIBv2Parser.GRW_Par);
	            this.state = 590;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 592; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 591;
	                this.symbol();
	                this.state = 594; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	            this.state = 596;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 597;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 599; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 598;
	                this.constructor_dec();
	                this.state = 601; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SMTLIBv2Parser.ParOpen);
	            this.state = 603;
	            this.match(SMTLIBv2Parser.ParClose);
	            this.state = 604;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_dec() {
	    let localctx = new Function_decContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SMTLIBv2Parser.RULE_function_dec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 609;
	        this.symbol();
	        this.state = 610;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SMTLIBv2Parser.ParOpen) {
	            this.state = 611;
	            this.sorted_var();
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 617;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 618;
	        this.sort();
	        this.state = 619;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_def() {
	    let localctx = new Function_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SMTLIBv2Parser.RULE_function_def);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.symbol();
	        this.state = 622;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SMTLIBv2Parser.ParOpen) {
	            this.state = 623;
	            this.sorted_var();
	            this.state = 628;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 629;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 630;
	        this.sort();
	        this.state = 631;
	        this.term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prop_literal() {
	    let localctx = new Prop_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SMTLIBv2Parser.RULE_prop_literal);
	    try {
	        this.state = 639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SMTLIBv2Parser.QuotedSymbol:
	        case SMTLIBv2Parser.PS_Not:
	        case SMTLIBv2Parser.PS_Bool:
	        case SMTLIBv2Parser.PS_ContinuedExecution:
	        case SMTLIBv2Parser.PS_Error:
	        case SMTLIBv2Parser.PS_False:
	        case SMTLIBv2Parser.PS_ImmediateExit:
	        case SMTLIBv2Parser.PS_Incomplete:
	        case SMTLIBv2Parser.PS_Logic:
	        case SMTLIBv2Parser.PS_Memout:
	        case SMTLIBv2Parser.PS_Sat:
	        case SMTLIBv2Parser.PS_Success:
	        case SMTLIBv2Parser.PS_Theory:
	        case SMTLIBv2Parser.PS_True:
	        case SMTLIBv2Parser.PS_Unknown:
	        case SMTLIBv2Parser.PS_Unsupported:
	        case SMTLIBv2Parser.PS_Unsat:
	        case SMTLIBv2Parser.UndefinedSymbol:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 633;
	            this.symbol();
	            break;
	        case SMTLIBv2Parser.ParOpen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 634;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 635;
	            this.match(SMTLIBv2Parser.PS_Not);
	            this.state = 636;
	            this.symbol();
	            this.state = 637;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	script() {
	    let localctx = new ScriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SMTLIBv2Parser.RULE_script);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SMTLIBv2Parser.ParOpen) {
	            this.state = 641;
	            this.command();
	            this.state = 646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_assert() {
	    let localctx = new Cmd_assertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SMTLIBv2Parser.RULE_cmd_assert);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(SMTLIBv2Parser.CMD_Assert);
	        this.state = 648;
	        this.term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_checkSat() {
	    let localctx = new Cmd_checkSatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SMTLIBv2Parser.RULE_cmd_checkSat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(SMTLIBv2Parser.CMD_CheckSat);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_checkSatAssuming() {
	    let localctx = new Cmd_checkSatAssumingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SMTLIBv2Parser.RULE_cmd_checkSatAssuming);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.match(SMTLIBv2Parser.CMD_CheckSatAssuming);
	        this.state = 653;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 654;
	            this.prop_literal();
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 660;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_declareConst() {
	    let localctx = new Cmd_declareConstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SMTLIBv2Parser.RULE_cmd_declareConst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.match(SMTLIBv2Parser.CMD_DeclareConst);
	        this.state = 663;
	        this.symbol();
	        this.state = 664;
	        this.sort();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_declareDatatype() {
	    let localctx = new Cmd_declareDatatypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SMTLIBv2Parser.RULE_cmd_declareDatatype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        this.match(SMTLIBv2Parser.CMD_DeclareDatatype);
	        this.state = 667;
	        this.symbol();
	        this.state = 668;
	        this.datatype_dec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_declareDatatypes() {
	    let localctx = new Cmd_declareDatatypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SMTLIBv2Parser.RULE_cmd_declareDatatypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.match(SMTLIBv2Parser.CMD_DeclareDatatypes);
	        this.state = 671;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 673; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 672;
	            this.sort_dec();
	            this.state = 675; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SMTLIBv2Parser.ParOpen);
	        this.state = 677;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 678;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 680; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 679;
	            this.datatype_dec();
	            this.state = 682; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SMTLIBv2Parser.ParOpen);
	        this.state = 684;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_declareFun() {
	    let localctx = new Cmd_declareFunContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SMTLIBv2Parser.RULE_cmd_declareFun);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 686;
	        this.match(SMTLIBv2Parser.CMD_DeclareFun);
	        this.state = 687;
	        this.symbol();
	        this.state = 688;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 689;
	            this.sort();
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 695;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 696;
	        this.sort();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_declareSort() {
	    let localctx = new Cmd_declareSortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SMTLIBv2Parser.RULE_cmd_declareSort);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.match(SMTLIBv2Parser.CMD_DeclareSort);
	        this.state = 699;
	        this.symbol();
	        this.state = 700;
	        this.numeral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_defineFun() {
	    let localctx = new Cmd_defineFunContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SMTLIBv2Parser.RULE_cmd_defineFun);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this.match(SMTLIBv2Parser.CMD_DefineFun);
	        this.state = 703;
	        this.function_def();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_defineFunRec() {
	    let localctx = new Cmd_defineFunRecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SMTLIBv2Parser.RULE_cmd_defineFunRec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.match(SMTLIBv2Parser.CMD_DefineFunRec);
	        this.state = 706;
	        this.function_def();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_defineFunsRec() {
	    let localctx = new Cmd_defineFunsRecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SMTLIBv2Parser.RULE_cmd_defineFunsRec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        this.match(SMTLIBv2Parser.CMD_DefineFunsRec);
	        this.state = 709;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 711; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 710;
	            this.function_dec();
	            this.state = 713; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SMTLIBv2Parser.ParOpen);
	        this.state = 715;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 716;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 718; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 717;
	            this.term();
	            this.state = 720; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	        this.state = 722;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_defineSort() {
	    let localctx = new Cmd_defineSortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SMTLIBv2Parser.RULE_cmd_defineSort);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.match(SMTLIBv2Parser.CMD_DefineSort);
	        this.state = 725;
	        this.symbol();
	        this.state = 726;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 727;
	            this.symbol();
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 733;
	        this.match(SMTLIBv2Parser.ParClose);
	        this.state = 734;
	        this.sort();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_echo() {
	    let localctx = new Cmd_echoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SMTLIBv2Parser.RULE_cmd_echo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(SMTLIBv2Parser.CMD_Echo);
	        this.state = 737;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_exit() {
	    let localctx = new Cmd_exitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SMTLIBv2Parser.RULE_cmd_exit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.match(SMTLIBv2Parser.CMD_Exit);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getAssertions() {
	    let localctx = new Cmd_getAssertionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SMTLIBv2Parser.RULE_cmd_getAssertions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.match(SMTLIBv2Parser.CMD_GetAssertions);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getAssignment() {
	    let localctx = new Cmd_getAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SMTLIBv2Parser.RULE_cmd_getAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.match(SMTLIBv2Parser.CMD_GetAssignment);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getInfo() {
	    let localctx = new Cmd_getInfoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SMTLIBv2Parser.RULE_cmd_getInfo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.match(SMTLIBv2Parser.CMD_GetInfo);
	        this.state = 746;
	        this.info_flag();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getModel() {
	    let localctx = new Cmd_getModelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SMTLIBv2Parser.RULE_cmd_getModel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.match(SMTLIBv2Parser.CMD_GetModel);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getOption() {
	    let localctx = new Cmd_getOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SMTLIBv2Parser.RULE_cmd_getOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        this.match(SMTLIBv2Parser.CMD_GetOption);
	        this.state = 751;
	        this.keyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getProof() {
	    let localctx = new Cmd_getProofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SMTLIBv2Parser.RULE_cmd_getProof);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.match(SMTLIBv2Parser.CMD_GetProof);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getUnsatAssumptions() {
	    let localctx = new Cmd_getUnsatAssumptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SMTLIBv2Parser.RULE_cmd_getUnsatAssumptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.match(SMTLIBv2Parser.CMD_GetUnsatAssumptions);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getUnsatCore() {
	    let localctx = new Cmd_getUnsatCoreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SMTLIBv2Parser.RULE_cmd_getUnsatCore);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(SMTLIBv2Parser.CMD_GetUnsatCore);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_getValue() {
	    let localctx = new Cmd_getValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SMTLIBv2Parser.RULE_cmd_getValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(SMTLIBv2Parser.CMD_GetValue);
	        this.state = 760;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 762; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 761;
	            this.term();
	            this.state = 764; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol);
	        this.state = 766;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_pop() {
	    let localctx = new Cmd_popContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SMTLIBv2Parser.RULE_cmd_pop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.match(SMTLIBv2Parser.CMD_Pop);
	        this.state = 769;
	        this.numeral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_push() {
	    let localctx = new Cmd_pushContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SMTLIBv2Parser.RULE_cmd_push);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.match(SMTLIBv2Parser.CMD_Push);
	        this.state = 772;
	        this.numeral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_reset() {
	    let localctx = new Cmd_resetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SMTLIBv2Parser.RULE_cmd_reset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(SMTLIBv2Parser.CMD_Reset);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_resetAssertions() {
	    let localctx = new Cmd_resetAssertionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SMTLIBv2Parser.RULE_cmd_resetAssertions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this.match(SMTLIBv2Parser.CMD_ResetAssertions);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_setInfo() {
	    let localctx = new Cmd_setInfoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SMTLIBv2Parser.RULE_cmd_setInfo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(SMTLIBv2Parser.CMD_SetInfo);
	        this.state = 779;
	        this.attribute();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_setLogic() {
	    let localctx = new Cmd_setLogicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SMTLIBv2Parser.RULE_cmd_setLogic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 781;
	        this.match(SMTLIBv2Parser.CMD_SetLogic);
	        this.state = 782;
	        this.symbol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd_setOption() {
	    let localctx = new Cmd_setOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SMTLIBv2Parser.RULE_cmd_setOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 784;
	        this.match(SMTLIBv2Parser.CMD_SetOption);
	        this.state = 785;
	        this.option();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command() {
	    let localctx = new CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SMTLIBv2Parser.RULE_command);
	    try {
	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 787;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 788;
	            this.cmd_assert();
	            this.state = 789;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 791;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 792;
	            this.cmd_checkSat();
	            this.state = 793;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 795;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 796;
	            this.cmd_checkSatAssuming();
	            this.state = 797;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 799;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 800;
	            this.cmd_declareConst();
	            this.state = 801;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 803;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 804;
	            this.cmd_declareDatatype();
	            this.state = 805;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 807;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 808;
	            this.cmd_declareDatatypes();
	            this.state = 809;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 811;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 812;
	            this.cmd_declareFun();
	            this.state = 813;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 815;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 816;
	            this.cmd_declareSort();
	            this.state = 817;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 819;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 820;
	            this.cmd_defineFun();
	            this.state = 821;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 823;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 824;
	            this.cmd_defineFunRec();
	            this.state = 825;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 827;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 828;
	            this.cmd_defineFunsRec();
	            this.state = 829;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 831;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 832;
	            this.cmd_defineSort();
	            this.state = 833;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 835;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 836;
	            this.cmd_echo();
	            this.state = 837;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 839;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 840;
	            this.cmd_exit();
	            this.state = 841;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 843;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 844;
	            this.cmd_getAssertions();
	            this.state = 845;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 847;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 848;
	            this.cmd_getAssignment();
	            this.state = 849;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 851;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 852;
	            this.cmd_getInfo();
	            this.state = 853;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 855;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 856;
	            this.cmd_getModel();
	            this.state = 857;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 859;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 860;
	            this.cmd_getOption();
	            this.state = 861;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 863;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 864;
	            this.cmd_getProof();
	            this.state = 865;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 867;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 868;
	            this.cmd_getUnsatAssumptions();
	            this.state = 869;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 871;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 872;
	            this.cmd_getUnsatCore();
	            this.state = 873;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 875;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 876;
	            this.cmd_getValue();
	            this.state = 877;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 879;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 880;
	            this.cmd_pop();
	            this.state = 881;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 883;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 884;
	            this.cmd_push();
	            this.state = 885;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 887;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 888;
	            this.cmd_reset();
	            this.state = 889;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 891;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 892;
	            this.cmd_resetAssertions();
	            this.state = 893;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 895;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 896;
	            this.cmd_setInfo();
	            this.state = 897;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 899;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 900;
	            this.cmd_setLogic();
	            this.state = 901;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 903;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 904;
	            this.cmd_setOption();
	            this.state = 905;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	b_value() {
	    let localctx = new B_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SMTLIBv2Parser.RULE_b_value);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 909;
	        _la = this._input.LA(1);
	        if(!(_la===SMTLIBv2Parser.PS_False || _la===SMTLIBv2Parser.PS_True)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option() {
	    let localctx = new OptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SMTLIBv2Parser.RULE_option);
	    try {
	        this.state = 940;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 911;
	            this.match(SMTLIBv2Parser.PK_DiagnosticOutputChannel);
	            this.state = 912;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 913;
	            this.match(SMTLIBv2Parser.PK_GlobalDeclarations);
	            this.state = 914;
	            this.b_value();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 915;
	            this.match(SMTLIBv2Parser.PK_InteractiveMode);
	            this.state = 916;
	            this.b_value();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 917;
	            this.match(SMTLIBv2Parser.PK_PrintSuccess);
	            this.state = 918;
	            this.b_value();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 919;
	            this.match(SMTLIBv2Parser.PK_ProduceAssertions);
	            this.state = 920;
	            this.b_value();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 921;
	            this.match(SMTLIBv2Parser.PK_ProduceAssignments);
	            this.state = 922;
	            this.b_value();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 923;
	            this.match(SMTLIBv2Parser.PK_ProduceModels);
	            this.state = 924;
	            this.b_value();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 925;
	            this.match(SMTLIBv2Parser.PK_ProduceProofs);
	            this.state = 926;
	            this.b_value();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 927;
	            this.match(SMTLIBv2Parser.PK_ProduceUnsatAssumptions);
	            this.state = 928;
	            this.b_value();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 929;
	            this.match(SMTLIBv2Parser.PK_ProduceUnsatCores);
	            this.state = 930;
	            this.b_value();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 931;
	            this.match(SMTLIBv2Parser.PK_RandomSeed);
	            this.state = 932;
	            this.numeral();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 933;
	            this.match(SMTLIBv2Parser.PK_RegularOutputChannel);
	            this.state = 934;
	            this.string();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 935;
	            this.match(SMTLIBv2Parser.PK_ReproducibleResourceLimit);
	            this.state = 936;
	            this.numeral();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 937;
	            this.match(SMTLIBv2Parser.PK_Verbosity);
	            this.state = 938;
	            this.numeral();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 939;
	            this.attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	info_flag() {
	    let localctx = new Info_flagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SMTLIBv2Parser.RULE_info_flag);
	    try {
	        this.state = 950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 942;
	            this.match(SMTLIBv2Parser.PK_AllStatistics);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 943;
	            this.match(SMTLIBv2Parser.PK_AssertionStackLevels);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 944;
	            this.match(SMTLIBv2Parser.PK_Authors);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 945;
	            this.match(SMTLIBv2Parser.PK_ErrorBehaviour);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 946;
	            this.match(SMTLIBv2Parser.PK_Name);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 947;
	            this.match(SMTLIBv2Parser.PK_ReasonUnknown);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 948;
	            this.match(SMTLIBv2Parser.PK_Version);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 949;
	            this.keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error_behaviour() {
	    let localctx = new Error_behaviourContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SMTLIBv2Parser.RULE_error_behaviour);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        _la = this._input.LA(1);
	        if(!(_la===SMTLIBv2Parser.PS_ContinuedExecution || _la===SMTLIBv2Parser.PS_ImmediateExit)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reason_unknown() {
	    let localctx = new Reason_unknownContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SMTLIBv2Parser.RULE_reason_unknown);
	    try {
	        this.state = 957;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 954;
	            this.match(SMTLIBv2Parser.PS_Memout);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 955;
	            this.match(SMTLIBv2Parser.PS_Incomplete);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 956;
	            this.s_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	model_response() {
	    let localctx = new Model_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SMTLIBv2Parser.RULE_model_response);
	    try {
	        this.state = 971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 959;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 960;
	            this.cmd_defineFun();
	            this.state = 961;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 963;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 964;
	            this.cmd_defineFunRec();
	            this.state = 965;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 967;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 968;
	            this.cmd_defineFunsRec();
	            this.state = 969;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	info_response() {
	    let localctx = new Info_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SMTLIBv2Parser.RULE_info_response);
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 973;
	            this.match(SMTLIBv2Parser.PK_AssertionStackLevels);
	            this.state = 974;
	            this.numeral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 975;
	            this.match(SMTLIBv2Parser.PK_Authors);
	            this.state = 976;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 977;
	            this.match(SMTLIBv2Parser.PK_ErrorBehaviour);
	            this.state = 978;
	            this.error_behaviour();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 979;
	            this.match(SMTLIBv2Parser.PK_Name);
	            this.state = 980;
	            this.string();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 981;
	            this.match(SMTLIBv2Parser.PK_ReasonUnknown);
	            this.state = 982;
	            this.reason_unknown();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 983;
	            this.match(SMTLIBv2Parser.PK_Version);
	            this.state = 984;
	            this.string();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 985;
	            this.attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuation_pair() {
	    let localctx = new Valuation_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SMTLIBv2Parser.RULE_valuation_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 989;
	        this.term();
	        this.state = 990;
	        this.term();
	        this.state = 991;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_valuation_pair() {
	    let localctx = new T_valuation_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SMTLIBv2Parser.RULE_t_valuation_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 994;
	        this.symbol();
	        this.state = 995;
	        this.b_value();
	        this.state = 996;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	check_sat_response() {
	    let localctx = new Check_sat_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SMTLIBv2Parser.RULE_check_sat_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	echo_response() {
	    let localctx = new Echo_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SMTLIBv2Parser.RULE_echo_response);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_assertions_response() {
	    let localctx = new Get_assertions_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SMTLIBv2Parser.RULE_get_assertions_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 1003;
	            this.term();
	            this.state = 1008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1009;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_assignment_response() {
	    let localctx = new Get_assignment_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SMTLIBv2Parser.RULE_get_assignment_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SMTLIBv2Parser.ParOpen) {
	            this.state = 1012;
	            this.t_valuation_pair();
	            this.state = 1017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1018;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_info_response() {
	    let localctx = new Get_info_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SMTLIBv2Parser.RULE_get_info_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1022; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1021;
	            this.info_response();
	            this.state = 1024; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SMTLIBv2Parser.PK_RightAssoc - 102)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 102)) | (1 << (SMTLIBv2Parser.PK_Sorts - 102)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 102)) | (1 << (SMTLIBv2Parser.PK_Source - 102)) | (1 << (SMTLIBv2Parser.PK_Status - 102)) | (1 << (SMTLIBv2Parser.PK_Theories - 102)) | (1 << (SMTLIBv2Parser.PK_Values - 102)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 102)) | (1 << (SMTLIBv2Parser.PK_Version - 102)))) !== 0));
	        this.state = 1026;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_model_response() {
	    let localctx = new Get_model_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SMTLIBv2Parser.RULE_get_model_response);
	    var _la = 0; // Token type
	    try {
	        this.state = 1045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1028;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 1029;
	            this.match(SMTLIBv2Parser.RS_Model);
	            this.state = 1033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SMTLIBv2Parser.ParOpen) {
	                this.state = 1030;
	                this.model_response();
	                this.state = 1035;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1036;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1037;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 1041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SMTLIBv2Parser.ParOpen) {
	                this.state = 1038;
	                this.model_response();
	                this.state = 1043;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1044;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_option_response() {
	    let localctx = new Get_option_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SMTLIBv2Parser.RULE_get_option_response);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047;
	        this.attribute_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_proof_response() {
	    let localctx = new Get_proof_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SMTLIBv2Parser.RULE_get_proof_response);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.s_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_unsat_assump_response() {
	    let localctx = new Get_unsat_assump_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SMTLIBv2Parser.RULE_get_unsat_assump_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 1052;
	            this.symbol();
	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1058;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_unsat_core_response() {
	    let localctx = new Get_unsat_core_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SMTLIBv2Parser.RULE_get_unsat_core_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1060;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) !== 0) || _la===SMTLIBv2Parser.UndefinedSymbol) {
	            this.state = 1061;
	            this.symbol();
	            this.state = 1066;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1067;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_value_response() {
	    let localctx = new Get_value_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SMTLIBv2Parser.RULE_get_value_response);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1069;
	        this.match(SMTLIBv2Parser.ParOpen);
	        this.state = 1071; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1070;
	            this.valuation_pair();
	            this.state = 1073; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SMTLIBv2Parser.ParOpen);
	        this.state = 1075;
	        this.match(SMTLIBv2Parser.ParClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specific_success_response() {
	    let localctx = new Specific_success_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SMTLIBv2Parser.RULE_specific_success_response);
	    try {
	        this.state = 1088;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1077;
	            this.check_sat_response();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1078;
	            this.echo_response();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1079;
	            this.get_assertions_response();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1080;
	            this.get_assignment_response();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1081;
	            this.get_info_response();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1082;
	            this.get_model_response();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1083;
	            this.get_option_response();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1084;
	            this.get_proof_response();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1085;
	            this.get_unsat_assump_response();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1086;
	            this.get_unsat_core_response();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1087;
	            this.get_value_response();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_response() {
	    let localctx = new General_responseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SMTLIBv2Parser.RULE_general_response);
	    try {
	        this.state = 1098;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1090;
	            this.match(SMTLIBv2Parser.PS_Success);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1091;
	            this.specific_success_response();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1092;
	            this.match(SMTLIBv2Parser.PS_Unsupported);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1093;
	            this.match(SMTLIBv2Parser.ParOpen);
	            this.state = 1094;
	            this.match(SMTLIBv2Parser.PS_Error);
	            this.state = 1095;
	            this.string();
	            this.state = 1096;
	            this.match(SMTLIBv2Parser.ParClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SMTLIBv2Parser.EOF = antlr4.Token.EOF;
SMTLIBv2Parser.Comment = 1;
SMTLIBv2Parser.ParOpen = 2;
SMTLIBv2Parser.ParClose = 3;
SMTLIBv2Parser.Semicolon = 4;
SMTLIBv2Parser.String = 5;
SMTLIBv2Parser.QuotedSymbol = 6;
SMTLIBv2Parser.PS_Not = 7;
SMTLIBv2Parser.PS_Bool = 8;
SMTLIBv2Parser.PS_ContinuedExecution = 9;
SMTLIBv2Parser.PS_Error = 10;
SMTLIBv2Parser.PS_False = 11;
SMTLIBv2Parser.PS_ImmediateExit = 12;
SMTLIBv2Parser.PS_Incomplete = 13;
SMTLIBv2Parser.PS_Logic = 14;
SMTLIBv2Parser.PS_Memout = 15;
SMTLIBv2Parser.PS_Sat = 16;
SMTLIBv2Parser.PS_Success = 17;
SMTLIBv2Parser.PS_Theory = 18;
SMTLIBv2Parser.PS_True = 19;
SMTLIBv2Parser.PS_Unknown = 20;
SMTLIBv2Parser.PS_Unsupported = 21;
SMTLIBv2Parser.PS_Unsat = 22;
SMTLIBv2Parser.CMD_Assert = 23;
SMTLIBv2Parser.CMD_CheckSat = 24;
SMTLIBv2Parser.CMD_CheckSatAssuming = 25;
SMTLIBv2Parser.CMD_DeclareConst = 26;
SMTLIBv2Parser.CMD_DeclareDatatype = 27;
SMTLIBv2Parser.CMD_DeclareDatatypes = 28;
SMTLIBv2Parser.CMD_DeclareFun = 29;
SMTLIBv2Parser.CMD_DeclareSort = 30;
SMTLIBv2Parser.CMD_DefineFun = 31;
SMTLIBv2Parser.CMD_DefineFunRec = 32;
SMTLIBv2Parser.CMD_DefineFunsRec = 33;
SMTLIBv2Parser.CMD_DefineSort = 34;
SMTLIBv2Parser.CMD_Echo = 35;
SMTLIBv2Parser.CMD_Exit = 36;
SMTLIBv2Parser.CMD_GetAssertions = 37;
SMTLIBv2Parser.CMD_GetAssignment = 38;
SMTLIBv2Parser.CMD_GetInfo = 39;
SMTLIBv2Parser.CMD_GetModel = 40;
SMTLIBv2Parser.CMD_GetOption = 41;
SMTLIBv2Parser.CMD_GetProof = 42;
SMTLIBv2Parser.CMD_GetUnsatAssumptions = 43;
SMTLIBv2Parser.CMD_GetUnsatCore = 44;
SMTLIBv2Parser.CMD_GetValue = 45;
SMTLIBv2Parser.CMD_Pop = 46;
SMTLIBv2Parser.CMD_Push = 47;
SMTLIBv2Parser.CMD_Reset = 48;
SMTLIBv2Parser.CMD_ResetAssertions = 49;
SMTLIBv2Parser.CMD_SetInfo = 50;
SMTLIBv2Parser.CMD_SetLogic = 51;
SMTLIBv2Parser.CMD_SetOption = 52;
SMTLIBv2Parser.GRW_Exclamation = 53;
SMTLIBv2Parser.GRW_Underscore = 54;
SMTLIBv2Parser.GRW_As = 55;
SMTLIBv2Parser.GRW_Binary = 56;
SMTLIBv2Parser.GRW_Decimal = 57;
SMTLIBv2Parser.GRW_Exists = 58;
SMTLIBv2Parser.GRW_Hexadecimal = 59;
SMTLIBv2Parser.GRW_Forall = 60;
SMTLIBv2Parser.GRW_Let = 61;
SMTLIBv2Parser.GRW_Match = 62;
SMTLIBv2Parser.GRW_Numeral = 63;
SMTLIBv2Parser.GRW_Par = 64;
SMTLIBv2Parser.GRW_String = 65;
SMTLIBv2Parser.Numeral = 66;
SMTLIBv2Parser.Binary = 67;
SMTLIBv2Parser.HexDecimal = 68;
SMTLIBv2Parser.Decimal = 69;
SMTLIBv2Parser.Colon = 70;
SMTLIBv2Parser.PK_AllStatistics = 71;
SMTLIBv2Parser.PK_AssertionStackLevels = 72;
SMTLIBv2Parser.PK_Authors = 73;
SMTLIBv2Parser.PK_Category = 74;
SMTLIBv2Parser.PK_Chainable = 75;
SMTLIBv2Parser.PK_Definition = 76;
SMTLIBv2Parser.PK_DiagnosticOutputChannel = 77;
SMTLIBv2Parser.PK_ErrorBehaviour = 78;
SMTLIBv2Parser.PK_Extension = 79;
SMTLIBv2Parser.PK_Funs = 80;
SMTLIBv2Parser.PK_FunsDescription = 81;
SMTLIBv2Parser.PK_GlobalDeclarations = 82;
SMTLIBv2Parser.PK_InteractiveMode = 83;
SMTLIBv2Parser.PK_Language = 84;
SMTLIBv2Parser.PK_LeftAssoc = 85;
SMTLIBv2Parser.PK_License = 86;
SMTLIBv2Parser.PK_Named = 87;
SMTLIBv2Parser.PK_Name = 88;
SMTLIBv2Parser.PK_Notes = 89;
SMTLIBv2Parser.PK_Pattern = 90;
SMTLIBv2Parser.PK_PrintSuccess = 91;
SMTLIBv2Parser.PK_ProduceAssertions = 92;
SMTLIBv2Parser.PK_ProduceAssignments = 93;
SMTLIBv2Parser.PK_ProduceModels = 94;
SMTLIBv2Parser.PK_ProduceProofs = 95;
SMTLIBv2Parser.PK_ProduceUnsatAssumptions = 96;
SMTLIBv2Parser.PK_ProduceUnsatCores = 97;
SMTLIBv2Parser.PK_RandomSeed = 98;
SMTLIBv2Parser.PK_ReasonUnknown = 99;
SMTLIBv2Parser.PK_RegularOutputChannel = 100;
SMTLIBv2Parser.PK_ReproducibleResourceLimit = 101;
SMTLIBv2Parser.PK_RightAssoc = 102;
SMTLIBv2Parser.PK_SmtLibVersion = 103;
SMTLIBv2Parser.PK_Sorts = 104;
SMTLIBv2Parser.PK_SortsDescription = 105;
SMTLIBv2Parser.PK_Source = 106;
SMTLIBv2Parser.PK_Status = 107;
SMTLIBv2Parser.PK_Theories = 108;
SMTLIBv2Parser.PK_Values = 109;
SMTLIBv2Parser.PK_Verbosity = 110;
SMTLIBv2Parser.PK_Version = 111;
SMTLIBv2Parser.RS_Model = 112;
SMTLIBv2Parser.UndefinedSymbol = 113;
SMTLIBv2Parser.WS = 114;

SMTLIBv2Parser.RULE_start = 0;
SMTLIBv2Parser.RULE_generalReservedWord = 1;
SMTLIBv2Parser.RULE_simpleSymbol = 2;
SMTLIBv2Parser.RULE_quotedSymbol = 3;
SMTLIBv2Parser.RULE_predefSymbol = 4;
SMTLIBv2Parser.RULE_predefKeyword = 5;
SMTLIBv2Parser.RULE_symbol = 6;
SMTLIBv2Parser.RULE_numeral = 7;
SMTLIBv2Parser.RULE_decimal = 8;
SMTLIBv2Parser.RULE_hexadecimal = 9;
SMTLIBv2Parser.RULE_binary = 10;
SMTLIBv2Parser.RULE_string = 11;
SMTLIBv2Parser.RULE_keyword = 12;
SMTLIBv2Parser.RULE_spec_constant = 13;
SMTLIBv2Parser.RULE_s_expr = 14;
SMTLIBv2Parser.RULE_index = 15;
SMTLIBv2Parser.RULE_identifier = 16;
SMTLIBv2Parser.RULE_attribute_value = 17;
SMTLIBv2Parser.RULE_attribute = 18;
SMTLIBv2Parser.RULE_sort = 19;
SMTLIBv2Parser.RULE_qual_identifer = 20;
SMTLIBv2Parser.RULE_var_binding = 21;
SMTLIBv2Parser.RULE_sorted_var = 22;
SMTLIBv2Parser.RULE_pattern = 23;
SMTLIBv2Parser.RULE_match_case = 24;
SMTLIBv2Parser.RULE_term = 25;
SMTLIBv2Parser.RULE_sort_symbol_decl = 26;
SMTLIBv2Parser.RULE_meta_spec_constant = 27;
SMTLIBv2Parser.RULE_fun_symbol_decl = 28;
SMTLIBv2Parser.RULE_par_fun_symbol_decl = 29;
SMTLIBv2Parser.RULE_theory_attribute = 30;
SMTLIBv2Parser.RULE_theory_decl = 31;
SMTLIBv2Parser.RULE_logic_attribue = 32;
SMTLIBv2Parser.RULE_logic = 33;
SMTLIBv2Parser.RULE_sort_dec = 34;
SMTLIBv2Parser.RULE_selector_dec = 35;
SMTLIBv2Parser.RULE_constructor_dec = 36;
SMTLIBv2Parser.RULE_datatype_dec = 37;
SMTLIBv2Parser.RULE_function_dec = 38;
SMTLIBv2Parser.RULE_function_def = 39;
SMTLIBv2Parser.RULE_prop_literal = 40;
SMTLIBv2Parser.RULE_script = 41;
SMTLIBv2Parser.RULE_cmd_assert = 42;
SMTLIBv2Parser.RULE_cmd_checkSat = 43;
SMTLIBv2Parser.RULE_cmd_checkSatAssuming = 44;
SMTLIBv2Parser.RULE_cmd_declareConst = 45;
SMTLIBv2Parser.RULE_cmd_declareDatatype = 46;
SMTLIBv2Parser.RULE_cmd_declareDatatypes = 47;
SMTLIBv2Parser.RULE_cmd_declareFun = 48;
SMTLIBv2Parser.RULE_cmd_declareSort = 49;
SMTLIBv2Parser.RULE_cmd_defineFun = 50;
SMTLIBv2Parser.RULE_cmd_defineFunRec = 51;
SMTLIBv2Parser.RULE_cmd_defineFunsRec = 52;
SMTLIBv2Parser.RULE_cmd_defineSort = 53;
SMTLIBv2Parser.RULE_cmd_echo = 54;
SMTLIBv2Parser.RULE_cmd_exit = 55;
SMTLIBv2Parser.RULE_cmd_getAssertions = 56;
SMTLIBv2Parser.RULE_cmd_getAssignment = 57;
SMTLIBv2Parser.RULE_cmd_getInfo = 58;
SMTLIBv2Parser.RULE_cmd_getModel = 59;
SMTLIBv2Parser.RULE_cmd_getOption = 60;
SMTLIBv2Parser.RULE_cmd_getProof = 61;
SMTLIBv2Parser.RULE_cmd_getUnsatAssumptions = 62;
SMTLIBv2Parser.RULE_cmd_getUnsatCore = 63;
SMTLIBv2Parser.RULE_cmd_getValue = 64;
SMTLIBv2Parser.RULE_cmd_pop = 65;
SMTLIBv2Parser.RULE_cmd_push = 66;
SMTLIBv2Parser.RULE_cmd_reset = 67;
SMTLIBv2Parser.RULE_cmd_resetAssertions = 68;
SMTLIBv2Parser.RULE_cmd_setInfo = 69;
SMTLIBv2Parser.RULE_cmd_setLogic = 70;
SMTLIBv2Parser.RULE_cmd_setOption = 71;
SMTLIBv2Parser.RULE_command = 72;
SMTLIBv2Parser.RULE_b_value = 73;
SMTLIBv2Parser.RULE_option = 74;
SMTLIBv2Parser.RULE_info_flag = 75;
SMTLIBv2Parser.RULE_error_behaviour = 76;
SMTLIBv2Parser.RULE_reason_unknown = 77;
SMTLIBv2Parser.RULE_model_response = 78;
SMTLIBv2Parser.RULE_info_response = 79;
SMTLIBv2Parser.RULE_valuation_pair = 80;
SMTLIBv2Parser.RULE_t_valuation_pair = 81;
SMTLIBv2Parser.RULE_check_sat_response = 82;
SMTLIBv2Parser.RULE_echo_response = 83;
SMTLIBv2Parser.RULE_get_assertions_response = 84;
SMTLIBv2Parser.RULE_get_assignment_response = 85;
SMTLIBv2Parser.RULE_get_info_response = 86;
SMTLIBv2Parser.RULE_get_model_response = 87;
SMTLIBv2Parser.RULE_get_option_response = 88;
SMTLIBv2Parser.RULE_get_proof_response = 89;
SMTLIBv2Parser.RULE_get_unsat_assump_response = 90;
SMTLIBv2Parser.RULE_get_unsat_core_response = 91;
SMTLIBv2Parser.RULE_get_value_response = 92;
SMTLIBv2Parser.RULE_specific_success_response = 93;
SMTLIBv2Parser.RULE_general_response = 94;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_start;
    }

	logic() {
	    return this.getTypedRuleContext(LogicContext,0);
	};

	EOF() {
	    return this.getToken(SMTLIBv2Parser.EOF, 0);
	};

	theory_decl() {
	    return this.getTypedRuleContext(Theory_declContext,0);
	};

	script() {
	    return this.getTypedRuleContext(ScriptContext,0);
	};

	general_response() {
	    return this.getTypedRuleContext(General_responseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitStart(this);
		}
	}


}



class GeneralReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_generalReservedWord;
    }

	GRW_Exclamation() {
	    return this.getToken(SMTLIBv2Parser.GRW_Exclamation, 0);
	};

	GRW_Underscore() {
	    return this.getToken(SMTLIBv2Parser.GRW_Underscore, 0);
	};

	GRW_As() {
	    return this.getToken(SMTLIBv2Parser.GRW_As, 0);
	};

	GRW_Binary() {
	    return this.getToken(SMTLIBv2Parser.GRW_Binary, 0);
	};

	GRW_Decimal() {
	    return this.getToken(SMTLIBv2Parser.GRW_Decimal, 0);
	};

	GRW_Exists() {
	    return this.getToken(SMTLIBv2Parser.GRW_Exists, 0);
	};

	GRW_Hexadecimal() {
	    return this.getToken(SMTLIBv2Parser.GRW_Hexadecimal, 0);
	};

	GRW_Forall() {
	    return this.getToken(SMTLIBv2Parser.GRW_Forall, 0);
	};

	GRW_Let() {
	    return this.getToken(SMTLIBv2Parser.GRW_Let, 0);
	};

	GRW_Match() {
	    return this.getToken(SMTLIBv2Parser.GRW_Match, 0);
	};

	GRW_Numeral() {
	    return this.getToken(SMTLIBv2Parser.GRW_Numeral, 0);
	};

	GRW_Par() {
	    return this.getToken(SMTLIBv2Parser.GRW_Par, 0);
	};

	GRW_String() {
	    return this.getToken(SMTLIBv2Parser.GRW_String, 0);
	};

	RS_Model() {
	    return this.getToken(SMTLIBv2Parser.RS_Model, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGeneralReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGeneralReservedWord(this);
		}
	}


}



class SimpleSymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_simpleSymbol;
    }

	predefSymbol() {
	    return this.getTypedRuleContext(PredefSymbolContext,0);
	};

	UndefinedSymbol() {
	    return this.getToken(SMTLIBv2Parser.UndefinedSymbol, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSimpleSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSimpleSymbol(this);
		}
	}


}



class QuotedSymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_quotedSymbol;
    }

	QuotedSymbol() {
	    return this.getToken(SMTLIBv2Parser.QuotedSymbol, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterQuotedSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitQuotedSymbol(this);
		}
	}


}



class PredefSymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_predefSymbol;
    }

	PS_Not() {
	    return this.getToken(SMTLIBv2Parser.PS_Not, 0);
	};

	PS_Bool() {
	    return this.getToken(SMTLIBv2Parser.PS_Bool, 0);
	};

	PS_ContinuedExecution() {
	    return this.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0);
	};

	PS_Error() {
	    return this.getToken(SMTLIBv2Parser.PS_Error, 0);
	};

	PS_False() {
	    return this.getToken(SMTLIBv2Parser.PS_False, 0);
	};

	PS_ImmediateExit() {
	    return this.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0);
	};

	PS_Incomplete() {
	    return this.getToken(SMTLIBv2Parser.PS_Incomplete, 0);
	};

	PS_Logic() {
	    return this.getToken(SMTLIBv2Parser.PS_Logic, 0);
	};

	PS_Memout() {
	    return this.getToken(SMTLIBv2Parser.PS_Memout, 0);
	};

	PS_Sat() {
	    return this.getToken(SMTLIBv2Parser.PS_Sat, 0);
	};

	PS_Success() {
	    return this.getToken(SMTLIBv2Parser.PS_Success, 0);
	};

	PS_Theory() {
	    return this.getToken(SMTLIBv2Parser.PS_Theory, 0);
	};

	PS_True() {
	    return this.getToken(SMTLIBv2Parser.PS_True, 0);
	};

	PS_Unknown() {
	    return this.getToken(SMTLIBv2Parser.PS_Unknown, 0);
	};

	PS_Unsupported() {
	    return this.getToken(SMTLIBv2Parser.PS_Unsupported, 0);
	};

	PS_Unsat() {
	    return this.getToken(SMTLIBv2Parser.PS_Unsat, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterPredefSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitPredefSymbol(this);
		}
	}


}



class PredefKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_predefKeyword;
    }

	PK_AllStatistics() {
	    return this.getToken(SMTLIBv2Parser.PK_AllStatistics, 0);
	};

	PK_AssertionStackLevels() {
	    return this.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0);
	};

	PK_Authors() {
	    return this.getToken(SMTLIBv2Parser.PK_Authors, 0);
	};

	PK_Category() {
	    return this.getToken(SMTLIBv2Parser.PK_Category, 0);
	};

	PK_Chainable() {
	    return this.getToken(SMTLIBv2Parser.PK_Chainable, 0);
	};

	PK_Definition() {
	    return this.getToken(SMTLIBv2Parser.PK_Definition, 0);
	};

	PK_DiagnosticOutputChannel() {
	    return this.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0);
	};

	PK_ErrorBehaviour() {
	    return this.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0);
	};

	PK_Extension() {
	    return this.getToken(SMTLIBv2Parser.PK_Extension, 0);
	};

	PK_Funs() {
	    return this.getToken(SMTLIBv2Parser.PK_Funs, 0);
	};

	PK_FunsDescription() {
	    return this.getToken(SMTLIBv2Parser.PK_FunsDescription, 0);
	};

	PK_GlobalDeclarations() {
	    return this.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0);
	};

	PK_InteractiveMode() {
	    return this.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0);
	};

	PK_Language() {
	    return this.getToken(SMTLIBv2Parser.PK_Language, 0);
	};

	PK_LeftAssoc() {
	    return this.getToken(SMTLIBv2Parser.PK_LeftAssoc, 0);
	};

	PK_License() {
	    return this.getToken(SMTLIBv2Parser.PK_License, 0);
	};

	PK_Named() {
	    return this.getToken(SMTLIBv2Parser.PK_Named, 0);
	};

	PK_Name() {
	    return this.getToken(SMTLIBv2Parser.PK_Name, 0);
	};

	PK_Notes() {
	    return this.getToken(SMTLIBv2Parser.PK_Notes, 0);
	};

	PK_Pattern() {
	    return this.getToken(SMTLIBv2Parser.PK_Pattern, 0);
	};

	PK_PrintSuccess() {
	    return this.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0);
	};

	PK_ProduceAssertions() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0);
	};

	PK_ProduceAssignments() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0);
	};

	PK_ProduceModels() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceModels, 0);
	};

	PK_ProduceProofs() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0);
	};

	PK_ProduceUnsatAssumptions() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0);
	};

	PK_ProduceUnsatCores() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0);
	};

	PK_RandomSeed() {
	    return this.getToken(SMTLIBv2Parser.PK_RandomSeed, 0);
	};

	PK_ReasonUnknown() {
	    return this.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0);
	};

	PK_RegularOutputChannel() {
	    return this.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0);
	};

	PK_ReproducibleResourceLimit() {
	    return this.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0);
	};

	PK_RightAssoc() {
	    return this.getToken(SMTLIBv2Parser.PK_RightAssoc, 0);
	};

	PK_SmtLibVersion() {
	    return this.getToken(SMTLIBv2Parser.PK_SmtLibVersion, 0);
	};

	PK_Sorts() {
	    return this.getToken(SMTLIBv2Parser.PK_Sorts, 0);
	};

	PK_SortsDescription() {
	    return this.getToken(SMTLIBv2Parser.PK_SortsDescription, 0);
	};

	PK_Source() {
	    return this.getToken(SMTLIBv2Parser.PK_Source, 0);
	};

	PK_Status() {
	    return this.getToken(SMTLIBv2Parser.PK_Status, 0);
	};

	PK_Theories() {
	    return this.getToken(SMTLIBv2Parser.PK_Theories, 0);
	};

	PK_Values() {
	    return this.getToken(SMTLIBv2Parser.PK_Values, 0);
	};

	PK_Verbosity() {
	    return this.getToken(SMTLIBv2Parser.PK_Verbosity, 0);
	};

	PK_Version() {
	    return this.getToken(SMTLIBv2Parser.PK_Version, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterPredefKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitPredefKeyword(this);
		}
	}


}



class SymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_symbol;
    }

	simpleSymbol() {
	    return this.getTypedRuleContext(SimpleSymbolContext,0);
	};

	quotedSymbol() {
	    return this.getTypedRuleContext(QuotedSymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSymbol(this);
		}
	}


}



class NumeralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_numeral;
    }

	Numeral() {
	    return this.getToken(SMTLIBv2Parser.Numeral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterNumeral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitNumeral(this);
		}
	}


}



class DecimalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_decimal;
    }

	Decimal() {
	    return this.getToken(SMTLIBv2Parser.Decimal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterDecimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitDecimal(this);
		}
	}


}



class HexadecimalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_hexadecimal;
    }

	HexDecimal() {
	    return this.getToken(SMTLIBv2Parser.HexDecimal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterHexadecimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitHexadecimal(this);
		}
	}


}



class BinaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_binary;
    }

	Binary() {
	    return this.getToken(SMTLIBv2Parser.Binary, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitBinary(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_string;
    }

	String() {
	    return this.getToken(SMTLIBv2Parser.String, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitString(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_keyword;
    }

	predefKeyword() {
	    return this.getTypedRuleContext(PredefKeywordContext,0);
	};

	Colon() {
	    return this.getToken(SMTLIBv2Parser.Colon, 0);
	};

	simpleSymbol() {
	    return this.getTypedRuleContext(SimpleSymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitKeyword(this);
		}
	}


}



class Spec_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_spec_constant;
    }

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	decimal() {
	    return this.getTypedRuleContext(DecimalContext,0);
	};

	hexadecimal() {
	    return this.getTypedRuleContext(HexadecimalContext,0);
	};

	binary() {
	    return this.getTypedRuleContext(BinaryContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSpec_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSpec_constant(this);
		}
	}


}



class S_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_s_expr;
    }

	spec_constant() {
	    return this.getTypedRuleContext(Spec_constantContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	s_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S_exprContext);
	    } else {
	        return this.getTypedRuleContext(S_exprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterS_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitS_expr(this);
		}
	}


}



class IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_index;
    }

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitIndex(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_identifier;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	GRW_Underscore() {
	    return this.getToken(SMTLIBv2Parser.GRW_Underscore, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	index = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexContext);
	    } else {
	        return this.getTypedRuleContext(IndexContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class Attribute_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_attribute_value;
    }

	spec_constant() {
	    return this.getTypedRuleContext(Spec_constantContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	s_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(S_exprContext);
	    } else {
	        return this.getTypedRuleContext(S_exprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterAttribute_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitAttribute_value(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_attribute;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	attribute_value() {
	    return this.getTypedRuleContext(Attribute_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitAttribute(this);
		}
	}


}



class SortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_sort;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	sort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortContext);
	    } else {
	        return this.getTypedRuleContext(SortContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSort(this);
		}
	}


}



class Qual_identiferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_qual_identifer;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	GRW_As() {
	    return this.getToken(SMTLIBv2Parser.GRW_As, 0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterQual_identifer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitQual_identifer(this);
		}
	}


}



class Var_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_var_binding;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterVar_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitVar_binding(this);
		}
	}


}



class Sorted_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_sorted_var;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSorted_var(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSorted_var(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_pattern;
    }

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitPattern(this);
		}
	}


}



class Match_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_match_case;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterMatch_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitMatch_case(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_term;
    }

	spec_constant() {
	    return this.getTypedRuleContext(Spec_constantContext,0);
	};

	qual_identifer() {
	    return this.getTypedRuleContext(Qual_identiferContext,0);
	};

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	GRW_Let() {
	    return this.getToken(SMTLIBv2Parser.GRW_Let, 0);
	};

	var_binding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_bindingContext);
	    } else {
	        return this.getTypedRuleContext(Var_bindingContext,i);
	    }
	};

	GRW_Forall() {
	    return this.getToken(SMTLIBv2Parser.GRW_Forall, 0);
	};

	sorted_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sorted_varContext);
	    } else {
	        return this.getTypedRuleContext(Sorted_varContext,i);
	    }
	};

	GRW_Exists() {
	    return this.getToken(SMTLIBv2Parser.GRW_Exists, 0);
	};

	GRW_Match() {
	    return this.getToken(SMTLIBv2Parser.GRW_Match, 0);
	};

	match_case = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Match_caseContext);
	    } else {
	        return this.getTypedRuleContext(Match_caseContext,i);
	    }
	};

	GRW_Exclamation() {
	    return this.getToken(SMTLIBv2Parser.GRW_Exclamation, 0);
	};

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitTerm(this);
		}
	}


}



class Sort_symbol_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_sort_symbol_decl;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSort_symbol_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSort_symbol_decl(this);
		}
	}


}



class Meta_spec_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_meta_spec_constant;
    }

	GRW_Numeral() {
	    return this.getToken(SMTLIBv2Parser.GRW_Numeral, 0);
	};

	GRW_Decimal() {
	    return this.getToken(SMTLIBv2Parser.GRW_Decimal, 0);
	};

	GRW_String() {
	    return this.getToken(SMTLIBv2Parser.GRW_String, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterMeta_spec_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitMeta_spec_constant(this);
		}
	}


}



class Fun_symbol_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_fun_symbol_decl;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	spec_constant() {
	    return this.getTypedRuleContext(Spec_constantContext,0);
	};

	sort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortContext);
	    } else {
	        return this.getTypedRuleContext(SortContext,i);
	    }
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	meta_spec_constant() {
	    return this.getTypedRuleContext(Meta_spec_constantContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterFun_symbol_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitFun_symbol_decl(this);
		}
	}


}



class Par_fun_symbol_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_par_fun_symbol_decl;
    }

	fun_symbol_decl() {
	    return this.getTypedRuleContext(Fun_symbol_declContext,0);
	};

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	GRW_Par() {
	    return this.getToken(SMTLIBv2Parser.GRW_Par, 0);
	};

	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	sort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortContext);
	    } else {
	        return this.getTypedRuleContext(SortContext,i);
	    }
	};

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterPar_fun_symbol_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitPar_fun_symbol_decl(this);
		}
	}


}



class Theory_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_theory_attribute;
    }

	PK_Sorts() {
	    return this.getToken(SMTLIBv2Parser.PK_Sorts, 0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	sort_symbol_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sort_symbol_declContext);
	    } else {
	        return this.getTypedRuleContext(Sort_symbol_declContext,i);
	    }
	};

	PK_Funs() {
	    return this.getToken(SMTLIBv2Parser.PK_Funs, 0);
	};

	par_fun_symbol_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Par_fun_symbol_declContext);
	    } else {
	        return this.getTypedRuleContext(Par_fun_symbol_declContext,i);
	    }
	};

	PK_SortsDescription() {
	    return this.getToken(SMTLIBv2Parser.PK_SortsDescription, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PK_FunsDescription() {
	    return this.getToken(SMTLIBv2Parser.PK_FunsDescription, 0);
	};

	PK_Definition() {
	    return this.getToken(SMTLIBv2Parser.PK_Definition, 0);
	};

	PK_Values() {
	    return this.getToken(SMTLIBv2Parser.PK_Values, 0);
	};

	PK_Notes() {
	    return this.getToken(SMTLIBv2Parser.PK_Notes, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterTheory_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitTheory_attribute(this);
		}
	}


}



class Theory_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_theory_decl;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	PS_Theory() {
	    return this.getToken(SMTLIBv2Parser.PS_Theory, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	theory_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Theory_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Theory_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterTheory_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitTheory_decl(this);
		}
	}


}



class Logic_attribueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_logic_attribue;
    }

	PK_Theories() {
	    return this.getToken(SMTLIBv2Parser.PK_Theories, 0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	PK_Language() {
	    return this.getToken(SMTLIBv2Parser.PK_Language, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PK_Extension() {
	    return this.getToken(SMTLIBv2Parser.PK_Extension, 0);
	};

	PK_Values() {
	    return this.getToken(SMTLIBv2Parser.PK_Values, 0);
	};

	PK_Notes() {
	    return this.getToken(SMTLIBv2Parser.PK_Notes, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterLogic_attribue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitLogic_attribue(this);
		}
	}


}



class LogicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_logic;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	PS_Logic() {
	    return this.getToken(SMTLIBv2Parser.PS_Logic, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	logic_attribue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logic_attribueContext);
	    } else {
	        return this.getTypedRuleContext(Logic_attribueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterLogic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitLogic(this);
		}
	}


}



class Sort_decContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_sort_dec;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSort_dec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSort_dec(this);
		}
	}


}



class Selector_decContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_selector_dec;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSelector_dec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSelector_dec(this);
		}
	}


}



class Constructor_decContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_constructor_dec;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	selector_dec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Selector_decContext);
	    } else {
	        return this.getTypedRuleContext(Selector_decContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterConstructor_dec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitConstructor_dec(this);
		}
	}


}



class Datatype_decContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_datatype_dec;
    }

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	constructor_dec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Constructor_decContext);
	    } else {
	        return this.getTypedRuleContext(Constructor_decContext,i);
	    }
	};

	GRW_Par() {
	    return this.getToken(SMTLIBv2Parser.GRW_Par, 0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterDatatype_dec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitDatatype_dec(this);
		}
	}


}



class Function_decContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_function_dec;
    }

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	sorted_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sorted_varContext);
	    } else {
	        return this.getTypedRuleContext(Sorted_varContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterFunction_dec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitFunction_dec(this);
		}
	}


}



class Function_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_function_def;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	sorted_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sorted_varContext);
	    } else {
	        return this.getTypedRuleContext(Sorted_varContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterFunction_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitFunction_def(this);
		}
	}


}



class Prop_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_prop_literal;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	PS_Not() {
	    return this.getToken(SMTLIBv2Parser.PS_Not, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterProp_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitProp_literal(this);
		}
	}


}



class ScriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_script;
    }

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterScript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitScript(this);
		}
	}


}



class Cmd_assertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_assert;
    }

	CMD_Assert() {
	    return this.getToken(SMTLIBv2Parser.CMD_Assert, 0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_assert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_assert(this);
		}
	}


}



class Cmd_checkSatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_checkSat;
    }

	CMD_CheckSat() {
	    return this.getToken(SMTLIBv2Parser.CMD_CheckSat, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_checkSat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_checkSat(this);
		}
	}


}



class Cmd_checkSatAssumingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_checkSatAssuming;
    }

	CMD_CheckSatAssuming() {
	    return this.getToken(SMTLIBv2Parser.CMD_CheckSatAssuming, 0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	prop_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Prop_literalContext);
	    } else {
	        return this.getTypedRuleContext(Prop_literalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_checkSatAssuming(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_checkSatAssuming(this);
		}
	}


}



class Cmd_declareConstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_declareConst;
    }

	CMD_DeclareConst() {
	    return this.getToken(SMTLIBv2Parser.CMD_DeclareConst, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_declareConst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_declareConst(this);
		}
	}


}



class Cmd_declareDatatypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_declareDatatype;
    }

	CMD_DeclareDatatype() {
	    return this.getToken(SMTLIBv2Parser.CMD_DeclareDatatype, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	datatype_dec() {
	    return this.getTypedRuleContext(Datatype_decContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_declareDatatype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_declareDatatype(this);
		}
	}


}



class Cmd_declareDatatypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_declareDatatypes;
    }

	CMD_DeclareDatatypes() {
	    return this.getToken(SMTLIBv2Parser.CMD_DeclareDatatypes, 0);
	};

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	sort_dec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sort_decContext);
	    } else {
	        return this.getTypedRuleContext(Sort_decContext,i);
	    }
	};

	datatype_dec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Datatype_decContext);
	    } else {
	        return this.getTypedRuleContext(Datatype_decContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_declareDatatypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_declareDatatypes(this);
		}
	}


}



class Cmd_declareFunContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_declareFun;
    }

	CMD_DeclareFun() {
	    return this.getToken(SMTLIBv2Parser.CMD_DeclareFun, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	sort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortContext);
	    } else {
	        return this.getTypedRuleContext(SortContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_declareFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_declareFun(this);
		}
	}


}



class Cmd_declareSortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_declareSort;
    }

	CMD_DeclareSort() {
	    return this.getToken(SMTLIBv2Parser.CMD_DeclareSort, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_declareSort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_declareSort(this);
		}
	}


}



class Cmd_defineFunContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_defineFun;
    }

	CMD_DefineFun() {
	    return this.getToken(SMTLIBv2Parser.CMD_DefineFun, 0);
	};

	function_def() {
	    return this.getTypedRuleContext(Function_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_defineFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_defineFun(this);
		}
	}


}



class Cmd_defineFunRecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_defineFunRec;
    }

	CMD_DefineFunRec() {
	    return this.getToken(SMTLIBv2Parser.CMD_DefineFunRec, 0);
	};

	function_def() {
	    return this.getTypedRuleContext(Function_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_defineFunRec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_defineFunRec(this);
		}
	}


}



class Cmd_defineFunsRecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_defineFunsRec;
    }

	CMD_DefineFunsRec() {
	    return this.getToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0);
	};

	ParOpen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParOpen);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParOpen, i);
	    }
	};


	ParClose = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SMTLIBv2Parser.ParClose);
	    } else {
	        return this.getToken(SMTLIBv2Parser.ParClose, i);
	    }
	};


	function_dec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_decContext);
	    } else {
	        return this.getTypedRuleContext(Function_decContext,i);
	    }
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_defineFunsRec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_defineFunsRec(this);
		}
	}


}



class Cmd_defineSortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_defineSort;
    }

	CMD_DefineSort() {
	    return this.getToken(SMTLIBv2Parser.CMD_DefineSort, 0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	sort() {
	    return this.getTypedRuleContext(SortContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_defineSort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_defineSort(this);
		}
	}


}



class Cmd_echoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_echo;
    }

	CMD_Echo() {
	    return this.getToken(SMTLIBv2Parser.CMD_Echo, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_echo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_echo(this);
		}
	}


}



class Cmd_exitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_exit;
    }

	CMD_Exit() {
	    return this.getToken(SMTLIBv2Parser.CMD_Exit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_exit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_exit(this);
		}
	}


}



class Cmd_getAssertionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getAssertions;
    }

	CMD_GetAssertions() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetAssertions, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getAssertions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getAssertions(this);
		}
	}


}



class Cmd_getAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getAssignment;
    }

	CMD_GetAssignment() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetAssignment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getAssignment(this);
		}
	}


}



class Cmd_getInfoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getInfo;
    }

	CMD_GetInfo() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetInfo, 0);
	};

	info_flag() {
	    return this.getTypedRuleContext(Info_flagContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getInfo(this);
		}
	}


}



class Cmd_getModelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getModel;
    }

	CMD_GetModel() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetModel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getModel(this);
		}
	}


}



class Cmd_getOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getOption;
    }

	CMD_GetOption() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetOption, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getOption(this);
		}
	}


}



class Cmd_getProofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getProof;
    }

	CMD_GetProof() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetProof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getProof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getProof(this);
		}
	}


}



class Cmd_getUnsatAssumptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getUnsatAssumptions;
    }

	CMD_GetUnsatAssumptions() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetUnsatAssumptions, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getUnsatAssumptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getUnsatAssumptions(this);
		}
	}


}



class Cmd_getUnsatCoreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getUnsatCore;
    }

	CMD_GetUnsatCore() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetUnsatCore, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getUnsatCore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getUnsatCore(this);
		}
	}


}



class Cmd_getValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_getValue;
    }

	CMD_GetValue() {
	    return this.getToken(SMTLIBv2Parser.CMD_GetValue, 0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_getValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_getValue(this);
		}
	}


}



class Cmd_popContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_pop;
    }

	CMD_Pop() {
	    return this.getToken(SMTLIBv2Parser.CMD_Pop, 0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_pop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_pop(this);
		}
	}


}



class Cmd_pushContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_push;
    }

	CMD_Push() {
	    return this.getToken(SMTLIBv2Parser.CMD_Push, 0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_push(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_push(this);
		}
	}


}



class Cmd_resetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_reset;
    }

	CMD_Reset() {
	    return this.getToken(SMTLIBv2Parser.CMD_Reset, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_reset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_reset(this);
		}
	}


}



class Cmd_resetAssertionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_resetAssertions;
    }

	CMD_ResetAssertions() {
	    return this.getToken(SMTLIBv2Parser.CMD_ResetAssertions, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_resetAssertions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_resetAssertions(this);
		}
	}


}



class Cmd_setInfoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_setInfo;
    }

	CMD_SetInfo() {
	    return this.getToken(SMTLIBv2Parser.CMD_SetInfo, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_setInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_setInfo(this);
		}
	}


}



class Cmd_setLogicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_setLogic;
    }

	CMD_SetLogic() {
	    return this.getToken(SMTLIBv2Parser.CMD_SetLogic, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_setLogic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_setLogic(this);
		}
	}


}



class Cmd_setOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_cmd_setOption;
    }

	CMD_SetOption() {
	    return this.getToken(SMTLIBv2Parser.CMD_SetOption, 0);
	};

	option() {
	    return this.getTypedRuleContext(OptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCmd_setOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCmd_setOption(this);
		}
	}


}



class CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_command;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	cmd_assert() {
	    return this.getTypedRuleContext(Cmd_assertContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	cmd_checkSat() {
	    return this.getTypedRuleContext(Cmd_checkSatContext,0);
	};

	cmd_checkSatAssuming() {
	    return this.getTypedRuleContext(Cmd_checkSatAssumingContext,0);
	};

	cmd_declareConst() {
	    return this.getTypedRuleContext(Cmd_declareConstContext,0);
	};

	cmd_declareDatatype() {
	    return this.getTypedRuleContext(Cmd_declareDatatypeContext,0);
	};

	cmd_declareDatatypes() {
	    return this.getTypedRuleContext(Cmd_declareDatatypesContext,0);
	};

	cmd_declareFun() {
	    return this.getTypedRuleContext(Cmd_declareFunContext,0);
	};

	cmd_declareSort() {
	    return this.getTypedRuleContext(Cmd_declareSortContext,0);
	};

	cmd_defineFun() {
	    return this.getTypedRuleContext(Cmd_defineFunContext,0);
	};

	cmd_defineFunRec() {
	    return this.getTypedRuleContext(Cmd_defineFunRecContext,0);
	};

	cmd_defineFunsRec() {
	    return this.getTypedRuleContext(Cmd_defineFunsRecContext,0);
	};

	cmd_defineSort() {
	    return this.getTypedRuleContext(Cmd_defineSortContext,0);
	};

	cmd_echo() {
	    return this.getTypedRuleContext(Cmd_echoContext,0);
	};

	cmd_exit() {
	    return this.getTypedRuleContext(Cmd_exitContext,0);
	};

	cmd_getAssertions() {
	    return this.getTypedRuleContext(Cmd_getAssertionsContext,0);
	};

	cmd_getAssignment() {
	    return this.getTypedRuleContext(Cmd_getAssignmentContext,0);
	};

	cmd_getInfo() {
	    return this.getTypedRuleContext(Cmd_getInfoContext,0);
	};

	cmd_getModel() {
	    return this.getTypedRuleContext(Cmd_getModelContext,0);
	};

	cmd_getOption() {
	    return this.getTypedRuleContext(Cmd_getOptionContext,0);
	};

	cmd_getProof() {
	    return this.getTypedRuleContext(Cmd_getProofContext,0);
	};

	cmd_getUnsatAssumptions() {
	    return this.getTypedRuleContext(Cmd_getUnsatAssumptionsContext,0);
	};

	cmd_getUnsatCore() {
	    return this.getTypedRuleContext(Cmd_getUnsatCoreContext,0);
	};

	cmd_getValue() {
	    return this.getTypedRuleContext(Cmd_getValueContext,0);
	};

	cmd_pop() {
	    return this.getTypedRuleContext(Cmd_popContext,0);
	};

	cmd_push() {
	    return this.getTypedRuleContext(Cmd_pushContext,0);
	};

	cmd_reset() {
	    return this.getTypedRuleContext(Cmd_resetContext,0);
	};

	cmd_resetAssertions() {
	    return this.getTypedRuleContext(Cmd_resetAssertionsContext,0);
	};

	cmd_setInfo() {
	    return this.getTypedRuleContext(Cmd_setInfoContext,0);
	};

	cmd_setLogic() {
	    return this.getTypedRuleContext(Cmd_setLogicContext,0);
	};

	cmd_setOption() {
	    return this.getTypedRuleContext(Cmd_setOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCommand(this);
		}
	}


}



class B_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_b_value;
    }

	PS_True() {
	    return this.getToken(SMTLIBv2Parser.PS_True, 0);
	};

	PS_False() {
	    return this.getToken(SMTLIBv2Parser.PS_False, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterB_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitB_value(this);
		}
	}


}



class OptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_option;
    }

	PK_DiagnosticOutputChannel() {
	    return this.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PK_GlobalDeclarations() {
	    return this.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0);
	};

	b_value() {
	    return this.getTypedRuleContext(B_valueContext,0);
	};

	PK_InteractiveMode() {
	    return this.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0);
	};

	PK_PrintSuccess() {
	    return this.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0);
	};

	PK_ProduceAssertions() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0);
	};

	PK_ProduceAssignments() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0);
	};

	PK_ProduceModels() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceModels, 0);
	};

	PK_ProduceProofs() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0);
	};

	PK_ProduceUnsatAssumptions() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0);
	};

	PK_ProduceUnsatCores() {
	    return this.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0);
	};

	PK_RandomSeed() {
	    return this.getToken(SMTLIBv2Parser.PK_RandomSeed, 0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	PK_RegularOutputChannel() {
	    return this.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0);
	};

	PK_ReproducibleResourceLimit() {
	    return this.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0);
	};

	PK_Verbosity() {
	    return this.getToken(SMTLIBv2Parser.PK_Verbosity, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitOption(this);
		}
	}


}



class Info_flagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_info_flag;
    }

	PK_AllStatistics() {
	    return this.getToken(SMTLIBv2Parser.PK_AllStatistics, 0);
	};

	PK_AssertionStackLevels() {
	    return this.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0);
	};

	PK_Authors() {
	    return this.getToken(SMTLIBv2Parser.PK_Authors, 0);
	};

	PK_ErrorBehaviour() {
	    return this.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0);
	};

	PK_Name() {
	    return this.getToken(SMTLIBv2Parser.PK_Name, 0);
	};

	PK_ReasonUnknown() {
	    return this.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0);
	};

	PK_Version() {
	    return this.getToken(SMTLIBv2Parser.PK_Version, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterInfo_flag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitInfo_flag(this);
		}
	}


}



class Error_behaviourContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_error_behaviour;
    }

	PS_ImmediateExit() {
	    return this.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0);
	};

	PS_ContinuedExecution() {
	    return this.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterError_behaviour(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitError_behaviour(this);
		}
	}


}



class Reason_unknownContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_reason_unknown;
    }

	PS_Memout() {
	    return this.getToken(SMTLIBv2Parser.PS_Memout, 0);
	};

	PS_Incomplete() {
	    return this.getToken(SMTLIBv2Parser.PS_Incomplete, 0);
	};

	s_expr() {
	    return this.getTypedRuleContext(S_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterReason_unknown(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitReason_unknown(this);
		}
	}


}



class Model_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_model_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	cmd_defineFun() {
	    return this.getTypedRuleContext(Cmd_defineFunContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	cmd_defineFunRec() {
	    return this.getTypedRuleContext(Cmd_defineFunRecContext,0);
	};

	cmd_defineFunsRec() {
	    return this.getTypedRuleContext(Cmd_defineFunsRecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterModel_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitModel_response(this);
		}
	}


}



class Info_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_info_response;
    }

	PK_AssertionStackLevels() {
	    return this.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0);
	};

	numeral() {
	    return this.getTypedRuleContext(NumeralContext,0);
	};

	PK_Authors() {
	    return this.getToken(SMTLIBv2Parser.PK_Authors, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PK_ErrorBehaviour() {
	    return this.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0);
	};

	error_behaviour() {
	    return this.getTypedRuleContext(Error_behaviourContext,0);
	};

	PK_Name() {
	    return this.getToken(SMTLIBv2Parser.PK_Name, 0);
	};

	PK_ReasonUnknown() {
	    return this.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0);
	};

	reason_unknown() {
	    return this.getTypedRuleContext(Reason_unknownContext,0);
	};

	PK_Version() {
	    return this.getToken(SMTLIBv2Parser.PK_Version, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterInfo_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitInfo_response(this);
		}
	}


}



class Valuation_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_valuation_pair;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterValuation_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitValuation_pair(this);
		}
	}


}



class T_valuation_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_t_valuation_pair;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	b_value() {
	    return this.getTypedRuleContext(B_valueContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterT_valuation_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitT_valuation_pair(this);
		}
	}


}



class Check_sat_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_check_sat_response;
    }

	PS_Sat() {
	    return this.getToken(SMTLIBv2Parser.PS_Sat, 0);
	};

	PS_Unsat() {
	    return this.getToken(SMTLIBv2Parser.PS_Unsat, 0);
	};

	PS_Unknown() {
	    return this.getToken(SMTLIBv2Parser.PS_Unknown, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterCheck_sat_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitCheck_sat_response(this);
		}
	}


}



class Echo_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_echo_response;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterEcho_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitEcho_response(this);
		}
	}


}



class Get_assertions_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_assertions_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_assertions_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_assertions_response(this);
		}
	}


}



class Get_assignment_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_assignment_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	t_valuation_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(T_valuation_pairContext);
	    } else {
	        return this.getTypedRuleContext(T_valuation_pairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_assignment_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_assignment_response(this);
		}
	}


}



class Get_info_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_info_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	info_response = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Info_responseContext);
	    } else {
	        return this.getTypedRuleContext(Info_responseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_info_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_info_response(this);
		}
	}


}



class Get_model_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_model_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	RS_Model() {
	    return this.getToken(SMTLIBv2Parser.RS_Model, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	model_response = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Model_responseContext);
	    } else {
	        return this.getTypedRuleContext(Model_responseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_model_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_model_response(this);
		}
	}


}



class Get_option_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_option_response;
    }

	attribute_value() {
	    return this.getTypedRuleContext(Attribute_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_option_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_option_response(this);
		}
	}


}



class Get_proof_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_proof_response;
    }

	s_expr() {
	    return this.getTypedRuleContext(S_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_proof_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_proof_response(this);
		}
	}


}



class Get_unsat_assump_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_unsat_assump_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_unsat_assump_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_unsat_assump_response(this);
		}
	}


}



class Get_unsat_core_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_unsat_core_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_unsat_core_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_unsat_core_response(this);
		}
	}


}



class Get_value_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_get_value_response;
    }

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	valuation_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Valuation_pairContext);
	    } else {
	        return this.getTypedRuleContext(Valuation_pairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGet_value_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGet_value_response(this);
		}
	}


}



class Specific_success_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_specific_success_response;
    }

	check_sat_response() {
	    return this.getTypedRuleContext(Check_sat_responseContext,0);
	};

	echo_response() {
	    return this.getTypedRuleContext(Echo_responseContext,0);
	};

	get_assertions_response() {
	    return this.getTypedRuleContext(Get_assertions_responseContext,0);
	};

	get_assignment_response() {
	    return this.getTypedRuleContext(Get_assignment_responseContext,0);
	};

	get_info_response() {
	    return this.getTypedRuleContext(Get_info_responseContext,0);
	};

	get_model_response() {
	    return this.getTypedRuleContext(Get_model_responseContext,0);
	};

	get_option_response() {
	    return this.getTypedRuleContext(Get_option_responseContext,0);
	};

	get_proof_response() {
	    return this.getTypedRuleContext(Get_proof_responseContext,0);
	};

	get_unsat_assump_response() {
	    return this.getTypedRuleContext(Get_unsat_assump_responseContext,0);
	};

	get_unsat_core_response() {
	    return this.getTypedRuleContext(Get_unsat_core_responseContext,0);
	};

	get_value_response() {
	    return this.getTypedRuleContext(Get_value_responseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterSpecific_success_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitSpecific_success_response(this);
		}
	}


}



class General_responseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SMTLIBv2Parser.RULE_general_response;
    }

	PS_Success() {
	    return this.getToken(SMTLIBv2Parser.PS_Success, 0);
	};

	specific_success_response() {
	    return this.getTypedRuleContext(Specific_success_responseContext,0);
	};

	PS_Unsupported() {
	    return this.getToken(SMTLIBv2Parser.PS_Unsupported, 0);
	};

	ParOpen() {
	    return this.getToken(SMTLIBv2Parser.ParOpen, 0);
	};

	PS_Error() {
	    return this.getToken(SMTLIBv2Parser.PS_Error, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	ParClose() {
	    return this.getToken(SMTLIBv2Parser.ParClose, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.enterGeneral_response(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SMTLIBv2Listener ) {
	        listener.exitGeneral_response(this);
		}
	}


}




SMTLIBv2Parser.StartContext = StartContext; 
SMTLIBv2Parser.GeneralReservedWordContext = GeneralReservedWordContext; 
SMTLIBv2Parser.SimpleSymbolContext = SimpleSymbolContext; 
SMTLIBv2Parser.QuotedSymbolContext = QuotedSymbolContext; 
SMTLIBv2Parser.PredefSymbolContext = PredefSymbolContext; 
SMTLIBv2Parser.PredefKeywordContext = PredefKeywordContext; 
SMTLIBv2Parser.SymbolContext = SymbolContext; 
SMTLIBv2Parser.NumeralContext = NumeralContext; 
SMTLIBv2Parser.DecimalContext = DecimalContext; 
SMTLIBv2Parser.HexadecimalContext = HexadecimalContext; 
SMTLIBv2Parser.BinaryContext = BinaryContext; 
SMTLIBv2Parser.StringContext = StringContext; 
SMTLIBv2Parser.KeywordContext = KeywordContext; 
SMTLIBv2Parser.Spec_constantContext = Spec_constantContext; 
SMTLIBv2Parser.S_exprContext = S_exprContext; 
SMTLIBv2Parser.IndexContext = IndexContext; 
SMTLIBv2Parser.IdentifierContext = IdentifierContext; 
SMTLIBv2Parser.Attribute_valueContext = Attribute_valueContext; 
SMTLIBv2Parser.AttributeContext = AttributeContext; 
SMTLIBv2Parser.SortContext = SortContext; 
SMTLIBv2Parser.Qual_identiferContext = Qual_identiferContext; 
SMTLIBv2Parser.Var_bindingContext = Var_bindingContext; 
SMTLIBv2Parser.Sorted_varContext = Sorted_varContext; 
SMTLIBv2Parser.PatternContext = PatternContext; 
SMTLIBv2Parser.Match_caseContext = Match_caseContext; 
SMTLIBv2Parser.TermContext = TermContext; 
SMTLIBv2Parser.Sort_symbol_declContext = Sort_symbol_declContext; 
SMTLIBv2Parser.Meta_spec_constantContext = Meta_spec_constantContext; 
SMTLIBv2Parser.Fun_symbol_declContext = Fun_symbol_declContext; 
SMTLIBv2Parser.Par_fun_symbol_declContext = Par_fun_symbol_declContext; 
SMTLIBv2Parser.Theory_attributeContext = Theory_attributeContext; 
SMTLIBv2Parser.Theory_declContext = Theory_declContext; 
SMTLIBv2Parser.Logic_attribueContext = Logic_attribueContext; 
SMTLIBv2Parser.LogicContext = LogicContext; 
SMTLIBv2Parser.Sort_decContext = Sort_decContext; 
SMTLIBv2Parser.Selector_decContext = Selector_decContext; 
SMTLIBv2Parser.Constructor_decContext = Constructor_decContext; 
SMTLIBv2Parser.Datatype_decContext = Datatype_decContext; 
SMTLIBv2Parser.Function_decContext = Function_decContext; 
SMTLIBv2Parser.Function_defContext = Function_defContext; 
SMTLIBv2Parser.Prop_literalContext = Prop_literalContext; 
SMTLIBv2Parser.ScriptContext = ScriptContext; 
SMTLIBv2Parser.Cmd_assertContext = Cmd_assertContext; 
SMTLIBv2Parser.Cmd_checkSatContext = Cmd_checkSatContext; 
SMTLIBv2Parser.Cmd_checkSatAssumingContext = Cmd_checkSatAssumingContext; 
SMTLIBv2Parser.Cmd_declareConstContext = Cmd_declareConstContext; 
SMTLIBv2Parser.Cmd_declareDatatypeContext = Cmd_declareDatatypeContext; 
SMTLIBv2Parser.Cmd_declareDatatypesContext = Cmd_declareDatatypesContext; 
SMTLIBv2Parser.Cmd_declareFunContext = Cmd_declareFunContext; 
SMTLIBv2Parser.Cmd_declareSortContext = Cmd_declareSortContext; 
SMTLIBv2Parser.Cmd_defineFunContext = Cmd_defineFunContext; 
SMTLIBv2Parser.Cmd_defineFunRecContext = Cmd_defineFunRecContext; 
SMTLIBv2Parser.Cmd_defineFunsRecContext = Cmd_defineFunsRecContext; 
SMTLIBv2Parser.Cmd_defineSortContext = Cmd_defineSortContext; 
SMTLIBv2Parser.Cmd_echoContext = Cmd_echoContext; 
SMTLIBv2Parser.Cmd_exitContext = Cmd_exitContext; 
SMTLIBv2Parser.Cmd_getAssertionsContext = Cmd_getAssertionsContext; 
SMTLIBv2Parser.Cmd_getAssignmentContext = Cmd_getAssignmentContext; 
SMTLIBv2Parser.Cmd_getInfoContext = Cmd_getInfoContext; 
SMTLIBv2Parser.Cmd_getModelContext = Cmd_getModelContext; 
SMTLIBv2Parser.Cmd_getOptionContext = Cmd_getOptionContext; 
SMTLIBv2Parser.Cmd_getProofContext = Cmd_getProofContext; 
SMTLIBv2Parser.Cmd_getUnsatAssumptionsContext = Cmd_getUnsatAssumptionsContext; 
SMTLIBv2Parser.Cmd_getUnsatCoreContext = Cmd_getUnsatCoreContext; 
SMTLIBv2Parser.Cmd_getValueContext = Cmd_getValueContext; 
SMTLIBv2Parser.Cmd_popContext = Cmd_popContext; 
SMTLIBv2Parser.Cmd_pushContext = Cmd_pushContext; 
SMTLIBv2Parser.Cmd_resetContext = Cmd_resetContext; 
SMTLIBv2Parser.Cmd_resetAssertionsContext = Cmd_resetAssertionsContext; 
SMTLIBv2Parser.Cmd_setInfoContext = Cmd_setInfoContext; 
SMTLIBv2Parser.Cmd_setLogicContext = Cmd_setLogicContext; 
SMTLIBv2Parser.Cmd_setOptionContext = Cmd_setOptionContext; 
SMTLIBv2Parser.CommandContext = CommandContext; 
SMTLIBv2Parser.B_valueContext = B_valueContext; 
SMTLIBv2Parser.OptionContext = OptionContext; 
SMTLIBv2Parser.Info_flagContext = Info_flagContext; 
SMTLIBv2Parser.Error_behaviourContext = Error_behaviourContext; 
SMTLIBv2Parser.Reason_unknownContext = Reason_unknownContext; 
SMTLIBv2Parser.Model_responseContext = Model_responseContext; 
SMTLIBv2Parser.Info_responseContext = Info_responseContext; 
SMTLIBv2Parser.Valuation_pairContext = Valuation_pairContext; 
SMTLIBv2Parser.T_valuation_pairContext = T_valuation_pairContext; 
SMTLIBv2Parser.Check_sat_responseContext = Check_sat_responseContext; 
SMTLIBv2Parser.Echo_responseContext = Echo_responseContext; 
SMTLIBv2Parser.Get_assertions_responseContext = Get_assertions_responseContext; 
SMTLIBv2Parser.Get_assignment_responseContext = Get_assignment_responseContext; 
SMTLIBv2Parser.Get_info_responseContext = Get_info_responseContext; 
SMTLIBv2Parser.Get_model_responseContext = Get_model_responseContext; 
SMTLIBv2Parser.Get_option_responseContext = Get_option_responseContext; 
SMTLIBv2Parser.Get_proof_responseContext = Get_proof_responseContext; 
SMTLIBv2Parser.Get_unsat_assump_responseContext = Get_unsat_assump_responseContext; 
SMTLIBv2Parser.Get_unsat_core_responseContext = Get_unsat_core_responseContext; 
SMTLIBv2Parser.Get_value_responseContext = Get_value_responseContext; 
SMTLIBv2Parser.Specific_success_responseContext = Specific_success_responseContext; 
SMTLIBv2Parser.General_responseContext = General_responseContext; 
