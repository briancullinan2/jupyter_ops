// Generated from Resources/Parsers/pcre/PCRE.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import PCREListener from './PCREListener.js';
const serializedATN = [4,1,125,948,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,1,1,1,1,1,5,1,81,8,1,10,1,12,1,84,9,
1,1,2,5,2,87,8,2,10,2,12,2,90,9,2,1,3,1,3,3,3,94,8,3,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,3,4,120,8,4,1,5,1,5,1,5,3,5,125,8,5,1,6,1,6,1,6,1,6,1,6,4,6,132,8,6,
11,6,12,6,133,1,6,1,6,1,6,1,6,1,6,1,6,5,6,142,8,6,10,6,12,6,145,9,6,1,6,
1,6,1,6,1,6,4,6,151,8,6,11,6,12,6,152,1,6,1,6,1,6,1,6,1,6,1,6,4,6,161,8,
6,11,6,12,6,162,1,6,1,6,1,6,1,6,1,6,5,6,170,8,6,10,6,12,6,173,9,6,1,6,1,
6,1,6,4,6,178,8,6,11,6,12,6,179,1,6,1,6,3,6,184,8,6,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
3,7,227,8,7,1,8,1,8,1,8,3,8,232,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
1,9,1,9,3,9,263,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
3,10,290,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,3,12,352,8,12,1,13,4,13,355,8,13,11,13,12,13,356,
1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
387,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,467,8,16,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,3,17,477,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,3,17,490,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,3,17,503,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,3,17,517,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,3,17,531,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
3,17,544,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,556,
8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,570,
8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,3,17,587,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,3,17,604,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,3,17,616,8,17,1,17,1,17,3,17,620,8,17,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,637,8,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,3,18,646,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,722,8,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,3,19,785,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
797,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,825,
8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,834,8,22,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
23,3,23,855,8,23,1,24,1,24,3,24,859,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,3,25,873,8,25,1,26,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,3,26,901,8,26,1,27,1,27,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,3,28,914,8,28,1,29,1,29,1,30,4,30,919,8,30,11,30,
12,30,920,1,31,1,31,1,32,1,32,1,33,1,33,3,33,929,8,33,1,33,1,33,1,33,5,33,
934,8,33,10,33,12,33,937,9,33,1,34,4,34,940,8,34,11,34,12,34,941,1,35,1,
35,1,36,1,36,1,36,0,0,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,6,6,0,71,71,75,
75,81,81,86,86,98,98,109,109,2,0,115,117,124,124,2,0,115,121,124,124,1,0,
115,124,1,0,53,53,1,0,63,114,1097,0,74,1,0,0,0,2,77,1,0,0,0,4,88,1,0,0,0,
6,91,1,0,0,0,8,119,1,0,0,0,10,124,1,0,0,0,12,183,1,0,0,0,14,226,1,0,0,0,
16,231,1,0,0,0,18,262,1,0,0,0,20,289,1,0,0,0,22,291,1,0,0,0,24,351,1,0,0,
0,26,354,1,0,0,0,28,358,1,0,0,0,30,386,1,0,0,0,32,466,1,0,0,0,34,619,1,0,
0,0,36,721,1,0,0,0,38,784,1,0,0,0,40,796,1,0,0,0,42,824,1,0,0,0,44,833,1,
0,0,0,46,854,1,0,0,0,48,858,1,0,0,0,50,872,1,0,0,0,52,900,1,0,0,0,54,902,
1,0,0,0,56,913,1,0,0,0,58,915,1,0,0,0,60,918,1,0,0,0,62,922,1,0,0,0,64,924,
1,0,0,0,66,928,1,0,0,0,68,939,1,0,0,0,70,943,1,0,0,0,72,945,1,0,0,0,74,75,
3,2,1,0,75,76,5,0,0,1,76,1,1,0,0,0,77,82,3,4,2,0,78,79,5,51,0,0,79,81,3,
4,2,0,80,78,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,3,1,0,0,
0,84,82,1,0,0,0,85,87,3,6,3,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,
88,89,1,0,0,0,89,5,1,0,0,0,90,88,1,0,0,0,91,93,3,42,21,0,92,94,3,8,4,0,93,
92,1,0,0,0,93,94,1,0,0,0,94,7,1,0,0,0,95,96,5,35,0,0,96,120,3,10,5,0,97,
98,5,36,0,0,98,120,3,10,5,0,99,100,5,37,0,0,100,120,3,10,5,0,101,102,5,38,
0,0,102,103,3,54,27,0,103,104,5,39,0,0,104,105,3,10,5,0,105,120,1,0,0,0,
106,107,5,38,0,0,107,108,3,54,27,0,108,109,5,40,0,0,109,110,5,39,0,0,110,
111,3,10,5,0,111,120,1,0,0,0,112,113,5,38,0,0,113,114,3,54,27,0,114,115,
5,40,0,0,115,116,3,54,27,0,116,117,5,39,0,0,117,118,3,10,5,0,118,120,1,0,
0,0,119,95,1,0,0,0,119,97,1,0,0,0,119,99,1,0,0,0,119,101,1,0,0,0,119,106,
1,0,0,0,119,112,1,0,0,0,120,9,1,0,0,0,121,125,5,36,0,0,122,125,5,35,0,0,
123,125,1,0,0,0,124,121,1,0,0,0,124,122,1,0,0,0,124,123,1,0,0,0,125,11,1,
0,0,0,126,127,5,29,0,0,127,128,5,31,0,0,128,129,5,30,0,0,129,131,5,32,0,
0,130,132,3,44,22,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,
134,1,0,0,0,134,135,1,0,0,0,135,136,5,30,0,0,136,184,1,0,0,0,137,138,5,29,
0,0,138,139,5,31,0,0,139,143,5,30,0,0,140,142,3,44,22,0,141,140,1,0,0,0,
142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,143,
1,0,0,0,146,184,5,30,0,0,147,148,5,29,0,0,148,150,5,31,0,0,149,151,3,44,
22,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
154,1,0,0,0,154,155,5,30,0,0,155,184,1,0,0,0,156,157,5,29,0,0,157,158,5,
30,0,0,158,160,5,32,0,0,159,161,3,44,22,0,160,159,1,0,0,0,161,162,1,0,0,
0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,30,0,0,165,184,
1,0,0,0,166,167,5,29,0,0,167,171,5,30,0,0,168,170,3,44,22,0,169,168,1,0,
0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,
171,1,0,0,0,174,184,5,30,0,0,175,177,5,29,0,0,176,178,3,44,22,0,177,176,
1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,
181,182,5,30,0,0,182,184,1,0,0,0,183,126,1,0,0,0,183,137,1,0,0,0,183,147,
1,0,0,0,183,156,1,0,0,0,183,166,1,0,0,0,183,175,1,0,0,0,184,13,1,0,0,0,185,
227,3,16,8,0,186,187,5,49,0,0,187,227,3,54,27,0,188,189,5,49,0,0,189,190,
5,38,0,0,190,191,3,54,27,0,191,192,5,39,0,0,192,227,1,0,0,0,193,194,5,49,
0,0,194,195,5,38,0,0,195,196,5,32,0,0,196,197,3,54,27,0,197,198,5,39,0,0,
198,227,1,0,0,0,199,200,5,50,0,0,200,201,5,54,0,0,201,202,3,64,32,0,202,
203,5,55,0,0,203,227,1,0,0,0,204,205,5,50,0,0,205,206,5,56,0,0,206,207,3,
64,32,0,207,208,5,56,0,0,208,227,1,0,0,0,209,210,5,49,0,0,210,211,5,38,0,
0,211,212,3,64,32,0,212,213,5,39,0,0,213,227,1,0,0,0,214,215,5,50,0,0,215,
216,5,38,0,0,216,217,3,64,32,0,217,218,5,39,0,0,218,227,1,0,0,0,219,220,
5,52,0,0,220,221,5,35,0,0,221,222,5,104,0,0,222,223,5,60,0,0,223,224,3,64,
32,0,224,225,5,53,0,0,225,227,1,0,0,0,226,185,1,0,0,0,226,186,1,0,0,0,226,
188,1,0,0,0,226,193,1,0,0,0,226,199,1,0,0,0,226,204,1,0,0,0,226,209,1,0,
0,0,226,214,1,0,0,0,226,219,1,0,0,0,227,15,1,0,0,0,228,232,3,56,28,0,229,
230,5,10,0,0,230,232,3,62,31,0,231,228,1,0,0,0,231,229,1,0,0,0,232,17,1,
0,0,0,233,234,5,52,0,0,234,235,5,35,0,0,235,236,5,54,0,0,236,237,3,64,32,
0,237,238,5,55,0,0,238,239,3,2,1,0,239,240,5,53,0,0,240,263,1,0,0,0,241,
242,5,52,0,0,242,243,5,35,0,0,243,244,5,56,0,0,244,245,3,64,32,0,245,246,
5,56,0,0,246,247,3,2,1,0,247,248,5,53,0,0,248,263,1,0,0,0,249,250,5,52,0,
0,250,251,5,35,0,0,251,252,5,104,0,0,252,253,5,54,0,0,253,254,3,64,32,0,
254,255,5,55,0,0,255,256,3,2,1,0,256,257,5,53,0,0,257,263,1,0,0,0,258,259,
5,52,0,0,259,260,3,2,1,0,260,261,5,53,0,0,261,263,1,0,0,0,262,233,1,0,0,
0,262,241,1,0,0,0,262,249,1,0,0,0,262,258,1,0,0,0,263,19,1,0,0,0,264,265,
5,52,0,0,265,266,5,35,0,0,266,267,5,58,0,0,267,268,3,2,1,0,268,269,5,53,
0,0,269,290,1,0,0,0,270,271,5,52,0,0,271,272,5,35,0,0,272,273,5,51,0,0,273,
274,3,2,1,0,274,275,5,53,0,0,275,290,1,0,0,0,276,277,5,52,0,0,277,278,5,
35,0,0,278,279,5,55,0,0,279,280,3,2,1,0,280,281,5,53,0,0,281,290,1,0,0,0,
282,283,5,52,0,0,283,284,5,35,0,0,284,285,3,26,13,0,285,286,5,58,0,0,286,
287,3,2,1,0,287,288,5,53,0,0,288,290,1,0,0,0,289,264,1,0,0,0,289,270,1,0,
0,0,289,276,1,0,0,0,289,282,1,0,0,0,290,21,1,0,0,0,291,292,5,52,0,0,292,
293,5,35,0,0,293,294,5,59,0,0,294,295,3,68,34,0,295,296,5,53,0,0,296,23,
1,0,0,0,297,298,5,52,0,0,298,299,5,35,0,0,299,300,3,26,13,0,300,301,5,32,
0,0,301,302,3,26,13,0,302,303,5,53,0,0,303,352,1,0,0,0,304,305,5,52,0,0,
305,306,5,35,0,0,306,307,3,26,13,0,307,308,5,53,0,0,308,352,1,0,0,0,309,
310,5,52,0,0,310,311,5,35,0,0,311,312,5,32,0,0,312,313,3,26,13,0,313,314,
5,53,0,0,314,352,1,0,0,0,315,316,5,52,0,0,316,317,5,37,0,0,317,318,5,102,
0,0,318,319,5,103,0,0,319,320,5,57,0,0,320,321,5,107,0,0,321,322,5,108,0,
0,322,323,5,89,0,0,323,324,5,106,0,0,324,325,5,108,0,0,325,326,5,57,0,0,
326,327,5,103,0,0,327,328,5,104,0,0,328,329,5,108,0,0,329,352,5,53,0,0,330,
331,5,52,0,0,331,332,5,37,0,0,332,333,5,109,0,0,333,334,5,108,0,0,334,335,
5,94,0,0,335,336,5,122,0,0,336,352,5,53,0,0,337,338,5,52,0,0,338,339,5,37,
0,0,339,340,5,109,0,0,340,341,5,108,0,0,341,342,5,94,0,0,342,343,5,115,0,
0,343,344,5,120,0,0,344,352,5,53,0,0,345,346,5,52,0,0,346,347,5,37,0,0,347,
348,5,109,0,0,348,349,5,91,0,0,349,350,5,104,0,0,350,352,5,53,0,0,351,297,
1,0,0,0,351,304,1,0,0,0,351,309,1,0,0,0,351,315,1,0,0,0,351,330,1,0,0,0,
351,337,1,0,0,0,351,345,1,0,0,0,352,25,1,0,0,0,353,355,3,28,14,0,354,353,
1,0,0,0,355,356,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,27,1,0,0,0,358,
359,7,0,0,0,359,29,1,0,0,0,360,361,5,52,0,0,361,362,5,35,0,0,362,363,5,60,
0,0,363,364,3,2,1,0,364,365,5,53,0,0,365,387,1,0,0,0,366,367,5,52,0,0,367,
368,5,35,0,0,368,369,5,61,0,0,369,370,3,2,1,0,370,371,5,53,0,0,371,387,1,
0,0,0,372,373,5,52,0,0,373,374,5,35,0,0,374,375,5,54,0,0,375,376,5,60,0,
0,376,377,3,2,1,0,377,378,5,53,0,0,378,387,1,0,0,0,379,380,5,52,0,0,380,
381,5,35,0,0,381,382,5,54,0,0,382,383,5,61,0,0,383,384,3,2,1,0,384,385,5,
53,0,0,385,387,1,0,0,0,386,360,1,0,0,0,386,366,1,0,0,0,386,372,1,0,0,0,386,
379,1,0,0,0,387,31,1,0,0,0,388,389,5,52,0,0,389,390,5,35,0,0,390,391,5,106,
0,0,391,467,5,53,0,0,392,393,5,52,0,0,393,394,5,35,0,0,394,395,3,54,27,0,
395,396,5,53,0,0,396,467,1,0,0,0,397,398,5,52,0,0,398,399,5,35,0,0,399,400,
5,36,0,0,400,401,3,54,27,0,401,402,5,53,0,0,402,467,1,0,0,0,403,404,5,52,
0,0,404,405,5,35,0,0,405,406,5,32,0,0,406,407,3,54,27,0,407,408,5,53,0,0,
408,467,1,0,0,0,409,410,5,52,0,0,410,411,5,35,0,0,411,412,5,62,0,0,412,413,
3,64,32,0,413,414,5,53,0,0,414,467,1,0,0,0,415,416,5,52,0,0,416,417,5,35,
0,0,417,418,5,104,0,0,418,419,5,55,0,0,419,420,3,64,32,0,420,421,5,53,0,
0,421,467,1,0,0,0,422,423,5,49,0,0,423,424,5,54,0,0,424,425,3,64,32,0,425,
426,5,55,0,0,426,467,1,0,0,0,427,428,5,49,0,0,428,429,5,56,0,0,429,430,3,
64,32,0,430,431,5,56,0,0,431,467,1,0,0,0,432,433,5,49,0,0,433,434,5,54,0,
0,434,435,3,54,27,0,435,436,5,55,0,0,436,467,1,0,0,0,437,438,5,49,0,0,438,
439,5,56,0,0,439,440,3,54,27,0,440,441,5,56,0,0,441,467,1,0,0,0,442,443,
5,49,0,0,443,444,5,54,0,0,444,445,5,36,0,0,445,446,3,54,27,0,446,447,5,55,
0,0,447,467,1,0,0,0,448,449,5,49,0,0,449,450,5,56,0,0,450,451,5,36,0,0,451,
452,3,54,27,0,452,453,5,56,0,0,453,467,1,0,0,0,454,455,5,49,0,0,455,456,
5,54,0,0,456,457,5,32,0,0,457,458,3,54,27,0,458,459,5,55,0,0,459,467,1,0,
0,0,460,461,5,49,0,0,461,462,5,56,0,0,462,463,5,32,0,0,463,464,3,54,27,0,
464,465,5,56,0,0,465,467,1,0,0,0,466,388,1,0,0,0,466,392,1,0,0,0,466,397,
1,0,0,0,466,403,1,0,0,0,466,409,1,0,0,0,466,415,1,0,0,0,466,422,1,0,0,0,
466,427,1,0,0,0,466,432,1,0,0,0,466,437,1,0,0,0,466,442,1,0,0,0,466,448,
1,0,0,0,466,454,1,0,0,0,466,460,1,0,0,0,467,33,1,0,0,0,468,469,5,52,0,0,
469,470,5,35,0,0,470,471,5,52,0,0,471,472,3,54,27,0,472,473,5,53,0,0,473,
476,3,2,1,0,474,475,5,51,0,0,475,477,3,2,1,0,476,474,1,0,0,0,476,477,1,0,
0,0,477,478,1,0,0,0,478,479,5,53,0,0,479,620,1,0,0,0,480,481,5,52,0,0,481,
482,5,35,0,0,482,483,5,52,0,0,483,484,5,36,0,0,484,485,3,54,27,0,485,486,
5,53,0,0,486,489,3,2,1,0,487,488,5,51,0,0,488,490,3,2,1,0,489,487,1,0,0,
0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,53,0,0,492,620,1,0,0,0,493,494,
5,52,0,0,494,495,5,35,0,0,495,496,5,52,0,0,496,497,5,32,0,0,497,498,3,54,
27,0,498,499,5,53,0,0,499,502,3,2,1,0,500,501,5,51,0,0,501,503,3,2,1,0,502,
500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,5,53,0,0,505,620,1,0,
0,0,506,507,5,52,0,0,507,508,5,35,0,0,508,509,5,52,0,0,509,510,5,54,0,0,
510,511,3,64,32,0,511,512,5,55,0,0,512,513,5,53,0,0,513,516,3,2,1,0,514,
515,5,51,0,0,515,517,3,2,1,0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,
0,0,518,519,5,53,0,0,519,620,1,0,0,0,520,521,5,52,0,0,521,522,5,35,0,0,522,
523,5,52,0,0,523,524,5,56,0,0,524,525,3,64,32,0,525,526,5,56,0,0,526,527,
5,53,0,0,527,530,3,2,1,0,528,529,5,51,0,0,529,531,3,2,1,0,530,528,1,0,0,
0,530,531,1,0,0,0,531,532,1,0,0,0,532,533,5,53,0,0,533,620,1,0,0,0,534,535,
5,52,0,0,535,536,5,35,0,0,536,537,5,52,0,0,537,538,5,106,0,0,538,539,3,54,
27,0,539,540,5,53,0,0,540,543,3,2,1,0,541,542,5,51,0,0,542,544,3,2,1,0,543,
541,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,53,0,0,546,620,1,0,
0,0,547,548,5,52,0,0,548,549,5,35,0,0,549,550,5,52,0,0,550,551,5,106,0,0,
551,552,5,53,0,0,552,555,3,2,1,0,553,554,5,51,0,0,554,556,3,2,1,0,555,553,
1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,53,0,0,558,620,1,0,0,0,
559,560,5,52,0,0,560,561,5,35,0,0,561,562,5,52,0,0,562,563,5,106,0,0,563,
564,5,62,0,0,564,565,3,64,32,0,565,566,5,53,0,0,566,569,3,2,1,0,567,568,
5,51,0,0,568,570,3,2,1,0,569,567,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,
571,572,5,53,0,0,572,620,1,0,0,0,573,574,5,52,0,0,574,575,5,35,0,0,575,576,
5,52,0,0,576,577,5,92,0,0,577,578,5,93,0,0,578,579,5,94,0,0,579,580,5,97,
0,0,580,581,5,102,0,0,581,582,5,93,0,0,582,583,5,53,0,0,583,586,3,2,1,0,
584,585,5,51,0,0,585,587,3,2,1,0,586,584,1,0,0,0,586,587,1,0,0,0,587,588,
1,0,0,0,588,589,5,53,0,0,589,620,1,0,0,0,590,591,5,52,0,0,591,592,5,35,0,
0,592,593,5,52,0,0,593,594,5,63,0,0,594,595,5,81,0,0,595,596,5,81,0,0,596,
597,5,67,0,0,597,598,5,80,0,0,598,599,5,82,0,0,599,600,5,53,0,0,600,603,
3,2,1,0,601,602,5,51,0,0,602,604,3,2,1,0,603,601,1,0,0,0,603,604,1,0,0,0,
604,605,1,0,0,0,605,606,5,53,0,0,606,620,1,0,0,0,607,608,5,52,0,0,608,609,
5,35,0,0,609,610,5,52,0,0,610,611,3,64,32,0,611,612,5,53,0,0,612,615,3,2,
1,0,613,614,5,51,0,0,614,616,3,2,1,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
617,1,0,0,0,617,618,5,53,0,0,618,620,1,0,0,0,619,468,1,0,0,0,619,480,1,0,
0,0,619,493,1,0,0,0,619,506,1,0,0,0,619,520,1,0,0,0,619,534,1,0,0,0,619,
547,1,0,0,0,619,559,1,0,0,0,619,573,1,0,0,0,619,590,1,0,0,0,619,607,1,0,
0,0,620,35,1,0,0,0,621,622,5,52,0,0,622,623,5,37,0,0,623,624,5,89,0,0,624,
625,5,91,0,0,625,626,5,91,0,0,626,627,5,93,0,0,627,628,5,104,0,0,628,629,
5,108,0,0,629,722,5,53,0,0,630,631,5,52,0,0,631,632,5,37,0,0,632,636,5,94,
0,0,633,634,5,89,0,0,634,635,5,97,0,0,635,637,5,100,0,0,636,633,1,0,0,0,
636,637,1,0,0,0,637,638,1,0,0,0,638,722,5,53,0,0,639,640,5,52,0,0,640,645,
5,37,0,0,641,642,5,101,0,0,642,643,5,89,0,0,643,644,5,106,0,0,644,646,5,
99,0,0,645,641,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,5,58,0,0,
648,649,5,102,0,0,649,650,5,89,0,0,650,651,5,101,0,0,651,652,5,93,0,0,652,
722,5,53,0,0,653,654,5,52,0,0,654,655,5,37,0,0,655,656,5,91,0,0,656,657,
5,103,0,0,657,658,5,101,0,0,658,659,5,101,0,0,659,660,5,97,0,0,660,661,5,
108,0,0,661,722,5,53,0,0,662,663,5,52,0,0,663,664,5,37,0,0,664,665,5,104,
0,0,665,666,5,106,0,0,666,667,5,109,0,0,667,668,5,102,0,0,668,669,5,93,0,
0,669,722,5,53,0,0,670,671,5,52,0,0,671,672,5,37,0,0,672,673,5,104,0,0,673,
674,5,106,0,0,674,675,5,109,0,0,675,676,5,102,0,0,676,677,5,93,0,0,677,678,
5,58,0,0,678,679,5,102,0,0,679,680,5,89,0,0,680,681,5,101,0,0,681,682,5,
93,0,0,682,722,5,53,0,0,683,684,5,52,0,0,684,685,5,37,0,0,685,686,5,107,
0,0,686,687,5,99,0,0,687,688,5,97,0,0,688,689,5,104,0,0,689,722,5,53,0,0,
690,691,5,52,0,0,691,692,5,37,0,0,692,693,5,107,0,0,693,694,5,99,0,0,694,
695,5,97,0,0,695,696,5,104,0,0,696,697,5,58,0,0,697,698,5,102,0,0,698,699,
5,89,0,0,699,700,5,101,0,0,700,701,5,93,0,0,701,722,5,53,0,0,702,703,5,52,
0,0,703,704,5,37,0,0,704,705,5,108,0,0,705,706,5,96,0,0,706,707,5,93,0,0,
707,708,5,102,0,0,708,722,5,53,0,0,709,710,5,52,0,0,710,711,5,37,0,0,711,
712,5,108,0,0,712,713,5,96,0,0,713,714,5,93,0,0,714,715,5,102,0,0,715,716,
5,58,0,0,716,717,5,102,0,0,717,718,5,89,0,0,718,719,5,101,0,0,719,720,5,
93,0,0,720,722,5,53,0,0,721,621,1,0,0,0,721,630,1,0,0,0,721,639,1,0,0,0,
721,653,1,0,0,0,721,662,1,0,0,0,721,670,1,0,0,0,721,683,1,0,0,0,721,690,
1,0,0,0,721,702,1,0,0,0,721,709,1,0,0,0,722,37,1,0,0,0,723,724,5,52,0,0,
724,725,5,37,0,0,725,726,5,91,0,0,726,727,5,106,0,0,727,785,5,53,0,0,728,
729,5,52,0,0,729,730,5,37,0,0,730,731,5,100,0,0,731,732,5,94,0,0,732,785,
5,53,0,0,733,734,5,52,0,0,734,735,5,37,0,0,735,736,5,91,0,0,736,737,5,106,
0,0,737,738,5,100,0,0,738,739,5,94,0,0,739,785,5,53,0,0,740,741,5,52,0,0,
741,742,5,37,0,0,742,743,5,89,0,0,743,744,5,102,0,0,744,745,5,113,0,0,745,
746,5,91,0,0,746,747,5,106,0,0,747,748,5,100,0,0,748,749,5,94,0,0,749,785,
5,53,0,0,750,751,5,52,0,0,751,752,5,37,0,0,752,753,5,89,0,0,753,754,5,102,
0,0,754,755,5,113,0,0,755,785,5,53,0,0,756,757,5,52,0,0,757,758,5,37,0,0,
758,759,5,90,0,0,759,760,5,107,0,0,760,761,5,106,0,0,761,762,5,57,0,0,762,
763,5,89,0,0,763,764,5,102,0,0,764,765,5,113,0,0,765,766,5,91,0,0,766,767,
5,106,0,0,767,768,5,100,0,0,768,769,5,94,0,0,769,785,5,53,0,0,770,771,5,
52,0,0,771,772,5,37,0,0,772,773,5,90,0,0,773,774,5,107,0,0,774,775,5,106,
0,0,775,776,5,57,0,0,776,777,5,109,0,0,777,778,5,102,0,0,778,779,5,97,0,
0,779,780,5,91,0,0,780,781,5,103,0,0,781,782,5,92,0,0,782,783,5,93,0,0,783,
785,5,53,0,0,784,723,1,0,0,0,784,728,1,0,0,0,784,733,1,0,0,0,784,740,1,0,
0,0,784,750,1,0,0,0,784,756,1,0,0,0,784,770,1,0,0,0,785,39,1,0,0,0,786,787,
5,52,0,0,787,788,5,35,0,0,788,789,5,91,0,0,789,797,5,53,0,0,790,791,5,52,
0,0,791,792,5,35,0,0,792,793,5,91,0,0,793,794,3,54,27,0,794,795,5,53,0,0,
795,797,1,0,0,0,796,786,1,0,0,0,796,790,1,0,0,0,797,41,1,0,0,0,798,825,3,
32,16,0,799,825,3,46,23,0,800,825,3,48,24,0,801,825,3,12,6,0,802,825,3,18,
9,0,803,825,3,20,10,0,804,825,3,22,11,0,805,825,3,24,12,0,806,825,3,30,15,
0,807,825,3,14,7,0,808,825,3,34,17,0,809,825,3,36,18,0,810,825,3,38,19,0,
811,825,3,40,20,0,812,825,5,12,0,0,813,825,5,31,0,0,814,825,5,43,0,0,815,
825,5,41,0,0,816,825,5,42,0,0,817,825,5,44,0,0,818,825,5,45,0,0,819,825,
5,46,0,0,820,825,5,47,0,0,821,825,5,48,0,0,822,825,5,13,0,0,823,825,5,28,
0,0,824,798,1,0,0,0,824,799,1,0,0,0,824,800,1,0,0,0,824,801,1,0,0,0,824,
802,1,0,0,0,824,803,1,0,0,0,824,804,1,0,0,0,824,805,1,0,0,0,824,806,1,0,
0,0,824,807,1,0,0,0,824,808,1,0,0,0,824,809,1,0,0,0,824,810,1,0,0,0,824,
811,1,0,0,0,824,812,1,0,0,0,824,813,1,0,0,0,824,814,1,0,0,0,824,815,1,0,
0,0,824,816,1,0,0,0,824,817,1,0,0,0,824,818,1,0,0,0,824,819,1,0,0,0,824,
820,1,0,0,0,824,821,1,0,0,0,824,822,1,0,0,0,824,823,1,0,0,0,825,43,1,0,0,
0,826,827,3,50,25,0,827,828,5,32,0,0,828,829,3,50,25,0,829,834,1,0,0,0,830,
834,3,46,23,0,831,834,3,50,25,0,832,834,3,16,8,0,833,826,1,0,0,0,833,830,
1,0,0,0,833,831,1,0,0,0,833,832,1,0,0,0,834,45,1,0,0,0,835,855,5,33,0,0,
836,855,5,34,0,0,837,855,5,4,0,0,838,855,5,14,0,0,839,855,5,15,0,0,840,855,
5,16,0,0,841,855,5,17,0,0,842,855,5,18,0,0,843,855,5,19,0,0,844,855,5,20,
0,0,845,855,5,21,0,0,846,855,5,22,0,0,847,855,5,23,0,0,848,855,5,24,0,0,
849,855,5,25,0,0,850,855,5,26,0,0,851,855,5,27,0,0,852,853,5,10,0,0,853,
855,9,0,0,0,854,835,1,0,0,0,854,836,1,0,0,0,854,837,1,0,0,0,854,838,1,0,
0,0,854,839,1,0,0,0,854,840,1,0,0,0,854,841,1,0,0,0,854,842,1,0,0,0,854,
843,1,0,0,0,854,844,1,0,0,0,854,845,1,0,0,0,854,846,1,0,0,0,854,847,1,0,
0,0,854,848,1,0,0,0,854,849,1,0,0,0,854,850,1,0,0,0,854,851,1,0,0,0,854,
852,1,0,0,0,855,47,1,0,0,0,856,859,3,52,26,0,857,859,5,30,0,0,858,856,1,
0,0,0,858,857,1,0,0,0,859,49,1,0,0,0,860,873,3,52,26,0,861,873,5,12,0,0,
862,873,5,29,0,0,863,873,5,31,0,0,864,873,5,35,0,0,865,873,5,36,0,0,866,
873,5,37,0,0,867,873,5,41,0,0,868,873,5,44,0,0,869,873,5,51,0,0,870,873,
5,52,0,0,871,873,5,53,0,0,872,860,1,0,0,0,872,861,1,0,0,0,872,862,1,0,0,
0,872,863,1,0,0,0,872,864,1,0,0,0,872,865,1,0,0,0,872,866,1,0,0,0,872,867,
1,0,0,0,872,868,1,0,0,0,872,869,1,0,0,0,872,870,1,0,0,0,872,871,1,0,0,0,
873,51,1,0,0,0,874,901,3,56,28,0,875,901,3,72,36,0,876,901,3,62,31,0,877,
901,5,3,0,0,878,901,5,5,0,0,879,901,5,6,0,0,880,901,5,7,0,0,881,901,5,8,
0,0,882,901,5,9,0,0,883,901,5,11,0,0,884,901,5,1,0,0,885,901,5,2,0,0,886,
901,5,38,0,0,887,901,5,39,0,0,888,901,5,40,0,0,889,901,5,32,0,0,890,901,
5,54,0,0,891,901,5,55,0,0,892,901,5,56,0,0,893,901,5,57,0,0,894,901,5,58,
0,0,895,901,5,59,0,0,896,901,5,60,0,0,897,901,5,61,0,0,898,901,5,62,0,0,
899,901,5,125,0,0,900,874,1,0,0,0,900,875,1,0,0,0,900,876,1,0,0,0,900,877,
1,0,0,0,900,878,1,0,0,0,900,879,1,0,0,0,900,880,1,0,0,0,900,881,1,0,0,0,
900,882,1,0,0,0,900,883,1,0,0,0,900,884,1,0,0,0,900,885,1,0,0,0,900,886,
1,0,0,0,900,887,1,0,0,0,900,888,1,0,0,0,900,889,1,0,0,0,900,890,1,0,0,0,
900,891,1,0,0,0,900,892,1,0,0,0,900,893,1,0,0,0,900,894,1,0,0,0,900,895,
1,0,0,0,900,896,1,0,0,0,900,897,1,0,0,0,900,898,1,0,0,0,900,899,1,0,0,0,
901,53,1,0,0,0,902,903,3,60,30,0,903,55,1,0,0,0,904,905,5,10,0,0,905,906,
7,1,0,0,906,907,3,58,29,0,907,908,3,58,29,0,908,914,1,0,0,0,909,910,5,10,
0,0,910,911,3,58,29,0,911,912,3,58,29,0,912,914,1,0,0,0,913,904,1,0,0,0,
913,909,1,0,0,0,914,57,1,0,0,0,915,916,7,2,0,0,916,59,1,0,0,0,917,919,3,
62,31,0,918,917,1,0,0,0,919,920,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,
921,61,1,0,0,0,922,923,7,3,0,0,923,63,1,0,0,0,924,925,3,66,33,0,925,65,1,
0,0,0,926,929,3,72,36,0,927,929,5,57,0,0,928,926,1,0,0,0,928,927,1,0,0,0,
929,935,1,0,0,0,930,934,3,72,36,0,931,934,5,57,0,0,932,934,3,62,31,0,933,
930,1,0,0,0,933,931,1,0,0,0,933,932,1,0,0,0,934,937,1,0,0,0,935,933,1,0,
0,0,935,936,1,0,0,0,936,67,1,0,0,0,937,935,1,0,0,0,938,940,3,70,35,0,939,
938,1,0,0,0,940,941,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,69,1,0,0,
0,943,944,8,4,0,0,944,71,1,0,0,0,945,946,7,5,0,0,946,73,1,0,0,0,49,82,88,
93,119,124,133,143,152,162,171,179,183,226,231,262,289,351,356,386,466,476,
489,502,516,530,543,555,569,586,603,615,619,636,645,721,784,796,824,833,
854,858,872,900,913,920,928,933,935,941];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class PCREParser extends antlr4.Parser {

    static grammarFileName = "PCRE.g4";
    static literalNames = [ null, null, null, "'\\a'", null, "'\\e'", "'\\f'", 
                            "'\\n'", "'\\r'", "'\\t'", "'\\'", null, "'.'", 
                            "'\\C'", "'\\d'", "'\\D'", "'\\h'", "'\\H'", 
                            "'\\N'", null, null, "'\\R'", "'\\s'", "'\\S'", 
                            "'\\v'", "'\\V'", "'\\w'", "'\\W'", "'\\X'", 
                            "'['", "']'", "'^'", "'-'", null, null, "'?'", 
                            "'+'", "'*'", "'{'", "'}'", "','", "'\\b'", 
                            "'\\B'", "'\\A'", "'$'", "'\\Z'", "'\\z'", "'\\G'", 
                            "'\\K'", "'\\g'", "'\\k'", "'|'", "'('", "')'", 
                            "'<'", "'>'", "'''", "'_'", "':'", "'#'", "'='", 
                            "'!'", "'&'", "'a'", "'b'", "'c'", "'d'", "'e'", 
                            "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", 
                            "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", 
                            "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", 
                            "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", "'G'", 
                            "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", 
                            "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", 
                            "'V'", "'W'", "'X'", "'Y'", "'Z'", "'1'", "'2'", 
                            "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", 
                            "'0'" ];
    static symbolicNames = [ null, "Quoted", "BlockQuoted", "BellChar", 
                             "ControlChar", "EscapeChar", "FormFeed", "NewLine", 
                             "CarriageReturn", "Tab", "Backslash", "HexChar", 
                             "Dot", "OneDataUnit", "DecimalDigit", "NotDecimalDigit", 
                             "HorizontalWhiteSpace", "NotHorizontalWhiteSpace", 
                             "NotNewLine", "CharWithProperty", "CharWithoutProperty", 
                             "NewLineSequence", "WhiteSpace", "NotWhiteSpace", 
                             "VerticalWhiteSpace", "NotVerticalWhiteSpace", 
                             "WordChar", "NotWordChar", "ExtendedUnicodeChar", 
                             "CharacterClassStart", "CharacterClassEnd", 
                             "Caret", "Hyphen", "POSIXNamedSet", "POSIXNegatedNamedSet", 
                             "QuestionMark", "Plus", "Star", "OpenBrace", 
                             "CloseBrace", "Comma", "WordBoundary", "NonWordBoundary", 
                             "StartOfSubject", "EndOfSubjectOrLine", "EndOfSubjectOrLineEndOfSubject", 
                             "EndOfSubject", "PreviousMatchInSubject", "ResetStartMatch", 
                             "SubroutineOrNamedReferenceStartG", "NamedReferenceStartK", 
                             "Pipe", "OpenParen", "CloseParen", "LessThan", 
                             "GreaterThan", "SingleQuote", "Underscore", 
                             "Colon", "Hash", "Equals", "Exclamation", "Ampersand", 
                             "ALC", "BLC", "CLC", "DLC", "ELC", "FLC", "GLC", 
                             "HLC", "ILC", "JLC", "KLC", "LLC", "MLC", "NLC", 
                             "OLC", "PLC", "QLC", "RLC", "SLC", "TLC", "ULC", 
                             "VLC", "WLC", "XLC", "YLC", "ZLC", "AUC", "BUC", 
                             "CUC", "DUC", "EUC", "FUC", "GUC", "HUC", "IUC", 
                             "JUC", "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", 
                             "QUC", "RUC", "SUC", "TUC", "UUC", "VUC", "WUC", 
                             "XUC", "YUC", "ZUC", "D1", "D2", "D3", "D4", 
                             "D5", "D6", "D7", "D8", "D9", "D0", "OtherChar" ];
    static ruleNames = [ "parse", "alternation", "expr", "element", "quantifier", 
                         "quantifier_type", "character_class", "backreference", 
                         "backreference_or_octal", "capture", "non_capture", 
                         "comment", "option", "option_flags", "option_flag", 
                         "look_around", "subroutine_reference", "conditional", 
                         "backtrack_control", "newline_convention", "callout", 
                         "atom", "cc_atom", "shared_atom", "literal", "cc_literal", 
                         "shared_literal", "number", "octal_char", "octal_digit", 
                         "digits", "digit", "name", "alpha_nums", "non_close_parens", 
                         "non_close_paren", "letter" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PCREParser.ruleNames;
        this.literalNames = PCREParser.literalNames;
        this.symbolicNames = PCREParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PCREParser.RULE_parse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 74;
	        this.alternation();
	        this.state = 75;
	        this.match(PCREParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alternation() {
	    let localctx = new AlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PCREParser.RULE_alternation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 77;
	        this.expr();
	        this.state = 82;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 78;
	                this.match(PCREParser.Pipe);
	                this.state = 79;
	                this.expr(); 
	            }
	            this.state = 84;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PCREParser.RULE_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 88;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.NonWordBoundary - 32)) | (1 << (PCREParser.StartOfSubject - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.EndOfSubjectOrLineEndOfSubject - 32)) | (1 << (PCREParser.EndOfSubject - 32)) | (1 << (PCREParser.PreviousMatchInSubject - 32)) | (1 << (PCREParser.ResetStartMatch - 32)) | (1 << (PCREParser.SubroutineOrNamedReferenceStartG - 32)) | (1 << (PCREParser.NamedReferenceStartK - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
	            this.state = 85;
	            this.element();
	            this.state = 90;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PCREParser.RULE_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 91;
	        this.atom();
	        this.state = 93;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 92;
	            this.quantifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifier() {
	    let localctx = new QuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PCREParser.RULE_quantifier);
	    try {
	        this.state = 119;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 95;
	            this.match(PCREParser.QuestionMark);
	            this.state = 96;
	            this.quantifier_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 97;
	            this.match(PCREParser.Plus);
	            this.state = 98;
	            this.quantifier_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 99;
	            this.match(PCREParser.Star);
	            this.state = 100;
	            this.quantifier_type();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 101;
	            this.match(PCREParser.OpenBrace);
	            this.state = 102;
	            this.number();
	            this.state = 103;
	            this.match(PCREParser.CloseBrace);
	            this.state = 104;
	            this.quantifier_type();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 106;
	            this.match(PCREParser.OpenBrace);
	            this.state = 107;
	            this.number();
	            this.state = 108;
	            this.match(PCREParser.Comma);
	            this.state = 109;
	            this.match(PCREParser.CloseBrace);
	            this.state = 110;
	            this.quantifier_type();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 112;
	            this.match(PCREParser.OpenBrace);
	            this.state = 113;
	            this.number();
	            this.state = 114;
	            this.match(PCREParser.Comma);
	            this.state = 115;
	            this.number();
	            this.state = 116;
	            this.match(PCREParser.CloseBrace);
	            this.state = 117;
	            this.quantifier_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifier_type() {
	    let localctx = new Quantifier_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PCREParser.RULE_quantifier_type);
	    try {
	        this.state = 124;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.Plus:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 121;
	            this.match(PCREParser.Plus);
	            break;
	        case PCREParser.QuestionMark:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 122;
	            this.match(PCREParser.QuestionMark);
	            break;
	        case PCREParser.EOF:
	        case PCREParser.Quoted:
	        case PCREParser.BlockQuoted:
	        case PCREParser.BellChar:
	        case PCREParser.ControlChar:
	        case PCREParser.EscapeChar:
	        case PCREParser.FormFeed:
	        case PCREParser.NewLine:
	        case PCREParser.CarriageReturn:
	        case PCREParser.Tab:
	        case PCREParser.Backslash:
	        case PCREParser.HexChar:
	        case PCREParser.Dot:
	        case PCREParser.OneDataUnit:
	        case PCREParser.DecimalDigit:
	        case PCREParser.NotDecimalDigit:
	        case PCREParser.HorizontalWhiteSpace:
	        case PCREParser.NotHorizontalWhiteSpace:
	        case PCREParser.NotNewLine:
	        case PCREParser.CharWithProperty:
	        case PCREParser.CharWithoutProperty:
	        case PCREParser.NewLineSequence:
	        case PCREParser.WhiteSpace:
	        case PCREParser.NotWhiteSpace:
	        case PCREParser.VerticalWhiteSpace:
	        case PCREParser.NotVerticalWhiteSpace:
	        case PCREParser.WordChar:
	        case PCREParser.NotWordChar:
	        case PCREParser.ExtendedUnicodeChar:
	        case PCREParser.CharacterClassStart:
	        case PCREParser.CharacterClassEnd:
	        case PCREParser.Caret:
	        case PCREParser.Hyphen:
	        case PCREParser.POSIXNamedSet:
	        case PCREParser.POSIXNegatedNamedSet:
	        case PCREParser.OpenBrace:
	        case PCREParser.CloseBrace:
	        case PCREParser.Comma:
	        case PCREParser.WordBoundary:
	        case PCREParser.NonWordBoundary:
	        case PCREParser.StartOfSubject:
	        case PCREParser.EndOfSubjectOrLine:
	        case PCREParser.EndOfSubjectOrLineEndOfSubject:
	        case PCREParser.EndOfSubject:
	        case PCREParser.PreviousMatchInSubject:
	        case PCREParser.ResetStartMatch:
	        case PCREParser.SubroutineOrNamedReferenceStartG:
	        case PCREParser.NamedReferenceStartK:
	        case PCREParser.Pipe:
	        case PCREParser.OpenParen:
	        case PCREParser.CloseParen:
	        case PCREParser.LessThan:
	        case PCREParser.GreaterThan:
	        case PCREParser.SingleQuote:
	        case PCREParser.Underscore:
	        case PCREParser.Colon:
	        case PCREParser.Hash:
	        case PCREParser.Equals:
	        case PCREParser.Exclamation:
	        case PCREParser.Ampersand:
	        case PCREParser.ALC:
	        case PCREParser.BLC:
	        case PCREParser.CLC:
	        case PCREParser.DLC:
	        case PCREParser.ELC:
	        case PCREParser.FLC:
	        case PCREParser.GLC:
	        case PCREParser.HLC:
	        case PCREParser.ILC:
	        case PCREParser.JLC:
	        case PCREParser.KLC:
	        case PCREParser.LLC:
	        case PCREParser.MLC:
	        case PCREParser.NLC:
	        case PCREParser.OLC:
	        case PCREParser.PLC:
	        case PCREParser.QLC:
	        case PCREParser.RLC:
	        case PCREParser.SLC:
	        case PCREParser.TLC:
	        case PCREParser.ULC:
	        case PCREParser.VLC:
	        case PCREParser.WLC:
	        case PCREParser.XLC:
	        case PCREParser.YLC:
	        case PCREParser.ZLC:
	        case PCREParser.AUC:
	        case PCREParser.BUC:
	        case PCREParser.CUC:
	        case PCREParser.DUC:
	        case PCREParser.EUC:
	        case PCREParser.FUC:
	        case PCREParser.GUC:
	        case PCREParser.HUC:
	        case PCREParser.IUC:
	        case PCREParser.JUC:
	        case PCREParser.KUC:
	        case PCREParser.LUC:
	        case PCREParser.MUC:
	        case PCREParser.NUC:
	        case PCREParser.OUC:
	        case PCREParser.PUC:
	        case PCREParser.QUC:
	        case PCREParser.RUC:
	        case PCREParser.SUC:
	        case PCREParser.TUC:
	        case PCREParser.UUC:
	        case PCREParser.VUC:
	        case PCREParser.WUC:
	        case PCREParser.XUC:
	        case PCREParser.YUC:
	        case PCREParser.ZUC:
	        case PCREParser.D1:
	        case PCREParser.D2:
	        case PCREParser.D3:
	        case PCREParser.D4:
	        case PCREParser.D5:
	        case PCREParser.D6:
	        case PCREParser.D7:
	        case PCREParser.D8:
	        case PCREParser.D9:
	        case PCREParser.D0:
	        case PCREParser.OtherChar:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character_class() {
	    let localctx = new Character_classContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PCREParser.RULE_character_class);
	    var _la = 0; // Token type
	    try {
	        this.state = 183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 126;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 127;
	            this.match(PCREParser.Caret);
	            this.state = 128;
	            this.match(PCREParser.CharacterClassEnd);
	            this.state = 129;
	            this.match(PCREParser.Hyphen);
	            this.state = 131; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 130;
	                this.cc_atom();
	                this.state = 133; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
	            this.state = 135;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 137;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 138;
	            this.match(PCREParser.Caret);
	            this.state = 139;
	            this.match(PCREParser.CharacterClassEnd);
	            this.state = 143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
	                this.state = 140;
	                this.cc_atom();
	                this.state = 145;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 146;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 147;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 148;
	            this.match(PCREParser.Caret);
	            this.state = 150; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 149;
	                this.cc_atom();
	                this.state = 152; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
	            this.state = 154;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 156;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 157;
	            this.match(PCREParser.CharacterClassEnd);
	            this.state = 158;
	            this.match(PCREParser.Hyphen);
	            this.state = 160; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 159;
	                this.cc_atom();
	                this.state = 162; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
	            this.state = 164;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 166;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 167;
	            this.match(PCREParser.CharacterClassEnd);
	            this.state = 171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
	                this.state = 168;
	                this.cc_atom();
	                this.state = 173;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 174;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 175;
	            this.match(PCREParser.CharacterClassStart);
	            this.state = 177; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 176;
	                this.cc_atom();
	                this.state = 179; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
	            this.state = 181;
	            this.match(PCREParser.CharacterClassEnd);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backreference() {
	    let localctx = new BackreferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PCREParser.RULE_backreference);
	    try {
	        this.state = 226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 185;
	            this.backreference_or_octal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 186;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 187;
	            this.number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 188;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 189;
	            this.match(PCREParser.OpenBrace);
	            this.state = 190;
	            this.number();
	            this.state = 191;
	            this.match(PCREParser.CloseBrace);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 193;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 194;
	            this.match(PCREParser.OpenBrace);
	            this.state = 195;
	            this.match(PCREParser.Hyphen);
	            this.state = 196;
	            this.number();
	            this.state = 197;
	            this.match(PCREParser.CloseBrace);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 199;
	            this.match(PCREParser.NamedReferenceStartK);
	            this.state = 200;
	            this.match(PCREParser.LessThan);
	            this.state = 201;
	            this.name();
	            this.state = 202;
	            this.match(PCREParser.GreaterThan);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 204;
	            this.match(PCREParser.NamedReferenceStartK);
	            this.state = 205;
	            this.match(PCREParser.SingleQuote);
	            this.state = 206;
	            this.name();
	            this.state = 207;
	            this.match(PCREParser.SingleQuote);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 209;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 210;
	            this.match(PCREParser.OpenBrace);
	            this.state = 211;
	            this.name();
	            this.state = 212;
	            this.match(PCREParser.CloseBrace);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 214;
	            this.match(PCREParser.NamedReferenceStartK);
	            this.state = 215;
	            this.match(PCREParser.OpenBrace);
	            this.state = 216;
	            this.name();
	            this.state = 217;
	            this.match(PCREParser.CloseBrace);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 219;
	            this.match(PCREParser.OpenParen);
	            this.state = 220;
	            this.match(PCREParser.QuestionMark);
	            this.state = 221;
	            this.match(PCREParser.PUC);
	            this.state = 222;
	            this.match(PCREParser.Equals);
	            this.state = 223;
	            this.name();
	            this.state = 224;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backreference_or_octal() {
	    let localctx = new Backreference_or_octalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PCREParser.RULE_backreference_or_octal);
	    try {
	        this.state = 231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 228;
	            this.octal_char();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 229;
	            this.match(PCREParser.Backslash);
	            this.state = 230;
	            this.digit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture() {
	    let localctx = new CaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PCREParser.RULE_capture);
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 233;
	            this.match(PCREParser.OpenParen);
	            this.state = 234;
	            this.match(PCREParser.QuestionMark);
	            this.state = 235;
	            this.match(PCREParser.LessThan);
	            this.state = 236;
	            this.name();
	            this.state = 237;
	            this.match(PCREParser.GreaterThan);
	            this.state = 238;
	            this.alternation();
	            this.state = 239;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 241;
	            this.match(PCREParser.OpenParen);
	            this.state = 242;
	            this.match(PCREParser.QuestionMark);
	            this.state = 243;
	            this.match(PCREParser.SingleQuote);
	            this.state = 244;
	            this.name();
	            this.state = 245;
	            this.match(PCREParser.SingleQuote);
	            this.state = 246;
	            this.alternation();
	            this.state = 247;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 249;
	            this.match(PCREParser.OpenParen);
	            this.state = 250;
	            this.match(PCREParser.QuestionMark);
	            this.state = 251;
	            this.match(PCREParser.PUC);
	            this.state = 252;
	            this.match(PCREParser.LessThan);
	            this.state = 253;
	            this.name();
	            this.state = 254;
	            this.match(PCREParser.GreaterThan);
	            this.state = 255;
	            this.alternation();
	            this.state = 256;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 258;
	            this.match(PCREParser.OpenParen);
	            this.state = 259;
	            this.alternation();
	            this.state = 260;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_capture() {
	    let localctx = new Non_captureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PCREParser.RULE_non_capture);
	    try {
	        this.state = 289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 264;
	            this.match(PCREParser.OpenParen);
	            this.state = 265;
	            this.match(PCREParser.QuestionMark);
	            this.state = 266;
	            this.match(PCREParser.Colon);
	            this.state = 267;
	            this.alternation();
	            this.state = 268;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 270;
	            this.match(PCREParser.OpenParen);
	            this.state = 271;
	            this.match(PCREParser.QuestionMark);
	            this.state = 272;
	            this.match(PCREParser.Pipe);
	            this.state = 273;
	            this.alternation();
	            this.state = 274;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 276;
	            this.match(PCREParser.OpenParen);
	            this.state = 277;
	            this.match(PCREParser.QuestionMark);
	            this.state = 278;
	            this.match(PCREParser.GreaterThan);
	            this.state = 279;
	            this.alternation();
	            this.state = 280;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 282;
	            this.match(PCREParser.OpenParen);
	            this.state = 283;
	            this.match(PCREParser.QuestionMark);
	            this.state = 284;
	            this.option_flags();
	            this.state = 285;
	            this.match(PCREParser.Colon);
	            this.state = 286;
	            this.alternation();
	            this.state = 287;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PCREParser.RULE_comment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.match(PCREParser.OpenParen);
	        this.state = 292;
	        this.match(PCREParser.QuestionMark);
	        this.state = 293;
	        this.match(PCREParser.Hash);
	        this.state = 294;
	        this.non_close_parens();
	        this.state = 295;
	        this.match(PCREParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option() {
	    let localctx = new OptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PCREParser.RULE_option);
	    try {
	        this.state = 351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 297;
	            this.match(PCREParser.OpenParen);
	            this.state = 298;
	            this.match(PCREParser.QuestionMark);
	            this.state = 299;
	            this.option_flags();
	            this.state = 300;
	            this.match(PCREParser.Hyphen);
	            this.state = 301;
	            this.option_flags();
	            this.state = 302;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 304;
	            this.match(PCREParser.OpenParen);
	            this.state = 305;
	            this.match(PCREParser.QuestionMark);
	            this.state = 306;
	            this.option_flags();
	            this.state = 307;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 309;
	            this.match(PCREParser.OpenParen);
	            this.state = 310;
	            this.match(PCREParser.QuestionMark);
	            this.state = 311;
	            this.match(PCREParser.Hyphen);
	            this.state = 312;
	            this.option_flags();
	            this.state = 313;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 315;
	            this.match(PCREParser.OpenParen);
	            this.state = 316;
	            this.match(PCREParser.Star);
	            this.state = 317;
	            this.match(PCREParser.NUC);
	            this.state = 318;
	            this.match(PCREParser.OUC);
	            this.state = 319;
	            this.match(PCREParser.Underscore);
	            this.state = 320;
	            this.match(PCREParser.SUC);
	            this.state = 321;
	            this.match(PCREParser.TUC);
	            this.state = 322;
	            this.match(PCREParser.AUC);
	            this.state = 323;
	            this.match(PCREParser.RUC);
	            this.state = 324;
	            this.match(PCREParser.TUC);
	            this.state = 325;
	            this.match(PCREParser.Underscore);
	            this.state = 326;
	            this.match(PCREParser.OUC);
	            this.state = 327;
	            this.match(PCREParser.PUC);
	            this.state = 328;
	            this.match(PCREParser.TUC);
	            this.state = 329;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 330;
	            this.match(PCREParser.OpenParen);
	            this.state = 331;
	            this.match(PCREParser.Star);
	            this.state = 332;
	            this.match(PCREParser.UUC);
	            this.state = 333;
	            this.match(PCREParser.TUC);
	            this.state = 334;
	            this.match(PCREParser.FUC);
	            this.state = 335;
	            this.match(PCREParser.D8);
	            this.state = 336;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 337;
	            this.match(PCREParser.OpenParen);
	            this.state = 338;
	            this.match(PCREParser.Star);
	            this.state = 339;
	            this.match(PCREParser.UUC);
	            this.state = 340;
	            this.match(PCREParser.TUC);
	            this.state = 341;
	            this.match(PCREParser.FUC);
	            this.state = 342;
	            this.match(PCREParser.D1);
	            this.state = 343;
	            this.match(PCREParser.D6);
	            this.state = 344;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 345;
	            this.match(PCREParser.OpenParen);
	            this.state = 346;
	            this.match(PCREParser.Star);
	            this.state = 347;
	            this.match(PCREParser.UUC);
	            this.state = 348;
	            this.match(PCREParser.CUC);
	            this.state = 349;
	            this.match(PCREParser.PUC);
	            this.state = 350;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option_flags() {
	    let localctx = new Option_flagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PCREParser.RULE_option_flags);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 353;
	            this.option_flag();
	            this.state = 356; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)))) !== 0) || _la===PCREParser.UUC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option_flag() {
	    let localctx = new Option_flagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PCREParser.RULE_option_flag);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        _la = this._input.LA(1);
	        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)))) !== 0) || _la===PCREParser.UUC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	look_around() {
	    let localctx = new Look_aroundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PCREParser.RULE_look_around);
	    try {
	        this.state = 386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 360;
	            this.match(PCREParser.OpenParen);
	            this.state = 361;
	            this.match(PCREParser.QuestionMark);
	            this.state = 362;
	            this.match(PCREParser.Equals);
	            this.state = 363;
	            this.alternation();
	            this.state = 364;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 366;
	            this.match(PCREParser.OpenParen);
	            this.state = 367;
	            this.match(PCREParser.QuestionMark);
	            this.state = 368;
	            this.match(PCREParser.Exclamation);
	            this.state = 369;
	            this.alternation();
	            this.state = 370;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 372;
	            this.match(PCREParser.OpenParen);
	            this.state = 373;
	            this.match(PCREParser.QuestionMark);
	            this.state = 374;
	            this.match(PCREParser.LessThan);
	            this.state = 375;
	            this.match(PCREParser.Equals);
	            this.state = 376;
	            this.alternation();
	            this.state = 377;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 379;
	            this.match(PCREParser.OpenParen);
	            this.state = 380;
	            this.match(PCREParser.QuestionMark);
	            this.state = 381;
	            this.match(PCREParser.LessThan);
	            this.state = 382;
	            this.match(PCREParser.Exclamation);
	            this.state = 383;
	            this.alternation();
	            this.state = 384;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subroutine_reference() {
	    let localctx = new Subroutine_referenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PCREParser.RULE_subroutine_reference);
	    try {
	        this.state = 466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 388;
	            this.match(PCREParser.OpenParen);
	            this.state = 389;
	            this.match(PCREParser.QuestionMark);
	            this.state = 390;
	            this.match(PCREParser.RUC);
	            this.state = 391;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 392;
	            this.match(PCREParser.OpenParen);
	            this.state = 393;
	            this.match(PCREParser.QuestionMark);
	            this.state = 394;
	            this.number();
	            this.state = 395;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 397;
	            this.match(PCREParser.OpenParen);
	            this.state = 398;
	            this.match(PCREParser.QuestionMark);
	            this.state = 399;
	            this.match(PCREParser.Plus);
	            this.state = 400;
	            this.number();
	            this.state = 401;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 403;
	            this.match(PCREParser.OpenParen);
	            this.state = 404;
	            this.match(PCREParser.QuestionMark);
	            this.state = 405;
	            this.match(PCREParser.Hyphen);
	            this.state = 406;
	            this.number();
	            this.state = 407;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 409;
	            this.match(PCREParser.OpenParen);
	            this.state = 410;
	            this.match(PCREParser.QuestionMark);
	            this.state = 411;
	            this.match(PCREParser.Ampersand);
	            this.state = 412;
	            this.name();
	            this.state = 413;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 415;
	            this.match(PCREParser.OpenParen);
	            this.state = 416;
	            this.match(PCREParser.QuestionMark);
	            this.state = 417;
	            this.match(PCREParser.PUC);
	            this.state = 418;
	            this.match(PCREParser.GreaterThan);
	            this.state = 419;
	            this.name();
	            this.state = 420;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 422;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 423;
	            this.match(PCREParser.LessThan);
	            this.state = 424;
	            this.name();
	            this.state = 425;
	            this.match(PCREParser.GreaterThan);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 427;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 428;
	            this.match(PCREParser.SingleQuote);
	            this.state = 429;
	            this.name();
	            this.state = 430;
	            this.match(PCREParser.SingleQuote);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 432;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 433;
	            this.match(PCREParser.LessThan);
	            this.state = 434;
	            this.number();
	            this.state = 435;
	            this.match(PCREParser.GreaterThan);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 437;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 438;
	            this.match(PCREParser.SingleQuote);
	            this.state = 439;
	            this.number();
	            this.state = 440;
	            this.match(PCREParser.SingleQuote);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 442;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 443;
	            this.match(PCREParser.LessThan);
	            this.state = 444;
	            this.match(PCREParser.Plus);
	            this.state = 445;
	            this.number();
	            this.state = 446;
	            this.match(PCREParser.GreaterThan);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 448;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 449;
	            this.match(PCREParser.SingleQuote);
	            this.state = 450;
	            this.match(PCREParser.Plus);
	            this.state = 451;
	            this.number();
	            this.state = 452;
	            this.match(PCREParser.SingleQuote);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 454;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 455;
	            this.match(PCREParser.LessThan);
	            this.state = 456;
	            this.match(PCREParser.Hyphen);
	            this.state = 457;
	            this.number();
	            this.state = 458;
	            this.match(PCREParser.GreaterThan);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 460;
	            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
	            this.state = 461;
	            this.match(PCREParser.SingleQuote);
	            this.state = 462;
	            this.match(PCREParser.Hyphen);
	            this.state = 463;
	            this.number();
	            this.state = 464;
	            this.match(PCREParser.SingleQuote);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional() {
	    let localctx = new ConditionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PCREParser.RULE_conditional);
	    var _la = 0; // Token type
	    try {
	        this.state = 619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 468;
	            this.match(PCREParser.OpenParen);
	            this.state = 469;
	            this.match(PCREParser.QuestionMark);
	            this.state = 470;
	            this.match(PCREParser.OpenParen);
	            this.state = 471;
	            this.number();
	            this.state = 472;
	            this.match(PCREParser.CloseParen);
	            this.state = 473;
	            this.alternation();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 474;
	                this.match(PCREParser.Pipe);
	                this.state = 475;
	                this.alternation();
	            }

	            this.state = 478;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 480;
	            this.match(PCREParser.OpenParen);
	            this.state = 481;
	            this.match(PCREParser.QuestionMark);
	            this.state = 482;
	            this.match(PCREParser.OpenParen);
	            this.state = 483;
	            this.match(PCREParser.Plus);
	            this.state = 484;
	            this.number();
	            this.state = 485;
	            this.match(PCREParser.CloseParen);
	            this.state = 486;
	            this.alternation();
	            this.state = 489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 487;
	                this.match(PCREParser.Pipe);
	                this.state = 488;
	                this.alternation();
	            }

	            this.state = 491;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 493;
	            this.match(PCREParser.OpenParen);
	            this.state = 494;
	            this.match(PCREParser.QuestionMark);
	            this.state = 495;
	            this.match(PCREParser.OpenParen);
	            this.state = 496;
	            this.match(PCREParser.Hyphen);
	            this.state = 497;
	            this.number();
	            this.state = 498;
	            this.match(PCREParser.CloseParen);
	            this.state = 499;
	            this.alternation();
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 500;
	                this.match(PCREParser.Pipe);
	                this.state = 501;
	                this.alternation();
	            }

	            this.state = 504;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 506;
	            this.match(PCREParser.OpenParen);
	            this.state = 507;
	            this.match(PCREParser.QuestionMark);
	            this.state = 508;
	            this.match(PCREParser.OpenParen);
	            this.state = 509;
	            this.match(PCREParser.LessThan);
	            this.state = 510;
	            this.name();
	            this.state = 511;
	            this.match(PCREParser.GreaterThan);
	            this.state = 512;
	            this.match(PCREParser.CloseParen);
	            this.state = 513;
	            this.alternation();
	            this.state = 516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 514;
	                this.match(PCREParser.Pipe);
	                this.state = 515;
	                this.alternation();
	            }

	            this.state = 518;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 520;
	            this.match(PCREParser.OpenParen);
	            this.state = 521;
	            this.match(PCREParser.QuestionMark);
	            this.state = 522;
	            this.match(PCREParser.OpenParen);
	            this.state = 523;
	            this.match(PCREParser.SingleQuote);
	            this.state = 524;
	            this.name();
	            this.state = 525;
	            this.match(PCREParser.SingleQuote);
	            this.state = 526;
	            this.match(PCREParser.CloseParen);
	            this.state = 527;
	            this.alternation();
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 528;
	                this.match(PCREParser.Pipe);
	                this.state = 529;
	                this.alternation();
	            }

	            this.state = 532;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 534;
	            this.match(PCREParser.OpenParen);
	            this.state = 535;
	            this.match(PCREParser.QuestionMark);
	            this.state = 536;
	            this.match(PCREParser.OpenParen);
	            this.state = 537;
	            this.match(PCREParser.RUC);
	            this.state = 538;
	            this.number();
	            this.state = 539;
	            this.match(PCREParser.CloseParen);
	            this.state = 540;
	            this.alternation();
	            this.state = 543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 541;
	                this.match(PCREParser.Pipe);
	                this.state = 542;
	                this.alternation();
	            }

	            this.state = 545;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 547;
	            this.match(PCREParser.OpenParen);
	            this.state = 548;
	            this.match(PCREParser.QuestionMark);
	            this.state = 549;
	            this.match(PCREParser.OpenParen);
	            this.state = 550;
	            this.match(PCREParser.RUC);
	            this.state = 551;
	            this.match(PCREParser.CloseParen);
	            this.state = 552;
	            this.alternation();
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 553;
	                this.match(PCREParser.Pipe);
	                this.state = 554;
	                this.alternation();
	            }

	            this.state = 557;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 559;
	            this.match(PCREParser.OpenParen);
	            this.state = 560;
	            this.match(PCREParser.QuestionMark);
	            this.state = 561;
	            this.match(PCREParser.OpenParen);
	            this.state = 562;
	            this.match(PCREParser.RUC);
	            this.state = 563;
	            this.match(PCREParser.Ampersand);
	            this.state = 564;
	            this.name();
	            this.state = 565;
	            this.match(PCREParser.CloseParen);
	            this.state = 566;
	            this.alternation();
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 567;
	                this.match(PCREParser.Pipe);
	                this.state = 568;
	                this.alternation();
	            }

	            this.state = 571;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 573;
	            this.match(PCREParser.OpenParen);
	            this.state = 574;
	            this.match(PCREParser.QuestionMark);
	            this.state = 575;
	            this.match(PCREParser.OpenParen);
	            this.state = 576;
	            this.match(PCREParser.DUC);
	            this.state = 577;
	            this.match(PCREParser.EUC);
	            this.state = 578;
	            this.match(PCREParser.FUC);
	            this.state = 579;
	            this.match(PCREParser.IUC);
	            this.state = 580;
	            this.match(PCREParser.NUC);
	            this.state = 581;
	            this.match(PCREParser.EUC);
	            this.state = 582;
	            this.match(PCREParser.CloseParen);
	            this.state = 583;
	            this.alternation();
	            this.state = 586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 584;
	                this.match(PCREParser.Pipe);
	                this.state = 585;
	                this.alternation();
	            }

	            this.state = 588;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 590;
	            this.match(PCREParser.OpenParen);
	            this.state = 591;
	            this.match(PCREParser.QuestionMark);
	            this.state = 592;
	            this.match(PCREParser.OpenParen);
	            this.state = 593;
	            this.match(PCREParser.ALC);
	            this.state = 594;
	            this.match(PCREParser.SLC);
	            this.state = 595;
	            this.match(PCREParser.SLC);
	            this.state = 596;
	            this.match(PCREParser.ELC);
	            this.state = 597;
	            this.match(PCREParser.RLC);
	            this.state = 598;
	            this.match(PCREParser.TLC);
	            this.state = 599;
	            this.match(PCREParser.CloseParen);
	            this.state = 600;
	            this.alternation();
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 601;
	                this.match(PCREParser.Pipe);
	                this.state = 602;
	                this.alternation();
	            }

	            this.state = 605;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 607;
	            this.match(PCREParser.OpenParen);
	            this.state = 608;
	            this.match(PCREParser.QuestionMark);
	            this.state = 609;
	            this.match(PCREParser.OpenParen);
	            this.state = 610;
	            this.name();
	            this.state = 611;
	            this.match(PCREParser.CloseParen);
	            this.state = 612;
	            this.alternation();
	            this.state = 615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.Pipe) {
	                this.state = 613;
	                this.match(PCREParser.Pipe);
	                this.state = 614;
	                this.alternation();
	            }

	            this.state = 617;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backtrack_control() {
	    let localctx = new Backtrack_controlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PCREParser.RULE_backtrack_control);
	    var _la = 0; // Token type
	    try {
	        this.state = 721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 621;
	            this.match(PCREParser.OpenParen);
	            this.state = 622;
	            this.match(PCREParser.Star);
	            this.state = 623;
	            this.match(PCREParser.AUC);
	            this.state = 624;
	            this.match(PCREParser.CUC);
	            this.state = 625;
	            this.match(PCREParser.CUC);
	            this.state = 626;
	            this.match(PCREParser.EUC);
	            this.state = 627;
	            this.match(PCREParser.PUC);
	            this.state = 628;
	            this.match(PCREParser.TUC);
	            this.state = 629;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 630;
	            this.match(PCREParser.OpenParen);
	            this.state = 631;
	            this.match(PCREParser.Star);
	            this.state = 632;
	            this.match(PCREParser.FUC);
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.AUC) {
	                this.state = 633;
	                this.match(PCREParser.AUC);
	                this.state = 634;
	                this.match(PCREParser.IUC);
	                this.state = 635;
	                this.match(PCREParser.LUC);
	            }

	            this.state = 638;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 639;
	            this.match(PCREParser.OpenParen);
	            this.state = 640;
	            this.match(PCREParser.Star);
	            this.state = 645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PCREParser.MUC) {
	                this.state = 641;
	                this.match(PCREParser.MUC);
	                this.state = 642;
	                this.match(PCREParser.AUC);
	                this.state = 643;
	                this.match(PCREParser.RUC);
	                this.state = 644;
	                this.match(PCREParser.KUC);
	            }

	            this.state = 647;
	            this.match(PCREParser.Colon);
	            this.state = 648;
	            this.match(PCREParser.NUC);
	            this.state = 649;
	            this.match(PCREParser.AUC);
	            this.state = 650;
	            this.match(PCREParser.MUC);
	            this.state = 651;
	            this.match(PCREParser.EUC);
	            this.state = 652;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 653;
	            this.match(PCREParser.OpenParen);
	            this.state = 654;
	            this.match(PCREParser.Star);
	            this.state = 655;
	            this.match(PCREParser.CUC);
	            this.state = 656;
	            this.match(PCREParser.OUC);
	            this.state = 657;
	            this.match(PCREParser.MUC);
	            this.state = 658;
	            this.match(PCREParser.MUC);
	            this.state = 659;
	            this.match(PCREParser.IUC);
	            this.state = 660;
	            this.match(PCREParser.TUC);
	            this.state = 661;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 662;
	            this.match(PCREParser.OpenParen);
	            this.state = 663;
	            this.match(PCREParser.Star);
	            this.state = 664;
	            this.match(PCREParser.PUC);
	            this.state = 665;
	            this.match(PCREParser.RUC);
	            this.state = 666;
	            this.match(PCREParser.UUC);
	            this.state = 667;
	            this.match(PCREParser.NUC);
	            this.state = 668;
	            this.match(PCREParser.EUC);
	            this.state = 669;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 670;
	            this.match(PCREParser.OpenParen);
	            this.state = 671;
	            this.match(PCREParser.Star);
	            this.state = 672;
	            this.match(PCREParser.PUC);
	            this.state = 673;
	            this.match(PCREParser.RUC);
	            this.state = 674;
	            this.match(PCREParser.UUC);
	            this.state = 675;
	            this.match(PCREParser.NUC);
	            this.state = 676;
	            this.match(PCREParser.EUC);
	            this.state = 677;
	            this.match(PCREParser.Colon);
	            this.state = 678;
	            this.match(PCREParser.NUC);
	            this.state = 679;
	            this.match(PCREParser.AUC);
	            this.state = 680;
	            this.match(PCREParser.MUC);
	            this.state = 681;
	            this.match(PCREParser.EUC);
	            this.state = 682;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 683;
	            this.match(PCREParser.OpenParen);
	            this.state = 684;
	            this.match(PCREParser.Star);
	            this.state = 685;
	            this.match(PCREParser.SUC);
	            this.state = 686;
	            this.match(PCREParser.KUC);
	            this.state = 687;
	            this.match(PCREParser.IUC);
	            this.state = 688;
	            this.match(PCREParser.PUC);
	            this.state = 689;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 690;
	            this.match(PCREParser.OpenParen);
	            this.state = 691;
	            this.match(PCREParser.Star);
	            this.state = 692;
	            this.match(PCREParser.SUC);
	            this.state = 693;
	            this.match(PCREParser.KUC);
	            this.state = 694;
	            this.match(PCREParser.IUC);
	            this.state = 695;
	            this.match(PCREParser.PUC);
	            this.state = 696;
	            this.match(PCREParser.Colon);
	            this.state = 697;
	            this.match(PCREParser.NUC);
	            this.state = 698;
	            this.match(PCREParser.AUC);
	            this.state = 699;
	            this.match(PCREParser.MUC);
	            this.state = 700;
	            this.match(PCREParser.EUC);
	            this.state = 701;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 702;
	            this.match(PCREParser.OpenParen);
	            this.state = 703;
	            this.match(PCREParser.Star);
	            this.state = 704;
	            this.match(PCREParser.TUC);
	            this.state = 705;
	            this.match(PCREParser.HUC);
	            this.state = 706;
	            this.match(PCREParser.EUC);
	            this.state = 707;
	            this.match(PCREParser.NUC);
	            this.state = 708;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 709;
	            this.match(PCREParser.OpenParen);
	            this.state = 710;
	            this.match(PCREParser.Star);
	            this.state = 711;
	            this.match(PCREParser.TUC);
	            this.state = 712;
	            this.match(PCREParser.HUC);
	            this.state = 713;
	            this.match(PCREParser.EUC);
	            this.state = 714;
	            this.match(PCREParser.NUC);
	            this.state = 715;
	            this.match(PCREParser.Colon);
	            this.state = 716;
	            this.match(PCREParser.NUC);
	            this.state = 717;
	            this.match(PCREParser.AUC);
	            this.state = 718;
	            this.match(PCREParser.MUC);
	            this.state = 719;
	            this.match(PCREParser.EUC);
	            this.state = 720;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newline_convention() {
	    let localctx = new Newline_conventionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PCREParser.RULE_newline_convention);
	    try {
	        this.state = 784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 723;
	            this.match(PCREParser.OpenParen);
	            this.state = 724;
	            this.match(PCREParser.Star);
	            this.state = 725;
	            this.match(PCREParser.CUC);
	            this.state = 726;
	            this.match(PCREParser.RUC);
	            this.state = 727;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 728;
	            this.match(PCREParser.OpenParen);
	            this.state = 729;
	            this.match(PCREParser.Star);
	            this.state = 730;
	            this.match(PCREParser.LUC);
	            this.state = 731;
	            this.match(PCREParser.FUC);
	            this.state = 732;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 733;
	            this.match(PCREParser.OpenParen);
	            this.state = 734;
	            this.match(PCREParser.Star);
	            this.state = 735;
	            this.match(PCREParser.CUC);
	            this.state = 736;
	            this.match(PCREParser.RUC);
	            this.state = 737;
	            this.match(PCREParser.LUC);
	            this.state = 738;
	            this.match(PCREParser.FUC);
	            this.state = 739;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 740;
	            this.match(PCREParser.OpenParen);
	            this.state = 741;
	            this.match(PCREParser.Star);
	            this.state = 742;
	            this.match(PCREParser.AUC);
	            this.state = 743;
	            this.match(PCREParser.NUC);
	            this.state = 744;
	            this.match(PCREParser.YUC);
	            this.state = 745;
	            this.match(PCREParser.CUC);
	            this.state = 746;
	            this.match(PCREParser.RUC);
	            this.state = 747;
	            this.match(PCREParser.LUC);
	            this.state = 748;
	            this.match(PCREParser.FUC);
	            this.state = 749;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 750;
	            this.match(PCREParser.OpenParen);
	            this.state = 751;
	            this.match(PCREParser.Star);
	            this.state = 752;
	            this.match(PCREParser.AUC);
	            this.state = 753;
	            this.match(PCREParser.NUC);
	            this.state = 754;
	            this.match(PCREParser.YUC);
	            this.state = 755;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 756;
	            this.match(PCREParser.OpenParen);
	            this.state = 757;
	            this.match(PCREParser.Star);
	            this.state = 758;
	            this.match(PCREParser.BUC);
	            this.state = 759;
	            this.match(PCREParser.SUC);
	            this.state = 760;
	            this.match(PCREParser.RUC);
	            this.state = 761;
	            this.match(PCREParser.Underscore);
	            this.state = 762;
	            this.match(PCREParser.AUC);
	            this.state = 763;
	            this.match(PCREParser.NUC);
	            this.state = 764;
	            this.match(PCREParser.YUC);
	            this.state = 765;
	            this.match(PCREParser.CUC);
	            this.state = 766;
	            this.match(PCREParser.RUC);
	            this.state = 767;
	            this.match(PCREParser.LUC);
	            this.state = 768;
	            this.match(PCREParser.FUC);
	            this.state = 769;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 770;
	            this.match(PCREParser.OpenParen);
	            this.state = 771;
	            this.match(PCREParser.Star);
	            this.state = 772;
	            this.match(PCREParser.BUC);
	            this.state = 773;
	            this.match(PCREParser.SUC);
	            this.state = 774;
	            this.match(PCREParser.RUC);
	            this.state = 775;
	            this.match(PCREParser.Underscore);
	            this.state = 776;
	            this.match(PCREParser.UUC);
	            this.state = 777;
	            this.match(PCREParser.NUC);
	            this.state = 778;
	            this.match(PCREParser.IUC);
	            this.state = 779;
	            this.match(PCREParser.CUC);
	            this.state = 780;
	            this.match(PCREParser.OUC);
	            this.state = 781;
	            this.match(PCREParser.DUC);
	            this.state = 782;
	            this.match(PCREParser.EUC);
	            this.state = 783;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callout() {
	    let localctx = new CalloutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PCREParser.RULE_callout);
	    try {
	        this.state = 796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 786;
	            this.match(PCREParser.OpenParen);
	            this.state = 787;
	            this.match(PCREParser.QuestionMark);
	            this.state = 788;
	            this.match(PCREParser.CUC);
	            this.state = 789;
	            this.match(PCREParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 790;
	            this.match(PCREParser.OpenParen);
	            this.state = 791;
	            this.match(PCREParser.QuestionMark);
	            this.state = 792;
	            this.match(PCREParser.CUC);
	            this.state = 793;
	            this.number();
	            this.state = 794;
	            this.match(PCREParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PCREParser.RULE_atom);
	    try {
	        this.state = 824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 798;
	            this.subroutine_reference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 799;
	            this.shared_atom();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 800;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 801;
	            this.character_class();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 802;
	            this.capture();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 803;
	            this.non_capture();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 804;
	            this.comment();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 805;
	            this.option();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 806;
	            this.look_around();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 807;
	            this.backreference();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 808;
	            this.conditional();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 809;
	            this.backtrack_control();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 810;
	            this.newline_convention();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 811;
	            this.callout();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 812;
	            this.match(PCREParser.Dot);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 813;
	            this.match(PCREParser.Caret);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 814;
	            this.match(PCREParser.StartOfSubject);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 815;
	            this.match(PCREParser.WordBoundary);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 816;
	            this.match(PCREParser.NonWordBoundary);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 817;
	            this.match(PCREParser.EndOfSubjectOrLine);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 818;
	            this.match(PCREParser.EndOfSubjectOrLineEndOfSubject);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 819;
	            this.match(PCREParser.EndOfSubject);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 820;
	            this.match(PCREParser.PreviousMatchInSubject);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 821;
	            this.match(PCREParser.ResetStartMatch);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 822;
	            this.match(PCREParser.OneDataUnit);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 823;
	            this.match(PCREParser.ExtendedUnicodeChar);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cc_atom() {
	    let localctx = new Cc_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PCREParser.RULE_cc_atom);
	    try {
	        this.state = 833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 826;
	            this.cc_literal();
	            this.state = 827;
	            this.match(PCREParser.Hyphen);
	            this.state = 828;
	            this.cc_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 830;
	            this.shared_atom();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 831;
	            this.cc_literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 832;
	            this.backreference_or_octal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shared_atom() {
	    let localctx = new Shared_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PCREParser.RULE_shared_atom);
	    try {
	        this.state = 854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.POSIXNamedSet:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.match(PCREParser.POSIXNamedSet);
	            break;
	        case PCREParser.POSIXNegatedNamedSet:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.match(PCREParser.POSIXNegatedNamedSet);
	            break;
	        case PCREParser.ControlChar:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 837;
	            this.match(PCREParser.ControlChar);
	            break;
	        case PCREParser.DecimalDigit:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 838;
	            this.match(PCREParser.DecimalDigit);
	            break;
	        case PCREParser.NotDecimalDigit:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 839;
	            this.match(PCREParser.NotDecimalDigit);
	            break;
	        case PCREParser.HorizontalWhiteSpace:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 840;
	            this.match(PCREParser.HorizontalWhiteSpace);
	            break;
	        case PCREParser.NotHorizontalWhiteSpace:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 841;
	            this.match(PCREParser.NotHorizontalWhiteSpace);
	            break;
	        case PCREParser.NotNewLine:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 842;
	            this.match(PCREParser.NotNewLine);
	            break;
	        case PCREParser.CharWithProperty:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 843;
	            this.match(PCREParser.CharWithProperty);
	            break;
	        case PCREParser.CharWithoutProperty:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 844;
	            this.match(PCREParser.CharWithoutProperty);
	            break;
	        case PCREParser.NewLineSequence:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 845;
	            this.match(PCREParser.NewLineSequence);
	            break;
	        case PCREParser.WhiteSpace:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 846;
	            this.match(PCREParser.WhiteSpace);
	            break;
	        case PCREParser.NotWhiteSpace:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 847;
	            this.match(PCREParser.NotWhiteSpace);
	            break;
	        case PCREParser.VerticalWhiteSpace:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 848;
	            this.match(PCREParser.VerticalWhiteSpace);
	            break;
	        case PCREParser.NotVerticalWhiteSpace:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 849;
	            this.match(PCREParser.NotVerticalWhiteSpace);
	            break;
	        case PCREParser.WordChar:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 850;
	            this.match(PCREParser.WordChar);
	            break;
	        case PCREParser.NotWordChar:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 851;
	            this.match(PCREParser.NotWordChar);
	            break;
	        case PCREParser.Backslash:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 852;
	            this.match(PCREParser.Backslash);
	            this.state = 853;
	            this.matchWildcard();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PCREParser.RULE_literal);
	    try {
	        this.state = 858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.Quoted:
	        case PCREParser.BlockQuoted:
	        case PCREParser.BellChar:
	        case PCREParser.EscapeChar:
	        case PCREParser.FormFeed:
	        case PCREParser.NewLine:
	        case PCREParser.CarriageReturn:
	        case PCREParser.Tab:
	        case PCREParser.Backslash:
	        case PCREParser.HexChar:
	        case PCREParser.Hyphen:
	        case PCREParser.OpenBrace:
	        case PCREParser.CloseBrace:
	        case PCREParser.Comma:
	        case PCREParser.LessThan:
	        case PCREParser.GreaterThan:
	        case PCREParser.SingleQuote:
	        case PCREParser.Underscore:
	        case PCREParser.Colon:
	        case PCREParser.Hash:
	        case PCREParser.Equals:
	        case PCREParser.Exclamation:
	        case PCREParser.Ampersand:
	        case PCREParser.ALC:
	        case PCREParser.BLC:
	        case PCREParser.CLC:
	        case PCREParser.DLC:
	        case PCREParser.ELC:
	        case PCREParser.FLC:
	        case PCREParser.GLC:
	        case PCREParser.HLC:
	        case PCREParser.ILC:
	        case PCREParser.JLC:
	        case PCREParser.KLC:
	        case PCREParser.LLC:
	        case PCREParser.MLC:
	        case PCREParser.NLC:
	        case PCREParser.OLC:
	        case PCREParser.PLC:
	        case PCREParser.QLC:
	        case PCREParser.RLC:
	        case PCREParser.SLC:
	        case PCREParser.TLC:
	        case PCREParser.ULC:
	        case PCREParser.VLC:
	        case PCREParser.WLC:
	        case PCREParser.XLC:
	        case PCREParser.YLC:
	        case PCREParser.ZLC:
	        case PCREParser.AUC:
	        case PCREParser.BUC:
	        case PCREParser.CUC:
	        case PCREParser.DUC:
	        case PCREParser.EUC:
	        case PCREParser.FUC:
	        case PCREParser.GUC:
	        case PCREParser.HUC:
	        case PCREParser.IUC:
	        case PCREParser.JUC:
	        case PCREParser.KUC:
	        case PCREParser.LUC:
	        case PCREParser.MUC:
	        case PCREParser.NUC:
	        case PCREParser.OUC:
	        case PCREParser.PUC:
	        case PCREParser.QUC:
	        case PCREParser.RUC:
	        case PCREParser.SUC:
	        case PCREParser.TUC:
	        case PCREParser.UUC:
	        case PCREParser.VUC:
	        case PCREParser.WUC:
	        case PCREParser.XUC:
	        case PCREParser.YUC:
	        case PCREParser.ZUC:
	        case PCREParser.D1:
	        case PCREParser.D2:
	        case PCREParser.D3:
	        case PCREParser.D4:
	        case PCREParser.D5:
	        case PCREParser.D6:
	        case PCREParser.D7:
	        case PCREParser.D8:
	        case PCREParser.D9:
	        case PCREParser.D0:
	        case PCREParser.OtherChar:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 856;
	            this.shared_literal();
	            break;
	        case PCREParser.CharacterClassEnd:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 857;
	            this.match(PCREParser.CharacterClassEnd);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cc_literal() {
	    let localctx = new Cc_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PCREParser.RULE_cc_literal);
	    try {
	        this.state = 872;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.Quoted:
	        case PCREParser.BlockQuoted:
	        case PCREParser.BellChar:
	        case PCREParser.EscapeChar:
	        case PCREParser.FormFeed:
	        case PCREParser.NewLine:
	        case PCREParser.CarriageReturn:
	        case PCREParser.Tab:
	        case PCREParser.Backslash:
	        case PCREParser.HexChar:
	        case PCREParser.Hyphen:
	        case PCREParser.OpenBrace:
	        case PCREParser.CloseBrace:
	        case PCREParser.Comma:
	        case PCREParser.LessThan:
	        case PCREParser.GreaterThan:
	        case PCREParser.SingleQuote:
	        case PCREParser.Underscore:
	        case PCREParser.Colon:
	        case PCREParser.Hash:
	        case PCREParser.Equals:
	        case PCREParser.Exclamation:
	        case PCREParser.Ampersand:
	        case PCREParser.ALC:
	        case PCREParser.BLC:
	        case PCREParser.CLC:
	        case PCREParser.DLC:
	        case PCREParser.ELC:
	        case PCREParser.FLC:
	        case PCREParser.GLC:
	        case PCREParser.HLC:
	        case PCREParser.ILC:
	        case PCREParser.JLC:
	        case PCREParser.KLC:
	        case PCREParser.LLC:
	        case PCREParser.MLC:
	        case PCREParser.NLC:
	        case PCREParser.OLC:
	        case PCREParser.PLC:
	        case PCREParser.QLC:
	        case PCREParser.RLC:
	        case PCREParser.SLC:
	        case PCREParser.TLC:
	        case PCREParser.ULC:
	        case PCREParser.VLC:
	        case PCREParser.WLC:
	        case PCREParser.XLC:
	        case PCREParser.YLC:
	        case PCREParser.ZLC:
	        case PCREParser.AUC:
	        case PCREParser.BUC:
	        case PCREParser.CUC:
	        case PCREParser.DUC:
	        case PCREParser.EUC:
	        case PCREParser.FUC:
	        case PCREParser.GUC:
	        case PCREParser.HUC:
	        case PCREParser.IUC:
	        case PCREParser.JUC:
	        case PCREParser.KUC:
	        case PCREParser.LUC:
	        case PCREParser.MUC:
	        case PCREParser.NUC:
	        case PCREParser.OUC:
	        case PCREParser.PUC:
	        case PCREParser.QUC:
	        case PCREParser.RUC:
	        case PCREParser.SUC:
	        case PCREParser.TUC:
	        case PCREParser.UUC:
	        case PCREParser.VUC:
	        case PCREParser.WUC:
	        case PCREParser.XUC:
	        case PCREParser.YUC:
	        case PCREParser.ZUC:
	        case PCREParser.D1:
	        case PCREParser.D2:
	        case PCREParser.D3:
	        case PCREParser.D4:
	        case PCREParser.D5:
	        case PCREParser.D6:
	        case PCREParser.D7:
	        case PCREParser.D8:
	        case PCREParser.D9:
	        case PCREParser.D0:
	        case PCREParser.OtherChar:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 860;
	            this.shared_literal();
	            break;
	        case PCREParser.Dot:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 861;
	            this.match(PCREParser.Dot);
	            break;
	        case PCREParser.CharacterClassStart:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 862;
	            this.match(PCREParser.CharacterClassStart);
	            break;
	        case PCREParser.Caret:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 863;
	            this.match(PCREParser.Caret);
	            break;
	        case PCREParser.QuestionMark:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 864;
	            this.match(PCREParser.QuestionMark);
	            break;
	        case PCREParser.Plus:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 865;
	            this.match(PCREParser.Plus);
	            break;
	        case PCREParser.Star:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 866;
	            this.match(PCREParser.Star);
	            break;
	        case PCREParser.WordBoundary:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 867;
	            this.match(PCREParser.WordBoundary);
	            break;
	        case PCREParser.EndOfSubjectOrLine:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 868;
	            this.match(PCREParser.EndOfSubjectOrLine);
	            break;
	        case PCREParser.Pipe:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 869;
	            this.match(PCREParser.Pipe);
	            break;
	        case PCREParser.OpenParen:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 870;
	            this.match(PCREParser.OpenParen);
	            break;
	        case PCREParser.CloseParen:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 871;
	            this.match(PCREParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shared_literal() {
	    let localctx = new Shared_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PCREParser.RULE_shared_literal);
	    try {
	        this.state = 900;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.Backslash:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 874;
	            this.octal_char();
	            break;
	        case PCREParser.ALC:
	        case PCREParser.BLC:
	        case PCREParser.CLC:
	        case PCREParser.DLC:
	        case PCREParser.ELC:
	        case PCREParser.FLC:
	        case PCREParser.GLC:
	        case PCREParser.HLC:
	        case PCREParser.ILC:
	        case PCREParser.JLC:
	        case PCREParser.KLC:
	        case PCREParser.LLC:
	        case PCREParser.MLC:
	        case PCREParser.NLC:
	        case PCREParser.OLC:
	        case PCREParser.PLC:
	        case PCREParser.QLC:
	        case PCREParser.RLC:
	        case PCREParser.SLC:
	        case PCREParser.TLC:
	        case PCREParser.ULC:
	        case PCREParser.VLC:
	        case PCREParser.WLC:
	        case PCREParser.XLC:
	        case PCREParser.YLC:
	        case PCREParser.ZLC:
	        case PCREParser.AUC:
	        case PCREParser.BUC:
	        case PCREParser.CUC:
	        case PCREParser.DUC:
	        case PCREParser.EUC:
	        case PCREParser.FUC:
	        case PCREParser.GUC:
	        case PCREParser.HUC:
	        case PCREParser.IUC:
	        case PCREParser.JUC:
	        case PCREParser.KUC:
	        case PCREParser.LUC:
	        case PCREParser.MUC:
	        case PCREParser.NUC:
	        case PCREParser.OUC:
	        case PCREParser.PUC:
	        case PCREParser.QUC:
	        case PCREParser.RUC:
	        case PCREParser.SUC:
	        case PCREParser.TUC:
	        case PCREParser.UUC:
	        case PCREParser.VUC:
	        case PCREParser.WUC:
	        case PCREParser.XUC:
	        case PCREParser.YUC:
	        case PCREParser.ZUC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 875;
	            this.letter();
	            break;
	        case PCREParser.D1:
	        case PCREParser.D2:
	        case PCREParser.D3:
	        case PCREParser.D4:
	        case PCREParser.D5:
	        case PCREParser.D6:
	        case PCREParser.D7:
	        case PCREParser.D8:
	        case PCREParser.D9:
	        case PCREParser.D0:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 876;
	            this.digit();
	            break;
	        case PCREParser.BellChar:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 877;
	            this.match(PCREParser.BellChar);
	            break;
	        case PCREParser.EscapeChar:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 878;
	            this.match(PCREParser.EscapeChar);
	            break;
	        case PCREParser.FormFeed:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 879;
	            this.match(PCREParser.FormFeed);
	            break;
	        case PCREParser.NewLine:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 880;
	            this.match(PCREParser.NewLine);
	            break;
	        case PCREParser.CarriageReturn:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 881;
	            this.match(PCREParser.CarriageReturn);
	            break;
	        case PCREParser.Tab:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 882;
	            this.match(PCREParser.Tab);
	            break;
	        case PCREParser.HexChar:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 883;
	            this.match(PCREParser.HexChar);
	            break;
	        case PCREParser.Quoted:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 884;
	            this.match(PCREParser.Quoted);
	            break;
	        case PCREParser.BlockQuoted:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 885;
	            this.match(PCREParser.BlockQuoted);
	            break;
	        case PCREParser.OpenBrace:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 886;
	            this.match(PCREParser.OpenBrace);
	            break;
	        case PCREParser.CloseBrace:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 887;
	            this.match(PCREParser.CloseBrace);
	            break;
	        case PCREParser.Comma:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 888;
	            this.match(PCREParser.Comma);
	            break;
	        case PCREParser.Hyphen:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 889;
	            this.match(PCREParser.Hyphen);
	            break;
	        case PCREParser.LessThan:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 890;
	            this.match(PCREParser.LessThan);
	            break;
	        case PCREParser.GreaterThan:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 891;
	            this.match(PCREParser.GreaterThan);
	            break;
	        case PCREParser.SingleQuote:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 892;
	            this.match(PCREParser.SingleQuote);
	            break;
	        case PCREParser.Underscore:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 893;
	            this.match(PCREParser.Underscore);
	            break;
	        case PCREParser.Colon:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 894;
	            this.match(PCREParser.Colon);
	            break;
	        case PCREParser.Hash:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 895;
	            this.match(PCREParser.Hash);
	            break;
	        case PCREParser.Equals:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 896;
	            this.match(PCREParser.Equals);
	            break;
	        case PCREParser.Exclamation:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 897;
	            this.match(PCREParser.Exclamation);
	            break;
	        case PCREParser.Ampersand:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 898;
	            this.match(PCREParser.Ampersand);
	            break;
	        case PCREParser.OtherChar:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 899;
	            this.match(PCREParser.OtherChar);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PCREParser.RULE_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.digits();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octal_char() {
	    let localctx = new Octal_charContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PCREParser.RULE_octal_char);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 904;
	            this.match(PCREParser.Backslash);
	            this.state = 905;
	            _la = this._input.LA(1);
	            if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 906;
	            this.octal_digit();
	            this.state = 907;
	            this.octal_digit();
	            break;

	        case 2:
	            this.state = 909;
	            this.match(PCREParser.Backslash);
	            this.state = 910;
	            this.octal_digit();
	            this.state = 911;
	            this.octal_digit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octal_digit() {
	    let localctx = new Octal_digitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, PCREParser.RULE_octal_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 915;
	        _la = this._input.LA(1);
	        if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	digits() {
	    let localctx = new DigitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PCREParser.RULE_digits);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 917;
	        		this.digit();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 920; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	digit() {
	    let localctx = new DigitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PCREParser.RULE_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        _la = this._input.LA(1);
	        if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D8 - 115)) | (1 << (PCREParser.D9 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PCREParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        this.alpha_nums();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alpha_nums() {
	    let localctx = new Alpha_numsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PCREParser.RULE_alpha_nums);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 928;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PCREParser.ALC:
	        case PCREParser.BLC:
	        case PCREParser.CLC:
	        case PCREParser.DLC:
	        case PCREParser.ELC:
	        case PCREParser.FLC:
	        case PCREParser.GLC:
	        case PCREParser.HLC:
	        case PCREParser.ILC:
	        case PCREParser.JLC:
	        case PCREParser.KLC:
	        case PCREParser.LLC:
	        case PCREParser.MLC:
	        case PCREParser.NLC:
	        case PCREParser.OLC:
	        case PCREParser.PLC:
	        case PCREParser.QLC:
	        case PCREParser.RLC:
	        case PCREParser.SLC:
	        case PCREParser.TLC:
	        case PCREParser.ULC:
	        case PCREParser.VLC:
	        case PCREParser.WLC:
	        case PCREParser.XLC:
	        case PCREParser.YLC:
	        case PCREParser.ZLC:
	        case PCREParser.AUC:
	        case PCREParser.BUC:
	        case PCREParser.CUC:
	        case PCREParser.DUC:
	        case PCREParser.EUC:
	        case PCREParser.FUC:
	        case PCREParser.GUC:
	        case PCREParser.HUC:
	        case PCREParser.IUC:
	        case PCREParser.JUC:
	        case PCREParser.KUC:
	        case PCREParser.LUC:
	        case PCREParser.MUC:
	        case PCREParser.NUC:
	        case PCREParser.OUC:
	        case PCREParser.PUC:
	        case PCREParser.QUC:
	        case PCREParser.RUC:
	        case PCREParser.SUC:
	        case PCREParser.TUC:
	        case PCREParser.UUC:
	        case PCREParser.VUC:
	        case PCREParser.WUC:
	        case PCREParser.XUC:
	        case PCREParser.YUC:
	        case PCREParser.ZUC:
	            this.state = 926;
	            this.letter();
	            break;
	        case PCREParser.Underscore:
	            this.state = 927;
	            this.match(PCREParser.Underscore);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (PCREParser.Underscore - 57)) | (1 << (PCREParser.ALC - 57)) | (1 << (PCREParser.BLC - 57)) | (1 << (PCREParser.CLC - 57)) | (1 << (PCREParser.DLC - 57)) | (1 << (PCREParser.ELC - 57)) | (1 << (PCREParser.FLC - 57)) | (1 << (PCREParser.GLC - 57)) | (1 << (PCREParser.HLC - 57)) | (1 << (PCREParser.ILC - 57)) | (1 << (PCREParser.JLC - 57)) | (1 << (PCREParser.KLC - 57)) | (1 << (PCREParser.LLC - 57)) | (1 << (PCREParser.MLC - 57)) | (1 << (PCREParser.NLC - 57)) | (1 << (PCREParser.OLC - 57)) | (1 << (PCREParser.PLC - 57)) | (1 << (PCREParser.QLC - 57)) | (1 << (PCREParser.RLC - 57)) | (1 << (PCREParser.SLC - 57)) | (1 << (PCREParser.TLC - 57)) | (1 << (PCREParser.ULC - 57)) | (1 << (PCREParser.VLC - 57)) | (1 << (PCREParser.WLC - 57)) | (1 << (PCREParser.XLC - 57)) | (1 << (PCREParser.YLC - 57)) | (1 << (PCREParser.ZLC - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (PCREParser.AUC - 89)) | (1 << (PCREParser.BUC - 89)) | (1 << (PCREParser.CUC - 89)) | (1 << (PCREParser.DUC - 89)) | (1 << (PCREParser.EUC - 89)) | (1 << (PCREParser.FUC - 89)) | (1 << (PCREParser.GUC - 89)) | (1 << (PCREParser.HUC - 89)) | (1 << (PCREParser.IUC - 89)) | (1 << (PCREParser.JUC - 89)) | (1 << (PCREParser.KUC - 89)) | (1 << (PCREParser.LUC - 89)) | (1 << (PCREParser.MUC - 89)) | (1 << (PCREParser.NUC - 89)) | (1 << (PCREParser.OUC - 89)) | (1 << (PCREParser.PUC - 89)) | (1 << (PCREParser.QUC - 89)) | (1 << (PCREParser.RUC - 89)) | (1 << (PCREParser.SUC - 89)) | (1 << (PCREParser.TUC - 89)) | (1 << (PCREParser.UUC - 89)) | (1 << (PCREParser.VUC - 89)) | (1 << (PCREParser.WUC - 89)) | (1 << (PCREParser.XUC - 89)) | (1 << (PCREParser.YUC - 89)) | (1 << (PCREParser.ZUC - 89)) | (1 << (PCREParser.D1 - 89)) | (1 << (PCREParser.D2 - 89)) | (1 << (PCREParser.D3 - 89)) | (1 << (PCREParser.D4 - 89)) | (1 << (PCREParser.D5 - 89)) | (1 << (PCREParser.D6 - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (PCREParser.D7 - 121)) | (1 << (PCREParser.D8 - 121)) | (1 << (PCREParser.D9 - 121)) | (1 << (PCREParser.D0 - 121)))) !== 0)) {
	            this.state = 933;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case PCREParser.ALC:
	            case PCREParser.BLC:
	            case PCREParser.CLC:
	            case PCREParser.DLC:
	            case PCREParser.ELC:
	            case PCREParser.FLC:
	            case PCREParser.GLC:
	            case PCREParser.HLC:
	            case PCREParser.ILC:
	            case PCREParser.JLC:
	            case PCREParser.KLC:
	            case PCREParser.LLC:
	            case PCREParser.MLC:
	            case PCREParser.NLC:
	            case PCREParser.OLC:
	            case PCREParser.PLC:
	            case PCREParser.QLC:
	            case PCREParser.RLC:
	            case PCREParser.SLC:
	            case PCREParser.TLC:
	            case PCREParser.ULC:
	            case PCREParser.VLC:
	            case PCREParser.WLC:
	            case PCREParser.XLC:
	            case PCREParser.YLC:
	            case PCREParser.ZLC:
	            case PCREParser.AUC:
	            case PCREParser.BUC:
	            case PCREParser.CUC:
	            case PCREParser.DUC:
	            case PCREParser.EUC:
	            case PCREParser.FUC:
	            case PCREParser.GUC:
	            case PCREParser.HUC:
	            case PCREParser.IUC:
	            case PCREParser.JUC:
	            case PCREParser.KUC:
	            case PCREParser.LUC:
	            case PCREParser.MUC:
	            case PCREParser.NUC:
	            case PCREParser.OUC:
	            case PCREParser.PUC:
	            case PCREParser.QUC:
	            case PCREParser.RUC:
	            case PCREParser.SUC:
	            case PCREParser.TUC:
	            case PCREParser.UUC:
	            case PCREParser.VUC:
	            case PCREParser.WUC:
	            case PCREParser.XUC:
	            case PCREParser.YUC:
	            case PCREParser.ZUC:
	                this.state = 930;
	                this.letter();
	                break;
	            case PCREParser.Underscore:
	                this.state = 931;
	                this.match(PCREParser.Underscore);
	                break;
	            case PCREParser.D1:
	            case PCREParser.D2:
	            case PCREParser.D3:
	            case PCREParser.D4:
	            case PCREParser.D5:
	            case PCREParser.D6:
	            case PCREParser.D7:
	            case PCREParser.D8:
	            case PCREParser.D9:
	            case PCREParser.D0:
	                this.state = 932;
	                this.digit();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_close_parens() {
	    let localctx = new Non_close_parensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PCREParser.RULE_non_close_parens);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 938;
	            this.non_close_paren();
	            this.state = 941; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.NonWordBoundary - 32)) | (1 << (PCREParser.StartOfSubject - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.EndOfSubjectOrLineEndOfSubject - 32)) | (1 << (PCREParser.EndOfSubject - 32)) | (1 << (PCREParser.PreviousMatchInSubject - 32)) | (1 << (PCREParser.ResetStartMatch - 32)) | (1 << (PCREParser.SubroutineOrNamedReferenceStartG - 32)) | (1 << (PCREParser.NamedReferenceStartK - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_close_paren() {
	    let localctx = new Non_close_parenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PCREParser.RULE_non_close_paren);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        _la = this._input.LA(1);
	        if(_la<=0 || _la===PCREParser.CloseParen) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letter() {
	    let localctx = new LetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PCREParser.RULE_letter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (PCREParser.ALC - 63)) | (1 << (PCREParser.BLC - 63)) | (1 << (PCREParser.CLC - 63)) | (1 << (PCREParser.DLC - 63)) | (1 << (PCREParser.ELC - 63)) | (1 << (PCREParser.FLC - 63)) | (1 << (PCREParser.GLC - 63)) | (1 << (PCREParser.HLC - 63)) | (1 << (PCREParser.ILC - 63)) | (1 << (PCREParser.JLC - 63)) | (1 << (PCREParser.KLC - 63)) | (1 << (PCREParser.LLC - 63)) | (1 << (PCREParser.MLC - 63)) | (1 << (PCREParser.NLC - 63)) | (1 << (PCREParser.OLC - 63)) | (1 << (PCREParser.PLC - 63)) | (1 << (PCREParser.QLC - 63)) | (1 << (PCREParser.RLC - 63)) | (1 << (PCREParser.SLC - 63)) | (1 << (PCREParser.TLC - 63)) | (1 << (PCREParser.ULC - 63)) | (1 << (PCREParser.VLC - 63)) | (1 << (PCREParser.WLC - 63)) | (1 << (PCREParser.XLC - 63)) | (1 << (PCREParser.YLC - 63)) | (1 << (PCREParser.ZLC - 63)) | (1 << (PCREParser.AUC - 63)) | (1 << (PCREParser.BUC - 63)) | (1 << (PCREParser.CUC - 63)) | (1 << (PCREParser.DUC - 63)) | (1 << (PCREParser.EUC - 63)) | (1 << (PCREParser.FUC - 63)))) !== 0) || ((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (PCREParser.GUC - 95)) | (1 << (PCREParser.HUC - 95)) | (1 << (PCREParser.IUC - 95)) | (1 << (PCREParser.JUC - 95)) | (1 << (PCREParser.KUC - 95)) | (1 << (PCREParser.LUC - 95)) | (1 << (PCREParser.MUC - 95)) | (1 << (PCREParser.NUC - 95)) | (1 << (PCREParser.OUC - 95)) | (1 << (PCREParser.PUC - 95)) | (1 << (PCREParser.QUC - 95)) | (1 << (PCREParser.RUC - 95)) | (1 << (PCREParser.SUC - 95)) | (1 << (PCREParser.TUC - 95)) | (1 << (PCREParser.UUC - 95)) | (1 << (PCREParser.VUC - 95)) | (1 << (PCREParser.WUC - 95)) | (1 << (PCREParser.XUC - 95)) | (1 << (PCREParser.YUC - 95)) | (1 << (PCREParser.ZUC - 95)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PCREParser.EOF = antlr4.Token.EOF;
PCREParser.Quoted = 1;
PCREParser.BlockQuoted = 2;
PCREParser.BellChar = 3;
PCREParser.ControlChar = 4;
PCREParser.EscapeChar = 5;
PCREParser.FormFeed = 6;
PCREParser.NewLine = 7;
PCREParser.CarriageReturn = 8;
PCREParser.Tab = 9;
PCREParser.Backslash = 10;
PCREParser.HexChar = 11;
PCREParser.Dot = 12;
PCREParser.OneDataUnit = 13;
PCREParser.DecimalDigit = 14;
PCREParser.NotDecimalDigit = 15;
PCREParser.HorizontalWhiteSpace = 16;
PCREParser.NotHorizontalWhiteSpace = 17;
PCREParser.NotNewLine = 18;
PCREParser.CharWithProperty = 19;
PCREParser.CharWithoutProperty = 20;
PCREParser.NewLineSequence = 21;
PCREParser.WhiteSpace = 22;
PCREParser.NotWhiteSpace = 23;
PCREParser.VerticalWhiteSpace = 24;
PCREParser.NotVerticalWhiteSpace = 25;
PCREParser.WordChar = 26;
PCREParser.NotWordChar = 27;
PCREParser.ExtendedUnicodeChar = 28;
PCREParser.CharacterClassStart = 29;
PCREParser.CharacterClassEnd = 30;
PCREParser.Caret = 31;
PCREParser.Hyphen = 32;
PCREParser.POSIXNamedSet = 33;
PCREParser.POSIXNegatedNamedSet = 34;
PCREParser.QuestionMark = 35;
PCREParser.Plus = 36;
PCREParser.Star = 37;
PCREParser.OpenBrace = 38;
PCREParser.CloseBrace = 39;
PCREParser.Comma = 40;
PCREParser.WordBoundary = 41;
PCREParser.NonWordBoundary = 42;
PCREParser.StartOfSubject = 43;
PCREParser.EndOfSubjectOrLine = 44;
PCREParser.EndOfSubjectOrLineEndOfSubject = 45;
PCREParser.EndOfSubject = 46;
PCREParser.PreviousMatchInSubject = 47;
PCREParser.ResetStartMatch = 48;
PCREParser.SubroutineOrNamedReferenceStartG = 49;
PCREParser.NamedReferenceStartK = 50;
PCREParser.Pipe = 51;
PCREParser.OpenParen = 52;
PCREParser.CloseParen = 53;
PCREParser.LessThan = 54;
PCREParser.GreaterThan = 55;
PCREParser.SingleQuote = 56;
PCREParser.Underscore = 57;
PCREParser.Colon = 58;
PCREParser.Hash = 59;
PCREParser.Equals = 60;
PCREParser.Exclamation = 61;
PCREParser.Ampersand = 62;
PCREParser.ALC = 63;
PCREParser.BLC = 64;
PCREParser.CLC = 65;
PCREParser.DLC = 66;
PCREParser.ELC = 67;
PCREParser.FLC = 68;
PCREParser.GLC = 69;
PCREParser.HLC = 70;
PCREParser.ILC = 71;
PCREParser.JLC = 72;
PCREParser.KLC = 73;
PCREParser.LLC = 74;
PCREParser.MLC = 75;
PCREParser.NLC = 76;
PCREParser.OLC = 77;
PCREParser.PLC = 78;
PCREParser.QLC = 79;
PCREParser.RLC = 80;
PCREParser.SLC = 81;
PCREParser.TLC = 82;
PCREParser.ULC = 83;
PCREParser.VLC = 84;
PCREParser.WLC = 85;
PCREParser.XLC = 86;
PCREParser.YLC = 87;
PCREParser.ZLC = 88;
PCREParser.AUC = 89;
PCREParser.BUC = 90;
PCREParser.CUC = 91;
PCREParser.DUC = 92;
PCREParser.EUC = 93;
PCREParser.FUC = 94;
PCREParser.GUC = 95;
PCREParser.HUC = 96;
PCREParser.IUC = 97;
PCREParser.JUC = 98;
PCREParser.KUC = 99;
PCREParser.LUC = 100;
PCREParser.MUC = 101;
PCREParser.NUC = 102;
PCREParser.OUC = 103;
PCREParser.PUC = 104;
PCREParser.QUC = 105;
PCREParser.RUC = 106;
PCREParser.SUC = 107;
PCREParser.TUC = 108;
PCREParser.UUC = 109;
PCREParser.VUC = 110;
PCREParser.WUC = 111;
PCREParser.XUC = 112;
PCREParser.YUC = 113;
PCREParser.ZUC = 114;
PCREParser.D1 = 115;
PCREParser.D2 = 116;
PCREParser.D3 = 117;
PCREParser.D4 = 118;
PCREParser.D5 = 119;
PCREParser.D6 = 120;
PCREParser.D7 = 121;
PCREParser.D8 = 122;
PCREParser.D9 = 123;
PCREParser.D0 = 124;
PCREParser.OtherChar = 125;

PCREParser.RULE_parse = 0;
PCREParser.RULE_alternation = 1;
PCREParser.RULE_expr = 2;
PCREParser.RULE_element = 3;
PCREParser.RULE_quantifier = 4;
PCREParser.RULE_quantifier_type = 5;
PCREParser.RULE_character_class = 6;
PCREParser.RULE_backreference = 7;
PCREParser.RULE_backreference_or_octal = 8;
PCREParser.RULE_capture = 9;
PCREParser.RULE_non_capture = 10;
PCREParser.RULE_comment = 11;
PCREParser.RULE_option = 12;
PCREParser.RULE_option_flags = 13;
PCREParser.RULE_option_flag = 14;
PCREParser.RULE_look_around = 15;
PCREParser.RULE_subroutine_reference = 16;
PCREParser.RULE_conditional = 17;
PCREParser.RULE_backtrack_control = 18;
PCREParser.RULE_newline_convention = 19;
PCREParser.RULE_callout = 20;
PCREParser.RULE_atom = 21;
PCREParser.RULE_cc_atom = 22;
PCREParser.RULE_shared_atom = 23;
PCREParser.RULE_literal = 24;
PCREParser.RULE_cc_literal = 25;
PCREParser.RULE_shared_literal = 26;
PCREParser.RULE_number = 27;
PCREParser.RULE_octal_char = 28;
PCREParser.RULE_octal_digit = 29;
PCREParser.RULE_digits = 30;
PCREParser.RULE_digit = 31;
PCREParser.RULE_name = 32;
PCREParser.RULE_alpha_nums = 33;
PCREParser.RULE_non_close_parens = 34;
PCREParser.RULE_non_close_paren = 35;
PCREParser.RULE_letter = 36;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_parse;
    }

	alternation() {
	    return this.getTypedRuleContext(AlternationContext,0);
	};

	EOF() {
	    return this.getToken(PCREParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitParse(this);
		}
	}


}



class AlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_alternation;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	Pipe = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.Pipe);
	    } else {
	        return this.getToken(PCREParser.Pipe, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitAlternation(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_expr;
    }

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitExpr(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_element;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	quantifier() {
	    return this.getTypedRuleContext(QuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitElement(this);
		}
	}


}



class QuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_quantifier;
    }

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	quantifier_type() {
	    return this.getTypedRuleContext(Quantifier_typeContext,0);
	};

	Plus() {
	    return this.getToken(PCREParser.Plus, 0);
	};

	Star() {
	    return this.getToken(PCREParser.Star, 0);
	};

	OpenBrace() {
	    return this.getToken(PCREParser.OpenBrace, 0);
	};

	number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberContext);
	    } else {
	        return this.getTypedRuleContext(NumberContext,i);
	    }
	};

	CloseBrace() {
	    return this.getToken(PCREParser.CloseBrace, 0);
	};

	Comma() {
	    return this.getToken(PCREParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitQuantifier(this);
		}
	}


}



class Quantifier_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_quantifier_type;
    }

	Plus() {
	    return this.getToken(PCREParser.Plus, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterQuantifier_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitQuantifier_type(this);
		}
	}


}



class Character_classContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_character_class;
    }

	CharacterClassStart() {
	    return this.getToken(PCREParser.CharacterClassStart, 0);
	};

	Caret() {
	    return this.getToken(PCREParser.Caret, 0);
	};

	CharacterClassEnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.CharacterClassEnd);
	    } else {
	        return this.getToken(PCREParser.CharacterClassEnd, i);
	    }
	};


	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	cc_atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cc_atomContext);
	    } else {
	        return this.getTypedRuleContext(Cc_atomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterCharacter_class(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitCharacter_class(this);
		}
	}


}



class BackreferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_backreference;
    }

	backreference_or_octal() {
	    return this.getTypedRuleContext(Backreference_or_octalContext,0);
	};

	SubroutineOrNamedReferenceStartG() {
	    return this.getToken(PCREParser.SubroutineOrNamedReferenceStartG, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	OpenBrace() {
	    return this.getToken(PCREParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PCREParser.CloseBrace, 0);
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	NamedReferenceStartK() {
	    return this.getToken(PCREParser.NamedReferenceStartK, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	SingleQuote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.SingleQuote);
	    } else {
	        return this.getToken(PCREParser.SingleQuote, i);
	    }
	};


	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	Equals() {
	    return this.getToken(PCREParser.Equals, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterBackreference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitBackreference(this);
		}
	}


}



class Backreference_or_octalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_backreference_or_octal;
    }

	octal_char() {
	    return this.getTypedRuleContext(Octal_charContext,0);
	};

	Backslash() {
	    return this.getToken(PCREParser.Backslash, 0);
	};

	digit() {
	    return this.getTypedRuleContext(DigitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterBackreference_or_octal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitBackreference_or_octal(this);
		}
	}


}



class CaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_capture;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	alternation() {
	    return this.getTypedRuleContext(AlternationContext,0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	SingleQuote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.SingleQuote);
	    } else {
	        return this.getToken(PCREParser.SingleQuote, i);
	    }
	};


	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitCapture(this);
		}
	}


}



class Non_captureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_non_capture;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(PCREParser.Colon, 0);
	};

	alternation() {
	    return this.getTypedRuleContext(AlternationContext,0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	Pipe() {
	    return this.getToken(PCREParser.Pipe, 0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	option_flags() {
	    return this.getTypedRuleContext(Option_flagsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterNon_capture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitNon_capture(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_comment;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	Hash() {
	    return this.getToken(PCREParser.Hash, 0);
	};

	non_close_parens() {
	    return this.getTypedRuleContext(Non_close_parensContext,0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitComment(this);
		}
	}


}



class OptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_option;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	option_flags = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Option_flagsContext);
	    } else {
	        return this.getTypedRuleContext(Option_flagsContext,i);
	    }
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	Star() {
	    return this.getToken(PCREParser.Star, 0);
	};

	NUC() {
	    return this.getToken(PCREParser.NUC, 0);
	};

	OUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.OUC);
	    } else {
	        return this.getToken(PCREParser.OUC, i);
	    }
	};


	Underscore = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.Underscore);
	    } else {
	        return this.getToken(PCREParser.Underscore, i);
	    }
	};


	SUC() {
	    return this.getToken(PCREParser.SUC, 0);
	};

	TUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.TUC);
	    } else {
	        return this.getToken(PCREParser.TUC, i);
	    }
	};


	AUC() {
	    return this.getToken(PCREParser.AUC, 0);
	};

	RUC() {
	    return this.getToken(PCREParser.RUC, 0);
	};

	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	UUC() {
	    return this.getToken(PCREParser.UUC, 0);
	};

	FUC() {
	    return this.getToken(PCREParser.FUC, 0);
	};

	D8() {
	    return this.getToken(PCREParser.D8, 0);
	};

	D1() {
	    return this.getToken(PCREParser.D1, 0);
	};

	D6() {
	    return this.getToken(PCREParser.D6, 0);
	};

	CUC() {
	    return this.getToken(PCREParser.CUC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitOption(this);
		}
	}


}



class Option_flagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_option_flags;
    }

	option_flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Option_flagContext);
	    } else {
	        return this.getTypedRuleContext(Option_flagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterOption_flags(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitOption_flags(this);
		}
	}


}



class Option_flagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_option_flag;
    }

	ILC() {
	    return this.getToken(PCREParser.ILC, 0);
	};

	JUC() {
	    return this.getToken(PCREParser.JUC, 0);
	};

	MLC() {
	    return this.getToken(PCREParser.MLC, 0);
	};

	SLC() {
	    return this.getToken(PCREParser.SLC, 0);
	};

	UUC() {
	    return this.getToken(PCREParser.UUC, 0);
	};

	XLC() {
	    return this.getToken(PCREParser.XLC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterOption_flag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitOption_flag(this);
		}
	}


}



class Look_aroundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_look_around;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	Equals() {
	    return this.getToken(PCREParser.Equals, 0);
	};

	alternation() {
	    return this.getTypedRuleContext(AlternationContext,0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	Exclamation() {
	    return this.getToken(PCREParser.Exclamation, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterLook_around(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitLook_around(this);
		}
	}


}



class Subroutine_referenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_subroutine_reference;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	RUC() {
	    return this.getToken(PCREParser.RUC, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Plus() {
	    return this.getToken(PCREParser.Plus, 0);
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	Ampersand() {
	    return this.getToken(PCREParser.Ampersand, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	SubroutineOrNamedReferenceStartG() {
	    return this.getToken(PCREParser.SubroutineOrNamedReferenceStartG, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	SingleQuote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.SingleQuote);
	    } else {
	        return this.getToken(PCREParser.SingleQuote, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterSubroutine_reference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitSubroutine_reference(this);
		}
	}


}



class ConditionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_conditional;
    }

	OpenParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.OpenParen);
	    } else {
	        return this.getToken(PCREParser.OpenParen, i);
	    }
	};


	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	CloseParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.CloseParen);
	    } else {
	        return this.getToken(PCREParser.CloseParen, i);
	    }
	};


	alternation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlternationContext);
	    } else {
	        return this.getTypedRuleContext(AlternationContext,i);
	    }
	};

	Pipe() {
	    return this.getToken(PCREParser.Pipe, 0);
	};

	Plus() {
	    return this.getToken(PCREParser.Plus, 0);
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	SingleQuote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.SingleQuote);
	    } else {
	        return this.getToken(PCREParser.SingleQuote, i);
	    }
	};


	RUC() {
	    return this.getToken(PCREParser.RUC, 0);
	};

	Ampersand() {
	    return this.getToken(PCREParser.Ampersand, 0);
	};

	DUC() {
	    return this.getToken(PCREParser.DUC, 0);
	};

	EUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.EUC);
	    } else {
	        return this.getToken(PCREParser.EUC, i);
	    }
	};


	FUC() {
	    return this.getToken(PCREParser.FUC, 0);
	};

	IUC() {
	    return this.getToken(PCREParser.IUC, 0);
	};

	NUC() {
	    return this.getToken(PCREParser.NUC, 0);
	};

	ALC() {
	    return this.getToken(PCREParser.ALC, 0);
	};

	SLC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.SLC);
	    } else {
	        return this.getToken(PCREParser.SLC, i);
	    }
	};


	ELC() {
	    return this.getToken(PCREParser.ELC, 0);
	};

	RLC() {
	    return this.getToken(PCREParser.RLC, 0);
	};

	TLC() {
	    return this.getToken(PCREParser.TLC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterConditional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitConditional(this);
		}
	}


}



class Backtrack_controlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_backtrack_control;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	Star() {
	    return this.getToken(PCREParser.Star, 0);
	};

	AUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.AUC);
	    } else {
	        return this.getToken(PCREParser.AUC, i);
	    }
	};


	CUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.CUC);
	    } else {
	        return this.getToken(PCREParser.CUC, i);
	    }
	};


	EUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.EUC);
	    } else {
	        return this.getToken(PCREParser.EUC, i);
	    }
	};


	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	TUC() {
	    return this.getToken(PCREParser.TUC, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	FUC() {
	    return this.getToken(PCREParser.FUC, 0);
	};

	IUC() {
	    return this.getToken(PCREParser.IUC, 0);
	};

	LUC() {
	    return this.getToken(PCREParser.LUC, 0);
	};

	Colon() {
	    return this.getToken(PCREParser.Colon, 0);
	};

	NUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.NUC);
	    } else {
	        return this.getToken(PCREParser.NUC, i);
	    }
	};


	MUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.MUC);
	    } else {
	        return this.getToken(PCREParser.MUC, i);
	    }
	};


	RUC() {
	    return this.getToken(PCREParser.RUC, 0);
	};

	KUC() {
	    return this.getToken(PCREParser.KUC, 0);
	};

	OUC() {
	    return this.getToken(PCREParser.OUC, 0);
	};

	UUC() {
	    return this.getToken(PCREParser.UUC, 0);
	};

	SUC() {
	    return this.getToken(PCREParser.SUC, 0);
	};

	HUC() {
	    return this.getToken(PCREParser.HUC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterBacktrack_control(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitBacktrack_control(this);
		}
	}


}



class Newline_conventionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_newline_convention;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	Star() {
	    return this.getToken(PCREParser.Star, 0);
	};

	CUC() {
	    return this.getToken(PCREParser.CUC, 0);
	};

	RUC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.RUC);
	    } else {
	        return this.getToken(PCREParser.RUC, i);
	    }
	};


	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	LUC() {
	    return this.getToken(PCREParser.LUC, 0);
	};

	FUC() {
	    return this.getToken(PCREParser.FUC, 0);
	};

	AUC() {
	    return this.getToken(PCREParser.AUC, 0);
	};

	NUC() {
	    return this.getToken(PCREParser.NUC, 0);
	};

	YUC() {
	    return this.getToken(PCREParser.YUC, 0);
	};

	BUC() {
	    return this.getToken(PCREParser.BUC, 0);
	};

	SUC() {
	    return this.getToken(PCREParser.SUC, 0);
	};

	Underscore() {
	    return this.getToken(PCREParser.Underscore, 0);
	};

	UUC() {
	    return this.getToken(PCREParser.UUC, 0);
	};

	IUC() {
	    return this.getToken(PCREParser.IUC, 0);
	};

	OUC() {
	    return this.getToken(PCREParser.OUC, 0);
	};

	DUC() {
	    return this.getToken(PCREParser.DUC, 0);
	};

	EUC() {
	    return this.getToken(PCREParser.EUC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterNewline_convention(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitNewline_convention(this);
		}
	}


}



class CalloutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_callout;
    }

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	CUC() {
	    return this.getToken(PCREParser.CUC, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterCallout(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitCallout(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_atom;
    }

	subroutine_reference() {
	    return this.getTypedRuleContext(Subroutine_referenceContext,0);
	};

	shared_atom() {
	    return this.getTypedRuleContext(Shared_atomContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	character_class() {
	    return this.getTypedRuleContext(Character_classContext,0);
	};

	capture() {
	    return this.getTypedRuleContext(CaptureContext,0);
	};

	non_capture() {
	    return this.getTypedRuleContext(Non_captureContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	option() {
	    return this.getTypedRuleContext(OptionContext,0);
	};

	look_around() {
	    return this.getTypedRuleContext(Look_aroundContext,0);
	};

	backreference() {
	    return this.getTypedRuleContext(BackreferenceContext,0);
	};

	conditional() {
	    return this.getTypedRuleContext(ConditionalContext,0);
	};

	backtrack_control() {
	    return this.getTypedRuleContext(Backtrack_controlContext,0);
	};

	newline_convention() {
	    return this.getTypedRuleContext(Newline_conventionContext,0);
	};

	callout() {
	    return this.getTypedRuleContext(CalloutContext,0);
	};

	Dot() {
	    return this.getToken(PCREParser.Dot, 0);
	};

	Caret() {
	    return this.getToken(PCREParser.Caret, 0);
	};

	StartOfSubject() {
	    return this.getToken(PCREParser.StartOfSubject, 0);
	};

	WordBoundary() {
	    return this.getToken(PCREParser.WordBoundary, 0);
	};

	NonWordBoundary() {
	    return this.getToken(PCREParser.NonWordBoundary, 0);
	};

	EndOfSubjectOrLine() {
	    return this.getToken(PCREParser.EndOfSubjectOrLine, 0);
	};

	EndOfSubjectOrLineEndOfSubject() {
	    return this.getToken(PCREParser.EndOfSubjectOrLineEndOfSubject, 0);
	};

	EndOfSubject() {
	    return this.getToken(PCREParser.EndOfSubject, 0);
	};

	PreviousMatchInSubject() {
	    return this.getToken(PCREParser.PreviousMatchInSubject, 0);
	};

	ResetStartMatch() {
	    return this.getToken(PCREParser.ResetStartMatch, 0);
	};

	OneDataUnit() {
	    return this.getToken(PCREParser.OneDataUnit, 0);
	};

	ExtendedUnicodeChar() {
	    return this.getToken(PCREParser.ExtendedUnicodeChar, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitAtom(this);
		}
	}


}



class Cc_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_cc_atom;
    }

	cc_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cc_literalContext);
	    } else {
	        return this.getTypedRuleContext(Cc_literalContext,i);
	    }
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	shared_atom() {
	    return this.getTypedRuleContext(Shared_atomContext,0);
	};

	backreference_or_octal() {
	    return this.getTypedRuleContext(Backreference_or_octalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterCc_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitCc_atom(this);
		}
	}


}



class Shared_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_shared_atom;
    }

	POSIXNamedSet() {
	    return this.getToken(PCREParser.POSIXNamedSet, 0);
	};

	POSIXNegatedNamedSet() {
	    return this.getToken(PCREParser.POSIXNegatedNamedSet, 0);
	};

	ControlChar() {
	    return this.getToken(PCREParser.ControlChar, 0);
	};

	DecimalDigit() {
	    return this.getToken(PCREParser.DecimalDigit, 0);
	};

	NotDecimalDigit() {
	    return this.getToken(PCREParser.NotDecimalDigit, 0);
	};

	HorizontalWhiteSpace() {
	    return this.getToken(PCREParser.HorizontalWhiteSpace, 0);
	};

	NotHorizontalWhiteSpace() {
	    return this.getToken(PCREParser.NotHorizontalWhiteSpace, 0);
	};

	NotNewLine() {
	    return this.getToken(PCREParser.NotNewLine, 0);
	};

	CharWithProperty() {
	    return this.getToken(PCREParser.CharWithProperty, 0);
	};

	CharWithoutProperty() {
	    return this.getToken(PCREParser.CharWithoutProperty, 0);
	};

	NewLineSequence() {
	    return this.getToken(PCREParser.NewLineSequence, 0);
	};

	WhiteSpace() {
	    return this.getToken(PCREParser.WhiteSpace, 0);
	};

	NotWhiteSpace() {
	    return this.getToken(PCREParser.NotWhiteSpace, 0);
	};

	VerticalWhiteSpace() {
	    return this.getToken(PCREParser.VerticalWhiteSpace, 0);
	};

	NotVerticalWhiteSpace() {
	    return this.getToken(PCREParser.NotVerticalWhiteSpace, 0);
	};

	WordChar() {
	    return this.getToken(PCREParser.WordChar, 0);
	};

	NotWordChar() {
	    return this.getToken(PCREParser.NotWordChar, 0);
	};

	Backslash() {
	    return this.getToken(PCREParser.Backslash, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterShared_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitShared_atom(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_literal;
    }

	shared_literal() {
	    return this.getTypedRuleContext(Shared_literalContext,0);
	};

	CharacterClassEnd() {
	    return this.getToken(PCREParser.CharacterClassEnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Cc_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_cc_literal;
    }

	shared_literal() {
	    return this.getTypedRuleContext(Shared_literalContext,0);
	};

	Dot() {
	    return this.getToken(PCREParser.Dot, 0);
	};

	CharacterClassStart() {
	    return this.getToken(PCREParser.CharacterClassStart, 0);
	};

	Caret() {
	    return this.getToken(PCREParser.Caret, 0);
	};

	QuestionMark() {
	    return this.getToken(PCREParser.QuestionMark, 0);
	};

	Plus() {
	    return this.getToken(PCREParser.Plus, 0);
	};

	Star() {
	    return this.getToken(PCREParser.Star, 0);
	};

	WordBoundary() {
	    return this.getToken(PCREParser.WordBoundary, 0);
	};

	EndOfSubjectOrLine() {
	    return this.getToken(PCREParser.EndOfSubjectOrLine, 0);
	};

	Pipe() {
	    return this.getToken(PCREParser.Pipe, 0);
	};

	OpenParen() {
	    return this.getToken(PCREParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterCc_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitCc_literal(this);
		}
	}


}



class Shared_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_shared_literal;
    }

	octal_char() {
	    return this.getTypedRuleContext(Octal_charContext,0);
	};

	letter() {
	    return this.getTypedRuleContext(LetterContext,0);
	};

	digit() {
	    return this.getTypedRuleContext(DigitContext,0);
	};

	BellChar() {
	    return this.getToken(PCREParser.BellChar, 0);
	};

	EscapeChar() {
	    return this.getToken(PCREParser.EscapeChar, 0);
	};

	FormFeed() {
	    return this.getToken(PCREParser.FormFeed, 0);
	};

	NewLine() {
	    return this.getToken(PCREParser.NewLine, 0);
	};

	CarriageReturn() {
	    return this.getToken(PCREParser.CarriageReturn, 0);
	};

	Tab() {
	    return this.getToken(PCREParser.Tab, 0);
	};

	HexChar() {
	    return this.getToken(PCREParser.HexChar, 0);
	};

	Quoted() {
	    return this.getToken(PCREParser.Quoted, 0);
	};

	BlockQuoted() {
	    return this.getToken(PCREParser.BlockQuoted, 0);
	};

	OpenBrace() {
	    return this.getToken(PCREParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PCREParser.CloseBrace, 0);
	};

	Comma() {
	    return this.getToken(PCREParser.Comma, 0);
	};

	Hyphen() {
	    return this.getToken(PCREParser.Hyphen, 0);
	};

	LessThan() {
	    return this.getToken(PCREParser.LessThan, 0);
	};

	GreaterThan() {
	    return this.getToken(PCREParser.GreaterThan, 0);
	};

	SingleQuote() {
	    return this.getToken(PCREParser.SingleQuote, 0);
	};

	Underscore() {
	    return this.getToken(PCREParser.Underscore, 0);
	};

	Colon() {
	    return this.getToken(PCREParser.Colon, 0);
	};

	Hash() {
	    return this.getToken(PCREParser.Hash, 0);
	};

	Equals() {
	    return this.getToken(PCREParser.Equals, 0);
	};

	Exclamation() {
	    return this.getToken(PCREParser.Exclamation, 0);
	};

	Ampersand() {
	    return this.getToken(PCREParser.Ampersand, 0);
	};

	OtherChar() {
	    return this.getToken(PCREParser.OtherChar, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterShared_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitShared_literal(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_number;
    }

	digits() {
	    return this.getTypedRuleContext(DigitsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitNumber(this);
		}
	}


}



class Octal_charContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_octal_char;
    }

	Backslash() {
	    return this.getToken(PCREParser.Backslash, 0);
	};

	octal_digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Octal_digitContext);
	    } else {
	        return this.getTypedRuleContext(Octal_digitContext,i);
	    }
	};

	D0() {
	    return this.getToken(PCREParser.D0, 0);
	};

	D1() {
	    return this.getToken(PCREParser.D1, 0);
	};

	D2() {
	    return this.getToken(PCREParser.D2, 0);
	};

	D3() {
	    return this.getToken(PCREParser.D3, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterOctal_char(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitOctal_char(this);
		}
	}


}



class Octal_digitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_octal_digit;
    }

	D0() {
	    return this.getToken(PCREParser.D0, 0);
	};

	D1() {
	    return this.getToken(PCREParser.D1, 0);
	};

	D2() {
	    return this.getToken(PCREParser.D2, 0);
	};

	D3() {
	    return this.getToken(PCREParser.D3, 0);
	};

	D4() {
	    return this.getToken(PCREParser.D4, 0);
	};

	D5() {
	    return this.getToken(PCREParser.D5, 0);
	};

	D6() {
	    return this.getToken(PCREParser.D6, 0);
	};

	D7() {
	    return this.getToken(PCREParser.D7, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterOctal_digit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitOctal_digit(this);
		}
	}


}



class DigitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_digits;
    }

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterDigits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitDigits(this);
		}
	}


}



class DigitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_digit;
    }

	D0() {
	    return this.getToken(PCREParser.D0, 0);
	};

	D1() {
	    return this.getToken(PCREParser.D1, 0);
	};

	D2() {
	    return this.getToken(PCREParser.D2, 0);
	};

	D3() {
	    return this.getToken(PCREParser.D3, 0);
	};

	D4() {
	    return this.getToken(PCREParser.D4, 0);
	};

	D5() {
	    return this.getToken(PCREParser.D5, 0);
	};

	D6() {
	    return this.getToken(PCREParser.D6, 0);
	};

	D7() {
	    return this.getToken(PCREParser.D7, 0);
	};

	D8() {
	    return this.getToken(PCREParser.D8, 0);
	};

	D9() {
	    return this.getToken(PCREParser.D9, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterDigit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitDigit(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_name;
    }

	alpha_nums() {
	    return this.getTypedRuleContext(Alpha_numsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitName(this);
		}
	}


}



class Alpha_numsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_alpha_nums;
    }

	letter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetterContext);
	    } else {
	        return this.getTypedRuleContext(LetterContext,i);
	    }
	};

	Underscore = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PCREParser.Underscore);
	    } else {
	        return this.getToken(PCREParser.Underscore, i);
	    }
	};


	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterAlpha_nums(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitAlpha_nums(this);
		}
	}


}



class Non_close_parensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_non_close_parens;
    }

	non_close_paren = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Non_close_parenContext);
	    } else {
	        return this.getTypedRuleContext(Non_close_parenContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterNon_close_parens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitNon_close_parens(this);
		}
	}


}



class Non_close_parenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_non_close_paren;
    }

	CloseParen() {
	    return this.getToken(PCREParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterNon_close_paren(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitNon_close_paren(this);
		}
	}


}



class LetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PCREParser.RULE_letter;
    }

	ALC() {
	    return this.getToken(PCREParser.ALC, 0);
	};

	BLC() {
	    return this.getToken(PCREParser.BLC, 0);
	};

	CLC() {
	    return this.getToken(PCREParser.CLC, 0);
	};

	DLC() {
	    return this.getToken(PCREParser.DLC, 0);
	};

	ELC() {
	    return this.getToken(PCREParser.ELC, 0);
	};

	FLC() {
	    return this.getToken(PCREParser.FLC, 0);
	};

	GLC() {
	    return this.getToken(PCREParser.GLC, 0);
	};

	HLC() {
	    return this.getToken(PCREParser.HLC, 0);
	};

	ILC() {
	    return this.getToken(PCREParser.ILC, 0);
	};

	JLC() {
	    return this.getToken(PCREParser.JLC, 0);
	};

	KLC() {
	    return this.getToken(PCREParser.KLC, 0);
	};

	LLC() {
	    return this.getToken(PCREParser.LLC, 0);
	};

	MLC() {
	    return this.getToken(PCREParser.MLC, 0);
	};

	NLC() {
	    return this.getToken(PCREParser.NLC, 0);
	};

	OLC() {
	    return this.getToken(PCREParser.OLC, 0);
	};

	PLC() {
	    return this.getToken(PCREParser.PLC, 0);
	};

	QLC() {
	    return this.getToken(PCREParser.QLC, 0);
	};

	RLC() {
	    return this.getToken(PCREParser.RLC, 0);
	};

	SLC() {
	    return this.getToken(PCREParser.SLC, 0);
	};

	TLC() {
	    return this.getToken(PCREParser.TLC, 0);
	};

	ULC() {
	    return this.getToken(PCREParser.ULC, 0);
	};

	VLC() {
	    return this.getToken(PCREParser.VLC, 0);
	};

	WLC() {
	    return this.getToken(PCREParser.WLC, 0);
	};

	XLC() {
	    return this.getToken(PCREParser.XLC, 0);
	};

	YLC() {
	    return this.getToken(PCREParser.YLC, 0);
	};

	ZLC() {
	    return this.getToken(PCREParser.ZLC, 0);
	};

	AUC() {
	    return this.getToken(PCREParser.AUC, 0);
	};

	BUC() {
	    return this.getToken(PCREParser.BUC, 0);
	};

	CUC() {
	    return this.getToken(PCREParser.CUC, 0);
	};

	DUC() {
	    return this.getToken(PCREParser.DUC, 0);
	};

	EUC() {
	    return this.getToken(PCREParser.EUC, 0);
	};

	FUC() {
	    return this.getToken(PCREParser.FUC, 0);
	};

	GUC() {
	    return this.getToken(PCREParser.GUC, 0);
	};

	HUC() {
	    return this.getToken(PCREParser.HUC, 0);
	};

	IUC() {
	    return this.getToken(PCREParser.IUC, 0);
	};

	JUC() {
	    return this.getToken(PCREParser.JUC, 0);
	};

	KUC() {
	    return this.getToken(PCREParser.KUC, 0);
	};

	LUC() {
	    return this.getToken(PCREParser.LUC, 0);
	};

	MUC() {
	    return this.getToken(PCREParser.MUC, 0);
	};

	NUC() {
	    return this.getToken(PCREParser.NUC, 0);
	};

	OUC() {
	    return this.getToken(PCREParser.OUC, 0);
	};

	PUC() {
	    return this.getToken(PCREParser.PUC, 0);
	};

	QUC() {
	    return this.getToken(PCREParser.QUC, 0);
	};

	RUC() {
	    return this.getToken(PCREParser.RUC, 0);
	};

	SUC() {
	    return this.getToken(PCREParser.SUC, 0);
	};

	TUC() {
	    return this.getToken(PCREParser.TUC, 0);
	};

	UUC() {
	    return this.getToken(PCREParser.UUC, 0);
	};

	VUC() {
	    return this.getToken(PCREParser.VUC, 0);
	};

	WUC() {
	    return this.getToken(PCREParser.WUC, 0);
	};

	XUC() {
	    return this.getToken(PCREParser.XUC, 0);
	};

	YUC() {
	    return this.getToken(PCREParser.YUC, 0);
	};

	ZUC() {
	    return this.getToken(PCREParser.ZUC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.enterLetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PCREListener ) {
	        listener.exitLetter(this);
		}
	}


}




PCREParser.ParseContext = ParseContext; 
PCREParser.AlternationContext = AlternationContext; 
PCREParser.ExprContext = ExprContext; 
PCREParser.ElementContext = ElementContext; 
PCREParser.QuantifierContext = QuantifierContext; 
PCREParser.Quantifier_typeContext = Quantifier_typeContext; 
PCREParser.Character_classContext = Character_classContext; 
PCREParser.BackreferenceContext = BackreferenceContext; 
PCREParser.Backreference_or_octalContext = Backreference_or_octalContext; 
PCREParser.CaptureContext = CaptureContext; 
PCREParser.Non_captureContext = Non_captureContext; 
PCREParser.CommentContext = CommentContext; 
PCREParser.OptionContext = OptionContext; 
PCREParser.Option_flagsContext = Option_flagsContext; 
PCREParser.Option_flagContext = Option_flagContext; 
PCREParser.Look_aroundContext = Look_aroundContext; 
PCREParser.Subroutine_referenceContext = Subroutine_referenceContext; 
PCREParser.ConditionalContext = ConditionalContext; 
PCREParser.Backtrack_controlContext = Backtrack_controlContext; 
PCREParser.Newline_conventionContext = Newline_conventionContext; 
PCREParser.CalloutContext = CalloutContext; 
PCREParser.AtomContext = AtomContext; 
PCREParser.Cc_atomContext = Cc_atomContext; 
PCREParser.Shared_atomContext = Shared_atomContext; 
PCREParser.LiteralContext = LiteralContext; 
PCREParser.Cc_literalContext = Cc_literalContext; 
PCREParser.Shared_literalContext = Shared_literalContext; 
PCREParser.NumberContext = NumberContext; 
PCREParser.Octal_charContext = Octal_charContext; 
PCREParser.Octal_digitContext = Octal_digitContext; 
PCREParser.DigitsContext = DigitsContext; 
PCREParser.DigitContext = DigitContext; 
PCREParser.NameContext = NameContext; 
PCREParser.Alpha_numsContext = Alpha_numsContext; 
PCREParser.Non_close_parensContext = Non_close_parensContext; 
PCREParser.Non_close_parenContext = Non_close_parenContext; 
PCREParser.LetterContext = LetterContext; 
