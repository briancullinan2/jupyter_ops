// Generated from ./vb6/VisualBasic6Parser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import VisualBasic6ParserListener from './VisualBasic6ParserListener.js';
const serializedATN = [4,1,222,2861,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,1,0,1,0,1,0,1,1,3,1,321,
8,1,1,1,5,1,324,8,1,10,1,12,1,327,9,1,1,1,1,1,4,1,331,8,1,11,1,12,1,332,
3,1,335,8,1,1,1,3,1,338,8,1,1,1,5,1,341,8,1,10,1,12,1,344,9,1,1,1,3,1,347,
8,1,1,1,5,1,350,8,1,10,1,12,1,353,9,1,1,1,3,1,356,8,1,1,1,5,1,359,8,1,10,
1,12,1,362,9,1,1,1,3,1,365,8,1,1,1,5,1,368,8,1,10,1,12,1,371,9,1,1,1,3,1,
374,8,1,1,1,5,1,377,8,1,10,1,12,1,380,9,1,1,1,3,1,383,8,1,1,1,5,1,386,8,
1,10,1,12,1,389,9,1,1,1,3,1,392,8,1,1,2,4,2,395,8,2,11,2,12,2,396,1,3,1,
3,3,3,401,8,3,1,3,1,3,3,3,405,8,3,1,3,1,3,1,3,3,3,410,8,3,1,3,3,3,413,8,
3,1,3,5,3,416,8,3,10,3,12,3,419,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
3,6,430,8,6,1,7,1,7,4,7,434,8,7,11,7,12,7,435,1,7,4,7,439,8,7,11,7,12,7,
440,1,7,1,7,4,7,445,8,7,11,7,12,7,446,1,8,1,8,3,8,451,8,8,1,8,1,8,3,8,455,
8,8,1,8,1,8,1,8,1,9,1,9,4,9,462,8,9,11,9,12,9,463,4,9,466,8,9,11,9,12,9,
467,1,10,1,10,4,10,472,8,10,11,10,12,10,473,4,10,476,8,10,11,10,12,10,477,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,488,8,11,1,12,1,12,4,12,492,
8,12,11,12,12,12,493,1,12,5,12,497,8,12,10,12,12,12,500,9,12,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,514,8,13,1,14,3,14,
517,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,525,8,14,1,14,4,14,528,8,14,
11,14,12,14,529,1,14,4,14,533,8,14,11,14,12,14,534,1,14,1,14,5,14,539,8,
14,10,14,12,14,542,9,14,1,15,1,15,1,15,3,15,547,8,15,1,16,3,16,550,8,16,
1,16,1,16,3,16,554,8,16,1,16,1,16,3,16,558,8,16,1,16,3,16,561,8,16,1,16,
1,16,3,16,565,8,16,1,16,4,16,568,8,16,11,16,12,16,569,1,17,1,17,3,17,574,
8,17,1,17,1,17,1,17,1,17,1,17,3,17,581,8,17,1,17,1,17,1,17,1,17,1,17,1,17,
3,17,589,8,17,5,17,591,8,17,10,17,12,17,594,9,17,1,18,3,18,597,8,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,3,18,606,8,18,1,19,3,19,609,8,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,3,19,618,8,19,1,19,1,19,3,19,622,8,19,1,19,4,19,
625,8,19,11,19,12,19,626,1,19,4,19,630,8,19,11,19,12,19,631,3,19,634,8,19,
1,19,1,19,4,19,638,8,19,11,19,12,19,639,1,20,1,20,1,21,1,21,1,22,1,22,1,
23,1,23,1,23,1,23,3,23,652,8,23,1,23,1,23,3,23,656,8,23,1,23,1,23,3,23,660,
8,23,1,23,1,23,3,23,664,8,23,1,23,5,23,667,8,23,10,23,12,23,670,9,23,1,24,
1,24,4,24,674,8,24,11,24,12,24,675,1,24,3,24,679,8,24,1,24,5,24,682,8,24,
10,24,12,24,685,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,754,
8,25,1,26,1,26,1,26,1,26,3,26,760,8,26,1,26,1,26,3,26,764,8,26,1,26,3,26,
767,8,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
1,30,3,30,783,8,30,1,30,1,30,3,30,787,8,30,1,30,5,30,790,8,30,10,30,12,30,
793,9,30,3,30,795,8,30,1,31,1,31,1,31,3,31,800,8,31,1,31,1,31,1,31,1,31,
3,31,806,8,31,1,31,1,31,3,31,810,8,31,1,31,5,31,813,8,31,10,31,12,31,816,
9,31,1,32,1,32,3,32,820,8,32,1,32,1,32,3,32,824,8,32,1,32,3,32,827,8,32,
1,32,1,32,3,32,831,8,32,1,32,1,32,1,33,1,33,3,33,837,8,33,1,33,1,33,3,33,
841,8,33,1,33,1,33,1,34,1,34,1,34,3,34,848,8,34,1,34,1,34,1,34,1,34,3,34,
854,8,34,1,34,3,34,857,8,34,1,34,1,34,1,34,3,34,862,8,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,3,34,872,8,34,1,34,3,34,875,8,34,1,34,3,34,878,
8,34,1,34,1,34,3,34,882,8,34,1,35,1,35,1,35,1,35,3,35,888,8,35,1,35,1,35,
3,35,892,8,35,1,35,5,35,895,8,35,10,35,12,35,898,9,35,1,36,1,36,1,36,1,36,
3,36,904,8,36,1,36,1,36,3,36,908,8,36,1,36,1,36,3,36,912,8,36,1,36,1,36,
3,36,916,8,36,1,36,3,36,919,8,36,1,37,1,37,4,37,923,8,37,11,37,12,37,924,
1,37,1,37,4,37,929,8,37,11,37,12,37,930,3,37,933,8,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,4,37,942,8,37,11,37,12,37,943,1,37,1,37,4,37,948,8,37,11,
37,12,37,949,3,37,952,8,37,1,37,1,37,1,37,1,37,4,37,958,8,37,11,37,12,37,
959,1,37,1,37,4,37,964,8,37,11,37,12,37,965,1,37,1,37,1,37,1,37,1,37,1,37,
3,37,974,8,37,1,38,1,38,1,39,1,39,1,39,3,39,981,8,39,1,39,1,39,1,39,1,39,
4,39,987,8,39,11,39,12,39,988,1,39,5,39,992,8,39,10,39,12,39,995,9,39,1,
39,1,39,1,40,1,40,3,40,1001,8,40,1,40,1,40,3,40,1005,8,40,1,40,3,40,1008,
8,40,1,40,4,40,1011,8,40,11,40,12,40,1012,1,41,1,41,1,41,1,41,3,41,1019,
8,41,1,41,1,41,3,41,1023,8,41,1,41,5,41,1026,8,41,10,41,12,41,1029,9,41,
1,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,1038,8,43,1,43,1,43,1,43,1,43,3,
43,1044,8,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1054,8,45,1,45,
1,45,3,45,1058,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1068,8,
46,1,46,1,46,1,46,1,46,1,46,4,46,1075,8,46,11,46,12,46,1076,1,46,1,46,4,
46,1081,8,46,11,46,12,46,1082,3,46,1085,8,46,1,46,1,46,1,46,3,46,1090,8,
46,1,47,1,47,1,47,1,47,3,47,1096,8,47,1,47,1,47,3,47,1100,8,47,1,47,3,47,
1103,8,47,1,47,1,47,3,47,1107,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
47,1,47,3,47,1118,8,47,1,47,4,47,1121,8,47,11,47,12,47,1122,1,47,1,47,4,
47,1127,8,47,11,47,12,47,1128,3,47,1131,8,47,1,47,1,47,1,47,1,47,3,47,1137,
8,47,3,47,1139,8,47,1,48,1,48,1,48,3,48,1144,8,48,1,48,1,48,3,48,1148,8,
48,1,48,1,48,1,48,1,48,3,48,1154,8,48,1,48,3,48,1157,8,48,1,48,1,48,3,48,
1161,8,48,1,48,4,48,1164,8,48,11,48,12,48,1165,1,48,1,48,4,48,1170,8,48,
11,48,12,48,1171,3,48,1174,8,48,1,48,1,48,1,49,1,49,1,49,1,49,3,49,1182,
8,49,1,49,1,49,3,49,1186,8,49,1,49,3,49,1189,8,49,1,49,3,49,1192,8,49,1,
49,1,49,3,49,1196,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1219,8,52,1,
52,1,52,5,52,1223,8,52,10,52,12,52,1226,9,52,1,52,3,52,1229,8,52,1,52,1,
52,3,52,1233,8,52,1,53,1,53,1,53,1,53,1,53,1,53,4,53,1241,8,53,11,53,12,
53,1242,1,53,1,53,4,53,1247,8,53,11,53,12,53,1248,3,53,1251,8,53,1,54,1,
54,1,55,1,55,1,55,1,55,1,55,1,55,4,55,1261,8,55,11,55,12,55,1262,1,55,1,
55,4,55,1267,8,55,11,55,12,55,1268,3,55,1271,8,55,1,56,1,56,4,56,1275,8,
56,11,56,12,56,1276,1,56,1,56,4,56,1281,8,56,11,56,12,56,1282,3,56,1285,
8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,3,58,1295,8,58,1,58,1,58,3,
58,1299,8,58,1,58,4,58,1302,8,58,11,58,12,58,1303,1,59,1,59,1,59,1,59,1,
60,1,60,3,60,1312,8,60,1,60,1,60,3,60,1316,8,60,1,60,1,60,3,60,1320,8,60,
1,60,1,60,1,61,1,61,1,61,1,61,3,61,1328,8,61,1,61,1,61,3,61,1332,8,61,1,
61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,1344,8,63,1,63,1,63,
3,63,1348,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1355,8,63,3,63,1357,8,63,1,
64,1,64,1,64,1,64,3,64,1363,8,64,1,64,1,64,3,64,1367,8,64,1,64,1,64,1,65,
1,65,5,65,1373,8,65,10,65,12,65,1376,9,65,1,65,3,65,1379,8,65,1,65,1,65,
1,66,1,66,1,66,1,66,1,66,1,66,4,66,1389,8,66,11,66,12,66,1390,1,66,1,66,
4,66,1395,8,66,11,66,12,66,1396,3,66,1399,8,66,1,67,1,67,1,67,1,67,1,67,
1,67,4,67,1407,8,67,11,67,12,67,1408,1,67,1,67,4,67,1413,8,67,11,67,12,67,
1414,3,67,1417,8,67,1,68,1,68,4,68,1421,8,68,11,68,12,68,1422,1,68,1,68,
4,68,1427,8,68,11,68,12,68,1428,3,68,1431,8,68,1,69,1,69,3,69,1435,8,69,
1,69,1,69,3,69,1439,8,69,1,69,1,69,3,69,1443,8,69,1,69,1,69,1,70,1,70,1,
70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,
1,72,3,72,1465,8,72,1,72,1,72,1,72,3,72,1470,8,72,1,73,1,73,1,73,1,73,1,
73,1,73,1,73,1,73,3,73,1480,8,73,1,73,1,73,3,73,1484,8,73,1,73,5,73,1487,
8,73,10,73,12,73,1490,9,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
1500,8,74,1,74,1,74,3,74,1504,8,74,1,74,5,74,1507,8,74,10,74,12,74,1510,
9,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1523,8,
75,1,75,1,75,3,75,1527,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1536,
8,75,1,75,1,75,3,75,1540,8,75,1,75,3,75,1543,8,75,1,76,1,76,3,76,1547,8,
76,1,76,1,76,3,76,1551,8,76,1,76,3,76,1554,8,76,5,76,1556,8,76,10,76,12,
76,1559,9,76,1,76,3,76,1562,8,76,1,76,3,76,1565,8,76,1,76,1,76,3,76,1569,
8,76,1,76,3,76,1572,8,76,4,76,1574,8,76,11,76,12,76,1575,3,76,1578,8,76,
1,77,1,77,3,77,1582,8,77,1,77,1,77,3,77,1586,8,77,1,77,1,77,3,77,1590,8,
77,1,77,1,77,3,77,1594,8,77,1,77,3,77,1597,8,77,1,78,1,78,1,78,1,78,3,78,
1603,8,78,1,78,1,78,3,78,1607,8,78,1,78,3,78,1610,8,78,1,79,1,79,1,79,3,
79,1615,8,79,1,79,1,79,3,79,1619,8,79,1,79,1,79,1,79,1,79,3,79,1625,8,79,
1,79,3,79,1628,8,79,1,79,3,79,1631,8,79,1,79,1,79,3,79,1635,8,79,1,79,4,
79,1638,8,79,11,79,12,79,1639,1,79,1,79,4,79,1644,8,79,11,79,12,79,1645,
3,79,1648,8,79,1,79,1,79,1,80,1,80,1,80,3,80,1655,8,80,1,80,1,80,3,80,1659,
8,80,1,80,1,80,1,80,1,80,3,80,1665,8,80,1,80,3,80,1668,8,80,1,80,4,80,1671,
8,80,11,80,12,80,1672,1,80,1,80,4,80,1677,8,80,11,80,12,80,1678,3,80,1681,
8,80,1,80,1,80,1,81,1,81,1,81,3,81,1688,8,81,1,81,1,81,3,81,1692,8,81,1,
81,1,81,1,81,1,81,3,81,1698,8,81,1,81,3,81,1701,8,81,1,81,4,81,1704,8,81,
11,81,12,81,1705,1,81,1,81,4,81,1710,8,81,11,81,12,81,1711,3,81,1714,8,81,
1,81,1,81,1,82,1,82,1,82,1,82,3,82,1722,8,82,1,82,1,82,3,82,1726,8,82,1,
82,3,82,1729,8,82,1,82,3,82,1732,8,82,1,82,1,82,3,82,1736,8,82,1,82,1,82,
1,83,1,83,1,83,1,83,3,83,1744,8,83,1,83,1,83,3,83,1748,8,83,1,83,1,83,3,
83,1752,8,83,3,83,1754,8,83,1,83,3,83,1757,8,83,1,84,1,84,1,84,3,84,1762,
8,84,1,85,1,85,1,85,1,85,3,85,1768,8,85,1,85,1,85,3,85,1772,8,85,1,85,1,
85,3,85,1776,8,85,1,85,5,85,1779,8,85,10,85,12,85,1782,9,85,1,86,1,86,3,
86,1786,8,86,1,86,1,86,3,86,1790,8,86,1,86,1,86,3,86,1794,8,86,1,86,1,86,
1,86,3,86,1799,8,86,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1807,8,88,3,88,1809,
8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,3,91,1821,8,91,1,
91,1,91,3,91,1825,8,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1833,8,92,1,92,
1,92,3,92,1837,8,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1845,8,93,1,93,1,
93,3,93,1849,8,93,1,93,1,93,3,93,1853,8,93,1,93,1,93,3,93,1857,8,93,1,93,
1,93,3,93,1861,8,93,1,93,1,93,3,93,1865,8,93,1,93,1,93,1,94,1,94,1,94,1,
94,3,94,1873,8,94,1,94,1,94,3,94,1877,8,94,1,94,1,94,1,95,1,95,1,95,1,95,
1,95,1,95,4,95,1887,8,95,11,95,12,95,1888,1,95,5,95,1892,8,95,10,95,12,95,
1895,9,95,1,95,3,95,1898,8,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,1906,8,
96,1,96,3,96,1909,8,96,1,96,5,96,1912,8,96,10,96,12,96,1915,9,96,1,96,4,
96,1918,8,96,11,96,12,96,1919,3,96,1922,8,96,1,96,1,96,4,96,1926,8,96,11,
96,12,96,1927,3,96,1930,8,96,1,97,1,97,1,97,3,97,1935,8,97,1,97,1,97,3,97,
1939,8,97,1,97,5,97,1942,8,97,10,97,12,97,1945,9,97,3,97,1947,8,97,1,98,
1,98,3,98,1951,8,98,1,98,1,98,3,98,1955,8,98,1,98,1,98,1,98,1,98,1,98,1,
98,1,98,1,98,1,98,3,98,1966,8,98,1,99,1,99,1,99,1,99,3,99,1972,8,99,1,99,
1,99,3,99,1976,8,99,1,99,3,99,1979,8,99,1,100,1,100,1,100,1,100,3,100,1985,
8,100,1,100,1,100,3,100,1989,8,100,1,100,1,100,1,101,1,101,1,101,1,101,3,
101,1997,8,101,1,101,1,101,3,101,2001,8,101,1,101,1,101,1,102,1,102,1,103,
1,103,1,103,3,103,2010,8,103,1,103,1,103,3,103,2014,8,103,1,103,1,103,1,
103,1,103,3,103,2020,8,103,1,103,3,103,2023,8,103,1,103,4,103,2026,8,103,
11,103,12,103,2027,1,103,1,103,4,103,2032,8,103,11,103,12,103,2033,3,103,
2036,8,103,1,103,1,103,1,104,1,104,3,104,2042,8,104,1,104,1,104,3,104,2046,
8,104,1,104,1,104,1,105,1,105,1,105,3,105,2053,8,105,1,105,1,105,1,105,1,
105,4,105,2059,8,105,11,105,12,105,2060,1,105,5,105,2064,8,105,10,105,12,
105,2067,9,105,1,105,1,105,1,106,1,106,3,106,2073,8,106,1,106,1,106,3,106,
2077,8,106,1,106,3,106,2080,8,106,1,106,3,106,2083,8,106,1,106,3,106,2086,
8,106,1,106,1,106,3,106,2090,8,106,1,106,4,106,2093,8,106,11,106,12,106,
2094,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,2104,8,107,1,108,1,
108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,2114,8,109,1,109,1,109,3,109,
2118,8,109,1,109,1,109,1,109,1,109,1,109,3,109,2125,8,109,3,109,2127,8,109,
1,110,1,110,1,110,1,110,3,110,2133,8,110,1,110,1,110,3,110,2137,8,110,1,
110,1,110,3,110,2141,8,110,1,110,5,110,2144,8,110,10,110,12,110,2147,9,110,
1,110,3,110,2150,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
110,1,110,1,110,3,110,2163,8,110,1,110,1,110,3,110,2167,8,110,1,110,1,110,
1,110,1,110,3,110,2173,8,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2181,
8,110,1,110,1,110,3,110,2185,8,110,1,110,1,110,3,110,2189,8,110,1,110,1,
110,3,110,2193,8,110,1,110,1,110,3,110,2197,8,110,1,110,1,110,3,110,2201,
8,110,1,110,1,110,1,110,3,110,2206,8,110,1,110,1,110,3,110,2210,8,110,1,
110,1,110,1,110,3,110,2215,8,110,1,110,1,110,3,110,2219,8,110,1,110,1,110,
1,110,3,110,2224,8,110,1,110,1,110,3,110,2228,8,110,1,110,1,110,1,110,3,
110,2233,8,110,1,110,1,110,3,110,2237,8,110,1,110,1,110,1,110,3,110,2242,
8,110,1,110,1,110,3,110,2246,8,110,1,110,1,110,1,110,3,110,2251,8,110,1,
110,1,110,3,110,2255,8,110,1,110,1,110,1,110,3,110,2260,8,110,1,110,1,110,
3,110,2264,8,110,1,110,1,110,1,110,3,110,2269,8,110,1,110,1,110,3,110,2273,
8,110,1,110,1,110,1,110,3,110,2278,8,110,1,110,1,110,3,110,2282,8,110,1,
110,1,110,1,110,3,110,2287,8,110,1,110,1,110,3,110,2291,8,110,1,110,1,110,
1,110,3,110,2296,8,110,1,110,1,110,3,110,2300,8,110,1,110,5,110,2303,8,110,
10,110,12,110,2306,9,110,1,111,1,111,1,111,3,111,2311,8,111,1,111,1,111,
1,111,3,111,2316,8,111,1,111,1,111,1,112,1,112,3,112,2322,8,112,1,112,1,
112,3,112,2326,8,112,1,112,5,112,2329,8,112,10,112,12,112,2332,9,112,1,113,
1,113,3,113,2336,8,113,1,113,3,113,2339,8,113,1,113,1,113,3,113,2343,8,113,
1,113,1,113,3,113,2347,8,113,3,113,2349,8,113,1,113,1,113,3,113,2353,8,113,
3,113,2355,8,113,1,113,1,113,3,113,2359,8,113,1,114,1,114,1,114,1,114,4,
114,2365,8,114,11,114,12,114,2366,1,114,5,114,2370,8,114,10,114,12,114,2373,
9,114,1,114,5,114,2376,8,114,10,114,12,114,2379,9,114,1,114,1,114,1,115,
1,115,1,115,1,115,3,115,2387,8,115,1,115,1,115,3,115,2391,8,115,1,115,1,
115,1,116,1,116,1,116,1,116,3,116,2399,8,116,1,116,1,116,4,116,2403,8,116,
11,116,12,116,2404,1,116,1,116,4,116,2409,8,116,11,116,12,116,2410,3,116,
2413,8,116,1,116,1,116,1,117,1,117,1,117,1,117,3,117,2421,8,117,1,117,1,
117,3,117,2425,8,117,1,117,3,117,2428,8,117,1,118,1,118,3,118,2432,8,118,
1,119,1,119,1,119,1,119,3,119,2438,8,119,1,119,3,119,2441,8,119,1,119,1,
119,3,119,2445,8,119,1,119,1,119,3,119,2449,8,119,1,119,1,119,3,119,2453,
8,119,1,120,1,120,1,120,3,120,2458,8,120,1,120,1,120,3,120,2462,8,120,1,
120,1,120,3,120,2466,8,120,1,120,3,120,2469,8,120,1,120,1,120,3,120,2473,
8,120,1,120,1,120,3,120,2477,8,120,1,120,1,120,3,120,2481,8,120,1,121,1,
121,3,121,2485,8,121,1,122,1,122,1,122,3,122,2490,8,122,1,123,3,123,2493,
8,123,1,123,1,123,1,123,3,123,2498,8,123,1,123,1,123,3,123,2502,8,123,1,
123,3,123,2505,8,123,1,124,1,124,1,124,1,124,3,124,2511,8,124,1,125,1,125,
3,125,2515,8,125,1,125,3,125,2518,8,125,1,126,1,126,1,126,3,126,2523,8,126,
1,126,3,126,2526,8,126,1,126,3,126,2529,8,126,1,126,1,126,3,126,2533,8,126,
1,126,1,126,3,126,2537,8,126,3,126,2539,8,126,1,126,4,126,2542,8,126,11,
126,12,126,2543,1,126,3,126,2547,8,126,1,127,1,127,3,127,2551,8,127,1,127,
3,127,2554,8,127,1,127,1,127,3,127,2558,8,127,1,127,1,127,3,127,2562,8,127,
3,127,2564,8,127,1,127,1,127,1,128,1,128,3,128,2570,8,128,1,128,4,128,2573,
8,128,11,128,12,128,2574,1,128,3,128,2578,8,128,1,129,3,129,2581,8,129,1,
129,1,129,1,129,3,129,2586,8,129,1,130,1,130,1,131,3,131,2591,8,131,1,131,
3,131,2594,8,131,1,131,1,131,3,131,2598,8,131,5,131,2600,8,131,10,131,12,
131,2603,9,131,1,131,1,131,3,131,2607,8,131,1,131,1,131,3,131,2611,8,131,
1,131,3,131,2614,8,131,5,131,2616,8,131,10,131,12,131,2619,9,131,1,132,1,
132,3,132,2623,8,132,1,132,1,132,1,133,1,133,1,133,3,133,2630,8,133,1,134,
1,134,3,134,2634,8,134,1,134,1,134,3,134,2638,8,134,1,134,1,134,3,134,2642,
8,134,1,134,5,134,2645,8,134,10,134,12,134,2648,9,134,3,134,2650,8,134,1,
134,3,134,2653,8,134,1,134,1,134,1,135,1,135,3,135,2659,8,135,1,135,1,135,
3,135,2663,8,135,1,135,1,135,3,135,2667,8,135,1,135,1,135,3,135,2671,8,135,
1,135,3,135,2674,8,135,1,135,1,135,3,135,2678,8,135,1,135,3,135,2681,8,135,
1,135,1,135,3,135,2685,8,135,1,135,3,135,2688,8,135,1,135,3,135,2691,8,135,
1,136,1,136,3,136,2695,8,136,1,136,1,136,1,137,1,137,3,137,2701,8,137,1,
137,1,137,3,137,2705,8,137,1,137,5,137,2708,8,137,10,137,12,137,2711,9,137,
1,138,1,138,1,138,1,138,1,138,3,138,2718,8,138,1,138,1,138,1,139,1,139,4,
139,2724,8,139,11,139,12,139,2725,1,139,1,139,1,139,4,139,2731,8,139,11,
139,12,139,2732,1,139,3,139,2736,8,139,1,140,1,140,1,140,1,140,3,140,2742,
8,140,1,140,1,140,1,140,3,140,2747,8,140,1,141,1,141,1,142,1,142,1,142,5,
142,2754,8,142,10,142,12,142,2757,9,142,1,142,1,142,1,142,4,142,2762,8,142,
11,142,12,142,2763,3,142,2766,8,142,1,143,1,143,1,144,1,144,1,144,5,144,
2773,8,144,10,144,12,144,2776,9,144,1,145,1,145,3,145,2780,8,145,1,145,1,
145,3,145,2784,8,145,1,146,1,146,3,146,2788,8,146,1,146,1,146,3,146,2792,
8,146,1,146,3,146,2795,8,146,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,
148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,2811,8,148,1,149,1,149,1,150,
1,150,1,151,1,151,3,151,2819,8,151,1,151,3,151,2822,8,151,1,151,1,151,3,
151,2826,8,151,1,151,3,151,2829,8,151,1,152,1,152,1,153,1,153,1,154,1,154,
1,155,5,155,2838,8,155,10,155,12,155,2841,9,155,1,155,1,155,1,156,5,156,
2846,8,156,10,156,12,156,2849,9,156,1,156,1,156,1,157,5,157,2854,8,157,10,
157,12,157,2857,9,157,1,157,1,157,1,157,0,1,220,158,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
292,294,296,298,300,302,304,306,308,310,312,314,0,22,2,0,12,12,159,159,1,
0,27,38,2,0,168,168,172,172,1,0,61,65,3,0,187,187,197,197,202,202,1,0,112,
113,5,0,7,7,12,12,79,79,121,121,131,131,2,0,134,135,176,176,2,0,92,94,150,
150,2,0,182,182,206,206,2,0,152,152,158,158,2,0,196,196,201,201,2,0,184,
184,198,198,7,0,80,80,90,90,187,187,189,190,192,192,195,195,199,199,2,0,
14,15,122,122,1,0,14,15,11,0,13,13,16,16,23,23,25,25,42,42,81,81,85,85,110,
110,151,151,156,156,169,169,2,0,125,125,129,129,3,0,72,72,125,125,129,129,
6,0,178,178,180,180,185,185,188,188,191,191,200,200,4,0,68,68,72,72,125,
125,129,129,11,0,1,10,12,45,54,54,56,60,66,90,95,95,100,111,114,115,120,
125,129,134,136,177,3306,0,316,1,0,0,0,2,320,1,0,0,0,4,394,1,0,0,0,6,398,
1,0,0,0,8,420,1,0,0,0,10,422,1,0,0,0,12,424,1,0,0,0,14,431,1,0,0,0,16,448,
1,0,0,0,18,465,1,0,0,0,20,475,1,0,0,0,22,487,1,0,0,0,24,489,1,0,0,0,26,513,
1,0,0,0,28,516,1,0,0,0,30,546,1,0,0,0,32,549,1,0,0,0,34,573,1,0,0,0,36,596,
1,0,0,0,38,608,1,0,0,0,40,641,1,0,0,0,42,643,1,0,0,0,44,645,1,0,0,0,46,647,
1,0,0,0,48,671,1,0,0,0,50,753,1,0,0,0,52,755,1,0,0,0,54,768,1,0,0,0,56,770,
1,0,0,0,58,774,1,0,0,0,60,778,1,0,0,0,62,799,1,0,0,0,64,817,1,0,0,0,66,834,
1,0,0,0,68,847,1,0,0,0,70,883,1,0,0,0,72,899,1,0,0,0,74,973,1,0,0,0,76,975,
1,0,0,0,78,980,1,0,0,0,80,998,1,0,0,0,82,1014,1,0,0,0,84,1030,1,0,0,0,86,
1037,1,0,0,0,88,1047,1,0,0,0,90,1049,1,0,0,0,92,1061,1,0,0,0,94,1091,1,0,
0,0,96,1143,1,0,0,0,98,1177,1,0,0,0,100,1199,1,0,0,0,102,1203,1,0,0,0,104,
1232,1,0,0,0,106,1234,1,0,0,0,108,1252,1,0,0,0,110,1254,1,0,0,0,112,1272,
1,0,0,0,114,1286,1,0,0,0,116,1290,1,0,0,0,118,1305,1,0,0,0,120,1311,1,0,
0,0,122,1323,1,0,0,0,124,1335,1,0,0,0,126,1339,1,0,0,0,128,1358,1,0,0,0,
130,1370,1,0,0,0,132,1382,1,0,0,0,134,1400,1,0,0,0,136,1418,1,0,0,0,138,
1432,1,0,0,0,140,1446,1,0,0,0,142,1450,1,0,0,0,144,1458,1,0,0,0,146,1471,
1,0,0,0,148,1491,1,0,0,0,150,1511,1,0,0,0,152,1577,1,0,0,0,154,1596,1,0,
0,0,156,1598,1,0,0,0,158,1614,1,0,0,0,160,1654,1,0,0,0,162,1687,1,0,0,0,
164,1717,1,0,0,0,166,1739,1,0,0,0,168,1758,1,0,0,0,170,1763,1,0,0,0,172,
1783,1,0,0,0,174,1800,1,0,0,0,176,1802,1,0,0,0,178,1810,1,0,0,0,180,1812,
1,0,0,0,182,1816,1,0,0,0,184,1828,1,0,0,0,186,1840,1,0,0,0,188,1868,1,0,
0,0,190,1880,1,0,0,0,192,1901,1,0,0,0,194,1946,1,0,0,0,196,1965,1,0,0,0,
198,1967,1,0,0,0,200,1980,1,0,0,0,202,1992,1,0,0,0,204,2004,1,0,0,0,206,
2009,1,0,0,0,208,2039,1,0,0,0,210,2052,1,0,0,0,212,2070,1,0,0,0,214,2096,
1,0,0,0,216,2105,1,0,0,0,218,2109,1,0,0,0,220,2192,1,0,0,0,222,2310,1,0,
0,0,224,2319,1,0,0,0,226,2333,1,0,0,0,228,2360,1,0,0,0,230,2382,1,0,0,0,
232,2394,1,0,0,0,234,2416,1,0,0,0,236,2431,1,0,0,0,238,2433,1,0,0,0,240,
2454,1,0,0,0,242,2484,1,0,0,0,244,2486,1,0,0,0,246,2492,1,0,0,0,248,2510,
1,0,0,0,250,2512,1,0,0,0,252,2522,1,0,0,0,254,2548,1,0,0,0,256,2569,1,0,
0,0,258,2580,1,0,0,0,260,2587,1,0,0,0,262,2601,1,0,0,0,264,2622,1,0,0,0,
266,2626,1,0,0,0,268,2631,1,0,0,0,270,2658,1,0,0,0,272,2692,1,0,0,0,274,
2698,1,0,0,0,276,2717,1,0,0,0,278,2735,1,0,0,0,280,2737,1,0,0,0,282,2748,
1,0,0,0,284,2765,1,0,0,0,286,2767,1,0,0,0,288,2769,1,0,0,0,290,2777,1,0,
0,0,292,2785,1,0,0,0,294,2796,1,0,0,0,296,2810,1,0,0,0,298,2812,1,0,0,0,
300,2814,1,0,0,0,302,2818,1,0,0,0,304,2830,1,0,0,0,306,2832,1,0,0,0,308,
2834,1,0,0,0,310,2839,1,0,0,0,312,2847,1,0,0,0,314,2855,1,0,0,0,316,317,
3,2,1,0,317,318,5,0,0,1,318,1,1,0,0,0,319,321,5,222,0,0,320,319,1,0,0,0,
320,321,1,0,0,0,321,325,1,0,0,0,322,324,5,220,0,0,323,322,1,0,0,0,324,327,
1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,334,1,0,0,0,327,325,1,0,0,0,
328,330,3,12,6,0,329,331,5,220,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,
1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,328,1,0,0,0,334,335,1,0,0,0,
335,337,1,0,0,0,336,338,3,4,2,0,337,336,1,0,0,0,337,338,1,0,0,0,338,342,
1,0,0,0,339,341,5,220,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,
0,342,343,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,345,347,3,28,14,0,346,
345,1,0,0,0,346,347,1,0,0,0,347,351,1,0,0,0,348,350,5,220,0,0,349,348,1,
0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,
351,1,0,0,0,354,356,3,14,7,0,355,354,1,0,0,0,355,356,1,0,0,0,356,360,1,0,
0,0,357,359,5,220,0,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,
361,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,363,365,3,18,9,0,364,363,1,0,
0,0,364,365,1,0,0,0,365,369,1,0,0,0,366,368,5,220,0,0,367,366,1,0,0,0,368,
371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,373,1,0,0,0,371,369,1,0,
0,0,372,374,3,20,10,0,373,372,1,0,0,0,373,374,1,0,0,0,374,378,1,0,0,0,375,
377,5,220,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,
0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,381,383,3,24,12,0,382,381,1,0,0,0,
382,383,1,0,0,0,383,387,1,0,0,0,384,386,5,220,0,0,385,384,1,0,0,0,386,389,
1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,
390,392,5,222,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,3,1,0,0,0,393,395,
3,6,3,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,
397,5,1,0,0,0,398,400,5,110,0,0,399,401,5,222,0,0,400,399,1,0,0,0,400,401,
1,0,0,0,401,402,1,0,0,0,402,404,5,187,0,0,403,405,5,222,0,0,404,403,1,0,
0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,412,3,8,4,0,407,409,5,206,0,0,408,
410,5,222,0,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,413,3,
10,5,0,412,407,1,0,0,0,412,413,1,0,0,0,413,417,1,0,0,0,414,416,5,220,0,0,
415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,7,1,
0,0,0,419,417,1,0,0,0,420,421,5,209,0,0,421,9,1,0,0,0,422,423,5,209,0,0,
423,11,1,0,0,0,424,425,5,170,0,0,425,426,5,222,0,0,426,429,3,314,157,0,427,
428,5,222,0,0,428,430,5,21,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,13,1,
0,0,0,431,433,5,10,0,0,432,434,5,220,0,0,433,432,1,0,0,0,434,435,1,0,0,0,
435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,439,3,16,8,0,438,437,
1,0,0,0,439,440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,
442,444,5,54,0,0,443,445,5,220,0,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,
1,0,0,0,446,447,1,0,0,0,447,15,1,0,0,0,448,450,3,278,139,0,449,451,5,222,
0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,454,5,187,0,0,453,
455,5,222,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,3,
296,148,0,457,458,5,220,0,0,458,17,1,0,0,0,459,461,3,46,23,0,460,462,5,220,
0,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
466,1,0,0,0,465,459,1,0,0,0,466,467,1,0,0,0,467,465,1,0,0,0,467,468,1,0,
0,0,468,19,1,0,0,0,469,471,3,22,11,0,470,472,5,220,0,0,471,470,1,0,0,0,472,
473,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,469,1,0,
0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,21,1,0,0,0,479,480,
5,116,0,0,480,481,5,222,0,0,481,488,3,310,155,0,482,483,5,118,0,0,483,484,
5,222,0,0,484,488,7,0,0,0,485,488,5,117,0,0,486,488,5,119,0,0,487,479,1,
0,0,0,487,482,1,0,0,0,487,485,1,0,0,0,487,486,1,0,0,0,488,23,1,0,0,0,489,
498,3,26,13,0,490,492,5,220,0,0,491,490,1,0,0,0,492,493,1,0,0,0,493,491,
1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,497,3,26,13,0,496,491,1,0,0,
0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,25,1,0,0,0,500,498,
1,0,0,0,501,514,3,44,22,0,502,514,3,22,11,0,503,514,3,68,34,0,504,514,3,
78,39,0,505,514,3,86,43,0,506,514,3,96,48,0,507,514,3,130,65,0,508,514,3,
158,79,0,509,514,3,160,80,0,510,514,3,162,81,0,511,514,3,206,103,0,512,514,
3,210,105,0,513,501,1,0,0,0,513,502,1,0,0,0,513,503,1,0,0,0,513,504,1,0,
0,0,513,505,1,0,0,0,513,506,1,0,0,0,513,507,1,0,0,0,513,508,1,0,0,0,513,
509,1,0,0,0,513,510,1,0,0,0,513,511,1,0,0,0,513,512,1,0,0,0,514,27,1,0,0,
0,515,517,5,222,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,
519,5,10,0,0,519,520,5,222,0,0,520,521,3,40,20,0,521,522,5,222,0,0,522,524,
3,42,21,0,523,525,5,222,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,527,1,0,
0,0,526,528,5,220,0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,
530,1,0,0,0,530,532,1,0,0,0,531,533,3,30,15,0,532,531,1,0,0,0,533,534,1,
0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,540,5,54,0,0,537,
539,5,220,0,0,538,537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,
0,0,0,541,29,1,0,0,0,542,540,1,0,0,0,543,547,3,32,16,0,544,547,3,38,19,0,
545,547,3,28,14,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,0,0,547,31,
1,0,0,0,548,550,5,222,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,
0,551,553,3,248,124,0,552,554,5,222,0,0,553,552,1,0,0,0,553,554,1,0,0,0,
554,555,1,0,0,0,555,557,5,187,0,0,556,558,5,222,0,0,557,556,1,0,0,0,557,
558,1,0,0,0,558,560,1,0,0,0,559,561,5,185,0,0,560,559,1,0,0,0,560,561,1,
0,0,0,561,562,1,0,0,0,562,564,3,36,18,0,563,565,5,216,0,0,564,563,1,0,0,
0,564,565,1,0,0,0,565,567,1,0,0,0,566,568,5,220,0,0,567,566,1,0,0,0,568,
569,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,33,1,0,0,0,571,572,5,110,
0,0,572,574,5,186,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,
580,3,278,139,0,576,577,5,194,0,0,577,578,3,296,148,0,578,579,5,205,0,0,
579,581,1,0,0,0,580,576,1,0,0,0,580,581,1,0,0,0,581,592,1,0,0,0,582,583,
5,186,0,0,583,588,3,278,139,0,584,585,5,194,0,0,585,586,3,296,148,0,586,
587,5,205,0,0,587,589,1,0,0,0,588,584,1,0,0,0,588,589,1,0,0,0,589,591,1,
0,0,0,590,582,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,
35,1,0,0,0,594,592,1,0,0,0,595,597,5,185,0,0,596,595,1,0,0,0,596,597,1,0,
0,0,597,605,1,0,0,0,598,606,3,296,148,0,599,600,5,193,0,0,600,601,3,278,
139,0,601,602,5,204,0,0,602,606,1,0,0,0,603,604,5,203,0,0,604,606,3,278,
139,0,605,598,1,0,0,0,605,599,1,0,0,0,605,603,1,0,0,0,606,37,1,0,0,0,607,
609,5,222,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,5,
11,0,0,611,612,5,222,0,0,612,617,3,278,139,0,613,614,5,194,0,0,614,615,3,
310,155,0,615,616,5,205,0,0,616,618,1,0,0,0,617,613,1,0,0,0,617,618,1,0,
0,0,618,621,1,0,0,0,619,620,5,222,0,0,620,622,5,217,0,0,621,619,1,0,0,0,
621,622,1,0,0,0,622,624,1,0,0,0,623,625,5,220,0,0,624,623,1,0,0,0,625,626,
1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,633,1,0,0,0,628,630,3,30,15,
0,629,628,1,0,0,0,630,631,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,
1,0,0,0,633,629,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,637,5,55,0,0,
636,638,5,220,0,0,637,636,1,0,0,0,638,639,1,0,0,0,639,637,1,0,0,0,639,640,
1,0,0,0,640,39,1,0,0,0,641,642,3,288,144,0,642,41,1,0,0,0,643,644,3,278,
139,0,644,43,1,0,0,0,645,646,3,48,24,0,646,45,1,0,0,0,647,648,5,5,0,0,648,
649,5,222,0,0,649,651,3,248,124,0,650,652,5,222,0,0,651,650,1,0,0,0,651,
652,1,0,0,0,652,653,1,0,0,0,653,655,5,187,0,0,654,656,5,222,0,0,655,654,
1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,668,3,296,148,0,658,660,5,222,
0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,663,5,182,0,0,662,
664,5,222,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,667,3,
296,148,0,666,659,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,1,0,0,
0,669,47,1,0,0,0,670,668,1,0,0,0,671,683,3,50,25,0,672,674,5,220,0,0,673,
672,1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,
0,0,677,679,5,222,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,
682,3,50,25,0,681,673,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,
0,0,0,684,49,1,0,0,0,685,683,1,0,0,0,686,754,3,52,26,0,687,754,3,46,23,0,
688,754,3,54,27,0,689,754,3,56,28,0,690,754,3,58,29,0,691,754,3,60,30,0,
692,754,3,62,31,0,693,754,3,66,33,0,694,754,3,72,36,0,695,754,3,70,35,0,
696,754,3,74,37,0,697,754,3,76,38,0,698,754,3,82,41,0,699,754,3,84,42,0,
700,754,3,88,44,0,701,754,3,236,118,0,702,754,3,90,45,0,703,754,3,92,46,
0,704,754,3,94,47,0,705,754,3,98,49,0,706,754,3,100,50,0,707,754,3,102,51,
0,708,754,3,104,52,0,709,754,3,114,57,0,710,754,3,116,58,0,711,754,3,118,
59,0,712,754,3,120,60,0,713,754,3,122,61,0,714,754,3,294,147,0,715,754,3,
124,62,0,716,754,3,126,63,0,717,754,3,128,64,0,718,754,3,130,65,0,719,754,
3,138,69,0,720,754,3,140,70,0,721,754,3,142,71,0,722,754,3,144,72,0,723,
754,3,146,73,0,724,754,3,148,74,0,725,754,3,150,75,0,726,754,3,156,78,0,
727,754,3,164,82,0,728,754,3,166,83,0,729,754,3,168,84,0,730,754,3,170,85,
0,731,754,3,174,87,0,732,754,3,176,88,0,733,754,3,178,89,0,734,754,3,180,
90,0,735,754,3,182,91,0,736,754,3,184,92,0,737,754,3,186,93,0,738,754,3,
188,94,0,739,754,3,190,95,0,740,754,3,198,99,0,741,754,3,200,100,0,742,754,
3,202,101,0,743,754,3,204,102,0,744,754,3,208,104,0,745,754,3,216,108,0,
746,754,3,218,109,0,747,754,3,222,111,0,748,754,3,228,114,0,749,754,3,230,
115,0,750,754,3,232,116,0,751,754,3,234,117,0,752,754,3,242,121,0,753,686,
1,0,0,0,753,687,1,0,0,0,753,688,1,0,0,0,753,689,1,0,0,0,753,690,1,0,0,0,
753,691,1,0,0,0,753,692,1,0,0,0,753,693,1,0,0,0,753,694,1,0,0,0,753,695,
1,0,0,0,753,696,1,0,0,0,753,697,1,0,0,0,753,698,1,0,0,0,753,699,1,0,0,0,
753,700,1,0,0,0,753,701,1,0,0,0,753,702,1,0,0,0,753,703,1,0,0,0,753,704,
1,0,0,0,753,705,1,0,0,0,753,706,1,0,0,0,753,707,1,0,0,0,753,708,1,0,0,0,
753,709,1,0,0,0,753,710,1,0,0,0,753,711,1,0,0,0,753,712,1,0,0,0,753,713,
1,0,0,0,753,714,1,0,0,0,753,715,1,0,0,0,753,716,1,0,0,0,753,717,1,0,0,0,
753,718,1,0,0,0,753,719,1,0,0,0,753,720,1,0,0,0,753,721,1,0,0,0,753,722,
1,0,0,0,753,723,1,0,0,0,753,724,1,0,0,0,753,725,1,0,0,0,753,726,1,0,0,0,
753,727,1,0,0,0,753,728,1,0,0,0,753,729,1,0,0,0,753,730,1,0,0,0,753,731,
1,0,0,0,753,732,1,0,0,0,753,733,1,0,0,0,753,734,1,0,0,0,753,735,1,0,0,0,
753,736,1,0,0,0,753,737,1,0,0,0,753,738,1,0,0,0,753,739,1,0,0,0,753,740,
1,0,0,0,753,741,1,0,0,0,753,742,1,0,0,0,753,743,1,0,0,0,753,744,1,0,0,0,
753,745,1,0,0,0,753,746,1,0,0,0,753,747,1,0,0,0,753,748,1,0,0,0,753,749,
1,0,0,0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,51,1,0,0,0,755,
756,5,6,0,0,756,757,5,222,0,0,757,766,3,220,110,0,758,760,5,222,0,0,759,
758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,763,5,182,0,0,762,764,5,
222,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,767,3,220,110,
0,766,759,1,0,0,0,766,767,1,0,0,0,767,53,1,0,0,0,768,769,5,9,0,0,769,55,
1,0,0,0,770,771,5,19,0,0,771,772,5,222,0,0,772,773,3,220,110,0,773,57,1,
0,0,0,774,775,5,20,0,0,775,776,5,222,0,0,776,777,3,220,110,0,777,59,1,0,
0,0,778,794,5,22,0,0,779,780,5,222,0,0,780,791,3,220,110,0,781,783,5,222,
0,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,5,182,0,0,785,
787,5,222,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,3,
220,110,0,789,782,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,
0,792,795,1,0,0,0,793,791,1,0,0,0,794,779,1,0,0,0,794,795,1,0,0,0,795,61,
1,0,0,0,796,797,3,300,150,0,797,798,5,222,0,0,798,800,1,0,0,0,799,796,1,
0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,802,5,24,0,0,802,803,5,222,0,0,
803,814,3,64,32,0,804,806,5,222,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,
807,1,0,0,0,807,809,5,182,0,0,808,810,5,222,0,0,809,808,1,0,0,0,809,810,
1,0,0,0,810,811,1,0,0,0,811,813,3,64,32,0,812,805,1,0,0,0,813,816,1,0,0,
0,814,812,1,0,0,0,814,815,1,0,0,0,815,63,1,0,0,0,816,814,1,0,0,0,817,819,
3,278,139,0,818,820,3,304,152,0,819,818,1,0,0,0,819,820,1,0,0,0,820,823,
1,0,0,0,821,822,5,222,0,0,822,824,3,280,140,0,823,821,1,0,0,0,823,824,1,
0,0,0,824,826,1,0,0,0,825,827,5,222,0,0,826,825,1,0,0,0,826,827,1,0,0,0,
827,828,1,0,0,0,828,830,5,187,0,0,829,831,5,222,0,0,830,829,1,0,0,0,830,
831,1,0,0,0,831,832,1,0,0,0,832,833,3,220,110,0,833,65,1,0,0,0,834,836,5,
25,0,0,835,837,5,222,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,
838,840,5,187,0,0,839,841,5,222,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,
842,1,0,0,0,842,843,3,220,110,0,843,67,1,0,0,0,844,845,3,306,153,0,845,846,
5,222,0,0,846,848,1,0,0,0,847,844,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,
0,849,850,5,26,0,0,850,856,5,222,0,0,851,853,5,70,0,0,852,854,3,304,152,
0,853,852,1,0,0,0,853,854,1,0,0,0,854,857,1,0,0,0,855,857,5,157,0,0,856,
851,1,0,0,0,856,855,1,0,0,0,857,858,1,0,0,0,858,859,5,222,0,0,859,861,3,
278,139,0,860,862,3,304,152,0,861,860,1,0,0,0,861,862,1,0,0,0,862,863,1,
0,0,0,863,864,5,222,0,0,864,865,5,89,0,0,865,866,5,222,0,0,866,871,5,209,
0,0,867,868,5,222,0,0,868,869,5,3,0,0,869,870,5,222,0,0,870,872,5,209,0,
0,871,867,1,0,0,0,871,872,1,0,0,0,872,877,1,0,0,0,873,875,5,222,0,0,874,
873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,878,3,268,134,0,877,874,
1,0,0,0,877,878,1,0,0,0,878,881,1,0,0,0,879,880,5,222,0,0,880,882,3,280,
140,0,881,879,1,0,0,0,881,882,1,0,0,0,882,69,1,0,0,0,883,884,7,1,0,0,884,
885,5,222,0,0,885,896,3,292,146,0,886,888,5,222,0,0,887,886,1,0,0,0,887,
888,1,0,0,0,888,889,1,0,0,0,889,891,5,182,0,0,890,892,5,222,0,0,891,890,
1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,895,3,292,146,0,894,887,1,0,
0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,71,1,0,0,0,898,896,
1,0,0,0,899,900,5,39,0,0,900,901,5,222,0,0,901,903,3,220,110,0,902,904,5,
222,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,907,5,182,0,
0,906,908,5,222,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,
918,3,220,110,0,910,912,5,222,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,
1,0,0,0,913,915,5,182,0,0,914,916,5,222,0,0,915,914,1,0,0,0,915,916,1,0,
0,0,916,917,1,0,0,0,917,919,3,220,110,0,918,911,1,0,0,0,918,919,1,0,0,0,
919,73,1,0,0,0,920,922,5,41,0,0,921,923,5,220,0,0,922,921,1,0,0,0,923,924,
1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,932,1,0,0,0,926,928,3,48,24,
0,927,929,5,220,0,0,928,927,1,0,0,0,929,930,1,0,0,0,930,928,1,0,0,0,930,
931,1,0,0,0,931,933,1,0,0,0,932,926,1,0,0,0,932,933,1,0,0,0,933,934,1,0,
0,0,934,974,5,86,0,0,935,936,5,41,0,0,936,937,5,222,0,0,937,938,7,2,0,0,
938,939,5,222,0,0,939,941,3,220,110,0,940,942,5,220,0,0,941,940,1,0,0,0,
942,943,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,951,1,0,0,0,945,947,
3,48,24,0,946,948,5,220,0,0,947,946,1,0,0,0,948,949,1,0,0,0,949,947,1,0,
0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,945,1,0,0,0,951,952,1,0,0,0,952,
953,1,0,0,0,953,954,5,86,0,0,954,974,1,0,0,0,955,957,5,41,0,0,956,958,5,
220,0,0,957,956,1,0,0,0,958,959,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,
960,961,1,0,0,0,961,963,3,48,24,0,962,964,5,220,0,0,963,962,1,0,0,0,964,
965,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,968,5,86,
0,0,968,969,5,222,0,0,969,970,7,2,0,0,970,971,5,222,0,0,971,972,3,220,110,
0,972,974,1,0,0,0,973,920,1,0,0,0,973,935,1,0,0,0,973,955,1,0,0,0,974,75,
1,0,0,0,975,976,5,54,0,0,976,77,1,0,0,0,977,978,3,298,149,0,978,979,5,222,
0,0,979,981,1,0,0,0,980,977,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,
983,5,56,0,0,983,984,5,222,0,0,984,986,3,278,139,0,985,987,5,220,0,0,986,
985,1,0,0,0,987,988,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,993,1,0,
0,0,990,992,3,80,40,0,991,990,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,
994,1,0,0,0,994,996,1,0,0,0,995,993,1,0,0,0,996,997,5,46,0,0,997,79,1,0,
0,0,998,1007,3,278,139,0,999,1001,5,222,0,0,1000,999,1,0,0,0,1000,1001,1,
0,0,0,1001,1002,1,0,0,0,1002,1004,5,187,0,0,1003,1005,5,222,0,0,1004,1003,
1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1008,3,220,110,0,1007,1000,
1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,1011,5,220,0,0,1010,1009,
1,0,0,0,1011,1012,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,81,1,
0,0,0,1014,1015,5,58,0,0,1015,1016,5,222,0,0,1016,1027,3,220,110,0,1017,
1019,5,222,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,
1022,5,182,0,0,1021,1023,5,222,0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,
1024,1,0,0,0,1024,1026,3,220,110,0,1025,1018,1,0,0,0,1026,1029,1,0,0,0,1027,
1025,1,0,0,0,1027,1028,1,0,0,0,1028,83,1,0,0,0,1029,1027,1,0,0,0,1030,1031,
5,59,0,0,1031,1032,5,222,0,0,1032,1033,3,220,110,0,1033,85,1,0,0,0,1034,
1035,3,306,153,0,1035,1036,5,222,0,0,1036,1038,1,0,0,0,1037,1034,1,0,0,0,
1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,60,0,0,1040,1041,5,222,0,
0,1041,1043,3,278,139,0,1042,1044,5,222,0,0,1043,1042,1,0,0,0,1043,1044,
1,0,0,0,1044,1045,1,0,0,0,1045,1046,3,268,134,0,1046,87,1,0,0,0,1047,1048,
7,3,0,0,1048,89,1,0,0,0,1049,1050,5,67,0,0,1050,1051,5,222,0,0,1051,1053,
3,220,110,0,1052,1054,5,222,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
1055,1,0,0,0,1055,1057,5,182,0,0,1056,1058,5,222,0,0,1057,1056,1,0,0,0,1057,
1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,3,220,110,0,1060,91,1,0,0,0,1061,
1062,5,69,0,0,1062,1063,5,222,0,0,1063,1064,5,43,0,0,1064,1065,5,222,0,0,
1065,1067,3,278,139,0,1066,1068,3,304,152,0,1067,1066,1,0,0,0,1067,1068,
1,0,0,0,1068,1069,1,0,0,0,1069,1070,5,222,0,0,1070,1071,5,78,0,0,1071,1072,
5,222,0,0,1072,1074,3,220,110,0,1073,1075,5,220,0,0,1074,1073,1,0,0,0,1075,
1076,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1084,1,0,0,0,1078,
1080,3,48,24,0,1079,1081,5,220,0,0,1080,1079,1,0,0,0,1081,1082,1,0,0,0,1082,
1080,1,0,0,0,1082,1083,1,0,0,0,1083,1085,1,0,0,0,1084,1078,1,0,0,0,1084,
1085,1,0,0,0,1085,1086,1,0,0,0,1086,1089,5,105,0,0,1087,1088,5,222,0,0,1088,
1090,3,278,139,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,93,1,0,0,0,1091,
1092,5,69,0,0,1092,1093,5,222,0,0,1093,1095,3,250,125,0,1094,1096,3,304,
152,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,1099,1,0,0,0,1097,1098,5,
222,0,0,1098,1100,3,280,140,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1102,
1,0,0,0,1101,1103,5,222,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
1,0,0,0,1104,1106,5,187,0,0,1105,1107,5,222,0,0,1106,1105,1,0,0,0,1106,1107,
1,0,0,0,1107,1108,1,0,0,0,1108,1109,3,220,110,0,1109,1110,5,222,0,0,1110,
1111,5,162,0,0,1111,1112,5,222,0,0,1112,1117,3,220,110,0,1113,1114,5,222,
0,0,1114,1115,5,154,0,0,1115,1116,5,222,0,0,1116,1118,3,220,110,0,1117,1113,
1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,1121,5,220,0,0,1120,1119,
1,0,0,0,1121,1122,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,1130,
1,0,0,0,1124,1126,3,48,24,0,1125,1127,5,220,0,0,1126,1125,1,0,0,0,1127,1128,
1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,1131,1,0,0,0,1130,1124,
1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1138,5,105,0,0,1133,1134,
5,222,0,0,1134,1136,3,278,139,0,1135,1137,3,304,152,0,1136,1135,1,0,0,0,
1136,1137,1,0,0,0,1137,1139,1,0,0,0,1138,1133,1,0,0,0,1138,1139,1,0,0,0,
1139,95,1,0,0,0,1140,1141,3,306,153,0,1141,1142,5,222,0,0,1142,1144,1,0,
0,0,1143,1140,1,0,0,0,1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1146,5,153,
0,0,1146,1148,5,222,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,
0,0,0,1149,1150,5,70,0,0,1150,1151,5,222,0,0,1151,1156,3,278,139,0,1152,
1154,5,222,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,
1157,3,268,134,0,1156,1153,1,0,0,0,1156,1157,1,0,0,0,1157,1160,1,0,0,0,1158,
1159,5,222,0,0,1159,1161,3,280,140,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,
1161,1163,1,0,0,0,1162,1164,5,220,0,0,1163,1162,1,0,0,0,1164,1165,1,0,0,
0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1173,1,0,0,0,1167,1169,3,48,24,
0,1168,1170,5,220,0,0,1169,1168,1,0,0,0,1170,1171,1,0,0,0,1171,1169,1,0,
0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1167,1,0,0,0,1173,1174,1,0,
0,0,1174,1175,1,0,0,0,1175,1176,5,47,0,0,1176,97,1,0,0,0,1177,1178,5,71,
0,0,1178,1179,5,222,0,0,1179,1181,3,220,110,0,1180,1182,5,222,0,0,1181,1180,
1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,5,182,0,0,1184,1186,
5,222,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1189,
3,220,110,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1192,
5,222,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,
5,182,0,0,1194,1196,5,222,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,
1,0,0,0,1197,1198,3,220,110,0,1198,99,1,0,0,0,1199,1200,5,73,0,0,1200,1201,
5,222,0,0,1201,1202,3,220,110,0,1202,101,1,0,0,0,1203,1204,5,74,0,0,1204,
1205,5,222,0,0,1205,1206,3,220,110,0,1206,103,1,0,0,0,1207,1208,5,75,0,0,
1208,1209,5,222,0,0,1209,1210,3,108,54,0,1210,1211,5,222,0,0,1211,1212,5,
160,0,0,1212,1213,5,222,0,0,1213,1218,3,50,25,0,1214,1215,5,222,0,0,1215,
1216,5,44,0,0,1216,1217,5,222,0,0,1217,1219,3,50,25,0,1218,1214,1,0,0,0,
1218,1219,1,0,0,0,1219,1233,1,0,0,0,1220,1224,3,106,53,0,1221,1223,3,110,
55,0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,1,0,
0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1227,1229,3,112,56,0,1228,1227,1,
0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,5,48,0,0,1231,1233,1,
0,0,0,1232,1207,1,0,0,0,1232,1220,1,0,0,0,1233,105,1,0,0,0,1234,1235,5,75,
0,0,1235,1236,5,222,0,0,1236,1237,3,108,54,0,1237,1238,5,222,0,0,1238,1240,
5,160,0,0,1239,1241,5,220,0,0,1240,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1240,
1,0,0,0,1242,1243,1,0,0,0,1243,1250,1,0,0,0,1244,1246,3,48,24,0,1245,1247,
5,220,0,0,1246,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1246,1,0,0,0,1248,1249,
1,0,0,0,1249,1251,1,0,0,0,1250,1244,1,0,0,0,1250,1251,1,0,0,0,1251,107,1,
0,0,0,1252,1253,3,220,110,0,1253,109,1,0,0,0,1254,1255,5,45,0,0,1255,1256,
5,222,0,0,1256,1257,3,108,54,0,1257,1258,5,222,0,0,1258,1260,5,160,0,0,1259,
1261,5,220,0,0,1260,1259,1,0,0,0,1261,1262,1,0,0,0,1262,1260,1,0,0,0,1262,
1263,1,0,0,0,1263,1270,1,0,0,0,1264,1266,3,48,24,0,1265,1267,5,220,0,0,1266,
1265,1,0,0,0,1267,1268,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,
1271,1,0,0,0,1270,1264,1,0,0,0,1270,1271,1,0,0,0,1271,111,1,0,0,0,1272,1274,
5,44,0,0,1273,1275,5,220,0,0,1274,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1274,
1,0,0,0,1276,1277,1,0,0,0,1277,1284,1,0,0,0,1278,1280,3,48,24,0,1279,1281,
5,220,0,0,1280,1279,1,0,0,0,1281,1282,1,0,0,0,1282,1280,1,0,0,0,1282,1283,
1,0,0,0,1283,1285,1,0,0,0,1284,1278,1,0,0,0,1284,1285,1,0,0,0,1285,113,1,
0,0,0,1286,1287,5,77,0,0,1287,1288,5,222,0,0,1288,1289,3,278,139,0,1289,
115,1,0,0,0,1290,1291,5,79,0,0,1291,1292,5,222,0,0,1292,1301,3,220,110,0,
1293,1295,5,222,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,
0,1296,1298,5,182,0,0,1297,1299,5,222,0,0,1298,1297,1,0,0,0,1298,1299,1,
0,0,0,1299,1300,1,0,0,0,1300,1302,3,220,110,0,1301,1294,1,0,0,0,1302,1303,
1,0,0,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,117,1,0,0,0,1305,1306,5,
82,0,0,1306,1307,5,222,0,0,1307,1308,3,220,110,0,1308,119,1,0,0,0,1309,1310,
5,88,0,0,1310,1312,5,222,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
1,0,0,0,1313,1315,3,248,124,0,1314,1316,5,222,0,0,1315,1314,1,0,0,0,1315,
1316,1,0,0,0,1316,1317,1,0,0,0,1317,1319,7,4,0,0,1318,1320,5,222,0,0,1319,
1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,3,220,110,0,1322,
121,1,0,0,0,1323,1324,5,91,0,0,1324,1325,5,222,0,0,1325,1327,3,220,110,0,
1326,1328,5,222,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,
0,1329,1331,5,182,0,0,1330,1332,5,222,0,0,1331,1330,1,0,0,0,1331,1332,1,
0,0,0,1332,1333,1,0,0,0,1333,1334,3,220,110,0,1334,123,1,0,0,0,1335,1336,
5,83,0,0,1336,1337,5,222,0,0,1337,1338,3,220,110,0,1338,125,1,0,0,0,1339,
1340,5,84,0,0,1340,1341,5,222,0,0,1341,1356,3,220,110,0,1342,1344,5,222,
0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1347,5,182,
0,0,1346,1348,5,222,0,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,
0,0,0,1349,1354,3,220,110,0,1350,1351,5,222,0,0,1351,1352,5,162,0,0,1352,
1353,5,222,0,0,1353,1355,3,220,110,0,1354,1350,1,0,0,0,1354,1355,1,0,0,0,
1355,1357,1,0,0,0,1356,1343,1,0,0,0,1356,1357,1,0,0,0,1357,127,1,0,0,0,1358,
1359,5,95,0,0,1359,1360,5,222,0,0,1360,1362,3,248,124,0,1361,1363,5,222,
0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,5,187,
0,0,1365,1367,5,222,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,
0,0,0,1368,1369,3,220,110,0,1369,129,1,0,0,0,1370,1374,3,132,66,0,1371,1373,
3,134,67,0,1372,1371,1,0,0,0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1374,1375,
1,0,0,0,1375,1378,1,0,0,0,1376,1374,1,0,0,0,1377,1379,3,136,68,0,1378,1377,
1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1381,5,99,0,0,1381,131,
1,0,0,0,1382,1383,5,96,0,0,1383,1384,5,222,0,0,1384,1385,3,108,54,0,1385,
1386,5,222,0,0,1386,1388,5,160,0,0,1387,1389,5,220,0,0,1388,1387,1,0,0,0,
1389,1390,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,1398,1,0,0,0,
1392,1394,3,24,12,0,1393,1395,5,220,0,0,1394,1393,1,0,0,0,1395,1396,1,0,
0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1392,1,0,
0,0,1398,1399,1,0,0,0,1399,133,1,0,0,0,1400,1401,5,97,0,0,1401,1402,5,222,
0,0,1402,1403,3,108,54,0,1403,1404,5,222,0,0,1404,1406,5,160,0,0,1405,1407,
5,220,0,0,1406,1405,1,0,0,0,1407,1408,1,0,0,0,1408,1406,1,0,0,0,1408,1409,
1,0,0,0,1409,1416,1,0,0,0,1410,1412,3,24,12,0,1411,1413,5,220,0,0,1412,1411,
1,0,0,0,1413,1414,1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1417,
1,0,0,0,1416,1410,1,0,0,0,1416,1417,1,0,0,0,1417,135,1,0,0,0,1418,1420,5,
98,0,0,1419,1421,5,220,0,0,1420,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1420,
1,0,0,0,1422,1423,1,0,0,0,1423,1430,1,0,0,0,1424,1426,3,24,12,0,1425,1427,
5,220,0,0,1426,1425,1,0,0,0,1427,1428,1,0,0,0,1428,1426,1,0,0,0,1428,1429,
1,0,0,0,1429,1431,1,0,0,0,1430,1424,1,0,0,0,1430,1431,1,0,0,0,1431,137,1,
0,0,0,1432,1434,5,101,0,0,1433,1435,5,222,0,0,1434,1433,1,0,0,0,1434,1435,
1,0,0,0,1435,1436,1,0,0,0,1436,1438,5,194,0,0,1437,1439,5,222,0,0,1438,1437,
1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1442,3,262,131,0,1441,1443,
5,222,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,
5,205,0,0,1445,139,1,0,0,0,1446,1447,5,102,0,0,1447,1448,5,222,0,0,1448,
1449,3,220,110,0,1449,141,1,0,0,0,1450,1451,5,104,0,0,1451,1452,5,222,0,
0,1452,1453,3,220,110,0,1453,1454,5,222,0,0,1454,1455,5,8,0,0,1455,1456,
5,222,0,0,1456,1457,3,220,110,0,1457,143,1,0,0,0,1458,1459,7,5,0,0,1459,
1469,5,222,0,0,1460,1461,5,74,0,0,1461,1462,5,222,0,0,1462,1464,3,220,110,
0,1463,1465,5,181,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1470,1,0,
0,0,1466,1467,5,139,0,0,1467,1468,5,222,0,0,1468,1470,5,105,0,0,1469,1460,
1,0,0,0,1469,1466,1,0,0,0,1470,145,1,0,0,0,1471,1472,5,111,0,0,1472,1473,
5,222,0,0,1473,1474,3,220,110,0,1474,1475,5,222,0,0,1475,1476,5,74,0,0,1476,
1477,5,222,0,0,1477,1488,3,220,110,0,1478,1480,5,222,0,0,1479,1478,1,0,0,
0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,5,182,0,0,1482,1484,5,222,
0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1487,3,220,
110,0,1486,1479,1,0,0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,
0,0,0,1489,147,1,0,0,0,1490,1488,1,0,0,0,1491,1492,5,111,0,0,1492,1493,5,
222,0,0,1493,1494,3,220,110,0,1494,1495,5,222,0,0,1495,1496,5,73,0,0,1496,
1497,5,222,0,0,1497,1508,3,220,110,0,1498,1500,5,222,0,0,1499,1498,1,0,0,
0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,5,182,0,0,1502,1504,5,222,
0,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1507,3,220,
110,0,1506,1499,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,
0,0,0,1509,149,1,0,0,0,1510,1508,1,0,0,0,1511,1512,5,114,0,0,1512,1513,5,
222,0,0,1513,1514,3,220,110,0,1514,1515,5,222,0,0,1515,1516,5,69,0,0,1516,
1517,5,222,0,0,1517,1522,7,6,0,0,1518,1519,5,222,0,0,1519,1520,5,1,0,0,1520,
1521,5,222,0,0,1521,1523,7,7,0,0,1522,1518,1,0,0,0,1522,1523,1,0,0,0,1523,
1526,1,0,0,0,1524,1525,5,222,0,0,1525,1527,7,8,0,0,1526,1524,1,0,0,0,1526,
1527,1,0,0,0,1527,1528,1,0,0,0,1528,1529,5,222,0,0,1529,1530,5,8,0,0,1530,
1531,5,222,0,0,1531,1542,3,220,110,0,1532,1533,5,222,0,0,1533,1535,5,87,
0,0,1534,1536,5,222,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,
0,0,0,1537,1539,5,187,0,0,1538,1540,5,222,0,0,1539,1538,1,0,0,0,1539,1540,
1,0,0,0,1540,1541,1,0,0,0,1541,1543,3,220,110,0,1542,1532,1,0,0,0,1542,1543,
1,0,0,0,1543,151,1,0,0,0,1544,1557,3,154,77,0,1545,1547,5,222,0,0,1546,1545,
1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1550,7,9,0,0,1549,1551,
5,222,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,1554,
3,154,77,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,1546,
1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1578,
1,0,0,0,1559,1557,1,0,0,0,1560,1562,3,154,77,0,1561,1560,1,0,0,0,1561,1562,
1,0,0,0,1562,1573,1,0,0,0,1563,1565,5,222,0,0,1564,1563,1,0,0,0,1564,1565,
1,0,0,0,1565,1566,1,0,0,0,1566,1568,7,9,0,0,1567,1569,5,222,0,0,1568,1567,
1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,1570,1572,3,154,77,0,1571,1570,
1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,1564,1,0,0,0,1574,1575,
1,0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,1544,
1,0,0,0,1577,1561,1,0,0,0,1578,153,1,0,0,0,1579,1593,7,10,0,0,1580,1582,
5,222,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1585,
5,194,0,0,1584,1586,5,222,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,
1,0,0,0,1587,1589,3,262,131,0,1588,1590,5,222,0,0,1589,1588,1,0,0,0,1589,
1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,5,205,0,0,1592,1594,1,0,0,0,1593,
1581,1,0,0,0,1593,1594,1,0,0,0,1594,1597,1,0,0,0,1595,1597,3,220,110,0,1596,
1579,1,0,0,0,1596,1595,1,0,0,0,1597,155,1,0,0,0,1598,1599,5,124,0,0,1599,
1600,5,222,0,0,1600,1602,3,220,110,0,1601,1603,5,222,0,0,1602,1601,1,0,0,
0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1609,5,182,0,0,1605,1607,5,222,
0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1610,3,152,
76,0,1609,1606,1,0,0,0,1609,1610,1,0,0,0,1610,157,1,0,0,0,1611,1612,3,306,
153,0,1612,1613,5,222,0,0,1613,1615,1,0,0,0,1614,1611,1,0,0,0,1614,1615,
1,0,0,0,1615,1618,1,0,0,0,1616,1617,5,153,0,0,1617,1619,5,222,0,0,1618,1616,
1,0,0,0,1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,1621,5,126,0,0,1621,1622,
5,222,0,0,1622,1624,3,278,139,0,1623,1625,3,304,152,0,1624,1623,1,0,0,0,
1624,1625,1,0,0,0,1625,1630,1,0,0,0,1626,1628,5,222,0,0,1627,1626,1,0,0,
0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1631,3,268,134,0,1630,1627,1,
0,0,0,1630,1631,1,0,0,0,1631,1634,1,0,0,0,1632,1633,5,222,0,0,1633,1635,
3,280,140,0,1634,1632,1,0,0,0,1634,1635,1,0,0,0,1635,1637,1,0,0,0,1636,1638,
5,220,0,0,1637,1636,1,0,0,0,1638,1639,1,0,0,0,1639,1637,1,0,0,0,1639,1640,
1,0,0,0,1640,1647,1,0,0,0,1641,1643,3,48,24,0,1642,1644,5,220,0,0,1643,1642,
1,0,0,0,1644,1645,1,0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,0,1646,1648,
1,0,0,0,1647,1641,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1650,
5,49,0,0,1650,159,1,0,0,0,1651,1652,3,306,153,0,1652,1653,5,222,0,0,1653,
1655,1,0,0,0,1654,1651,1,0,0,0,1654,1655,1,0,0,0,1655,1658,1,0,0,0,1656,
1657,5,153,0,0,1657,1659,5,222,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,
1660,1,0,0,0,1660,1661,5,128,0,0,1661,1662,5,222,0,0,1662,1667,3,278,139,
0,1663,1665,5,222,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,
0,0,1666,1668,3,268,134,0,1667,1664,1,0,0,0,1667,1668,1,0,0,0,1668,1670,
1,0,0,0,1669,1671,5,220,0,0,1670,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1670,
1,0,0,0,1672,1673,1,0,0,0,1673,1680,1,0,0,0,1674,1676,3,48,24,0,1675,1677,
5,220,0,0,1676,1675,1,0,0,0,1677,1678,1,0,0,0,1678,1676,1,0,0,0,1678,1679,
1,0,0,0,1679,1681,1,0,0,0,1680,1674,1,0,0,0,1680,1681,1,0,0,0,1681,1682,
1,0,0,0,1682,1683,5,49,0,0,1683,161,1,0,0,0,1684,1685,3,306,153,0,1685,1686,
5,222,0,0,1686,1688,1,0,0,0,1687,1684,1,0,0,0,1687,1688,1,0,0,0,1688,1691,
1,0,0,0,1689,1690,5,153,0,0,1690,1692,5,222,0,0,1691,1689,1,0,0,0,1691,1692,
1,0,0,0,1692,1693,1,0,0,0,1693,1694,5,127,0,0,1694,1695,5,222,0,0,1695,1700,
3,278,139,0,1696,1698,5,222,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,
1699,1,0,0,0,1699,1701,3,268,134,0,1700,1697,1,0,0,0,1700,1701,1,0,0,0,1701,
1703,1,0,0,0,1702,1704,5,220,0,0,1703,1702,1,0,0,0,1704,1705,1,0,0,0,1705,
1703,1,0,0,0,1705,1706,1,0,0,0,1706,1713,1,0,0,0,1707,1709,3,48,24,0,1708,
1710,5,220,0,0,1709,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1709,1,0,0,0,1711,
1712,1,0,0,0,1712,1714,1,0,0,0,1713,1707,1,0,0,0,1713,1714,1,0,0,0,1714,
1715,1,0,0,0,1715,1716,5,49,0,0,1716,163,1,0,0,0,1717,1718,5,130,0,0,1718,
1719,5,222,0,0,1719,1721,3,220,110,0,1720,1722,5,222,0,0,1721,1720,1,0,0,
0,1721,1722,1,0,0,0,1722,1723,1,0,0,0,1723,1725,5,182,0,0,1724,1726,5,222,
0,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,1729,3,220,
110,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1731,1,0,0,0,1730,1732,5,
222,0,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1735,
5,182,0,0,1734,1736,5,222,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1737,
1,0,0,0,1737,1738,3,220,110,0,1738,165,1,0,0,0,1739,1740,5,133,0,0,1740,
1741,5,222,0,0,1741,1756,3,278,139,0,1742,1744,5,222,0,0,1743,1742,1,0,0,
0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1747,5,194,0,0,1746,1748,5,222,
0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1753,1,0,0,0,1749,1751,3,262,
131,0,1750,1752,5,222,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,
1,0,0,0,1753,1749,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1757,
5,205,0,0,1756,1743,1,0,0,0,1756,1757,1,0,0,0,1757,167,1,0,0,0,1758,1761,
5,132,0,0,1759,1760,5,222,0,0,1760,1762,3,220,110,0,1761,1759,1,0,0,0,1761,
1762,1,0,0,0,1762,169,1,0,0,0,1763,1764,5,136,0,0,1764,1767,5,222,0,0,1765,
1766,5,123,0,0,1766,1768,5,222,0,0,1767,1765,1,0,0,0,1767,1768,1,0,0,0,1768,
1769,1,0,0,0,1769,1780,3,172,86,0,1770,1772,5,222,0,0,1771,1770,1,0,0,0,
1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,5,182,0,0,1774,1776,5,222,
0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1779,3,172,
86,0,1778,1771,1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,1781,1,0,
0,0,1781,171,1,0,0,0,1782,1780,1,0,0,0,1783,1785,3,248,124,0,1784,1786,5,
222,0,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1789,
5,194,0,0,1788,1790,5,222,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,
1,0,0,0,1791,1793,3,274,137,0,1792,1794,5,222,0,0,1793,1792,1,0,0,0,1793,
1794,1,0,0,0,1794,1795,1,0,0,0,1795,1798,5,205,0,0,1796,1797,5,222,0,0,1797,
1799,3,280,140,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,173,1,0,0,0,1800,
1801,5,138,0,0,1801,175,1,0,0,0,1802,1808,5,139,0,0,1803,1806,5,222,0,0,
1804,1807,5,105,0,0,1805,1807,3,278,139,0,1806,1804,1,0,0,0,1806,1805,1,
0,0,0,1807,1809,1,0,0,0,1808,1803,1,0,0,0,1808,1809,1,0,0,0,1809,177,1,0,
0,0,1810,1811,5,140,0,0,1811,179,1,0,0,0,1812,1813,5,141,0,0,1813,1814,5,
222,0,0,1814,1815,3,220,110,0,1815,181,1,0,0,0,1816,1817,5,142,0,0,1817,
1818,5,222,0,0,1818,1820,3,248,124,0,1819,1821,5,222,0,0,1820,1819,1,0,0,
0,1820,1821,1,0,0,0,1821,1822,1,0,0,0,1822,1824,5,187,0,0,1823,1825,5,222,
0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,0,0,0,1826,1827,3,220,
110,0,1827,183,1,0,0,0,1828,1829,5,143,0,0,1829,1830,5,222,0,0,1830,1832,
3,220,110,0,1831,1833,5,222,0,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,
1834,1,0,0,0,1834,1836,5,182,0,0,1835,1837,5,222,0,0,1836,1835,1,0,0,0,1836,
1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,3,220,110,0,1839,185,1,0,0,0,1840,
1841,5,144,0,0,1841,1842,5,222,0,0,1842,1844,3,220,110,0,1843,1845,5,222,
0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1846,1,0,0,0,1846,1848,5,182,
0,0,1847,1849,5,222,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,
0,0,0,1850,1852,3,220,110,0,1851,1853,5,222,0,0,1852,1851,1,0,0,0,1852,1853,
1,0,0,0,1853,1854,1,0,0,0,1854,1856,5,182,0,0,1855,1857,5,222,0,0,1856,1855,
1,0,0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,3,220,110,0,1859,1861,
5,222,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1864,
5,182,0,0,1863,1865,5,222,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,
1,0,0,0,1866,1867,3,220,110,0,1867,187,1,0,0,0,1868,1869,5,145,0,0,1869,
1870,5,222,0,0,1870,1872,3,220,110,0,1871,1873,5,222,0,0,1872,1871,1,0,0,
0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,182,0,0,1875,1877,5,222,
0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,1878,1879,3,220,
110,0,1879,189,1,0,0,0,1880,1881,5,146,0,0,1881,1882,5,222,0,0,1882,1883,
5,18,0,0,1883,1884,5,222,0,0,1884,1886,3,220,110,0,1885,1887,5,220,0,0,1886,
1885,1,0,0,0,1887,1888,1,0,0,0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,
1893,1,0,0,0,1890,1892,3,192,96,0,1891,1890,1,0,0,0,1892,1895,1,0,0,0,1893,
1891,1,0,0,0,1893,1894,1,0,0,0,1894,1897,1,0,0,0,1895,1893,1,0,0,0,1896,
1898,5,222,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,
1900,5,50,0,0,1900,191,1,0,0,0,1901,1902,5,18,0,0,1902,1903,5,222,0,0,1903,
1905,3,194,97,0,1904,1906,5,222,0,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,
1906,1921,1,0,0,0,1907,1909,5,181,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,
0,1909,1913,1,0,0,0,1910,1912,5,220,0,0,1911,1910,1,0,0,0,1912,1915,1,0,
0,0,1913,1911,1,0,0,0,1913,1914,1,0,0,0,1914,1922,1,0,0,0,1915,1913,1,0,
0,0,1916,1918,5,220,0,0,1917,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1917,1,
0,0,0,1919,1920,1,0,0,0,1920,1922,1,0,0,0,1921,1908,1,0,0,0,1921,1917,1,
0,0,0,1922,1929,1,0,0,0,1923,1925,3,48,24,0,1924,1926,5,220,0,0,1925,1924,
1,0,0,0,1926,1927,1,0,0,0,1927,1925,1,0,0,0,1927,1928,1,0,0,0,1928,1930,
1,0,0,0,1929,1923,1,0,0,0,1929,1930,1,0,0,0,1930,193,1,0,0,0,1931,1947,5,
44,0,0,1932,1943,3,196,98,0,1933,1935,5,222,0,0,1934,1933,1,0,0,0,1934,1935,
1,0,0,0,1935,1936,1,0,0,0,1936,1938,5,182,0,0,1937,1939,5,222,0,0,1938,1937,
1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1942,3,196,98,0,1941,1934,
1,0,0,0,1942,1945,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,1947,
1,0,0,0,1945,1943,1,0,0,0,1946,1931,1,0,0,0,1946,1932,1,0,0,0,1947,195,1,
0,0,0,1948,1950,5,80,0,0,1949,1951,5,222,0,0,1950,1949,1,0,0,0,1950,1951,
1,0,0,0,1951,1952,1,0,0,0,1952,1954,3,286,143,0,1953,1955,5,222,0,0,1954,
1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,3,220,110,0,1957,
1966,1,0,0,0,1958,1966,3,220,110,0,1959,1960,3,220,110,0,1960,1961,5,222,
0,0,1961,1962,5,162,0,0,1962,1963,5,222,0,0,1963,1964,3,220,110,0,1964,1966,
1,0,0,0,1965,1948,1,0,0,0,1965,1958,1,0,0,0,1965,1959,1,0,0,0,1966,197,1,
0,0,0,1967,1968,5,147,0,0,1968,1969,5,222,0,0,1969,1978,3,220,110,0,1970,
1972,5,222,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,
1975,5,182,0,0,1974,1976,5,222,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,
1977,1,0,0,0,1977,1979,3,220,110,0,1978,1971,1,0,0,0,1978,1979,1,0,0,0,1979,
199,1,0,0,0,1980,1981,5,149,0,0,1981,1982,5,222,0,0,1982,1984,3,220,110,
0,1983,1985,5,222,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,
0,0,1986,1988,5,182,0,0,1987,1989,5,222,0,0,1988,1987,1,0,0,0,1988,1989,
1,0,0,0,1989,1990,1,0,0,0,1990,1991,3,220,110,0,1991,201,1,0,0,0,1992,1993,
5,148,0,0,1993,1994,5,222,0,0,1994,1996,3,248,124,0,1995,1997,5,222,0,0,
1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,1998,1,0,0,0,1998,2000,5,187,0,
0,1999,2001,5,222,0,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,
0,0,2002,2003,3,220,110,0,2003,203,1,0,0,0,2004,2005,5,155,0,0,2005,205,
1,0,0,0,2006,2007,3,306,153,0,2007,2008,5,222,0,0,2008,2010,1,0,0,0,2009,
2006,1,0,0,0,2009,2010,1,0,0,0,2010,2013,1,0,0,0,2011,2012,5,153,0,0,2012,
2014,5,222,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,
2016,5,157,0,0,2016,2017,5,222,0,0,2017,2022,3,278,139,0,2018,2020,5,222,
0,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2021,1,0,0,0,2021,2023,3,268,
134,0,2022,2019,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2026,5,
220,0,0,2025,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2025,1,0,0,0,2027,2028,
1,0,0,0,2028,2035,1,0,0,0,2029,2031,3,48,24,0,2030,2032,5,220,0,0,2031,2030,
1,0,0,0,2032,2033,1,0,0,0,2033,2031,1,0,0,0,2033,2034,1,0,0,0,2034,2036,
1,0,0,0,2035,2029,1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,2037,2038,
5,51,0,0,2038,207,1,0,0,0,2039,2041,5,161,0,0,2040,2042,5,222,0,0,2041,2040,
1,0,0,0,2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2045,5,187,0,0,2044,2046,
5,222,0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2047,1,0,0,0,2047,2048,
3,220,110,0,2048,209,1,0,0,0,2049,2050,3,306,153,0,2050,2051,5,222,0,0,2051,
2053,1,0,0,0,2052,2049,1,0,0,0,2052,2053,1,0,0,0,2053,2054,1,0,0,0,2054,
2055,5,164,0,0,2055,2056,5,222,0,0,2056,2058,3,278,139,0,2057,2059,5,220,
0,0,2058,2057,1,0,0,0,2059,2060,1,0,0,0,2060,2058,1,0,0,0,2060,2061,1,0,
0,0,2061,2065,1,0,0,0,2062,2064,3,212,106,0,2063,2062,1,0,0,0,2064,2067,
1,0,0,0,2065,2063,1,0,0,0,2065,2066,1,0,0,0,2066,2068,1,0,0,0,2067,2065,
1,0,0,0,2068,2069,5,52,0,0,2069,211,1,0,0,0,2070,2085,3,278,139,0,2071,2073,
5,222,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2079,
5,194,0,0,2075,2077,5,222,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
1,0,0,0,2078,2080,3,274,137,0,2079,2076,1,0,0,0,2079,2080,1,0,0,0,2080,2082,
1,0,0,0,2081,2083,5,222,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,
1,0,0,0,2084,2086,5,205,0,0,2085,2072,1,0,0,0,2085,2086,1,0,0,0,2086,2089,
1,0,0,0,2087,2088,5,222,0,0,2088,2090,3,280,140,0,2089,2087,1,0,0,0,2089,
2090,1,0,0,0,2090,2092,1,0,0,0,2091,2093,5,220,0,0,2092,2091,1,0,0,0,2093,
2094,1,0,0,0,2094,2092,1,0,0,0,2094,2095,1,0,0,0,2095,213,1,0,0,0,2096,2097,
5,165,0,0,2097,2098,5,222,0,0,2098,2103,3,220,110,0,2099,2100,5,222,0,0,
2100,2101,5,80,0,0,2101,2102,5,222,0,0,2102,2104,3,302,151,0,2103,2099,1,
0,0,0,2103,2104,1,0,0,0,2104,215,1,0,0,0,2105,2106,5,166,0,0,2106,2107,5,
222,0,0,2107,2108,3,220,110,0,2108,217,1,0,0,0,2109,2110,5,167,0,0,2110,
2111,5,222,0,0,2111,2126,3,220,110,0,2112,2114,5,222,0,0,2113,2112,1,0,0,
0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2117,5,182,0,0,2116,2118,5,222,
0,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,0,0,2119,2124,3,220,
110,0,2120,2121,5,222,0,0,2121,2122,5,162,0,0,2122,2123,5,222,0,0,2123,2125,
3,220,110,0,2124,2120,1,0,0,0,2124,2125,1,0,0,0,2125,2127,1,0,0,0,2126,2113,
1,0,0,0,2126,2127,1,0,0,0,2127,219,1,0,0,0,2128,2129,6,110,-1,0,2129,2193,
3,296,148,0,2130,2132,5,194,0,0,2131,2133,5,222,0,0,2132,2131,1,0,0,0,2132,
2133,1,0,0,0,2133,2134,1,0,0,0,2134,2145,3,220,110,0,2135,2137,5,222,0,0,
2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2140,5,182,0,
0,2139,2141,5,222,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,
0,0,2142,2144,3,220,110,0,2143,2136,1,0,0,0,2144,2147,1,0,0,0,2145,2143,
1,0,0,0,2145,2146,1,0,0,0,2146,2149,1,0,0,0,2147,2145,1,0,0,0,2148,2150,
5,222,0,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2152,
5,205,0,0,2152,2193,1,0,0,0,2153,2154,5,106,0,0,2154,2155,5,222,0,0,2155,
2193,3,220,110,20,2156,2193,3,214,107,0,2157,2158,5,2,0,0,2158,2159,5,222,
0,0,2159,2193,3,220,110,18,2160,2162,3,248,124,0,2161,2163,5,222,0,0,2162,
2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2166,5,179,0,0,2165,
2167,5,222,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,
2169,3,220,110,17,2169,2193,1,0,0,0,2170,2172,7,11,0,0,2171,2173,5,222,0,
0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,2174,1,0,0,0,2174,2193,3,220,
110,15,2175,2188,5,107,0,0,2176,2177,5,222,0,0,2177,2189,3,220,110,0,2178,
2180,5,194,0,0,2179,2181,5,222,0,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,
2182,1,0,0,0,2182,2184,3,220,110,0,2183,2185,5,222,0,0,2184,2183,1,0,0,0,
2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,2187,5,205,0,0,2187,2189,1,0,0,
0,2188,2176,1,0,0,0,2188,2178,1,0,0,0,2189,2193,1,0,0,0,2190,2193,3,248,
124,0,2191,2193,3,138,69,0,2192,2128,1,0,0,0,2192,2130,1,0,0,0,2192,2153,
1,0,0,0,2192,2156,1,0,0,0,2192,2157,1,0,0,0,2192,2160,1,0,0,0,2192,2170,
1,0,0,0,2192,2175,1,0,0,0,2192,2190,1,0,0,0,2192,2191,1,0,0,0,2193,2304,
1,0,0,0,2194,2196,10,16,0,0,2195,2197,5,222,0,0,2196,2195,1,0,0,0,2196,2197,
1,0,0,0,2197,2198,1,0,0,0,2198,2200,5,203,0,0,2199,2201,5,222,0,0,2200,2199,
1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,2303,3,220,110,17,2203,
2205,10,14,0,0,2204,2206,5,222,0,0,2205,2204,1,0,0,0,2205,2206,1,0,0,0,2206,
2207,1,0,0,0,2207,2209,7,12,0,0,2208,2210,5,222,0,0,2209,2208,1,0,0,0,2209,
2210,1,0,0,0,2210,2211,1,0,0,0,2211,2303,3,220,110,15,2212,2214,10,13,0,
0,2213,2215,5,222,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,
0,0,2216,2218,5,183,0,0,2217,2219,5,222,0,0,2218,2217,1,0,0,0,2218,2219,
1,0,0,0,2219,2220,1,0,0,0,2220,2303,3,220,110,14,2221,2223,10,12,0,0,2222,
2224,5,222,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,
2227,5,103,0,0,2226,2228,5,222,0,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,2228,
2229,1,0,0,0,2229,2303,3,220,110,13,2230,2232,10,11,0,0,2231,2233,5,222,
0,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2234,1,0,0,0,2234,2236,7,11,
0,0,2235,2237,5,222,0,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,
0,0,0,2238,2303,3,220,110,12,2239,2241,10,10,0,0,2240,2242,5,222,0,0,2241,
2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,2245,5,178,0,0,2244,
2246,5,222,0,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2247,1,0,0,0,2247,
2303,3,220,110,11,2248,2250,10,9,0,0,2249,2251,5,222,0,0,2250,2249,1,0,0,
0,2250,2251,1,0,0,0,2251,2252,1,0,0,0,2252,2254,7,13,0,0,2253,2255,5,222,
0,0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2303,3,220,
110,10,2257,2259,10,7,0,0,2258,2260,5,222,0,0,2259,2258,1,0,0,0,2259,2260,
1,0,0,0,2260,2261,1,0,0,0,2261,2263,5,4,0,0,2262,2264,5,222,0,0,2263,2262,
1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2303,3,220,110,8,2266,2268,
10,6,0,0,2267,2269,5,222,0,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2270,
1,0,0,0,2270,2272,5,120,0,0,2271,2273,5,222,0,0,2272,2271,1,0,0,0,2272,2273,
1,0,0,0,2273,2274,1,0,0,0,2274,2303,3,220,110,7,2275,2277,10,5,0,0,2276,
2278,5,222,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,
2281,5,177,0,0,2280,2282,5,222,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,
2283,1,0,0,0,2283,2303,3,220,110,6,2284,2286,10,4,0,0,2285,2287,5,222,0,
0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,0,0,0,2288,2290,5,57,0,
0,2289,2291,5,222,0,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,
0,0,2292,2303,3,220,110,5,2293,2295,10,3,0,0,2294,2296,5,222,0,0,2295,2294,
1,0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,0,0,2297,2299,5,76,0,0,2298,2300,
5,222,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,0,2301,2303,
3,220,110,4,2302,2194,1,0,0,0,2302,2203,1,0,0,0,2302,2212,1,0,0,0,2302,2221,
1,0,0,0,2302,2230,1,0,0,0,2302,2239,1,0,0,0,2302,2248,1,0,0,0,2302,2257,
1,0,0,0,2302,2266,1,0,0,0,2302,2275,1,0,0,0,2302,2284,1,0,0,0,2302,2293,
1,0,0,0,2303,2306,1,0,0,0,2304,2302,1,0,0,0,2304,2305,1,0,0,0,2305,221,1,
0,0,0,2306,2304,1,0,0,0,2307,2311,5,40,0,0,2308,2311,5,153,0,0,2309,2311,
3,306,153,0,2310,2307,1,0,0,0,2310,2308,1,0,0,0,2310,2309,1,0,0,0,2311,2312,
1,0,0,0,2312,2315,5,222,0,0,2313,2314,5,175,0,0,2314,2316,5,222,0,0,2315,
2313,1,0,0,0,2315,2316,1,0,0,0,2316,2317,1,0,0,0,2317,2318,3,224,112,0,2318,
223,1,0,0,0,2319,2330,3,226,113,0,2320,2322,5,222,0,0,2321,2320,1,0,0,0,
2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,2325,5,182,0,0,2324,2326,5,222,
0,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,2329,3,226,
113,0,2328,2321,1,0,0,0,2329,2332,1,0,0,0,2330,2328,1,0,0,0,2330,2331,1,
0,0,0,2331,225,1,0,0,0,2332,2330,1,0,0,0,2333,2335,3,278,139,0,2334,2336,
3,304,152,0,2335,2334,1,0,0,0,2335,2336,1,0,0,0,2336,2354,1,0,0,0,2337,2339,
5,222,0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,2340,1,0,0,0,2340,2342,
5,194,0,0,2341,2343,5,222,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,2348,
1,0,0,0,2344,2346,3,274,137,0,2345,2347,5,222,0,0,2346,2345,1,0,0,0,2346,
2347,1,0,0,0,2347,2349,1,0,0,0,2348,2344,1,0,0,0,2348,2349,1,0,0,0,2349,
2350,1,0,0,0,2350,2352,5,205,0,0,2351,2353,5,222,0,0,2352,2351,1,0,0,0,2352,
2353,1,0,0,0,2353,2355,1,0,0,0,2354,2338,1,0,0,0,2354,2355,1,0,0,0,2355,
2358,1,0,0,0,2356,2357,5,222,0,0,2357,2359,3,280,140,0,2358,2356,1,0,0,0,
2358,2359,1,0,0,0,2359,227,1,0,0,0,2360,2361,5,172,0,0,2361,2362,5,222,0,
0,2362,2364,3,220,110,0,2363,2365,5,220,0,0,2364,2363,1,0,0,0,2365,2366,
1,0,0,0,2366,2364,1,0,0,0,2366,2367,1,0,0,0,2367,2371,1,0,0,0,2368,2370,
3,48,24,0,2369,2368,1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,
1,0,0,0,2372,2377,1,0,0,0,2373,2371,1,0,0,0,2374,2376,5,220,0,0,2375,2374,
1,0,0,0,2376,2379,1,0,0,0,2377,2375,1,0,0,0,2377,2378,1,0,0,0,2378,2380,
1,0,0,0,2379,2377,1,0,0,0,2380,2381,5,171,0,0,2381,229,1,0,0,0,2382,2383,
5,173,0,0,2383,2384,5,222,0,0,2384,2386,3,220,110,0,2385,2387,5,222,0,0,
2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2390,5,182,0,
0,2389,2391,5,222,0,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,
0,0,2392,2393,3,220,110,0,2393,231,1,0,0,0,2394,2395,5,174,0,0,2395,2398,
5,222,0,0,2396,2397,5,106,0,0,2397,2399,5,222,0,0,2398,2396,1,0,0,0,2398,
2399,1,0,0,0,2399,2400,1,0,0,0,2400,2402,3,248,124,0,2401,2403,5,220,0,0,
2402,2401,1,0,0,0,2403,2404,1,0,0,0,2404,2402,1,0,0,0,2404,2405,1,0,0,0,
2405,2412,1,0,0,0,2406,2408,3,48,24,0,2407,2409,5,220,0,0,2408,2407,1,0,
0,0,2409,2410,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,
0,0,2412,2406,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,2415,5,53,
0,0,2415,233,1,0,0,0,2416,2417,5,176,0,0,2417,2418,5,222,0,0,2418,2420,3,
220,110,0,2419,2421,5,222,0,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,
1,0,0,0,2422,2427,5,182,0,0,2423,2425,5,222,0,0,2424,2423,1,0,0,0,2424,2425,
1,0,0,0,2425,2426,1,0,0,0,2426,2428,3,152,76,0,2427,2424,1,0,0,0,2427,2428,
1,0,0,0,2428,235,1,0,0,0,2429,2432,3,238,119,0,2430,2432,3,240,120,0,2431,
2429,1,0,0,0,2431,2430,1,0,0,0,2432,237,1,0,0,0,2433,2434,5,17,0,0,2434,
2435,5,222,0,0,2435,2437,3,278,139,0,2436,2438,3,304,152,0,2437,2436,1,0,
0,0,2437,2438,1,0,0,0,2438,2452,1,0,0,0,2439,2441,5,222,0,0,2440,2439,1,
0,0,0,2440,2441,1,0,0,0,2441,2442,1,0,0,0,2442,2444,5,194,0,0,2443,2445,
5,222,0,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,2446,1,0,0,0,2446,2448,
3,262,131,0,2447,2449,5,222,0,0,2448,2447,1,0,0,0,2448,2449,1,0,0,0,2449,
2450,1,0,0,0,2450,2451,5,205,0,0,2451,2453,1,0,0,0,2452,2440,1,0,0,0,2452,
2453,1,0,0,0,2453,239,1,0,0,0,2454,2455,5,17,0,0,2455,2457,5,222,0,0,2456,
2458,3,248,124,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,2458,2459,1,0,0,0,2459,
2461,5,186,0,0,2460,2462,5,222,0,0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,
2463,1,0,0,0,2463,2465,3,278,139,0,2464,2466,3,304,152,0,2465,2464,1,0,0,
0,2465,2466,1,0,0,0,2466,2480,1,0,0,0,2467,2469,5,222,0,0,2468,2467,1,0,
0,0,2468,2469,1,0,0,0,2469,2470,1,0,0,0,2470,2472,5,194,0,0,2471,2473,5,
222,0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,2476,
3,262,131,0,2475,2477,5,222,0,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,
2478,1,0,0,0,2478,2479,5,205,0,0,2479,2481,1,0,0,0,2480,2468,1,0,0,0,2480,
2481,1,0,0,0,2481,241,1,0,0,0,2482,2485,3,244,122,0,2483,2485,3,246,123,
0,2484,2482,1,0,0,0,2484,2483,1,0,0,0,2485,243,1,0,0,0,2486,2489,3,284,142,
0,2487,2488,5,222,0,0,2488,2490,3,262,131,0,2489,2487,1,0,0,0,2489,2490,
1,0,0,0,2490,245,1,0,0,0,2491,2493,3,248,124,0,2492,2491,1,0,0,0,2492,2493,
1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,186,0,0,2495,2497,3,278,139,0,2496,
2498,3,304,152,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2501,1,0,0,0,2499,
2500,5,222,0,0,2500,2502,3,262,131,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,
2502,2504,1,0,0,0,2503,2505,3,266,133,0,2504,2503,1,0,0,0,2504,2505,1,0,
0,0,2505,247,1,0,0,0,2506,2511,3,256,128,0,2507,2511,3,250,125,0,2508,2511,
3,252,126,0,2509,2511,3,260,130,0,2510,2506,1,0,0,0,2510,2507,1,0,0,0,2510,
2508,1,0,0,0,2510,2509,1,0,0,0,2511,249,1,0,0,0,2512,2514,3,278,139,0,2513,
2515,3,304,152,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,2516,
2518,3,266,133,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,251,1,0,0,0,2519,
2523,3,278,139,0,2520,2523,3,282,141,0,2521,2523,3,254,127,0,2522,2519,1,
0,0,0,2522,2520,1,0,0,0,2522,2521,1,0,0,0,2523,2525,1,0,0,0,2524,2526,3,
304,152,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,2528,1,0,0,0,2527,2529,
5,222,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2541,1,0,0,0,2530,2532,
5,194,0,0,2531,2533,5,222,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,2538,
1,0,0,0,2534,2536,3,262,131,0,2535,2537,5,222,0,0,2536,2535,1,0,0,0,2536,
2537,1,0,0,0,2537,2539,1,0,0,0,2538,2534,1,0,0,0,2538,2539,1,0,0,0,2539,
2540,1,0,0,0,2540,2542,5,205,0,0,2541,2530,1,0,0,0,2542,2543,1,0,0,0,2543,
2541,1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,0,2545,2547,3,266,133,0,2546,
2545,1,0,0,0,2546,2547,1,0,0,0,2547,253,1,0,0,0,2548,2550,3,278,139,0,2549,
2551,3,304,152,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2553,1,0,0,0,2552,
2554,5,222,0,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2555,1,0,0,0,2555,
2557,5,194,0,0,2556,2558,5,222,0,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,
2563,1,0,0,0,2559,2561,3,262,131,0,2560,2562,5,222,0,0,2561,2560,1,0,0,0,
2561,2562,1,0,0,0,2562,2564,1,0,0,0,2563,2559,1,0,0,0,2563,2564,1,0,0,0,
2564,2565,1,0,0,0,2565,2566,5,205,0,0,2566,255,1,0,0,0,2567,2570,3,250,125,
0,2568,2570,3,252,126,0,2569,2567,1,0,0,0,2569,2568,1,0,0,0,2569,2570,1,
0,0,0,2570,2572,1,0,0,0,2571,2573,3,258,129,0,2572,2571,1,0,0,0,2573,2574,
1,0,0,0,2574,2572,1,0,0,0,2574,2575,1,0,0,0,2575,2577,1,0,0,0,2576,2578,
3,266,133,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,257,1,0,0,0,2579,2581,
5,222,0,0,2580,2579,1,0,0,0,2580,2581,1,0,0,0,2581,2582,1,0,0,0,2582,2585,
5,186,0,0,2583,2586,3,250,125,0,2584,2586,3,252,126,0,2585,2583,1,0,0,0,
2585,2584,1,0,0,0,2586,259,1,0,0,0,2587,2588,3,266,133,0,2588,261,1,0,0,
0,2589,2591,3,264,132,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,
0,0,0,2592,2594,5,222,0,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2595,
1,0,0,0,2595,2597,7,9,0,0,2596,2598,5,222,0,0,2597,2596,1,0,0,0,2597,2598,
1,0,0,0,2598,2600,1,0,0,0,2599,2590,1,0,0,0,2600,2603,1,0,0,0,2601,2599,
1,0,0,0,2601,2602,1,0,0,0,2602,2604,1,0,0,0,2603,2601,1,0,0,0,2604,2617,
3,264,132,0,2605,2607,5,222,0,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,
2608,1,0,0,0,2608,2610,7,9,0,0,2609,2611,5,222,0,0,2610,2609,1,0,0,0,2610,
2611,1,0,0,0,2611,2613,1,0,0,0,2612,2614,3,264,132,0,2613,2612,1,0,0,0,2613,
2614,1,0,0,0,2614,2616,1,0,0,0,2615,2606,1,0,0,0,2616,2619,1,0,0,0,2617,
2615,1,0,0,0,2617,2618,1,0,0,0,2618,263,1,0,0,0,2619,2617,1,0,0,0,2620,2621,
7,14,0,0,2621,2623,5,222,0,0,2622,2620,1,0,0,0,2622,2623,1,0,0,0,2623,2624,
1,0,0,0,2624,2625,3,220,110,0,2625,265,1,0,0,0,2626,2627,5,188,0,0,2627,
2629,3,278,139,0,2628,2630,3,304,152,0,2629,2628,1,0,0,0,2629,2630,1,0,0,
0,2630,267,1,0,0,0,2631,2649,5,194,0,0,2632,2634,5,222,0,0,2633,2632,1,0,
0,0,2633,2634,1,0,0,0,2634,2635,1,0,0,0,2635,2646,3,270,135,0,2636,2638,
5,222,0,0,2637,2636,1,0,0,0,2637,2638,1,0,0,0,2638,2639,1,0,0,0,2639,2641,
5,182,0,0,2640,2642,5,222,0,0,2641,2640,1,0,0,0,2641,2642,1,0,0,0,2642,2643,
1,0,0,0,2643,2645,3,270,135,0,2644,2637,1,0,0,0,2645,2648,1,0,0,0,2646,2644,
1,0,0,0,2646,2647,1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2649,2633,
1,0,0,0,2649,2650,1,0,0,0,2650,2652,1,0,0,0,2651,2653,5,222,0,0,2652,2651,
1,0,0,0,2652,2653,1,0,0,0,2653,2654,1,0,0,0,2654,2655,5,205,0,0,2655,269,
1,0,0,0,2656,2657,5,115,0,0,2657,2659,5,222,0,0,2658,2656,1,0,0,0,2658,2659,
1,0,0,0,2659,2662,1,0,0,0,2660,2661,7,15,0,0,2661,2663,5,222,0,0,2662,2660,
1,0,0,0,2662,2663,1,0,0,0,2663,2666,1,0,0,0,2664,2665,5,122,0,0,2665,2667,
5,222,0,0,2666,2664,1,0,0,0,2666,2667,1,0,0,0,2667,2668,1,0,0,0,2668,2670,
3,278,139,0,2669,2671,3,304,152,0,2670,2669,1,0,0,0,2670,2671,1,0,0,0,2671,
2680,1,0,0,0,2672,2674,5,222,0,0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,2674,
2675,1,0,0,0,2675,2677,5,194,0,0,2676,2678,5,222,0,0,2677,2676,1,0,0,0,2677,
2678,1,0,0,0,2678,2679,1,0,0,0,2679,2681,5,205,0,0,2680,2673,1,0,0,0,2680,
2681,1,0,0,0,2681,2684,1,0,0,0,2682,2683,5,222,0,0,2683,2685,3,280,140,0,
2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2690,1,0,0,0,2686,2688,5,222,0,
0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,2691,3,272,
136,0,2690,2687,1,0,0,0,2690,2691,1,0,0,0,2691,271,1,0,0,0,2692,2694,5,187,
0,0,2693,2695,5,222,0,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,2696,1,
0,0,0,2696,2697,3,220,110,0,2697,273,1,0,0,0,2698,2709,3,276,138,0,2699,
2701,5,222,0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2702,1,0,0,0,2702,
2704,5,182,0,0,2703,2705,5,222,0,0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,
2706,1,0,0,0,2706,2708,3,276,138,0,2707,2700,1,0,0,0,2708,2711,1,0,0,0,2709,
2707,1,0,0,0,2709,2710,1,0,0,0,2710,275,1,0,0,0,2711,2709,1,0,0,0,2712,2713,
3,220,110,0,2713,2714,5,222,0,0,2714,2715,5,162,0,0,2715,2716,5,222,0,0,
2716,2718,1,0,0,0,2717,2712,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,
2719,2720,3,220,110,0,2720,277,1,0,0,0,2721,2724,5,218,0,0,2722,2724,3,308,
154,0,2723,2721,1,0,0,0,2723,2722,1,0,0,0,2724,2725,1,0,0,0,2725,2723,1,
0,0,0,2725,2726,1,0,0,0,2726,2736,1,0,0,0,2727,2730,5,207,0,0,2728,2731,
5,218,0,0,2729,2731,3,308,154,0,2730,2728,1,0,0,0,2730,2729,1,0,0,0,2731,
2732,1,0,0,0,2732,2730,1,0,0,0,2732,2733,1,0,0,0,2733,2734,1,0,0,0,2734,
2736,5,208,0,0,2735,2723,1,0,0,0,2735,2727,1,0,0,0,2736,279,1,0,0,0,2737,
2738,5,8,0,0,2738,2741,5,222,0,0,2739,2740,5,106,0,0,2740,2742,5,222,0,0,
2741,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2743,1,0,0,0,2743,2746,3,302,151,
0,2744,2745,5,222,0,0,2745,2747,3,290,145,0,2746,2744,1,0,0,0,2746,2747,
1,0,0,0,2747,281,1,0,0,0,2748,2749,7,16,0,0,2749,283,1,0,0,0,2750,2755,5,
218,0,0,2751,2754,3,308,154,0,2752,2754,5,218,0,0,2753,2751,1,0,0,0,2753,
2752,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,2756,1,0,0,0,2756,
2766,1,0,0,0,2757,2755,1,0,0,0,2758,2761,3,308,154,0,2759,2762,3,308,154,
0,2760,2762,5,218,0,0,2761,2759,1,0,0,0,2761,2760,1,0,0,0,2762,2763,1,0,
0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2766,1,0,0,0,2765,2750,1,0,
0,0,2765,2758,1,0,0,0,2766,285,1,0,0,0,2767,2768,7,13,0,0,2768,287,1,0,0,
0,2769,2774,3,278,139,0,2770,2771,5,186,0,0,2771,2773,3,278,139,0,2772,2770,
1,0,0,0,2773,2776,1,0,0,0,2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,289,1,
0,0,0,2776,2774,1,0,0,0,2777,2779,5,198,0,0,2778,2780,5,222,0,0,2779,2778,
1,0,0,0,2779,2780,1,0,0,0,2780,2783,1,0,0,0,2781,2784,3,310,155,0,2782,2784,
3,278,139,0,2783,2781,1,0,0,0,2783,2782,1,0,0,0,2784,291,1,0,0,0,2785,2794,
3,284,142,0,2786,2788,5,222,0,0,2787,2786,1,0,0,0,2787,2788,1,0,0,0,2788,
2789,1,0,0,0,2789,2791,5,196,0,0,2790,2792,5,222,0,0,2791,2790,1,0,0,0,2791,
2792,1,0,0,0,2792,2793,1,0,0,0,2793,2795,3,284,142,0,2794,2787,1,0,0,0,2794,
2795,1,0,0,0,2795,293,1,0,0,0,2796,2797,3,278,139,0,2797,2798,5,181,0,0,
2798,295,1,0,0,0,2799,2811,5,211,0,0,2800,2811,5,210,0,0,2801,2811,3,314,
157,0,2802,2811,5,214,0,0,2803,2811,3,310,155,0,2804,2811,3,312,156,0,2805,
2811,5,209,0,0,2806,2811,5,163,0,0,2807,2811,5,66,0,0,2808,2811,5,108,0,
0,2809,2811,5,109,0,0,2810,2799,1,0,0,0,2810,2800,1,0,0,0,2810,2801,1,0,
0,0,2810,2802,1,0,0,0,2810,2803,1,0,0,0,2810,2804,1,0,0,0,2810,2805,1,0,
0,0,2810,2806,1,0,0,0,2810,2807,1,0,0,0,2810,2808,1,0,0,0,2810,2809,1,0,
0,0,2811,297,1,0,0,0,2812,2813,7,17,0,0,2813,299,1,0,0,0,2814,2815,7,18,
0,0,2815,301,1,0,0,0,2816,2819,3,282,141,0,2817,2819,3,288,144,0,2818,2816,
1,0,0,0,2818,2817,1,0,0,0,2819,2828,1,0,0,0,2820,2822,5,222,0,0,2821,2820,
1,0,0,0,2821,2822,1,0,0,0,2822,2823,1,0,0,0,2823,2825,5,194,0,0,2824,2826,
5,222,0,0,2825,2824,1,0,0,0,2825,2826,1,0,0,0,2826,2827,1,0,0,0,2827,2829,
5,205,0,0,2828,2821,1,0,0,0,2828,2829,1,0,0,0,2829,303,1,0,0,0,2830,2831,
7,19,0,0,2831,305,1,0,0,0,2832,2833,7,20,0,0,2833,307,1,0,0,0,2834,2835,
7,21,0,0,2835,309,1,0,0,0,2836,2838,7,11,0,0,2837,2836,1,0,0,0,2838,2841,
1,0,0,0,2839,2837,1,0,0,0,2839,2840,1,0,0,0,2840,2842,1,0,0,0,2841,2839,
1,0,0,0,2842,2843,5,212,0,0,2843,311,1,0,0,0,2844,2846,7,11,0,0,2845,2844,
1,0,0,0,2846,2849,1,0,0,0,2847,2845,1,0,0,0,2847,2848,1,0,0,0,2848,2850,
1,0,0,0,2849,2847,1,0,0,0,2850,2851,5,215,0,0,2851,313,1,0,0,0,2852,2854,
7,11,0,0,2853,2852,1,0,0,0,2854,2857,1,0,0,0,2855,2853,1,0,0,0,2855,2856,
1,0,0,0,2856,2858,1,0,0,0,2857,2855,1,0,0,0,2858,2859,5,213,0,0,2859,315,
1,0,0,0,491,320,325,332,334,337,342,346,351,355,360,364,369,373,378,382,
387,391,396,400,404,409,412,417,429,435,440,446,450,454,463,467,473,477,
487,493,498,513,516,524,529,534,540,546,549,553,557,560,564,569,573,580,
588,592,596,605,608,617,621,626,631,633,639,651,655,659,663,668,675,678,
683,753,759,763,766,782,786,791,794,799,805,809,814,819,823,826,830,836,
840,847,853,856,861,871,874,877,881,887,891,896,903,907,911,915,918,924,
930,932,943,949,951,959,965,973,980,988,993,1000,1004,1007,1012,1018,1022,
1027,1037,1043,1053,1057,1067,1076,1082,1084,1089,1095,1099,1102,1106,1117,
1122,1128,1130,1136,1138,1143,1147,1153,1156,1160,1165,1171,1173,1181,1185,
1188,1191,1195,1218,1224,1228,1232,1242,1248,1250,1262,1268,1270,1276,1282,
1284,1294,1298,1303,1311,1315,1319,1327,1331,1343,1347,1354,1356,1362,1366,
1374,1378,1390,1396,1398,1408,1414,1416,1422,1428,1430,1434,1438,1442,1464,
1469,1479,1483,1488,1499,1503,1508,1522,1526,1535,1539,1542,1546,1550,1553,
1557,1561,1564,1568,1571,1575,1577,1581,1585,1589,1593,1596,1602,1606,1609,
1614,1618,1624,1627,1630,1634,1639,1645,1647,1654,1658,1664,1667,1672,1678,
1680,1687,1691,1697,1700,1705,1711,1713,1721,1725,1728,1731,1735,1743,1747,
1751,1753,1756,1761,1767,1771,1775,1780,1785,1789,1793,1798,1806,1808,1820,
1824,1832,1836,1844,1848,1852,1856,1860,1864,1872,1876,1888,1893,1897,1905,
1908,1913,1919,1921,1927,1929,1934,1938,1943,1946,1950,1954,1965,1971,1975,
1978,1984,1988,1996,2000,2009,2013,2019,2022,2027,2033,2035,2041,2045,2052,
2060,2065,2072,2076,2079,2082,2085,2089,2094,2103,2113,2117,2124,2126,2132,
2136,2140,2145,2149,2162,2166,2172,2180,2184,2188,2192,2196,2200,2205,2209,
2214,2218,2223,2227,2232,2236,2241,2245,2250,2254,2259,2263,2268,2272,2277,
2281,2286,2290,2295,2299,2302,2304,2310,2315,2321,2325,2330,2335,2338,2342,
2346,2348,2352,2354,2358,2366,2371,2377,2386,2390,2398,2404,2410,2412,2420,
2424,2427,2431,2437,2440,2444,2448,2452,2457,2461,2465,2468,2472,2476,2480,
2484,2489,2492,2497,2501,2504,2510,2514,2517,2522,2525,2528,2532,2536,2538,
2543,2546,2550,2553,2557,2561,2563,2569,2574,2577,2580,2585,2590,2593,2597,
2601,2606,2610,2613,2617,2622,2629,2633,2637,2641,2646,2649,2652,2658,2662,
2666,2670,2673,2677,2680,2684,2687,2690,2694,2700,2704,2709,2717,2723,2725,
2730,2732,2735,2741,2746,2753,2755,2761,2763,2765,2774,2779,2783,2787,2791,
2794,2810,2818,2821,2825,2828,2839,2847,2855];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class VisualBasic6Parser extends antlr4.Parser {

    static grammarFileName = "VisualBasic6Parser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'&'", "':='", "'@'", "':'", "','", 
                            "'\\'", "'/'", "'$'", "'.'", "'='", "'!'", "'>='", 
                            "'>'", "'#'", "'<='", "'{'", "'('", "'<'", "'-'", 
                            "'-='", "'*'", "'<>'", "'%'", "'+'", "'+='", 
                            "'^'", "'}'", "')'", "';'", "'['", "']'" ];
    static symbolicNames = [ null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                             "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", 
                             "BEEP", "BEGIN", "BEGINPROPERTY", "BINARY", 
                             "BOOLEAN", "BYVAL", "BYREF", "BYTE", "CALL", 
                             "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", 
                             "COLLECTION", "CONST", "DATE", "DECLARE", "DEFBOOL", 
                             "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", 
                             "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
                             "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", 
                             "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", 
                             "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                             "END_TYPE", "END_WITH", "END", "ENDPROPERTY", 
                             "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", 
                             "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
                             "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", 
                             "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
                             "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
                             "IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", 
                             "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", 
                             "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", 
                             "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
                             "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", 
                             "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL_", 
                             "OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
                             "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", 
                             "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
                             "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
                             "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
                             "PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", 
                             "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", 
                             "REDIM", "REM", "RESET", "RESUME", "RETURN", 
                             "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", 
                             "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", 
                             "SHARED", "SINGLE", "SPC", "STATIC", "STEP", 
                             "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", 
                             "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", 
                             "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", 
                             "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", 
                             "XOR", "AMPERSAND", "ASSIGN", "AT", "COLON", 
                             "COMMA", "IDIV", "DIV", "DOLLAR", "DOT", "EQ", 
                             "EXCLAMATIONMARK", "GEQ", "GT", "HASH", "LEQ", 
                             "LBRACE", "LPAREN", "LT", "MINUS", "MINUS_EQ", 
                             "MULT", "NEQ", "PERCENT", "PLUS", "PLUS_EQ", 
                             "POW", "RBRACE", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
                             "R_SQUARE_BRACKET", "STRINGLITERAL", "DATELITERAL", 
                             "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
                             "FILENUMBER", "OCTALLITERAL", "FRX_OFFSET", 
                             "GUID", "IDENTIFIER", "LINE_CONTINUATION", 
                             "NEWLINE", "COMMENT", "WS" ];
    static ruleNames = [ "startRule", "module", "moduleReferences", "moduleReference", 
                         "moduleReferenceValue", "moduleReferenceComponent", 
                         "moduleHeader", "moduleConfig", "moduleConfigElement", 
                         "moduleAttributes", "moduleOptions", "moduleOption", 
                         "moduleBody", "moduleBodyElement", "controlProperties", 
                         "cp_Properties", "cp_SingleProperty", "cp_PropertyName", 
                         "cp_PropertyValue", "cp_NestedProperty", "cp_ControlType", 
                         "cp_ControlIdentifier", "moduleBlock", "attributeStmt", 
                         "block", "blockStmt", "appActivateStmt", "beepStmt", 
                         "chDirStmt", "chDriveStmt", "closeStmt", "constStmt", 
                         "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
                         "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", 
                         "enumerationStmt_Constant", "eraseStmt", "errorStmt", 
                         "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
                         "forNextStmt", "functionStmt", "getStmt", "goSubStmt", 
                         "goToStmt", "ifThenElseStmt", "ifBlockStmt", "ifConditionStmt", 
                         "ifElseIfBlockStmt", "ifElseBlockStmt", "implementsStmt", 
                         "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
                         "loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", 
                         "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", 
                         "midStmt", "mkdirStmt", "nameStmt", "onErrorStmt", 
                         "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
                         "outputList_Expression", "printStmt", "propertyGetStmt", 
                         "propertySetStmt", "propertyLetStmt", "putStmt", 
                         "raiseEventStmt", "randomizeStmt", "redimStmt", 
                         "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
                         "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
                         "seekStmt", "selectCaseStmt", "sC_Case", "sC_Cond", 
                         "sC_CondExpr", "sendkeysStmt", "setattrStmt", "setStmt", 
                         "stopStmt", "subStmt", "timeStmt", "typeStmt", 
                         "typeStmt_Element", "typeOfStmt", "unloadStmt", 
                         "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
                         "variableSubStmt", "whileWendStmt", "widthStmt", 
                         "withStmt", "writeStmt", "explicitCallStmt", "eCS_ProcedureCall", 
                         "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
                         "iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", 
                         "implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", 
                         "iCS_S_ProcedureOrArrayCall", "iCS_S_NestedProcedureCall", 
                         "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", 
                         "argsCall", "argCall", "dictionaryCallStmt", "argList", 
                         "arg", "argDefaultValue", "subscripts", "subscript_", 
                         "ambiguousIdentifier", "asTypeClause", "baseType", 
                         "certainIdentifier", "comparisonOperator", "complexType", 
                         "fieldLength", "letterrange", "lineLabel", "literal", 
                         "publicPrivateVisibility", "publicPrivateGlobalVisibility", 
                         "type_", "typeHint", "visibility", "ambiguousKeyword", 
                         "integerLiteral", "octalLiteral", "doubleLiteral" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = VisualBasic6Parser.ruleNames;
        this.literalNames = VisualBasic6Parser.literalNames;
        this.symbolicNames = VisualBasic6Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 110:
    	    		return this.valueStmt_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    valueStmt_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 16);
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 7);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 4);
    		case 11:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, VisualBasic6Parser.RULE_startRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.module();
	        this.state = 317;
	        this.match(VisualBasic6Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, VisualBasic6Parser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 319;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 325;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 322;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 327;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 328;
	            this.moduleHeader();
	            this.state = 330; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 329;
	            		this.match(VisualBasic6Parser.NEWLINE);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 332; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	        }
	        this.state = 337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        if(la_===1) {
	            this.state = 336;
	            this.moduleReferences();

	        }
	        this.state = 342;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 339;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 344;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 346;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 345;
	            this.controlProperties();

	        }
	        this.state = 351;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 348;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 353;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	        this.state = 355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 354;
	            this.moduleConfig();

	        }
	        this.state = 360;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 357;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 362;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	        this.state = 364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 363;
	            this.moduleAttributes();

	        }
	        this.state = 369;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 366;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 371;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	        this.state = 373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 372;
	            this.moduleOptions();

	        }
	        this.state = 378;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 375;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 380;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
	        }

	        this.state = 382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 381;
	            this.moduleBody();

	        }
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.NEWLINE) {
	            this.state = 384;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 390;
	            this.match(VisualBasic6Parser.WS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleReferences() {
	    let localctx = new ModuleReferencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, VisualBasic6Parser.RULE_moduleReferences);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 393;
	        		this.moduleReference();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 396; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,17, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleReference() {
	    let localctx = new ModuleReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, VisualBasic6Parser.RULE_moduleReference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.match(VisualBasic6Parser.OBJECT);
	        this.state = 400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 399;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 402;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 403;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 406;
	        this.moduleReferenceValue();
	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.SEMICOLON) {
	            this.state = 407;
	            this.match(VisualBasic6Parser.SEMICOLON);
	            this.state = 409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 408;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 411;
	            this.moduleReferenceComponent();
	        }

	        this.state = 417;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 414;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 419;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleReferenceValue() {
	    let localctx = new ModuleReferenceValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, VisualBasic6Parser.RULE_moduleReferenceValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 420;
	        this.match(VisualBasic6Parser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleReferenceComponent() {
	    let localctx = new ModuleReferenceComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, VisualBasic6Parser.RULE_moduleReferenceComponent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(VisualBasic6Parser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleHeader() {
	    let localctx = new ModuleHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, VisualBasic6Parser.RULE_moduleHeader);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.match(VisualBasic6Parser.VERSION);
	        this.state = 425;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 426;
	        this.doubleLiteral();
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 427;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 428;
	            this.match(VisualBasic6Parser.CLASS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleConfig() {
	    let localctx = new ModuleConfigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, VisualBasic6Parser.RULE_moduleConfig);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.match(VisualBasic6Parser.BEGIN);
	        this.state = 433; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 432;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 435; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 438; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 437;
	        		this.moduleConfigElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 440; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,25, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 442;
	        this.match(VisualBasic6Parser.END);
	        this.state = 444; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 443;
	        		this.match(VisualBasic6Parser.NEWLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 446; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,26, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleConfigElement() {
	    let localctx = new ModuleConfigElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, VisualBasic6Parser.RULE_moduleConfigElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.ambiguousIdentifier();
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 449;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 452;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 453;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 456;
	        this.literal();
	        this.state = 457;
	        this.match(VisualBasic6Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleAttributes() {
	    let localctx = new ModuleAttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, VisualBasic6Parser.RULE_moduleAttributes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 459;
	        		this.attributeStmt();
	        		this.state = 461; 
	        		this._errHandler.sync(this);
	        		var _alt = 1;
	        		do {
	        			switch (_alt) {
	        			case 1:
	        				this.state = 460;
	        				this.match(VisualBasic6Parser.NEWLINE);
	        				break;
	        			default:
	        				throw new antlr4.error.NoViableAltException(this);
	        			}
	        			this.state = 463; 
	        			this._errHandler.sync(this);
	        			_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
	        		} while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 467; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,30, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleOptions() {
	    let localctx = new ModuleOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, VisualBasic6Parser.RULE_moduleOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 469;
	        		this.moduleOption();
	        		this.state = 471; 
	        		this._errHandler.sync(this);
	        		var _alt = 1;
	        		do {
	        			switch (_alt) {
	        			case 1:
	        				this.state = 470;
	        				this.match(VisualBasic6Parser.NEWLINE);
	        				break;
	        			default:
	        				throw new antlr4.error.NoViableAltException(this);
	        			}
	        			this.state = 473; 
	        			this._errHandler.sync(this);
	        			_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	        		} while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 477; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,32, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleOption() {
	    let localctx = new ModuleOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, VisualBasic6Parser.RULE_moduleOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 487;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.OPTION_BASE:
	            localctx = new OptionBaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 479;
	            this.match(VisualBasic6Parser.OPTION_BASE);
	            this.state = 480;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 481;
	            this.integerLiteral();
	            break;
	        case VisualBasic6Parser.OPTION_COMPARE:
	            localctx = new OptionCompareStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 482;
	            this.match(VisualBasic6Parser.OPTION_COMPARE);
	            this.state = 483;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 484;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.BINARY || _la===VisualBasic6Parser.TEXT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case VisualBasic6Parser.OPTION_EXPLICIT:
	            localctx = new OptionExplicitStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 485;
	            this.match(VisualBasic6Parser.OPTION_EXPLICIT);
	            break;
	        case VisualBasic6Parser.OPTION_PRIVATE_MODULE:
	            localctx = new OptionPrivateModuleStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 486;
	            this.match(VisualBasic6Parser.OPTION_PRIVATE_MODULE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBody() {
	    let localctx = new ModuleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, VisualBasic6Parser.RULE_moduleBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.moduleBodyElement();
	        this.state = 498;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 491; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 490;
	                    this.match(VisualBasic6Parser.NEWLINE);
	                    this.state = 493; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===VisualBasic6Parser.NEWLINE);
	                this.state = 495;
	                this.moduleBodyElement(); 
	            }
	            this.state = 500;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBodyElement() {
	    let localctx = new ModuleBodyElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, VisualBasic6Parser.RULE_moduleBodyElement);
	    try {
	        this.state = 513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this.moduleBlock();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 502;
	            this.moduleOption();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 503;
	            this.declareStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 504;
	            this.enumerationStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 505;
	            this.eventStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 506;
	            this.functionStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 507;
	            this.macroIfThenElseStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 508;
	            this.propertyGetStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 509;
	            this.propertySetStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 510;
	            this.propertyLetStmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 511;
	            this.subStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 512;
	            this.typeStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlProperties() {
	    let localctx = new ControlPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, VisualBasic6Parser.RULE_controlProperties);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 515;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 518;
	        this.match(VisualBasic6Parser.BEGIN);
	        this.state = 519;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 520;
	        this.cp_ControlType();
	        this.state = 521;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 522;
	        this.cp_ControlIdentifier();
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 523;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 527; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 526;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 529; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 532; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 531;
	        		this.cp_Properties();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 534; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,40, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 536;
	        this.match(VisualBasic6Parser.END);
	        this.state = 540;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 537;
	                this.match(VisualBasic6Parser.NEWLINE); 
	            }
	            this.state = 542;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_Properties() {
	    let localctx = new Cp_PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, VisualBasic6Parser.RULE_cp_Properties);
	    try {
	        this.state = 546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 543;
	            this.cp_SingleProperty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 544;
	            this.cp_NestedProperty();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 545;
	            this.controlProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_SingleProperty() {
	    let localctx = new Cp_SinglePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, VisualBasic6Parser.RULE_cp_SingleProperty);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 548;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 551;
	        this.implicitCallStmt_InStmt();
	        this.state = 553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 552;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 555;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 556;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 560;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 559;
	            this.match(VisualBasic6Parser.DOLLAR);

	        }
	        this.state = 562;
	        this.cp_PropertyValue();
	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRX_OFFSET) {
	            this.state = 563;
	            this.match(VisualBasic6Parser.FRX_OFFSET);
	        }

	        this.state = 567; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 566;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 569; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_PropertyName() {
	    let localctx = new Cp_PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, VisualBasic6Parser.RULE_cp_PropertyName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 571;
	            this.match(VisualBasic6Parser.OBJECT);
	            this.state = 572;
	            this.match(VisualBasic6Parser.DOT);

	        }
	        this.state = 575;
	        this.ambiguousIdentifier();
	        this.state = 580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.LPAREN) {
	            this.state = 576;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 577;
	            this.literal();
	            this.state = 578;
	            this.match(VisualBasic6Parser.RPAREN);
	        }

	        this.state = 592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.DOT) {
	            this.state = 582;
	            this.match(VisualBasic6Parser.DOT);
	            this.state = 583;
	            this.ambiguousIdentifier();
	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.LPAREN) {
	                this.state = 584;
	                this.match(VisualBasic6Parser.LPAREN);
	                this.state = 585;
	                this.literal();
	                this.state = 586;
	                this.match(VisualBasic6Parser.RPAREN);
	            }

	            this.state = 594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_PropertyValue() {
	    let localctx = new Cp_PropertyValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, VisualBasic6Parser.RULE_cp_PropertyValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.DOLLAR) {
	            this.state = 595;
	            this.match(VisualBasic6Parser.DOLLAR);
	        }

	        this.state = 605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.FALSE:
	        case VisualBasic6Parser.NOTHING:
	        case VisualBasic6Parser.NULL_:
	        case VisualBasic6Parser.TRUE:
	        case VisualBasic6Parser.MINUS:
	        case VisualBasic6Parser.PLUS:
	        case VisualBasic6Parser.STRINGLITERAL:
	        case VisualBasic6Parser.DATELITERAL:
	        case VisualBasic6Parser.COLORLITERAL:
	        case VisualBasic6Parser.INTEGERLITERAL:
	        case VisualBasic6Parser.DOUBLELITERAL:
	        case VisualBasic6Parser.FILENUMBER:
	        case VisualBasic6Parser.OCTALLITERAL:
	            this.state = 598;
	            this.literal();
	            break;
	        case VisualBasic6Parser.LBRACE:
	            this.state = 599;
	            this.match(VisualBasic6Parser.LBRACE);
	            this.state = 600;
	            this.ambiguousIdentifier();
	            this.state = 601;
	            this.match(VisualBasic6Parser.RBRACE);
	            break;
	        case VisualBasic6Parser.POW:
	            this.state = 603;
	            this.match(VisualBasic6Parser.POW);
	            this.state = 604;
	            this.ambiguousIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_NestedProperty() {
	    let localctx = new Cp_NestedPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, VisualBasic6Parser.RULE_cp_NestedProperty);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 607;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 610;
	        this.match(VisualBasic6Parser.BEGINPROPERTY);
	        this.state = 611;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 612;
	        this.ambiguousIdentifier();
	        this.state = 617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.LPAREN) {
	            this.state = 613;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 614;
	            this.integerLiteral();
	            this.state = 615;
	            this.match(VisualBasic6Parser.RPAREN);
	        }

	        this.state = 621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 619;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 620;
	            this.match(VisualBasic6Parser.GUID);
	        }

	        this.state = 624; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 623;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 626; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BEGINPROPERTY) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 629; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 628;
	                this.cp_Properties();
	                this.state = 631; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BEGINPROPERTY) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0));
	        }

	        this.state = 635;
	        this.match(VisualBasic6Parser.ENDPROPERTY);
	        this.state = 637; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 636;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 639; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_ControlType() {
	    let localctx = new Cp_ControlTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, VisualBasic6Parser.RULE_cp_ControlType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.complexType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cp_ControlIdentifier() {
	    let localctx = new Cp_ControlIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, VisualBasic6Parser.RULE_cp_ControlIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.ambiguousIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBlock() {
	    let localctx = new ModuleBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, VisualBasic6Parser.RULE_moduleBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeStmt() {
	    let localctx = new AttributeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, VisualBasic6Parser.RULE_attributeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(VisualBasic6Parser.ATTRIBUTE);
	        this.state = 648;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 649;
	        this.implicitCallStmt_InStmt();
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 650;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 653;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 654;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 657;
	        this.literal();
	        this.state = 668;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 659;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 658;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 661;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 663;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 662;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 665;
	                this.literal(); 
	            }
	            this.state = 670;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, VisualBasic6Parser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this.blockStmt();
	        this.state = 683;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 673; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 672;
	                    this.match(VisualBasic6Parser.NEWLINE);
	                    this.state = 675; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===VisualBasic6Parser.NEWLINE);
	                this.state = 678;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	                if(la_===1) {
	                    this.state = 677;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 680;
	                this.blockStmt(); 
	            }
	            this.state = 685;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStmt() {
	    let localctx = new BlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, VisualBasic6Parser.RULE_blockStmt);
	    try {
	        this.state = 753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.appActivateStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.attributeStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 688;
	            this.beepStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 689;
	            this.chDirStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 690;
	            this.chDriveStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 691;
	            this.closeStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 692;
	            this.constStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 693;
	            this.dateStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 694;
	            this.deleteSettingStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 695;
	            this.deftypeStmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 696;
	            this.doLoopStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 697;
	            this.endStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 698;
	            this.eraseStmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 699;
	            this.errorStmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 700;
	            this.exitStmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 701;
	            this.explicitCallStmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 702;
	            this.filecopyStmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 703;
	            this.forEachStmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 704;
	            this.forNextStmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 705;
	            this.getStmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 706;
	            this.goSubStmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 707;
	            this.goToStmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 708;
	            this.ifThenElseStmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 709;
	            this.implementsStmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 710;
	            this.inputStmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 711;
	            this.killStmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 712;
	            this.letStmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 713;
	            this.lineInputStmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 714;
	            this.lineLabel();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 715;
	            this.loadStmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 716;
	            this.lockStmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 717;
	            this.lsetStmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 718;
	            this.macroIfThenElseStmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 719;
	            this.midStmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 720;
	            this.mkdirStmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 721;
	            this.nameStmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 722;
	            this.onErrorStmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 723;
	            this.onGoToStmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 724;
	            this.onGoSubStmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 725;
	            this.openStmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 726;
	            this.printStmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 727;
	            this.putStmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 728;
	            this.raiseEventStmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 729;
	            this.randomizeStmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 730;
	            this.redimStmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 731;
	            this.resetStmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 732;
	            this.resumeStmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 733;
	            this.returnStmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 734;
	            this.rmdirStmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 735;
	            this.rsetStmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 736;
	            this.savepictureStmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 737;
	            this.saveSettingStmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 738;
	            this.seekStmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 739;
	            this.selectCaseStmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 740;
	            this.sendkeysStmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 741;
	            this.setattrStmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 742;
	            this.setStmt();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 743;
	            this.stopStmt();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 744;
	            this.timeStmt();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 745;
	            this.unloadStmt();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 746;
	            this.unlockStmt();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 747;
	            this.variableStmt();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 748;
	            this.whileWendStmt();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 749;
	            this.widthStmt();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 750;
	            this.withStmt();
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 751;
	            this.writeStmt();
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 752;
	            this.implicitCallStmt_InBlock();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	appActivateStmt() {
	    let localctx = new AppActivateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, VisualBasic6Parser.RULE_appActivateStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.match(VisualBasic6Parser.APPACTIVATE);
	        this.state = 756;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 757;
	        this.valueStmt(0);
	        this.state = 766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 758;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 761;
	            this.match(VisualBasic6Parser.COMMA);
	            this.state = 763;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	            if(la_===1) {
	                this.state = 762;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 765;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beepStmt() {
	    let localctx = new BeepStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, VisualBasic6Parser.RULE_beepStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.match(VisualBasic6Parser.BEEP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chDirStmt() {
	    let localctx = new ChDirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, VisualBasic6Parser.RULE_chDirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this.match(VisualBasic6Parser.CHDIR);
	        this.state = 771;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 772;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chDriveStmt() {
	    let localctx = new ChDriveStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, VisualBasic6Parser.RULE_chDriveStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(VisualBasic6Parser.CHDRIVE);
	        this.state = 775;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 776;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeStmt() {
	    let localctx = new CloseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, VisualBasic6Parser.RULE_closeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(VisualBasic6Parser.CLOSE);
	        this.state = 794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 779;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 780;
	            this.valueStmt(0);
	            this.state = 791;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 782;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 781;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 784;
	                    this.match(VisualBasic6Parser.COMMA);
	                    this.state = 786;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	                    if(la_===1) {
	                        this.state = 785;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 788;
	                    this.valueStmt(0); 
	                }
	                this.state = 793;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constStmt() {
	    let localctx = new ConstStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, VisualBasic6Parser.RULE_constStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 796;
	            this.publicPrivateGlobalVisibility();
	            this.state = 797;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 801;
	        this.match(VisualBasic6Parser.CONST);
	        this.state = 802;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 803;
	        this.constSubStmt();
	        this.state = 814;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 805;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 804;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 807;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 809;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 808;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 811;
	                this.constSubStmt(); 
	            }
	            this.state = 816;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constSubStmt() {
	    let localctx = new ConstSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, VisualBasic6Parser.RULE_constSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.ambiguousIdentifier();
	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 818;
	            this.typeHint();
	        }

	        this.state = 823;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 821;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 822;
	            this.asTypeClause();

	        }
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 825;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 828;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 829;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 832;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateStmt() {
	    let localctx = new DateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, VisualBasic6Parser.RULE_dateStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.match(VisualBasic6Parser.DATE);
	        this.state = 836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 835;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 838;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        if(la_===1) {
	            this.state = 839;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 842;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareStmt() {
	    let localctx = new DeclareStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, VisualBasic6Parser.RULE_declareStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 844;
	            this.visibility();
	            this.state = 845;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 849;
	        this.match(VisualBasic6Parser.DECLARE);
	        this.state = 850;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 856;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.FUNCTION:
	            this.state = 851;
	            this.match(VisualBasic6Parser.FUNCTION);
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	                this.state = 852;
	                this.typeHint();
	            }

	            break;
	        case VisualBasic6Parser.SUB:
	            this.state = 855;
	            this.match(VisualBasic6Parser.SUB);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 858;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 859;
	        this.ambiguousIdentifier();
	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 860;
	            this.typeHint();
	        }

	        this.state = 863;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 864;
	        this.match(VisualBasic6Parser.LIB);
	        this.state = 865;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 866;
	        this.match(VisualBasic6Parser.STRINGLITERAL);
	        this.state = 871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        if(la_===1) {
	            this.state = 867;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 868;
	            this.match(VisualBasic6Parser.ALIAS);
	            this.state = 869;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 870;
	            this.match(VisualBasic6Parser.STRINGLITERAL);

	        }
	        this.state = 877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        if(la_===1) {
	            this.state = 874;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 873;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 876;
	            this.argList();

	        }
	        this.state = 881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        if(la_===1) {
	            this.state = 879;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 880;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deftypeStmt() {
	    let localctx = new DeftypeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, VisualBasic6Parser.RULE_deftypeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        _la = this._input.LA(1);
	        if(!(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (VisualBasic6Parser.DEFBOOL - 27)) | (1 << (VisualBasic6Parser.DEFBYTE - 27)) | (1 << (VisualBasic6Parser.DEFDATE - 27)) | (1 << (VisualBasic6Parser.DEFDBL - 27)) | (1 << (VisualBasic6Parser.DEFDEC - 27)) | (1 << (VisualBasic6Parser.DEFCUR - 27)) | (1 << (VisualBasic6Parser.DEFINT - 27)) | (1 << (VisualBasic6Parser.DEFLNG - 27)) | (1 << (VisualBasic6Parser.DEFOBJ - 27)) | (1 << (VisualBasic6Parser.DEFSNG - 27)) | (1 << (VisualBasic6Parser.DEFSTR - 27)) | (1 << (VisualBasic6Parser.DEFVAR - 27)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 884;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 885;
	        this.letterrange();
	        this.state = 896;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 887;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 886;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 889;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 891;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 890;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 893;
	                this.letterrange(); 
	            }
	            this.state = 898;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteSettingStmt() {
	    let localctx = new DeleteSettingStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, VisualBasic6Parser.RULE_deleteSettingStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this.match(VisualBasic6Parser.DELETESETTING);
	        this.state = 900;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 901;
	        this.valueStmt(0);
	        this.state = 903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 902;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 905;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        if(la_===1) {
	            this.state = 906;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 909;
	        this.valueStmt(0);
	        this.state = 918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 911;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 910;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 913;
	            this.match(VisualBasic6Parser.COMMA);
	            this.state = 915;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	            if(la_===1) {
	                this.state = 914;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 917;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doLoopStmt() {
	    let localctx = new DoLoopStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, VisualBasic6Parser.RULE_doLoopStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 920;
	            this.match(VisualBasic6Parser.DO);
	            this.state = 922; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 921;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 924; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	            this.state = 932;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 926;
	                this.block();
	                this.state = 928; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 927;
	                    this.match(VisualBasic6Parser.NEWLINE);
	                    this.state = 930; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===VisualBasic6Parser.NEWLINE);

	            }
	            this.state = 934;
	            this.match(VisualBasic6Parser.LOOP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 935;
	            this.match(VisualBasic6Parser.DO);
	            this.state = 936;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 937;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.UNTIL || _la===VisualBasic6Parser.WHILE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 938;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 939;
	            this.valueStmt(0);
	            this.state = 941; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 940;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 943; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	            this.state = 951;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            if(la_===1) {
	                this.state = 945;
	                this.block();
	                this.state = 947; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 946;
	                    this.match(VisualBasic6Parser.NEWLINE);
	                    this.state = 949; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===VisualBasic6Parser.NEWLINE);

	            }
	            this.state = 953;
	            this.match(VisualBasic6Parser.LOOP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 955;
	            this.match(VisualBasic6Parser.DO);
	            this.state = 957; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 956;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 959; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	            this.state = 961;
	            this.block();
	            this.state = 963; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 962;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 965; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	            this.state = 967;
	            this.match(VisualBasic6Parser.LOOP);
	            this.state = 968;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 969;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.UNTIL || _la===VisualBasic6Parser.WHILE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 970;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 971;
	            this.valueStmt(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endStmt() {
	    let localctx = new EndStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, VisualBasic6Parser.RULE_endStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.match(VisualBasic6Parser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationStmt() {
	    let localctx = new EnumerationStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, VisualBasic6Parser.RULE_enumerationStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 977;
	            this.publicPrivateVisibility();
	            this.state = 978;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 982;
	        this.match(VisualBasic6Parser.ENUM);
	        this.state = 983;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 984;
	        this.ambiguousIdentifier();
	        this.state = 986; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 985;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 988; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)))) !== 0) || _la===VisualBasic6Parser.L_SQUARE_BRACKET || _la===VisualBasic6Parser.IDENTIFIER) {
	            this.state = 990;
	            this.enumerationStmt_Constant();
	            this.state = 995;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 996;
	        this.match(VisualBasic6Parser.END_ENUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationStmt_Constant() {
	    let localctx = new EnumerationStmt_ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, VisualBasic6Parser.RULE_enumerationStmt_Constant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        this.ambiguousIdentifier();
	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.EQ || _la===VisualBasic6Parser.WS) {
	            this.state = 1000;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 999;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1002;
	            this.match(VisualBasic6Parser.EQ);
	            this.state = 1004;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	            if(la_===1) {
	                this.state = 1003;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1006;
	            this.valueStmt(0);
	        }

	        this.state = 1010; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1009;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1012; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eraseStmt() {
	    let localctx = new EraseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, VisualBasic6Parser.RULE_eraseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this.match(VisualBasic6Parser.ERASE);
	        this.state = 1015;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1016;
	        this.valueStmt(0);
	        this.state = 1027;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1018;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1017;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1020;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 1022;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	                if(la_===1) {
	                    this.state = 1021;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 1024;
	                this.valueStmt(0); 
	            }
	            this.state = 1029;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorStmt() {
	    let localctx = new ErrorStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, VisualBasic6Parser.RULE_errorStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1030;
	        this.match(VisualBasic6Parser.ERROR);
	        this.state = 1031;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1032;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventStmt() {
	    let localctx = new EventStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, VisualBasic6Parser.RULE_eventStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 1034;
	            this.visibility();
	            this.state = 1035;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1039;
	        this.match(VisualBasic6Parser.EVENT);
	        this.state = 1040;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1041;
	        this.ambiguousIdentifier();
	        this.state = 1043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1042;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1045;
	        this.argList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStmt() {
	    let localctx = new ExitStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, VisualBasic6Parser.RULE_exitStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047;
	        _la = this._input.LA(1);
	        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (VisualBasic6Parser.EXIT_DO - 61)) | (1 << (VisualBasic6Parser.EXIT_FOR - 61)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 61)) | (1 << (VisualBasic6Parser.EXIT_PROPERTY - 61)) | (1 << (VisualBasic6Parser.EXIT_SUB - 61)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filecopyStmt() {
	    let localctx = new FilecopyStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, VisualBasic6Parser.RULE_filecopyStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.match(VisualBasic6Parser.FILECOPY);
	        this.state = 1050;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1051;
	        this.valueStmt(0);
	        this.state = 1053;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1052;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1055;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1056;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1059;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forEachStmt() {
	    let localctx = new ForEachStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, VisualBasic6Parser.RULE_forEachStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this.match(VisualBasic6Parser.FOR);
	        this.state = 1062;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1063;
	        this.match(VisualBasic6Parser.EACH);
	        this.state = 1064;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1065;
	        this.ambiguousIdentifier();
	        this.state = 1067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 1066;
	            this.typeHint();
	        }

	        this.state = 1069;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1070;
	        this.match(VisualBasic6Parser.IN);
	        this.state = 1071;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1072;
	        this.valueStmt(0);
	        this.state = 1074; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1073;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1076; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        if(la_===1) {
	            this.state = 1078;
	            this.block();
	            this.state = 1080; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1079;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1082; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	        }
	        this.state = 1086;
	        this.match(VisualBasic6Parser.NEXT);
	        this.state = 1089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        if(la_===1) {
	            this.state = 1087;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1088;
	            this.ambiguousIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forNextStmt() {
	    let localctx = new ForNextStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, VisualBasic6Parser.RULE_forNextStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1091;
	        this.match(VisualBasic6Parser.FOR);
	        this.state = 1092;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1093;
	        this.iCS_S_VariableOrProcedureCall();
	        this.state = 1095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 1094;
	            this.typeHint();
	        }

	        this.state = 1099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 1097;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1098;
	            this.asTypeClause();

	        }
	        this.state = 1102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1101;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1104;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 1106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        if(la_===1) {
	            this.state = 1105;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1108;
	        this.valueStmt(0);
	        this.state = 1109;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1110;
	        this.match(VisualBasic6Parser.TO);
	        this.state = 1111;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1112;
	        this.valueStmt(0);
	        this.state = 1117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1113;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1114;
	            this.match(VisualBasic6Parser.STEP);
	            this.state = 1115;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1116;
	            this.valueStmt(0);
	        }

	        this.state = 1120; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1119;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1122; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1130;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        if(la_===1) {
	            this.state = 1124;
	            this.block();
	            this.state = 1126; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1125;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1128; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	        }
	        this.state = 1132;
	        this.match(VisualBasic6Parser.NEXT);
	        this.state = 1138;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1133;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1134;
	            this.ambiguousIdentifier();
	            this.state = 1136;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	            if(la_===1) {
	                this.state = 1135;
	                this.typeHint();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionStmt() {
	    let localctx = new FunctionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, VisualBasic6Parser.RULE_functionStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 1140;
	            this.visibility();
	            this.state = 1141;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.STATIC) {
	            this.state = 1145;
	            this.match(VisualBasic6Parser.STATIC);
	            this.state = 1146;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1149;
	        this.match(VisualBasic6Parser.FUNCTION);
	        this.state = 1150;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1151;
	        this.ambiguousIdentifier();
	        this.state = 1156;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 1153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1152;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1155;
	            this.argList();

	        }
	        this.state = 1160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1158;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1159;
	            this.asTypeClause();
	        }

	        this.state = 1163; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1162;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1165; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1167;
	            this.block();
	            this.state = 1169; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1168;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1171; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 1175;
	        this.match(VisualBasic6Parser.END_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getStmt() {
	    let localctx = new GetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, VisualBasic6Parser.RULE_getStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(VisualBasic6Parser.GET);
	        this.state = 1178;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1179;
	        this.valueStmt(0);
	        this.state = 1181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1180;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1183;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        if(la_===1) {
	            this.state = 1184;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        if(la_===1) {
	            this.state = 1187;
	            this.valueStmt(0);

	        }
	        this.state = 1191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1190;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1193;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 1194;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1197;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goSubStmt() {
	    let localctx = new GoSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, VisualBasic6Parser.RULE_goSubStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1199;
	        this.match(VisualBasic6Parser.GOSUB);
	        this.state = 1200;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1201;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goToStmt() {
	    let localctx = new GoToStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, VisualBasic6Parser.RULE_goToStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1203;
	        this.match(VisualBasic6Parser.GOTO);
	        this.state = 1204;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1205;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStmt() {
	    let localctx = new IfThenElseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, VisualBasic6Parser.RULE_ifThenElseStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InlineIfThenElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1207;
	            this.match(VisualBasic6Parser.IF);
	            this.state = 1208;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1209;
	            this.ifConditionStmt();
	            this.state = 1210;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1211;
	            this.match(VisualBasic6Parser.THEN);
	            this.state = 1212;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1213;
	            this.blockStmt();
	            this.state = 1218;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	            if(la_===1) {
	                this.state = 1214;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 1215;
	                this.match(VisualBasic6Parser.ELSE);
	                this.state = 1216;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 1217;
	                this.blockStmt();

	            }
	            break;

	        case 2:
	            localctx = new BlockIfThenElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1220;
	            this.ifBlockStmt();
	            this.state = 1224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===VisualBasic6Parser.ELSEIF) {
	                this.state = 1221;
	                this.ifElseIfBlockStmt();
	                this.state = 1226;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.ELSE) {
	                this.state = 1227;
	                this.ifElseBlockStmt();
	            }

	            this.state = 1230;
	            this.match(VisualBasic6Parser.END_IF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifBlockStmt() {
	    let localctx = new IfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, VisualBasic6Parser.RULE_ifBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1234;
	        this.match(VisualBasic6Parser.IF);
	        this.state = 1235;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1236;
	        this.ifConditionStmt();
	        this.state = 1237;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1238;
	        this.match(VisualBasic6Parser.THEN);
	        this.state = 1240; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1239;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1242; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 1244;
	            this.block();
	            this.state = 1246; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1245;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1248; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifConditionStmt() {
	    let localctx = new IfConditionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, VisualBasic6Parser.RULE_ifConditionStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElseIfBlockStmt() {
	    let localctx = new IfElseIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, VisualBasic6Parser.RULE_ifElseIfBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.match(VisualBasic6Parser.ELSEIF);
	        this.state = 1255;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1256;
	        this.ifConditionStmt();
	        this.state = 1257;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1258;
	        this.match(VisualBasic6Parser.THEN);
	        this.state = 1260; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1259;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1262; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 1264;
	            this.block();
	            this.state = 1266; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1265;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1268; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElseBlockStmt() {
	    let localctx = new IfElseBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, VisualBasic6Parser.RULE_ifElseBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1272;
	        this.match(VisualBasic6Parser.ELSE);
	        this.state = 1274; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1273;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1276; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1278;
	            this.block();
	            this.state = 1280; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1279;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1282; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implementsStmt() {
	    let localctx = new ImplementsStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, VisualBasic6Parser.RULE_implementsStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.match(VisualBasic6Parser.IMPLEMENTS);
	        this.state = 1287;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1288;
	        this.ambiguousIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputStmt() {
	    let localctx = new InputStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, VisualBasic6Parser.RULE_inputStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1290;
	        this.match(VisualBasic6Parser.INPUT);
	        this.state = 1291;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1292;
	        this.valueStmt(0);
	        this.state = 1301; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1294;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===VisualBasic6Parser.WS) {
	        		    this.state = 1293;
	        		    this.match(VisualBasic6Parser.WS);
	        		}

	        		this.state = 1296;
	        		this.match(VisualBasic6Parser.COMMA);
	        		this.state = 1298;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        		if(la_===1) {
	        		    this.state = 1297;
	        		    this.match(VisualBasic6Parser.WS);

	        		}
	        		this.state = 1300;
	        		this.valueStmt(0);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1303; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,170, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStmt() {
	    let localctx = new KillStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, VisualBasic6Parser.RULE_killStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this.match(VisualBasic6Parser.KILL);
	        this.state = 1306;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1307;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStmt() {
	    let localctx = new LetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, VisualBasic6Parser.RULE_letStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        if(la_===1) {
	            this.state = 1309;
	            this.match(VisualBasic6Parser.LET);
	            this.state = 1310;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1313;
	        this.implicitCallStmt_InStmt();
	        this.state = 1315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1314;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1317;
	        _la = this._input.LA(1);
	        if(!(((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (VisualBasic6Parser.EQ - 187)) | (1 << (VisualBasic6Parser.MINUS_EQ - 187)) | (1 << (VisualBasic6Parser.PLUS_EQ - 187)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        if(la_===1) {
	            this.state = 1318;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1321;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineInputStmt() {
	    let localctx = new LineInputStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, VisualBasic6Parser.RULE_lineInputStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1323;
	        this.match(VisualBasic6Parser.LINE_INPUT);
	        this.state = 1324;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1325;
	        this.valueStmt(0);
	        this.state = 1327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1326;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1329;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        if(la_===1) {
	            this.state = 1330;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1333;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStmt() {
	    let localctx = new LoadStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, VisualBasic6Parser.RULE_loadStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1335;
	        this.match(VisualBasic6Parser.LOAD);
	        this.state = 1336;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1337;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStmt() {
	    let localctx = new LockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, VisualBasic6Parser.RULE_lockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1339;
	        this.match(VisualBasic6Parser.LOCK);
	        this.state = 1340;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1341;
	        this.valueStmt(0);
	        this.state = 1356;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 1343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1342;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1345;
	            this.match(VisualBasic6Parser.COMMA);
	            this.state = 1347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	            if(la_===1) {
	                this.state = 1346;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1349;
	            this.valueStmt(0);
	            this.state = 1354;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	            if(la_===1) {
	                this.state = 1350;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 1351;
	                this.match(VisualBasic6Parser.TO);
	                this.state = 1352;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 1353;
	                this.valueStmt(0);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lsetStmt() {
	    let localctx = new LsetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, VisualBasic6Parser.RULE_lsetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1358;
	        this.match(VisualBasic6Parser.LSET);
	        this.state = 1359;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1360;
	        this.implicitCallStmt_InStmt();
	        this.state = 1362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1361;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1364;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 1365;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1368;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroIfThenElseStmt() {
	    let localctx = new MacroIfThenElseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, VisualBasic6Parser.RULE_macroIfThenElseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this.macroIfBlockStmt();
	        this.state = 1374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.MACRO_ELSEIF) {
	            this.state = 1371;
	            this.macroElseIfBlockStmt();
	            this.state = 1376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.MACRO_ELSE) {
	            this.state = 1377;
	            this.macroElseBlockStmt();
	        }

	        this.state = 1380;
	        this.match(VisualBasic6Parser.MACRO_END_IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroIfBlockStmt() {
	    let localctx = new MacroIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, VisualBasic6Parser.RULE_macroIfBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1382;
	        this.match(VisualBasic6Parser.MACRO_IF);
	        this.state = 1383;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1384;
	        this.ifConditionStmt();
	        this.state = 1385;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1386;
	        this.match(VisualBasic6Parser.THEN);
	        this.state = 1388; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1387;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1390; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OPTION_BASE - 96)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 96)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 96)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 96)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (VisualBasic6Parser.THEN - 160)) | (1 << (VisualBasic6Parser.TIME - 160)) | (1 << (VisualBasic6Parser.TO - 160)) | (1 << (VisualBasic6Parser.TRUE - 160)) | (1 << (VisualBasic6Parser.TYPE - 160)) | (1 << (VisualBasic6Parser.TYPEOF - 160)) | (1 << (VisualBasic6Parser.UNLOAD - 160)) | (1 << (VisualBasic6Parser.UNLOCK - 160)) | (1 << (VisualBasic6Parser.UNTIL - 160)) | (1 << (VisualBasic6Parser.VARIANT - 160)) | (1 << (VisualBasic6Parser.VERSION - 160)) | (1 << (VisualBasic6Parser.WEND - 160)) | (1 << (VisualBasic6Parser.WHILE - 160)) | (1 << (VisualBasic6Parser.WIDTH - 160)) | (1 << (VisualBasic6Parser.WITH - 160)) | (1 << (VisualBasic6Parser.WITHEVENTS - 160)) | (1 << (VisualBasic6Parser.WRITE - 160)) | (1 << (VisualBasic6Parser.XOR - 160)) | (1 << (VisualBasic6Parser.DOT - 160)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 160)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1392;
	            this.moduleBody();
	            this.state = 1394; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1393;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1396; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroElseIfBlockStmt() {
	    let localctx = new MacroElseIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, VisualBasic6Parser.RULE_macroElseIfBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this.match(VisualBasic6Parser.MACRO_ELSEIF);
	        this.state = 1401;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1402;
	        this.ifConditionStmt();
	        this.state = 1403;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1404;
	        this.match(VisualBasic6Parser.THEN);
	        this.state = 1406; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1405;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1408; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OPTION_BASE - 96)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 96)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 96)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 96)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (VisualBasic6Parser.THEN - 160)) | (1 << (VisualBasic6Parser.TIME - 160)) | (1 << (VisualBasic6Parser.TO - 160)) | (1 << (VisualBasic6Parser.TRUE - 160)) | (1 << (VisualBasic6Parser.TYPE - 160)) | (1 << (VisualBasic6Parser.TYPEOF - 160)) | (1 << (VisualBasic6Parser.UNLOAD - 160)) | (1 << (VisualBasic6Parser.UNLOCK - 160)) | (1 << (VisualBasic6Parser.UNTIL - 160)) | (1 << (VisualBasic6Parser.VARIANT - 160)) | (1 << (VisualBasic6Parser.VERSION - 160)) | (1 << (VisualBasic6Parser.WEND - 160)) | (1 << (VisualBasic6Parser.WHILE - 160)) | (1 << (VisualBasic6Parser.WIDTH - 160)) | (1 << (VisualBasic6Parser.WITH - 160)) | (1 << (VisualBasic6Parser.WITHEVENTS - 160)) | (1 << (VisualBasic6Parser.WRITE - 160)) | (1 << (VisualBasic6Parser.XOR - 160)) | (1 << (VisualBasic6Parser.DOT - 160)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 160)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1410;
	            this.moduleBody();
	            this.state = 1412; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1411;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1414; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroElseBlockStmt() {
	    let localctx = new MacroElseBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, VisualBasic6Parser.RULE_macroElseBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1418;
	        this.match(VisualBasic6Parser.MACRO_ELSE);
	        this.state = 1420; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1419;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1422; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OPTION_BASE - 96)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 96)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 96)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 96)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (VisualBasic6Parser.THEN - 160)) | (1 << (VisualBasic6Parser.TIME - 160)) | (1 << (VisualBasic6Parser.TO - 160)) | (1 << (VisualBasic6Parser.TRUE - 160)) | (1 << (VisualBasic6Parser.TYPE - 160)) | (1 << (VisualBasic6Parser.TYPEOF - 160)) | (1 << (VisualBasic6Parser.UNLOAD - 160)) | (1 << (VisualBasic6Parser.UNLOCK - 160)) | (1 << (VisualBasic6Parser.UNTIL - 160)) | (1 << (VisualBasic6Parser.VARIANT - 160)) | (1 << (VisualBasic6Parser.VERSION - 160)) | (1 << (VisualBasic6Parser.WEND - 160)) | (1 << (VisualBasic6Parser.WHILE - 160)) | (1 << (VisualBasic6Parser.WIDTH - 160)) | (1 << (VisualBasic6Parser.WITH - 160)) | (1 << (VisualBasic6Parser.WITHEVENTS - 160)) | (1 << (VisualBasic6Parser.WRITE - 160)) | (1 << (VisualBasic6Parser.XOR - 160)) | (1 << (VisualBasic6Parser.DOT - 160)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 160)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1424;
	            this.moduleBody();
	            this.state = 1426; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1425;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1428; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midStmt() {
	    let localctx = new MidStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, VisualBasic6Parser.RULE_midStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.match(VisualBasic6Parser.MID);
	        this.state = 1434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1433;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1436;
	        this.match(VisualBasic6Parser.LPAREN);
	        this.state = 1438;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 1437;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1440;
	        this.argsCall();
	        this.state = 1442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1441;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1444;
	        this.match(VisualBasic6Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mkdirStmt() {
	    let localctx = new MkdirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, VisualBasic6Parser.RULE_mkdirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1446;
	        this.match(VisualBasic6Parser.MKDIR);
	        this.state = 1447;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1448;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameStmt() {
	    let localctx = new NameStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, VisualBasic6Parser.RULE_nameStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.match(VisualBasic6Parser.NAME);
	        this.state = 1451;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1452;
	        this.valueStmt(0);
	        this.state = 1453;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1454;
	        this.match(VisualBasic6Parser.AS);
	        this.state = 1455;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1456;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onErrorStmt() {
	    let localctx = new OnErrorStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, VisualBasic6Parser.RULE_onErrorStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.ON_ERROR || _la===VisualBasic6Parser.ON_LOCAL_ERROR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1459;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.GOTO:
	            this.state = 1460;
	            this.match(VisualBasic6Parser.GOTO);
	            this.state = 1461;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1462;
	            this.valueStmt(0);
	            this.state = 1464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.COLON) {
	                this.state = 1463;
	                this.match(VisualBasic6Parser.COLON);
	            }

	            break;
	        case VisualBasic6Parser.RESUME:
	            this.state = 1466;
	            this.match(VisualBasic6Parser.RESUME);
	            this.state = 1467;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1468;
	            this.match(VisualBasic6Parser.NEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onGoToStmt() {
	    let localctx = new OnGoToStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, VisualBasic6Parser.RULE_onGoToStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(VisualBasic6Parser.ON);
	        this.state = 1472;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1473;
	        this.valueStmt(0);
	        this.state = 1474;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1475;
	        this.match(VisualBasic6Parser.GOTO);
	        this.state = 1476;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1477;
	        this.valueStmt(0);
	        this.state = 1488;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,200,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1479;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1478;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1481;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 1483;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	                if(la_===1) {
	                    this.state = 1482;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 1485;
	                this.valueStmt(0); 
	            }
	            this.state = 1490;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,200,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onGoSubStmt() {
	    let localctx = new OnGoSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, VisualBasic6Parser.RULE_onGoSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1491;
	        this.match(VisualBasic6Parser.ON);
	        this.state = 1492;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1493;
	        this.valueStmt(0);
	        this.state = 1494;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1495;
	        this.match(VisualBasic6Parser.GOSUB);
	        this.state = 1496;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1497;
	        this.valueStmt(0);
	        this.state = 1508;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1499;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1498;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1501;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 1503;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	                if(la_===1) {
	                    this.state = 1502;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 1505;
	                this.valueStmt(0); 
	            }
	            this.state = 1510;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openStmt() {
	    let localctx = new OpenStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, VisualBasic6Parser.RULE_openStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.match(VisualBasic6Parser.OPEN);
	        this.state = 1512;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1513;
	        this.valueStmt(0);
	        this.state = 1514;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1515;
	        this.match(VisualBasic6Parser.FOR);
	        this.state = 1516;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1517;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.APPEND || _la===VisualBasic6Parser.BINARY || _la===VisualBasic6Parser.INPUT || _la===VisualBasic6Parser.OUTPUT || _la===VisualBasic6Parser.RANDOM)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        if(la_===1) {
	            this.state = 1518;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1519;
	            this.match(VisualBasic6Parser.ACCESS);
	            this.state = 1520;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1521;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.READ || _la===VisualBasic6Parser.READ_WRITE || _la===VisualBasic6Parser.WRITE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 1524;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1525;
	            _la = this._input.LA(1);
	            if(!(((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (VisualBasic6Parser.LOCK_READ - 92)) | (1 << (VisualBasic6Parser.LOCK_WRITE - 92)) | (1 << (VisualBasic6Parser.LOCK_READ_WRITE - 92)))) !== 0) || _la===VisualBasic6Parser.SHARED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1528;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1529;
	        this.match(VisualBasic6Parser.AS);
	        this.state = 1530;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1531;
	        this.valueStmt(0);
	        this.state = 1542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        if(la_===1) {
	            this.state = 1532;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1533;
	            this.match(VisualBasic6Parser.LEN);
	            this.state = 1535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1534;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1537;
	            this.match(VisualBasic6Parser.EQ);
	            this.state = 1539;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	            if(la_===1) {
	                this.state = 1538;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1541;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputList() {
	    let localctx = new OutputListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, VisualBasic6Parser.RULE_outputList);
	    var _la = 0; // Token type
	    try {
	        this.state = 1577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1544;
	            this.outputList_Expression();
	            this.state = 1557;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1546;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 1545;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 1548;
	                    _la = this._input.LA(1);
	                    if(!(_la===VisualBasic6Parser.COMMA || _la===VisualBasic6Parser.SEMICOLON)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1550;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	                    if(la_===1) {
	                        this.state = 1549;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 1553;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	                    if(la_===1) {
	                        this.state = 1552;
	                        this.outputList_Expression();

	                    } 
	                }
	                this.state = 1559;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	            if(la_===1) {
	                this.state = 1560;
	                this.outputList_Expression();

	            }
	            this.state = 1573; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1564;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===VisualBasic6Parser.WS) {
	            		    this.state = 1563;
	            		    this.match(VisualBasic6Parser.WS);
	            		}

	            		this.state = 1566;
	            		_la = this._input.LA(1);
	            		if(!(_la===VisualBasic6Parser.COMMA || _la===VisualBasic6Parser.SEMICOLON)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		this.state = 1568;
	            		this._errHandler.sync(this);
	            		var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            		if(la_===1) {
	            		    this.state = 1567;
	            		    this.match(VisualBasic6Parser.WS);

	            		}
	            		this.state = 1571;
	            		this._errHandler.sync(this);
	            		var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            		if(la_===1) {
	            		    this.state = 1570;
	            		    this.outputList_Expression();

	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1575; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,217, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputList_Expression() {
	    let localctx = new OutputList_ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, VisualBasic6Parser.RULE_outputList_Expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1579;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.SPC || _la===VisualBasic6Parser.TAB)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1593;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	            if(la_===1) {
	                this.state = 1581;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1580;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1583;
	                this.match(VisualBasic6Parser.LPAREN);
	                this.state = 1585;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	                if(la_===1) {
	                    this.state = 1584;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 1587;
	                this.argsCall();
	                this.state = 1589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1588;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1591;
	                this.match(VisualBasic6Parser.RPAREN);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1595;
	            this.valueStmt(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printStmt() {
	    let localctx = new PrintStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, VisualBasic6Parser.RULE_printStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1598;
	        this.match(VisualBasic6Parser.PRINT);
	        this.state = 1599;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1600;
	        this.valueStmt(0);
	        this.state = 1602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1601;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1604;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        if(la_===1) {
	            this.state = 1606;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	            if(la_===1) {
	                this.state = 1605;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1608;
	            this.outputList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyGetStmt() {
	    let localctx = new PropertyGetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, VisualBasic6Parser.RULE_propertyGetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 1611;
	            this.visibility();
	            this.state = 1612;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.STATIC) {
	            this.state = 1616;
	            this.match(VisualBasic6Parser.STATIC);
	            this.state = 1617;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1620;
	        this.match(VisualBasic6Parser.PROPERTY_GET);
	        this.state = 1621;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1622;
	        this.ambiguousIdentifier();
	        this.state = 1624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 1623;
	            this.typeHint();
	        }

	        this.state = 1630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        if(la_===1) {
	            this.state = 1627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1626;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1629;
	            this.argList();

	        }
	        this.state = 1634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1632;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1633;
	            this.asTypeClause();
	        }

	        this.state = 1637; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1636;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1639; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1641;
	            this.block();
	            this.state = 1643; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1642;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1645; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 1649;
	        this.match(VisualBasic6Parser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySetStmt() {
	    let localctx = new PropertySetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, VisualBasic6Parser.RULE_propertySetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 1651;
	            this.visibility();
	            this.state = 1652;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.STATIC) {
	            this.state = 1656;
	            this.match(VisualBasic6Parser.STATIC);
	            this.state = 1657;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1660;
	        this.match(VisualBasic6Parser.PROPERTY_SET);
	        this.state = 1661;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1662;
	        this.ambiguousIdentifier();
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.LPAREN || _la===VisualBasic6Parser.WS) {
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1663;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1666;
	            this.argList();
	        }

	        this.state = 1670; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1669;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1672; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1674;
	            this.block();
	            this.state = 1676; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1675;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1678; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 1682;
	        this.match(VisualBasic6Parser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyLetStmt() {
	    let localctx = new PropertyLetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, VisualBasic6Parser.RULE_propertyLetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 1684;
	            this.visibility();
	            this.state = 1685;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.STATIC) {
	            this.state = 1689;
	            this.match(VisualBasic6Parser.STATIC);
	            this.state = 1690;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1693;
	        this.match(VisualBasic6Parser.PROPERTY_LET);
	        this.state = 1694;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1695;
	        this.ambiguousIdentifier();
	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.LPAREN || _la===VisualBasic6Parser.WS) {
	            this.state = 1697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1696;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1699;
	            this.argList();
	        }

	        this.state = 1703; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1702;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1705; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 1707;
	            this.block();
	            this.state = 1709; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1708;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1711; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 1715;
	        this.match(VisualBasic6Parser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	putStmt() {
	    let localctx = new PutStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, VisualBasic6Parser.RULE_putStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.match(VisualBasic6Parser.PUT);
	        this.state = 1718;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1719;
	        this.valueStmt(0);
	        this.state = 1721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1720;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1723;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 1724;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1728;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        if(la_===1) {
	            this.state = 1727;
	            this.valueStmt(0);

	        }
	        this.state = 1731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1730;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1733;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 1734;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1737;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raiseEventStmt() {
	    let localctx = new RaiseEventStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, VisualBasic6Parser.RULE_raiseEventStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        this.match(VisualBasic6Parser.RAISEEVENT);
	        this.state = 1740;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1741;
	        this.ambiguousIdentifier();
	        this.state = 1756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        if(la_===1) {
	            this.state = 1743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1742;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1745;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 1747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	            if(la_===1) {
	                this.state = 1746;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.COMMA - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)) | (1 << (VisualBasic6Parser.LPAREN - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (VisualBasic6Parser.MINUS - 196)) | (1 << (VisualBasic6Parser.PLUS - 196)) | (1 << (VisualBasic6Parser.SEMICOLON - 196)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 196)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 196)) | (1 << (VisualBasic6Parser.DATELITERAL - 196)) | (1 << (VisualBasic6Parser.COLORLITERAL - 196)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 196)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 196)) | (1 << (VisualBasic6Parser.FILENUMBER - 196)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 196)) | (1 << (VisualBasic6Parser.IDENTIFIER - 196)) | (1 << (VisualBasic6Parser.WS - 196)))) !== 0)) {
	                this.state = 1749;
	                this.argsCall();
	                this.state = 1751;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1750;
	                    this.match(VisualBasic6Parser.WS);
	                }

	            }

	            this.state = 1755;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	randomizeStmt() {
	    let localctx = new RandomizeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, VisualBasic6Parser.RULE_randomizeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1758;
	        this.match(VisualBasic6Parser.RANDOMIZE);
	        this.state = 1761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        if(la_===1) {
	            this.state = 1759;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1760;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redimStmt() {
	    let localctx = new RedimStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, VisualBasic6Parser.RULE_redimStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.match(VisualBasic6Parser.REDIM);
	        this.state = 1764;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1767;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        if(la_===1) {
	            this.state = 1765;
	            this.match(VisualBasic6Parser.PRESERVE);
	            this.state = 1766;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1769;
	        this.redimSubStmt();
	        this.state = 1780;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,264,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1771;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 1770;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 1773;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 1775;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	                if(la_===1) {
	                    this.state = 1774;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 1777;
	                this.redimSubStmt(); 
	            }
	            this.state = 1782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,264,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redimSubStmt() {
	    let localctx = new RedimSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, VisualBasic6Parser.RULE_redimSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1783;
	        this.implicitCallStmt_InStmt();
	        this.state = 1785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1784;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1787;
	        this.match(VisualBasic6Parser.LPAREN);
	        this.state = 1789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        if(la_===1) {
	            this.state = 1788;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1791;
	        this.subscripts();
	        this.state = 1793;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1792;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1795;
	        this.match(VisualBasic6Parser.RPAREN);
	        this.state = 1798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        if(la_===1) {
	            this.state = 1796;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1797;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStmt() {
	    let localctx = new ResetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, VisualBasic6Parser.RULE_resetStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1800;
	        this.match(VisualBasic6Parser.RESET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resumeStmt() {
	    let localctx = new ResumeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, VisualBasic6Parser.RULE_resumeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1802;
	        this.match(VisualBasic6Parser.RESUME);
	        this.state = 1808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        if(la_===1) {
	            this.state = 1803;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1806;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1804;
	                this.match(VisualBasic6Parser.NEXT);
	                break;

	            case 2:
	                this.state = 1805;
	                this.ambiguousIdentifier();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmt() {
	    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, VisualBasic6Parser.RULE_returnStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1810;
	        this.match(VisualBasic6Parser.RETURN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmdirStmt() {
	    let localctx = new RmdirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, VisualBasic6Parser.RULE_rmdirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        this.match(VisualBasic6Parser.RMDIR);
	        this.state = 1813;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1814;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rsetStmt() {
	    let localctx = new RsetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, VisualBasic6Parser.RULE_rsetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(VisualBasic6Parser.RSET);
	        this.state = 1817;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1818;
	        this.implicitCallStmt_InStmt();
	        this.state = 1820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1819;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1822;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 1824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        if(la_===1) {
	            this.state = 1823;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1826;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepictureStmt() {
	    let localctx = new SavepictureStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, VisualBasic6Parser.RULE_savepictureStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1828;
	        this.match(VisualBasic6Parser.SAVEPICTURE);
	        this.state = 1829;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1830;
	        this.valueStmt(0);
	        this.state = 1832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1831;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1834;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	        if(la_===1) {
	            this.state = 1835;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1838;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	saveSettingStmt() {
	    let localctx = new SaveSettingStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, VisualBasic6Parser.RULE_saveSettingStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1840;
	        this.match(VisualBasic6Parser.SAVESETTING);
	        this.state = 1841;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1842;
	        this.valueStmt(0);
	        this.state = 1844;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1843;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1846;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        if(la_===1) {
	            this.state = 1847;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1850;
	        this.valueStmt(0);
	        this.state = 1852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1851;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1854;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1856;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        if(la_===1) {
	            this.state = 1855;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1858;
	        this.valueStmt(0);
	        this.state = 1860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1859;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1862;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        if(la_===1) {
	            this.state = 1863;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1866;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seekStmt() {
	    let localctx = new SeekStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, VisualBasic6Parser.RULE_seekStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1868;
	        this.match(VisualBasic6Parser.SEEK);
	        this.state = 1869;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1870;
	        this.valueStmt(0);
	        this.state = 1872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1871;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1874;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1876;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        if(la_===1) {
	            this.state = 1875;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1878;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectCaseStmt() {
	    let localctx = new SelectCaseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, VisualBasic6Parser.RULE_selectCaseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1880;
	        this.match(VisualBasic6Parser.SELECT);
	        this.state = 1881;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1882;
	        this.match(VisualBasic6Parser.CASE);
	        this.state = 1883;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1884;
	        this.valueStmt(0);
	        this.state = 1886; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1885;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 1888; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 1893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.CASE) {
	            this.state = 1890;
	            this.sC_Case();
	            this.state = 1895;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1896;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1899;
	        this.match(VisualBasic6Parser.END_SELECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_Case() {
	    let localctx = new SC_CaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, VisualBasic6Parser.RULE_sC_Case);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1901;
	        this.match(VisualBasic6Parser.CASE);
	        this.state = 1902;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1903;
	        this.sC_Cond();
	        this.state = 1905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        if(la_===1) {
	            this.state = 1904;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.COLON) {
	                this.state = 1907;
	                this.match(VisualBasic6Parser.COLON);
	            }

	            this.state = 1913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===VisualBasic6Parser.NEWLINE) {
	                this.state = 1910;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1915;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 1917; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1916;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1919; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	            break;

	        }
	        this.state = 1929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	        if(la_===1) {
	            this.state = 1923;
	            this.block();
	            this.state = 1925; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1924;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 1927; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_Cond() {
	    let localctx = new SC_CondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, VisualBasic6Parser.RULE_sC_Cond);
	    var _la = 0; // Token type
	    try {
	        this.state = 1946;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CaseCondElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1931;
	            this.match(VisualBasic6Parser.ELSE);
	            break;

	        case 2:
	            localctx = new CaseCondExprContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1932;
	            this.sC_CondExpr();
	            this.state = 1943;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,295,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1934;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 1933;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 1936;
	                    this.match(VisualBasic6Parser.COMMA);
	                    this.state = 1938;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	                    if(la_===1) {
	                        this.state = 1937;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 1940;
	                    this.sC_CondExpr(); 
	                }
	                this.state = 1945;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,295,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_CondExpr() {
	    let localctx = new SC_CondExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, VisualBasic6Parser.RULE_sC_CondExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CaseCondExprIsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1948;
	            this.match(VisualBasic6Parser.IS);
	            this.state = 1950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1949;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1952;
	            this.comparisonOperator();
	            this.state = 1954;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            if(la_===1) {
	                this.state = 1953;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1956;
	            this.valueStmt(0);
	            break;

	        case 2:
	            localctx = new CaseCondExprValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1958;
	            this.valueStmt(0);
	            break;

	        case 3:
	            localctx = new CaseCondExprToContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1959;
	            this.valueStmt(0);
	            this.state = 1960;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1961;
	            this.match(VisualBasic6Parser.TO);
	            this.state = 1962;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 1963;
	            this.valueStmt(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendkeysStmt() {
	    let localctx = new SendkeysStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, VisualBasic6Parser.RULE_sendkeysStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this.match(VisualBasic6Parser.SENDKEYS);
	        this.state = 1968;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1969;
	        this.valueStmt(0);
	        this.state = 1978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        if(la_===1) {
	            this.state = 1971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 1970;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 1973;
	            this.match(VisualBasic6Parser.COMMA);
	            this.state = 1975;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	            if(la_===1) {
	                this.state = 1974;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 1977;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setattrStmt() {
	    let localctx = new SetattrStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, VisualBasic6Parser.RULE_setattrStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1980;
	        this.match(VisualBasic6Parser.SETATTR);
	        this.state = 1981;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1982;
	        this.valueStmt(0);
	        this.state = 1984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1983;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1986;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 1988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 1987;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 1990;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStmt() {
	    let localctx = new SetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, VisualBasic6Parser.RULE_setStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1992;
	        this.match(VisualBasic6Parser.SET);
	        this.state = 1993;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 1994;
	        this.implicitCallStmt_InStmt();
	        this.state = 1996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 1995;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 1998;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 2000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        if(la_===1) {
	            this.state = 1999;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2002;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopStmt() {
	    let localctx = new StopStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, VisualBasic6Parser.RULE_stopStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2004;
	        this.match(VisualBasic6Parser.STOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subStmt() {
	    let localctx = new SubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, VisualBasic6Parser.RULE_subStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 2006;
	            this.visibility();
	            this.state = 2007;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.STATIC) {
	            this.state = 2011;
	            this.match(VisualBasic6Parser.STATIC);
	            this.state = 2012;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2015;
	        this.match(VisualBasic6Parser.SUB);
	        this.state = 2016;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2017;
	        this.ambiguousIdentifier();
	        this.state = 2022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.LPAREN || _la===VisualBasic6Parser.WS) {
	            this.state = 2019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2018;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2021;
	            this.argList();
	        }

	        this.state = 2025; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2024;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 2027; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 2035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 2029;
	            this.block();
	            this.state = 2031; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2030;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 2033; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 2037;
	        this.match(VisualBasic6Parser.END_SUB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeStmt() {
	    let localctx = new TimeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, VisualBasic6Parser.RULE_timeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2039;
	        this.match(VisualBasic6Parser.TIME);
	        this.state = 2041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2040;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2043;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 2045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        if(la_===1) {
	            this.state = 2044;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2047;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStmt() {
	    let localctx = new TypeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, VisualBasic6Parser.RULE_typeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC) {
	            this.state = 2049;
	            this.visibility();
	            this.state = 2050;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2054;
	        this.match(VisualBasic6Parser.TYPE);
	        this.state = 2055;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2056;
	        this.ambiguousIdentifier();
	        this.state = 2058; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2057;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 2060; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 2065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)))) !== 0) || _la===VisualBasic6Parser.L_SQUARE_BRACKET || _la===VisualBasic6Parser.IDENTIFIER) {
	            this.state = 2062;
	            this.typeStmt_Element();
	            this.state = 2067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2068;
	        this.match(VisualBasic6Parser.END_TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStmt_Element() {
	    let localctx = new TypeStmt_ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, VisualBasic6Parser.RULE_typeStmt_Element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.ambiguousIdentifier();
	        this.state = 2085;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        if(la_===1) {
	            this.state = 2072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2071;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2074;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2079;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 2076;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	                if(la_===1) {
	                    this.state = 2075;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 2078;
	                this.subscripts();

	            }
	            this.state = 2082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2081;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2084;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	        this.state = 2089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2087;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2088;
	            this.asTypeClause();
	        }

	        this.state = 2092; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2091;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 2094; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeOfStmt() {
	    let localctx = new TypeOfStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, VisualBasic6Parser.RULE_typeOfStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2096;
	        this.match(VisualBasic6Parser.TYPEOF);
	        this.state = 2097;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2098;
	        this.valueStmt(0);
	        this.state = 2103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        if(la_===1) {
	            this.state = 2099;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2100;
	            this.match(VisualBasic6Parser.IS);
	            this.state = 2101;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2102;
	            this.type_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unloadStmt() {
	    let localctx = new UnloadStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, VisualBasic6Parser.RULE_unloadStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2105;
	        this.match(VisualBasic6Parser.UNLOAD);
	        this.state = 2106;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2107;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockStmt() {
	    let localctx = new UnlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, VisualBasic6Parser.RULE_unlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2109;
	        this.match(VisualBasic6Parser.UNLOCK);
	        this.state = 2110;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2111;
	        this.valueStmt(0);
	        this.state = 2126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        if(la_===1) {
	            this.state = 2113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2112;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2115;
	            this.match(VisualBasic6Parser.COMMA);
	            this.state = 2117;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 2116;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2119;
	            this.valueStmt(0);
	            this.state = 2124;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 2120;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 2121;
	                this.match(VisualBasic6Parser.TO);
	                this.state = 2122;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 2123;
	                this.valueStmt(0);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueStmt(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueStmtContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 220;
	    this.enterRecursionRule(localctx, 220, VisualBasic6Parser.RULE_valueStmt, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2192;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new VsLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2129;
	            this.literal();
	            break;

	        case 2:
	            localctx = new VsStructContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2130;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 2131;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2134;
	            this.valueStmt(0);
	            this.state = 2145;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,334,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2136;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2135;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2138;
	                    this.match(VisualBasic6Parser.COMMA);
	                    this.state = 2140;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	                    if(la_===1) {
	                        this.state = 2139;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2142;
	                    this.valueStmt(0); 
	                }
	                this.state = 2147;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,334,this._ctx);
	            }

	            this.state = 2149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2148;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2151;
	            this.match(VisualBasic6Parser.RPAREN);
	            break;

	        case 3:
	            localctx = new VsNewContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2153;
	            this.match(VisualBasic6Parser.NEW);
	            this.state = 2154;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2155;
	            this.valueStmt(20);
	            break;

	        case 4:
	            localctx = new VsTypeOfContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2156;
	            this.typeOfStmt();
	            break;

	        case 5:
	            localctx = new VsAddressOfContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2157;
	            this.match(VisualBasic6Parser.ADDRESSOF);
	            this.state = 2158;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2159;
	            this.valueStmt(18);
	            break;

	        case 6:
	            localctx = new VsAssignContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2160;
	            this.implicitCallStmt_InStmt();
	            this.state = 2162;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2161;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2164;
	            this.match(VisualBasic6Parser.ASSIGN);
	            this.state = 2166;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	            if(la_===1) {
	                this.state = 2165;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2168;
	            this.valueStmt(17);
	            break;

	        case 7:
	            localctx = new VsPlusMinusContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2170;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2172;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	            if(la_===1) {
	                this.state = 2171;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2174;
	            this.valueStmt(15);
	            break;

	        case 8:
	            localctx = new VsNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2175;
	            this.match(VisualBasic6Parser.NOT);
	            this.state = 2188;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case VisualBasic6Parser.WS:
	                this.state = 2176;
	                this.match(VisualBasic6Parser.WS);
	                this.state = 2177;
	                this.valueStmt(0);
	                break;
	            case VisualBasic6Parser.LPAREN:
	                this.state = 2178;
	                this.match(VisualBasic6Parser.LPAREN);
	                this.state = 2180;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	                if(la_===1) {
	                    this.state = 2179;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 2182;
	                this.valueStmt(0);
	                this.state = 2184;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2183;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2186;
	                this.match(VisualBasic6Parser.RPAREN);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            localctx = new VsICSContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2190;
	            this.implicitCallStmt_InStmt();
	            break;

	        case 10:
	            localctx = new VsMidContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2191;
	            this.midStmt();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2304;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,368,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2302;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new VsPowContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2194;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 2196;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2195;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2198;
	                    this.match(VisualBasic6Parser.POW);
	                    this.state = 2200;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	                    if(la_===1) {
	                        this.state = 2199;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2202;
	                    this.valueStmt(17);
	                    break;

	                case 2:
	                    localctx = new VsMultDivContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2203;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 2205;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2204;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2207;
	                    _la = this._input.LA(1);
	                    if(!(_la===VisualBasic6Parser.DIV || _la===VisualBasic6Parser.MULT)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 2209;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	                    if(la_===1) {
	                        this.state = 2208;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2211;
	                    this.valueStmt(15);
	                    break;

	                case 3:
	                    localctx = new VsIDivContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2212;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 2214;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2213;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2216;
	                    this.match(VisualBasic6Parser.IDIV);
	                    this.state = 2218;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	                    if(la_===1) {
	                        this.state = 2217;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2220;
	                    this.valueStmt(14);
	                    break;

	                case 4:
	                    localctx = new VsModContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2221;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 2223;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2222;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2225;
	                    this.match(VisualBasic6Parser.MOD);
	                    this.state = 2227;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	                    if(la_===1) {
	                        this.state = 2226;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2229;
	                    this.valueStmt(13);
	                    break;

	                case 5:
	                    localctx = new VsAddSubContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2230;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 2232;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2231;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2234;
	                    _la = this._input.LA(1);
	                    if(!(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 2236;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	                    if(la_===1) {
	                        this.state = 2235;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2238;
	                    this.valueStmt(12);
	                    break;

	                case 6:
	                    localctx = new VsAmpContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2239;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 2241;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2240;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2243;
	                    this.match(VisualBasic6Parser.AMPERSAND);
	                    this.state = 2245;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	                    if(la_===1) {
	                        this.state = 2244;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2247;
	                    this.valueStmt(11);
	                    break;

	                case 7:
	                    localctx = new VsCompContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2248;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 2250;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2249;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2252;
	                    _la = this._input.LA(1);
	                    if(!(_la===VisualBasic6Parser.IS || _la===VisualBasic6Parser.LIKE || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (VisualBasic6Parser.EQ - 187)) | (1 << (VisualBasic6Parser.GEQ - 187)) | (1 << (VisualBasic6Parser.GT - 187)) | (1 << (VisualBasic6Parser.LEQ - 187)) | (1 << (VisualBasic6Parser.LT - 187)) | (1 << (VisualBasic6Parser.NEQ - 187)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 2254;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	                    if(la_===1) {
	                        this.state = 2253;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2256;
	                    this.valueStmt(10);
	                    break;

	                case 8:
	                    localctx = new VsAndContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2257;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 2259;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2258;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2261;
	                    this.match(VisualBasic6Parser.AND);
	                    this.state = 2263;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	                    if(la_===1) {
	                        this.state = 2262;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2265;
	                    this.valueStmt(8);
	                    break;

	                case 9:
	                    localctx = new VsOrContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2266;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 2268;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2267;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2270;
	                    this.match(VisualBasic6Parser.OR);
	                    this.state = 2272;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	                    if(la_===1) {
	                        this.state = 2271;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2274;
	                    this.valueStmt(7);
	                    break;

	                case 10:
	                    localctx = new VsXorContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2275;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2277;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2276;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2279;
	                    this.match(VisualBasic6Parser.XOR);
	                    this.state = 2281;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	                    if(la_===1) {
	                        this.state = 2280;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2283;
	                    this.valueStmt(6);
	                    break;

	                case 11:
	                    localctx = new VsEqvContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2284;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2286;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2285;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2288;
	                    this.match(VisualBasic6Parser.EQV);
	                    this.state = 2290;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	                    if(la_===1) {
	                        this.state = 2289;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2292;
	                    this.valueStmt(5);
	                    break;

	                case 12:
	                    localctx = new VsImpContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VisualBasic6Parser.RULE_valueStmt);
	                    this.state = 2293;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2295;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2294;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2297;
	                    this.match(VisualBasic6Parser.IMP);
	                    this.state = 2299;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	                    if(la_===1) {
	                        this.state = 2298;
	                        this.match(VisualBasic6Parser.WS);

	                    }
	                    this.state = 2301;
	                    this.valueStmt(4);
	                    break;

	                } 
	            }
	            this.state = 2306;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,368,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	variableStmt() {
	    let localctx = new VariableStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, VisualBasic6Parser.RULE_variableStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2310;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.DIM:
	            this.state = 2307;
	            this.match(VisualBasic6Parser.DIM);
	            break;
	        case VisualBasic6Parser.STATIC:
	            this.state = 2308;
	            this.match(VisualBasic6Parser.STATIC);
	            break;
	        case VisualBasic6Parser.FRIEND:
	        case VisualBasic6Parser.GLOBAL:
	        case VisualBasic6Parser.PRIVATE:
	        case VisualBasic6Parser.PUBLIC:
	            this.state = 2309;
	            this.visibility();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2312;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	        if(la_===1) {
	            this.state = 2313;
	            this.match(VisualBasic6Parser.WITHEVENTS);
	            this.state = 2314;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2317;
	        this.variableListStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableListStmt() {
	    let localctx = new VariableListStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, VisualBasic6Parser.RULE_variableListStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2319;
	        this.variableSubStmt();
	        this.state = 2330;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,373,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2321;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2320;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2323;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 2325;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2324;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2327;
	                this.variableSubStmt(); 
	            }
	            this.state = 2332;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,373,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableSubStmt() {
	    let localctx = new VariableSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, VisualBasic6Parser.RULE_variableSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2333;
	        this.ambiguousIdentifier();
	        this.state = 2335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	        if(la_===1) {
	            this.state = 2334;
	            this.typeHint();

	        }
	        this.state = 2354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        if(la_===1) {
	            this.state = 2338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2337;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2340;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2342;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	            if(la_===1) {
	                this.state = 2341;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)) | (1 << (VisualBasic6Parser.LPAREN - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (VisualBasic6Parser.MINUS - 196)) | (1 << (VisualBasic6Parser.PLUS - 196)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 196)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 196)) | (1 << (VisualBasic6Parser.DATELITERAL - 196)) | (1 << (VisualBasic6Parser.COLORLITERAL - 196)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 196)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 196)) | (1 << (VisualBasic6Parser.FILENUMBER - 196)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 196)) | (1 << (VisualBasic6Parser.IDENTIFIER - 196)) | (1 << (VisualBasic6Parser.WS - 196)))) !== 0)) {
	                this.state = 2344;
	                this.subscripts();
	                this.state = 2346;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2345;
	                    this.match(VisualBasic6Parser.WS);
	                }

	            }

	            this.state = 2350;
	            this.match(VisualBasic6Parser.RPAREN);
	            this.state = 2352;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	            if(la_===1) {
	                this.state = 2351;
	                this.match(VisualBasic6Parser.WS);

	            }

	        }
	        this.state = 2358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	        if(la_===1) {
	            this.state = 2356;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2357;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileWendStmt() {
	    let localctx = new WhileWendStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, VisualBasic6Parser.RULE_whileWendStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2360;
	        this.match(VisualBasic6Parser.WHILE);
	        this.state = 2361;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2362;
	        this.valueStmt(0);
	        this.state = 2364; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2363;
	        		this.match(VisualBasic6Parser.NEWLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2366; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,382, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2371;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,383,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2368;
	                this.block(); 
	            }
	            this.state = 2373;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,383,this._ctx);
	        }

	        this.state = 2377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.NEWLINE) {
	            this.state = 2374;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 2379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2380;
	        this.match(VisualBasic6Parser.WEND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widthStmt() {
	    let localctx = new WidthStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, VisualBasic6Parser.RULE_widthStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2382;
	        this.match(VisualBasic6Parser.WIDTH);
	        this.state = 2383;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2384;
	        this.valueStmt(0);
	        this.state = 2386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2385;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2388;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 2390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        if(la_===1) {
	            this.state = 2389;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2392;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStmt() {
	    let localctx = new WithStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, VisualBasic6Parser.RULE_withStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2394;
	        this.match(VisualBasic6Parser.WITH);
	        this.state = 2395;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2398;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	        if(la_===1) {
	            this.state = 2396;
	            this.match(VisualBasic6Parser.NEW);
	            this.state = 2397;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2400;
	        this.implicitCallStmt_InStmt();
	        this.state = 2402; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2401;
	            this.match(VisualBasic6Parser.NEWLINE);
	            this.state = 2404; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===VisualBasic6Parser.NEWLINE);
	        this.state = 2412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)) | (1 << (VisualBasic6Parser.EXIT_DO - 32)) | (1 << (VisualBasic6Parser.EXIT_FOR - 32)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (VisualBasic6Parser.MACRO_IF - 96)) | (1 << (VisualBasic6Parser.ME - 96)) | (1 << (VisualBasic6Parser.MID - 96)) | (1 << (VisualBasic6Parser.MKDIR - 96)) | (1 << (VisualBasic6Parser.MOD - 96)) | (1 << (VisualBasic6Parser.NAME - 96)) | (1 << (VisualBasic6Parser.NEXT - 96)) | (1 << (VisualBasic6Parser.NEW - 96)) | (1 << (VisualBasic6Parser.NOT - 96)) | (1 << (VisualBasic6Parser.NOTHING - 96)) | (1 << (VisualBasic6Parser.NULL_ - 96)) | (1 << (VisualBasic6Parser.OBJECT - 96)) | (1 << (VisualBasic6Parser.ON - 96)) | (1 << (VisualBasic6Parser.ON_ERROR - 96)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 96)) | (1 << (VisualBasic6Parser.OPEN - 96)) | (1 << (VisualBasic6Parser.OPTIONAL - 96)) | (1 << (VisualBasic6Parser.OR - 96)) | (1 << (VisualBasic6Parser.OUTPUT - 96)) | (1 << (VisualBasic6Parser.PARAMARRAY - 96)) | (1 << (VisualBasic6Parser.PRESERVE - 96)) | (1 << (VisualBasic6Parser.PRINT - 96)) | (1 << (VisualBasic6Parser.PRIVATE - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (VisualBasic6Parser.TIME - 161)) | (1 << (VisualBasic6Parser.TO - 161)) | (1 << (VisualBasic6Parser.TRUE - 161)) | (1 << (VisualBasic6Parser.TYPE - 161)) | (1 << (VisualBasic6Parser.TYPEOF - 161)) | (1 << (VisualBasic6Parser.UNLOAD - 161)) | (1 << (VisualBasic6Parser.UNLOCK - 161)) | (1 << (VisualBasic6Parser.UNTIL - 161)) | (1 << (VisualBasic6Parser.VARIANT - 161)) | (1 << (VisualBasic6Parser.VERSION - 161)) | (1 << (VisualBasic6Parser.WEND - 161)) | (1 << (VisualBasic6Parser.WHILE - 161)) | (1 << (VisualBasic6Parser.WIDTH - 161)) | (1 << (VisualBasic6Parser.WITH - 161)) | (1 << (VisualBasic6Parser.WITHEVENTS - 161)) | (1 << (VisualBasic6Parser.WRITE - 161)) | (1 << (VisualBasic6Parser.XOR - 161)) | (1 << (VisualBasic6Parser.DOT - 161)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 161)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 207)) | (1 << (VisualBasic6Parser.IDENTIFIER - 207)) | (1 << (VisualBasic6Parser.WS - 207)))) !== 0)) {
	            this.state = 2406;
	            this.block();
	            this.state = 2408; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2407;
	                this.match(VisualBasic6Parser.NEWLINE);
	                this.state = 2410; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===VisualBasic6Parser.NEWLINE);
	        }

	        this.state = 2414;
	        this.match(VisualBasic6Parser.END_WITH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeStmt() {
	    let localctx = new WriteStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, VisualBasic6Parser.RULE_writeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2416;
	        this.match(VisualBasic6Parser.WRITE);
	        this.state = 2417;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2418;
	        this.valueStmt(0);
	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2419;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2422;
	        this.match(VisualBasic6Parser.COMMA);
	        this.state = 2427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        if(la_===1) {
	            this.state = 2424;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	            if(la_===1) {
	                this.state = 2423;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2426;
	            this.outputList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitCallStmt() {
	    let localctx = new ExplicitCallStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, VisualBasic6Parser.RULE_explicitCallStmt);
	    try {
	        this.state = 2431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2429;
	            this.eCS_ProcedureCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2430;
	            this.eCS_MemberProcedureCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eCS_ProcedureCall() {
	    let localctx = new ECS_ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, VisualBasic6Parser.RULE_eCS_ProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2433;
	        this.match(VisualBasic6Parser.CALL);
	        this.state = 2434;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2435;
	        this.ambiguousIdentifier();
	        this.state = 2437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	        if(la_===1) {
	            this.state = 2436;
	            this.typeHint();

	        }
	        this.state = 2452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	        if(la_===1) {
	            this.state = 2440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2439;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2442;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2444;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	            if(la_===1) {
	                this.state = 2443;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2446;
	            this.argsCall();
	            this.state = 2448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2447;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2450;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eCS_MemberProcedureCall() {
	    let localctx = new ECS_MemberProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, VisualBasic6Parser.RULE_eCS_MemberProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2454;
	        this.match(VisualBasic6Parser.CALL);
	        this.state = 2455;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	        if(la_===1) {
	            this.state = 2456;
	            this.implicitCallStmt_InStmt();

	        }
	        this.state = 2459;
	        this.match(VisualBasic6Parser.DOT);
	        this.state = 2461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2460;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2463;
	        this.ambiguousIdentifier();
	        this.state = 2465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
	        if(la_===1) {
	            this.state = 2464;
	            this.typeHint();

	        }
	        this.state = 2480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        if(la_===1) {
	            this.state = 2468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2467;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2470;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2472;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	            if(la_===1) {
	                this.state = 2471;
	                this.match(VisualBasic6Parser.WS);

	            }
	            this.state = 2474;
	            this.argsCall();
	            this.state = 2476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2475;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2478;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitCallStmt_InBlock() {
	    let localctx = new ImplicitCallStmt_InBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, VisualBasic6Parser.RULE_implicitCallStmt_InBlock);
	    try {
	        this.state = 2484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2482;
	            this.iCS_B_ProcedureCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2483;
	            this.iCS_B_MemberProcedureCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_B_ProcedureCall() {
	    let localctx = new ICS_B_ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, VisualBasic6Parser.RULE_iCS_B_ProcedureCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        this.certainIdentifier();
	        this.state = 2489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
	        if(la_===1) {
	            this.state = 2487;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2488;
	            this.argsCall();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_B_MemberProcedureCall() {
	    let localctx = new ICS_B_MemberProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, VisualBasic6Parser.RULE_iCS_B_MemberProcedureCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	        if(la_===1) {
	            this.state = 2491;
	            this.implicitCallStmt_InStmt();

	        }
	        this.state = 2494;
	        this.match(VisualBasic6Parser.DOT);
	        this.state = 2495;
	        this.ambiguousIdentifier();
	        this.state = 2497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,410,this._ctx);
	        if(la_===1) {
	            this.state = 2496;
	            this.typeHint();

	        }
	        this.state = 2501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	        if(la_===1) {
	            this.state = 2499;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2500;
	            this.argsCall();

	        }
	        this.state = 2504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
	        if(la_===1) {
	            this.state = 2503;
	            this.dictionaryCallStmt();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitCallStmt_InStmt() {
	    let localctx = new ImplicitCallStmt_InStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, VisualBasic6Parser.RULE_implicitCallStmt_InStmt);
	    try {
	        this.state = 2510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2506;
	            this.iCS_S_MembersCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2507;
	            this.iCS_S_VariableOrProcedureCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2508;
	            this.iCS_S_ProcedureOrArrayCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2509;
	            this.iCS_S_DictionaryCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_VariableOrProcedureCall() {
	    let localctx = new ICS_S_VariableOrProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, VisualBasic6Parser.RULE_iCS_S_VariableOrProcedureCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2512;
	        this.ambiguousIdentifier();
	        this.state = 2514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        if(la_===1) {
	            this.state = 2513;
	            this.typeHint();

	        }
	        this.state = 2517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	        if(la_===1) {
	            this.state = 2516;
	            this.dictionaryCallStmt();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_ProcedureOrArrayCall() {
	    let localctx = new ICS_S_ProcedureOrArrayCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, VisualBasic6Parser.RULE_iCS_S_ProcedureOrArrayCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2519;
	            this.ambiguousIdentifier();
	            break;

	        case 2:
	            this.state = 2520;
	            this.baseType();
	            break;

	        case 3:
	            this.state = 2521;
	            this.iCS_S_NestedProcedureCall();
	            break;

	        }
	        this.state = 2525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 2524;
	            this.typeHint();
	        }

	        this.state = 2528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2527;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2541; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2530;
	        		this.match(VisualBasic6Parser.LPAREN);
	        		this.state = 2532;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        		if(la_===1) {
	        		    this.state = 2531;
	        		    this.match(VisualBasic6Parser.WS);

	        		}
	        		this.state = 2538;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.COMMA - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)) | (1 << (VisualBasic6Parser.LPAREN - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (VisualBasic6Parser.MINUS - 196)) | (1 << (VisualBasic6Parser.PLUS - 196)) | (1 << (VisualBasic6Parser.SEMICOLON - 196)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 196)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 196)) | (1 << (VisualBasic6Parser.DATELITERAL - 196)) | (1 << (VisualBasic6Parser.COLORLITERAL - 196)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 196)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 196)) | (1 << (VisualBasic6Parser.FILENUMBER - 196)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 196)) | (1 << (VisualBasic6Parser.IDENTIFIER - 196)) | (1 << (VisualBasic6Parser.WS - 196)))) !== 0)) {
	        		    this.state = 2534;
	        		    this.argsCall();
	        		    this.state = 2536;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===VisualBasic6Parser.WS) {
	        		        this.state = 2535;
	        		        this.match(VisualBasic6Parser.WS);
	        		    }

	        		}

	        		this.state = 2540;
	        		this.match(VisualBasic6Parser.RPAREN);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2543; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,422, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,423,this._ctx);
	        if(la_===1) {
	            this.state = 2545;
	            this.dictionaryCallStmt();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_NestedProcedureCall() {
	    let localctx = new ICS_S_NestedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, VisualBasic6Parser.RULE_iCS_S_NestedProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2548;
	        this.ambiguousIdentifier();
	        this.state = 2550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 2549;
	            this.typeHint();
	        }

	        this.state = 2553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2552;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2555;
	        this.match(VisualBasic6Parser.LPAREN);
	        this.state = 2557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
	        if(la_===1) {
	            this.state = 2556;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)) | (1 << (VisualBasic6Parser.COMMA - 164)) | (1 << (VisualBasic6Parser.DOT - 164)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 164)) | (1 << (VisualBasic6Parser.LPAREN - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (VisualBasic6Parser.MINUS - 196)) | (1 << (VisualBasic6Parser.PLUS - 196)) | (1 << (VisualBasic6Parser.SEMICOLON - 196)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 196)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 196)) | (1 << (VisualBasic6Parser.DATELITERAL - 196)) | (1 << (VisualBasic6Parser.COLORLITERAL - 196)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 196)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 196)) | (1 << (VisualBasic6Parser.FILENUMBER - 196)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 196)) | (1 << (VisualBasic6Parser.IDENTIFIER - 196)) | (1 << (VisualBasic6Parser.WS - 196)))) !== 0)) {
	            this.state = 2559;
	            this.argsCall();
	            this.state = 2561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2560;
	                this.match(VisualBasic6Parser.WS);
	            }

	        }

	        this.state = 2565;
	        this.match(VisualBasic6Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_MembersCall() {
	    let localctx = new ICS_S_MembersCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, VisualBasic6Parser.RULE_iCS_S_MembersCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2569;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
	        if(la_===1) {
	            this.state = 2567;
	            this.iCS_S_VariableOrProcedureCall();

	        } else if(la_===2) {
	            this.state = 2568;
	            this.iCS_S_ProcedureOrArrayCall();

	        }
	        this.state = 2572; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2571;
	        		this.iCS_S_MemberCall();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2574; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,430, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	        if(la_===1) {
	            this.state = 2576;
	            this.dictionaryCallStmt();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_MemberCall() {
	    let localctx = new ICS_S_MemberCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, VisualBasic6Parser.RULE_iCS_S_MemberCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2579;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2582;
	        this.match(VisualBasic6Parser.DOT);
	        this.state = 2585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2583;
	            this.iCS_S_VariableOrProcedureCall();
	            break;

	        case 2:
	            this.state = 2584;
	            this.iCS_S_ProcedureOrArrayCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_DictionaryCall() {
	    let localctx = new ICS_S_DictionaryCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, VisualBasic6Parser.RULE_iCS_S_DictionaryCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2587;
	        this.dictionaryCallStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argsCall() {
	    let localctx = new ArgsCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, VisualBasic6Parser.RULE_argsCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2601;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,437,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2590;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
	                if(la_===1) {
	                    this.state = 2589;
	                    this.argCall();

	                }
	                this.state = 2593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2592;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2595;
	                _la = this._input.LA(1);
	                if(!(_la===VisualBasic6Parser.COMMA || _la===VisualBasic6Parser.SEMICOLON)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2597;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	                if(la_===1) {
	                    this.state = 2596;
	                    this.match(VisualBasic6Parser.WS);

	                } 
	            }
	            this.state = 2603;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,437,this._ctx);
	        }

	        this.state = 2604;
	        this.argCall();
	        this.state = 2617;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,441,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2605;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2608;
	                _la = this._input.LA(1);
	                if(!(_la===VisualBasic6Parser.COMMA || _la===VisualBasic6Parser.SEMICOLON)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2610;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	                if(la_===1) {
	                    this.state = 2609;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 2613;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	                if(la_===1) {
	                    this.state = 2612;
	                    this.argCall();

	                } 
	            }
	            this.state = 2619;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,441,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCall() {
	    let localctx = new ArgCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, VisualBasic6Parser.RULE_argCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        if(la_===1) {
	            this.state = 2620;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.BYVAL || _la===VisualBasic6Parser.BYREF || _la===VisualBasic6Parser.PARAMARRAY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2621;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2624;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryCallStmt() {
	    let localctx = new DictionaryCallStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, VisualBasic6Parser.RULE_dictionaryCallStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2626;
	        this.match(VisualBasic6Parser.EXCLAMATIONMARK);
	        this.state = 2627;
	        this.ambiguousIdentifier();
	        this.state = 2629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        if(la_===1) {
	            this.state = 2628;
	            this.typeHint();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argList() {
	    let localctx = new ArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, VisualBasic6Parser.RULE_argList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2631;
	        this.match(VisualBasic6Parser.LPAREN);
	        this.state = 2649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,448,this._ctx);
	        if(la_===1) {
	            this.state = 2633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2632;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2635;
	            this.arg();
	            this.state = 2646;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,447,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2637;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2636;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2639;
	                    this.match(VisualBasic6Parser.COMMA);
	                    this.state = 2641;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===VisualBasic6Parser.WS) {
	                        this.state = 2640;
	                        this.match(VisualBasic6Parser.WS);
	                    }

	                    this.state = 2643;
	                    this.arg(); 
	                }
	                this.state = 2648;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,447,this._ctx);
	            }


	        }
	        this.state = 2652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2651;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2654;
	        this.match(VisualBasic6Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, VisualBasic6Parser.RULE_arg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
	        if(la_===1) {
	            this.state = 2656;
	            this.match(VisualBasic6Parser.OPTIONAL);
	            this.state = 2657;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	        if(la_===1) {
	            this.state = 2660;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.BYVAL || _la===VisualBasic6Parser.BYREF)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2661;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2666;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
	        if(la_===1) {
	            this.state = 2664;
	            this.match(VisualBasic6Parser.PARAMARRAY);
	            this.state = 2665;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2668;
	        this.ambiguousIdentifier();
	        this.state = 2670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0)) {
	            this.state = 2669;
	            this.typeHint();
	        }

	        this.state = 2680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
	        if(la_===1) {
	            this.state = 2673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2672;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2675;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2676;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2679;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	        this.state = 2684;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
	        if(la_===1) {
	            this.state = 2682;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2683;
	            this.asTypeClause();

	        }
	        this.state = 2690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	        if(la_===1) {
	            this.state = 2687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2686;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2689;
	            this.argDefaultValue();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argDefaultValue() {
	    let localctx = new ArgDefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, VisualBasic6Parser.RULE_argDefaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2692;
	        this.match(VisualBasic6Parser.EQ);
	        this.state = 2694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        if(la_===1) {
	            this.state = 2693;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2696;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscripts() {
	    let localctx = new SubscriptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, VisualBasic6Parser.RULE_subscripts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2698;
	        this.subscript_();
	        this.state = 2709;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,463,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2700;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===VisualBasic6Parser.WS) {
	                    this.state = 2699;
	                    this.match(VisualBasic6Parser.WS);
	                }

	                this.state = 2702;
	                this.match(VisualBasic6Parser.COMMA);
	                this.state = 2704;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	                if(la_===1) {
	                    this.state = 2703;
	                    this.match(VisualBasic6Parser.WS);

	                }
	                this.state = 2706;
	                this.subscript_(); 
	            }
	            this.state = 2711;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,463,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, VisualBasic6Parser.RULE_subscript_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2717;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        if(la_===1) {
	            this.state = 2712;
	            this.valueStmt(0);
	            this.state = 2713;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2714;
	            this.match(VisualBasic6Parser.TO);
	            this.state = 2715;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2719;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousIdentifier() {
	    let localctx = new AmbiguousIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, VisualBasic6Parser.RULE_ambiguousIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 2735;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.ACCESS:
	        case VisualBasic6Parser.ADDRESSOF:
	        case VisualBasic6Parser.ALIAS:
	        case VisualBasic6Parser.AND:
	        case VisualBasic6Parser.ATTRIBUTE:
	        case VisualBasic6Parser.APPACTIVATE:
	        case VisualBasic6Parser.APPEND:
	        case VisualBasic6Parser.AS:
	        case VisualBasic6Parser.BEEP:
	        case VisualBasic6Parser.BEGIN:
	        case VisualBasic6Parser.BINARY:
	        case VisualBasic6Parser.BOOLEAN:
	        case VisualBasic6Parser.BYVAL:
	        case VisualBasic6Parser.BYREF:
	        case VisualBasic6Parser.BYTE:
	        case VisualBasic6Parser.CALL:
	        case VisualBasic6Parser.CASE:
	        case VisualBasic6Parser.CHDIR:
	        case VisualBasic6Parser.CHDRIVE:
	        case VisualBasic6Parser.CLASS:
	        case VisualBasic6Parser.CLOSE:
	        case VisualBasic6Parser.COLLECTION:
	        case VisualBasic6Parser.CONST:
	        case VisualBasic6Parser.DATE:
	        case VisualBasic6Parser.DECLARE:
	        case VisualBasic6Parser.DEFBOOL:
	        case VisualBasic6Parser.DEFBYTE:
	        case VisualBasic6Parser.DEFDATE:
	        case VisualBasic6Parser.DEFDBL:
	        case VisualBasic6Parser.DEFDEC:
	        case VisualBasic6Parser.DEFCUR:
	        case VisualBasic6Parser.DEFINT:
	        case VisualBasic6Parser.DEFLNG:
	        case VisualBasic6Parser.DEFOBJ:
	        case VisualBasic6Parser.DEFSNG:
	        case VisualBasic6Parser.DEFSTR:
	        case VisualBasic6Parser.DEFVAR:
	        case VisualBasic6Parser.DELETESETTING:
	        case VisualBasic6Parser.DIM:
	        case VisualBasic6Parser.DO:
	        case VisualBasic6Parser.DOUBLE:
	        case VisualBasic6Parser.EACH:
	        case VisualBasic6Parser.ELSE:
	        case VisualBasic6Parser.ELSEIF:
	        case VisualBasic6Parser.END:
	        case VisualBasic6Parser.ENUM:
	        case VisualBasic6Parser.EQV:
	        case VisualBasic6Parser.ERASE:
	        case VisualBasic6Parser.ERROR:
	        case VisualBasic6Parser.EVENT:
	        case VisualBasic6Parser.FALSE:
	        case VisualBasic6Parser.FILECOPY:
	        case VisualBasic6Parser.FRIEND:
	        case VisualBasic6Parser.FOR:
	        case VisualBasic6Parser.FUNCTION:
	        case VisualBasic6Parser.GET:
	        case VisualBasic6Parser.GLOBAL:
	        case VisualBasic6Parser.GOSUB:
	        case VisualBasic6Parser.GOTO:
	        case VisualBasic6Parser.IF:
	        case VisualBasic6Parser.IMP:
	        case VisualBasic6Parser.IMPLEMENTS:
	        case VisualBasic6Parser.IN:
	        case VisualBasic6Parser.INPUT:
	        case VisualBasic6Parser.IS:
	        case VisualBasic6Parser.INTEGER:
	        case VisualBasic6Parser.KILL:
	        case VisualBasic6Parser.LOAD:
	        case VisualBasic6Parser.LOCK:
	        case VisualBasic6Parser.LONG:
	        case VisualBasic6Parser.LOOP:
	        case VisualBasic6Parser.LEN:
	        case VisualBasic6Parser.LET:
	        case VisualBasic6Parser.LIB:
	        case VisualBasic6Parser.LIKE:
	        case VisualBasic6Parser.LSET:
	        case VisualBasic6Parser.ME:
	        case VisualBasic6Parser.MID:
	        case VisualBasic6Parser.MKDIR:
	        case VisualBasic6Parser.MOD:
	        case VisualBasic6Parser.NAME:
	        case VisualBasic6Parser.NEXT:
	        case VisualBasic6Parser.NEW:
	        case VisualBasic6Parser.NOT:
	        case VisualBasic6Parser.NOTHING:
	        case VisualBasic6Parser.NULL_:
	        case VisualBasic6Parser.OBJECT:
	        case VisualBasic6Parser.ON:
	        case VisualBasic6Parser.OPEN:
	        case VisualBasic6Parser.OPTIONAL:
	        case VisualBasic6Parser.OR:
	        case VisualBasic6Parser.OUTPUT:
	        case VisualBasic6Parser.PARAMARRAY:
	        case VisualBasic6Parser.PRESERVE:
	        case VisualBasic6Parser.PRINT:
	        case VisualBasic6Parser.PRIVATE:
	        case VisualBasic6Parser.PUBLIC:
	        case VisualBasic6Parser.PUT:
	        case VisualBasic6Parser.RANDOM:
	        case VisualBasic6Parser.RANDOMIZE:
	        case VisualBasic6Parser.RAISEEVENT:
	        case VisualBasic6Parser.READ:
	        case VisualBasic6Parser.REDIM:
	        case VisualBasic6Parser.REM:
	        case VisualBasic6Parser.RESET:
	        case VisualBasic6Parser.RESUME:
	        case VisualBasic6Parser.RETURN:
	        case VisualBasic6Parser.RMDIR:
	        case VisualBasic6Parser.RSET:
	        case VisualBasic6Parser.SAVEPICTURE:
	        case VisualBasic6Parser.SAVESETTING:
	        case VisualBasic6Parser.SEEK:
	        case VisualBasic6Parser.SELECT:
	        case VisualBasic6Parser.SENDKEYS:
	        case VisualBasic6Parser.SET:
	        case VisualBasic6Parser.SETATTR:
	        case VisualBasic6Parser.SHARED:
	        case VisualBasic6Parser.SINGLE:
	        case VisualBasic6Parser.SPC:
	        case VisualBasic6Parser.STATIC:
	        case VisualBasic6Parser.STEP:
	        case VisualBasic6Parser.STOP:
	        case VisualBasic6Parser.STRING:
	        case VisualBasic6Parser.SUB:
	        case VisualBasic6Parser.TAB:
	        case VisualBasic6Parser.TEXT:
	        case VisualBasic6Parser.THEN:
	        case VisualBasic6Parser.TIME:
	        case VisualBasic6Parser.TO:
	        case VisualBasic6Parser.TRUE:
	        case VisualBasic6Parser.TYPE:
	        case VisualBasic6Parser.TYPEOF:
	        case VisualBasic6Parser.UNLOAD:
	        case VisualBasic6Parser.UNLOCK:
	        case VisualBasic6Parser.UNTIL:
	        case VisualBasic6Parser.VARIANT:
	        case VisualBasic6Parser.VERSION:
	        case VisualBasic6Parser.WEND:
	        case VisualBasic6Parser.WHILE:
	        case VisualBasic6Parser.WIDTH:
	        case VisualBasic6Parser.WITH:
	        case VisualBasic6Parser.WITHEVENTS:
	        case VisualBasic6Parser.WRITE:
	        case VisualBasic6Parser.XOR:
	        case VisualBasic6Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2723; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2723;
	            		this._errHandler.sync(this);
	            		switch(this._input.LA(1)) {
	            		case VisualBasic6Parser.IDENTIFIER:
	            		    this.state = 2721;
	            		    this.match(VisualBasic6Parser.IDENTIFIER);
	            		    break;
	            		case VisualBasic6Parser.ACCESS:
	            		case VisualBasic6Parser.ADDRESSOF:
	            		case VisualBasic6Parser.ALIAS:
	            		case VisualBasic6Parser.AND:
	            		case VisualBasic6Parser.ATTRIBUTE:
	            		case VisualBasic6Parser.APPACTIVATE:
	            		case VisualBasic6Parser.APPEND:
	            		case VisualBasic6Parser.AS:
	            		case VisualBasic6Parser.BEEP:
	            		case VisualBasic6Parser.BEGIN:
	            		case VisualBasic6Parser.BINARY:
	            		case VisualBasic6Parser.BOOLEAN:
	            		case VisualBasic6Parser.BYVAL:
	            		case VisualBasic6Parser.BYREF:
	            		case VisualBasic6Parser.BYTE:
	            		case VisualBasic6Parser.CALL:
	            		case VisualBasic6Parser.CASE:
	            		case VisualBasic6Parser.CHDIR:
	            		case VisualBasic6Parser.CHDRIVE:
	            		case VisualBasic6Parser.CLASS:
	            		case VisualBasic6Parser.CLOSE:
	            		case VisualBasic6Parser.COLLECTION:
	            		case VisualBasic6Parser.CONST:
	            		case VisualBasic6Parser.DATE:
	            		case VisualBasic6Parser.DECLARE:
	            		case VisualBasic6Parser.DEFBOOL:
	            		case VisualBasic6Parser.DEFBYTE:
	            		case VisualBasic6Parser.DEFDATE:
	            		case VisualBasic6Parser.DEFDBL:
	            		case VisualBasic6Parser.DEFDEC:
	            		case VisualBasic6Parser.DEFCUR:
	            		case VisualBasic6Parser.DEFINT:
	            		case VisualBasic6Parser.DEFLNG:
	            		case VisualBasic6Parser.DEFOBJ:
	            		case VisualBasic6Parser.DEFSNG:
	            		case VisualBasic6Parser.DEFSTR:
	            		case VisualBasic6Parser.DEFVAR:
	            		case VisualBasic6Parser.DELETESETTING:
	            		case VisualBasic6Parser.DIM:
	            		case VisualBasic6Parser.DO:
	            		case VisualBasic6Parser.DOUBLE:
	            		case VisualBasic6Parser.EACH:
	            		case VisualBasic6Parser.ELSE:
	            		case VisualBasic6Parser.ELSEIF:
	            		case VisualBasic6Parser.END:
	            		case VisualBasic6Parser.ENUM:
	            		case VisualBasic6Parser.EQV:
	            		case VisualBasic6Parser.ERASE:
	            		case VisualBasic6Parser.ERROR:
	            		case VisualBasic6Parser.EVENT:
	            		case VisualBasic6Parser.FALSE:
	            		case VisualBasic6Parser.FILECOPY:
	            		case VisualBasic6Parser.FRIEND:
	            		case VisualBasic6Parser.FOR:
	            		case VisualBasic6Parser.FUNCTION:
	            		case VisualBasic6Parser.GET:
	            		case VisualBasic6Parser.GLOBAL:
	            		case VisualBasic6Parser.GOSUB:
	            		case VisualBasic6Parser.GOTO:
	            		case VisualBasic6Parser.IF:
	            		case VisualBasic6Parser.IMP:
	            		case VisualBasic6Parser.IMPLEMENTS:
	            		case VisualBasic6Parser.IN:
	            		case VisualBasic6Parser.INPUT:
	            		case VisualBasic6Parser.IS:
	            		case VisualBasic6Parser.INTEGER:
	            		case VisualBasic6Parser.KILL:
	            		case VisualBasic6Parser.LOAD:
	            		case VisualBasic6Parser.LOCK:
	            		case VisualBasic6Parser.LONG:
	            		case VisualBasic6Parser.LOOP:
	            		case VisualBasic6Parser.LEN:
	            		case VisualBasic6Parser.LET:
	            		case VisualBasic6Parser.LIB:
	            		case VisualBasic6Parser.LIKE:
	            		case VisualBasic6Parser.LSET:
	            		case VisualBasic6Parser.ME:
	            		case VisualBasic6Parser.MID:
	            		case VisualBasic6Parser.MKDIR:
	            		case VisualBasic6Parser.MOD:
	            		case VisualBasic6Parser.NAME:
	            		case VisualBasic6Parser.NEXT:
	            		case VisualBasic6Parser.NEW:
	            		case VisualBasic6Parser.NOT:
	            		case VisualBasic6Parser.NOTHING:
	            		case VisualBasic6Parser.NULL_:
	            		case VisualBasic6Parser.OBJECT:
	            		case VisualBasic6Parser.ON:
	            		case VisualBasic6Parser.OPEN:
	            		case VisualBasic6Parser.OPTIONAL:
	            		case VisualBasic6Parser.OR:
	            		case VisualBasic6Parser.OUTPUT:
	            		case VisualBasic6Parser.PARAMARRAY:
	            		case VisualBasic6Parser.PRESERVE:
	            		case VisualBasic6Parser.PRINT:
	            		case VisualBasic6Parser.PRIVATE:
	            		case VisualBasic6Parser.PUBLIC:
	            		case VisualBasic6Parser.PUT:
	            		case VisualBasic6Parser.RANDOM:
	            		case VisualBasic6Parser.RANDOMIZE:
	            		case VisualBasic6Parser.RAISEEVENT:
	            		case VisualBasic6Parser.READ:
	            		case VisualBasic6Parser.REDIM:
	            		case VisualBasic6Parser.REM:
	            		case VisualBasic6Parser.RESET:
	            		case VisualBasic6Parser.RESUME:
	            		case VisualBasic6Parser.RETURN:
	            		case VisualBasic6Parser.RMDIR:
	            		case VisualBasic6Parser.RSET:
	            		case VisualBasic6Parser.SAVEPICTURE:
	            		case VisualBasic6Parser.SAVESETTING:
	            		case VisualBasic6Parser.SEEK:
	            		case VisualBasic6Parser.SELECT:
	            		case VisualBasic6Parser.SENDKEYS:
	            		case VisualBasic6Parser.SET:
	            		case VisualBasic6Parser.SETATTR:
	            		case VisualBasic6Parser.SHARED:
	            		case VisualBasic6Parser.SINGLE:
	            		case VisualBasic6Parser.SPC:
	            		case VisualBasic6Parser.STATIC:
	            		case VisualBasic6Parser.STEP:
	            		case VisualBasic6Parser.STOP:
	            		case VisualBasic6Parser.STRING:
	            		case VisualBasic6Parser.SUB:
	            		case VisualBasic6Parser.TAB:
	            		case VisualBasic6Parser.TEXT:
	            		case VisualBasic6Parser.THEN:
	            		case VisualBasic6Parser.TIME:
	            		case VisualBasic6Parser.TO:
	            		case VisualBasic6Parser.TRUE:
	            		case VisualBasic6Parser.TYPE:
	            		case VisualBasic6Parser.TYPEOF:
	            		case VisualBasic6Parser.UNLOAD:
	            		case VisualBasic6Parser.UNLOCK:
	            		case VisualBasic6Parser.UNTIL:
	            		case VisualBasic6Parser.VARIANT:
	            		case VisualBasic6Parser.VERSION:
	            		case VisualBasic6Parser.WEND:
	            		case VisualBasic6Parser.WHILE:
	            		case VisualBasic6Parser.WIDTH:
	            		case VisualBasic6Parser.WITH:
	            		case VisualBasic6Parser.WITHEVENTS:
	            		case VisualBasic6Parser.WRITE:
	            		case VisualBasic6Parser.XOR:
	            		    this.state = 2722;
	            		    this.ambiguousKeyword();
	            		    break;
	            		default:
	            		    throw new antlr4.error.NoViableAltException(this);
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2725; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,466, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case VisualBasic6Parser.L_SQUARE_BRACKET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2727;
	            this.match(VisualBasic6Parser.L_SQUARE_BRACKET);
	            this.state = 2730; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2730;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case VisualBasic6Parser.IDENTIFIER:
	                    this.state = 2728;
	                    this.match(VisualBasic6Parser.IDENTIFIER);
	                    break;
	                case VisualBasic6Parser.ACCESS:
	                case VisualBasic6Parser.ADDRESSOF:
	                case VisualBasic6Parser.ALIAS:
	                case VisualBasic6Parser.AND:
	                case VisualBasic6Parser.ATTRIBUTE:
	                case VisualBasic6Parser.APPACTIVATE:
	                case VisualBasic6Parser.APPEND:
	                case VisualBasic6Parser.AS:
	                case VisualBasic6Parser.BEEP:
	                case VisualBasic6Parser.BEGIN:
	                case VisualBasic6Parser.BINARY:
	                case VisualBasic6Parser.BOOLEAN:
	                case VisualBasic6Parser.BYVAL:
	                case VisualBasic6Parser.BYREF:
	                case VisualBasic6Parser.BYTE:
	                case VisualBasic6Parser.CALL:
	                case VisualBasic6Parser.CASE:
	                case VisualBasic6Parser.CHDIR:
	                case VisualBasic6Parser.CHDRIVE:
	                case VisualBasic6Parser.CLASS:
	                case VisualBasic6Parser.CLOSE:
	                case VisualBasic6Parser.COLLECTION:
	                case VisualBasic6Parser.CONST:
	                case VisualBasic6Parser.DATE:
	                case VisualBasic6Parser.DECLARE:
	                case VisualBasic6Parser.DEFBOOL:
	                case VisualBasic6Parser.DEFBYTE:
	                case VisualBasic6Parser.DEFDATE:
	                case VisualBasic6Parser.DEFDBL:
	                case VisualBasic6Parser.DEFDEC:
	                case VisualBasic6Parser.DEFCUR:
	                case VisualBasic6Parser.DEFINT:
	                case VisualBasic6Parser.DEFLNG:
	                case VisualBasic6Parser.DEFOBJ:
	                case VisualBasic6Parser.DEFSNG:
	                case VisualBasic6Parser.DEFSTR:
	                case VisualBasic6Parser.DEFVAR:
	                case VisualBasic6Parser.DELETESETTING:
	                case VisualBasic6Parser.DIM:
	                case VisualBasic6Parser.DO:
	                case VisualBasic6Parser.DOUBLE:
	                case VisualBasic6Parser.EACH:
	                case VisualBasic6Parser.ELSE:
	                case VisualBasic6Parser.ELSEIF:
	                case VisualBasic6Parser.END:
	                case VisualBasic6Parser.ENUM:
	                case VisualBasic6Parser.EQV:
	                case VisualBasic6Parser.ERASE:
	                case VisualBasic6Parser.ERROR:
	                case VisualBasic6Parser.EVENT:
	                case VisualBasic6Parser.FALSE:
	                case VisualBasic6Parser.FILECOPY:
	                case VisualBasic6Parser.FRIEND:
	                case VisualBasic6Parser.FOR:
	                case VisualBasic6Parser.FUNCTION:
	                case VisualBasic6Parser.GET:
	                case VisualBasic6Parser.GLOBAL:
	                case VisualBasic6Parser.GOSUB:
	                case VisualBasic6Parser.GOTO:
	                case VisualBasic6Parser.IF:
	                case VisualBasic6Parser.IMP:
	                case VisualBasic6Parser.IMPLEMENTS:
	                case VisualBasic6Parser.IN:
	                case VisualBasic6Parser.INPUT:
	                case VisualBasic6Parser.IS:
	                case VisualBasic6Parser.INTEGER:
	                case VisualBasic6Parser.KILL:
	                case VisualBasic6Parser.LOAD:
	                case VisualBasic6Parser.LOCK:
	                case VisualBasic6Parser.LONG:
	                case VisualBasic6Parser.LOOP:
	                case VisualBasic6Parser.LEN:
	                case VisualBasic6Parser.LET:
	                case VisualBasic6Parser.LIB:
	                case VisualBasic6Parser.LIKE:
	                case VisualBasic6Parser.LSET:
	                case VisualBasic6Parser.ME:
	                case VisualBasic6Parser.MID:
	                case VisualBasic6Parser.MKDIR:
	                case VisualBasic6Parser.MOD:
	                case VisualBasic6Parser.NAME:
	                case VisualBasic6Parser.NEXT:
	                case VisualBasic6Parser.NEW:
	                case VisualBasic6Parser.NOT:
	                case VisualBasic6Parser.NOTHING:
	                case VisualBasic6Parser.NULL_:
	                case VisualBasic6Parser.OBJECT:
	                case VisualBasic6Parser.ON:
	                case VisualBasic6Parser.OPEN:
	                case VisualBasic6Parser.OPTIONAL:
	                case VisualBasic6Parser.OR:
	                case VisualBasic6Parser.OUTPUT:
	                case VisualBasic6Parser.PARAMARRAY:
	                case VisualBasic6Parser.PRESERVE:
	                case VisualBasic6Parser.PRINT:
	                case VisualBasic6Parser.PRIVATE:
	                case VisualBasic6Parser.PUBLIC:
	                case VisualBasic6Parser.PUT:
	                case VisualBasic6Parser.RANDOM:
	                case VisualBasic6Parser.RANDOMIZE:
	                case VisualBasic6Parser.RAISEEVENT:
	                case VisualBasic6Parser.READ:
	                case VisualBasic6Parser.REDIM:
	                case VisualBasic6Parser.REM:
	                case VisualBasic6Parser.RESET:
	                case VisualBasic6Parser.RESUME:
	                case VisualBasic6Parser.RETURN:
	                case VisualBasic6Parser.RMDIR:
	                case VisualBasic6Parser.RSET:
	                case VisualBasic6Parser.SAVEPICTURE:
	                case VisualBasic6Parser.SAVESETTING:
	                case VisualBasic6Parser.SEEK:
	                case VisualBasic6Parser.SELECT:
	                case VisualBasic6Parser.SENDKEYS:
	                case VisualBasic6Parser.SET:
	                case VisualBasic6Parser.SETATTR:
	                case VisualBasic6Parser.SHARED:
	                case VisualBasic6Parser.SINGLE:
	                case VisualBasic6Parser.SPC:
	                case VisualBasic6Parser.STATIC:
	                case VisualBasic6Parser.STEP:
	                case VisualBasic6Parser.STOP:
	                case VisualBasic6Parser.STRING:
	                case VisualBasic6Parser.SUB:
	                case VisualBasic6Parser.TAB:
	                case VisualBasic6Parser.TEXT:
	                case VisualBasic6Parser.THEN:
	                case VisualBasic6Parser.TIME:
	                case VisualBasic6Parser.TO:
	                case VisualBasic6Parser.TRUE:
	                case VisualBasic6Parser.TYPE:
	                case VisualBasic6Parser.TYPEOF:
	                case VisualBasic6Parser.UNLOAD:
	                case VisualBasic6Parser.UNLOCK:
	                case VisualBasic6Parser.UNTIL:
	                case VisualBasic6Parser.VARIANT:
	                case VisualBasic6Parser.VERSION:
	                case VisualBasic6Parser.WEND:
	                case VisualBasic6Parser.WHILE:
	                case VisualBasic6Parser.WIDTH:
	                case VisualBasic6Parser.WITH:
	                case VisualBasic6Parser.WITHEVENTS:
	                case VisualBasic6Parser.WRITE:
	                case VisualBasic6Parser.XOR:
	                    this.state = 2729;
	                    this.ambiguousKeyword();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2732; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)))) !== 0) || _la===VisualBasic6Parser.IDENTIFIER);
	            this.state = 2734;
	            this.match(VisualBasic6Parser.R_SQUARE_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asTypeClause() {
	    let localctx = new AsTypeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, VisualBasic6Parser.RULE_asTypeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2737;
	        this.match(VisualBasic6Parser.AS);
	        this.state = 2738;
	        this.match(VisualBasic6Parser.WS);
	        this.state = 2741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
	        if(la_===1) {
	            this.state = 2739;
	            this.match(VisualBasic6Parser.NEW);
	            this.state = 2740;
	            this.match(VisualBasic6Parser.WS);

	        }
	        this.state = 2743;
	        this.type_();
	        this.state = 2746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        if(la_===1) {
	            this.state = 2744;
	            this.match(VisualBasic6Parser.WS);
	            this.state = 2745;
	            this.fieldLength();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseType() {
	    let localctx = new BaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, VisualBasic6Parser.RULE_baseType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2748;
	        _la = this._input.LA(1);
	        if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (VisualBasic6Parser.BOOLEAN - 13)) | (1 << (VisualBasic6Parser.BYTE - 13)) | (1 << (VisualBasic6Parser.COLLECTION - 13)) | (1 << (VisualBasic6Parser.DATE - 13)) | (1 << (VisualBasic6Parser.DOUBLE - 13)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (VisualBasic6Parser.INTEGER - 81)) | (1 << (VisualBasic6Parser.LONG - 81)) | (1 << (VisualBasic6Parser.OBJECT - 81)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (VisualBasic6Parser.SINGLE - 151)) | (1 << (VisualBasic6Parser.STRING - 151)) | (1 << (VisualBasic6Parser.VARIANT - 151)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	certainIdentifier() {
	    let localctx = new CertainIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, VisualBasic6Parser.RULE_certainIdentifier);
	    try {
	        this.state = 2765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2750;
	            this.match(VisualBasic6Parser.IDENTIFIER);
	            this.state = 2755;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,473,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2753;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case VisualBasic6Parser.ACCESS:
	                    case VisualBasic6Parser.ADDRESSOF:
	                    case VisualBasic6Parser.ALIAS:
	                    case VisualBasic6Parser.AND:
	                    case VisualBasic6Parser.ATTRIBUTE:
	                    case VisualBasic6Parser.APPACTIVATE:
	                    case VisualBasic6Parser.APPEND:
	                    case VisualBasic6Parser.AS:
	                    case VisualBasic6Parser.BEEP:
	                    case VisualBasic6Parser.BEGIN:
	                    case VisualBasic6Parser.BINARY:
	                    case VisualBasic6Parser.BOOLEAN:
	                    case VisualBasic6Parser.BYVAL:
	                    case VisualBasic6Parser.BYREF:
	                    case VisualBasic6Parser.BYTE:
	                    case VisualBasic6Parser.CALL:
	                    case VisualBasic6Parser.CASE:
	                    case VisualBasic6Parser.CHDIR:
	                    case VisualBasic6Parser.CHDRIVE:
	                    case VisualBasic6Parser.CLASS:
	                    case VisualBasic6Parser.CLOSE:
	                    case VisualBasic6Parser.COLLECTION:
	                    case VisualBasic6Parser.CONST:
	                    case VisualBasic6Parser.DATE:
	                    case VisualBasic6Parser.DECLARE:
	                    case VisualBasic6Parser.DEFBOOL:
	                    case VisualBasic6Parser.DEFBYTE:
	                    case VisualBasic6Parser.DEFDATE:
	                    case VisualBasic6Parser.DEFDBL:
	                    case VisualBasic6Parser.DEFDEC:
	                    case VisualBasic6Parser.DEFCUR:
	                    case VisualBasic6Parser.DEFINT:
	                    case VisualBasic6Parser.DEFLNG:
	                    case VisualBasic6Parser.DEFOBJ:
	                    case VisualBasic6Parser.DEFSNG:
	                    case VisualBasic6Parser.DEFSTR:
	                    case VisualBasic6Parser.DEFVAR:
	                    case VisualBasic6Parser.DELETESETTING:
	                    case VisualBasic6Parser.DIM:
	                    case VisualBasic6Parser.DO:
	                    case VisualBasic6Parser.DOUBLE:
	                    case VisualBasic6Parser.EACH:
	                    case VisualBasic6Parser.ELSE:
	                    case VisualBasic6Parser.ELSEIF:
	                    case VisualBasic6Parser.END:
	                    case VisualBasic6Parser.ENUM:
	                    case VisualBasic6Parser.EQV:
	                    case VisualBasic6Parser.ERASE:
	                    case VisualBasic6Parser.ERROR:
	                    case VisualBasic6Parser.EVENT:
	                    case VisualBasic6Parser.FALSE:
	                    case VisualBasic6Parser.FILECOPY:
	                    case VisualBasic6Parser.FRIEND:
	                    case VisualBasic6Parser.FOR:
	                    case VisualBasic6Parser.FUNCTION:
	                    case VisualBasic6Parser.GET:
	                    case VisualBasic6Parser.GLOBAL:
	                    case VisualBasic6Parser.GOSUB:
	                    case VisualBasic6Parser.GOTO:
	                    case VisualBasic6Parser.IF:
	                    case VisualBasic6Parser.IMP:
	                    case VisualBasic6Parser.IMPLEMENTS:
	                    case VisualBasic6Parser.IN:
	                    case VisualBasic6Parser.INPUT:
	                    case VisualBasic6Parser.IS:
	                    case VisualBasic6Parser.INTEGER:
	                    case VisualBasic6Parser.KILL:
	                    case VisualBasic6Parser.LOAD:
	                    case VisualBasic6Parser.LOCK:
	                    case VisualBasic6Parser.LONG:
	                    case VisualBasic6Parser.LOOP:
	                    case VisualBasic6Parser.LEN:
	                    case VisualBasic6Parser.LET:
	                    case VisualBasic6Parser.LIB:
	                    case VisualBasic6Parser.LIKE:
	                    case VisualBasic6Parser.LSET:
	                    case VisualBasic6Parser.ME:
	                    case VisualBasic6Parser.MID:
	                    case VisualBasic6Parser.MKDIR:
	                    case VisualBasic6Parser.MOD:
	                    case VisualBasic6Parser.NAME:
	                    case VisualBasic6Parser.NEXT:
	                    case VisualBasic6Parser.NEW:
	                    case VisualBasic6Parser.NOT:
	                    case VisualBasic6Parser.NOTHING:
	                    case VisualBasic6Parser.NULL_:
	                    case VisualBasic6Parser.OBJECT:
	                    case VisualBasic6Parser.ON:
	                    case VisualBasic6Parser.OPEN:
	                    case VisualBasic6Parser.OPTIONAL:
	                    case VisualBasic6Parser.OR:
	                    case VisualBasic6Parser.OUTPUT:
	                    case VisualBasic6Parser.PARAMARRAY:
	                    case VisualBasic6Parser.PRESERVE:
	                    case VisualBasic6Parser.PRINT:
	                    case VisualBasic6Parser.PRIVATE:
	                    case VisualBasic6Parser.PUBLIC:
	                    case VisualBasic6Parser.PUT:
	                    case VisualBasic6Parser.RANDOM:
	                    case VisualBasic6Parser.RANDOMIZE:
	                    case VisualBasic6Parser.RAISEEVENT:
	                    case VisualBasic6Parser.READ:
	                    case VisualBasic6Parser.REDIM:
	                    case VisualBasic6Parser.REM:
	                    case VisualBasic6Parser.RESET:
	                    case VisualBasic6Parser.RESUME:
	                    case VisualBasic6Parser.RETURN:
	                    case VisualBasic6Parser.RMDIR:
	                    case VisualBasic6Parser.RSET:
	                    case VisualBasic6Parser.SAVEPICTURE:
	                    case VisualBasic6Parser.SAVESETTING:
	                    case VisualBasic6Parser.SEEK:
	                    case VisualBasic6Parser.SELECT:
	                    case VisualBasic6Parser.SENDKEYS:
	                    case VisualBasic6Parser.SET:
	                    case VisualBasic6Parser.SETATTR:
	                    case VisualBasic6Parser.SHARED:
	                    case VisualBasic6Parser.SINGLE:
	                    case VisualBasic6Parser.SPC:
	                    case VisualBasic6Parser.STATIC:
	                    case VisualBasic6Parser.STEP:
	                    case VisualBasic6Parser.STOP:
	                    case VisualBasic6Parser.STRING:
	                    case VisualBasic6Parser.SUB:
	                    case VisualBasic6Parser.TAB:
	                    case VisualBasic6Parser.TEXT:
	                    case VisualBasic6Parser.THEN:
	                    case VisualBasic6Parser.TIME:
	                    case VisualBasic6Parser.TO:
	                    case VisualBasic6Parser.TRUE:
	                    case VisualBasic6Parser.TYPE:
	                    case VisualBasic6Parser.TYPEOF:
	                    case VisualBasic6Parser.UNLOAD:
	                    case VisualBasic6Parser.UNLOCK:
	                    case VisualBasic6Parser.UNTIL:
	                    case VisualBasic6Parser.VARIANT:
	                    case VisualBasic6Parser.VERSION:
	                    case VisualBasic6Parser.WEND:
	                    case VisualBasic6Parser.WHILE:
	                    case VisualBasic6Parser.WIDTH:
	                    case VisualBasic6Parser.WITH:
	                    case VisualBasic6Parser.WITHEVENTS:
	                    case VisualBasic6Parser.WRITE:
	                    case VisualBasic6Parser.XOR:
	                        this.state = 2751;
	                        this.ambiguousKeyword();
	                        break;
	                    case VisualBasic6Parser.IDENTIFIER:
	                        this.state = 2752;
	                        this.match(VisualBasic6Parser.IDENTIFIER);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 2757;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,473,this._ctx);
	            }

	            break;
	        case VisualBasic6Parser.ACCESS:
	        case VisualBasic6Parser.ADDRESSOF:
	        case VisualBasic6Parser.ALIAS:
	        case VisualBasic6Parser.AND:
	        case VisualBasic6Parser.ATTRIBUTE:
	        case VisualBasic6Parser.APPACTIVATE:
	        case VisualBasic6Parser.APPEND:
	        case VisualBasic6Parser.AS:
	        case VisualBasic6Parser.BEEP:
	        case VisualBasic6Parser.BEGIN:
	        case VisualBasic6Parser.BINARY:
	        case VisualBasic6Parser.BOOLEAN:
	        case VisualBasic6Parser.BYVAL:
	        case VisualBasic6Parser.BYREF:
	        case VisualBasic6Parser.BYTE:
	        case VisualBasic6Parser.CALL:
	        case VisualBasic6Parser.CASE:
	        case VisualBasic6Parser.CHDIR:
	        case VisualBasic6Parser.CHDRIVE:
	        case VisualBasic6Parser.CLASS:
	        case VisualBasic6Parser.CLOSE:
	        case VisualBasic6Parser.COLLECTION:
	        case VisualBasic6Parser.CONST:
	        case VisualBasic6Parser.DATE:
	        case VisualBasic6Parser.DECLARE:
	        case VisualBasic6Parser.DEFBOOL:
	        case VisualBasic6Parser.DEFBYTE:
	        case VisualBasic6Parser.DEFDATE:
	        case VisualBasic6Parser.DEFDBL:
	        case VisualBasic6Parser.DEFDEC:
	        case VisualBasic6Parser.DEFCUR:
	        case VisualBasic6Parser.DEFINT:
	        case VisualBasic6Parser.DEFLNG:
	        case VisualBasic6Parser.DEFOBJ:
	        case VisualBasic6Parser.DEFSNG:
	        case VisualBasic6Parser.DEFSTR:
	        case VisualBasic6Parser.DEFVAR:
	        case VisualBasic6Parser.DELETESETTING:
	        case VisualBasic6Parser.DIM:
	        case VisualBasic6Parser.DO:
	        case VisualBasic6Parser.DOUBLE:
	        case VisualBasic6Parser.EACH:
	        case VisualBasic6Parser.ELSE:
	        case VisualBasic6Parser.ELSEIF:
	        case VisualBasic6Parser.END:
	        case VisualBasic6Parser.ENUM:
	        case VisualBasic6Parser.EQV:
	        case VisualBasic6Parser.ERASE:
	        case VisualBasic6Parser.ERROR:
	        case VisualBasic6Parser.EVENT:
	        case VisualBasic6Parser.FALSE:
	        case VisualBasic6Parser.FILECOPY:
	        case VisualBasic6Parser.FRIEND:
	        case VisualBasic6Parser.FOR:
	        case VisualBasic6Parser.FUNCTION:
	        case VisualBasic6Parser.GET:
	        case VisualBasic6Parser.GLOBAL:
	        case VisualBasic6Parser.GOSUB:
	        case VisualBasic6Parser.GOTO:
	        case VisualBasic6Parser.IF:
	        case VisualBasic6Parser.IMP:
	        case VisualBasic6Parser.IMPLEMENTS:
	        case VisualBasic6Parser.IN:
	        case VisualBasic6Parser.INPUT:
	        case VisualBasic6Parser.IS:
	        case VisualBasic6Parser.INTEGER:
	        case VisualBasic6Parser.KILL:
	        case VisualBasic6Parser.LOAD:
	        case VisualBasic6Parser.LOCK:
	        case VisualBasic6Parser.LONG:
	        case VisualBasic6Parser.LOOP:
	        case VisualBasic6Parser.LEN:
	        case VisualBasic6Parser.LET:
	        case VisualBasic6Parser.LIB:
	        case VisualBasic6Parser.LIKE:
	        case VisualBasic6Parser.LSET:
	        case VisualBasic6Parser.ME:
	        case VisualBasic6Parser.MID:
	        case VisualBasic6Parser.MKDIR:
	        case VisualBasic6Parser.MOD:
	        case VisualBasic6Parser.NAME:
	        case VisualBasic6Parser.NEXT:
	        case VisualBasic6Parser.NEW:
	        case VisualBasic6Parser.NOT:
	        case VisualBasic6Parser.NOTHING:
	        case VisualBasic6Parser.NULL_:
	        case VisualBasic6Parser.OBJECT:
	        case VisualBasic6Parser.ON:
	        case VisualBasic6Parser.OPEN:
	        case VisualBasic6Parser.OPTIONAL:
	        case VisualBasic6Parser.OR:
	        case VisualBasic6Parser.OUTPUT:
	        case VisualBasic6Parser.PARAMARRAY:
	        case VisualBasic6Parser.PRESERVE:
	        case VisualBasic6Parser.PRINT:
	        case VisualBasic6Parser.PRIVATE:
	        case VisualBasic6Parser.PUBLIC:
	        case VisualBasic6Parser.PUT:
	        case VisualBasic6Parser.RANDOM:
	        case VisualBasic6Parser.RANDOMIZE:
	        case VisualBasic6Parser.RAISEEVENT:
	        case VisualBasic6Parser.READ:
	        case VisualBasic6Parser.REDIM:
	        case VisualBasic6Parser.REM:
	        case VisualBasic6Parser.RESET:
	        case VisualBasic6Parser.RESUME:
	        case VisualBasic6Parser.RETURN:
	        case VisualBasic6Parser.RMDIR:
	        case VisualBasic6Parser.RSET:
	        case VisualBasic6Parser.SAVEPICTURE:
	        case VisualBasic6Parser.SAVESETTING:
	        case VisualBasic6Parser.SEEK:
	        case VisualBasic6Parser.SELECT:
	        case VisualBasic6Parser.SENDKEYS:
	        case VisualBasic6Parser.SET:
	        case VisualBasic6Parser.SETATTR:
	        case VisualBasic6Parser.SHARED:
	        case VisualBasic6Parser.SINGLE:
	        case VisualBasic6Parser.SPC:
	        case VisualBasic6Parser.STATIC:
	        case VisualBasic6Parser.STEP:
	        case VisualBasic6Parser.STOP:
	        case VisualBasic6Parser.STRING:
	        case VisualBasic6Parser.SUB:
	        case VisualBasic6Parser.TAB:
	        case VisualBasic6Parser.TEXT:
	        case VisualBasic6Parser.THEN:
	        case VisualBasic6Parser.TIME:
	        case VisualBasic6Parser.TO:
	        case VisualBasic6Parser.TRUE:
	        case VisualBasic6Parser.TYPE:
	        case VisualBasic6Parser.TYPEOF:
	        case VisualBasic6Parser.UNLOAD:
	        case VisualBasic6Parser.UNLOCK:
	        case VisualBasic6Parser.UNTIL:
	        case VisualBasic6Parser.VARIANT:
	        case VisualBasic6Parser.VERSION:
	        case VisualBasic6Parser.WEND:
	        case VisualBasic6Parser.WHILE:
	        case VisualBasic6Parser.WIDTH:
	        case VisualBasic6Parser.WITH:
	        case VisualBasic6Parser.WITHEVENTS:
	        case VisualBasic6Parser.WRITE:
	        case VisualBasic6Parser.XOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2758;
	            this.ambiguousKeyword();
	            this.state = 2761; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2761;
	            		this._errHandler.sync(this);
	            		switch(this._input.LA(1)) {
	            		case VisualBasic6Parser.ACCESS:
	            		case VisualBasic6Parser.ADDRESSOF:
	            		case VisualBasic6Parser.ALIAS:
	            		case VisualBasic6Parser.AND:
	            		case VisualBasic6Parser.ATTRIBUTE:
	            		case VisualBasic6Parser.APPACTIVATE:
	            		case VisualBasic6Parser.APPEND:
	            		case VisualBasic6Parser.AS:
	            		case VisualBasic6Parser.BEEP:
	            		case VisualBasic6Parser.BEGIN:
	            		case VisualBasic6Parser.BINARY:
	            		case VisualBasic6Parser.BOOLEAN:
	            		case VisualBasic6Parser.BYVAL:
	            		case VisualBasic6Parser.BYREF:
	            		case VisualBasic6Parser.BYTE:
	            		case VisualBasic6Parser.CALL:
	            		case VisualBasic6Parser.CASE:
	            		case VisualBasic6Parser.CHDIR:
	            		case VisualBasic6Parser.CHDRIVE:
	            		case VisualBasic6Parser.CLASS:
	            		case VisualBasic6Parser.CLOSE:
	            		case VisualBasic6Parser.COLLECTION:
	            		case VisualBasic6Parser.CONST:
	            		case VisualBasic6Parser.DATE:
	            		case VisualBasic6Parser.DECLARE:
	            		case VisualBasic6Parser.DEFBOOL:
	            		case VisualBasic6Parser.DEFBYTE:
	            		case VisualBasic6Parser.DEFDATE:
	            		case VisualBasic6Parser.DEFDBL:
	            		case VisualBasic6Parser.DEFDEC:
	            		case VisualBasic6Parser.DEFCUR:
	            		case VisualBasic6Parser.DEFINT:
	            		case VisualBasic6Parser.DEFLNG:
	            		case VisualBasic6Parser.DEFOBJ:
	            		case VisualBasic6Parser.DEFSNG:
	            		case VisualBasic6Parser.DEFSTR:
	            		case VisualBasic6Parser.DEFVAR:
	            		case VisualBasic6Parser.DELETESETTING:
	            		case VisualBasic6Parser.DIM:
	            		case VisualBasic6Parser.DO:
	            		case VisualBasic6Parser.DOUBLE:
	            		case VisualBasic6Parser.EACH:
	            		case VisualBasic6Parser.ELSE:
	            		case VisualBasic6Parser.ELSEIF:
	            		case VisualBasic6Parser.END:
	            		case VisualBasic6Parser.ENUM:
	            		case VisualBasic6Parser.EQV:
	            		case VisualBasic6Parser.ERASE:
	            		case VisualBasic6Parser.ERROR:
	            		case VisualBasic6Parser.EVENT:
	            		case VisualBasic6Parser.FALSE:
	            		case VisualBasic6Parser.FILECOPY:
	            		case VisualBasic6Parser.FRIEND:
	            		case VisualBasic6Parser.FOR:
	            		case VisualBasic6Parser.FUNCTION:
	            		case VisualBasic6Parser.GET:
	            		case VisualBasic6Parser.GLOBAL:
	            		case VisualBasic6Parser.GOSUB:
	            		case VisualBasic6Parser.GOTO:
	            		case VisualBasic6Parser.IF:
	            		case VisualBasic6Parser.IMP:
	            		case VisualBasic6Parser.IMPLEMENTS:
	            		case VisualBasic6Parser.IN:
	            		case VisualBasic6Parser.INPUT:
	            		case VisualBasic6Parser.IS:
	            		case VisualBasic6Parser.INTEGER:
	            		case VisualBasic6Parser.KILL:
	            		case VisualBasic6Parser.LOAD:
	            		case VisualBasic6Parser.LOCK:
	            		case VisualBasic6Parser.LONG:
	            		case VisualBasic6Parser.LOOP:
	            		case VisualBasic6Parser.LEN:
	            		case VisualBasic6Parser.LET:
	            		case VisualBasic6Parser.LIB:
	            		case VisualBasic6Parser.LIKE:
	            		case VisualBasic6Parser.LSET:
	            		case VisualBasic6Parser.ME:
	            		case VisualBasic6Parser.MID:
	            		case VisualBasic6Parser.MKDIR:
	            		case VisualBasic6Parser.MOD:
	            		case VisualBasic6Parser.NAME:
	            		case VisualBasic6Parser.NEXT:
	            		case VisualBasic6Parser.NEW:
	            		case VisualBasic6Parser.NOT:
	            		case VisualBasic6Parser.NOTHING:
	            		case VisualBasic6Parser.NULL_:
	            		case VisualBasic6Parser.OBJECT:
	            		case VisualBasic6Parser.ON:
	            		case VisualBasic6Parser.OPEN:
	            		case VisualBasic6Parser.OPTIONAL:
	            		case VisualBasic6Parser.OR:
	            		case VisualBasic6Parser.OUTPUT:
	            		case VisualBasic6Parser.PARAMARRAY:
	            		case VisualBasic6Parser.PRESERVE:
	            		case VisualBasic6Parser.PRINT:
	            		case VisualBasic6Parser.PRIVATE:
	            		case VisualBasic6Parser.PUBLIC:
	            		case VisualBasic6Parser.PUT:
	            		case VisualBasic6Parser.RANDOM:
	            		case VisualBasic6Parser.RANDOMIZE:
	            		case VisualBasic6Parser.RAISEEVENT:
	            		case VisualBasic6Parser.READ:
	            		case VisualBasic6Parser.REDIM:
	            		case VisualBasic6Parser.REM:
	            		case VisualBasic6Parser.RESET:
	            		case VisualBasic6Parser.RESUME:
	            		case VisualBasic6Parser.RETURN:
	            		case VisualBasic6Parser.RMDIR:
	            		case VisualBasic6Parser.RSET:
	            		case VisualBasic6Parser.SAVEPICTURE:
	            		case VisualBasic6Parser.SAVESETTING:
	            		case VisualBasic6Parser.SEEK:
	            		case VisualBasic6Parser.SELECT:
	            		case VisualBasic6Parser.SENDKEYS:
	            		case VisualBasic6Parser.SET:
	            		case VisualBasic6Parser.SETATTR:
	            		case VisualBasic6Parser.SHARED:
	            		case VisualBasic6Parser.SINGLE:
	            		case VisualBasic6Parser.SPC:
	            		case VisualBasic6Parser.STATIC:
	            		case VisualBasic6Parser.STEP:
	            		case VisualBasic6Parser.STOP:
	            		case VisualBasic6Parser.STRING:
	            		case VisualBasic6Parser.SUB:
	            		case VisualBasic6Parser.TAB:
	            		case VisualBasic6Parser.TEXT:
	            		case VisualBasic6Parser.THEN:
	            		case VisualBasic6Parser.TIME:
	            		case VisualBasic6Parser.TO:
	            		case VisualBasic6Parser.TRUE:
	            		case VisualBasic6Parser.TYPE:
	            		case VisualBasic6Parser.TYPEOF:
	            		case VisualBasic6Parser.UNLOAD:
	            		case VisualBasic6Parser.UNLOCK:
	            		case VisualBasic6Parser.UNTIL:
	            		case VisualBasic6Parser.VARIANT:
	            		case VisualBasic6Parser.VERSION:
	            		case VisualBasic6Parser.WEND:
	            		case VisualBasic6Parser.WHILE:
	            		case VisualBasic6Parser.WIDTH:
	            		case VisualBasic6Parser.WITH:
	            		case VisualBasic6Parser.WITHEVENTS:
	            		case VisualBasic6Parser.WRITE:
	            		case VisualBasic6Parser.XOR:
	            		    this.state = 2759;
	            		    this.ambiguousKeyword();
	            		    break;
	            		case VisualBasic6Parser.IDENTIFIER:
	            		    this.state = 2760;
	            		    this.match(VisualBasic6Parser.IDENTIFIER);
	            		    break;
	            		default:
	            		    throw new antlr4.error.NoViableAltException(this);
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2763; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,475, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, VisualBasic6Parser.RULE_comparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2767;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.IS || _la===VisualBasic6Parser.LIKE || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (VisualBasic6Parser.EQ - 187)) | (1 << (VisualBasic6Parser.GEQ - 187)) | (1 << (VisualBasic6Parser.GT - 187)) | (1 << (VisualBasic6Parser.LEQ - 187)) | (1 << (VisualBasic6Parser.LT - 187)) | (1 << (VisualBasic6Parser.NEQ - 187)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complexType() {
	    let localctx = new ComplexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, VisualBasic6Parser.RULE_complexType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2769;
	        this.ambiguousIdentifier();
	        this.state = 2774;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,477,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2770;
	                this.match(VisualBasic6Parser.DOT);
	                this.state = 2771;
	                this.ambiguousIdentifier(); 
	            }
	            this.state = 2776;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,477,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldLength() {
	    let localctx = new FieldLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, VisualBasic6Parser.RULE_fieldLength);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2777;
	        this.match(VisualBasic6Parser.MULT);
	        this.state = 2779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===VisualBasic6Parser.WS) {
	            this.state = 2778;
	            this.match(VisualBasic6Parser.WS);
	        }

	        this.state = 2783;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case VisualBasic6Parser.MINUS:
	        case VisualBasic6Parser.PLUS:
	        case VisualBasic6Parser.INTEGERLITERAL:
	            this.state = 2781;
	            this.integerLiteral();
	            break;
	        case VisualBasic6Parser.ACCESS:
	        case VisualBasic6Parser.ADDRESSOF:
	        case VisualBasic6Parser.ALIAS:
	        case VisualBasic6Parser.AND:
	        case VisualBasic6Parser.ATTRIBUTE:
	        case VisualBasic6Parser.APPACTIVATE:
	        case VisualBasic6Parser.APPEND:
	        case VisualBasic6Parser.AS:
	        case VisualBasic6Parser.BEEP:
	        case VisualBasic6Parser.BEGIN:
	        case VisualBasic6Parser.BINARY:
	        case VisualBasic6Parser.BOOLEAN:
	        case VisualBasic6Parser.BYVAL:
	        case VisualBasic6Parser.BYREF:
	        case VisualBasic6Parser.BYTE:
	        case VisualBasic6Parser.CALL:
	        case VisualBasic6Parser.CASE:
	        case VisualBasic6Parser.CHDIR:
	        case VisualBasic6Parser.CHDRIVE:
	        case VisualBasic6Parser.CLASS:
	        case VisualBasic6Parser.CLOSE:
	        case VisualBasic6Parser.COLLECTION:
	        case VisualBasic6Parser.CONST:
	        case VisualBasic6Parser.DATE:
	        case VisualBasic6Parser.DECLARE:
	        case VisualBasic6Parser.DEFBOOL:
	        case VisualBasic6Parser.DEFBYTE:
	        case VisualBasic6Parser.DEFDATE:
	        case VisualBasic6Parser.DEFDBL:
	        case VisualBasic6Parser.DEFDEC:
	        case VisualBasic6Parser.DEFCUR:
	        case VisualBasic6Parser.DEFINT:
	        case VisualBasic6Parser.DEFLNG:
	        case VisualBasic6Parser.DEFOBJ:
	        case VisualBasic6Parser.DEFSNG:
	        case VisualBasic6Parser.DEFSTR:
	        case VisualBasic6Parser.DEFVAR:
	        case VisualBasic6Parser.DELETESETTING:
	        case VisualBasic6Parser.DIM:
	        case VisualBasic6Parser.DO:
	        case VisualBasic6Parser.DOUBLE:
	        case VisualBasic6Parser.EACH:
	        case VisualBasic6Parser.ELSE:
	        case VisualBasic6Parser.ELSEIF:
	        case VisualBasic6Parser.END:
	        case VisualBasic6Parser.ENUM:
	        case VisualBasic6Parser.EQV:
	        case VisualBasic6Parser.ERASE:
	        case VisualBasic6Parser.ERROR:
	        case VisualBasic6Parser.EVENT:
	        case VisualBasic6Parser.FALSE:
	        case VisualBasic6Parser.FILECOPY:
	        case VisualBasic6Parser.FRIEND:
	        case VisualBasic6Parser.FOR:
	        case VisualBasic6Parser.FUNCTION:
	        case VisualBasic6Parser.GET:
	        case VisualBasic6Parser.GLOBAL:
	        case VisualBasic6Parser.GOSUB:
	        case VisualBasic6Parser.GOTO:
	        case VisualBasic6Parser.IF:
	        case VisualBasic6Parser.IMP:
	        case VisualBasic6Parser.IMPLEMENTS:
	        case VisualBasic6Parser.IN:
	        case VisualBasic6Parser.INPUT:
	        case VisualBasic6Parser.IS:
	        case VisualBasic6Parser.INTEGER:
	        case VisualBasic6Parser.KILL:
	        case VisualBasic6Parser.LOAD:
	        case VisualBasic6Parser.LOCK:
	        case VisualBasic6Parser.LONG:
	        case VisualBasic6Parser.LOOP:
	        case VisualBasic6Parser.LEN:
	        case VisualBasic6Parser.LET:
	        case VisualBasic6Parser.LIB:
	        case VisualBasic6Parser.LIKE:
	        case VisualBasic6Parser.LSET:
	        case VisualBasic6Parser.ME:
	        case VisualBasic6Parser.MID:
	        case VisualBasic6Parser.MKDIR:
	        case VisualBasic6Parser.MOD:
	        case VisualBasic6Parser.NAME:
	        case VisualBasic6Parser.NEXT:
	        case VisualBasic6Parser.NEW:
	        case VisualBasic6Parser.NOT:
	        case VisualBasic6Parser.NOTHING:
	        case VisualBasic6Parser.NULL_:
	        case VisualBasic6Parser.OBJECT:
	        case VisualBasic6Parser.ON:
	        case VisualBasic6Parser.OPEN:
	        case VisualBasic6Parser.OPTIONAL:
	        case VisualBasic6Parser.OR:
	        case VisualBasic6Parser.OUTPUT:
	        case VisualBasic6Parser.PARAMARRAY:
	        case VisualBasic6Parser.PRESERVE:
	        case VisualBasic6Parser.PRINT:
	        case VisualBasic6Parser.PRIVATE:
	        case VisualBasic6Parser.PUBLIC:
	        case VisualBasic6Parser.PUT:
	        case VisualBasic6Parser.RANDOM:
	        case VisualBasic6Parser.RANDOMIZE:
	        case VisualBasic6Parser.RAISEEVENT:
	        case VisualBasic6Parser.READ:
	        case VisualBasic6Parser.REDIM:
	        case VisualBasic6Parser.REM:
	        case VisualBasic6Parser.RESET:
	        case VisualBasic6Parser.RESUME:
	        case VisualBasic6Parser.RETURN:
	        case VisualBasic6Parser.RMDIR:
	        case VisualBasic6Parser.RSET:
	        case VisualBasic6Parser.SAVEPICTURE:
	        case VisualBasic6Parser.SAVESETTING:
	        case VisualBasic6Parser.SEEK:
	        case VisualBasic6Parser.SELECT:
	        case VisualBasic6Parser.SENDKEYS:
	        case VisualBasic6Parser.SET:
	        case VisualBasic6Parser.SETATTR:
	        case VisualBasic6Parser.SHARED:
	        case VisualBasic6Parser.SINGLE:
	        case VisualBasic6Parser.SPC:
	        case VisualBasic6Parser.STATIC:
	        case VisualBasic6Parser.STEP:
	        case VisualBasic6Parser.STOP:
	        case VisualBasic6Parser.STRING:
	        case VisualBasic6Parser.SUB:
	        case VisualBasic6Parser.TAB:
	        case VisualBasic6Parser.TEXT:
	        case VisualBasic6Parser.THEN:
	        case VisualBasic6Parser.TIME:
	        case VisualBasic6Parser.TO:
	        case VisualBasic6Parser.TRUE:
	        case VisualBasic6Parser.TYPE:
	        case VisualBasic6Parser.TYPEOF:
	        case VisualBasic6Parser.UNLOAD:
	        case VisualBasic6Parser.UNLOCK:
	        case VisualBasic6Parser.UNTIL:
	        case VisualBasic6Parser.VARIANT:
	        case VisualBasic6Parser.VERSION:
	        case VisualBasic6Parser.WEND:
	        case VisualBasic6Parser.WHILE:
	        case VisualBasic6Parser.WIDTH:
	        case VisualBasic6Parser.WITH:
	        case VisualBasic6Parser.WITHEVENTS:
	        case VisualBasic6Parser.WRITE:
	        case VisualBasic6Parser.XOR:
	        case VisualBasic6Parser.L_SQUARE_BRACKET:
	        case VisualBasic6Parser.IDENTIFIER:
	            this.state = 2782;
	            this.ambiguousIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letterrange() {
	    let localctx = new LetterrangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, VisualBasic6Parser.RULE_letterrange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2785;
	        this.certainIdentifier();
	        this.state = 2794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,482,this._ctx);
	        if(la_===1) {
	            this.state = 2787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2786;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2789;
	            this.match(VisualBasic6Parser.MINUS);
	            this.state = 2791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2790;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2793;
	            this.certainIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineLabel() {
	    let localctx = new LineLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, VisualBasic6Parser.RULE_lineLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2796;
	        this.ambiguousIdentifier();
	        this.state = 2797;
	        this.match(VisualBasic6Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, VisualBasic6Parser.RULE_literal);
	    try {
	        this.state = 2810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2799;
	            this.match(VisualBasic6Parser.COLORLITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2800;
	            this.match(VisualBasic6Parser.DATELITERAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2801;
	            this.doubleLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2802;
	            this.match(VisualBasic6Parser.FILENUMBER);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2803;
	            this.integerLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2804;
	            this.octalLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2805;
	            this.match(VisualBasic6Parser.STRINGLITERAL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2806;
	            this.match(VisualBasic6Parser.TRUE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2807;
	            this.match(VisualBasic6Parser.FALSE);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2808;
	            this.match(VisualBasic6Parser.NOTHING);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2809;
	            this.match(VisualBasic6Parser.NULL_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publicPrivateVisibility() {
	    let localctx = new PublicPrivateVisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, VisualBasic6Parser.RULE_publicPrivateVisibility);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2812;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publicPrivateGlobalVisibility() {
	    let localctx = new PublicPrivateGlobalVisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, VisualBasic6Parser.RULE_publicPrivateGlobalVisibility);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2814;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, VisualBasic6Parser.RULE_type_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2816;
	            this.baseType();
	            break;

	        case 2:
	            this.state = 2817;
	            this.complexType();
	            break;

	        }
	        this.state = 2828;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	        if(la_===1) {
	            this.state = 2821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2820;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2823;
	            this.match(VisualBasic6Parser.LPAREN);
	            this.state = 2825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===VisualBasic6Parser.WS) {
	                this.state = 2824;
	                this.match(VisualBasic6Parser.WS);
	            }

	            this.state = 2827;
	            this.match(VisualBasic6Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeHint() {
	    let localctx = new TypeHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, VisualBasic6Parser.RULE_typeHint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2830;
	        _la = this._input.LA(1);
	        if(!(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visibility() {
	    let localctx = new VisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, VisualBasic6Parser.RULE_visibility);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2832;
	        _la = this._input.LA(1);
	        if(!(_la===VisualBasic6Parser.FRIEND || _la===VisualBasic6Parser.GLOBAL || _la===VisualBasic6Parser.PRIVATE || _la===VisualBasic6Parser.PUBLIC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousKeyword() {
	    let localctx = new AmbiguousKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, VisualBasic6Parser.RULE_ambiguousKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2834;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (VisualBasic6Parser.DEFCUR - 32)) | (1 << (VisualBasic6Parser.DEFINT - 32)) | (1 << (VisualBasic6Parser.DEFLNG - 32)) | (1 << (VisualBasic6Parser.DEFOBJ - 32)) | (1 << (VisualBasic6Parser.DEFSNG - 32)) | (1 << (VisualBasic6Parser.DEFSTR - 32)) | (1 << (VisualBasic6Parser.DEFVAR - 32)) | (1 << (VisualBasic6Parser.DELETESETTING - 32)) | (1 << (VisualBasic6Parser.DIM - 32)) | (1 << (VisualBasic6Parser.DO - 32)) | (1 << (VisualBasic6Parser.DOUBLE - 32)) | (1 << (VisualBasic6Parser.EACH - 32)) | (1 << (VisualBasic6Parser.ELSE - 32)) | (1 << (VisualBasic6Parser.ELSEIF - 32)) | (1 << (VisualBasic6Parser.END - 32)) | (1 << (VisualBasic6Parser.ENUM - 32)) | (1 << (VisualBasic6Parser.EQV - 32)) | (1 << (VisualBasic6Parser.ERASE - 32)) | (1 << (VisualBasic6Parser.ERROR - 32)) | (1 << (VisualBasic6Parser.EVENT - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (VisualBasic6Parser.ME - 100)) | (1 << (VisualBasic6Parser.MID - 100)) | (1 << (VisualBasic6Parser.MKDIR - 100)) | (1 << (VisualBasic6Parser.MOD - 100)) | (1 << (VisualBasic6Parser.NAME - 100)) | (1 << (VisualBasic6Parser.NEXT - 100)) | (1 << (VisualBasic6Parser.NEW - 100)) | (1 << (VisualBasic6Parser.NOT - 100)) | (1 << (VisualBasic6Parser.NOTHING - 100)) | (1 << (VisualBasic6Parser.NULL_ - 100)) | (1 << (VisualBasic6Parser.OBJECT - 100)) | (1 << (VisualBasic6Parser.ON - 100)) | (1 << (VisualBasic6Parser.OPEN - 100)) | (1 << (VisualBasic6Parser.OPTIONAL - 100)) | (1 << (VisualBasic6Parser.OR - 100)) | (1 << (VisualBasic6Parser.OUTPUT - 100)) | (1 << (VisualBasic6Parser.PARAMARRAY - 100)) | (1 << (VisualBasic6Parser.PRESERVE - 100)) | (1 << (VisualBasic6Parser.PRINT - 100)) | (1 << (VisualBasic6Parser.PRIVATE - 100)) | (1 << (VisualBasic6Parser.PUBLIC - 100)) | (1 << (VisualBasic6Parser.PUT - 100)) | (1 << (VisualBasic6Parser.RANDOM - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (VisualBasic6Parser.RANDOMIZE - 132)) | (1 << (VisualBasic6Parser.RAISEEVENT - 132)) | (1 << (VisualBasic6Parser.READ - 132)) | (1 << (VisualBasic6Parser.REDIM - 132)) | (1 << (VisualBasic6Parser.REM - 132)) | (1 << (VisualBasic6Parser.RESET - 132)) | (1 << (VisualBasic6Parser.RESUME - 132)) | (1 << (VisualBasic6Parser.RETURN - 132)) | (1 << (VisualBasic6Parser.RMDIR - 132)) | (1 << (VisualBasic6Parser.RSET - 132)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 132)) | (1 << (VisualBasic6Parser.SAVESETTING - 132)) | (1 << (VisualBasic6Parser.SEEK - 132)) | (1 << (VisualBasic6Parser.SELECT - 132)) | (1 << (VisualBasic6Parser.SENDKEYS - 132)) | (1 << (VisualBasic6Parser.SET - 132)) | (1 << (VisualBasic6Parser.SETATTR - 132)) | (1 << (VisualBasic6Parser.SHARED - 132)) | (1 << (VisualBasic6Parser.SINGLE - 132)) | (1 << (VisualBasic6Parser.SPC - 132)) | (1 << (VisualBasic6Parser.STATIC - 132)) | (1 << (VisualBasic6Parser.STEP - 132)) | (1 << (VisualBasic6Parser.STOP - 132)) | (1 << (VisualBasic6Parser.STRING - 132)) | (1 << (VisualBasic6Parser.SUB - 132)) | (1 << (VisualBasic6Parser.TAB - 132)) | (1 << (VisualBasic6Parser.TEXT - 132)) | (1 << (VisualBasic6Parser.THEN - 132)) | (1 << (VisualBasic6Parser.TIME - 132)) | (1 << (VisualBasic6Parser.TO - 132)) | (1 << (VisualBasic6Parser.TRUE - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (VisualBasic6Parser.TYPE - 164)) | (1 << (VisualBasic6Parser.TYPEOF - 164)) | (1 << (VisualBasic6Parser.UNLOAD - 164)) | (1 << (VisualBasic6Parser.UNLOCK - 164)) | (1 << (VisualBasic6Parser.UNTIL - 164)) | (1 << (VisualBasic6Parser.VARIANT - 164)) | (1 << (VisualBasic6Parser.VERSION - 164)) | (1 << (VisualBasic6Parser.WEND - 164)) | (1 << (VisualBasic6Parser.WHILE - 164)) | (1 << (VisualBasic6Parser.WIDTH - 164)) | (1 << (VisualBasic6Parser.WITH - 164)) | (1 << (VisualBasic6Parser.WITHEVENTS - 164)) | (1 << (VisualBasic6Parser.WRITE - 164)) | (1 << (VisualBasic6Parser.XOR - 164)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, VisualBasic6Parser.RULE_integerLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS) {
	            this.state = 2836;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2842;
	        this.match(VisualBasic6Parser.INTEGERLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octalLiteral() {
	    let localctx = new OctalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, VisualBasic6Parser.RULE_octalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS) {
	            this.state = 2844;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2850;
	        this.match(VisualBasic6Parser.OCTALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleLiteral() {
	    let localctx = new DoubleLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, VisualBasic6Parser.RULE_doubleLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS) {
	            this.state = 2852;
	            _la = this._input.LA(1);
	            if(!(_la===VisualBasic6Parser.MINUS || _la===VisualBasic6Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2857;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2858;
	        this.match(VisualBasic6Parser.DOUBLELITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

VisualBasic6Parser.EOF = antlr4.Token.EOF;
VisualBasic6Parser.ACCESS = 1;
VisualBasic6Parser.ADDRESSOF = 2;
VisualBasic6Parser.ALIAS = 3;
VisualBasic6Parser.AND = 4;
VisualBasic6Parser.ATTRIBUTE = 5;
VisualBasic6Parser.APPACTIVATE = 6;
VisualBasic6Parser.APPEND = 7;
VisualBasic6Parser.AS = 8;
VisualBasic6Parser.BEEP = 9;
VisualBasic6Parser.BEGIN = 10;
VisualBasic6Parser.BEGINPROPERTY = 11;
VisualBasic6Parser.BINARY = 12;
VisualBasic6Parser.BOOLEAN = 13;
VisualBasic6Parser.BYVAL = 14;
VisualBasic6Parser.BYREF = 15;
VisualBasic6Parser.BYTE = 16;
VisualBasic6Parser.CALL = 17;
VisualBasic6Parser.CASE = 18;
VisualBasic6Parser.CHDIR = 19;
VisualBasic6Parser.CHDRIVE = 20;
VisualBasic6Parser.CLASS = 21;
VisualBasic6Parser.CLOSE = 22;
VisualBasic6Parser.COLLECTION = 23;
VisualBasic6Parser.CONST = 24;
VisualBasic6Parser.DATE = 25;
VisualBasic6Parser.DECLARE = 26;
VisualBasic6Parser.DEFBOOL = 27;
VisualBasic6Parser.DEFBYTE = 28;
VisualBasic6Parser.DEFDATE = 29;
VisualBasic6Parser.DEFDBL = 30;
VisualBasic6Parser.DEFDEC = 31;
VisualBasic6Parser.DEFCUR = 32;
VisualBasic6Parser.DEFINT = 33;
VisualBasic6Parser.DEFLNG = 34;
VisualBasic6Parser.DEFOBJ = 35;
VisualBasic6Parser.DEFSNG = 36;
VisualBasic6Parser.DEFSTR = 37;
VisualBasic6Parser.DEFVAR = 38;
VisualBasic6Parser.DELETESETTING = 39;
VisualBasic6Parser.DIM = 40;
VisualBasic6Parser.DO = 41;
VisualBasic6Parser.DOUBLE = 42;
VisualBasic6Parser.EACH = 43;
VisualBasic6Parser.ELSE = 44;
VisualBasic6Parser.ELSEIF = 45;
VisualBasic6Parser.END_ENUM = 46;
VisualBasic6Parser.END_FUNCTION = 47;
VisualBasic6Parser.END_IF = 48;
VisualBasic6Parser.END_PROPERTY = 49;
VisualBasic6Parser.END_SELECT = 50;
VisualBasic6Parser.END_SUB = 51;
VisualBasic6Parser.END_TYPE = 52;
VisualBasic6Parser.END_WITH = 53;
VisualBasic6Parser.END = 54;
VisualBasic6Parser.ENDPROPERTY = 55;
VisualBasic6Parser.ENUM = 56;
VisualBasic6Parser.EQV = 57;
VisualBasic6Parser.ERASE = 58;
VisualBasic6Parser.ERROR = 59;
VisualBasic6Parser.EVENT = 60;
VisualBasic6Parser.EXIT_DO = 61;
VisualBasic6Parser.EXIT_FOR = 62;
VisualBasic6Parser.EXIT_FUNCTION = 63;
VisualBasic6Parser.EXIT_PROPERTY = 64;
VisualBasic6Parser.EXIT_SUB = 65;
VisualBasic6Parser.FALSE = 66;
VisualBasic6Parser.FILECOPY = 67;
VisualBasic6Parser.FRIEND = 68;
VisualBasic6Parser.FOR = 69;
VisualBasic6Parser.FUNCTION = 70;
VisualBasic6Parser.GET = 71;
VisualBasic6Parser.GLOBAL = 72;
VisualBasic6Parser.GOSUB = 73;
VisualBasic6Parser.GOTO = 74;
VisualBasic6Parser.IF = 75;
VisualBasic6Parser.IMP = 76;
VisualBasic6Parser.IMPLEMENTS = 77;
VisualBasic6Parser.IN = 78;
VisualBasic6Parser.INPUT = 79;
VisualBasic6Parser.IS = 80;
VisualBasic6Parser.INTEGER = 81;
VisualBasic6Parser.KILL = 82;
VisualBasic6Parser.LOAD = 83;
VisualBasic6Parser.LOCK = 84;
VisualBasic6Parser.LONG = 85;
VisualBasic6Parser.LOOP = 86;
VisualBasic6Parser.LEN = 87;
VisualBasic6Parser.LET = 88;
VisualBasic6Parser.LIB = 89;
VisualBasic6Parser.LIKE = 90;
VisualBasic6Parser.LINE_INPUT = 91;
VisualBasic6Parser.LOCK_READ = 92;
VisualBasic6Parser.LOCK_WRITE = 93;
VisualBasic6Parser.LOCK_READ_WRITE = 94;
VisualBasic6Parser.LSET = 95;
VisualBasic6Parser.MACRO_IF = 96;
VisualBasic6Parser.MACRO_ELSEIF = 97;
VisualBasic6Parser.MACRO_ELSE = 98;
VisualBasic6Parser.MACRO_END_IF = 99;
VisualBasic6Parser.ME = 100;
VisualBasic6Parser.MID = 101;
VisualBasic6Parser.MKDIR = 102;
VisualBasic6Parser.MOD = 103;
VisualBasic6Parser.NAME = 104;
VisualBasic6Parser.NEXT = 105;
VisualBasic6Parser.NEW = 106;
VisualBasic6Parser.NOT = 107;
VisualBasic6Parser.NOTHING = 108;
VisualBasic6Parser.NULL_ = 109;
VisualBasic6Parser.OBJECT = 110;
VisualBasic6Parser.ON = 111;
VisualBasic6Parser.ON_ERROR = 112;
VisualBasic6Parser.ON_LOCAL_ERROR = 113;
VisualBasic6Parser.OPEN = 114;
VisualBasic6Parser.OPTIONAL = 115;
VisualBasic6Parser.OPTION_BASE = 116;
VisualBasic6Parser.OPTION_EXPLICIT = 117;
VisualBasic6Parser.OPTION_COMPARE = 118;
VisualBasic6Parser.OPTION_PRIVATE_MODULE = 119;
VisualBasic6Parser.OR = 120;
VisualBasic6Parser.OUTPUT = 121;
VisualBasic6Parser.PARAMARRAY = 122;
VisualBasic6Parser.PRESERVE = 123;
VisualBasic6Parser.PRINT = 124;
VisualBasic6Parser.PRIVATE = 125;
VisualBasic6Parser.PROPERTY_GET = 126;
VisualBasic6Parser.PROPERTY_LET = 127;
VisualBasic6Parser.PROPERTY_SET = 128;
VisualBasic6Parser.PUBLIC = 129;
VisualBasic6Parser.PUT = 130;
VisualBasic6Parser.RANDOM = 131;
VisualBasic6Parser.RANDOMIZE = 132;
VisualBasic6Parser.RAISEEVENT = 133;
VisualBasic6Parser.READ = 134;
VisualBasic6Parser.READ_WRITE = 135;
VisualBasic6Parser.REDIM = 136;
VisualBasic6Parser.REM = 137;
VisualBasic6Parser.RESET = 138;
VisualBasic6Parser.RESUME = 139;
VisualBasic6Parser.RETURN = 140;
VisualBasic6Parser.RMDIR = 141;
VisualBasic6Parser.RSET = 142;
VisualBasic6Parser.SAVEPICTURE = 143;
VisualBasic6Parser.SAVESETTING = 144;
VisualBasic6Parser.SEEK = 145;
VisualBasic6Parser.SELECT = 146;
VisualBasic6Parser.SENDKEYS = 147;
VisualBasic6Parser.SET = 148;
VisualBasic6Parser.SETATTR = 149;
VisualBasic6Parser.SHARED = 150;
VisualBasic6Parser.SINGLE = 151;
VisualBasic6Parser.SPC = 152;
VisualBasic6Parser.STATIC = 153;
VisualBasic6Parser.STEP = 154;
VisualBasic6Parser.STOP = 155;
VisualBasic6Parser.STRING = 156;
VisualBasic6Parser.SUB = 157;
VisualBasic6Parser.TAB = 158;
VisualBasic6Parser.TEXT = 159;
VisualBasic6Parser.THEN = 160;
VisualBasic6Parser.TIME = 161;
VisualBasic6Parser.TO = 162;
VisualBasic6Parser.TRUE = 163;
VisualBasic6Parser.TYPE = 164;
VisualBasic6Parser.TYPEOF = 165;
VisualBasic6Parser.UNLOAD = 166;
VisualBasic6Parser.UNLOCK = 167;
VisualBasic6Parser.UNTIL = 168;
VisualBasic6Parser.VARIANT = 169;
VisualBasic6Parser.VERSION = 170;
VisualBasic6Parser.WEND = 171;
VisualBasic6Parser.WHILE = 172;
VisualBasic6Parser.WIDTH = 173;
VisualBasic6Parser.WITH = 174;
VisualBasic6Parser.WITHEVENTS = 175;
VisualBasic6Parser.WRITE = 176;
VisualBasic6Parser.XOR = 177;
VisualBasic6Parser.AMPERSAND = 178;
VisualBasic6Parser.ASSIGN = 179;
VisualBasic6Parser.AT = 180;
VisualBasic6Parser.COLON = 181;
VisualBasic6Parser.COMMA = 182;
VisualBasic6Parser.IDIV = 183;
VisualBasic6Parser.DIV = 184;
VisualBasic6Parser.DOLLAR = 185;
VisualBasic6Parser.DOT = 186;
VisualBasic6Parser.EQ = 187;
VisualBasic6Parser.EXCLAMATIONMARK = 188;
VisualBasic6Parser.GEQ = 189;
VisualBasic6Parser.GT = 190;
VisualBasic6Parser.HASH = 191;
VisualBasic6Parser.LEQ = 192;
VisualBasic6Parser.LBRACE = 193;
VisualBasic6Parser.LPAREN = 194;
VisualBasic6Parser.LT = 195;
VisualBasic6Parser.MINUS = 196;
VisualBasic6Parser.MINUS_EQ = 197;
VisualBasic6Parser.MULT = 198;
VisualBasic6Parser.NEQ = 199;
VisualBasic6Parser.PERCENT = 200;
VisualBasic6Parser.PLUS = 201;
VisualBasic6Parser.PLUS_EQ = 202;
VisualBasic6Parser.POW = 203;
VisualBasic6Parser.RBRACE = 204;
VisualBasic6Parser.RPAREN = 205;
VisualBasic6Parser.SEMICOLON = 206;
VisualBasic6Parser.L_SQUARE_BRACKET = 207;
VisualBasic6Parser.R_SQUARE_BRACKET = 208;
VisualBasic6Parser.STRINGLITERAL = 209;
VisualBasic6Parser.DATELITERAL = 210;
VisualBasic6Parser.COLORLITERAL = 211;
VisualBasic6Parser.INTEGERLITERAL = 212;
VisualBasic6Parser.DOUBLELITERAL = 213;
VisualBasic6Parser.FILENUMBER = 214;
VisualBasic6Parser.OCTALLITERAL = 215;
VisualBasic6Parser.FRX_OFFSET = 216;
VisualBasic6Parser.GUID = 217;
VisualBasic6Parser.IDENTIFIER = 218;
VisualBasic6Parser.LINE_CONTINUATION = 219;
VisualBasic6Parser.NEWLINE = 220;
VisualBasic6Parser.COMMENT = 221;
VisualBasic6Parser.WS = 222;

VisualBasic6Parser.RULE_startRule = 0;
VisualBasic6Parser.RULE_module = 1;
VisualBasic6Parser.RULE_moduleReferences = 2;
VisualBasic6Parser.RULE_moduleReference = 3;
VisualBasic6Parser.RULE_moduleReferenceValue = 4;
VisualBasic6Parser.RULE_moduleReferenceComponent = 5;
VisualBasic6Parser.RULE_moduleHeader = 6;
VisualBasic6Parser.RULE_moduleConfig = 7;
VisualBasic6Parser.RULE_moduleConfigElement = 8;
VisualBasic6Parser.RULE_moduleAttributes = 9;
VisualBasic6Parser.RULE_moduleOptions = 10;
VisualBasic6Parser.RULE_moduleOption = 11;
VisualBasic6Parser.RULE_moduleBody = 12;
VisualBasic6Parser.RULE_moduleBodyElement = 13;
VisualBasic6Parser.RULE_controlProperties = 14;
VisualBasic6Parser.RULE_cp_Properties = 15;
VisualBasic6Parser.RULE_cp_SingleProperty = 16;
VisualBasic6Parser.RULE_cp_PropertyName = 17;
VisualBasic6Parser.RULE_cp_PropertyValue = 18;
VisualBasic6Parser.RULE_cp_NestedProperty = 19;
VisualBasic6Parser.RULE_cp_ControlType = 20;
VisualBasic6Parser.RULE_cp_ControlIdentifier = 21;
VisualBasic6Parser.RULE_moduleBlock = 22;
VisualBasic6Parser.RULE_attributeStmt = 23;
VisualBasic6Parser.RULE_block = 24;
VisualBasic6Parser.RULE_blockStmt = 25;
VisualBasic6Parser.RULE_appActivateStmt = 26;
VisualBasic6Parser.RULE_beepStmt = 27;
VisualBasic6Parser.RULE_chDirStmt = 28;
VisualBasic6Parser.RULE_chDriveStmt = 29;
VisualBasic6Parser.RULE_closeStmt = 30;
VisualBasic6Parser.RULE_constStmt = 31;
VisualBasic6Parser.RULE_constSubStmt = 32;
VisualBasic6Parser.RULE_dateStmt = 33;
VisualBasic6Parser.RULE_declareStmt = 34;
VisualBasic6Parser.RULE_deftypeStmt = 35;
VisualBasic6Parser.RULE_deleteSettingStmt = 36;
VisualBasic6Parser.RULE_doLoopStmt = 37;
VisualBasic6Parser.RULE_endStmt = 38;
VisualBasic6Parser.RULE_enumerationStmt = 39;
VisualBasic6Parser.RULE_enumerationStmt_Constant = 40;
VisualBasic6Parser.RULE_eraseStmt = 41;
VisualBasic6Parser.RULE_errorStmt = 42;
VisualBasic6Parser.RULE_eventStmt = 43;
VisualBasic6Parser.RULE_exitStmt = 44;
VisualBasic6Parser.RULE_filecopyStmt = 45;
VisualBasic6Parser.RULE_forEachStmt = 46;
VisualBasic6Parser.RULE_forNextStmt = 47;
VisualBasic6Parser.RULE_functionStmt = 48;
VisualBasic6Parser.RULE_getStmt = 49;
VisualBasic6Parser.RULE_goSubStmt = 50;
VisualBasic6Parser.RULE_goToStmt = 51;
VisualBasic6Parser.RULE_ifThenElseStmt = 52;
VisualBasic6Parser.RULE_ifBlockStmt = 53;
VisualBasic6Parser.RULE_ifConditionStmt = 54;
VisualBasic6Parser.RULE_ifElseIfBlockStmt = 55;
VisualBasic6Parser.RULE_ifElseBlockStmt = 56;
VisualBasic6Parser.RULE_implementsStmt = 57;
VisualBasic6Parser.RULE_inputStmt = 58;
VisualBasic6Parser.RULE_killStmt = 59;
VisualBasic6Parser.RULE_letStmt = 60;
VisualBasic6Parser.RULE_lineInputStmt = 61;
VisualBasic6Parser.RULE_loadStmt = 62;
VisualBasic6Parser.RULE_lockStmt = 63;
VisualBasic6Parser.RULE_lsetStmt = 64;
VisualBasic6Parser.RULE_macroIfThenElseStmt = 65;
VisualBasic6Parser.RULE_macroIfBlockStmt = 66;
VisualBasic6Parser.RULE_macroElseIfBlockStmt = 67;
VisualBasic6Parser.RULE_macroElseBlockStmt = 68;
VisualBasic6Parser.RULE_midStmt = 69;
VisualBasic6Parser.RULE_mkdirStmt = 70;
VisualBasic6Parser.RULE_nameStmt = 71;
VisualBasic6Parser.RULE_onErrorStmt = 72;
VisualBasic6Parser.RULE_onGoToStmt = 73;
VisualBasic6Parser.RULE_onGoSubStmt = 74;
VisualBasic6Parser.RULE_openStmt = 75;
VisualBasic6Parser.RULE_outputList = 76;
VisualBasic6Parser.RULE_outputList_Expression = 77;
VisualBasic6Parser.RULE_printStmt = 78;
VisualBasic6Parser.RULE_propertyGetStmt = 79;
VisualBasic6Parser.RULE_propertySetStmt = 80;
VisualBasic6Parser.RULE_propertyLetStmt = 81;
VisualBasic6Parser.RULE_putStmt = 82;
VisualBasic6Parser.RULE_raiseEventStmt = 83;
VisualBasic6Parser.RULE_randomizeStmt = 84;
VisualBasic6Parser.RULE_redimStmt = 85;
VisualBasic6Parser.RULE_redimSubStmt = 86;
VisualBasic6Parser.RULE_resetStmt = 87;
VisualBasic6Parser.RULE_resumeStmt = 88;
VisualBasic6Parser.RULE_returnStmt = 89;
VisualBasic6Parser.RULE_rmdirStmt = 90;
VisualBasic6Parser.RULE_rsetStmt = 91;
VisualBasic6Parser.RULE_savepictureStmt = 92;
VisualBasic6Parser.RULE_saveSettingStmt = 93;
VisualBasic6Parser.RULE_seekStmt = 94;
VisualBasic6Parser.RULE_selectCaseStmt = 95;
VisualBasic6Parser.RULE_sC_Case = 96;
VisualBasic6Parser.RULE_sC_Cond = 97;
VisualBasic6Parser.RULE_sC_CondExpr = 98;
VisualBasic6Parser.RULE_sendkeysStmt = 99;
VisualBasic6Parser.RULE_setattrStmt = 100;
VisualBasic6Parser.RULE_setStmt = 101;
VisualBasic6Parser.RULE_stopStmt = 102;
VisualBasic6Parser.RULE_subStmt = 103;
VisualBasic6Parser.RULE_timeStmt = 104;
VisualBasic6Parser.RULE_typeStmt = 105;
VisualBasic6Parser.RULE_typeStmt_Element = 106;
VisualBasic6Parser.RULE_typeOfStmt = 107;
VisualBasic6Parser.RULE_unloadStmt = 108;
VisualBasic6Parser.RULE_unlockStmt = 109;
VisualBasic6Parser.RULE_valueStmt = 110;
VisualBasic6Parser.RULE_variableStmt = 111;
VisualBasic6Parser.RULE_variableListStmt = 112;
VisualBasic6Parser.RULE_variableSubStmt = 113;
VisualBasic6Parser.RULE_whileWendStmt = 114;
VisualBasic6Parser.RULE_widthStmt = 115;
VisualBasic6Parser.RULE_withStmt = 116;
VisualBasic6Parser.RULE_writeStmt = 117;
VisualBasic6Parser.RULE_explicitCallStmt = 118;
VisualBasic6Parser.RULE_eCS_ProcedureCall = 119;
VisualBasic6Parser.RULE_eCS_MemberProcedureCall = 120;
VisualBasic6Parser.RULE_implicitCallStmt_InBlock = 121;
VisualBasic6Parser.RULE_iCS_B_ProcedureCall = 122;
VisualBasic6Parser.RULE_iCS_B_MemberProcedureCall = 123;
VisualBasic6Parser.RULE_implicitCallStmt_InStmt = 124;
VisualBasic6Parser.RULE_iCS_S_VariableOrProcedureCall = 125;
VisualBasic6Parser.RULE_iCS_S_ProcedureOrArrayCall = 126;
VisualBasic6Parser.RULE_iCS_S_NestedProcedureCall = 127;
VisualBasic6Parser.RULE_iCS_S_MembersCall = 128;
VisualBasic6Parser.RULE_iCS_S_MemberCall = 129;
VisualBasic6Parser.RULE_iCS_S_DictionaryCall = 130;
VisualBasic6Parser.RULE_argsCall = 131;
VisualBasic6Parser.RULE_argCall = 132;
VisualBasic6Parser.RULE_dictionaryCallStmt = 133;
VisualBasic6Parser.RULE_argList = 134;
VisualBasic6Parser.RULE_arg = 135;
VisualBasic6Parser.RULE_argDefaultValue = 136;
VisualBasic6Parser.RULE_subscripts = 137;
VisualBasic6Parser.RULE_subscript_ = 138;
VisualBasic6Parser.RULE_ambiguousIdentifier = 139;
VisualBasic6Parser.RULE_asTypeClause = 140;
VisualBasic6Parser.RULE_baseType = 141;
VisualBasic6Parser.RULE_certainIdentifier = 142;
VisualBasic6Parser.RULE_comparisonOperator = 143;
VisualBasic6Parser.RULE_complexType = 144;
VisualBasic6Parser.RULE_fieldLength = 145;
VisualBasic6Parser.RULE_letterrange = 146;
VisualBasic6Parser.RULE_lineLabel = 147;
VisualBasic6Parser.RULE_literal = 148;
VisualBasic6Parser.RULE_publicPrivateVisibility = 149;
VisualBasic6Parser.RULE_publicPrivateGlobalVisibility = 150;
VisualBasic6Parser.RULE_type_ = 151;
VisualBasic6Parser.RULE_typeHint = 152;
VisualBasic6Parser.RULE_visibility = 153;
VisualBasic6Parser.RULE_ambiguousKeyword = 154;
VisualBasic6Parser.RULE_integerLiteral = 155;
VisualBasic6Parser.RULE_octalLiteral = 156;
VisualBasic6Parser.RULE_doubleLiteral = 157;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_startRule;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	EOF() {
	    return this.getToken(VisualBasic6Parser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitStartRule(this);
		}
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_module;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	moduleHeader() {
	    return this.getTypedRuleContext(ModuleHeaderContext,0);
	};

	moduleReferences() {
	    return this.getTypedRuleContext(ModuleReferencesContext,0);
	};

	controlProperties() {
	    return this.getTypedRuleContext(ControlPropertiesContext,0);
	};

	moduleConfig() {
	    return this.getTypedRuleContext(ModuleConfigContext,0);
	};

	moduleAttributes() {
	    return this.getTypedRuleContext(ModuleAttributesContext,0);
	};

	moduleOptions() {
	    return this.getTypedRuleContext(ModuleOptionsContext,0);
	};

	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModule(this);
		}
	}


}



class ModuleReferencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleReferences;
    }

	moduleReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ModuleReferenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleReferences(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleReferences(this);
		}
	}


}



class ModuleReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleReference;
    }

	OBJECT() {
	    return this.getToken(VisualBasic6Parser.OBJECT, 0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	moduleReferenceValue() {
	    return this.getTypedRuleContext(ModuleReferenceValueContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	SEMICOLON() {
	    return this.getToken(VisualBasic6Parser.SEMICOLON, 0);
	};

	moduleReferenceComponent() {
	    return this.getTypedRuleContext(ModuleReferenceComponentContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleReference(this);
		}
	}


}



class ModuleReferenceValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleReferenceValue;
    }

	STRINGLITERAL() {
	    return this.getToken(VisualBasic6Parser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleReferenceValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleReferenceValue(this);
		}
	}


}



class ModuleReferenceComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleReferenceComponent;
    }

	STRINGLITERAL() {
	    return this.getToken(VisualBasic6Parser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleReferenceComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleReferenceComponent(this);
		}
	}


}



class ModuleHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleHeader;
    }

	VERSION() {
	    return this.getToken(VisualBasic6Parser.VERSION, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	doubleLiteral() {
	    return this.getTypedRuleContext(DoubleLiteralContext,0);
	};

	CLASS() {
	    return this.getToken(VisualBasic6Parser.CLASS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleHeader(this);
		}
	}


}



class ModuleConfigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleConfig;
    }

	BEGIN() {
	    return this.getToken(VisualBasic6Parser.BEGIN, 0);
	};

	END() {
	    return this.getToken(VisualBasic6Parser.END, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	moduleConfigElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleConfigElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleConfigElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleConfig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleConfig(this);
		}
	}


}



class ModuleConfigElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleConfigElement;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	NEWLINE() {
	    return this.getToken(VisualBasic6Parser.NEWLINE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleConfigElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleConfigElement(this);
		}
	}


}



class ModuleAttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleAttributes;
    }

	attributeStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeStmtContext);
	    } else {
	        return this.getTypedRuleContext(AttributeStmtContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleAttributes(this);
		}
	}


}



class ModuleOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleOptions;
    }

	moduleOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleOptionContext);
	    } else {
	        return this.getTypedRuleContext(ModuleOptionContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleOptions(this);
		}
	}


}



class ModuleOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OptionExplicitStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_EXPLICIT() {
	    return this.getToken(VisualBasic6Parser.OPTION_EXPLICIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOptionExplicitStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOptionExplicitStmt(this);
		}
	}


}

VisualBasic6Parser.OptionExplicitStmtContext = OptionExplicitStmtContext;

class OptionBaseStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_BASE() {
	    return this.getToken(VisualBasic6Parser.OPTION_BASE, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOptionBaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOptionBaseStmt(this);
		}
	}


}

VisualBasic6Parser.OptionBaseStmtContext = OptionBaseStmtContext;

class OptionPrivateModuleStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_PRIVATE_MODULE() {
	    return this.getToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOptionPrivateModuleStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOptionPrivateModuleStmt(this);
		}
	}


}

VisualBasic6Parser.OptionPrivateModuleStmtContext = OptionPrivateModuleStmtContext;

class OptionCompareStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_COMPARE() {
	    return this.getToken(VisualBasic6Parser.OPTION_COMPARE, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	BINARY() {
	    return this.getToken(VisualBasic6Parser.BINARY, 0);
	};

	TEXT() {
	    return this.getToken(VisualBasic6Parser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOptionCompareStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOptionCompareStmt(this);
		}
	}


}

VisualBasic6Parser.OptionCompareStmtContext = OptionCompareStmtContext;

class ModuleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleBody;
    }

	moduleBodyElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleBodyElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleBodyElementContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleBody(this);
		}
	}


}



class ModuleBodyElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleBodyElement;
    }

	moduleBlock() {
	    return this.getTypedRuleContext(ModuleBlockContext,0);
	};

	moduleOption() {
	    return this.getTypedRuleContext(ModuleOptionContext,0);
	};

	declareStmt() {
	    return this.getTypedRuleContext(DeclareStmtContext,0);
	};

	enumerationStmt() {
	    return this.getTypedRuleContext(EnumerationStmtContext,0);
	};

	eventStmt() {
	    return this.getTypedRuleContext(EventStmtContext,0);
	};

	functionStmt() {
	    return this.getTypedRuleContext(FunctionStmtContext,0);
	};

	macroIfThenElseStmt() {
	    return this.getTypedRuleContext(MacroIfThenElseStmtContext,0);
	};

	propertyGetStmt() {
	    return this.getTypedRuleContext(PropertyGetStmtContext,0);
	};

	propertySetStmt() {
	    return this.getTypedRuleContext(PropertySetStmtContext,0);
	};

	propertyLetStmt() {
	    return this.getTypedRuleContext(PropertyLetStmtContext,0);
	};

	subStmt() {
	    return this.getTypedRuleContext(SubStmtContext,0);
	};

	typeStmt() {
	    return this.getTypedRuleContext(TypeStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleBodyElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleBodyElement(this);
		}
	}


}



class ControlPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_controlProperties;
    }

	BEGIN() {
	    return this.getToken(VisualBasic6Parser.BEGIN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	cp_ControlType() {
	    return this.getTypedRuleContext(Cp_ControlTypeContext,0);
	};

	cp_ControlIdentifier() {
	    return this.getTypedRuleContext(Cp_ControlIdentifierContext,0);
	};

	END() {
	    return this.getToken(VisualBasic6Parser.END, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	cp_Properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cp_PropertiesContext);
	    } else {
	        return this.getTypedRuleContext(Cp_PropertiesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterControlProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitControlProperties(this);
		}
	}


}



class Cp_PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_Properties;
    }

	cp_SingleProperty() {
	    return this.getTypedRuleContext(Cp_SinglePropertyContext,0);
	};

	cp_NestedProperty() {
	    return this.getTypedRuleContext(Cp_NestedPropertyContext,0);
	};

	controlProperties() {
	    return this.getTypedRuleContext(ControlPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_Properties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_Properties(this);
		}
	}


}



class Cp_SinglePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_SingleProperty;
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	cp_PropertyValue() {
	    return this.getTypedRuleContext(Cp_PropertyValueContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	DOLLAR() {
	    return this.getToken(VisualBasic6Parser.DOLLAR, 0);
	};

	FRX_OFFSET() {
	    return this.getToken(VisualBasic6Parser.FRX_OFFSET, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_SingleProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_SingleProperty(this);
		}
	}


}



class Cp_PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_PropertyName;
    }

	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	OBJECT() {
	    return this.getToken(VisualBasic6Parser.OBJECT, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.DOT);
	    } else {
	        return this.getToken(VisualBasic6Parser.DOT, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.LPAREN);
	    } else {
	        return this.getToken(VisualBasic6Parser.LPAREN, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.RPAREN);
	    } else {
	        return this.getToken(VisualBasic6Parser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_PropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_PropertyName(this);
		}
	}


}



class Cp_PropertyValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_PropertyValue;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	POW() {
	    return this.getToken(VisualBasic6Parser.POW, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	DOLLAR() {
	    return this.getToken(VisualBasic6Parser.DOLLAR, 0);
	};

	LBRACE() {
	    return this.getToken(VisualBasic6Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(VisualBasic6Parser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_PropertyValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_PropertyValue(this);
		}
	}


}



class Cp_NestedPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_NestedProperty;
    }

	BEGINPROPERTY() {
	    return this.getToken(VisualBasic6Parser.BEGINPROPERTY, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	ENDPROPERTY() {
	    return this.getToken(VisualBasic6Parser.ENDPROPERTY, 0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	GUID() {
	    return this.getToken(VisualBasic6Parser.GUID, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	cp_Properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cp_PropertiesContext);
	    } else {
	        return this.getTypedRuleContext(Cp_PropertiesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_NestedProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_NestedProperty(this);
		}
	}


}



class Cp_ControlTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_ControlType;
    }

	complexType() {
	    return this.getTypedRuleContext(ComplexTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_ControlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_ControlType(this);
		}
	}


}



class Cp_ControlIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_cp_ControlIdentifier;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCp_ControlIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCp_ControlIdentifier(this);
		}
	}


}



class ModuleBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_moduleBlock;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterModuleBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitModuleBlock(this);
		}
	}


}



class AttributeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_attributeStmt;
    }

	ATTRIBUTE() {
	    return this.getToken(VisualBasic6Parser.ATTRIBUTE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterAttributeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitAttributeStmt(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_block;
    }

	blockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(BlockStmtContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_blockStmt;
    }

	appActivateStmt() {
	    return this.getTypedRuleContext(AppActivateStmtContext,0);
	};

	attributeStmt() {
	    return this.getTypedRuleContext(AttributeStmtContext,0);
	};

	beepStmt() {
	    return this.getTypedRuleContext(BeepStmtContext,0);
	};

	chDirStmt() {
	    return this.getTypedRuleContext(ChDirStmtContext,0);
	};

	chDriveStmt() {
	    return this.getTypedRuleContext(ChDriveStmtContext,0);
	};

	closeStmt() {
	    return this.getTypedRuleContext(CloseStmtContext,0);
	};

	constStmt() {
	    return this.getTypedRuleContext(ConstStmtContext,0);
	};

	dateStmt() {
	    return this.getTypedRuleContext(DateStmtContext,0);
	};

	deleteSettingStmt() {
	    return this.getTypedRuleContext(DeleteSettingStmtContext,0);
	};

	deftypeStmt() {
	    return this.getTypedRuleContext(DeftypeStmtContext,0);
	};

	doLoopStmt() {
	    return this.getTypedRuleContext(DoLoopStmtContext,0);
	};

	endStmt() {
	    return this.getTypedRuleContext(EndStmtContext,0);
	};

	eraseStmt() {
	    return this.getTypedRuleContext(EraseStmtContext,0);
	};

	errorStmt() {
	    return this.getTypedRuleContext(ErrorStmtContext,0);
	};

	exitStmt() {
	    return this.getTypedRuleContext(ExitStmtContext,0);
	};

	explicitCallStmt() {
	    return this.getTypedRuleContext(ExplicitCallStmtContext,0);
	};

	filecopyStmt() {
	    return this.getTypedRuleContext(FilecopyStmtContext,0);
	};

	forEachStmt() {
	    return this.getTypedRuleContext(ForEachStmtContext,0);
	};

	forNextStmt() {
	    return this.getTypedRuleContext(ForNextStmtContext,0);
	};

	getStmt() {
	    return this.getTypedRuleContext(GetStmtContext,0);
	};

	goSubStmt() {
	    return this.getTypedRuleContext(GoSubStmtContext,0);
	};

	goToStmt() {
	    return this.getTypedRuleContext(GoToStmtContext,0);
	};

	ifThenElseStmt() {
	    return this.getTypedRuleContext(IfThenElseStmtContext,0);
	};

	implementsStmt() {
	    return this.getTypedRuleContext(ImplementsStmtContext,0);
	};

	inputStmt() {
	    return this.getTypedRuleContext(InputStmtContext,0);
	};

	killStmt() {
	    return this.getTypedRuleContext(KillStmtContext,0);
	};

	letStmt() {
	    return this.getTypedRuleContext(LetStmtContext,0);
	};

	lineInputStmt() {
	    return this.getTypedRuleContext(LineInputStmtContext,0);
	};

	lineLabel() {
	    return this.getTypedRuleContext(LineLabelContext,0);
	};

	loadStmt() {
	    return this.getTypedRuleContext(LoadStmtContext,0);
	};

	lockStmt() {
	    return this.getTypedRuleContext(LockStmtContext,0);
	};

	lsetStmt() {
	    return this.getTypedRuleContext(LsetStmtContext,0);
	};

	macroIfThenElseStmt() {
	    return this.getTypedRuleContext(MacroIfThenElseStmtContext,0);
	};

	midStmt() {
	    return this.getTypedRuleContext(MidStmtContext,0);
	};

	mkdirStmt() {
	    return this.getTypedRuleContext(MkdirStmtContext,0);
	};

	nameStmt() {
	    return this.getTypedRuleContext(NameStmtContext,0);
	};

	onErrorStmt() {
	    return this.getTypedRuleContext(OnErrorStmtContext,0);
	};

	onGoToStmt() {
	    return this.getTypedRuleContext(OnGoToStmtContext,0);
	};

	onGoSubStmt() {
	    return this.getTypedRuleContext(OnGoSubStmtContext,0);
	};

	openStmt() {
	    return this.getTypedRuleContext(OpenStmtContext,0);
	};

	printStmt() {
	    return this.getTypedRuleContext(PrintStmtContext,0);
	};

	putStmt() {
	    return this.getTypedRuleContext(PutStmtContext,0);
	};

	raiseEventStmt() {
	    return this.getTypedRuleContext(RaiseEventStmtContext,0);
	};

	randomizeStmt() {
	    return this.getTypedRuleContext(RandomizeStmtContext,0);
	};

	redimStmt() {
	    return this.getTypedRuleContext(RedimStmtContext,0);
	};

	resetStmt() {
	    return this.getTypedRuleContext(ResetStmtContext,0);
	};

	resumeStmt() {
	    return this.getTypedRuleContext(ResumeStmtContext,0);
	};

	returnStmt() {
	    return this.getTypedRuleContext(ReturnStmtContext,0);
	};

	rmdirStmt() {
	    return this.getTypedRuleContext(RmdirStmtContext,0);
	};

	rsetStmt() {
	    return this.getTypedRuleContext(RsetStmtContext,0);
	};

	savepictureStmt() {
	    return this.getTypedRuleContext(SavepictureStmtContext,0);
	};

	saveSettingStmt() {
	    return this.getTypedRuleContext(SaveSettingStmtContext,0);
	};

	seekStmt() {
	    return this.getTypedRuleContext(SeekStmtContext,0);
	};

	selectCaseStmt() {
	    return this.getTypedRuleContext(SelectCaseStmtContext,0);
	};

	sendkeysStmt() {
	    return this.getTypedRuleContext(SendkeysStmtContext,0);
	};

	setattrStmt() {
	    return this.getTypedRuleContext(SetattrStmtContext,0);
	};

	setStmt() {
	    return this.getTypedRuleContext(SetStmtContext,0);
	};

	stopStmt() {
	    return this.getTypedRuleContext(StopStmtContext,0);
	};

	timeStmt() {
	    return this.getTypedRuleContext(TimeStmtContext,0);
	};

	unloadStmt() {
	    return this.getTypedRuleContext(UnloadStmtContext,0);
	};

	unlockStmt() {
	    return this.getTypedRuleContext(UnlockStmtContext,0);
	};

	variableStmt() {
	    return this.getTypedRuleContext(VariableStmtContext,0);
	};

	whileWendStmt() {
	    return this.getTypedRuleContext(WhileWendStmtContext,0);
	};

	widthStmt() {
	    return this.getTypedRuleContext(WidthStmtContext,0);
	};

	withStmt() {
	    return this.getTypedRuleContext(WithStmtContext,0);
	};

	writeStmt() {
	    return this.getTypedRuleContext(WriteStmtContext,0);
	};

	implicitCallStmt_InBlock() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitBlockStmt(this);
		}
	}


}



class AppActivateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_appActivateStmt;
    }

	APPACTIVATE() {
	    return this.getToken(VisualBasic6Parser.APPACTIVATE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterAppActivateStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitAppActivateStmt(this);
		}
	}


}



class BeepStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_beepStmt;
    }

	BEEP() {
	    return this.getToken(VisualBasic6Parser.BEEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterBeepStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitBeepStmt(this);
		}
	}


}



class ChDirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_chDirStmt;
    }

	CHDIR() {
	    return this.getToken(VisualBasic6Parser.CHDIR, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterChDirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitChDirStmt(this);
		}
	}


}



class ChDriveStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_chDriveStmt;
    }

	CHDRIVE() {
	    return this.getToken(VisualBasic6Parser.CHDRIVE, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterChDriveStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitChDriveStmt(this);
		}
	}


}



class CloseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_closeStmt;
    }

	CLOSE() {
	    return this.getToken(VisualBasic6Parser.CLOSE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCloseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCloseStmt(this);
		}
	}


}



class ConstStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_constStmt;
    }

	CONST() {
	    return this.getToken(VisualBasic6Parser.CONST, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	constSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(ConstSubStmtContext,i);
	    }
	};

	publicPrivateGlobalVisibility() {
	    return this.getTypedRuleContext(PublicPrivateGlobalVisibilityContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterConstStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitConstStmt(this);
		}
	}


}



class ConstSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_constSubStmt;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterConstSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitConstSubStmt(this);
		}
	}


}



class DateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_dateStmt;
    }

	DATE() {
	    return this.getToken(VisualBasic6Parser.DATE, 0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDateStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDateStmt(this);
		}
	}


}



class DeclareStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_declareStmt;
    }

	DECLARE() {
	    return this.getToken(VisualBasic6Parser.DECLARE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LIB() {
	    return this.getToken(VisualBasic6Parser.LIB, 0);
	};

	STRINGLITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.STRINGLITERAL);
	    } else {
	        return this.getToken(VisualBasic6Parser.STRINGLITERAL, i);
	    }
	};


	FUNCTION() {
	    return this.getToken(VisualBasic6Parser.FUNCTION, 0);
	};

	SUB() {
	    return this.getToken(VisualBasic6Parser.SUB, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	typeHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeHintContext);
	    } else {
	        return this.getTypedRuleContext(TypeHintContext,i);
	    }
	};

	ALIAS() {
	    return this.getToken(VisualBasic6Parser.ALIAS, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDeclareStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDeclareStmt(this);
		}
	}


}



class DeftypeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_deftypeStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	letterrange = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetterrangeContext);
	    } else {
	        return this.getTypedRuleContext(LetterrangeContext,i);
	    }
	};

	DEFBOOL() {
	    return this.getToken(VisualBasic6Parser.DEFBOOL, 0);
	};

	DEFBYTE() {
	    return this.getToken(VisualBasic6Parser.DEFBYTE, 0);
	};

	DEFINT() {
	    return this.getToken(VisualBasic6Parser.DEFINT, 0);
	};

	DEFLNG() {
	    return this.getToken(VisualBasic6Parser.DEFLNG, 0);
	};

	DEFCUR() {
	    return this.getToken(VisualBasic6Parser.DEFCUR, 0);
	};

	DEFSNG() {
	    return this.getToken(VisualBasic6Parser.DEFSNG, 0);
	};

	DEFDBL() {
	    return this.getToken(VisualBasic6Parser.DEFDBL, 0);
	};

	DEFDEC() {
	    return this.getToken(VisualBasic6Parser.DEFDEC, 0);
	};

	DEFDATE() {
	    return this.getToken(VisualBasic6Parser.DEFDATE, 0);
	};

	DEFSTR() {
	    return this.getToken(VisualBasic6Parser.DEFSTR, 0);
	};

	DEFOBJ() {
	    return this.getToken(VisualBasic6Parser.DEFOBJ, 0);
	};

	DEFVAR() {
	    return this.getToken(VisualBasic6Parser.DEFVAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDeftypeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDeftypeStmt(this);
		}
	}


}



class DeleteSettingStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_deleteSettingStmt;
    }

	DELETESETTING() {
	    return this.getToken(VisualBasic6Parser.DELETESETTING, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDeleteSettingStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDeleteSettingStmt(this);
		}
	}


}



class DoLoopStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_doLoopStmt;
    }

	DO() {
	    return this.getToken(VisualBasic6Parser.DO, 0);
	};

	LOOP() {
	    return this.getToken(VisualBasic6Parser.LOOP, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WHILE() {
	    return this.getToken(VisualBasic6Parser.WHILE, 0);
	};

	UNTIL() {
	    return this.getToken(VisualBasic6Parser.UNTIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDoLoopStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDoLoopStmt(this);
		}
	}


}



class EndStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_endStmt;
    }

	END() {
	    return this.getToken(VisualBasic6Parser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterEndStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitEndStmt(this);
		}
	}


}



class EnumerationStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_enumerationStmt;
    }

	ENUM() {
	    return this.getToken(VisualBasic6Parser.ENUM, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_ENUM() {
	    return this.getToken(VisualBasic6Parser.END_ENUM, 0);
	};

	publicPrivateVisibility() {
	    return this.getTypedRuleContext(PublicPrivateVisibilityContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enumerationStmt_Constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumerationStmt_ConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumerationStmt_ConstantContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterEnumerationStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitEnumerationStmt(this);
		}
	}


}



class EnumerationStmt_ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_enumerationStmt_Constant;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterEnumerationStmt_Constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitEnumerationStmt_Constant(this);
		}
	}


}



class EraseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_eraseStmt;
    }

	ERASE() {
	    return this.getToken(VisualBasic6Parser.ERASE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterEraseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitEraseStmt(this);
		}
	}


}



class ErrorStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_errorStmt;
    }

	ERROR() {
	    return this.getToken(VisualBasic6Parser.ERROR, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterErrorStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitErrorStmt(this);
		}
	}


}



class EventStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_eventStmt;
    }

	EVENT() {
	    return this.getToken(VisualBasic6Parser.EVENT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterEventStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitEventStmt(this);
		}
	}


}



class ExitStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_exitStmt;
    }

	EXIT_DO() {
	    return this.getToken(VisualBasic6Parser.EXIT_DO, 0);
	};

	EXIT_FOR() {
	    return this.getToken(VisualBasic6Parser.EXIT_FOR, 0);
	};

	EXIT_FUNCTION() {
	    return this.getToken(VisualBasic6Parser.EXIT_FUNCTION, 0);
	};

	EXIT_PROPERTY() {
	    return this.getToken(VisualBasic6Parser.EXIT_PROPERTY, 0);
	};

	EXIT_SUB() {
	    return this.getToken(VisualBasic6Parser.EXIT_SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterExitStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitExitStmt(this);
		}
	}


}



class FilecopyStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_filecopyStmt;
    }

	FILECOPY() {
	    return this.getToken(VisualBasic6Parser.FILECOPY, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterFilecopyStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitFilecopyStmt(this);
		}
	}


}



class ForEachStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_forEachStmt;
    }

	FOR() {
	    return this.getToken(VisualBasic6Parser.FOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	EACH() {
	    return this.getToken(VisualBasic6Parser.EACH, 0);
	};

	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(VisualBasic6Parser.IN, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	NEXT() {
	    return this.getToken(VisualBasic6Parser.NEXT, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterForEachStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitForEachStmt(this);
		}
	}


}



class ForNextStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_forNextStmt;
    }

	FOR() {
	    return this.getToken(VisualBasic6Parser.FOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	NEXT() {
	    return this.getToken(VisualBasic6Parser.NEXT, 0);
	};

	typeHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeHintContext);
	    } else {
	        return this.getTypedRuleContext(TypeHintContext,i);
	    }
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	STEP() {
	    return this.getToken(VisualBasic6Parser.STEP, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterForNextStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitForNextStmt(this);
		}
	}


}



class FunctionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_functionStmt;
    }

	FUNCTION() {
	    return this.getToken(VisualBasic6Parser.FUNCTION, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_FUNCTION() {
	    return this.getToken(VisualBasic6Parser.END_FUNCTION, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterFunctionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitFunctionStmt(this);
		}
	}


}



class GetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_getStmt;
    }

	GET() {
	    return this.getToken(VisualBasic6Parser.GET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterGetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitGetStmt(this);
		}
	}


}



class GoSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_goSubStmt;
    }

	GOSUB() {
	    return this.getToken(VisualBasic6Parser.GOSUB, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterGoSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitGoSubStmt(this);
		}
	}


}



class GoToStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_goToStmt;
    }

	GOTO() {
	    return this.getToken(VisualBasic6Parser.GOTO, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterGoToStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitGoToStmt(this);
		}
	}


}



class IfThenElseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ifThenElseStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BlockIfThenElseContext extends IfThenElseStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ifBlockStmt() {
	    return this.getTypedRuleContext(IfBlockStmtContext,0);
	};

	END_IF() {
	    return this.getToken(VisualBasic6Parser.END_IF, 0);
	};

	ifElseIfBlockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfElseIfBlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(IfElseIfBlockStmtContext,i);
	    }
	};

	ifElseBlockStmt() {
	    return this.getTypedRuleContext(IfElseBlockStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterBlockIfThenElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitBlockIfThenElse(this);
		}
	}


}

VisualBasic6Parser.BlockIfThenElseContext = BlockIfThenElseContext;

class InlineIfThenElseContext extends IfThenElseStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(VisualBasic6Parser.IF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	blockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(BlockStmtContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(VisualBasic6Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterInlineIfThenElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitInlineIfThenElse(this);
		}
	}


}

VisualBasic6Parser.InlineIfThenElseContext = InlineIfThenElseContext;

class IfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ifBlockStmt;
    }

	IF() {
	    return this.getToken(VisualBasic6Parser.IF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitIfBlockStmt(this);
		}
	}


}



class IfConditionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ifConditionStmt;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterIfConditionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitIfConditionStmt(this);
		}
	}


}



class IfElseIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ifElseIfBlockStmt;
    }

	ELSEIF() {
	    return this.getToken(VisualBasic6Parser.ELSEIF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterIfElseIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitIfElseIfBlockStmt(this);
		}
	}


}



class IfElseBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ifElseBlockStmt;
    }

	ELSE() {
	    return this.getToken(VisualBasic6Parser.ELSE, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterIfElseBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitIfElseBlockStmt(this);
		}
	}


}



class ImplementsStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_implementsStmt;
    }

	IMPLEMENTS() {
	    return this.getToken(VisualBasic6Parser.IMPLEMENTS, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterImplementsStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitImplementsStmt(this);
		}
	}


}



class InputStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_inputStmt;
    }

	INPUT() {
	    return this.getToken(VisualBasic6Parser.INPUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterInputStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitInputStmt(this);
		}
	}


}



class KillStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_killStmt;
    }

	KILL() {
	    return this.getToken(VisualBasic6Parser.KILL, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterKillStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitKillStmt(this);
		}
	}


}



class LetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_letStmt;
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	PLUS_EQ() {
	    return this.getToken(VisualBasic6Parser.PLUS_EQ, 0);
	};

	MINUS_EQ() {
	    return this.getToken(VisualBasic6Parser.MINUS_EQ, 0);
	};

	LET() {
	    return this.getToken(VisualBasic6Parser.LET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLetStmt(this);
		}
	}


}



class LineInputStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_lineInputStmt;
    }

	LINE_INPUT() {
	    return this.getToken(VisualBasic6Parser.LINE_INPUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLineInputStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLineInputStmt(this);
		}
	}


}



class LoadStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_loadStmt;
    }

	LOAD() {
	    return this.getToken(VisualBasic6Parser.LOAD, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLoadStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLoadStmt(this);
		}
	}


}



class LockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_lockStmt;
    }

	LOCK() {
	    return this.getToken(VisualBasic6Parser.LOCK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLockStmt(this);
		}
	}


}



class LsetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_lsetStmt;
    }

	LSET() {
	    return this.getToken(VisualBasic6Parser.LSET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLsetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLsetStmt(this);
		}
	}


}



class MacroIfThenElseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_macroIfThenElseStmt;
    }

	macroIfBlockStmt() {
	    return this.getTypedRuleContext(MacroIfBlockStmtContext,0);
	};

	MACRO_END_IF() {
	    return this.getToken(VisualBasic6Parser.MACRO_END_IF, 0);
	};

	macroElseIfBlockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroElseIfBlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(MacroElseIfBlockStmtContext,i);
	    }
	};

	macroElseBlockStmt() {
	    return this.getTypedRuleContext(MacroElseBlockStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMacroIfThenElseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMacroIfThenElseStmt(this);
		}
	}


}



class MacroIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_macroIfBlockStmt;
    }

	MACRO_IF() {
	    return this.getToken(VisualBasic6Parser.MACRO_IF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMacroIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMacroIfBlockStmt(this);
		}
	}


}



class MacroElseIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_macroElseIfBlockStmt;
    }

	MACRO_ELSEIF() {
	    return this.getToken(VisualBasic6Parser.MACRO_ELSEIF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMacroElseIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMacroElseIfBlockStmt(this);
		}
	}


}



class MacroElseBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_macroElseBlockStmt;
    }

	MACRO_ELSE() {
	    return this.getToken(VisualBasic6Parser.MACRO_ELSE, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMacroElseBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMacroElseBlockStmt(this);
		}
	}


}



class MidStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_midStmt;
    }

	MID() {
	    return this.getToken(VisualBasic6Parser.MID, 0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMidStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMidStmt(this);
		}
	}


}



class MkdirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_mkdirStmt;
    }

	MKDIR() {
	    return this.getToken(VisualBasic6Parser.MKDIR, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterMkdirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitMkdirStmt(this);
		}
	}


}



class NameStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_nameStmt;
    }

	NAME() {
	    return this.getToken(VisualBasic6Parser.NAME, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AS() {
	    return this.getToken(VisualBasic6Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterNameStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitNameStmt(this);
		}
	}


}



class OnErrorStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_onErrorStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ON_ERROR() {
	    return this.getToken(VisualBasic6Parser.ON_ERROR, 0);
	};

	ON_LOCAL_ERROR() {
	    return this.getToken(VisualBasic6Parser.ON_LOCAL_ERROR, 0);
	};

	GOTO() {
	    return this.getToken(VisualBasic6Parser.GOTO, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	RESUME() {
	    return this.getToken(VisualBasic6Parser.RESUME, 0);
	};

	NEXT() {
	    return this.getToken(VisualBasic6Parser.NEXT, 0);
	};

	COLON() {
	    return this.getToken(VisualBasic6Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOnErrorStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOnErrorStmt(this);
		}
	}


}



class OnGoToStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_onGoToStmt;
    }

	ON() {
	    return this.getToken(VisualBasic6Parser.ON, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GOTO() {
	    return this.getToken(VisualBasic6Parser.GOTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOnGoToStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOnGoToStmt(this);
		}
	}


}



class OnGoSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_onGoSubStmt;
    }

	ON() {
	    return this.getToken(VisualBasic6Parser.ON, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GOSUB() {
	    return this.getToken(VisualBasic6Parser.GOSUB, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOnGoSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOnGoSubStmt(this);
		}
	}


}



class OpenStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_openStmt;
    }

	OPEN() {
	    return this.getToken(VisualBasic6Parser.OPEN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	FOR() {
	    return this.getToken(VisualBasic6Parser.FOR, 0);
	};

	AS() {
	    return this.getToken(VisualBasic6Parser.AS, 0);
	};

	APPEND() {
	    return this.getToken(VisualBasic6Parser.APPEND, 0);
	};

	BINARY() {
	    return this.getToken(VisualBasic6Parser.BINARY, 0);
	};

	INPUT() {
	    return this.getToken(VisualBasic6Parser.INPUT, 0);
	};

	OUTPUT() {
	    return this.getToken(VisualBasic6Parser.OUTPUT, 0);
	};

	RANDOM() {
	    return this.getToken(VisualBasic6Parser.RANDOM, 0);
	};

	ACCESS() {
	    return this.getToken(VisualBasic6Parser.ACCESS, 0);
	};

	LEN() {
	    return this.getToken(VisualBasic6Parser.LEN, 0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	READ() {
	    return this.getToken(VisualBasic6Parser.READ, 0);
	};

	WRITE() {
	    return this.getToken(VisualBasic6Parser.WRITE, 0);
	};

	READ_WRITE() {
	    return this.getToken(VisualBasic6Parser.READ_WRITE, 0);
	};

	SHARED() {
	    return this.getToken(VisualBasic6Parser.SHARED, 0);
	};

	LOCK_READ() {
	    return this.getToken(VisualBasic6Parser.LOCK_READ, 0);
	};

	LOCK_WRITE() {
	    return this.getToken(VisualBasic6Parser.LOCK_WRITE, 0);
	};

	LOCK_READ_WRITE() {
	    return this.getToken(VisualBasic6Parser.LOCK_READ_WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOpenStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOpenStmt(this);
		}
	}


}



class OutputListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_outputList;
    }

	outputList_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OutputList_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OutputList_ExpressionContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.SEMICOLON);
	    } else {
	        return this.getToken(VisualBasic6Parser.SEMICOLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOutputList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOutputList(this);
		}
	}


}



class OutputList_ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_outputList_Expression;
    }

	SPC() {
	    return this.getToken(VisualBasic6Parser.SPC, 0);
	};

	TAB() {
	    return this.getToken(VisualBasic6Parser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOutputList_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOutputList_Expression(this);
		}
	}


}



class PrintStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_printStmt;
    }

	PRINT() {
	    return this.getToken(VisualBasic6Parser.PRINT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	outputList() {
	    return this.getTypedRuleContext(OutputListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPrintStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPrintStmt(this);
		}
	}


}



class PropertyGetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_propertyGetStmt;
    }

	PROPERTY_GET() {
	    return this.getToken(VisualBasic6Parser.PROPERTY_GET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(VisualBasic6Parser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPropertyGetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPropertyGetStmt(this);
		}
	}


}



class PropertySetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_propertySetStmt;
    }

	PROPERTY_SET() {
	    return this.getToken(VisualBasic6Parser.PROPERTY_SET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(VisualBasic6Parser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPropertySetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPropertySetStmt(this);
		}
	}


}



class PropertyLetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_propertyLetStmt;
    }

	PROPERTY_LET() {
	    return this.getToken(VisualBasic6Parser.PROPERTY_LET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(VisualBasic6Parser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPropertyLetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPropertyLetStmt(this);
		}
	}


}



class PutStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_putStmt;
    }

	PUT() {
	    return this.getToken(VisualBasic6Parser.PUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPutStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPutStmt(this);
		}
	}


}



class RaiseEventStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_raiseEventStmt;
    }

	RAISEEVENT() {
	    return this.getToken(VisualBasic6Parser.RAISEEVENT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRaiseEventStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRaiseEventStmt(this);
		}
	}


}



class RandomizeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_randomizeStmt;
    }

	RANDOMIZE() {
	    return this.getToken(VisualBasic6Parser.RANDOMIZE, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRandomizeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRandomizeStmt(this);
		}
	}


}



class RedimStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_redimStmt;
    }

	REDIM() {
	    return this.getToken(VisualBasic6Parser.REDIM, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	redimSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RedimSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(RedimSubStmtContext,i);
	    }
	};

	PRESERVE() {
	    return this.getToken(VisualBasic6Parser.PRESERVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRedimStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRedimStmt(this);
		}
	}


}



class RedimSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_redimSubStmt;
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRedimSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRedimSubStmt(this);
		}
	}


}



class ResetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_resetStmt;
    }

	RESET() {
	    return this.getToken(VisualBasic6Parser.RESET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterResetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitResetStmt(this);
		}
	}


}



class ResumeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_resumeStmt;
    }

	RESUME() {
	    return this.getToken(VisualBasic6Parser.RESUME, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	NEXT() {
	    return this.getToken(VisualBasic6Parser.NEXT, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterResumeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitResumeStmt(this);
		}
	}


}



class ReturnStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_returnStmt;
    }

	RETURN() {
	    return this.getToken(VisualBasic6Parser.RETURN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterReturnStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitReturnStmt(this);
		}
	}


}



class RmdirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_rmdirStmt;
    }

	RMDIR() {
	    return this.getToken(VisualBasic6Parser.RMDIR, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRmdirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRmdirStmt(this);
		}
	}


}



class RsetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_rsetStmt;
    }

	RSET() {
	    return this.getToken(VisualBasic6Parser.RSET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterRsetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitRsetStmt(this);
		}
	}


}



class SavepictureStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_savepictureStmt;
    }

	SAVEPICTURE() {
	    return this.getToken(VisualBasic6Parser.SAVEPICTURE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSavepictureStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSavepictureStmt(this);
		}
	}


}



class SaveSettingStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_saveSettingStmt;
    }

	SAVESETTING() {
	    return this.getToken(VisualBasic6Parser.SAVESETTING, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSaveSettingStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSaveSettingStmt(this);
		}
	}


}



class SeekStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_seekStmt;
    }

	SEEK() {
	    return this.getToken(VisualBasic6Parser.SEEK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSeekStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSeekStmt(this);
		}
	}


}



class SelectCaseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_selectCaseStmt;
    }

	SELECT() {
	    return this.getToken(VisualBasic6Parser.SELECT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	CASE() {
	    return this.getToken(VisualBasic6Parser.CASE, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	END_SELECT() {
	    return this.getToken(VisualBasic6Parser.END_SELECT, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	sC_Case = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SC_CaseContext);
	    } else {
	        return this.getTypedRuleContext(SC_CaseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSelectCaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSelectCaseStmt(this);
		}
	}


}



class SC_CaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_sC_Case;
    }

	CASE() {
	    return this.getToken(VisualBasic6Parser.CASE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	sC_Cond() {
	    return this.getTypedRuleContext(SC_CondContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	COLON() {
	    return this.getToken(VisualBasic6Parser.COLON, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSC_Case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSC_Case(this);
		}
	}


}



class SC_CondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_sC_Cond;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CaseCondExprContext extends SC_CondContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sC_CondExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SC_CondExprContext);
	    } else {
	        return this.getTypedRuleContext(SC_CondExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCaseCondExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCaseCondExpr(this);
		}
	}


}

VisualBasic6Parser.CaseCondExprContext = CaseCondExprContext;

class CaseCondElseContext extends SC_CondContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ELSE() {
	    return this.getToken(VisualBasic6Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCaseCondElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCaseCondElse(this);
		}
	}


}

VisualBasic6Parser.CaseCondElseContext = CaseCondElseContext;

class SC_CondExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_sC_CondExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CaseCondExprValueContext extends SC_CondExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCaseCondExprValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCaseCondExprValue(this);
		}
	}


}

VisualBasic6Parser.CaseCondExprValueContext = CaseCondExprValueContext;

class CaseCondExprIsContext extends SC_CondExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(VisualBasic6Parser.IS, 0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCaseCondExprIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCaseCondExprIs(this);
		}
	}


}

VisualBasic6Parser.CaseCondExprIsContext = CaseCondExprIsContext;

class CaseCondExprToContext extends SC_CondExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCaseCondExprTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCaseCondExprTo(this);
		}
	}


}

VisualBasic6Parser.CaseCondExprToContext = CaseCondExprToContext;

class SendkeysStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_sendkeysStmt;
    }

	SENDKEYS() {
	    return this.getToken(VisualBasic6Parser.SENDKEYS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSendkeysStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSendkeysStmt(this);
		}
	}


}



class SetattrStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_setattrStmt;
    }

	SETATTR() {
	    return this.getToken(VisualBasic6Parser.SETATTR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSetattrStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSetattrStmt(this);
		}
	}


}



class SetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_setStmt;
    }

	SET() {
	    return this.getToken(VisualBasic6Parser.SET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSetStmt(this);
		}
	}


}



class StopStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_stopStmt;
    }

	STOP() {
	    return this.getToken(VisualBasic6Parser.STOP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterStopStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitStopStmt(this);
		}
	}


}



class SubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_subStmt;
    }

	SUB() {
	    return this.getToken(VisualBasic6Parser.SUB, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_SUB() {
	    return this.getToken(VisualBasic6Parser.END_SUB, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSubStmt(this);
		}
	}


}



class TimeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_timeStmt;
    }

	TIME() {
	    return this.getToken(VisualBasic6Parser.TIME, 0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterTimeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitTimeStmt(this);
		}
	}


}



class TypeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_typeStmt;
    }

	TYPE() {
	    return this.getToken(VisualBasic6Parser.TYPE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	END_TYPE() {
	    return this.getToken(VisualBasic6Parser.END_TYPE, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	typeStmt_Element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeStmt_ElementContext);
	    } else {
	        return this.getTypedRuleContext(TypeStmt_ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterTypeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitTypeStmt(this);
		}
	}


}



class TypeStmt_ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_typeStmt_Element;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterTypeStmt_Element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitTypeStmt_Element(this);
		}
	}


}



class TypeOfStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_typeOfStmt;
    }

	TYPEOF() {
	    return this.getToken(VisualBasic6Parser.TYPEOF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	IS() {
	    return this.getToken(VisualBasic6Parser.IS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterTypeOfStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitTypeOfStmt(this);
		}
	}


}



class UnloadStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_unloadStmt;
    }

	UNLOAD() {
	    return this.getToken(VisualBasic6Parser.UNLOAD, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterUnloadStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitUnloadStmt(this);
		}
	}


}



class UnlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_unlockStmt;
    }

	UNLOCK() {
	    return this.getToken(VisualBasic6Parser.UNLOCK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterUnlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitUnlockStmt(this);
		}
	}


}



class ValueStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_valueStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class VsAssignContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	ASSIGN() {
	    return this.getToken(VisualBasic6Parser.ASSIGN, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsAssign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsAssign(this);
		}
	}


}

VisualBasic6Parser.VsAssignContext = VsAssignContext;

class VsNotContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(VisualBasic6Parser.NOT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsNot(this);
		}
	}


}

VisualBasic6Parser.VsNotContext = VsNotContext;

class VsStructContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsStruct(this);
		}
	}


}

VisualBasic6Parser.VsStructContext = VsStructContext;

class VsMultDivContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	MULT() {
	    return this.getToken(VisualBasic6Parser.MULT, 0);
	};

	DIV() {
	    return this.getToken(VisualBasic6Parser.DIV, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsMultDiv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsMultDiv(this);
		}
	}


}

VisualBasic6Parser.VsMultDivContext = VsMultDivContext;

class VsTypeOfContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	typeOfStmt() {
	    return this.getTypedRuleContext(TypeOfStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsTypeOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsTypeOf(this);
		}
	}


}

VisualBasic6Parser.VsTypeOfContext = VsTypeOfContext;

class VsICSContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsICS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsICS(this);
		}
	}


}

VisualBasic6Parser.VsICSContext = VsICSContext;

class VsXorContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	XOR() {
	    return this.getToken(VisualBasic6Parser.XOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsXor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsXor(this);
		}
	}


}

VisualBasic6Parser.VsXorContext = VsXorContext;

class VsAddSubContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(VisualBasic6Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(VisualBasic6Parser.MINUS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsAddSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsAddSub(this);
		}
	}


}

VisualBasic6Parser.VsAddSubContext = VsAddSubContext;

class VsAndContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AND() {
	    return this.getToken(VisualBasic6Parser.AND, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsAnd(this);
		}
	}


}

VisualBasic6Parser.VsAndContext = VsAndContext;

class VsPowContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	POW() {
	    return this.getToken(VisualBasic6Parser.POW, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsPow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsPow(this);
		}
	}


}

VisualBasic6Parser.VsPowContext = VsPowContext;

class VsModContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	MOD() {
	    return this.getToken(VisualBasic6Parser.MOD, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsMod(this);
		}
	}


}

VisualBasic6Parser.VsModContext = VsModContext;

class VsAmpContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AMPERSAND() {
	    return this.getToken(VisualBasic6Parser.AMPERSAND, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsAmp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsAmp(this);
		}
	}


}

VisualBasic6Parser.VsAmpContext = VsAmpContext;

class VsAddressOfContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADDRESSOF() {
	    return this.getToken(VisualBasic6Parser.ADDRESSOF, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsAddressOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsAddressOf(this);
		}
	}


}

VisualBasic6Parser.VsAddressOfContext = VsAddressOfContext;

class VsNewContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NEW() {
	    return this.getToken(VisualBasic6Parser.NEW, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsNew(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsNew(this);
		}
	}


}

VisualBasic6Parser.VsNewContext = VsNewContext;

class VsPlusMinusContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	PLUS() {
	    return this.getToken(VisualBasic6Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(VisualBasic6Parser.MINUS, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsPlusMinus(this);
		}
	}


}

VisualBasic6Parser.VsPlusMinusContext = VsPlusMinusContext;

class VsIDivContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	IDIV() {
	    return this.getToken(VisualBasic6Parser.IDIV, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsIDiv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsIDiv(this);
		}
	}


}

VisualBasic6Parser.VsIDivContext = VsIDivContext;

class VsOrContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	OR() {
	    return this.getToken(VisualBasic6Parser.OR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsOr(this);
		}
	}


}

VisualBasic6Parser.VsOrContext = VsOrContext;

class VsLiteralContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsLiteral(this);
		}
	}


}

VisualBasic6Parser.VsLiteralContext = VsLiteralContext;

class VsEqvContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	EQV() {
	    return this.getToken(VisualBasic6Parser.EQV, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsEqv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsEqv(this);
		}
	}


}

VisualBasic6Parser.VsEqvContext = VsEqvContext;

class VsImpContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	IMP() {
	    return this.getToken(VisualBasic6Parser.IMP, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsImp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsImp(this);
		}
	}


}

VisualBasic6Parser.VsImpContext = VsImpContext;

class VsCompContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(VisualBasic6Parser.NEQ, 0);
	};

	LT() {
	    return this.getToken(VisualBasic6Parser.LT, 0);
	};

	GT() {
	    return this.getToken(VisualBasic6Parser.GT, 0);
	};

	LEQ() {
	    return this.getToken(VisualBasic6Parser.LEQ, 0);
	};

	GEQ() {
	    return this.getToken(VisualBasic6Parser.GEQ, 0);
	};

	LIKE() {
	    return this.getToken(VisualBasic6Parser.LIKE, 0);
	};

	IS() {
	    return this.getToken(VisualBasic6Parser.IS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsComp(this);
		}
	}


}

VisualBasic6Parser.VsCompContext = VsCompContext;

class VsMidContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	midStmt() {
	    return this.getTypedRuleContext(MidStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVsMid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVsMid(this);
		}
	}


}

VisualBasic6Parser.VsMidContext = VsMidContext;

class VariableStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_variableStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	variableListStmt() {
	    return this.getTypedRuleContext(VariableListStmtContext,0);
	};

	DIM() {
	    return this.getToken(VisualBasic6Parser.DIM, 0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	WITHEVENTS() {
	    return this.getToken(VisualBasic6Parser.WITHEVENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVariableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVariableStmt(this);
		}
	}


}



class VariableListStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_variableListStmt;
    }

	variableSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(VariableSubStmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVariableListStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVariableListStmt(this);
		}
	}


}



class VariableSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_variableSubStmt;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVariableSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVariableSubStmt(this);
		}
	}


}



class WhileWendStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_whileWendStmt;
    }

	WHILE() {
	    return this.getToken(VisualBasic6Parser.WHILE, 0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WEND() {
	    return this.getToken(VisualBasic6Parser.WEND, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterWhileWendStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitWhileWendStmt(this);
		}
	}


}



class WidthStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_widthStmt;
    }

	WIDTH() {
	    return this.getToken(VisualBasic6Parser.WIDTH, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterWidthStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitWidthStmt(this);
		}
	}


}



class WithStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_withStmt;
    }

	WITH() {
	    return this.getToken(VisualBasic6Parser.WITH, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	END_WITH() {
	    return this.getToken(VisualBasic6Parser.END_WITH, 0);
	};

	NEW() {
	    return this.getToken(VisualBasic6Parser.NEW, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.NEWLINE);
	    } else {
	        return this.getToken(VisualBasic6Parser.NEWLINE, i);
	    }
	};


	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterWithStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitWithStmt(this);
		}
	}


}



class WriteStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_writeStmt;
    }

	WRITE() {
	    return this.getToken(VisualBasic6Parser.WRITE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	COMMA() {
	    return this.getToken(VisualBasic6Parser.COMMA, 0);
	};

	outputList() {
	    return this.getTypedRuleContext(OutputListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterWriteStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitWriteStmt(this);
		}
	}


}



class ExplicitCallStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_explicitCallStmt;
    }

	eCS_ProcedureCall() {
	    return this.getTypedRuleContext(ECS_ProcedureCallContext,0);
	};

	eCS_MemberProcedureCall() {
	    return this.getTypedRuleContext(ECS_MemberProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterExplicitCallStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitExplicitCallStmt(this);
		}
	}


}



class ECS_ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_eCS_ProcedureCall;
    }

	CALL() {
	    return this.getToken(VisualBasic6Parser.CALL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterECS_ProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitECS_ProcedureCall(this);
		}
	}


}



class ECS_MemberProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_eCS_MemberProcedureCall;
    }

	CALL() {
	    return this.getToken(VisualBasic6Parser.CALL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	DOT() {
	    return this.getToken(VisualBasic6Parser.DOT, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterECS_MemberProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitECS_MemberProcedureCall(this);
		}
	}


}



class ImplicitCallStmt_InBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_implicitCallStmt_InBlock;
    }

	iCS_B_ProcedureCall() {
	    return this.getTypedRuleContext(ICS_B_ProcedureCallContext,0);
	};

	iCS_B_MemberProcedureCall() {
	    return this.getTypedRuleContext(ICS_B_MemberProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterImplicitCallStmt_InBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitImplicitCallStmt_InBlock(this);
		}
	}


}



class ICS_B_ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_B_ProcedureCall;
    }

	certainIdentifier() {
	    return this.getTypedRuleContext(CertainIdentifierContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_B_ProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_B_ProcedureCall(this);
		}
	}


}



class ICS_B_MemberProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_B_MemberProcedureCall;
    }

	DOT() {
	    return this.getToken(VisualBasic6Parser.DOT, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_B_MemberProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_B_MemberProcedureCall(this);
		}
	}


}



class ImplicitCallStmt_InStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_implicitCallStmt_InStmt;
    }

	iCS_S_MembersCall() {
	    return this.getTypedRuleContext(ICS_S_MembersCallContext,0);
	};

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	iCS_S_DictionaryCall() {
	    return this.getTypedRuleContext(ICS_S_DictionaryCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterImplicitCallStmt_InStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitImplicitCallStmt_InStmt(this);
		}
	}


}



class ICS_S_VariableOrProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_VariableOrProcedureCall;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_VariableOrProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_VariableOrProcedureCall(this);
		}
	}


}



class ICS_S_ProcedureOrArrayCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_ProcedureOrArrayCall;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	iCS_S_NestedProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_NestedProcedureCallContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.LPAREN);
	    } else {
	        return this.getToken(VisualBasic6Parser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.RPAREN);
	    } else {
	        return this.getToken(VisualBasic6Parser.RPAREN, i);
	    }
	};


	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	argsCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgsCallContext);
	    } else {
	        return this.getTypedRuleContext(ArgsCallContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_ProcedureOrArrayCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_ProcedureOrArrayCall(this);
		}
	}


}



class ICS_S_NestedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_NestedProcedureCall;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_NestedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_NestedProcedureCall(this);
		}
	}


}



class ICS_S_MembersCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_MembersCall;
    }

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	iCS_S_MemberCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ICS_S_MemberCallContext);
	    } else {
	        return this.getTypedRuleContext(ICS_S_MemberCallContext,i);
	    }
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_MembersCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_MembersCall(this);
		}
	}


}



class ICS_S_MemberCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_MemberCall;
    }

	DOT() {
	    return this.getToken(VisualBasic6Parser.DOT, 0);
	};

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_MemberCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_MemberCall(this);
		}
	}


}



class ICS_S_DictionaryCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_iCS_S_DictionaryCall;
    }

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterICS_S_DictionaryCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitICS_S_DictionaryCall(this);
		}
	}


}



class ArgsCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_argsCall;
    }

	argCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgCallContext);
	    } else {
	        return this.getTypedRuleContext(ArgCallContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.SEMICOLON);
	    } else {
	        return this.getToken(VisualBasic6Parser.SEMICOLON, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterArgsCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitArgsCall(this);
		}
	}


}



class ArgCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_argCall;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	BYVAL() {
	    return this.getToken(VisualBasic6Parser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(VisualBasic6Parser.BYREF, 0);
	};

	PARAMARRAY() {
	    return this.getToken(VisualBasic6Parser.PARAMARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterArgCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitArgCall(this);
		}
	}


}



class DictionaryCallStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_dictionaryCallStmt;
    }

	EXCLAMATIONMARK() {
	    return this.getToken(VisualBasic6Parser.EXCLAMATIONMARK, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDictionaryCallStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDictionaryCallStmt(this);
		}
	}


}



class ArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_argList;
    }

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgContext);
	    } else {
	        return this.getTypedRuleContext(ArgContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitArgList(this);
		}
	}


}



class ArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_arg;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	OPTIONAL() {
	    return this.getToken(VisualBasic6Parser.OPTIONAL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	PARAMARRAY() {
	    return this.getToken(VisualBasic6Parser.PARAMARRAY, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	argDefaultValue() {
	    return this.getTypedRuleContext(ArgDefaultValueContext,0);
	};

	BYVAL() {
	    return this.getToken(VisualBasic6Parser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(VisualBasic6Parser.BYREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitArg(this);
		}
	}


}



class ArgDefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_argDefaultValue;
    }

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterArgDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitArgDefaultValue(this);
		}
	}


}



class SubscriptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_subscripts;
    }

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.COMMA);
	    } else {
	        return this.getToken(VisualBasic6Parser.COMMA, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSubscripts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSubscripts(this);
		}
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_subscript_;
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitSubscript_(this);
		}
	}


}



class AmbiguousIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ambiguousIdentifier;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.IDENTIFIER);
	    } else {
	        return this.getToken(VisualBasic6Parser.IDENTIFIER, i);
	    }
	};


	ambiguousKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousKeywordContext,i);
	    }
	};

	L_SQUARE_BRACKET() {
	    return this.getToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0);
	};

	R_SQUARE_BRACKET() {
	    return this.getToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterAmbiguousIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitAmbiguousIdentifier(this);
		}
	}


}



class AsTypeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_asTypeClause;
    }

	AS() {
	    return this.getToken(VisualBasic6Parser.AS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	NEW() {
	    return this.getToken(VisualBasic6Parser.NEW, 0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterAsTypeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitAsTypeClause(this);
		}
	}


}



class BaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_baseType;
    }

	BOOLEAN() {
	    return this.getToken(VisualBasic6Parser.BOOLEAN, 0);
	};

	BYTE() {
	    return this.getToken(VisualBasic6Parser.BYTE, 0);
	};

	COLLECTION() {
	    return this.getToken(VisualBasic6Parser.COLLECTION, 0);
	};

	DATE() {
	    return this.getToken(VisualBasic6Parser.DATE, 0);
	};

	DOUBLE() {
	    return this.getToken(VisualBasic6Parser.DOUBLE, 0);
	};

	INTEGER() {
	    return this.getToken(VisualBasic6Parser.INTEGER, 0);
	};

	LONG() {
	    return this.getToken(VisualBasic6Parser.LONG, 0);
	};

	OBJECT() {
	    return this.getToken(VisualBasic6Parser.OBJECT, 0);
	};

	SINGLE() {
	    return this.getToken(VisualBasic6Parser.SINGLE, 0);
	};

	STRING() {
	    return this.getToken(VisualBasic6Parser.STRING, 0);
	};

	VARIANT() {
	    return this.getToken(VisualBasic6Parser.VARIANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitBaseType(this);
		}
	}


}



class CertainIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_certainIdentifier;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.IDENTIFIER);
	    } else {
	        return this.getToken(VisualBasic6Parser.IDENTIFIER, i);
	    }
	};


	ambiguousKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousKeywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterCertainIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitCertainIdentifier(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_comparisonOperator;
    }

	LT() {
	    return this.getToken(VisualBasic6Parser.LT, 0);
	};

	LEQ() {
	    return this.getToken(VisualBasic6Parser.LEQ, 0);
	};

	GT() {
	    return this.getToken(VisualBasic6Parser.GT, 0);
	};

	GEQ() {
	    return this.getToken(VisualBasic6Parser.GEQ, 0);
	};

	EQ() {
	    return this.getToken(VisualBasic6Parser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(VisualBasic6Parser.NEQ, 0);
	};

	IS() {
	    return this.getToken(VisualBasic6Parser.IS, 0);
	};

	LIKE() {
	    return this.getToken(VisualBasic6Parser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class ComplexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_complexType;
    }

	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.DOT);
	    } else {
	        return this.getToken(VisualBasic6Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterComplexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitComplexType(this);
		}
	}


}



class FieldLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_fieldLength;
    }

	MULT() {
	    return this.getToken(VisualBasic6Parser.MULT, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	WS() {
	    return this.getToken(VisualBasic6Parser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterFieldLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitFieldLength(this);
		}
	}


}



class LetterrangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_letterrange;
    }

	certainIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CertainIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(CertainIdentifierContext,i);
	    }
	};

	MINUS() {
	    return this.getToken(VisualBasic6Parser.MINUS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLetterrange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLetterrange(this);
		}
	}


}



class LineLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_lineLabel;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	COLON() {
	    return this.getToken(VisualBasic6Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLineLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLineLabel(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_literal;
    }

	COLORLITERAL() {
	    return this.getToken(VisualBasic6Parser.COLORLITERAL, 0);
	};

	DATELITERAL() {
	    return this.getToken(VisualBasic6Parser.DATELITERAL, 0);
	};

	doubleLiteral() {
	    return this.getTypedRuleContext(DoubleLiteralContext,0);
	};

	FILENUMBER() {
	    return this.getToken(VisualBasic6Parser.FILENUMBER, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	octalLiteral() {
	    return this.getTypedRuleContext(OctalLiteralContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(VisualBasic6Parser.STRINGLITERAL, 0);
	};

	TRUE() {
	    return this.getToken(VisualBasic6Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(VisualBasic6Parser.FALSE, 0);
	};

	NOTHING() {
	    return this.getToken(VisualBasic6Parser.NOTHING, 0);
	};

	NULL_() {
	    return this.getToken(VisualBasic6Parser.NULL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class PublicPrivateVisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_publicPrivateVisibility;
    }

	PRIVATE() {
	    return this.getToken(VisualBasic6Parser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(VisualBasic6Parser.PUBLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPublicPrivateVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPublicPrivateVisibility(this);
		}
	}


}



class PublicPrivateGlobalVisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_publicPrivateGlobalVisibility;
    }

	PRIVATE() {
	    return this.getToken(VisualBasic6Parser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(VisualBasic6Parser.PUBLIC, 0);
	};

	GLOBAL() {
	    return this.getToken(VisualBasic6Parser.GLOBAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterPublicPrivateGlobalVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitPublicPrivateGlobalVisibility(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_type_;
    }

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	complexType() {
	    return this.getTypedRuleContext(ComplexTypeContext,0);
	};

	LPAREN() {
	    return this.getToken(VisualBasic6Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(VisualBasic6Parser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.WS);
	    } else {
	        return this.getToken(VisualBasic6Parser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitType_(this);
		}
	}


}



class TypeHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_typeHint;
    }

	AMPERSAND() {
	    return this.getToken(VisualBasic6Parser.AMPERSAND, 0);
	};

	AT() {
	    return this.getToken(VisualBasic6Parser.AT, 0);
	};

	DOLLAR() {
	    return this.getToken(VisualBasic6Parser.DOLLAR, 0);
	};

	EXCLAMATIONMARK() {
	    return this.getToken(VisualBasic6Parser.EXCLAMATIONMARK, 0);
	};

	HASH() {
	    return this.getToken(VisualBasic6Parser.HASH, 0);
	};

	PERCENT() {
	    return this.getToken(VisualBasic6Parser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterTypeHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitTypeHint(this);
		}
	}


}



class VisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_visibility;
    }

	PRIVATE() {
	    return this.getToken(VisualBasic6Parser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(VisualBasic6Parser.PUBLIC, 0);
	};

	FRIEND() {
	    return this.getToken(VisualBasic6Parser.FRIEND, 0);
	};

	GLOBAL() {
	    return this.getToken(VisualBasic6Parser.GLOBAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitVisibility(this);
		}
	}


}



class AmbiguousKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_ambiguousKeyword;
    }

	ACCESS() {
	    return this.getToken(VisualBasic6Parser.ACCESS, 0);
	};

	ADDRESSOF() {
	    return this.getToken(VisualBasic6Parser.ADDRESSOF, 0);
	};

	ALIAS() {
	    return this.getToken(VisualBasic6Parser.ALIAS, 0);
	};

	AND() {
	    return this.getToken(VisualBasic6Parser.AND, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(VisualBasic6Parser.ATTRIBUTE, 0);
	};

	APPACTIVATE() {
	    return this.getToken(VisualBasic6Parser.APPACTIVATE, 0);
	};

	APPEND() {
	    return this.getToken(VisualBasic6Parser.APPEND, 0);
	};

	AS() {
	    return this.getToken(VisualBasic6Parser.AS, 0);
	};

	BEEP() {
	    return this.getToken(VisualBasic6Parser.BEEP, 0);
	};

	BEGIN() {
	    return this.getToken(VisualBasic6Parser.BEGIN, 0);
	};

	BINARY() {
	    return this.getToken(VisualBasic6Parser.BINARY, 0);
	};

	BOOLEAN() {
	    return this.getToken(VisualBasic6Parser.BOOLEAN, 0);
	};

	BYVAL() {
	    return this.getToken(VisualBasic6Parser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(VisualBasic6Parser.BYREF, 0);
	};

	BYTE() {
	    return this.getToken(VisualBasic6Parser.BYTE, 0);
	};

	CALL() {
	    return this.getToken(VisualBasic6Parser.CALL, 0);
	};

	CASE() {
	    return this.getToken(VisualBasic6Parser.CASE, 0);
	};

	CLASS() {
	    return this.getToken(VisualBasic6Parser.CLASS, 0);
	};

	CLOSE() {
	    return this.getToken(VisualBasic6Parser.CLOSE, 0);
	};

	CHDIR() {
	    return this.getToken(VisualBasic6Parser.CHDIR, 0);
	};

	CHDRIVE() {
	    return this.getToken(VisualBasic6Parser.CHDRIVE, 0);
	};

	COLLECTION() {
	    return this.getToken(VisualBasic6Parser.COLLECTION, 0);
	};

	CONST() {
	    return this.getToken(VisualBasic6Parser.CONST, 0);
	};

	DATE() {
	    return this.getToken(VisualBasic6Parser.DATE, 0);
	};

	DECLARE() {
	    return this.getToken(VisualBasic6Parser.DECLARE, 0);
	};

	DEFBOOL() {
	    return this.getToken(VisualBasic6Parser.DEFBOOL, 0);
	};

	DEFBYTE() {
	    return this.getToken(VisualBasic6Parser.DEFBYTE, 0);
	};

	DEFCUR() {
	    return this.getToken(VisualBasic6Parser.DEFCUR, 0);
	};

	DEFDBL() {
	    return this.getToken(VisualBasic6Parser.DEFDBL, 0);
	};

	DEFDATE() {
	    return this.getToken(VisualBasic6Parser.DEFDATE, 0);
	};

	DEFDEC() {
	    return this.getToken(VisualBasic6Parser.DEFDEC, 0);
	};

	DEFINT() {
	    return this.getToken(VisualBasic6Parser.DEFINT, 0);
	};

	DEFLNG() {
	    return this.getToken(VisualBasic6Parser.DEFLNG, 0);
	};

	DEFOBJ() {
	    return this.getToken(VisualBasic6Parser.DEFOBJ, 0);
	};

	DEFSNG() {
	    return this.getToken(VisualBasic6Parser.DEFSNG, 0);
	};

	DEFSTR() {
	    return this.getToken(VisualBasic6Parser.DEFSTR, 0);
	};

	DEFVAR() {
	    return this.getToken(VisualBasic6Parser.DEFVAR, 0);
	};

	DELETESETTING() {
	    return this.getToken(VisualBasic6Parser.DELETESETTING, 0);
	};

	DIM() {
	    return this.getToken(VisualBasic6Parser.DIM, 0);
	};

	DO() {
	    return this.getToken(VisualBasic6Parser.DO, 0);
	};

	DOUBLE() {
	    return this.getToken(VisualBasic6Parser.DOUBLE, 0);
	};

	EACH() {
	    return this.getToken(VisualBasic6Parser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(VisualBasic6Parser.ELSE, 0);
	};

	ELSEIF() {
	    return this.getToken(VisualBasic6Parser.ELSEIF, 0);
	};

	END() {
	    return this.getToken(VisualBasic6Parser.END, 0);
	};

	ENUM() {
	    return this.getToken(VisualBasic6Parser.ENUM, 0);
	};

	EQV() {
	    return this.getToken(VisualBasic6Parser.EQV, 0);
	};

	ERASE() {
	    return this.getToken(VisualBasic6Parser.ERASE, 0);
	};

	ERROR() {
	    return this.getToken(VisualBasic6Parser.ERROR, 0);
	};

	EVENT() {
	    return this.getToken(VisualBasic6Parser.EVENT, 0);
	};

	FALSE() {
	    return this.getToken(VisualBasic6Parser.FALSE, 0);
	};

	FILECOPY() {
	    return this.getToken(VisualBasic6Parser.FILECOPY, 0);
	};

	FRIEND() {
	    return this.getToken(VisualBasic6Parser.FRIEND, 0);
	};

	FOR() {
	    return this.getToken(VisualBasic6Parser.FOR, 0);
	};

	FUNCTION() {
	    return this.getToken(VisualBasic6Parser.FUNCTION, 0);
	};

	GET() {
	    return this.getToken(VisualBasic6Parser.GET, 0);
	};

	GLOBAL() {
	    return this.getToken(VisualBasic6Parser.GLOBAL, 0);
	};

	GOSUB() {
	    return this.getToken(VisualBasic6Parser.GOSUB, 0);
	};

	GOTO() {
	    return this.getToken(VisualBasic6Parser.GOTO, 0);
	};

	IF() {
	    return this.getToken(VisualBasic6Parser.IF, 0);
	};

	IMP() {
	    return this.getToken(VisualBasic6Parser.IMP, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(VisualBasic6Parser.IMPLEMENTS, 0);
	};

	IN() {
	    return this.getToken(VisualBasic6Parser.IN, 0);
	};

	INPUT() {
	    return this.getToken(VisualBasic6Parser.INPUT, 0);
	};

	IS() {
	    return this.getToken(VisualBasic6Parser.IS, 0);
	};

	INTEGER() {
	    return this.getToken(VisualBasic6Parser.INTEGER, 0);
	};

	KILL() {
	    return this.getToken(VisualBasic6Parser.KILL, 0);
	};

	LOAD() {
	    return this.getToken(VisualBasic6Parser.LOAD, 0);
	};

	LOCK() {
	    return this.getToken(VisualBasic6Parser.LOCK, 0);
	};

	LONG() {
	    return this.getToken(VisualBasic6Parser.LONG, 0);
	};

	LOOP() {
	    return this.getToken(VisualBasic6Parser.LOOP, 0);
	};

	LEN() {
	    return this.getToken(VisualBasic6Parser.LEN, 0);
	};

	LET() {
	    return this.getToken(VisualBasic6Parser.LET, 0);
	};

	LIB() {
	    return this.getToken(VisualBasic6Parser.LIB, 0);
	};

	LIKE() {
	    return this.getToken(VisualBasic6Parser.LIKE, 0);
	};

	LSET() {
	    return this.getToken(VisualBasic6Parser.LSET, 0);
	};

	ME() {
	    return this.getToken(VisualBasic6Parser.ME, 0);
	};

	MID() {
	    return this.getToken(VisualBasic6Parser.MID, 0);
	};

	MKDIR() {
	    return this.getToken(VisualBasic6Parser.MKDIR, 0);
	};

	MOD() {
	    return this.getToken(VisualBasic6Parser.MOD, 0);
	};

	NAME() {
	    return this.getToken(VisualBasic6Parser.NAME, 0);
	};

	NEXT() {
	    return this.getToken(VisualBasic6Parser.NEXT, 0);
	};

	NEW() {
	    return this.getToken(VisualBasic6Parser.NEW, 0);
	};

	NOT() {
	    return this.getToken(VisualBasic6Parser.NOT, 0);
	};

	NOTHING() {
	    return this.getToken(VisualBasic6Parser.NOTHING, 0);
	};

	NULL_() {
	    return this.getToken(VisualBasic6Parser.NULL_, 0);
	};

	OBJECT() {
	    return this.getToken(VisualBasic6Parser.OBJECT, 0);
	};

	ON() {
	    return this.getToken(VisualBasic6Parser.ON, 0);
	};

	OPEN() {
	    return this.getToken(VisualBasic6Parser.OPEN, 0);
	};

	OPTIONAL() {
	    return this.getToken(VisualBasic6Parser.OPTIONAL, 0);
	};

	OR() {
	    return this.getToken(VisualBasic6Parser.OR, 0);
	};

	OUTPUT() {
	    return this.getToken(VisualBasic6Parser.OUTPUT, 0);
	};

	PARAMARRAY() {
	    return this.getToken(VisualBasic6Parser.PARAMARRAY, 0);
	};

	PRESERVE() {
	    return this.getToken(VisualBasic6Parser.PRESERVE, 0);
	};

	PRINT() {
	    return this.getToken(VisualBasic6Parser.PRINT, 0);
	};

	PRIVATE() {
	    return this.getToken(VisualBasic6Parser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(VisualBasic6Parser.PUBLIC, 0);
	};

	PUT() {
	    return this.getToken(VisualBasic6Parser.PUT, 0);
	};

	RANDOM() {
	    return this.getToken(VisualBasic6Parser.RANDOM, 0);
	};

	RANDOMIZE() {
	    return this.getToken(VisualBasic6Parser.RANDOMIZE, 0);
	};

	RAISEEVENT() {
	    return this.getToken(VisualBasic6Parser.RAISEEVENT, 0);
	};

	READ() {
	    return this.getToken(VisualBasic6Parser.READ, 0);
	};

	REDIM() {
	    return this.getToken(VisualBasic6Parser.REDIM, 0);
	};

	REM() {
	    return this.getToken(VisualBasic6Parser.REM, 0);
	};

	RESET() {
	    return this.getToken(VisualBasic6Parser.RESET, 0);
	};

	RESUME() {
	    return this.getToken(VisualBasic6Parser.RESUME, 0);
	};

	RETURN() {
	    return this.getToken(VisualBasic6Parser.RETURN, 0);
	};

	RMDIR() {
	    return this.getToken(VisualBasic6Parser.RMDIR, 0);
	};

	RSET() {
	    return this.getToken(VisualBasic6Parser.RSET, 0);
	};

	SAVEPICTURE() {
	    return this.getToken(VisualBasic6Parser.SAVEPICTURE, 0);
	};

	SAVESETTING() {
	    return this.getToken(VisualBasic6Parser.SAVESETTING, 0);
	};

	SEEK() {
	    return this.getToken(VisualBasic6Parser.SEEK, 0);
	};

	SELECT() {
	    return this.getToken(VisualBasic6Parser.SELECT, 0);
	};

	SENDKEYS() {
	    return this.getToken(VisualBasic6Parser.SENDKEYS, 0);
	};

	SET() {
	    return this.getToken(VisualBasic6Parser.SET, 0);
	};

	SETATTR() {
	    return this.getToken(VisualBasic6Parser.SETATTR, 0);
	};

	SHARED() {
	    return this.getToken(VisualBasic6Parser.SHARED, 0);
	};

	SINGLE() {
	    return this.getToken(VisualBasic6Parser.SINGLE, 0);
	};

	SPC() {
	    return this.getToken(VisualBasic6Parser.SPC, 0);
	};

	STATIC() {
	    return this.getToken(VisualBasic6Parser.STATIC, 0);
	};

	STEP() {
	    return this.getToken(VisualBasic6Parser.STEP, 0);
	};

	STOP() {
	    return this.getToken(VisualBasic6Parser.STOP, 0);
	};

	STRING() {
	    return this.getToken(VisualBasic6Parser.STRING, 0);
	};

	SUB() {
	    return this.getToken(VisualBasic6Parser.SUB, 0);
	};

	TAB() {
	    return this.getToken(VisualBasic6Parser.TAB, 0);
	};

	TEXT() {
	    return this.getToken(VisualBasic6Parser.TEXT, 0);
	};

	THEN() {
	    return this.getToken(VisualBasic6Parser.THEN, 0);
	};

	TIME() {
	    return this.getToken(VisualBasic6Parser.TIME, 0);
	};

	TO() {
	    return this.getToken(VisualBasic6Parser.TO, 0);
	};

	TRUE() {
	    return this.getToken(VisualBasic6Parser.TRUE, 0);
	};

	TYPE() {
	    return this.getToken(VisualBasic6Parser.TYPE, 0);
	};

	TYPEOF() {
	    return this.getToken(VisualBasic6Parser.TYPEOF, 0);
	};

	UNLOAD() {
	    return this.getToken(VisualBasic6Parser.UNLOAD, 0);
	};

	UNLOCK() {
	    return this.getToken(VisualBasic6Parser.UNLOCK, 0);
	};

	UNTIL() {
	    return this.getToken(VisualBasic6Parser.UNTIL, 0);
	};

	VARIANT() {
	    return this.getToken(VisualBasic6Parser.VARIANT, 0);
	};

	VERSION() {
	    return this.getToken(VisualBasic6Parser.VERSION, 0);
	};

	WEND() {
	    return this.getToken(VisualBasic6Parser.WEND, 0);
	};

	WHILE() {
	    return this.getToken(VisualBasic6Parser.WHILE, 0);
	};

	WIDTH() {
	    return this.getToken(VisualBasic6Parser.WIDTH, 0);
	};

	WITH() {
	    return this.getToken(VisualBasic6Parser.WITH, 0);
	};

	WITHEVENTS() {
	    return this.getToken(VisualBasic6Parser.WITHEVENTS, 0);
	};

	WRITE() {
	    return this.getToken(VisualBasic6Parser.WRITE, 0);
	};

	XOR() {
	    return this.getToken(VisualBasic6Parser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterAmbiguousKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitAmbiguousKeyword(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_integerLiteral;
    }

	INTEGERLITERAL() {
	    return this.getToken(VisualBasic6Parser.INTEGERLITERAL, 0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.PLUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.MINUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class OctalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_octalLiteral;
    }

	OCTALLITERAL() {
	    return this.getToken(VisualBasic6Parser.OCTALLITERAL, 0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.PLUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.MINUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterOctalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitOctalLiteral(this);
		}
	}


}



class DoubleLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VisualBasic6Parser.RULE_doubleLiteral;
    }

	DOUBLELITERAL() {
	    return this.getToken(VisualBasic6Parser.DOUBLELITERAL, 0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.PLUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VisualBasic6Parser.MINUS);
	    } else {
	        return this.getToken(VisualBasic6Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.enterDoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VisualBasic6ParserListener ) {
	        listener.exitDoubleLiteral(this);
		}
	}


}




VisualBasic6Parser.StartRuleContext = StartRuleContext; 
VisualBasic6Parser.ModuleContext = ModuleContext; 
VisualBasic6Parser.ModuleReferencesContext = ModuleReferencesContext; 
VisualBasic6Parser.ModuleReferenceContext = ModuleReferenceContext; 
VisualBasic6Parser.ModuleReferenceValueContext = ModuleReferenceValueContext; 
VisualBasic6Parser.ModuleReferenceComponentContext = ModuleReferenceComponentContext; 
VisualBasic6Parser.ModuleHeaderContext = ModuleHeaderContext; 
VisualBasic6Parser.ModuleConfigContext = ModuleConfigContext; 
VisualBasic6Parser.ModuleConfigElementContext = ModuleConfigElementContext; 
VisualBasic6Parser.ModuleAttributesContext = ModuleAttributesContext; 
VisualBasic6Parser.ModuleOptionsContext = ModuleOptionsContext; 
VisualBasic6Parser.ModuleOptionContext = ModuleOptionContext; 
VisualBasic6Parser.ModuleBodyContext = ModuleBodyContext; 
VisualBasic6Parser.ModuleBodyElementContext = ModuleBodyElementContext; 
VisualBasic6Parser.ControlPropertiesContext = ControlPropertiesContext; 
VisualBasic6Parser.Cp_PropertiesContext = Cp_PropertiesContext; 
VisualBasic6Parser.Cp_SinglePropertyContext = Cp_SinglePropertyContext; 
VisualBasic6Parser.Cp_PropertyNameContext = Cp_PropertyNameContext; 
VisualBasic6Parser.Cp_PropertyValueContext = Cp_PropertyValueContext; 
VisualBasic6Parser.Cp_NestedPropertyContext = Cp_NestedPropertyContext; 
VisualBasic6Parser.Cp_ControlTypeContext = Cp_ControlTypeContext; 
VisualBasic6Parser.Cp_ControlIdentifierContext = Cp_ControlIdentifierContext; 
VisualBasic6Parser.ModuleBlockContext = ModuleBlockContext; 
VisualBasic6Parser.AttributeStmtContext = AttributeStmtContext; 
VisualBasic6Parser.BlockContext = BlockContext; 
VisualBasic6Parser.BlockStmtContext = BlockStmtContext; 
VisualBasic6Parser.AppActivateStmtContext = AppActivateStmtContext; 
VisualBasic6Parser.BeepStmtContext = BeepStmtContext; 
VisualBasic6Parser.ChDirStmtContext = ChDirStmtContext; 
VisualBasic6Parser.ChDriveStmtContext = ChDriveStmtContext; 
VisualBasic6Parser.CloseStmtContext = CloseStmtContext; 
VisualBasic6Parser.ConstStmtContext = ConstStmtContext; 
VisualBasic6Parser.ConstSubStmtContext = ConstSubStmtContext; 
VisualBasic6Parser.DateStmtContext = DateStmtContext; 
VisualBasic6Parser.DeclareStmtContext = DeclareStmtContext; 
VisualBasic6Parser.DeftypeStmtContext = DeftypeStmtContext; 
VisualBasic6Parser.DeleteSettingStmtContext = DeleteSettingStmtContext; 
VisualBasic6Parser.DoLoopStmtContext = DoLoopStmtContext; 
VisualBasic6Parser.EndStmtContext = EndStmtContext; 
VisualBasic6Parser.EnumerationStmtContext = EnumerationStmtContext; 
VisualBasic6Parser.EnumerationStmt_ConstantContext = EnumerationStmt_ConstantContext; 
VisualBasic6Parser.EraseStmtContext = EraseStmtContext; 
VisualBasic6Parser.ErrorStmtContext = ErrorStmtContext; 
VisualBasic6Parser.EventStmtContext = EventStmtContext; 
VisualBasic6Parser.ExitStmtContext = ExitStmtContext; 
VisualBasic6Parser.FilecopyStmtContext = FilecopyStmtContext; 
VisualBasic6Parser.ForEachStmtContext = ForEachStmtContext; 
VisualBasic6Parser.ForNextStmtContext = ForNextStmtContext; 
VisualBasic6Parser.FunctionStmtContext = FunctionStmtContext; 
VisualBasic6Parser.GetStmtContext = GetStmtContext; 
VisualBasic6Parser.GoSubStmtContext = GoSubStmtContext; 
VisualBasic6Parser.GoToStmtContext = GoToStmtContext; 
VisualBasic6Parser.IfThenElseStmtContext = IfThenElseStmtContext; 
VisualBasic6Parser.IfBlockStmtContext = IfBlockStmtContext; 
VisualBasic6Parser.IfConditionStmtContext = IfConditionStmtContext; 
VisualBasic6Parser.IfElseIfBlockStmtContext = IfElseIfBlockStmtContext; 
VisualBasic6Parser.IfElseBlockStmtContext = IfElseBlockStmtContext; 
VisualBasic6Parser.ImplementsStmtContext = ImplementsStmtContext; 
VisualBasic6Parser.InputStmtContext = InputStmtContext; 
VisualBasic6Parser.KillStmtContext = KillStmtContext; 
VisualBasic6Parser.LetStmtContext = LetStmtContext; 
VisualBasic6Parser.LineInputStmtContext = LineInputStmtContext; 
VisualBasic6Parser.LoadStmtContext = LoadStmtContext; 
VisualBasic6Parser.LockStmtContext = LockStmtContext; 
VisualBasic6Parser.LsetStmtContext = LsetStmtContext; 
VisualBasic6Parser.MacroIfThenElseStmtContext = MacroIfThenElseStmtContext; 
VisualBasic6Parser.MacroIfBlockStmtContext = MacroIfBlockStmtContext; 
VisualBasic6Parser.MacroElseIfBlockStmtContext = MacroElseIfBlockStmtContext; 
VisualBasic6Parser.MacroElseBlockStmtContext = MacroElseBlockStmtContext; 
VisualBasic6Parser.MidStmtContext = MidStmtContext; 
VisualBasic6Parser.MkdirStmtContext = MkdirStmtContext; 
VisualBasic6Parser.NameStmtContext = NameStmtContext; 
VisualBasic6Parser.OnErrorStmtContext = OnErrorStmtContext; 
VisualBasic6Parser.OnGoToStmtContext = OnGoToStmtContext; 
VisualBasic6Parser.OnGoSubStmtContext = OnGoSubStmtContext; 
VisualBasic6Parser.OpenStmtContext = OpenStmtContext; 
VisualBasic6Parser.OutputListContext = OutputListContext; 
VisualBasic6Parser.OutputList_ExpressionContext = OutputList_ExpressionContext; 
VisualBasic6Parser.PrintStmtContext = PrintStmtContext; 
VisualBasic6Parser.PropertyGetStmtContext = PropertyGetStmtContext; 
VisualBasic6Parser.PropertySetStmtContext = PropertySetStmtContext; 
VisualBasic6Parser.PropertyLetStmtContext = PropertyLetStmtContext; 
VisualBasic6Parser.PutStmtContext = PutStmtContext; 
VisualBasic6Parser.RaiseEventStmtContext = RaiseEventStmtContext; 
VisualBasic6Parser.RandomizeStmtContext = RandomizeStmtContext; 
VisualBasic6Parser.RedimStmtContext = RedimStmtContext; 
VisualBasic6Parser.RedimSubStmtContext = RedimSubStmtContext; 
VisualBasic6Parser.ResetStmtContext = ResetStmtContext; 
VisualBasic6Parser.ResumeStmtContext = ResumeStmtContext; 
VisualBasic6Parser.ReturnStmtContext = ReturnStmtContext; 
VisualBasic6Parser.RmdirStmtContext = RmdirStmtContext; 
VisualBasic6Parser.RsetStmtContext = RsetStmtContext; 
VisualBasic6Parser.SavepictureStmtContext = SavepictureStmtContext; 
VisualBasic6Parser.SaveSettingStmtContext = SaveSettingStmtContext; 
VisualBasic6Parser.SeekStmtContext = SeekStmtContext; 
VisualBasic6Parser.SelectCaseStmtContext = SelectCaseStmtContext; 
VisualBasic6Parser.SC_CaseContext = SC_CaseContext; 
VisualBasic6Parser.SC_CondContext = SC_CondContext; 
VisualBasic6Parser.SC_CondExprContext = SC_CondExprContext; 
VisualBasic6Parser.SendkeysStmtContext = SendkeysStmtContext; 
VisualBasic6Parser.SetattrStmtContext = SetattrStmtContext; 
VisualBasic6Parser.SetStmtContext = SetStmtContext; 
VisualBasic6Parser.StopStmtContext = StopStmtContext; 
VisualBasic6Parser.SubStmtContext = SubStmtContext; 
VisualBasic6Parser.TimeStmtContext = TimeStmtContext; 
VisualBasic6Parser.TypeStmtContext = TypeStmtContext; 
VisualBasic6Parser.TypeStmt_ElementContext = TypeStmt_ElementContext; 
VisualBasic6Parser.TypeOfStmtContext = TypeOfStmtContext; 
VisualBasic6Parser.UnloadStmtContext = UnloadStmtContext; 
VisualBasic6Parser.UnlockStmtContext = UnlockStmtContext; 
VisualBasic6Parser.ValueStmtContext = ValueStmtContext; 
VisualBasic6Parser.VariableStmtContext = VariableStmtContext; 
VisualBasic6Parser.VariableListStmtContext = VariableListStmtContext; 
VisualBasic6Parser.VariableSubStmtContext = VariableSubStmtContext; 
VisualBasic6Parser.WhileWendStmtContext = WhileWendStmtContext; 
VisualBasic6Parser.WidthStmtContext = WidthStmtContext; 
VisualBasic6Parser.WithStmtContext = WithStmtContext; 
VisualBasic6Parser.WriteStmtContext = WriteStmtContext; 
VisualBasic6Parser.ExplicitCallStmtContext = ExplicitCallStmtContext; 
VisualBasic6Parser.ECS_ProcedureCallContext = ECS_ProcedureCallContext; 
VisualBasic6Parser.ECS_MemberProcedureCallContext = ECS_MemberProcedureCallContext; 
VisualBasic6Parser.ImplicitCallStmt_InBlockContext = ImplicitCallStmt_InBlockContext; 
VisualBasic6Parser.ICS_B_ProcedureCallContext = ICS_B_ProcedureCallContext; 
VisualBasic6Parser.ICS_B_MemberProcedureCallContext = ICS_B_MemberProcedureCallContext; 
VisualBasic6Parser.ImplicitCallStmt_InStmtContext = ImplicitCallStmt_InStmtContext; 
VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext = ICS_S_VariableOrProcedureCallContext; 
VisualBasic6Parser.ICS_S_ProcedureOrArrayCallContext = ICS_S_ProcedureOrArrayCallContext; 
VisualBasic6Parser.ICS_S_NestedProcedureCallContext = ICS_S_NestedProcedureCallContext; 
VisualBasic6Parser.ICS_S_MembersCallContext = ICS_S_MembersCallContext; 
VisualBasic6Parser.ICS_S_MemberCallContext = ICS_S_MemberCallContext; 
VisualBasic6Parser.ICS_S_DictionaryCallContext = ICS_S_DictionaryCallContext; 
VisualBasic6Parser.ArgsCallContext = ArgsCallContext; 
VisualBasic6Parser.ArgCallContext = ArgCallContext; 
VisualBasic6Parser.DictionaryCallStmtContext = DictionaryCallStmtContext; 
VisualBasic6Parser.ArgListContext = ArgListContext; 
VisualBasic6Parser.ArgContext = ArgContext; 
VisualBasic6Parser.ArgDefaultValueContext = ArgDefaultValueContext; 
VisualBasic6Parser.SubscriptsContext = SubscriptsContext; 
VisualBasic6Parser.Subscript_Context = Subscript_Context; 
VisualBasic6Parser.AmbiguousIdentifierContext = AmbiguousIdentifierContext; 
VisualBasic6Parser.AsTypeClauseContext = AsTypeClauseContext; 
VisualBasic6Parser.BaseTypeContext = BaseTypeContext; 
VisualBasic6Parser.CertainIdentifierContext = CertainIdentifierContext; 
VisualBasic6Parser.ComparisonOperatorContext = ComparisonOperatorContext; 
VisualBasic6Parser.ComplexTypeContext = ComplexTypeContext; 
VisualBasic6Parser.FieldLengthContext = FieldLengthContext; 
VisualBasic6Parser.LetterrangeContext = LetterrangeContext; 
VisualBasic6Parser.LineLabelContext = LineLabelContext; 
VisualBasic6Parser.LiteralContext = LiteralContext; 
VisualBasic6Parser.PublicPrivateVisibilityContext = PublicPrivateVisibilityContext; 
VisualBasic6Parser.PublicPrivateGlobalVisibilityContext = PublicPrivateGlobalVisibilityContext; 
VisualBasic6Parser.Type_Context = Type_Context; 
VisualBasic6Parser.TypeHintContext = TypeHintContext; 
VisualBasic6Parser.VisibilityContext = VisibilityContext; 
VisualBasic6Parser.AmbiguousKeywordContext = AmbiguousKeywordContext; 
VisualBasic6Parser.IntegerLiteralContext = IntegerLiteralContext; 
VisualBasic6Parser.OctalLiteralContext = OctalLiteralContext; 
VisualBasic6Parser.DoubleLiteralContext = DoubleLiteralContext; 
