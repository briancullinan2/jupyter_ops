// Generated from ./acme/acme.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import acmeListener from './acmeListener.js';
const serializedATN = [4,1,106,1718,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,1,0,5,0,224,
8,0,10,0,12,0,227,9,0,1,0,1,0,1,0,4,0,232,8,0,11,0,12,0,233,1,1,1,1,1,1,
3,1,239,8,1,1,1,1,1,1,2,1,2,1,3,3,3,246,8,3,1,3,1,3,4,3,250,8,3,11,3,12,
3,251,1,3,5,3,255,8,3,10,3,12,3,258,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,
1,6,1,6,3,6,270,8,6,1,6,1,6,1,6,1,6,5,6,276,8,6,10,6,12,6,279,9,6,1,6,1,
6,1,6,1,6,3,6,285,8,6,3,6,287,8,6,3,6,289,8,6,1,7,1,7,3,7,293,8,7,1,7,3,
7,296,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,305,8,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,3,7,316,8,7,5,7,318,8,7,10,7,12,7,321,9,7,1,7,1,7,1,8,1,8,
1,8,1,8,1,8,1,8,5,8,331,8,8,10,8,12,8,334,9,8,3,8,336,8,8,1,8,1,8,1,8,1,
8,3,8,342,8,8,1,8,1,8,1,8,1,8,5,8,348,8,8,10,8,12,8,351,9,8,1,8,1,8,1,8,
1,8,1,8,3,8,358,8,8,3,8,360,8,8,3,8,362,8,8,3,8,364,8,8,1,9,1,9,1,9,1,9,
1,9,1,9,1,9,5,9,373,8,9,10,9,12,9,376,9,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
11,3,11,385,8,11,1,12,1,12,1,12,3,12,390,8,12,1,13,1,13,1,13,3,13,395,8,
13,1,14,1,14,1,14,3,14,400,8,14,1,15,1,15,1,15,3,15,405,8,15,1,16,1,16,1,
16,3,16,410,8,16,1,17,1,17,1,17,3,17,415,8,17,1,18,1,18,1,18,3,18,420,8,
18,1,19,1,19,1,19,3,19,425,8,19,1,20,1,20,1,20,3,20,430,8,20,1,21,1,21,1,
21,3,21,435,8,21,1,22,1,22,1,22,3,22,440,8,22,1,23,1,23,1,23,3,23,445,8,
23,1,24,1,24,1,25,1,25,1,25,3,25,452,8,25,1,26,1,26,1,26,3,26,457,8,26,1,
27,1,27,1,27,5,27,462,8,27,10,27,12,27,465,9,27,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,3,28,474,8,28,1,28,1,28,1,28,1,28,5,28,480,8,28,10,28,12,28,483,
9,28,1,28,1,28,1,28,1,28,3,28,489,8,28,3,28,491,8,28,3,28,493,8,28,3,28,
495,8,28,1,29,1,29,1,29,5,29,500,8,29,10,29,12,29,503,9,29,1,29,1,29,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,3,30,514,8,30,1,30,1,30,1,30,1,30,5,30,520,
8,30,10,30,12,30,523,9,30,1,30,1,30,1,30,1,30,3,30,529,8,30,3,30,531,8,30,
3,30,533,8,30,3,30,535,8,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,543,8,31,
10,31,12,31,546,9,31,3,31,548,8,31,1,31,1,31,1,31,1,31,3,31,554,8,31,1,31,
1,31,1,31,1,31,5,31,560,8,31,10,31,12,31,563,9,31,1,31,1,31,1,31,1,31,1,
31,3,31,570,8,31,3,31,572,8,31,3,31,574,8,31,3,31,576,8,31,1,32,1,32,1,32,
1,32,5,32,582,8,32,10,32,12,32,585,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
33,5,33,594,8,33,10,33,12,33,597,9,33,3,33,599,8,33,1,33,1,33,3,33,603,8,
33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,612,8,34,1,34,1,34,1,34,1,34,
5,34,618,8,34,10,34,12,34,621,9,34,1,34,1,34,1,34,1,34,3,34,627,8,34,3,34,
629,8,34,3,34,631,8,34,3,34,633,8,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,
641,8,35,10,35,12,35,644,9,35,3,35,646,8,35,1,35,3,35,649,8,35,1,35,1,35,
1,35,3,35,654,8,35,1,35,1,35,1,35,1,35,5,35,660,8,35,10,35,12,35,663,9,35,
1,35,1,35,1,35,1,35,1,35,3,35,670,8,35,3,35,672,8,35,3,35,674,8,35,3,35,
676,8,35,1,36,1,36,1,36,1,36,5,36,682,8,36,10,36,12,36,685,9,36,1,36,1,36,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,696,8,37,1,37,1,37,1,37,1,37,5,37,
702,8,37,10,37,12,37,705,9,37,1,37,1,37,1,37,1,37,3,37,711,8,37,3,37,713,
8,37,3,37,715,8,37,3,37,717,8,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,725,
8,38,10,38,12,38,728,9,38,3,38,730,8,38,1,38,1,38,1,38,1,38,3,38,736,8,38,
1,38,1,38,1,38,1,38,5,38,742,8,38,10,38,12,38,745,9,38,1,38,1,38,1,38,1,
38,1,38,3,38,752,8,38,3,38,754,8,38,3,38,756,8,38,3,38,758,8,38,1,39,1,39,
1,39,1,39,5,39,764,8,39,10,39,12,39,767,9,39,1,39,1,39,1,40,1,40,1,40,1,
40,1,40,1,40,1,40,3,40,778,8,40,1,40,1,40,1,40,1,40,5,40,784,8,40,10,40,
12,40,787,9,40,1,40,1,40,1,40,1,40,3,40,793,8,40,3,40,795,8,40,3,40,797,
8,40,3,40,799,8,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,807,8,41,10,41,12,
41,810,9,41,3,41,812,8,41,1,41,1,41,1,41,1,41,3,41,818,8,41,1,41,1,41,1,
41,1,41,5,41,824,8,41,10,41,12,41,827,9,41,1,41,1,41,1,41,1,41,1,41,3,41,
834,8,41,3,41,836,8,41,3,41,838,8,41,3,41,840,8,41,1,42,1,42,1,42,1,42,1,
42,5,42,847,8,42,10,42,12,42,850,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
1,43,1,43,3,43,861,8,43,1,43,1,43,1,43,1,43,5,43,867,8,43,10,43,12,43,870,
9,43,1,43,1,43,1,43,1,43,3,43,876,8,43,3,43,878,8,43,3,43,880,8,43,3,43,
882,8,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,890,8,44,10,44,12,44,893,9,44,
3,44,895,8,44,1,44,1,44,1,44,1,44,3,44,901,8,44,1,44,1,44,1,44,1,44,5,44,
907,8,44,10,44,12,44,910,9,44,1,44,1,44,1,44,1,44,1,44,3,44,917,8,44,3,44,
919,8,44,3,44,921,8,44,3,44,923,8,44,1,45,1,45,1,45,1,45,1,45,5,45,930,8,
45,10,45,12,45,933,9,45,1,45,1,45,1,46,1,46,1,46,3,46,940,8,46,1,46,1,46,
1,46,3,46,945,8,46,1,46,1,46,3,46,949,8,46,1,47,1,47,1,47,5,47,954,8,47,
10,47,12,47,957,9,47,1,47,1,47,3,47,961,8,47,1,48,1,48,1,48,1,48,1,48,1,
48,1,48,1,48,3,48,971,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,
1,50,1,50,1,50,3,50,985,8,50,1,50,1,50,1,50,1,50,3,50,991,8,50,1,50,3,50,
994,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1007,
8,51,1,52,1,52,1,53,1,53,1,53,5,53,1014,8,53,10,53,12,53,1017,9,53,1,53,
3,53,1020,8,53,1,54,1,54,1,54,3,54,1025,8,54,1,55,1,55,1,55,1,55,5,55,1031,
8,55,10,55,12,55,1034,9,55,3,55,1036,8,55,1,55,1,55,1,56,1,56,1,56,3,56,
1043,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,1052,8,57,10,57,12,57,
1055,9,57,1,57,3,57,1058,8,57,3,57,1060,8,57,1,57,1,57,1,58,1,58,1,58,1,
58,5,58,1068,8,58,10,58,12,58,1071,9,58,3,58,1073,8,58,1,58,1,58,1,59,1,
59,1,59,5,59,1080,8,59,10,59,12,59,1083,9,59,1,59,1,59,1,60,1,60,1,60,3,
60,1090,8,60,1,60,1,60,1,61,1,61,1,61,3,61,1097,8,61,1,61,1,61,1,62,1,62,
1,62,1,62,1,62,5,62,1106,8,62,10,62,12,62,1109,9,62,1,62,1,62,1,63,1,63,
1,63,1,63,1,63,1,64,1,64,3,64,1120,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,3,65,1132,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1149,8,66,1,66,1,66,3,66,1153,8,
66,1,67,1,67,1,67,3,67,1158,8,67,1,67,1,67,1,67,1,67,3,67,1164,8,67,1,67,
1,67,1,68,1,68,4,68,1170,8,68,11,68,12,68,1171,1,68,1,68,1,69,1,69,1,70,
1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,3,75,1192,
8,75,1,75,1,75,1,75,1,75,3,75,1198,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,3,75,1207,8,75,3,75,1209,8,75,3,75,1211,8,75,3,75,1213,8,75,1,76,1,76,
1,76,1,76,1,76,1,76,1,76,3,76,1222,8,76,1,76,1,76,1,76,1,76,1,76,1,76,3,
76,1230,8,76,3,76,1232,8,76,3,76,1234,8,76,3,76,1236,8,76,1,77,1,77,1,77,
1,78,3,78,1242,8,78,1,78,1,78,1,78,3,78,1247,8,78,3,78,1249,8,78,1,78,1,
78,1,78,1,78,3,78,1255,8,78,3,78,1257,8,78,1,78,3,78,1260,8,78,1,78,1,78,
1,79,3,79,1265,8,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,1273,8,79,10,79,12,
79,1276,9,79,3,79,1278,8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1286,8,79,
1,79,1,79,1,79,1,79,3,79,1292,8,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,1300,
8,79,10,79,12,79,1303,9,79,3,79,1305,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,5,79,1315,8,79,10,79,12,79,1318,9,79,3,79,1320,8,79,1,79,1,79,
3,79,1324,8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,5,82,1336,
8,82,10,82,12,82,1339,9,82,1,83,1,83,1,83,5,83,1344,8,83,10,83,12,83,1347,
9,83,1,84,1,84,1,84,5,84,1352,8,84,10,84,12,84,1355,9,84,1,85,1,85,1,85,
5,85,1360,8,85,10,85,12,85,1363,9,85,1,86,1,86,1,86,3,86,1368,8,86,1,87,
1,87,1,87,1,87,1,87,5,87,1375,8,87,10,87,12,87,1378,9,87,1,88,1,88,1,88,
1,88,1,88,1,88,1,88,1,88,1,88,5,88,1389,8,88,10,88,12,88,1392,9,88,1,89,
1,89,1,89,1,89,1,89,5,89,1399,8,89,10,89,12,89,1402,9,89,1,90,1,90,1,90,
1,90,1,90,1,90,1,90,1,90,1,90,5,90,1413,8,90,10,90,12,90,1416,9,90,1,91,
1,91,1,91,3,91,1421,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1431,
8,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,3,94,1441,8,94,5,94,1443,8,
94,10,94,12,94,1446,9,94,1,94,3,94,1449,8,94,1,95,1,95,1,95,1,95,1,95,1,
95,1,95,1,95,1,95,1,95,1,95,3,95,1462,8,95,1,96,1,96,1,96,1,96,5,96,1468,
8,96,10,96,12,96,1471,9,96,3,96,1473,8,96,1,96,1,96,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,3,97,1499,8,97,1,98,1,98,1,98,3,98,1504,8,98,3,98,1506,
8,98,1,98,1,98,1,98,5,98,1511,8,98,10,98,12,98,1514,9,98,1,98,1,98,1,98,
1,99,1,99,1,99,1,99,5,99,1523,8,99,10,99,12,99,1526,9,99,1,99,1,99,3,99,
1530,8,99,1,99,1,99,1,99,3,99,1535,8,99,1,100,1,100,1,100,1,100,5,100,1541,
8,100,10,100,12,100,1544,9,100,1,100,1,100,3,100,1548,8,100,1,100,1,100,
1,100,3,100,1553,8,100,3,100,1555,8,100,1,101,1,101,1,101,1,101,1,102,1,
102,1,102,3,102,1564,8,102,1,103,1,103,1,103,1,103,3,103,1570,8,103,1,103,
1,103,1,103,1,103,3,103,1576,8,103,1,103,1,103,5,103,1580,8,103,10,103,12,
103,1583,9,103,1,104,1,104,1,104,3,104,1588,8,104,1,104,1,104,1,104,1,104,
3,104,1594,8,104,1,104,1,104,5,104,1598,8,104,10,104,12,104,1601,9,104,1,
104,3,104,1604,8,104,1,104,3,104,1607,8,104,1,105,1,105,1,105,1,105,1,105,
3,105,1614,8,105,1,105,1,105,1,105,3,105,1619,8,105,5,105,1621,8,105,10,
105,12,105,1624,9,105,1,105,1,105,3,105,1628,8,105,1,106,1,106,1,106,1,106,
1,106,3,106,1635,8,106,1,106,1,106,1,106,3,106,1640,8,106,5,106,1642,8,106,
10,106,12,106,1645,9,106,1,106,1,106,3,106,1649,8,106,1,107,1,107,1,107,
3,107,1654,8,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,5,108,1663,8,
108,10,108,12,108,1666,9,108,1,108,3,108,1669,8,108,3,108,1671,8,108,1,108,
1,108,1,109,3,109,1676,8,109,1,109,1,109,1,109,1,109,1,109,3,109,1683,8,
109,1,109,3,109,1686,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,
1695,8,109,1,109,1,109,1,109,3,109,1700,8,109,3,109,1702,8,109,1,110,1,110,
1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1716,8,
110,1,110,0,0,111,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
200,202,204,206,208,210,212,214,216,218,220,0,6,2,0,1,1,76,76,7,0,1,3,15,
15,25,25,61,61,67,67,76,76,86,86,2,0,35,35,89,89,1,0,64,65,2,0,4,4,36,36,
2,0,15,15,85,85,1962,0,225,1,0,0,0,2,235,1,0,0,0,4,242,1,0,0,0,6,245,1,0,
0,0,8,259,1,0,0,0,10,261,1,0,0,0,12,263,1,0,0,0,14,290,1,0,0,0,16,324,1,
0,0,0,18,365,1,0,0,0,20,379,1,0,0,0,22,381,1,0,0,0,24,386,1,0,0,0,26,391,
1,0,0,0,28,396,1,0,0,0,30,401,1,0,0,0,32,406,1,0,0,0,34,411,1,0,0,0,36,416,
1,0,0,0,38,421,1,0,0,0,40,426,1,0,0,0,42,431,1,0,0,0,44,436,1,0,0,0,46,441,
1,0,0,0,48,446,1,0,0,0,50,448,1,0,0,0,52,453,1,0,0,0,54,458,1,0,0,0,56,466,
1,0,0,0,58,496,1,0,0,0,60,506,1,0,0,0,62,536,1,0,0,0,64,577,1,0,0,0,66,588,
1,0,0,0,68,604,1,0,0,0,70,634,1,0,0,0,72,677,1,0,0,0,74,688,1,0,0,0,76,718,
1,0,0,0,78,759,1,0,0,0,80,770,1,0,0,0,82,800,1,0,0,0,84,841,1,0,0,0,86,853,
1,0,0,0,88,883,1,0,0,0,90,924,1,0,0,0,92,936,1,0,0,0,94,950,1,0,0,0,96,962,
1,0,0,0,98,974,1,0,0,0,100,980,1,0,0,0,102,1006,1,0,0,0,104,1008,1,0,0,0,
106,1019,1,0,0,0,108,1024,1,0,0,0,110,1026,1,0,0,0,112,1039,1,0,0,0,114,
1047,1,0,0,0,116,1063,1,0,0,0,118,1076,1,0,0,0,120,1086,1,0,0,0,122,1093,
1,0,0,0,124,1100,1,0,0,0,126,1112,1,0,0,0,128,1119,1,0,0,0,130,1131,1,0,
0,0,132,1133,1,0,0,0,134,1154,1,0,0,0,136,1167,1,0,0,0,138,1175,1,0,0,0,
140,1177,1,0,0,0,142,1179,1,0,0,0,144,1181,1,0,0,0,146,1183,1,0,0,0,148,
1185,1,0,0,0,150,1187,1,0,0,0,152,1214,1,0,0,0,154,1237,1,0,0,0,156,1241,
1,0,0,0,158,1323,1,0,0,0,160,1325,1,0,0,0,162,1329,1,0,0,0,164,1332,1,0,
0,0,166,1340,1,0,0,0,168,1348,1,0,0,0,170,1356,1,0,0,0,172,1367,1,0,0,0,
174,1369,1,0,0,0,176,1379,1,0,0,0,178,1393,1,0,0,0,180,1403,1,0,0,0,182,
1420,1,0,0,0,184,1430,1,0,0,0,186,1432,1,0,0,0,188,1436,1,0,0,0,190,1461,
1,0,0,0,192,1463,1,0,0,0,194,1498,1,0,0,0,196,1505,1,0,0,0,198,1518,1,0,
0,0,200,1554,1,0,0,0,202,1556,1,0,0,0,204,1563,1,0,0,0,206,1565,1,0,0,0,
208,1606,1,0,0,0,210,1627,1,0,0,0,212,1648,1,0,0,0,214,1650,1,0,0,0,216,
1658,1,0,0,0,218,1701,1,0,0,0,220,1715,1,0,0,0,222,224,3,2,1,0,223,222,1,
0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,231,1,0,0,0,227,
225,1,0,0,0,228,232,3,16,8,0,229,232,3,12,6,0,230,232,3,20,10,0,231,228,
1,0,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,
233,234,1,0,0,0,234,1,1,0,0,0,235,238,5,44,0,0,236,239,3,6,3,0,237,239,3,
4,2,0,238,236,1,0,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,241,5,83,0,0,241,
3,1,0,0,0,242,243,5,102,0,0,243,5,1,0,0,0,244,246,7,0,0,0,245,244,1,0,0,
0,245,246,1,0,0,0,246,247,1,0,0,0,247,256,5,103,0,0,248,250,7,1,0,0,249,
248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,1,0,
0,0,253,255,5,103,0,0,254,249,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,
257,1,0,0,0,257,7,1,0,0,0,258,256,1,0,0,0,259,260,5,103,0,0,260,9,1,0,0,
0,261,262,5,102,0,0,262,11,1,0,0,0,263,264,7,2,0,0,264,288,3,8,4,0,265,289,
5,83,0,0,266,267,5,8,0,0,267,269,3,14,7,0,268,270,5,83,0,0,269,268,1,0,0,
0,269,270,1,0,0,0,270,289,1,0,0,0,271,272,5,30,0,0,272,277,3,46,23,0,273,
274,5,16,0,0,274,276,3,46,23,0,275,273,1,0,0,0,276,279,1,0,0,0,277,275,1,
0,0,0,277,278,1,0,0,0,278,286,1,0,0,0,279,277,1,0,0,0,280,287,5,83,0,0,281,
282,5,94,0,0,282,284,3,14,7,0,283,285,5,83,0,0,284,283,1,0,0,0,284,285,1,
0,0,0,285,287,1,0,0,0,286,280,1,0,0,0,286,281,1,0,0,0,287,289,1,0,0,0,288,
265,1,0,0,0,288,266,1,0,0,0,288,271,1,0,0,0,289,13,1,0,0,0,290,319,5,49,
0,0,291,293,7,3,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,
296,7,4,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,304,1,0,0,0,297,305,3,68,
34,0,298,305,3,74,37,0,299,305,3,80,40,0,300,305,3,86,43,0,301,305,3,56,
28,0,302,305,3,132,66,0,303,305,3,60,30,0,304,297,1,0,0,0,304,298,1,0,0,
0,304,299,1,0,0,0,304,300,1,0,0,0,304,301,1,0,0,0,304,302,1,0,0,0,304,303,
1,0,0,0,305,318,1,0,0,0,306,316,3,158,79,0,307,316,3,156,78,0,308,316,3,
70,35,0,309,316,3,76,38,0,310,316,3,82,41,0,311,316,3,88,44,0,312,316,3,
100,50,0,313,316,3,62,31,0,314,316,3,98,49,0,315,306,1,0,0,0,315,307,1,0,
0,0,315,308,1,0,0,0,315,309,1,0,0,0,315,310,1,0,0,0,315,311,1,0,0,0,315,
312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,0,316,318,1,0,0,0,317,292,1,0,
0,0,317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
322,1,0,0,0,321,319,1,0,0,0,322,323,5,50,0,0,323,15,1,0,0,0,324,325,5,90,
0,0,325,335,3,8,4,0,326,327,5,15,0,0,327,332,3,46,23,0,328,329,5,16,0,0,
329,331,3,46,23,0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,
1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,335,326,1,0,0,0,335,336,1,0,0,0,
336,363,1,0,0,0,337,364,5,83,0,0,338,361,5,8,0,0,339,341,3,18,9,0,340,342,
5,83,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,362,1,0,0,0,343,344,5,59,0,
0,344,349,3,48,24,0,345,346,5,16,0,0,346,348,3,48,24,0,347,345,1,0,0,0,348,
351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,359,1,0,0,0,351,349,1,0,
0,0,352,360,5,83,0,0,353,354,5,29,0,0,354,355,5,94,0,0,355,357,3,18,9,0,
356,358,5,83,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,352,
1,0,0,0,359,353,1,0,0,0,360,362,1,0,0,0,361,339,1,0,0,0,361,343,1,0,0,0,
362,364,1,0,0,0,363,337,1,0,0,0,363,338,1,0,0,0,364,17,1,0,0,0,365,374,5,
49,0,0,366,373,3,100,50,0,367,373,3,82,41,0,368,373,3,88,44,0,369,373,3,
98,49,0,370,373,3,62,31,0,371,373,3,156,78,0,372,366,1,0,0,0,372,367,1,0,
0,0,372,368,1,0,0,0,372,369,1,0,0,0,372,370,1,0,0,0,372,371,1,0,0,0,373,
376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,
0,0,377,378,5,50,0,0,378,19,1,0,0,0,379,380,5,23,0,0,380,21,1,0,0,0,381,
384,3,8,4,0,382,383,5,25,0,0,383,385,3,8,4,0,384,382,1,0,0,0,384,385,1,0,
0,0,385,23,1,0,0,0,386,389,3,8,4,0,387,388,5,25,0,0,388,390,3,8,4,0,389,
387,1,0,0,0,389,390,1,0,0,0,390,25,1,0,0,0,391,394,3,8,4,0,392,393,5,25,
0,0,393,395,3,8,4,0,394,392,1,0,0,0,394,395,1,0,0,0,395,27,1,0,0,0,396,399,
3,8,4,0,397,398,5,25,0,0,398,400,3,8,4,0,399,397,1,0,0,0,399,400,1,0,0,0,
400,29,1,0,0,0,401,404,3,8,4,0,402,403,5,25,0,0,403,405,3,8,4,0,404,402,
1,0,0,0,404,405,1,0,0,0,405,31,1,0,0,0,406,409,3,8,4,0,407,408,5,25,0,0,
408,410,3,8,4,0,409,407,1,0,0,0,409,410,1,0,0,0,410,33,1,0,0,0,411,414,3,
8,4,0,412,413,5,25,0,0,413,415,3,8,4,0,414,412,1,0,0,0,414,415,1,0,0,0,415,
35,1,0,0,0,416,419,3,8,4,0,417,418,5,25,0,0,418,420,3,8,4,0,419,417,1,0,
0,0,419,420,1,0,0,0,420,37,1,0,0,0,421,424,3,8,4,0,422,423,5,25,0,0,423,
425,3,8,4,0,424,422,1,0,0,0,424,425,1,0,0,0,425,39,1,0,0,0,426,429,3,8,4,
0,427,428,5,25,0,0,428,430,3,8,4,0,429,427,1,0,0,0,429,430,1,0,0,0,430,41,
1,0,0,0,431,434,3,8,4,0,432,433,5,25,0,0,433,435,3,8,4,0,434,432,1,0,0,0,
434,435,1,0,0,0,435,43,1,0,0,0,436,439,3,8,4,0,437,438,5,25,0,0,438,440,
3,8,4,0,439,437,1,0,0,0,439,440,1,0,0,0,440,45,1,0,0,0,441,444,3,8,4,0,442,
443,5,25,0,0,443,445,3,8,4,0,444,442,1,0,0,0,444,445,1,0,0,0,445,47,1,0,
0,0,446,447,3,8,4,0,447,49,1,0,0,0,448,451,3,8,4,0,449,450,5,25,0,0,450,
452,3,8,4,0,451,449,1,0,0,0,451,452,1,0,0,0,452,51,1,0,0,0,453,456,3,8,4,
0,454,455,5,25,0,0,455,457,3,8,4,0,456,454,1,0,0,0,456,457,1,0,0,0,457,53,
1,0,0,0,458,463,5,103,0,0,459,460,5,25,0,0,460,462,5,103,0,0,461,459,1,0,
0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,55,1,0,0,0,465,463,
1,0,0,0,466,467,5,27,0,0,467,468,5,92,0,0,468,494,3,8,4,0,469,495,5,83,0,
0,470,471,5,8,0,0,471,473,3,58,29,0,472,474,5,83,0,0,473,472,1,0,0,0,473,
474,1,0,0,0,474,493,1,0,0,0,475,476,5,30,0,0,476,481,3,50,25,0,477,478,5,
16,0,0,478,480,3,50,25,0,479,477,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,
481,482,1,0,0,0,482,490,1,0,0,0,483,481,1,0,0,0,484,491,5,83,0,0,485,486,
5,94,0,0,486,488,3,58,29,0,487,489,5,83,0,0,488,487,1,0,0,0,488,489,1,0,
0,0,489,491,1,0,0,0,490,484,1,0,0,0,490,485,1,0,0,0,491,493,1,0,0,0,492,
470,1,0,0,0,492,475,1,0,0,0,493,495,1,0,0,0,494,469,1,0,0,0,494,492,1,0,
0,0,495,57,1,0,0,0,496,501,5,49,0,0,497,500,3,100,50,0,498,500,3,156,78,
0,499,497,1,0,0,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,
1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,50,0,0,505,59,1,0,0,0,
506,507,5,39,0,0,507,508,5,92,0,0,508,534,3,8,4,0,509,535,5,83,0,0,510,511,
5,8,0,0,511,513,3,64,32,0,512,514,5,83,0,0,513,512,1,0,0,0,513,514,1,0,0,
0,514,533,1,0,0,0,515,516,5,30,0,0,516,521,3,34,17,0,517,518,5,16,0,0,518,
520,3,34,17,0,519,517,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,
0,0,0,522,530,1,0,0,0,523,521,1,0,0,0,524,531,5,83,0,0,525,526,5,94,0,0,
526,528,3,64,32,0,527,529,5,83,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,531,
1,0,0,0,530,524,1,0,0,0,530,525,1,0,0,0,531,533,1,0,0,0,532,510,1,0,0,0,
532,515,1,0,0,0,533,535,1,0,0,0,534,509,1,0,0,0,534,532,1,0,0,0,535,61,1,
0,0,0,536,537,5,39,0,0,537,547,3,8,4,0,538,539,5,15,0,0,539,544,3,34,17,
0,540,541,5,16,0,0,541,543,3,34,17,0,542,540,1,0,0,0,543,546,1,0,0,0,544,
542,1,0,0,0,544,545,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,547,538,1,0,
0,0,547,548,1,0,0,0,548,575,1,0,0,0,549,576,5,83,0,0,550,573,5,8,0,0,551,
553,3,64,32,0,552,554,5,83,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,574,1,
0,0,0,555,556,5,59,0,0,556,561,3,36,18,0,557,558,5,16,0,0,558,560,3,36,18,
0,559,557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,571,
1,0,0,0,563,561,1,0,0,0,564,572,5,83,0,0,565,566,5,29,0,0,566,567,5,94,0,
0,567,569,3,64,32,0,568,570,5,83,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,
572,1,0,0,0,571,564,1,0,0,0,571,565,1,0,0,0,572,574,1,0,0,0,573,551,1,0,
0,0,573,555,1,0,0,0,574,576,1,0,0,0,575,549,1,0,0,0,575,550,1,0,0,0,576,
63,1,0,0,0,577,583,5,49,0,0,578,582,3,66,33,0,579,582,3,100,50,0,580,582,
3,156,78,0,581,578,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,585,1,0,0,
0,583,581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,
5,50,0,0,587,65,1,0,0,0,588,589,5,60,0,0,589,598,5,49,0,0,590,595,3,54,27,
0,591,592,5,16,0,0,592,594,3,54,27,0,593,591,1,0,0,0,594,597,1,0,0,0,595,
593,1,0,0,0,595,596,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,598,590,1,0,
0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,5,50,0,0,601,603,5,83,0,0,602,
601,1,0,0,0,602,603,1,0,0,0,603,67,1,0,0,0,604,605,5,68,0,0,605,606,5,92,
0,0,606,632,3,8,4,0,607,633,5,83,0,0,608,609,5,8,0,0,609,611,3,72,36,0,610,
612,5,83,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,631,1,0,0,0,613,614,5,30,
0,0,614,619,3,30,15,0,615,616,5,16,0,0,616,618,3,30,15,0,617,615,1,0,0,0,
618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,628,1,0,0,0,621,619,
1,0,0,0,622,629,5,83,0,0,623,624,5,94,0,0,624,626,3,72,36,0,625,627,5,83,
0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,622,1,0,0,0,628,
623,1,0,0,0,629,631,1,0,0,0,630,608,1,0,0,0,630,613,1,0,0,0,631,633,1,0,
0,0,632,607,1,0,0,0,632,630,1,0,0,0,633,69,1,0,0,0,634,635,5,68,0,0,635,
645,3,8,4,0,636,637,5,15,0,0,637,642,3,30,15,0,638,639,5,16,0,0,639,641,
3,30,15,0,640,638,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,
0,643,646,1,0,0,0,644,642,1,0,0,0,645,636,1,0,0,0,645,646,1,0,0,0,646,675,
1,0,0,0,647,649,5,83,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,676,1,0,0,0,
650,673,5,8,0,0,651,653,3,72,36,0,652,654,5,83,0,0,653,652,1,0,0,0,653,654,
1,0,0,0,654,674,1,0,0,0,655,656,5,59,0,0,656,661,3,32,16,0,657,658,5,16,
0,0,658,660,3,32,16,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,
662,1,0,0,0,662,671,1,0,0,0,663,661,1,0,0,0,664,672,5,83,0,0,665,666,5,29,
0,0,666,667,5,94,0,0,667,669,3,72,36,0,668,670,5,83,0,0,669,668,1,0,0,0,
669,670,1,0,0,0,670,672,1,0,0,0,671,664,1,0,0,0,671,665,1,0,0,0,672,674,
1,0,0,0,673,651,1,0,0,0,673,655,1,0,0,0,674,676,1,0,0,0,675,648,1,0,0,0,
675,650,1,0,0,0,676,71,1,0,0,0,677,683,5,49,0,0,678,682,3,100,50,0,679,682,
3,156,78,0,680,682,3,92,46,0,681,678,1,0,0,0,681,679,1,0,0,0,681,680,1,0,
0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,
683,1,0,0,0,686,687,5,50,0,0,687,73,1,0,0,0,688,689,5,78,0,0,689,690,5,92,
0,0,690,716,3,8,4,0,691,717,5,83,0,0,692,693,5,8,0,0,693,695,3,78,39,0,694,
696,5,83,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,715,1,0,0,0,697,698,5,30,
0,0,698,703,3,38,19,0,699,700,5,16,0,0,700,702,3,38,19,0,701,699,1,0,0,0,
702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,712,1,0,0,0,705,703,
1,0,0,0,706,713,5,83,0,0,707,708,5,94,0,0,708,710,3,78,39,0,709,711,5,83,
0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,706,1,0,0,0,712,
707,1,0,0,0,713,715,1,0,0,0,714,692,1,0,0,0,714,697,1,0,0,0,715,717,1,0,
0,0,716,691,1,0,0,0,716,714,1,0,0,0,717,75,1,0,0,0,718,719,5,78,0,0,719,
729,3,8,4,0,720,721,5,15,0,0,721,726,3,38,19,0,722,723,5,16,0,0,723,725,
3,38,19,0,724,722,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,
0,727,730,1,0,0,0,728,726,1,0,0,0,729,720,1,0,0,0,729,730,1,0,0,0,730,757,
1,0,0,0,731,758,5,83,0,0,732,755,5,8,0,0,733,735,3,78,39,0,734,736,5,83,
0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,756,1,0,0,0,737,738,5,59,0,0,738,
743,3,40,20,0,739,740,5,16,0,0,740,742,3,40,20,0,741,739,1,0,0,0,742,745,
1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,753,1,0,0,0,745,743,1,0,0,0,
746,754,5,83,0,0,747,748,5,29,0,0,748,749,5,94,0,0,749,751,3,78,39,0,750,
752,5,83,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,754,1,0,0,0,753,746,1,0,
0,0,753,747,1,0,0,0,754,756,1,0,0,0,755,733,1,0,0,0,755,737,1,0,0,0,756,
758,1,0,0,0,757,731,1,0,0,0,757,732,1,0,0,0,758,77,1,0,0,0,759,765,5,49,
0,0,760,764,3,100,50,0,761,764,3,156,78,0,762,764,3,92,46,0,763,760,1,0,
0,0,763,761,1,0,0,0,763,762,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,
766,1,0,0,0,766,768,1,0,0,0,767,765,1,0,0,0,768,769,5,50,0,0,769,79,1,0,
0,0,770,771,5,18,0,0,771,772,5,92,0,0,772,798,3,8,4,0,773,799,5,83,0,0,774,
775,5,8,0,0,775,777,3,84,42,0,776,778,5,83,0,0,777,776,1,0,0,0,777,778,1,
0,0,0,778,797,1,0,0,0,779,780,5,30,0,0,780,785,3,22,11,0,781,782,5,16,0,
0,782,784,3,22,11,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,
786,1,0,0,0,786,794,1,0,0,0,787,785,1,0,0,0,788,795,5,83,0,0,789,790,5,94,
0,0,790,792,3,84,42,0,791,793,5,83,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,
795,1,0,0,0,794,788,1,0,0,0,794,789,1,0,0,0,795,797,1,0,0,0,796,774,1,0,
0,0,796,779,1,0,0,0,797,799,1,0,0,0,798,773,1,0,0,0,798,796,1,0,0,0,799,
81,1,0,0,0,800,801,5,18,0,0,801,811,3,8,4,0,802,803,5,15,0,0,803,808,3,22,
11,0,804,805,5,16,0,0,805,807,3,22,11,0,806,804,1,0,0,0,807,810,1,0,0,0,
808,806,1,0,0,0,808,809,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,811,802,
1,0,0,0,811,812,1,0,0,0,812,839,1,0,0,0,813,840,5,83,0,0,814,837,5,8,0,0,
815,817,3,84,42,0,816,818,5,83,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,838,
1,0,0,0,819,820,5,59,0,0,820,825,3,24,12,0,821,822,5,16,0,0,822,824,3,24,
12,0,823,821,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,
835,1,0,0,0,827,825,1,0,0,0,828,836,5,83,0,0,829,830,5,29,0,0,830,831,5,
94,0,0,831,833,3,84,42,0,832,834,5,83,0,0,833,832,1,0,0,0,833,834,1,0,0,
0,834,836,1,0,0,0,835,828,1,0,0,0,835,829,1,0,0,0,836,838,1,0,0,0,837,815,
1,0,0,0,837,819,1,0,0,0,838,840,1,0,0,0,839,813,1,0,0,0,839,814,1,0,0,0,
840,83,1,0,0,0,841,848,5,49,0,0,842,847,3,100,50,0,843,847,3,70,35,0,844,
847,3,156,78,0,845,847,3,92,46,0,846,842,1,0,0,0,846,843,1,0,0,0,846,844,
1,0,0,0,846,845,1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,
849,851,1,0,0,0,850,848,1,0,0,0,851,852,5,50,0,0,852,85,1,0,0,0,853,854,
5,20,0,0,854,855,5,92,0,0,855,881,3,8,4,0,856,882,5,83,0,0,857,858,5,8,0,
0,858,860,3,90,45,0,859,861,5,83,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,
880,1,0,0,0,862,863,5,30,0,0,863,868,3,26,13,0,864,865,5,16,0,0,865,867,
3,26,13,0,866,864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,
0,869,877,1,0,0,0,870,868,1,0,0,0,871,878,5,83,0,0,872,873,5,94,0,0,873,
875,3,90,45,0,874,876,5,83,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,878,1,
0,0,0,877,871,1,0,0,0,877,872,1,0,0,0,878,880,1,0,0,0,879,857,1,0,0,0,879,
862,1,0,0,0,880,882,1,0,0,0,881,856,1,0,0,0,881,879,1,0,0,0,882,87,1,0,0,
0,883,884,5,20,0,0,884,894,3,8,4,0,885,886,5,15,0,0,886,891,3,26,13,0,887,
888,5,16,0,0,888,890,3,26,13,0,889,887,1,0,0,0,890,893,1,0,0,0,891,889,1,
0,0,0,891,892,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,894,885,1,0,0,0,894,
895,1,0,0,0,895,922,1,0,0,0,896,923,5,83,0,0,897,920,5,8,0,0,898,900,3,90,
45,0,899,901,5,83,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,921,1,0,0,0,902,
903,5,59,0,0,903,908,3,28,14,0,904,905,5,16,0,0,905,907,3,28,14,0,906,904,
1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,918,1,0,0,0,
910,908,1,0,0,0,911,919,5,83,0,0,912,913,5,29,0,0,913,914,5,94,0,0,914,916,
3,90,45,0,915,917,5,83,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,
0,918,911,1,0,0,0,918,912,1,0,0,0,919,921,1,0,0,0,920,898,1,0,0,0,920,902,
1,0,0,0,921,923,1,0,0,0,922,896,1,0,0,0,922,897,1,0,0,0,923,89,1,0,0,0,924,
931,5,49,0,0,925,930,3,100,50,0,926,930,3,76,38,0,927,930,3,156,78,0,928,
930,3,92,46,0,929,925,1,0,0,0,929,926,1,0,0,0,929,927,1,0,0,0,929,928,1,
0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,
931,1,0,0,0,934,935,5,50,0,0,935,91,1,0,0,0,936,939,5,75,0,0,937,938,5,103,
0,0,938,940,5,8,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,
942,5,49,0,0,942,944,3,16,8,0,943,945,3,94,47,0,944,943,1,0,0,0,944,945,
1,0,0,0,945,946,1,0,0,0,946,948,5,50,0,0,947,949,5,83,0,0,948,947,1,0,0,
0,948,949,1,0,0,0,949,93,1,0,0,0,950,951,5,14,0,0,951,955,5,49,0,0,952,954,
3,96,48,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,
0,956,958,1,0,0,0,957,955,1,0,0,0,958,960,5,50,0,0,959,961,5,83,0,0,960,
959,1,0,0,0,960,961,1,0,0,0,961,95,1,0,0,0,962,963,3,54,27,0,963,964,5,91,
0,0,964,970,3,54,27,0,965,966,5,49,0,0,966,967,3,100,50,0,967,968,3,136,
68,0,968,969,5,50,0,0,969,971,1,0,0,0,970,965,1,0,0,0,970,971,1,0,0,0,971,
972,1,0,0,0,972,973,5,83,0,0,973,97,1,0,0,0,974,975,5,9,0,0,975,976,3,54,
27,0,976,977,5,91,0,0,977,978,3,54,27,0,978,979,5,83,0,0,979,99,1,0,0,0,
980,981,5,70,0,0,981,984,3,8,4,0,982,983,5,15,0,0,983,985,3,128,64,0,984,
982,1,0,0,0,984,985,1,0,0,0,985,990,1,0,0,0,986,987,5,8,0,0,987,991,3,102,
51,0,988,989,5,21,0,0,989,991,3,102,51,0,990,986,1,0,0,0,990,988,1,0,0,0,
990,991,1,0,0,0,991,993,1,0,0,0,992,994,3,136,68,0,993,992,1,0,0,0,993,994,
1,0,0,0,994,995,1,0,0,0,995,996,5,83,0,0,996,101,1,0,0,0,997,1007,5,101,
0,0,998,1007,5,100,0,0,999,1007,5,102,0,0,1000,1007,5,98,0,0,1001,1007,5,
97,0,0,1002,1007,3,110,55,0,1003,1007,3,114,57,0,1004,1007,3,116,58,0,1005,
1007,3,104,52,0,1006,997,1,0,0,0,1006,998,1,0,0,0,1006,999,1,0,0,0,1006,
1000,1,0,0,0,1006,1001,1,0,0,0,1006,1002,1,0,0,0,1006,1003,1,0,0,0,1006,
1004,1,0,0,0,1006,1005,1,0,0,0,1007,103,1,0,0,0,1008,1009,5,103,0,0,1009,
105,1,0,0,0,1010,1015,5,103,0,0,1011,1012,5,25,0,0,1012,1014,5,103,0,0,1013,
1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,
1020,1,0,0,0,1017,1015,1,0,0,0,1018,1020,3,108,54,0,1019,1010,1,0,0,0,1019,
1018,1,0,0,0,1020,107,1,0,0,0,1021,1025,3,110,55,0,1022,1025,3,114,57,0,
1023,1025,3,116,58,0,1024,1021,1,0,0,0,1024,1022,1,0,0,0,1024,1023,1,0,0,
0,1025,109,1,0,0,0,1026,1035,5,49,0,0,1027,1032,3,102,51,0,1028,1029,5,16,
0,0,1029,1031,3,102,51,0,1030,1028,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,
0,0,0,1032,1033,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1035,1027,1,
0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,5,50,0,0,1038,111,1,
0,0,0,1039,1042,3,8,4,0,1040,1041,5,15,0,0,1041,1043,3,128,64,0,1042,1040,
1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1045,5,8,0,0,1045,1046,
3,102,51,0,1046,113,1,0,0,0,1047,1059,5,51,0,0,1048,1053,3,112,56,0,1049,
1050,5,83,0,0,1050,1052,3,112,56,0,1051,1049,1,0,0,0,1052,1055,1,0,0,0,1053,
1051,1,0,0,0,1053,1054,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1056,
1058,5,83,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1060,1,0,0,0,1059,
1048,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1062,5,52,0,0,1062,
115,1,0,0,0,1063,1072,5,55,0,0,1064,1069,3,102,51,0,1065,1066,5,16,0,0,1066,
1068,3,102,51,0,1067,1065,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,
1070,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1072,1064,1,0,0,0,1072,
1073,1,0,0,0,1073,1074,1,0,0,0,1074,1075,5,56,0,0,1075,117,1,0,0,0,1076,
1077,5,74,0,0,1077,1081,5,51,0,0,1078,1080,3,126,63,0,1079,1078,1,0,0,0,
1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,
1083,1081,1,0,0,0,1084,1085,5,52,0,0,1085,119,1,0,0,0,1086,1087,5,84,0,0,
1087,1089,5,49,0,0,1088,1090,3,220,110,0,1089,1088,1,0,0,0,1089,1090,1,0,
0,0,1090,1091,1,0,0,0,1091,1092,5,50,0,0,1092,121,1,0,0,0,1093,1094,5,81,
0,0,1094,1096,5,55,0,0,1095,1097,3,128,64,0,1096,1095,1,0,0,0,1096,1097,
1,0,0,0,1097,1098,1,0,0,0,1098,1099,5,56,0,0,1099,123,1,0,0,0,1100,1101,
5,28,0,0,1101,1102,5,49,0,0,1102,1107,3,8,4,0,1103,1104,5,16,0,0,1104,1106,
3,8,4,0,1105,1103,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,
1,0,0,0,1108,1110,1,0,0,0,1109,1107,1,0,0,0,1110,1111,5,50,0,0,1111,125,
1,0,0,0,1112,1113,3,8,4,0,1113,1114,5,15,0,0,1114,1115,3,128,64,0,1115,1116,
5,83,0,0,1116,127,1,0,0,0,1117,1120,3,130,65,0,1118,1120,3,52,26,0,1119,
1117,1,0,0,0,1119,1118,1,0,0,0,1120,129,1,0,0,0,1121,1132,3,140,70,0,1122,
1132,3,138,69,0,1123,1132,3,142,71,0,1124,1132,3,144,72,0,1125,1132,3,146,
73,0,1126,1132,3,148,74,0,1127,1132,3,118,59,0,1128,1132,3,120,60,0,1129,
1132,3,122,61,0,1130,1132,3,124,62,0,1131,1121,1,0,0,0,1131,1122,1,0,0,0,
1131,1123,1,0,0,0,1131,1124,1,0,0,0,1131,1125,1,0,0,0,1131,1126,1,0,0,0,
1131,1127,1,0,0,0,1131,1128,1,0,0,0,1131,1129,1,0,0,0,1131,1130,1,0,0,0,
1132,131,1,0,0,0,1133,1134,5,70,0,0,1134,1135,5,92,0,0,1135,1152,3,8,4,0,
1136,1153,5,83,0,0,1137,1148,5,8,0,0,1138,1149,3,138,69,0,1139,1149,3,142,
71,0,1140,1149,3,144,72,0,1141,1149,3,146,73,0,1142,1149,3,148,74,0,1143,
1149,3,118,59,0,1144,1149,3,120,60,0,1145,1149,3,122,61,0,1146,1149,3,124,
62,0,1147,1149,3,140,70,0,1148,1138,1,0,0,0,1148,1139,1,0,0,0,1148,1140,
1,0,0,0,1148,1141,1,0,0,0,1148,1142,1,0,0,0,1148,1143,1,0,0,0,1148,1144,
1,0,0,0,1148,1145,1,0,0,0,1148,1146,1,0,0,0,1148,1147,1,0,0,0,1149,1150,
1,0,0,0,1150,1151,5,83,0,0,1151,1153,1,0,0,0,1152,1136,1,0,0,0,1152,1137,
1,0,0,0,1153,133,1,0,0,0,1154,1157,3,8,4,0,1155,1156,5,15,0,0,1156,1158,
3,128,64,0,1157,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1163,1,0,0,0,1159,1160,
5,8,0,0,1160,1164,3,102,51,0,1161,1162,5,21,0,0,1162,1164,3,102,51,0,1163,
1159,1,0,0,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,
1166,5,83,0,0,1166,135,1,0,0,0,1167,1169,5,72,0,0,1168,1170,3,134,67,0,1169,
1168,1,0,0,0,1170,1171,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,
1173,1,0,0,0,1173,1174,5,73,0,0,1174,137,1,0,0,0,1175,1176,5,46,0,0,1176,
139,1,0,0,0,1177,1178,5,7,0,0,1178,141,1,0,0,0,1179,1180,5,38,0,0,1180,143,
1,0,0,0,1181,1182,5,26,0,0,1182,145,1,0,0,0,1183,1184,5,88,0,0,1184,147,
1,0,0,0,1185,1186,5,99,0,0,1186,149,1,0,0,0,1187,1188,5,95,0,0,1188,1191,
3,8,4,0,1189,1190,5,15,0,0,1190,1192,3,42,21,0,1191,1189,1,0,0,0,1191,1192,
1,0,0,0,1192,1212,1,0,0,0,1193,1213,5,83,0,0,1194,1210,5,8,0,0,1195,1197,
3,154,77,0,1196,1198,5,83,0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1211,
1,0,0,0,1199,1200,5,59,0,0,1200,1208,3,44,22,0,1201,1209,5,83,0,0,1202,1203,
5,29,0,0,1203,1204,5,94,0,0,1204,1206,3,154,77,0,1205,1207,5,83,0,0,1206,
1205,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,1208,1201,1,0,0,0,1208,
1202,1,0,0,0,1209,1211,1,0,0,0,1210,1195,1,0,0,0,1210,1199,1,0,0,0,1211,
1213,1,0,0,0,1212,1193,1,0,0,0,1212,1194,1,0,0,0,1213,151,1,0,0,0,1214,1215,
5,95,0,0,1215,1216,5,92,0,0,1216,1235,3,8,4,0,1217,1236,5,83,0,0,1218,1219,
5,8,0,0,1219,1221,3,154,77,0,1220,1222,5,83,0,0,1221,1220,1,0,0,0,1221,1222,
1,0,0,0,1222,1234,1,0,0,0,1223,1224,5,30,0,0,1224,1231,3,42,21,0,1225,1232,
5,83,0,0,1226,1227,5,94,0,0,1227,1229,3,154,77,0,1228,1230,5,83,0,0,1229,
1228,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1225,1,0,0,0,1231,
1226,1,0,0,0,1232,1234,1,0,0,0,1233,1218,1,0,0,0,1233,1223,1,0,0,0,1234,
1236,1,0,0,0,1235,1217,1,0,0,0,1235,1233,1,0,0,0,1236,153,1,0,0,0,1237,1238,
5,49,0,0,1238,1239,5,50,0,0,1239,155,1,0,0,0,1240,1242,5,23,0,0,1241,1240,
1,0,0,0,1241,1242,1,0,0,0,1242,1248,1,0,0,0,1243,1244,5,79,0,0,1244,1246,
5,103,0,0,1245,1247,5,8,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1249,
1,0,0,0,1248,1243,1,0,0,0,1248,1249,1,0,0,0,1249,1256,1,0,0,0,1250,1251,
5,47,0,0,1251,1255,3,164,82,0,1252,1253,5,42,0,0,1253,1255,3,164,82,0,1254,
1250,1,0,0,0,1254,1252,1,0,0,0,1255,1257,1,0,0,0,1256,1254,1,0,0,0,1256,
1257,1,0,0,0,1257,1259,1,0,0,0,1258,1260,3,136,68,0,1259,1258,1,0,0,0,1259,
1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,83,0,0,1262,157,1,0,0,0,1263,
1265,5,23,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,
1267,5,5,0,0,1267,1268,5,103,0,0,1268,1277,5,53,0,0,1269,1274,3,160,80,0,
1270,1271,5,16,0,0,1271,1273,3,160,80,0,1272,1270,1,0,0,0,1273,1276,1,0,
0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,
0,0,1277,1269,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,5,54,
0,0,1280,1281,5,15,0,0,1281,1282,3,220,110,0,1282,1283,5,8,0,0,1283,1285,
3,164,82,0,1284,1286,3,136,68,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,
1287,1,0,0,0,1287,1288,5,83,0,0,1288,1324,1,0,0,0,1289,1291,5,31,0,0,1290,
1292,5,23,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,
1294,5,5,0,0,1294,1295,5,103,0,0,1295,1304,5,53,0,0,1296,1301,3,160,80,0,
1297,1298,5,16,0,0,1298,1300,3,160,80,0,1299,1297,1,0,0,0,1300,1303,1,0,
0,0,1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,1305,1,0,0,0,1303,1301,1,0,
0,0,1304,1296,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,5,54,
0,0,1307,1308,5,15,0,0,1308,1309,3,220,110,0,1309,1319,5,8,0,0,1310,1320,
3,10,5,0,1311,1316,3,8,4,0,1312,1313,5,25,0,0,1313,1315,3,8,4,0,1314,1312,
1,0,0,0,1315,1318,1,0,0,0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,1320,
1,0,0,0,1318,1316,1,0,0,0,1319,1310,1,0,0,0,1319,1311,1,0,0,0,1320,1321,
1,0,0,0,1321,1322,5,83,0,0,1322,1324,1,0,0,0,1323,1264,1,0,0,0,1323,1289,
1,0,0,0,1324,159,1,0,0,0,1325,1326,3,8,4,0,1326,1327,5,15,0,0,1327,1328,
3,220,110,0,1328,161,1,0,0,0,1329,1330,3,164,82,0,1330,1331,5,83,0,0,1331,
163,1,0,0,0,1332,1337,3,166,83,0,1333,1334,5,62,0,0,1334,1336,3,166,83,0,
1335,1333,1,0,0,0,1336,1339,1,0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,
1338,165,1,0,0,0,1339,1337,1,0,0,0,1340,1345,3,168,84,0,1341,1342,5,48,0,
0,1342,1344,3,168,84,0,1343,1341,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,
0,0,1345,1346,1,0,0,0,1346,167,1,0,0,0,1347,1345,1,0,0,0,1348,1353,3,170,
85,0,1349,1350,5,43,0,0,1350,1352,3,170,85,0,1351,1349,1,0,0,0,1352,1355,
1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,169,1,0,0,0,1355,1353,1,
0,0,0,1356,1361,3,172,86,0,1357,1358,5,6,0,0,1358,1360,3,172,86,0,1359,1357,
1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,171,1,
0,0,0,1363,1361,1,0,0,0,1364,1365,5,13,0,0,1365,1368,3,172,86,0,1366,1368,
3,174,87,0,1367,1364,1,0,0,0,1367,1366,1,0,0,0,1368,173,1,0,0,0,1369,1376,
3,176,88,0,1370,1371,5,34,0,0,1371,1375,3,176,88,0,1372,1373,5,58,0,0,1373,
1375,3,176,88,0,1374,1370,1,0,0,0,1374,1372,1,0,0,0,1375,1378,1,0,0,0,1376,
1374,1,0,0,0,1376,1377,1,0,0,0,1377,175,1,0,0,0,1378,1376,1,0,0,0,1379,1390,
3,178,89,0,1380,1381,5,55,0,0,1381,1389,3,178,89,0,1382,1383,5,56,0,0,1383,
1389,3,178,89,0,1384,1385,5,57,0,0,1385,1389,3,178,89,0,1386,1387,5,41,0,
0,1387,1389,3,178,89,0,1388,1380,1,0,0,0,1388,1382,1,0,0,0,1388,1384,1,0,
0,0,1388,1386,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,
0,0,1391,177,1,0,0,0,1392,1390,1,0,0,0,1393,1400,3,180,90,0,1394,1395,5,
67,0,0,1395,1399,3,180,90,0,1396,1397,5,61,0,0,1397,1399,3,180,90,0,1398,
1394,1,0,0,0,1398,1396,1,0,0,0,1399,1402,1,0,0,0,1400,1398,1,0,0,0,1400,
1401,1,0,0,0,1401,179,1,0,0,0,1402,1400,1,0,0,0,1403,1414,3,182,91,0,1404,
1405,5,87,0,0,1405,1413,3,182,91,0,1406,1407,5,86,0,0,1407,1413,3,182,91,
0,1408,1409,5,76,0,0,1409,1413,3,182,91,0,1410,1411,5,66,0,0,1411,1413,3,
182,91,0,1412,1404,1,0,0,0,1412,1406,1,0,0,0,1412,1408,1,0,0,0,1412,1410,
1,0,0,0,1413,1416,1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,181,1,
0,0,0,1416,1414,1,0,0,0,1417,1418,5,61,0,0,1418,1421,3,182,91,0,1419,1421,
3,184,92,0,1420,1417,1,0,0,0,1420,1419,1,0,0,0,1421,183,1,0,0,0,1422,1431,
3,194,97,0,1423,1431,3,188,94,0,1424,1431,3,186,93,0,1425,1431,3,204,102,
0,1426,1431,3,212,106,0,1427,1431,3,216,108,0,1428,1431,3,196,98,0,1429,
1431,3,202,101,0,1430,1422,1,0,0,0,1430,1423,1,0,0,0,1430,1424,1,0,0,0,1430,
1425,1,0,0,0,1430,1426,1,0,0,0,1430,1427,1,0,0,0,1430,1428,1,0,0,0,1430,
1429,1,0,0,0,1431,185,1,0,0,0,1432,1433,5,53,0,0,1433,1434,3,164,82,0,1434,
1435,5,54,0,0,1435,187,1,0,0,0,1436,1444,3,8,4,0,1437,1440,5,25,0,0,1438,
1441,3,8,4,0,1439,1441,3,190,95,0,1440,1438,1,0,0,0,1440,1439,1,0,0,0,1441,
1443,1,0,0,0,1442,1437,1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,
1445,1,0,0,0,1445,1448,1,0,0,0,1446,1444,1,0,0,0,1447,1449,3,192,96,0,1448,
1447,1,0,0,0,1448,1449,1,0,0,0,1449,189,1,0,0,0,1450,1462,5,92,0,0,1451,
1462,5,19,0,0,1452,1462,5,22,0,0,1453,1462,5,69,0,0,1454,1462,5,80,0,0,1455,
1462,5,40,0,0,1456,1462,5,60,0,0,1457,1462,5,71,0,0,1458,1462,5,77,0,0,1459,
1462,5,11,0,0,1460,1462,5,12,0,0,1461,1450,1,0,0,0,1461,1451,1,0,0,0,1461,
1452,1,0,0,0,1461,1453,1,0,0,0,1461,1454,1,0,0,0,1461,1455,1,0,0,0,1461,
1456,1,0,0,0,1461,1457,1,0,0,0,1461,1458,1,0,0,0,1461,1459,1,0,0,0,1461,
1460,1,0,0,0,1462,191,1,0,0,0,1463,1472,5,53,0,0,1464,1469,3,164,82,0,1465,
1466,5,16,0,0,1466,1468,3,164,82,0,1467,1465,1,0,0,0,1468,1471,1,0,0,0,1469,
1467,1,0,0,0,1469,1470,1,0,0,0,1470,1473,1,0,0,0,1471,1469,1,0,0,0,1472,
1464,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,1475,5,54,0,0,1475,
193,1,0,0,0,1476,1499,5,101,0,0,1477,1499,5,100,0,0,1478,1499,5,102,0,0,
1479,1499,5,97,0,0,1480,1499,5,98,0,0,1481,1499,5,18,0,0,1482,1499,5,39,
0,0,1483,1499,5,20,0,0,1484,1499,5,68,0,0,1485,1499,5,78,0,0,1486,1499,5,
90,0,0,1487,1499,5,27,0,0,1488,1499,5,70,0,0,1489,1499,5,46,0,0,1490,1499,
5,38,0,0,1491,1499,5,26,0,0,1492,1499,5,88,0,0,1493,1499,5,99,0,0,1494,1499,
5,28,0,0,1495,1499,5,84,0,0,1496,1499,5,81,0,0,1497,1499,5,74,0,0,1498,1476,
1,0,0,0,1498,1477,1,0,0,0,1498,1478,1,0,0,0,1498,1479,1,0,0,0,1498,1480,
1,0,0,0,1498,1481,1,0,0,0,1498,1482,1,0,0,0,1498,1483,1,0,0,0,1498,1484,
1,0,0,0,1498,1485,1,0,0,0,1498,1486,1,0,0,0,1498,1487,1,0,0,0,1498,1488,
1,0,0,0,1498,1489,1,0,0,0,1498,1490,1,0,0,0,1498,1491,1,0,0,0,1498,1492,
1,0,0,0,1498,1493,1,0,0,0,1498,1494,1,0,0,0,1498,1495,1,0,0,0,1498,1496,
1,0,0,0,1498,1497,1,0,0,0,1499,195,1,0,0,0,1500,1506,5,37,0,0,1501,1503,
5,32,0,0,1502,1504,5,93,0,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1506,
1,0,0,0,1505,1500,1,0,0,0,1505,1501,1,0,0,0,1506,1507,1,0,0,0,1507,1512,
3,200,100,0,1508,1509,5,16,0,0,1509,1511,3,200,100,0,1510,1508,1,0,0,0,1511,
1514,1,0,0,0,1512,1510,1,0,0,0,1512,1513,1,0,0,0,1513,1515,1,0,0,0,1514,
1512,1,0,0,0,1515,1516,5,96,0,0,1516,1517,3,164,82,0,1517,197,1,0,0,0,1518,
1519,5,24,0,0,1519,1524,3,8,4,0,1520,1521,5,16,0,0,1521,1523,3,8,4,0,1522,
1520,1,0,0,0,1523,1526,1,0,0,0,1524,1522,1,0,0,0,1524,1525,1,0,0,0,1525,
1529,1,0,0,0,1526,1524,1,0,0,0,1527,1528,7,5,0,0,1528,1530,3,220,110,0,1529,
1527,1,0,0,0,1529,1530,1,0,0,0,1530,1531,1,0,0,0,1531,1534,5,45,0,0,1532,
1535,3,204,102,0,1533,1535,3,188,94,0,1534,1532,1,0,0,0,1534,1533,1,0,0,
0,1535,199,1,0,0,0,1536,1555,3,198,99,0,1537,1542,3,8,4,0,1538,1539,5,16,
0,0,1539,1541,3,8,4,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,
0,0,1542,1543,1,0,0,0,1543,1547,1,0,0,0,1544,1542,1,0,0,0,1545,1546,7,5,
0,0,1546,1548,3,220,110,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,1549,
1,0,0,0,1549,1552,5,45,0,0,1550,1553,3,204,102,0,1551,1553,3,188,94,0,1552,
1550,1,0,0,0,1552,1551,1,0,0,0,1553,1555,1,0,0,0,1554,1536,1,0,0,0,1554,
1537,1,0,0,0,1555,201,1,0,0,0,1556,1557,5,55,0,0,1557,1558,3,206,103,0,1558,
1559,5,56,0,0,1559,203,1,0,0,0,1560,1564,3,210,105,0,1561,1564,3,218,109,
0,1562,1564,3,206,103,0,1563,1560,1,0,0,0,1563,1561,1,0,0,0,1563,1562,1,
0,0,0,1564,205,1,0,0,0,1565,1566,5,86,0,0,1566,1569,3,188,94,0,1567,1568,
7,5,0,0,1568,1570,3,220,110,0,1569,1567,1,0,0,0,1569,1570,1,0,0,0,1570,1575,
1,0,0,0,1571,1572,5,51,0,0,1572,1573,3,164,82,0,1573,1574,5,52,0,0,1574,
1576,1,0,0,0,1575,1571,1,0,0,0,1575,1576,1,0,0,0,1576,1581,1,0,0,0,1577,
1578,5,86,0,0,1578,1580,3,208,104,0,1579,1577,1,0,0,0,1580,1583,1,0,0,0,
1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,207,1,0,0,0,1583,1581,1,0,0,0,1584,
1587,3,190,95,0,1585,1586,7,5,0,0,1586,1588,3,220,110,0,1587,1585,1,0,0,
0,1587,1588,1,0,0,0,1588,1593,1,0,0,0,1589,1590,5,51,0,0,1590,1591,3,164,
82,0,1591,1592,5,52,0,0,1592,1594,1,0,0,0,1593,1589,1,0,0,0,1593,1594,1,
0,0,0,1594,1599,1,0,0,0,1595,1596,5,86,0,0,1596,1598,3,208,104,0,1597,1595,
1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,1607,
1,0,0,0,1601,1599,1,0,0,0,1602,1604,5,33,0,0,1603,1602,1,0,0,0,1603,1604,
1,0,0,0,1604,1605,1,0,0,0,1605,1607,3,188,94,0,1606,1584,1,0,0,0,1606,1603,
1,0,0,0,1607,209,1,0,0,0,1608,1609,5,49,0,0,1609,1628,5,50,0,0,1610,1613,
5,49,0,0,1611,1614,3,194,97,0,1612,1614,3,188,94,0,1613,1611,1,0,0,0,1613,
1612,1,0,0,0,1614,1622,1,0,0,0,1615,1618,5,16,0,0,1616,1619,3,194,97,0,1617,
1619,3,188,94,0,1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,1621,1,0,0,0,1620,
1615,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,
1625,1,0,0,0,1624,1622,1,0,0,0,1625,1626,5,50,0,0,1626,1628,1,0,0,0,1627,
1608,1,0,0,0,1627,1610,1,0,0,0,1628,211,1,0,0,0,1629,1630,5,55,0,0,1630,
1649,5,56,0,0,1631,1634,5,55,0,0,1632,1635,3,194,97,0,1633,1635,3,188,94,
0,1634,1632,1,0,0,0,1634,1633,1,0,0,0,1635,1643,1,0,0,0,1636,1639,5,16,0,
0,1637,1640,3,194,97,0,1638,1640,3,188,94,0,1639,1637,1,0,0,0,1639,1638,
1,0,0,0,1640,1642,1,0,0,0,1641,1636,1,0,0,0,1642,1645,1,0,0,0,1643,1641,
1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,1643,1,0,0,0,1646,1647,
5,56,0,0,1647,1649,1,0,0,0,1648,1629,1,0,0,0,1648,1631,1,0,0,0,1649,213,
1,0,0,0,1650,1653,3,8,4,0,1651,1652,5,15,0,0,1652,1654,3,128,64,0,1653,1651,
1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1656,5,8,0,0,1656,1657,
3,194,97,0,1657,215,1,0,0,0,1658,1670,5,51,0,0,1659,1664,3,214,107,0,1660,
1661,5,83,0,0,1661,1663,3,214,107,0,1662,1660,1,0,0,0,1663,1666,1,0,0,0,
1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,
1667,1669,5,83,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,
1670,1659,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,52,0,0,
1673,217,1,0,0,0,1674,1676,5,49,0,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,
1676,1677,1,0,0,0,1677,1678,5,82,0,0,1678,1679,3,200,100,0,1679,1680,5,96,
0,0,1680,1682,3,164,82,0,1681,1683,5,50,0,0,1682,1681,1,0,0,0,1682,1683,
1,0,0,0,1683,1702,1,0,0,0,1684,1686,5,49,0,0,1685,1684,1,0,0,0,1685,1686,
1,0,0,0,1686,1687,1,0,0,0,1687,1688,5,17,0,0,1688,1689,3,188,94,0,1689,1690,
5,15,0,0,1690,1691,3,220,110,0,1691,1694,5,45,0,0,1692,1695,3,204,102,0,
1693,1695,3,188,94,0,1694,1692,1,0,0,0,1694,1693,1,0,0,0,1695,1696,1,0,0,
0,1696,1697,5,96,0,0,1697,1699,3,164,82,0,1698,1700,5,50,0,0,1699,1698,1,
0,0,0,1699,1700,1,0,0,0,1700,1702,1,0,0,0,1701,1675,1,0,0,0,1701,1685,1,
0,0,0,1702,219,1,0,0,0,1703,1716,5,90,0,0,1704,1716,5,18,0,0,1705,1716,5,
39,0,0,1706,1716,5,20,0,0,1707,1716,5,68,0,0,1708,1716,5,78,0,0,1709,1716,
5,70,0,0,1710,1716,5,27,0,0,1711,1716,5,92,0,0,1712,1716,5,75,0,0,1713,1716,
3,188,94,0,1714,1716,3,130,65,0,1715,1703,1,0,0,0,1715,1704,1,0,0,0,1715,
1705,1,0,0,0,1715,1706,1,0,0,0,1715,1707,1,0,0,0,1715,1708,1,0,0,0,1715,
1709,1,0,0,0,1715,1710,1,0,0,0,1715,1711,1,0,0,0,1715,1712,1,0,0,0,1715,
1713,1,0,0,0,1715,1714,1,0,0,0,1716,221,1,0,0,0,255,225,231,233,238,245,
251,256,269,277,284,286,288,292,295,304,315,317,319,332,335,341,349,357,
359,361,363,372,374,384,389,394,399,404,409,414,419,424,429,434,439,444,
451,456,463,473,481,488,490,492,494,499,501,513,521,528,530,532,534,544,
547,553,561,569,571,573,575,581,583,595,598,602,611,619,626,628,630,632,
642,645,648,653,661,669,671,673,675,681,683,695,703,710,712,714,716,726,
729,735,743,751,753,755,757,763,765,777,785,792,794,796,798,808,811,817,
825,833,835,837,839,846,848,860,868,875,877,879,881,891,894,900,908,916,
918,920,922,929,931,939,944,948,955,960,970,984,990,993,1006,1015,1019,1024,
1032,1035,1042,1053,1057,1059,1069,1072,1081,1089,1096,1107,1119,1131,1148,
1152,1157,1163,1171,1191,1197,1206,1208,1210,1212,1221,1229,1231,1233,1235,
1241,1246,1248,1254,1256,1259,1264,1274,1277,1285,1291,1301,1304,1316,1319,
1323,1337,1345,1353,1361,1367,1374,1376,1388,1390,1398,1400,1412,1414,1420,
1430,1440,1444,1448,1461,1469,1472,1498,1503,1505,1512,1524,1529,1534,1542,
1547,1552,1554,1563,1569,1575,1581,1587,1593,1599,1603,1606,1613,1618,1622,
1627,1634,1639,1643,1648,1653,1664,1668,1670,1675,1682,1685,1694,1699,1701,
1715];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class acmeParser extends antlr4.Parser {

    static grammarFileName = "acme.g4";
    static literalNames = [ null, "'$'", "'\\'", "'\\\\'", null, null, null, 
                            null, "'='", null, null, null, null, "'!'", 
                            null, "':'", "','", null, null, null, null, 
                            null, null, null, null, "'.'", null, null, null, 
                            null, null, null, null, "'...'", "'=='", null, 
                            null, null, null, null, null, "'>='", null, 
                            "'<->'", null, null, null, null, "'->'", "'{'", 
                            "'}'", "'['", "']'", "'('", "')'", "'<'", "'>'", 
                            "'<='", "'!='", null, null, "'-'", null, null, 
                            null, null, null, "'+'", null, null, null, null, 
                            "'<<'", "'>>'", null, null, "'%'", null, null, 
                            null, null, null, null, "';'", null, "':!'", 
                            "'/'", "'*'", null, null, null, null, null, 
                            null, null, null, "'|'" ];
    static symbolicNames = [ null, null, null, null, "ABSTRACT", "ANALYSIS", 
                             "AND", "ANY", "ASSIGN", "ATTACHMENT", "ATTACHMENTS", 
                             "ATTACHEDPORTS", "ATTACHEDROLES", "BANG", "BINDINGS", 
                             "COLON", "COMMA", "COLLECT", "COMPONENT", "COMPONENTS", 
                             "CONNECTOR", "CONTAINASSIGN", "CONNECTORS", 
                             "DESIGN", "DISTINCT", "DOT", "DOUBLE", "ELEMENT", 
                             "ENUM", "EXTENDED", "EXTENDS", "EXTERNAL", 
                             "EXISTS", "ELLIPSIS", "EQ", "FAMILY", "FINAL", 
                             "FORALL", "FLOAT", "GROUP", "GROUPS", "GE", 
                             "HEURISTIC", "IFF", "IMPORT", "IN", "INT", 
                             "INVARIANT", "IMPLIES", "LBRACE", "RBRACE", 
                             "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", 
                             "LANGLE", "RANGLE", "LE", "NE", "NEW", "MEMBERS", 
                             "MINUS", "OR", "PATHSEPARATOR", "PUBLIC", "PRIVATE", 
                             "POWER", "PLUS", "PORT", "PORTS", "PROPERTY", 
                             "PROPERTIES", "PROPBEGIN", "PROPEND", "RECORD", 
                             "REPRESENTATION", "REM", "REPRESENTATIONS", 
                             "ROLE", "RULE", "ROLES", "SEQUENCE", "SELECT", 
                             "SEMICOLON", "SET", "SET_DECLARE", "SLASH", 
                             "STAR", "STRING", "STYLE", "SYSTEM", "TO", 
                             "TYPE", "UNIQUE", "WITH", "VIEW", "BIT_OR", 
                             "TRUE", "FALSE", "BOOLEAN", "FLOATING_POINT_LITERAL", 
                             "INTEGER_LITERAL", "STRING_LITERAL", "IDENTIFIER", 
                             "LINE_COMMENT", "BLOCK_COMMENT", "WS" ];
    static ruleNames = [ "acmeCompUnit", "acmeImportDeclaration", "stringLiteral", 
                         "filename", "identifier", "codeLiteral", "acmeFamilyDeclaration", 
                         "acmeFamilyBody", "acmeSystemDeclaration", "acmeSystemBody", 
                         "acmeDesignDeclaration", "acmeComponentTypeRef", 
                         "acmeComponentInstantiatedTypeRef", "acmeConnectorTypeRef", 
                         "acmeConnectorInstantiatedTypeRef", "acmePortTypeRef", 
                         "acmePortInstantiatedTypeRef", "acmeGroupTypeRef", 
                         "acmeGroupInstantiatedTypeRef", "acmeRoleTypeRef", 
                         "acmeRoleInstantiatedTypeRef", "acmeViewTypeRef", 
                         "acmeViewInstantiatedTypeRef", "acmeFamilyRef", 
                         "acmeFamilyInstantiationRef", "acmeElementTypeRef", 
                         "acmePropertyTypeDeclarationRef", "acmeInstanceRef", 
                         "acmeGenericElementTypeDeclaration", "acmeGenericElementBody", 
                         "acmeGroupTypeDeclaration", "acmeGroupDeclaration", 
                         "acmeGroupBody", "acmeMembersBlock", "acmePortTypeDeclaration", 
                         "acmePortDeclaration", "acmePortBody", "acmeRoleTypeDeclaration", 
                         "acmeRoleDeclaration", "acmeRoleBody", "acmeComponentTypeDeclaration", 
                         "acmeComponentDeclaration", "acmeComponentBody", 
                         "acmeConnectorTypeDeclaration", "acmeConnectorDeclaration", 
                         "acmeConnectorBody", "acmeRepresentationDeclaration", 
                         "acmeBindingsMapDeclaration", "acmeBindingDeclaration", 
                         "acmeAttachmentDeclaration", "acmePropertyDeclaration", 
                         "acmePropertyValueDeclaration", "enumidentifier", 
                         "acmePropertyElement", "acmePropertyCompoundElement", 
                         "acmePropertySet", "acmePropertyRecordEntry", "acmePropertyRecord", 
                         "acmePropertySequence", "acmePropertyTypeRecord", 
                         "acmePropertyTypeSet", "acmePropertyTypeSequence", 
                         "acmePropertyTypeEnum", "acmePropertyRecordFieldDescription", 
                         "acmePropertyTypeRef", "acmePropertyTypeStructure", 
                         "acmePropertyTypeDeclaration", "acmePropertyBlockEntry", 
                         "acmePropertyBlock", "acmePropertyTypeInt", "acmePropertyTypeAny", 
                         "acmePropertyTypeFloat", "acmePropertyTypeDouble", 
                         "acmePropertyTypeString", "acmePropertyTypeBoolean", 
                         "acmeViewDeclaration", "acmeViewTypeDeclaration", 
                         "acmeViewBody", "designRule", "acmeDesignAnalysisDeclaration", 
                         "formalParam", "terminatedDesignRuleExpression", 
                         "designRuleExpression", "aSTDRImpliesExpression", 
                         "dRIffExpression", "dRAndExpression", "dRNegateExpression", 
                         "dREqualityExpression", "dRRelationalExpression", 
                         "dRAdditiveExpression", "dRMultiplicativeExpression", 
                         "dRNegativeExpression", "primitiveExpression", 
                         "parentheticalExpression", "reference", "setReference", 
                         "actualParams", "literalConstant", "quantifiedExpression", 
                         "distinctVariableSetDeclaration", "variableSetDeclaration", 
                         "sequenceExpression", "setExpression", "pathExpression", 
                         "pathExpressionContinuation", "literalSet", "literalSequence", 
                         "literalRecordEntry", "literalRecord", "setConstructor", 
                         "acmeTypeRef" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = acmeParser.ruleNames;
        this.literalNames = acmeParser.literalNames;
        this.symbolicNames = acmeParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	acmeCompUnit() {
	    let localctx = new AcmeCompUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, acmeParser.RULE_acmeCompUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.IMPORT) {
	            this.state = 222;
	            this.acmeImportDeclaration();
	            this.state = 227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 231; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 231;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.SYSTEM:
	                this.state = 228;
	                this.acmeSystemDeclaration();
	                break;
	            case acmeParser.FAMILY:
	            case acmeParser.STYLE:
	                this.state = 229;
	                this.acmeFamilyDeclaration();
	                break;
	            case acmeParser.DESIGN:
	                this.state = 230;
	                this.acmeDesignDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 233; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===acmeParser.DESIGN || _la===acmeParser.FAMILY || _la===acmeParser.STYLE || _la===acmeParser.SYSTEM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeImportDeclaration() {
	    let localctx = new AcmeImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, acmeParser.RULE_acmeImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        this.match(acmeParser.IMPORT);
	        this.state = 238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.T__0:
	        case acmeParser.REM:
	        case acmeParser.IDENTIFIER:
	            this.state = 236;
	            this.filename();
	            break;
	        case acmeParser.STRING_LITERAL:
	            this.state = 237;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 240;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, acmeParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.match(acmeParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filename() {
	    let localctx = new FilenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, acmeParser.RULE_filename);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.T__0 || _la===acmeParser.REM) {
	            this.state = 244;
	            _la = this._input.LA(1);
	            if(!(_la===acmeParser.T__0 || _la===acmeParser.REM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 247;
	        this.match(acmeParser.IDENTIFIER);
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.T__0) | (1 << acmeParser.T__1) | (1 << acmeParser.T__2) | (1 << acmeParser.COLON) | (1 << acmeParser.DOT))) !== 0) || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (acmeParser.MINUS - 61)) | (1 << (acmeParser.PLUS - 61)) | (1 << (acmeParser.REM - 61)) | (1 << (acmeParser.SLASH - 61)))) !== 0)) {
	            this.state = 249; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 248;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.T__0) | (1 << acmeParser.T__1) | (1 << acmeParser.T__2) | (1 << acmeParser.COLON) | (1 << acmeParser.DOT))) !== 0) || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (acmeParser.MINUS - 61)) | (1 << (acmeParser.PLUS - 61)) | (1 << (acmeParser.REM - 61)) | (1 << (acmeParser.SLASH - 61)))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 251; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.T__0) | (1 << acmeParser.T__1) | (1 << acmeParser.T__2) | (1 << acmeParser.COLON) | (1 << acmeParser.DOT))) !== 0) || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (acmeParser.MINUS - 61)) | (1 << (acmeParser.PLUS - 61)) | (1 << (acmeParser.REM - 61)) | (1 << (acmeParser.SLASH - 61)))) !== 0));
	            this.state = 253;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, acmeParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(acmeParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeLiteral() {
	    let localctx = new CodeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, acmeParser.RULE_codeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(acmeParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeFamilyDeclaration() {
	    let localctx = new AcmeFamilyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, acmeParser.RULE_acmeFamilyDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        _la = this._input.LA(1);
	        if(!(_la===acmeParser.FAMILY || _la===acmeParser.STYLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 264;
	        this.identifier();
	        this.state = 288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 265;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 266;
	            this.match(acmeParser.ASSIGN);
	            this.state = 267;
	            this.acmeFamilyBody();
	            this.state = 269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.SEMICOLON) {
	                this.state = 268;
	                this.match(acmeParser.SEMICOLON);
	            }

	            break;
	        case acmeParser.EXTENDS:
	            this.state = 271;
	            this.match(acmeParser.EXTENDS);
	            this.state = 272;
	            this.acmeFamilyRef();
	            this.state = 277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 273;
	                this.match(acmeParser.COMMA);
	                this.state = 274;
	                this.acmeFamilyRef();
	                this.state = 279;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 286;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.SEMICOLON:
	                this.state = 280;
	                this.match(acmeParser.SEMICOLON);
	                break;
	            case acmeParser.WITH:
	                this.state = 281;
	                this.match(acmeParser.WITH);
	                this.state = 282;
	                this.acmeFamilyBody();
	                this.state = 284;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.SEMICOLON) {
	                    this.state = 283;
	                    this.match(acmeParser.SEMICOLON);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeFamilyBody() {
	    let localctx = new AcmeFamilyBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, acmeParser.RULE_acmeFamilyBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 290;
	        this.match(acmeParser.LBRACE);
	        this.state = 319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.ABSTRACT) | (1 << acmeParser.ANALYSIS) | (1 << acmeParser.ATTACHMENT) | (1 << acmeParser.COMPONENT) | (1 << acmeParser.CONNECTOR) | (1 << acmeParser.DESIGN) | (1 << acmeParser.ELEMENT) | (1 << acmeParser.EXTERNAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (acmeParser.FINAL - 36)) | (1 << (acmeParser.GROUP - 36)) | (1 << (acmeParser.HEURISTIC - 36)) | (1 << (acmeParser.INVARIANT - 36)) | (1 << (acmeParser.PUBLIC - 36)) | (1 << (acmeParser.PRIVATE - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (acmeParser.PORT - 68)) | (1 << (acmeParser.PROPERTY - 68)) | (1 << (acmeParser.PROPBEGIN - 68)) | (1 << (acmeParser.ROLE - 68)) | (1 << (acmeParser.RULE - 68)) | (1 << (acmeParser.SEMICOLON - 68)))) !== 0)) {
	            this.state = 317;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 292;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.PUBLIC || _la===acmeParser.PRIVATE) {
	                    this.state = 291;
	                    _la = this._input.LA(1);
	                    if(!(_la===acmeParser.PUBLIC || _la===acmeParser.PRIVATE)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 295;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.ABSTRACT || _la===acmeParser.FINAL) {
	                    this.state = 294;
	                    _la = this._input.LA(1);
	                    if(!(_la===acmeParser.ABSTRACT || _la===acmeParser.FINAL)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 304;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.PORT:
	                    this.state = 297;
	                    this.acmePortTypeDeclaration();
	                    break;
	                case acmeParser.ROLE:
	                    this.state = 298;
	                    this.acmeRoleTypeDeclaration();
	                    break;
	                case acmeParser.COMPONENT:
	                    this.state = 299;
	                    this.acmeComponentTypeDeclaration();
	                    break;
	                case acmeParser.CONNECTOR:
	                    this.state = 300;
	                    this.acmeConnectorTypeDeclaration();
	                    break;
	                case acmeParser.ELEMENT:
	                    this.state = 301;
	                    this.acmeGenericElementTypeDeclaration();
	                    break;
	                case acmeParser.PROPERTY:
	                    this.state = 302;
	                    this.acmePropertyTypeDeclaration();
	                    break;
	                case acmeParser.GROUP:
	                    this.state = 303;
	                    this.acmeGroupTypeDeclaration();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 315;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 306;
	                    this.acmeDesignAnalysisDeclaration();
	                    break;

	                case 2:
	                    this.state = 307;
	                    this.designRule();
	                    break;

	                case 3:
	                    this.state = 308;
	                    this.acmePortDeclaration();
	                    break;

	                case 4:
	                    this.state = 309;
	                    this.acmeRoleDeclaration();
	                    break;

	                case 5:
	                    this.state = 310;
	                    this.acmeComponentDeclaration();
	                    break;

	                case 6:
	                    this.state = 311;
	                    this.acmeConnectorDeclaration();
	                    break;

	                case 7:
	                    this.state = 312;
	                    this.acmePropertyDeclaration();
	                    break;

	                case 8:
	                    this.state = 313;
	                    this.acmeGroupDeclaration();
	                    break;

	                case 9:
	                    this.state = 314;
	                    this.acmeAttachmentDeclaration();
	                    break;

	                }
	                break;

	            }
	            this.state = 321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 322;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeSystemDeclaration() {
	    let localctx = new AcmeSystemDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, acmeParser.RULE_acmeSystemDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(acmeParser.SYSTEM);
	        this.state = 325;
	        this.identifier();
	        this.state = 335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 326;
	            this.match(acmeParser.COLON);
	            this.state = 327;
	            this.acmeFamilyRef();
	            this.state = 332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 328;
	                this.match(acmeParser.COMMA);
	                this.state = 329;
	                this.acmeFamilyRef();
	                this.state = 334;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 363;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 337;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 338;
	            this.match(acmeParser.ASSIGN);
	            this.state = 361;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 339;
	                this.acmeSystemBody();
	                this.state = 341;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.SEMICOLON) {
	                    this.state = 340;
	                    this.match(acmeParser.SEMICOLON);
	                }

	                break;
	            case acmeParser.NEW:
	                this.state = 343;
	                this.match(acmeParser.NEW);
	                this.state = 344;
	                this.acmeFamilyInstantiationRef();
	                this.state = 349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 345;
	                    this.match(acmeParser.COMMA);
	                    this.state = 346;
	                    this.acmeFamilyInstantiationRef();
	                    this.state = 351;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 359;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 352;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 353;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 354;
	                    this.match(acmeParser.WITH);
	                    this.state = 355;
	                    this.acmeSystemBody();
	                    this.state = 357;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===acmeParser.SEMICOLON) {
	                        this.state = 356;
	                        this.match(acmeParser.SEMICOLON);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeSystemBody() {
	    let localctx = new AcmeSystemBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, acmeParser.RULE_acmeSystemBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 365;
	        this.match(acmeParser.LBRACE);
	        this.state = 374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.ATTACHMENT) | (1 << acmeParser.COMPONENT) | (1 << acmeParser.CONNECTOR) | (1 << acmeParser.DESIGN))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (acmeParser.GROUP - 39)) | (1 << (acmeParser.HEURISTIC - 39)) | (1 << (acmeParser.INVARIANT - 39)) | (1 << (acmeParser.PROPERTY - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (acmeParser.PROPBEGIN - 72)) | (1 << (acmeParser.RULE - 72)) | (1 << (acmeParser.SEMICOLON - 72)))) !== 0)) {
	            this.state = 372;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 366;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.COMPONENT:
	                this.state = 367;
	                this.acmeComponentDeclaration();
	                break;
	            case acmeParser.CONNECTOR:
	                this.state = 368;
	                this.acmeConnectorDeclaration();
	                break;
	            case acmeParser.ATTACHMENT:
	                this.state = 369;
	                this.acmeAttachmentDeclaration();
	                break;
	            case acmeParser.GROUP:
	                this.state = 370;
	                this.acmeGroupDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 371;
	                this.designRule();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 377;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeDesignDeclaration() {
	    let localctx = new AcmeDesignDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, acmeParser.RULE_acmeDesignDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this.match(acmeParser.DESIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeComponentTypeRef() {
	    let localctx = new AcmeComponentTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, acmeParser.RULE_acmeComponentTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381;
	        this.identifier();
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 382;
	            this.match(acmeParser.DOT);
	            this.state = 383;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeComponentInstantiatedTypeRef() {
	    let localctx = new AcmeComponentInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, acmeParser.RULE_acmeComponentInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386;
	        this.identifier();
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 387;
	            this.match(acmeParser.DOT);
	            this.state = 388;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeConnectorTypeRef() {
	    let localctx = new AcmeConnectorTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, acmeParser.RULE_acmeConnectorTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.identifier();
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 392;
	            this.match(acmeParser.DOT);
	            this.state = 393;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeConnectorInstantiatedTypeRef() {
	    let localctx = new AcmeConnectorInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, acmeParser.RULE_acmeConnectorInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.identifier();
	        this.state = 399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 397;
	            this.match(acmeParser.DOT);
	            this.state = 398;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePortTypeRef() {
	    let localctx = new AcmePortTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, acmeParser.RULE_acmePortTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.identifier();
	        this.state = 404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 402;
	            this.match(acmeParser.DOT);
	            this.state = 403;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePortInstantiatedTypeRef() {
	    let localctx = new AcmePortInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, acmeParser.RULE_acmePortInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.identifier();
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 407;
	            this.match(acmeParser.DOT);
	            this.state = 408;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGroupTypeRef() {
	    let localctx = new AcmeGroupTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, acmeParser.RULE_acmeGroupTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.identifier();
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 412;
	            this.match(acmeParser.DOT);
	            this.state = 413;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGroupInstantiatedTypeRef() {
	    let localctx = new AcmeGroupInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, acmeParser.RULE_acmeGroupInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.identifier();
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 417;
	            this.match(acmeParser.DOT);
	            this.state = 418;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRoleTypeRef() {
	    let localctx = new AcmeRoleTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, acmeParser.RULE_acmeRoleTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.identifier();
	        this.state = 424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 422;
	            this.match(acmeParser.DOT);
	            this.state = 423;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRoleInstantiatedTypeRef() {
	    let localctx = new AcmeRoleInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, acmeParser.RULE_acmeRoleInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.identifier();
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 427;
	            this.match(acmeParser.DOT);
	            this.state = 428;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeViewTypeRef() {
	    let localctx = new AcmeViewTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, acmeParser.RULE_acmeViewTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.identifier();
	        this.state = 434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 432;
	            this.match(acmeParser.DOT);
	            this.state = 433;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeViewInstantiatedTypeRef() {
	    let localctx = new AcmeViewInstantiatedTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, acmeParser.RULE_acmeViewInstantiatedTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.identifier();
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 437;
	            this.match(acmeParser.DOT);
	            this.state = 438;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeFamilyRef() {
	    let localctx = new AcmeFamilyRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, acmeParser.RULE_acmeFamilyRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        this.identifier();
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 442;
	            this.match(acmeParser.DOT);
	            this.state = 443;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeFamilyInstantiationRef() {
	    let localctx = new AcmeFamilyInstantiationRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, acmeParser.RULE_acmeFamilyInstantiationRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeElementTypeRef() {
	    let localctx = new AcmeElementTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, acmeParser.RULE_acmeElementTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.identifier();
	        this.state = 451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 449;
	            this.match(acmeParser.DOT);
	            this.state = 450;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeDeclarationRef() {
	    let localctx = new AcmePropertyTypeDeclarationRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, acmeParser.RULE_acmePropertyTypeDeclarationRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.identifier();
	        this.state = 456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DOT) {
	            this.state = 454;
	            this.match(acmeParser.DOT);
	            this.state = 455;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeInstanceRef() {
	    let localctx = new AcmeInstanceRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, acmeParser.RULE_acmeInstanceRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.match(acmeParser.IDENTIFIER);
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.DOT) {
	            this.state = 459;
	            this.match(acmeParser.DOT);
	            this.state = 460;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGenericElementTypeDeclaration() {
	    let localctx = new AcmeGenericElementTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, acmeParser.RULE_acmeGenericElementTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.match(acmeParser.ELEMENT);
	        this.state = 467;
	        this.match(acmeParser.TYPE);
	        this.state = 468;
	        this.identifier();
	        this.state = 494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 469;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 492;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 470;
	                this.match(acmeParser.ASSIGN);
	                this.state = 471;
	                this.acmeGenericElementBody();
	                this.state = 473;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	                if(la_===1) {
	                    this.state = 472;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 475;
	                this.match(acmeParser.EXTENDS);
	                this.state = 476;
	                this.acmeElementTypeRef();
	                this.state = 481;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 477;
	                    this.match(acmeParser.COMMA);
	                    this.state = 478;
	                    this.acmeElementTypeRef();
	                    this.state = 483;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 490;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 484;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 485;
	                    this.match(acmeParser.WITH);
	                    this.state = 486;
	                    this.acmeGenericElementBody();
	                    this.state = 488;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	                    if(la_===1) {
	                        this.state = 487;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGenericElementBody() {
	    let localctx = new AcmeGenericElementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, acmeParser.RULE_acmeGenericElementBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(acmeParser.LBRACE);
	        this.state = 501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (acmeParser.PROPERTY - 70)) | (1 << (acmeParser.PROPBEGIN - 70)) | (1 << (acmeParser.RULE - 70)) | (1 << (acmeParser.SEMICOLON - 70)))) !== 0)) {
	            this.state = 499;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 497;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 498;
	                this.designRule();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 503;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 504;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGroupTypeDeclaration() {
	    let localctx = new AcmeGroupTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, acmeParser.RULE_acmeGroupTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.match(acmeParser.GROUP);
	        this.state = 507;
	        this.match(acmeParser.TYPE);
	        this.state = 508;
	        this.identifier();
	        this.state = 534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 509;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 532;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 510;
	                this.match(acmeParser.ASSIGN);
	                this.state = 511;
	                this.acmeGroupBody();
	                this.state = 513;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	                if(la_===1) {
	                    this.state = 512;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 515;
	                this.match(acmeParser.EXTENDS);
	                this.state = 516;
	                this.acmeGroupTypeRef();
	                this.state = 521;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 517;
	                    this.match(acmeParser.COMMA);
	                    this.state = 518;
	                    this.acmeGroupTypeRef();
	                    this.state = 523;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 530;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 524;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 525;
	                    this.match(acmeParser.WITH);
	                    this.state = 526;
	                    this.acmeGroupBody();
	                    this.state = 528;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	                    if(la_===1) {
	                        this.state = 527;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGroupDeclaration() {
	    let localctx = new AcmeGroupDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, acmeParser.RULE_acmeGroupDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this.match(acmeParser.GROUP);
	        this.state = 537;
	        this.identifier();
	        this.state = 547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 538;
	            this.match(acmeParser.COLON);
	            this.state = 539;
	            this.acmeGroupTypeRef();
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 540;
	                this.match(acmeParser.COMMA);
	                this.state = 541;
	                this.acmeGroupTypeRef();
	                this.state = 546;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 549;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 550;
	            this.match(acmeParser.ASSIGN);
	            this.state = 573;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 551;
	                this.acmeGroupBody();
	                this.state = 553;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	                if(la_===1) {
	                    this.state = 552;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.NEW:
	                this.state = 555;
	                this.match(acmeParser.NEW);
	                this.state = 556;
	                this.acmeGroupInstantiatedTypeRef();
	                this.state = 561;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 557;
	                    this.match(acmeParser.COMMA);
	                    this.state = 558;
	                    this.acmeGroupInstantiatedTypeRef();
	                    this.state = 563;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 571;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 564;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 565;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 566;
	                    this.match(acmeParser.WITH);
	                    this.state = 567;
	                    this.acmeGroupBody();
	                    this.state = 569;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                    if(la_===1) {
	                        this.state = 568;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeGroupBody() {
	    let localctx = new AcmeGroupBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, acmeParser.RULE_acmeGroupBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.match(acmeParser.LBRACE);
	        this.state = 583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (acmeParser.MEMBERS - 60)) | (1 << (acmeParser.PROPERTY - 60)) | (1 << (acmeParser.PROPBEGIN - 60)) | (1 << (acmeParser.RULE - 60)) | (1 << (acmeParser.SEMICOLON - 60)))) !== 0)) {
	            this.state = 581;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.MEMBERS:
	                this.state = 578;
	                this.acmeMembersBlock();
	                break;
	            case acmeParser.PROPERTY:
	                this.state = 579;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 580;
	                this.designRule();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 586;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeMembersBlock() {
	    let localctx = new AcmeMembersBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, acmeParser.RULE_acmeMembersBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.match(acmeParser.MEMBERS);
	        this.state = 589;
	        this.match(acmeParser.LBRACE);
	        this.state = 598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.IDENTIFIER) {
	            this.state = 590;
	            this.acmeInstanceRef();
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 591;
	                this.match(acmeParser.COMMA);
	                this.state = 592;
	                this.acmeInstanceRef();
	                this.state = 597;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 600;
	        this.match(acmeParser.RBRACE);
	        this.state = 602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 601;
	            this.match(acmeParser.SEMICOLON);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePortTypeDeclaration() {
	    let localctx = new AcmePortTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, acmeParser.RULE_acmePortTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(acmeParser.PORT);
	        this.state = 605;
	        this.match(acmeParser.TYPE);
	        this.state = 606;
	        this.identifier();
	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 607;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 630;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 608;
	                this.match(acmeParser.ASSIGN);
	                this.state = 609;
	                this.acmePortBody();
	                this.state = 611;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	                if(la_===1) {
	                    this.state = 610;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 613;
	                this.match(acmeParser.EXTENDS);
	                this.state = 614;
	                this.acmePortTypeRef();
	                this.state = 619;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 615;
	                    this.match(acmeParser.COMMA);
	                    this.state = 616;
	                    this.acmePortTypeRef();
	                    this.state = 621;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 628;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 622;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 623;
	                    this.match(acmeParser.WITH);
	                    this.state = 624;
	                    this.acmePortBody();
	                    this.state = 626;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	                    if(la_===1) {
	                        this.state = 625;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePortDeclaration() {
	    let localctx = new AcmePortDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, acmeParser.RULE_acmePortDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(acmeParser.PORT);
	        this.state = 635;
	        this.identifier();
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 636;
	            this.match(acmeParser.COLON);
	            this.state = 637;
	            this.acmePortTypeRef();
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 638;
	                this.match(acmeParser.COMMA);
	                this.state = 639;
	                this.acmePortTypeRef();
	                this.state = 644;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.ABSTRACT:
	        case acmeParser.ANALYSIS:
	        case acmeParser.ATTACHMENT:
	        case acmeParser.COMPONENT:
	        case acmeParser.CONNECTOR:
	        case acmeParser.DESIGN:
	        case acmeParser.ELEMENT:
	        case acmeParser.EXTERNAL:
	        case acmeParser.FINAL:
	        case acmeParser.GROUP:
	        case acmeParser.HEURISTIC:
	        case acmeParser.INVARIANT:
	        case acmeParser.RBRACE:
	        case acmeParser.PUBLIC:
	        case acmeParser.PRIVATE:
	        case acmeParser.PORT:
	        case acmeParser.PROPERTY:
	        case acmeParser.PROPBEGIN:
	        case acmeParser.REPRESENTATION:
	        case acmeParser.ROLE:
	        case acmeParser.RULE:
	        case acmeParser.SEMICOLON:
	            this.state = 648;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	            if(la_===1) {
	                this.state = 647;
	                this.match(acmeParser.SEMICOLON);

	            }
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 650;
	            this.match(acmeParser.ASSIGN);
	            this.state = 673;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 651;
	                this.acmePortBody();
	                this.state = 653;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	                if(la_===1) {
	                    this.state = 652;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.NEW:
	                this.state = 655;
	                this.match(acmeParser.NEW);
	                this.state = 656;
	                this.acmePortInstantiatedTypeRef();
	                this.state = 661;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 657;
	                    this.match(acmeParser.COMMA);
	                    this.state = 658;
	                    this.acmePortInstantiatedTypeRef();
	                    this.state = 663;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 671;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 664;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 665;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 666;
	                    this.match(acmeParser.WITH);
	                    this.state = 667;
	                    this.acmePortBody();
	                    this.state = 669;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                    if(la_===1) {
	                        this.state = 668;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePortBody() {
	    let localctx = new AcmePortBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, acmeParser.RULE_acmePortBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(acmeParser.LBRACE);
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (acmeParser.PROPERTY - 70)) | (1 << (acmeParser.PROPBEGIN - 70)) | (1 << (acmeParser.REPRESENTATION - 70)) | (1 << (acmeParser.RULE - 70)) | (1 << (acmeParser.SEMICOLON - 70)))) !== 0)) {
	            this.state = 681;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 678;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 679;
	                this.designRule();
	                break;
	            case acmeParser.REPRESENTATION:
	                this.state = 680;
	                this.acmeRepresentationDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 686;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRoleTypeDeclaration() {
	    let localctx = new AcmeRoleTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, acmeParser.RULE_acmeRoleTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(acmeParser.ROLE);
	        this.state = 689;
	        this.match(acmeParser.TYPE);
	        this.state = 690;
	        this.identifier();
	        this.state = 716;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 691;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 714;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 692;
	                this.match(acmeParser.ASSIGN);
	                this.state = 693;
	                this.acmeRoleBody();
	                this.state = 695;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	                if(la_===1) {
	                    this.state = 694;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 697;
	                this.match(acmeParser.EXTENDS);
	                this.state = 698;
	                this.acmeRoleTypeRef();
	                this.state = 703;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 699;
	                    this.match(acmeParser.COMMA);
	                    this.state = 700;
	                    this.acmeRoleTypeRef();
	                    this.state = 705;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 712;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 706;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 707;
	                    this.match(acmeParser.WITH);
	                    this.state = 708;
	                    this.acmeRoleBody();
	                    this.state = 710;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	                    if(la_===1) {
	                        this.state = 709;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRoleDeclaration() {
	    let localctx = new AcmeRoleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, acmeParser.RULE_acmeRoleDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        this.match(acmeParser.ROLE);
	        this.state = 719;
	        this.identifier();
	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 720;
	            this.match(acmeParser.COLON);
	            this.state = 721;
	            this.acmeRoleTypeRef();
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 722;
	                this.match(acmeParser.COMMA);
	                this.state = 723;
	                this.acmeRoleTypeRef();
	                this.state = 728;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 757;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 731;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 732;
	            this.match(acmeParser.ASSIGN);
	            this.state = 755;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 733;
	                this.acmeRoleBody();
	                this.state = 735;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	                if(la_===1) {
	                    this.state = 734;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.NEW:
	                this.state = 737;
	                this.match(acmeParser.NEW);
	                this.state = 738;
	                this.acmeRoleInstantiatedTypeRef();
	                this.state = 743;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 739;
	                    this.match(acmeParser.COMMA);
	                    this.state = 740;
	                    this.acmeRoleInstantiatedTypeRef();
	                    this.state = 745;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 753;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 746;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 747;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 748;
	                    this.match(acmeParser.WITH);
	                    this.state = 749;
	                    this.acmeRoleBody();
	                    this.state = 751;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	                    if(la_===1) {
	                        this.state = 750;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRoleBody() {
	    let localctx = new AcmeRoleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, acmeParser.RULE_acmeRoleBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(acmeParser.LBRACE);
	        this.state = 765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (acmeParser.PROPERTY - 70)) | (1 << (acmeParser.PROPBEGIN - 70)) | (1 << (acmeParser.REPRESENTATION - 70)) | (1 << (acmeParser.RULE - 70)) | (1 << (acmeParser.SEMICOLON - 70)))) !== 0)) {
	            this.state = 763;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 760;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 761;
	                this.designRule();
	                break;
	            case acmeParser.REPRESENTATION:
	                this.state = 762;
	                this.acmeRepresentationDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 767;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 768;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeComponentTypeDeclaration() {
	    let localctx = new AcmeComponentTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, acmeParser.RULE_acmeComponentTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this.match(acmeParser.COMPONENT);
	        this.state = 771;
	        this.match(acmeParser.TYPE);
	        this.state = 772;
	        this.identifier();
	        this.state = 798;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 773;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 796;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 774;
	                this.match(acmeParser.ASSIGN);
	                this.state = 775;
	                this.acmeComponentBody();
	                this.state = 777;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	                if(la_===1) {
	                    this.state = 776;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 779;
	                this.match(acmeParser.EXTENDS);
	                this.state = 780;
	                this.acmeComponentTypeRef();
	                this.state = 785;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 781;
	                    this.match(acmeParser.COMMA);
	                    this.state = 782;
	                    this.acmeComponentTypeRef();
	                    this.state = 787;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 794;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 788;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 789;
	                    this.match(acmeParser.WITH);
	                    this.state = 790;
	                    this.acmeComponentBody();
	                    this.state = 792;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	                    if(la_===1) {
	                        this.state = 791;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeComponentDeclaration() {
	    let localctx = new AcmeComponentDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, acmeParser.RULE_acmeComponentDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.match(acmeParser.COMPONENT);
	        this.state = 801;
	        this.identifier();
	        this.state = 811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 802;
	            this.match(acmeParser.COLON);
	            this.state = 803;
	            this.acmeComponentTypeRef();
	            this.state = 808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 804;
	                this.match(acmeParser.COMMA);
	                this.state = 805;
	                this.acmeComponentTypeRef();
	                this.state = 810;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 839;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 813;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 814;
	            this.match(acmeParser.ASSIGN);
	            this.state = 837;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 815;
	                this.acmeComponentBody();
	                this.state = 817;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	                if(la_===1) {
	                    this.state = 816;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.NEW:
	                this.state = 819;
	                this.match(acmeParser.NEW);
	                this.state = 820;
	                this.acmeComponentInstantiatedTypeRef();
	                this.state = 825;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 821;
	                    this.match(acmeParser.COMMA);
	                    this.state = 822;
	                    this.acmeComponentInstantiatedTypeRef();
	                    this.state = 827;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 835;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 828;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 829;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 830;
	                    this.match(acmeParser.WITH);
	                    this.state = 831;
	                    this.acmeComponentBody();
	                    this.state = 833;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	                    if(la_===1) {
	                        this.state = 832;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeComponentBody() {
	    let localctx = new AcmeComponentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, acmeParser.RULE_acmeComponentBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.match(acmeParser.LBRACE);
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (acmeParser.PORT - 68)) | (1 << (acmeParser.PROPERTY - 68)) | (1 << (acmeParser.PROPBEGIN - 68)) | (1 << (acmeParser.REPRESENTATION - 68)) | (1 << (acmeParser.RULE - 68)) | (1 << (acmeParser.SEMICOLON - 68)))) !== 0)) {
	            this.state = 846;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 842;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.PORT:
	                this.state = 843;
	                this.acmePortDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 844;
	                this.designRule();
	                break;
	            case acmeParser.REPRESENTATION:
	                this.state = 845;
	                this.acmeRepresentationDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 851;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeConnectorTypeDeclaration() {
	    let localctx = new AcmeConnectorTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, acmeParser.RULE_acmeConnectorTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 853;
	        this.match(acmeParser.CONNECTOR);
	        this.state = 854;
	        this.match(acmeParser.TYPE);
	        this.state = 855;
	        this.identifier();
	        this.state = 881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 856;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 879;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 857;
	                this.match(acmeParser.ASSIGN);
	                this.state = 858;
	                this.acmeConnectorBody();
	                this.state = 860;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	                if(la_===1) {
	                    this.state = 859;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.EXTENDS:
	                this.state = 862;
	                this.match(acmeParser.EXTENDS);
	                this.state = 863;
	                this.acmeConnectorTypeRef();
	                this.state = 868;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 864;
	                    this.match(acmeParser.COMMA);
	                    this.state = 865;
	                    this.acmeConnectorTypeRef();
	                    this.state = 870;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 877;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 871;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 872;
	                    this.match(acmeParser.WITH);
	                    this.state = 873;
	                    this.acmeConnectorBody();
	                    this.state = 875;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	                    if(la_===1) {
	                        this.state = 874;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeConnectorDeclaration() {
	    let localctx = new AcmeConnectorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, acmeParser.RULE_acmeConnectorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this.match(acmeParser.CONNECTOR);
	        this.state = 884;
	        this.identifier();
	        this.state = 894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 885;
	            this.match(acmeParser.COLON);
	            this.state = 886;
	            this.acmeConnectorTypeRef();
	            this.state = 891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 887;
	                this.match(acmeParser.COMMA);
	                this.state = 888;
	                this.acmeConnectorTypeRef();
	                this.state = 893;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 896;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 897;
	            this.match(acmeParser.ASSIGN);
	            this.state = 920;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 898;
	                this.acmeConnectorBody();
	                this.state = 900;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	                if(la_===1) {
	                    this.state = 899;
	                    this.match(acmeParser.SEMICOLON);

	                }
	                break;
	            case acmeParser.NEW:
	                this.state = 902;
	                this.match(acmeParser.NEW);
	                this.state = 903;
	                this.acmeConnectorInstantiatedTypeRef();
	                this.state = 908;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 904;
	                    this.match(acmeParser.COMMA);
	                    this.state = 905;
	                    this.acmeConnectorInstantiatedTypeRef();
	                    this.state = 910;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 918;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 911;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 912;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 913;
	                    this.match(acmeParser.WITH);
	                    this.state = 914;
	                    this.acmeConnectorBody();
	                    this.state = 916;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	                    if(la_===1) {
	                        this.state = 915;
	                        this.match(acmeParser.SEMICOLON);

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeConnectorBody() {
	    let localctx = new AcmeConnectorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, acmeParser.RULE_acmeConnectorBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        this.match(acmeParser.LBRACE);
	        this.state = 931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (acmeParser.DESIGN - 23)) | (1 << (acmeParser.HEURISTIC - 23)) | (1 << (acmeParser.INVARIANT - 23)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (acmeParser.PROPERTY - 70)) | (1 << (acmeParser.PROPBEGIN - 70)) | (1 << (acmeParser.REPRESENTATION - 70)) | (1 << (acmeParser.ROLE - 70)) | (1 << (acmeParser.RULE - 70)) | (1 << (acmeParser.SEMICOLON - 70)))) !== 0)) {
	            this.state = 929;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.PROPERTY:
	                this.state = 925;
	                this.acmePropertyDeclaration();
	                break;
	            case acmeParser.ROLE:
	                this.state = 926;
	                this.acmeRoleDeclaration();
	                break;
	            case acmeParser.DESIGN:
	            case acmeParser.HEURISTIC:
	            case acmeParser.INVARIANT:
	            case acmeParser.PROPBEGIN:
	            case acmeParser.RULE:
	            case acmeParser.SEMICOLON:
	                this.state = 927;
	                this.designRule();
	                break;
	            case acmeParser.REPRESENTATION:
	                this.state = 928;
	                this.acmeRepresentationDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 934;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeRepresentationDeclaration() {
	    let localctx = new AcmeRepresentationDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, acmeParser.RULE_acmeRepresentationDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this.match(acmeParser.REPRESENTATION);
	        this.state = 939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.IDENTIFIER) {
	            this.state = 937;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 938;
	            this.match(acmeParser.ASSIGN);
	        }

	        this.state = 941;
	        this.match(acmeParser.LBRACE);
	        this.state = 942;
	        this.acmeSystemDeclaration();
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.BINDINGS) {
	            this.state = 943;
	            this.acmeBindingsMapDeclaration();
	        }

	        this.state = 946;
	        this.match(acmeParser.RBRACE);
	        this.state = 948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 947;
	            this.match(acmeParser.SEMICOLON);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeBindingsMapDeclaration() {
	    let localctx = new AcmeBindingsMapDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, acmeParser.RULE_acmeBindingsMapDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this.match(acmeParser.BINDINGS);
	        this.state = 951;
	        this.match(acmeParser.LBRACE);
	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.IDENTIFIER) {
	            this.state = 952;
	            this.acmeBindingDeclaration();
	            this.state = 957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 958;
	        this.match(acmeParser.RBRACE);
	        this.state = 960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.SEMICOLON) {
	            this.state = 959;
	            this.match(acmeParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeBindingDeclaration() {
	    let localctx = new AcmeBindingDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, acmeParser.RULE_acmeBindingDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 962;
	        this.acmeInstanceRef();
	        this.state = 963;
	        this.match(acmeParser.TO);
	        this.state = 964;
	        this.acmeInstanceRef();
	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.LBRACE) {
	            this.state = 965;
	            this.match(acmeParser.LBRACE);
	            this.state = 966;
	            this.acmePropertyDeclaration();
	            this.state = 967;
	            this.acmePropertyBlock();
	            this.state = 968;
	            this.match(acmeParser.RBRACE);
	        }

	        this.state = 972;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeAttachmentDeclaration() {
	    let localctx = new AcmeAttachmentDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, acmeParser.RULE_acmeAttachmentDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        this.match(acmeParser.ATTACHMENT);
	        this.state = 975;
	        this.acmeInstanceRef();
	        this.state = 976;
	        this.match(acmeParser.TO);
	        this.state = 977;
	        this.acmeInstanceRef();
	        this.state = 978;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyDeclaration() {
	    let localctx = new AcmePropertyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, acmeParser.RULE_acmePropertyDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.match(acmeParser.PROPERTY);
	        this.state = 981;
	        this.identifier();
	        this.state = 984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 982;
	            this.match(acmeParser.COLON);
	            this.state = 983;
	            this.acmePropertyTypeRef();
	        }

	        this.state = 990;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case acmeParser.ASSIGN:
	        	this.state = 986;
	        	this.match(acmeParser.ASSIGN);
	        	this.state = 987;
	        	this.acmePropertyValueDeclaration();
	        	break;
	        case acmeParser.CONTAINASSIGN:
	        	this.state = 988;
	        	this.match(acmeParser.CONTAINASSIGN);
	        	this.state = 989;
	        	this.acmePropertyValueDeclaration();
	        	break;
	        case acmeParser.PROPBEGIN:
	        case acmeParser.SEMICOLON:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.PROPBEGIN) {
	            this.state = 992;
	            this.acmePropertyBlock();
	        }

	        this.state = 995;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyValueDeclaration() {
	    let localctx = new AcmePropertyValueDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, acmeParser.RULE_acmePropertyValueDeclaration);
	    try {
	        this.state = 1006;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.INTEGER_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 997;
	            this.match(acmeParser.INTEGER_LITERAL);
	            break;
	        case acmeParser.FLOATING_POINT_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 998;
	            this.match(acmeParser.FLOATING_POINT_LITERAL);
	            break;
	        case acmeParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 999;
	            this.match(acmeParser.STRING_LITERAL);
	            break;
	        case acmeParser.FALSE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1000;
	            this.match(acmeParser.FALSE);
	            break;
	        case acmeParser.TRUE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1001;
	            this.match(acmeParser.TRUE);
	            break;
	        case acmeParser.LBRACE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1002;
	            this.acmePropertySet();
	            break;
	        case acmeParser.LBRACKET:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1003;
	            this.acmePropertyRecord();
	            break;
	        case acmeParser.LANGLE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1004;
	            this.acmePropertySequence();
	            break;
	        case acmeParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1005;
	            this.enumidentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumidentifier() {
	    let localctx = new EnumidentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, acmeParser.RULE_enumidentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        this.match(acmeParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyElement() {
	    let localctx = new AcmePropertyElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, acmeParser.RULE_acmePropertyElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.IDENTIFIER:
	            this.state = 1010;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 1015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.DOT) {
	                this.state = 1011;
	                this.match(acmeParser.DOT);
	                this.state = 1012;
	                this.match(acmeParser.IDENTIFIER);
	                this.state = 1017;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case acmeParser.LBRACE:
	        case acmeParser.LBRACKET:
	        case acmeParser.LANGLE:
	            this.state = 1018;
	            this.acmePropertyCompoundElement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyCompoundElement() {
	    let localctx = new AcmePropertyCompoundElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, acmeParser.RULE_acmePropertyCompoundElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.LBRACE:
	            this.state = 1021;
	            this.acmePropertySet();
	            break;
	        case acmeParser.LBRACKET:
	            this.state = 1022;
	            this.acmePropertyRecord();
	            break;
	        case acmeParser.LANGLE:
	            this.state = 1023;
	            this.acmePropertySequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertySet() {
	    let localctx = new AcmePropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, acmeParser.RULE_acmePropertySet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        this.match(acmeParser.LBRACE);
	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (acmeParser.LBRACE - 49)) | (1 << (acmeParser.LBRACKET - 49)) | (1 << (acmeParser.LANGLE - 49)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (acmeParser.TRUE - 97)) | (1 << (acmeParser.FALSE - 97)) | (1 << (acmeParser.FLOATING_POINT_LITERAL - 97)) | (1 << (acmeParser.INTEGER_LITERAL - 97)) | (1 << (acmeParser.STRING_LITERAL - 97)) | (1 << (acmeParser.IDENTIFIER - 97)))) !== 0)) {
	            this.state = 1027;
	            this.acmePropertyValueDeclaration();
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1028;
	                this.match(acmeParser.COMMA);
	                this.state = 1029;
	                this.acmePropertyValueDeclaration();
	                this.state = 1034;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1037;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyRecordEntry() {
	    let localctx = new AcmePropertyRecordEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, acmeParser.RULE_acmePropertyRecordEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.identifier();
	        this.state = 1042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 1040;
	            this.match(acmeParser.COLON);
	            this.state = 1041;
	            this.acmePropertyTypeRef();
	        }

	        this.state = 1044;
	        this.match(acmeParser.ASSIGN);
	        this.state = 1045;
	        this.acmePropertyValueDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyRecord() {
	    let localctx = new AcmePropertyRecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, acmeParser.RULE_acmePropertyRecord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047;
	        this.match(acmeParser.LBRACKET);
	        this.state = 1059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.IDENTIFIER) {
	            this.state = 1048;
	            this.acmePropertyRecordEntry();
	            this.state = 1053;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1049;
	                    this.match(acmeParser.SEMICOLON);
	                    this.state = 1050;
	                    this.acmePropertyRecordEntry(); 
	                }
	                this.state = 1055;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	            }

	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.SEMICOLON) {
	                this.state = 1056;
	                this.match(acmeParser.SEMICOLON);
	            }

	        }

	        this.state = 1061;
	        this.match(acmeParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertySequence() {
	    let localctx = new AcmePropertySequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, acmeParser.RULE_acmePropertySequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1063;
	        this.match(acmeParser.LANGLE);
	        this.state = 1072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (acmeParser.LBRACE - 49)) | (1 << (acmeParser.LBRACKET - 49)) | (1 << (acmeParser.LANGLE - 49)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (acmeParser.TRUE - 97)) | (1 << (acmeParser.FALSE - 97)) | (1 << (acmeParser.FLOATING_POINT_LITERAL - 97)) | (1 << (acmeParser.INTEGER_LITERAL - 97)) | (1 << (acmeParser.STRING_LITERAL - 97)) | (1 << (acmeParser.IDENTIFIER - 97)))) !== 0)) {
	            this.state = 1064;
	            this.acmePropertyValueDeclaration();
	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1065;
	                this.match(acmeParser.COMMA);
	                this.state = 1066;
	                this.acmePropertyValueDeclaration();
	                this.state = 1071;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1074;
	        this.match(acmeParser.RANGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeRecord() {
	    let localctx = new AcmePropertyTypeRecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, acmeParser.RULE_acmePropertyTypeRecord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        this.match(acmeParser.RECORD);
	        this.state = 1077;
	        this.match(acmeParser.LBRACKET);
	        this.state = 1081;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.IDENTIFIER) {
	            this.state = 1078;
	            this.acmePropertyRecordFieldDescription();
	            this.state = 1083;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1084;
	        this.match(acmeParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeSet() {
	    let localctx = new AcmePropertyTypeSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, acmeParser.RULE_acmePropertyTypeSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this.match(acmeParser.SET);
	        this.state = 1087;
	        this.match(acmeParser.LBRACE);
	        this.state = 1089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (acmeParser.ANY - 7)) | (1 << (acmeParser.COMPONENT - 7)) | (1 << (acmeParser.CONNECTOR - 7)) | (1 << (acmeParser.DOUBLE - 7)) | (1 << (acmeParser.ELEMENT - 7)) | (1 << (acmeParser.ENUM - 7)) | (1 << (acmeParser.FLOAT - 7)))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (acmeParser.GROUP - 39)) | (1 << (acmeParser.INT - 39)) | (1 << (acmeParser.PORT - 39)) | (1 << (acmeParser.PROPERTY - 39)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (acmeParser.RECORD - 74)) | (1 << (acmeParser.REPRESENTATION - 74)) | (1 << (acmeParser.ROLE - 74)) | (1 << (acmeParser.SEQUENCE - 74)) | (1 << (acmeParser.SET - 74)) | (1 << (acmeParser.STRING - 74)) | (1 << (acmeParser.SYSTEM - 74)) | (1 << (acmeParser.TYPE - 74)) | (1 << (acmeParser.BOOLEAN - 74)) | (1 << (acmeParser.IDENTIFIER - 74)))) !== 0)) {
	            this.state = 1088;
	            this.acmeTypeRef();
	        }

	        this.state = 1091;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeSequence() {
	    let localctx = new AcmePropertyTypeSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, acmeParser.RULE_acmePropertyTypeSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.match(acmeParser.SEQUENCE);
	        this.state = 1094;
	        this.match(acmeParser.LANGLE);
	        this.state = 1096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << acmeParser.ANY) | (1 << acmeParser.DOUBLE) | (1 << acmeParser.ENUM))) !== 0) || _la===acmeParser.FLOAT || _la===acmeParser.INT || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (acmeParser.RECORD - 74)) | (1 << (acmeParser.SEQUENCE - 74)) | (1 << (acmeParser.SET - 74)) | (1 << (acmeParser.STRING - 74)) | (1 << (acmeParser.BOOLEAN - 74)) | (1 << (acmeParser.IDENTIFIER - 74)))) !== 0)) {
	            this.state = 1095;
	            this.acmePropertyTypeRef();
	        }

	        this.state = 1098;
	        this.match(acmeParser.RANGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeEnum() {
	    let localctx = new AcmePropertyTypeEnumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, acmeParser.RULE_acmePropertyTypeEnum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1100;
	        this.match(acmeParser.ENUM);
	        this.state = 1101;
	        this.match(acmeParser.LBRACE);
	        this.state = 1102;
	        this.identifier();
	        this.state = 1107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.COMMA) {
	            this.state = 1103;
	            this.match(acmeParser.COMMA);
	            this.state = 1104;
	            this.identifier();
	            this.state = 1109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1110;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyRecordFieldDescription() {
	    let localctx = new AcmePropertyRecordFieldDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, acmeParser.RULE_acmePropertyRecordFieldDescription);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.identifier();
	        this.state = 1113;
	        this.match(acmeParser.COLON);
	        this.state = 1114;
	        this.acmePropertyTypeRef();
	        this.state = 1115;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeRef() {
	    let localctx = new AcmePropertyTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, acmeParser.RULE_acmePropertyTypeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1119;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.ANY:
	        case acmeParser.DOUBLE:
	        case acmeParser.ENUM:
	        case acmeParser.FLOAT:
	        case acmeParser.INT:
	        case acmeParser.RECORD:
	        case acmeParser.SEQUENCE:
	        case acmeParser.SET:
	        case acmeParser.STRING:
	        case acmeParser.BOOLEAN:
	            this.state = 1117;
	            this.acmePropertyTypeStructure();
	            break;
	        case acmeParser.IDENTIFIER:
	            this.state = 1118;
	            this.acmePropertyTypeDeclarationRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeStructure() {
	    let localctx = new AcmePropertyTypeStructureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, acmeParser.RULE_acmePropertyTypeStructure);
	    try {
	        this.state = 1131;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.ANY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1121;
	            this.acmePropertyTypeAny();
	            break;
	        case acmeParser.INT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1122;
	            this.acmePropertyTypeInt();
	            break;
	        case acmeParser.FLOAT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1123;
	            this.acmePropertyTypeFloat();
	            break;
	        case acmeParser.DOUBLE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1124;
	            this.acmePropertyTypeDouble();
	            break;
	        case acmeParser.STRING:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1125;
	            this.acmePropertyTypeString();
	            break;
	        case acmeParser.BOOLEAN:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1126;
	            this.acmePropertyTypeBoolean();
	            break;
	        case acmeParser.RECORD:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1127;
	            this.acmePropertyTypeRecord();
	            break;
	        case acmeParser.SET:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1128;
	            this.acmePropertyTypeSet();
	            break;
	        case acmeParser.SEQUENCE:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1129;
	            this.acmePropertyTypeSequence();
	            break;
	        case acmeParser.ENUM:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1130;
	            this.acmePropertyTypeEnum();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeDeclaration() {
	    let localctx = new AcmePropertyTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, acmeParser.RULE_acmePropertyTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1133;
	        this.match(acmeParser.PROPERTY);
	        this.state = 1134;
	        this.match(acmeParser.TYPE);
	        this.state = 1135;
	        this.identifier();
	        this.state = 1152;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 1136;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 1137;
	            this.match(acmeParser.ASSIGN);
	            this.state = 1148;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.INT:
	                this.state = 1138;
	                this.acmePropertyTypeInt();
	                break;
	            case acmeParser.FLOAT:
	                this.state = 1139;
	                this.acmePropertyTypeFloat();
	                break;
	            case acmeParser.DOUBLE:
	                this.state = 1140;
	                this.acmePropertyTypeDouble();
	                break;
	            case acmeParser.STRING:
	                this.state = 1141;
	                this.acmePropertyTypeString();
	                break;
	            case acmeParser.BOOLEAN:
	                this.state = 1142;
	                this.acmePropertyTypeBoolean();
	                break;
	            case acmeParser.RECORD:
	                this.state = 1143;
	                this.acmePropertyTypeRecord();
	                break;
	            case acmeParser.SET:
	                this.state = 1144;
	                this.acmePropertyTypeSet();
	                break;
	            case acmeParser.SEQUENCE:
	                this.state = 1145;
	                this.acmePropertyTypeSequence();
	                break;
	            case acmeParser.ENUM:
	                this.state = 1146;
	                this.acmePropertyTypeEnum();
	                break;
	            case acmeParser.ANY:
	                this.state = 1147;
	                this.acmePropertyTypeAny();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1150;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyBlockEntry() {
	    let localctx = new AcmePropertyBlockEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, acmeParser.RULE_acmePropertyBlockEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this.identifier();
	        this.state = 1157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 1155;
	            this.match(acmeParser.COLON);
	            this.state = 1156;
	            this.acmePropertyTypeRef();
	        }

	        this.state = 1163;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case acmeParser.ASSIGN:
	        	this.state = 1159;
	        	this.match(acmeParser.ASSIGN);
	        	this.state = 1160;
	        	this.acmePropertyValueDeclaration();
	        	break;
	        case acmeParser.CONTAINASSIGN:
	        	this.state = 1161;
	        	this.match(acmeParser.CONTAINASSIGN);
	        	this.state = 1162;
	        	this.acmePropertyValueDeclaration();
	        	break;
	        case acmeParser.SEMICOLON:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1165;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyBlock() {
	    let localctx = new AcmePropertyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, acmeParser.RULE_acmePropertyBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.match(acmeParser.PROPBEGIN);
	        this.state = 1169; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1168;
	            this.acmePropertyBlockEntry();
	            this.state = 1171; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===acmeParser.IDENTIFIER);
	        this.state = 1173;
	        this.match(acmeParser.PROPEND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeInt() {
	    let localctx = new AcmePropertyTypeIntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, acmeParser.RULE_acmePropertyTypeInt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1175;
	        this.match(acmeParser.INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeAny() {
	    let localctx = new AcmePropertyTypeAnyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, acmeParser.RULE_acmePropertyTypeAny);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(acmeParser.ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeFloat() {
	    let localctx = new AcmePropertyTypeFloatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, acmeParser.RULE_acmePropertyTypeFloat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1179;
	        this.match(acmeParser.FLOAT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeDouble() {
	    let localctx = new AcmePropertyTypeDoubleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, acmeParser.RULE_acmePropertyTypeDouble);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        this.match(acmeParser.DOUBLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeString() {
	    let localctx = new AcmePropertyTypeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, acmeParser.RULE_acmePropertyTypeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1183;
	        this.match(acmeParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmePropertyTypeBoolean() {
	    let localctx = new AcmePropertyTypeBooleanContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, acmeParser.RULE_acmePropertyTypeBoolean);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.match(acmeParser.BOOLEAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeViewDeclaration() {
	    let localctx = new AcmeViewDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, acmeParser.RULE_acmeViewDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1187;
	        this.match(acmeParser.VIEW);
	        this.state = 1188;
	        this.identifier();
	        this.state = 1191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 1189;
	            this.match(acmeParser.COLON);
	            this.state = 1190;
	            this.acmeViewTypeRef();
	        }

	        this.state = 1212;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 1193;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	            this.state = 1194;
	            this.match(acmeParser.ASSIGN);
	            this.state = 1210;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.LBRACE:
	                this.state = 1195;
	                this.acmeViewBody();
	                this.state = 1197;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.SEMICOLON) {
	                    this.state = 1196;
	                    this.match(acmeParser.SEMICOLON);
	                }

	                break;
	            case acmeParser.NEW:
	                this.state = 1199;
	                this.match(acmeParser.NEW);
	                this.state = 1200;
	                this.acmeViewInstantiatedTypeRef();
	                this.state = 1208;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 1201;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.EXTENDED:
	                    this.state = 1202;
	                    this.match(acmeParser.EXTENDED);
	                    this.state = 1203;
	                    this.match(acmeParser.WITH);
	                    this.state = 1204;
	                    this.acmeViewBody();
	                    this.state = 1206;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===acmeParser.SEMICOLON) {
	                        this.state = 1205;
	                        this.match(acmeParser.SEMICOLON);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeViewTypeDeclaration() {
	    let localctx = new AcmeViewTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, acmeParser.RULE_acmeViewTypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1214;
	        this.match(acmeParser.VIEW);
	        this.state = 1215;
	        this.match(acmeParser.TYPE);
	        this.state = 1216;
	        this.identifier();
	        this.state = 1235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SEMICOLON:
	            this.state = 1217;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.ASSIGN:
	        case acmeParser.EXTENDS:
	            this.state = 1233;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.ASSIGN:
	                this.state = 1218;
	                this.match(acmeParser.ASSIGN);
	                this.state = 1219;
	                this.acmeViewBody();
	                this.state = 1221;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===acmeParser.SEMICOLON) {
	                    this.state = 1220;
	                    this.match(acmeParser.SEMICOLON);
	                }

	                break;
	            case acmeParser.EXTENDS:
	                this.state = 1223;
	                this.match(acmeParser.EXTENDS);
	                this.state = 1224;
	                this.acmeViewTypeRef();
	                this.state = 1231;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.SEMICOLON:
	                    this.state = 1225;
	                    this.match(acmeParser.SEMICOLON);
	                    break;
	                case acmeParser.WITH:
	                    this.state = 1226;
	                    this.match(acmeParser.WITH);
	                    this.state = 1227;
	                    this.acmeViewBody();
	                    this.state = 1229;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===acmeParser.SEMICOLON) {
	                        this.state = 1228;
	                        this.match(acmeParser.SEMICOLON);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeViewBody() {
	    let localctx = new AcmeViewBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, acmeParser.RULE_acmeViewBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.match(acmeParser.LBRACE);
	        this.state = 1238;
	        this.match(acmeParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designRule() {
	    let localctx = new DesignRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, acmeParser.RULE_designRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.DESIGN) {
	            this.state = 1240;
	            this.match(acmeParser.DESIGN);
	        }

	        this.state = 1248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.RULE) {
	            this.state = 1243;
	            this.match(acmeParser.RULE);
	            this.state = 1244;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 1246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.ASSIGN) {
	                this.state = 1245;
	                this.match(acmeParser.ASSIGN);
	            }

	        }

	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.HEURISTIC || _la===acmeParser.INVARIANT) {
	            this.state = 1254;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.INVARIANT:
	                this.state = 1250;
	                this.match(acmeParser.INVARIANT);
	                this.state = 1251;
	                this.designRuleExpression();
	                break;
	            case acmeParser.HEURISTIC:
	                this.state = 1252;
	                this.match(acmeParser.HEURISTIC);
	                this.state = 1253;
	                this.designRuleExpression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 1259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.PROPBEGIN) {
	            this.state = 1258;
	            this.acmePropertyBlock();
	        }

	        this.state = 1261;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeDesignAnalysisDeclaration() {
	    let localctx = new AcmeDesignAnalysisDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, acmeParser.RULE_acmeDesignAnalysisDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1323;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.ANALYSIS:
	        case acmeParser.DESIGN:
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.DESIGN) {
	                this.state = 1263;
	                this.match(acmeParser.DESIGN);
	            }

	            this.state = 1266;
	            this.match(acmeParser.ANALYSIS);
	            this.state = 1267;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 1268;
	            this.match(acmeParser.LPAREN);
	            this.state = 1277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.IDENTIFIER) {
	                this.state = 1269;
	                this.formalParam();
	                this.state = 1274;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 1270;
	                    this.match(acmeParser.COMMA);
	                    this.state = 1271;
	                    this.formalParam();
	                    this.state = 1276;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1279;
	            this.match(acmeParser.RPAREN);
	            this.state = 1280;
	            this.match(acmeParser.COLON);
	            this.state = 1281;
	            this.acmeTypeRef();
	            this.state = 1282;
	            this.match(acmeParser.ASSIGN);
	            this.state = 1283;
	            this.designRuleExpression();
	            this.state = 1285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.PROPBEGIN) {
	                this.state = 1284;
	                this.acmePropertyBlock();
	            }

	            this.state = 1287;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        case acmeParser.EXTERNAL:
	            this.state = 1289;
	            this.match(acmeParser.EXTERNAL);
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.DESIGN) {
	                this.state = 1290;
	                this.match(acmeParser.DESIGN);
	            }

	            this.state = 1293;
	            this.match(acmeParser.ANALYSIS);
	            this.state = 1294;
	            this.match(acmeParser.IDENTIFIER);
	            this.state = 1295;
	            this.match(acmeParser.LPAREN);
	            this.state = 1304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.IDENTIFIER) {
	                this.state = 1296;
	                this.formalParam();
	                this.state = 1301;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.COMMA) {
	                    this.state = 1297;
	                    this.match(acmeParser.COMMA);
	                    this.state = 1298;
	                    this.formalParam();
	                    this.state = 1303;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1306;
	            this.match(acmeParser.RPAREN);
	            this.state = 1307;
	            this.match(acmeParser.COLON);
	            this.state = 1308;
	            this.acmeTypeRef();
	            this.state = 1309;
	            this.match(acmeParser.ASSIGN);
	            this.state = 1319;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.STRING_LITERAL:
	                this.state = 1310;
	                this.codeLiteral();
	                break;
	            case acmeParser.IDENTIFIER:
	                this.state = 1311;
	                this.identifier();
	                this.state = 1316;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===acmeParser.DOT) {
	                    this.state = 1312;
	                    this.match(acmeParser.DOT);
	                    this.state = 1313;
	                    this.identifier();
	                    this.state = 1318;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1321;
	            this.match(acmeParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParam() {
	    let localctx = new FormalParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, acmeParser.RULE_formalParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1325;
	        this.identifier();
	        this.state = 1326;
	        this.match(acmeParser.COLON);
	        this.state = 1327;
	        this.acmeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminatedDesignRuleExpression() {
	    let localctx = new TerminatedDesignRuleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, acmeParser.RULE_terminatedDesignRuleExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.designRuleExpression();
	        this.state = 1330;
	        this.match(acmeParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designRuleExpression() {
	    let localctx = new DesignRuleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, acmeParser.RULE_designRuleExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.aSTDRImpliesExpression();
	        this.state = 1337;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1333;
	                this.match(acmeParser.OR);
	                this.state = 1334;
	                this.aSTDRImpliesExpression(); 
	            }
	            this.state = 1339;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aSTDRImpliesExpression() {
	    let localctx = new ASTDRImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, acmeParser.RULE_aSTDRImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.dRIffExpression();
	        this.state = 1345;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1341;
	                this.match(acmeParser.IMPLIES);
	                this.state = 1342;
	                this.dRIffExpression(); 
	            }
	            this.state = 1347;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRIffExpression() {
	    let localctx = new DRIffExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, acmeParser.RULE_dRIffExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this.dRAndExpression();
	        this.state = 1353;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,197,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1349;
	                this.match(acmeParser.IFF);
	                this.state = 1350;
	                this.dRAndExpression(); 
	            }
	            this.state = 1355;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,197,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRAndExpression() {
	    let localctx = new DRAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, acmeParser.RULE_dRAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.dRNegateExpression();
	        this.state = 1361;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,198,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1357;
	                this.match(acmeParser.AND);
	                this.state = 1358;
	                this.dRNegateExpression(); 
	            }
	            this.state = 1363;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,198,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRNegateExpression() {
	    let localctx = new DRNegateExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, acmeParser.RULE_dRNegateExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.BANG:
	            this.state = 1364;
	            this.match(acmeParser.BANG);
	            this.state = 1365;
	            this.dRNegateExpression();
	            break;
	        case acmeParser.COLLECT:
	        case acmeParser.COMPONENT:
	        case acmeParser.CONNECTOR:
	        case acmeParser.DOUBLE:
	        case acmeParser.ELEMENT:
	        case acmeParser.ENUM:
	        case acmeParser.EXISTS:
	        case acmeParser.FORALL:
	        case acmeParser.FLOAT:
	        case acmeParser.GROUP:
	        case acmeParser.INT:
	        case acmeParser.LBRACE:
	        case acmeParser.LBRACKET:
	        case acmeParser.LPAREN:
	        case acmeParser.LANGLE:
	        case acmeParser.MINUS:
	        case acmeParser.PORT:
	        case acmeParser.PROPERTY:
	        case acmeParser.RECORD:
	        case acmeParser.ROLE:
	        case acmeParser.SEQUENCE:
	        case acmeParser.SELECT:
	        case acmeParser.SET:
	        case acmeParser.SLASH:
	        case acmeParser.STRING:
	        case acmeParser.SYSTEM:
	        case acmeParser.TRUE:
	        case acmeParser.FALSE:
	        case acmeParser.BOOLEAN:
	        case acmeParser.FLOATING_POINT_LITERAL:
	        case acmeParser.INTEGER_LITERAL:
	        case acmeParser.STRING_LITERAL:
	        case acmeParser.IDENTIFIER:
	            this.state = 1366;
	            this.dREqualityExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dREqualityExpression() {
	    let localctx = new DREqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, acmeParser.RULE_dREqualityExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1369;
	        this.dRRelationalExpression();
	        this.state = 1376;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1374;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.EQ:
	                    this.state = 1370;
	                    this.match(acmeParser.EQ);
	                    this.state = 1371;
	                    this.dRRelationalExpression();
	                    break;
	                case acmeParser.NE:
	                    this.state = 1372;
	                    this.match(acmeParser.NE);
	                    this.state = 1373;
	                    this.dRRelationalExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1378;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRRelationalExpression() {
	    let localctx = new DRRelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, acmeParser.RULE_dRRelationalExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.dRAdditiveExpression();
	        this.state = 1390;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1388;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.LANGLE:
	                    this.state = 1380;
	                    this.match(acmeParser.LANGLE);
	                    this.state = 1381;
	                    this.dRAdditiveExpression();
	                    break;
	                case acmeParser.RANGLE:
	                    this.state = 1382;
	                    this.match(acmeParser.RANGLE);
	                    this.state = 1383;
	                    this.dRAdditiveExpression();
	                    break;
	                case acmeParser.LE:
	                    this.state = 1384;
	                    this.match(acmeParser.LE);
	                    this.state = 1385;
	                    this.dRAdditiveExpression();
	                    break;
	                case acmeParser.GE:
	                    this.state = 1386;
	                    this.match(acmeParser.GE);
	                    this.state = 1387;
	                    this.dRAdditiveExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1392;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRAdditiveExpression() {
	    let localctx = new DRAdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, acmeParser.RULE_dRAdditiveExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this.dRMultiplicativeExpression();
	        this.state = 1400;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1398;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.PLUS:
	                    this.state = 1394;
	                    this.match(acmeParser.PLUS);
	                    this.state = 1395;
	                    this.dRMultiplicativeExpression();
	                    break;
	                case acmeParser.MINUS:
	                    this.state = 1396;
	                    this.match(acmeParser.MINUS);
	                    this.state = 1397;
	                    this.dRMultiplicativeExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1402;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRMultiplicativeExpression() {
	    let localctx = new DRMultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, acmeParser.RULE_dRMultiplicativeExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1403;
	        this.dRNegativeExpression();
	        this.state = 1414;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1412;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.STAR:
	                    this.state = 1404;
	                    this.match(acmeParser.STAR);
	                    this.state = 1405;
	                    this.dRNegativeExpression();
	                    break;
	                case acmeParser.SLASH:
	                    this.state = 1406;
	                    this.match(acmeParser.SLASH);
	                    this.state = 1407;
	                    this.dRNegativeExpression();
	                    break;
	                case acmeParser.REM:
	                    this.state = 1408;
	                    this.match(acmeParser.REM);
	                    this.state = 1409;
	                    this.dRNegativeExpression();
	                    break;
	                case acmeParser.POWER:
	                    this.state = 1410;
	                    this.match(acmeParser.POWER);
	                    this.state = 1411;
	                    this.dRNegativeExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1416;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dRNegativeExpression() {
	    let localctx = new DRNegativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, acmeParser.RULE_dRNegativeExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.MINUS:
	            this.state = 1417;
	            this.match(acmeParser.MINUS);
	            this.state = 1418;
	            this.dRNegativeExpression();
	            break;
	        case acmeParser.COLLECT:
	        case acmeParser.COMPONENT:
	        case acmeParser.CONNECTOR:
	        case acmeParser.DOUBLE:
	        case acmeParser.ELEMENT:
	        case acmeParser.ENUM:
	        case acmeParser.EXISTS:
	        case acmeParser.FORALL:
	        case acmeParser.FLOAT:
	        case acmeParser.GROUP:
	        case acmeParser.INT:
	        case acmeParser.LBRACE:
	        case acmeParser.LBRACKET:
	        case acmeParser.LPAREN:
	        case acmeParser.LANGLE:
	        case acmeParser.PORT:
	        case acmeParser.PROPERTY:
	        case acmeParser.RECORD:
	        case acmeParser.ROLE:
	        case acmeParser.SEQUENCE:
	        case acmeParser.SELECT:
	        case acmeParser.SET:
	        case acmeParser.SLASH:
	        case acmeParser.STRING:
	        case acmeParser.SYSTEM:
	        case acmeParser.TRUE:
	        case acmeParser.FALSE:
	        case acmeParser.BOOLEAN:
	        case acmeParser.FLOATING_POINT_LITERAL:
	        case acmeParser.INTEGER_LITERAL:
	        case acmeParser.STRING_LITERAL:
	        case acmeParser.IDENTIFIER:
	            this.state = 1419;
	            this.primitiveExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveExpression() {
	    let localctx = new PrimitiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, acmeParser.RULE_primitiveExpression);
	    try {
	        this.state = 1430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1422;
	            this.literalConstant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1423;
	            this.reference();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1424;
	            this.parentheticalExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1425;
	            this.setExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1426;
	            this.literalSequence();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1427;
	            this.literalRecord();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1428;
	            this.quantifiedExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1429;
	            this.sequenceExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentheticalExpression() {
	    let localctx = new ParentheticalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, acmeParser.RULE_parentheticalExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.match(acmeParser.LPAREN);
	        this.state = 1433;
	        this.designRuleExpression();
	        this.state = 1434;
	        this.match(acmeParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reference() {
	    let localctx = new ReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, acmeParser.RULE_reference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this.identifier();
	        this.state = 1444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.DOT) {
	            this.state = 1437;
	            this.match(acmeParser.DOT);
	            this.state = 1440;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.IDENTIFIER:
	                this.state = 1438;
	                this.identifier();
	                break;
	            case acmeParser.ATTACHEDPORTS:
	            case acmeParser.ATTACHEDROLES:
	            case acmeParser.COMPONENTS:
	            case acmeParser.CONNECTORS:
	            case acmeParser.GROUPS:
	            case acmeParser.MEMBERS:
	            case acmeParser.PORTS:
	            case acmeParser.PROPERTIES:
	            case acmeParser.REPRESENTATIONS:
	            case acmeParser.ROLES:
	            case acmeParser.TYPE:
	                this.state = 1439;
	                this.setReference();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.LPAREN) {
	            this.state = 1447;
	            this.actualParams();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setReference() {
	    let localctx = new SetReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, acmeParser.RULE_setReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.TYPE:
	            this.state = 1450;
	            this.match(acmeParser.TYPE);
	            break;
	        case acmeParser.COMPONENTS:
	            this.state = 1451;
	            this.match(acmeParser.COMPONENTS);
	            break;
	        case acmeParser.CONNECTORS:
	            this.state = 1452;
	            this.match(acmeParser.CONNECTORS);
	            break;
	        case acmeParser.PORTS:
	            this.state = 1453;
	            this.match(acmeParser.PORTS);
	            break;
	        case acmeParser.ROLES:
	            this.state = 1454;
	            this.match(acmeParser.ROLES);
	            break;
	        case acmeParser.GROUPS:
	            this.state = 1455;
	            this.match(acmeParser.GROUPS);
	            break;
	        case acmeParser.MEMBERS:
	            this.state = 1456;
	            this.match(acmeParser.MEMBERS);
	            break;
	        case acmeParser.PROPERTIES:
	            this.state = 1457;
	            this.match(acmeParser.PROPERTIES);
	            break;
	        case acmeParser.REPRESENTATIONS:
	            this.state = 1458;
	            this.match(acmeParser.REPRESENTATIONS);
	            break;
	        case acmeParser.ATTACHEDPORTS:
	            this.state = 1459;
	            this.match(acmeParser.ATTACHEDPORTS);
	            break;
	        case acmeParser.ATTACHEDROLES:
	            this.state = 1460;
	            this.match(acmeParser.ATTACHEDROLES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualParams() {
	    let localctx = new ActualParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, acmeParser.RULE_actualParams);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.match(acmeParser.LPAREN);
	        this.state = 1472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (acmeParser.BANG - 13)) | (1 << (acmeParser.COLLECT - 13)) | (1 << (acmeParser.COMPONENT - 13)) | (1 << (acmeParser.CONNECTOR - 13)) | (1 << (acmeParser.DOUBLE - 13)) | (1 << (acmeParser.ELEMENT - 13)) | (1 << (acmeParser.ENUM - 13)) | (1 << (acmeParser.EXISTS - 13)) | (1 << (acmeParser.FORALL - 13)) | (1 << (acmeParser.FLOAT - 13)) | (1 << (acmeParser.GROUP - 13)))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (acmeParser.INT - 46)) | (1 << (acmeParser.LBRACE - 46)) | (1 << (acmeParser.LBRACKET - 46)) | (1 << (acmeParser.LPAREN - 46)) | (1 << (acmeParser.LANGLE - 46)) | (1 << (acmeParser.MINUS - 46)) | (1 << (acmeParser.PORT - 46)) | (1 << (acmeParser.PROPERTY - 46)) | (1 << (acmeParser.RECORD - 46)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (acmeParser.ROLE - 78)) | (1 << (acmeParser.SEQUENCE - 78)) | (1 << (acmeParser.SELECT - 78)) | (1 << (acmeParser.SET - 78)) | (1 << (acmeParser.SLASH - 78)) | (1 << (acmeParser.STRING - 78)) | (1 << (acmeParser.SYSTEM - 78)) | (1 << (acmeParser.TRUE - 78)) | (1 << (acmeParser.FALSE - 78)) | (1 << (acmeParser.BOOLEAN - 78)) | (1 << (acmeParser.FLOATING_POINT_LITERAL - 78)) | (1 << (acmeParser.INTEGER_LITERAL - 78)) | (1 << (acmeParser.STRING_LITERAL - 78)) | (1 << (acmeParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 1464;
	            this.designRuleExpression();
	            this.state = 1469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1465;
	                this.match(acmeParser.COMMA);
	                this.state = 1466;
	                this.designRuleExpression();
	                this.state = 1471;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1474;
	        this.match(acmeParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalConstant() {
	    let localctx = new LiteralConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, acmeParser.RULE_literalConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.INTEGER_LITERAL:
	            this.state = 1476;
	            this.match(acmeParser.INTEGER_LITERAL);
	            break;
	        case acmeParser.FLOATING_POINT_LITERAL:
	            this.state = 1477;
	            this.match(acmeParser.FLOATING_POINT_LITERAL);
	            break;
	        case acmeParser.STRING_LITERAL:
	            this.state = 1478;
	            this.match(acmeParser.STRING_LITERAL);
	            break;
	        case acmeParser.TRUE:
	            this.state = 1479;
	            this.match(acmeParser.TRUE);
	            break;
	        case acmeParser.FALSE:
	            this.state = 1480;
	            this.match(acmeParser.FALSE);
	            break;
	        case acmeParser.COMPONENT:
	            this.state = 1481;
	            this.match(acmeParser.COMPONENT);
	            break;
	        case acmeParser.GROUP:
	            this.state = 1482;
	            this.match(acmeParser.GROUP);
	            break;
	        case acmeParser.CONNECTOR:
	            this.state = 1483;
	            this.match(acmeParser.CONNECTOR);
	            break;
	        case acmeParser.PORT:
	            this.state = 1484;
	            this.match(acmeParser.PORT);
	            break;
	        case acmeParser.ROLE:
	            this.state = 1485;
	            this.match(acmeParser.ROLE);
	            break;
	        case acmeParser.SYSTEM:
	            this.state = 1486;
	            this.match(acmeParser.SYSTEM);
	            break;
	        case acmeParser.ELEMENT:
	            this.state = 1487;
	            this.match(acmeParser.ELEMENT);
	            break;
	        case acmeParser.PROPERTY:
	            this.state = 1488;
	            this.match(acmeParser.PROPERTY);
	            break;
	        case acmeParser.INT:
	            this.state = 1489;
	            this.match(acmeParser.INT);
	            break;
	        case acmeParser.FLOAT:
	            this.state = 1490;
	            this.match(acmeParser.FLOAT);
	            break;
	        case acmeParser.DOUBLE:
	            this.state = 1491;
	            this.match(acmeParser.DOUBLE);
	            break;
	        case acmeParser.STRING:
	            this.state = 1492;
	            this.match(acmeParser.STRING);
	            break;
	        case acmeParser.BOOLEAN:
	            this.state = 1493;
	            this.match(acmeParser.BOOLEAN);
	            break;
	        case acmeParser.ENUM:
	            this.state = 1494;
	            this.match(acmeParser.ENUM);
	            break;
	        case acmeParser.SET:
	            this.state = 1495;
	            this.match(acmeParser.SET);
	            break;
	        case acmeParser.SEQUENCE:
	            this.state = 1496;
	            this.match(acmeParser.SEQUENCE);
	            break;
	        case acmeParser.RECORD:
	            this.state = 1497;
	            this.match(acmeParser.RECORD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedExpression() {
	    let localctx = new QuantifiedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, acmeParser.RULE_quantifiedExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.FORALL:
	            this.state = 1500;
	            this.match(acmeParser.FORALL);
	            break;
	        case acmeParser.EXISTS:
	            this.state = 1501;
	            this.match(acmeParser.EXISTS);
	            this.state = 1503;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.UNIQUE) {
	                this.state = 1502;
	                this.match(acmeParser.UNIQUE);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1507;
	        this.variableSetDeclaration();
	        this.state = 1512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.COMMA) {
	            this.state = 1508;
	            this.match(acmeParser.COMMA);
	            this.state = 1509;
	            this.variableSetDeclaration();
	            this.state = 1514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1515;
	        this.match(acmeParser.BIT_OR);
	        this.state = 1516;
	        this.designRuleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinctVariableSetDeclaration() {
	    let localctx = new DistinctVariableSetDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, acmeParser.RULE_distinctVariableSetDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.match(acmeParser.DISTINCT);
	        this.state = 1519;
	        this.identifier();
	        this.state = 1524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===acmeParser.COMMA) {
	            this.state = 1520;
	            this.match(acmeParser.COMMA);
	            this.state = 1521;
	            this.identifier();
	            this.state = 1526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE) {
	            this.state = 1527;
	            _la = this._input.LA(1);
	            if(!(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1528;
	            this.acmeTypeRef();
	        }

	        this.state = 1531;
	        this.match(acmeParser.IN);
	        this.state = 1534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.COLLECT:
	        case acmeParser.LBRACE:
	        case acmeParser.SELECT:
	        case acmeParser.SLASH:
	            this.state = 1532;
	            this.setExpression();
	            break;
	        case acmeParser.IDENTIFIER:
	            this.state = 1533;
	            this.reference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableSetDeclaration() {
	    let localctx = new VariableSetDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, acmeParser.RULE_variableSetDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.DISTINCT:
	            this.state = 1536;
	            this.distinctVariableSetDeclaration();
	            break;
	        case acmeParser.IDENTIFIER:
	            this.state = 1537;
	            this.identifier();
	            this.state = 1542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1538;
	                this.match(acmeParser.COMMA);
	                this.state = 1539;
	                this.identifier();
	                this.state = 1544;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE) {
	                this.state = 1545;
	                _la = this._input.LA(1);
	                if(!(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1546;
	                this.acmeTypeRef();
	            }

	            this.state = 1549;
	            this.match(acmeParser.IN);
	            this.state = 1552;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.COLLECT:
	            case acmeParser.LBRACE:
	            case acmeParser.SELECT:
	            case acmeParser.SLASH:
	                this.state = 1550;
	                this.setExpression();
	                break;
	            case acmeParser.IDENTIFIER:
	                this.state = 1551;
	                this.reference();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceExpression() {
	    let localctx = new SequenceExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, acmeParser.RULE_sequenceExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1556;
	        this.match(acmeParser.LANGLE);
	        this.state = 1557;
	        this.pathExpression();
	        this.state = 1558;
	        this.match(acmeParser.RANGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpression() {
	    let localctx = new SetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, acmeParser.RULE_setExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1560;
	            this.literalSet();
	            break;

	        case 2:
	            this.state = 1561;
	            this.setConstructor();
	            break;

	        case 3:
	            this.state = 1562;
	            this.pathExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpression() {
	    let localctx = new PathExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, acmeParser.RULE_pathExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.match(acmeParser.SLASH);
	        this.state = 1566;
	        this.reference();
	        this.state = 1569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE) {
	            this.state = 1567;
	            _la = this._input.LA(1);
	            if(!(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1568;
	            this.acmeTypeRef();
	        }

	        this.state = 1575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.LBRACKET) {
	            this.state = 1571;
	            this.match(acmeParser.LBRACKET);
	            this.state = 1572;
	            this.designRuleExpression();
	            this.state = 1573;
	            this.match(acmeParser.RBRACKET);
	        }

	        this.state = 1581;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1577;
	                this.match(acmeParser.SLASH);
	                this.state = 1578;
	                this.pathExpressionContinuation(); 
	            }
	            this.state = 1583;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpressionContinuation() {
	    let localctx = new PathExpressionContinuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, acmeParser.RULE_pathExpressionContinuation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1606;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.ATTACHEDPORTS:
	        case acmeParser.ATTACHEDROLES:
	        case acmeParser.COMPONENTS:
	        case acmeParser.CONNECTORS:
	        case acmeParser.GROUPS:
	        case acmeParser.MEMBERS:
	        case acmeParser.PORTS:
	        case acmeParser.PROPERTIES:
	        case acmeParser.REPRESENTATIONS:
	        case acmeParser.ROLES:
	        case acmeParser.TYPE:
	            this.state = 1584;
	            this.setReference();
	            this.state = 1587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE) {
	                this.state = 1585;
	                _la = this._input.LA(1);
	                if(!(_la===acmeParser.COLON || _la===acmeParser.SET_DECLARE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1586;
	                this.acmeTypeRef();
	            }

	            this.state = 1593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.LBRACKET) {
	                this.state = 1589;
	                this.match(acmeParser.LBRACKET);
	                this.state = 1590;
	                this.designRuleExpression();
	                this.state = 1591;
	                this.match(acmeParser.RBRACKET);
	            }

	            this.state = 1599;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1595;
	                    this.match(acmeParser.SLASH);
	                    this.state = 1596;
	                    this.pathExpressionContinuation(); 
	                }
	                this.state = 1601;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
	            }

	            break;
	        case acmeParser.ELLIPSIS:
	        case acmeParser.IDENTIFIER:
	            this.state = 1603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.ELLIPSIS) {
	                this.state = 1602;
	                this.match(acmeParser.ELLIPSIS);
	            }

	            this.state = 1605;
	            this.reference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalSet() {
	    let localctx = new LiteralSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, acmeParser.RULE_literalSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1608;
	            this.match(acmeParser.LBRACE);
	            this.state = 1609;
	            this.match(acmeParser.RBRACE);
	            break;

	        case 2:
	            this.state = 1610;
	            this.match(acmeParser.LBRACE);
	            this.state = 1613;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.COMPONENT:
	            case acmeParser.CONNECTOR:
	            case acmeParser.DOUBLE:
	            case acmeParser.ELEMENT:
	            case acmeParser.ENUM:
	            case acmeParser.FLOAT:
	            case acmeParser.GROUP:
	            case acmeParser.INT:
	            case acmeParser.PORT:
	            case acmeParser.PROPERTY:
	            case acmeParser.RECORD:
	            case acmeParser.ROLE:
	            case acmeParser.SEQUENCE:
	            case acmeParser.SET:
	            case acmeParser.STRING:
	            case acmeParser.SYSTEM:
	            case acmeParser.TRUE:
	            case acmeParser.FALSE:
	            case acmeParser.BOOLEAN:
	            case acmeParser.FLOATING_POINT_LITERAL:
	            case acmeParser.INTEGER_LITERAL:
	            case acmeParser.STRING_LITERAL:
	                this.state = 1611;
	                this.literalConstant();
	                break;
	            case acmeParser.IDENTIFIER:
	                this.state = 1612;
	                this.reference();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1615;
	                this.match(acmeParser.COMMA);
	                this.state = 1618;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.COMPONENT:
	                case acmeParser.CONNECTOR:
	                case acmeParser.DOUBLE:
	                case acmeParser.ELEMENT:
	                case acmeParser.ENUM:
	                case acmeParser.FLOAT:
	                case acmeParser.GROUP:
	                case acmeParser.INT:
	                case acmeParser.PORT:
	                case acmeParser.PROPERTY:
	                case acmeParser.RECORD:
	                case acmeParser.ROLE:
	                case acmeParser.SEQUENCE:
	                case acmeParser.SET:
	                case acmeParser.STRING:
	                case acmeParser.SYSTEM:
	                case acmeParser.TRUE:
	                case acmeParser.FALSE:
	                case acmeParser.BOOLEAN:
	                case acmeParser.FLOATING_POINT_LITERAL:
	                case acmeParser.INTEGER_LITERAL:
	                case acmeParser.STRING_LITERAL:
	                    this.state = 1616;
	                    this.literalConstant();
	                    break;
	                case acmeParser.IDENTIFIER:
	                    this.state = 1617;
	                    this.reference();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1624;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1625;
	            this.match(acmeParser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalSequence() {
	    let localctx = new LiteralSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, acmeParser.RULE_literalSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1629;
	            this.match(acmeParser.LANGLE);
	            this.state = 1630;
	            this.match(acmeParser.RANGLE);
	            break;

	        case 2:
	            this.state = 1631;
	            this.match(acmeParser.LANGLE);
	            this.state = 1634;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.COMPONENT:
	            case acmeParser.CONNECTOR:
	            case acmeParser.DOUBLE:
	            case acmeParser.ELEMENT:
	            case acmeParser.ENUM:
	            case acmeParser.FLOAT:
	            case acmeParser.GROUP:
	            case acmeParser.INT:
	            case acmeParser.PORT:
	            case acmeParser.PROPERTY:
	            case acmeParser.RECORD:
	            case acmeParser.ROLE:
	            case acmeParser.SEQUENCE:
	            case acmeParser.SET:
	            case acmeParser.STRING:
	            case acmeParser.SYSTEM:
	            case acmeParser.TRUE:
	            case acmeParser.FALSE:
	            case acmeParser.BOOLEAN:
	            case acmeParser.FLOATING_POINT_LITERAL:
	            case acmeParser.INTEGER_LITERAL:
	            case acmeParser.STRING_LITERAL:
	                this.state = 1632;
	                this.literalConstant();
	                break;
	            case acmeParser.IDENTIFIER:
	                this.state = 1633;
	                this.reference();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===acmeParser.COMMA) {
	                this.state = 1636;
	                this.match(acmeParser.COMMA);
	                this.state = 1639;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case acmeParser.COMPONENT:
	                case acmeParser.CONNECTOR:
	                case acmeParser.DOUBLE:
	                case acmeParser.ELEMENT:
	                case acmeParser.ENUM:
	                case acmeParser.FLOAT:
	                case acmeParser.GROUP:
	                case acmeParser.INT:
	                case acmeParser.PORT:
	                case acmeParser.PROPERTY:
	                case acmeParser.RECORD:
	                case acmeParser.ROLE:
	                case acmeParser.SEQUENCE:
	                case acmeParser.SET:
	                case acmeParser.STRING:
	                case acmeParser.SYSTEM:
	                case acmeParser.TRUE:
	                case acmeParser.FALSE:
	                case acmeParser.BOOLEAN:
	                case acmeParser.FLOATING_POINT_LITERAL:
	                case acmeParser.INTEGER_LITERAL:
	                case acmeParser.STRING_LITERAL:
	                    this.state = 1637;
	                    this.literalConstant();
	                    break;
	                case acmeParser.IDENTIFIER:
	                    this.state = 1638;
	                    this.reference();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1645;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1646;
	            this.match(acmeParser.RANGLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalRecordEntry() {
	    let localctx = new LiteralRecordEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, acmeParser.RULE_literalRecordEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1650;
	        this.identifier();
	        this.state = 1653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.COLON) {
	            this.state = 1651;
	            this.match(acmeParser.COLON);
	            this.state = 1652;
	            this.acmePropertyTypeRef();
	        }

	        this.state = 1655;
	        this.match(acmeParser.ASSIGN);
	        this.state = 1656;
	        this.literalConstant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalRecord() {
	    let localctx = new LiteralRecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, acmeParser.RULE_literalRecord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1658;
	        this.match(acmeParser.LBRACKET);
	        this.state = 1670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===acmeParser.IDENTIFIER) {
	            this.state = 1659;
	            this.literalRecordEntry();
	            this.state = 1664;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,245,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1660;
	                    this.match(acmeParser.SEMICOLON);
	                    this.state = 1661;
	                    this.literalRecordEntry(); 
	                }
	                this.state = 1666;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,245,this._ctx);
	            }

	            this.state = 1668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.SEMICOLON) {
	                this.state = 1667;
	                this.match(acmeParser.SEMICOLON);
	            }

	        }

	        this.state = 1672;
	        this.match(acmeParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setConstructor() {
	    let localctx = new SetConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, acmeParser.RULE_setConstructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.LBRACE) {
	                this.state = 1674;
	                this.match(acmeParser.LBRACE);
	            }

	            this.state = 1677;
	            this.match(acmeParser.SELECT);
	            this.state = 1678;
	            this.variableSetDeclaration();
	            this.state = 1679;
	            this.match(acmeParser.BIT_OR);
	            this.state = 1680;
	            this.designRuleExpression();
	            this.state = 1682;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	            if(la_===1) {
	                this.state = 1681;
	                this.match(acmeParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.state = 1685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===acmeParser.LBRACE) {
	                this.state = 1684;
	                this.match(acmeParser.LBRACE);
	            }

	            this.state = 1687;
	            this.match(acmeParser.COLLECT);
	            this.state = 1688;
	            this.reference();
	            this.state = 1689;
	            this.match(acmeParser.COLON);
	            this.state = 1690;
	            this.acmeTypeRef();
	            this.state = 1691;
	            this.match(acmeParser.IN);
	            this.state = 1694;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case acmeParser.COLLECT:
	            case acmeParser.LBRACE:
	            case acmeParser.SELECT:
	            case acmeParser.SLASH:
	                this.state = 1692;
	                this.setExpression();
	                break;
	            case acmeParser.IDENTIFIER:
	                this.state = 1693;
	                this.reference();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1696;
	            this.match(acmeParser.BIT_OR);
	            this.state = 1697;
	            this.designRuleExpression();
	            this.state = 1699;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 1698;
	                this.match(acmeParser.RBRACE);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acmeTypeRef() {
	    let localctx = new AcmeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, acmeParser.RULE_acmeTypeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case acmeParser.SYSTEM:
	            this.state = 1703;
	            this.match(acmeParser.SYSTEM);
	            break;
	        case acmeParser.COMPONENT:
	            this.state = 1704;
	            this.match(acmeParser.COMPONENT);
	            break;
	        case acmeParser.GROUP:
	            this.state = 1705;
	            this.match(acmeParser.GROUP);
	            break;
	        case acmeParser.CONNECTOR:
	            this.state = 1706;
	            this.match(acmeParser.CONNECTOR);
	            break;
	        case acmeParser.PORT:
	            this.state = 1707;
	            this.match(acmeParser.PORT);
	            break;
	        case acmeParser.ROLE:
	            this.state = 1708;
	            this.match(acmeParser.ROLE);
	            break;
	        case acmeParser.PROPERTY:
	            this.state = 1709;
	            this.match(acmeParser.PROPERTY);
	            break;
	        case acmeParser.ELEMENT:
	            this.state = 1710;
	            this.match(acmeParser.ELEMENT);
	            break;
	        case acmeParser.TYPE:
	            this.state = 1711;
	            this.match(acmeParser.TYPE);
	            break;
	        case acmeParser.REPRESENTATION:
	            this.state = 1712;
	            this.match(acmeParser.REPRESENTATION);
	            break;
	        case acmeParser.IDENTIFIER:
	            this.state = 1713;
	            this.reference();
	            break;
	        case acmeParser.ANY:
	        case acmeParser.DOUBLE:
	        case acmeParser.ENUM:
	        case acmeParser.FLOAT:
	        case acmeParser.INT:
	        case acmeParser.RECORD:
	        case acmeParser.SEQUENCE:
	        case acmeParser.SET:
	        case acmeParser.STRING:
	        case acmeParser.BOOLEAN:
	            this.state = 1714;
	            this.acmePropertyTypeStructure();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

acmeParser.EOF = antlr4.Token.EOF;
acmeParser.T__0 = 1;
acmeParser.T__1 = 2;
acmeParser.T__2 = 3;
acmeParser.ABSTRACT = 4;
acmeParser.ANALYSIS = 5;
acmeParser.AND = 6;
acmeParser.ANY = 7;
acmeParser.ASSIGN = 8;
acmeParser.ATTACHMENT = 9;
acmeParser.ATTACHMENTS = 10;
acmeParser.ATTACHEDPORTS = 11;
acmeParser.ATTACHEDROLES = 12;
acmeParser.BANG = 13;
acmeParser.BINDINGS = 14;
acmeParser.COLON = 15;
acmeParser.COMMA = 16;
acmeParser.COLLECT = 17;
acmeParser.COMPONENT = 18;
acmeParser.COMPONENTS = 19;
acmeParser.CONNECTOR = 20;
acmeParser.CONTAINASSIGN = 21;
acmeParser.CONNECTORS = 22;
acmeParser.DESIGN = 23;
acmeParser.DISTINCT = 24;
acmeParser.DOT = 25;
acmeParser.DOUBLE = 26;
acmeParser.ELEMENT = 27;
acmeParser.ENUM = 28;
acmeParser.EXTENDED = 29;
acmeParser.EXTENDS = 30;
acmeParser.EXTERNAL = 31;
acmeParser.EXISTS = 32;
acmeParser.ELLIPSIS = 33;
acmeParser.EQ = 34;
acmeParser.FAMILY = 35;
acmeParser.FINAL = 36;
acmeParser.FORALL = 37;
acmeParser.FLOAT = 38;
acmeParser.GROUP = 39;
acmeParser.GROUPS = 40;
acmeParser.GE = 41;
acmeParser.HEURISTIC = 42;
acmeParser.IFF = 43;
acmeParser.IMPORT = 44;
acmeParser.IN = 45;
acmeParser.INT = 46;
acmeParser.INVARIANT = 47;
acmeParser.IMPLIES = 48;
acmeParser.LBRACE = 49;
acmeParser.RBRACE = 50;
acmeParser.LBRACKET = 51;
acmeParser.RBRACKET = 52;
acmeParser.LPAREN = 53;
acmeParser.RPAREN = 54;
acmeParser.LANGLE = 55;
acmeParser.RANGLE = 56;
acmeParser.LE = 57;
acmeParser.NE = 58;
acmeParser.NEW = 59;
acmeParser.MEMBERS = 60;
acmeParser.MINUS = 61;
acmeParser.OR = 62;
acmeParser.PATHSEPARATOR = 63;
acmeParser.PUBLIC = 64;
acmeParser.PRIVATE = 65;
acmeParser.POWER = 66;
acmeParser.PLUS = 67;
acmeParser.PORT = 68;
acmeParser.PORTS = 69;
acmeParser.PROPERTY = 70;
acmeParser.PROPERTIES = 71;
acmeParser.PROPBEGIN = 72;
acmeParser.PROPEND = 73;
acmeParser.RECORD = 74;
acmeParser.REPRESENTATION = 75;
acmeParser.REM = 76;
acmeParser.REPRESENTATIONS = 77;
acmeParser.ROLE = 78;
acmeParser.RULE = 79;
acmeParser.ROLES = 80;
acmeParser.SEQUENCE = 81;
acmeParser.SELECT = 82;
acmeParser.SEMICOLON = 83;
acmeParser.SET = 84;
acmeParser.SET_DECLARE = 85;
acmeParser.SLASH = 86;
acmeParser.STAR = 87;
acmeParser.STRING = 88;
acmeParser.STYLE = 89;
acmeParser.SYSTEM = 90;
acmeParser.TO = 91;
acmeParser.TYPE = 92;
acmeParser.UNIQUE = 93;
acmeParser.WITH = 94;
acmeParser.VIEW = 95;
acmeParser.BIT_OR = 96;
acmeParser.TRUE = 97;
acmeParser.FALSE = 98;
acmeParser.BOOLEAN = 99;
acmeParser.FLOATING_POINT_LITERAL = 100;
acmeParser.INTEGER_LITERAL = 101;
acmeParser.STRING_LITERAL = 102;
acmeParser.IDENTIFIER = 103;
acmeParser.LINE_COMMENT = 104;
acmeParser.BLOCK_COMMENT = 105;
acmeParser.WS = 106;

acmeParser.RULE_acmeCompUnit = 0;
acmeParser.RULE_acmeImportDeclaration = 1;
acmeParser.RULE_stringLiteral = 2;
acmeParser.RULE_filename = 3;
acmeParser.RULE_identifier = 4;
acmeParser.RULE_codeLiteral = 5;
acmeParser.RULE_acmeFamilyDeclaration = 6;
acmeParser.RULE_acmeFamilyBody = 7;
acmeParser.RULE_acmeSystemDeclaration = 8;
acmeParser.RULE_acmeSystemBody = 9;
acmeParser.RULE_acmeDesignDeclaration = 10;
acmeParser.RULE_acmeComponentTypeRef = 11;
acmeParser.RULE_acmeComponentInstantiatedTypeRef = 12;
acmeParser.RULE_acmeConnectorTypeRef = 13;
acmeParser.RULE_acmeConnectorInstantiatedTypeRef = 14;
acmeParser.RULE_acmePortTypeRef = 15;
acmeParser.RULE_acmePortInstantiatedTypeRef = 16;
acmeParser.RULE_acmeGroupTypeRef = 17;
acmeParser.RULE_acmeGroupInstantiatedTypeRef = 18;
acmeParser.RULE_acmeRoleTypeRef = 19;
acmeParser.RULE_acmeRoleInstantiatedTypeRef = 20;
acmeParser.RULE_acmeViewTypeRef = 21;
acmeParser.RULE_acmeViewInstantiatedTypeRef = 22;
acmeParser.RULE_acmeFamilyRef = 23;
acmeParser.RULE_acmeFamilyInstantiationRef = 24;
acmeParser.RULE_acmeElementTypeRef = 25;
acmeParser.RULE_acmePropertyTypeDeclarationRef = 26;
acmeParser.RULE_acmeInstanceRef = 27;
acmeParser.RULE_acmeGenericElementTypeDeclaration = 28;
acmeParser.RULE_acmeGenericElementBody = 29;
acmeParser.RULE_acmeGroupTypeDeclaration = 30;
acmeParser.RULE_acmeGroupDeclaration = 31;
acmeParser.RULE_acmeGroupBody = 32;
acmeParser.RULE_acmeMembersBlock = 33;
acmeParser.RULE_acmePortTypeDeclaration = 34;
acmeParser.RULE_acmePortDeclaration = 35;
acmeParser.RULE_acmePortBody = 36;
acmeParser.RULE_acmeRoleTypeDeclaration = 37;
acmeParser.RULE_acmeRoleDeclaration = 38;
acmeParser.RULE_acmeRoleBody = 39;
acmeParser.RULE_acmeComponentTypeDeclaration = 40;
acmeParser.RULE_acmeComponentDeclaration = 41;
acmeParser.RULE_acmeComponentBody = 42;
acmeParser.RULE_acmeConnectorTypeDeclaration = 43;
acmeParser.RULE_acmeConnectorDeclaration = 44;
acmeParser.RULE_acmeConnectorBody = 45;
acmeParser.RULE_acmeRepresentationDeclaration = 46;
acmeParser.RULE_acmeBindingsMapDeclaration = 47;
acmeParser.RULE_acmeBindingDeclaration = 48;
acmeParser.RULE_acmeAttachmentDeclaration = 49;
acmeParser.RULE_acmePropertyDeclaration = 50;
acmeParser.RULE_acmePropertyValueDeclaration = 51;
acmeParser.RULE_enumidentifier = 52;
acmeParser.RULE_acmePropertyElement = 53;
acmeParser.RULE_acmePropertyCompoundElement = 54;
acmeParser.RULE_acmePropertySet = 55;
acmeParser.RULE_acmePropertyRecordEntry = 56;
acmeParser.RULE_acmePropertyRecord = 57;
acmeParser.RULE_acmePropertySequence = 58;
acmeParser.RULE_acmePropertyTypeRecord = 59;
acmeParser.RULE_acmePropertyTypeSet = 60;
acmeParser.RULE_acmePropertyTypeSequence = 61;
acmeParser.RULE_acmePropertyTypeEnum = 62;
acmeParser.RULE_acmePropertyRecordFieldDescription = 63;
acmeParser.RULE_acmePropertyTypeRef = 64;
acmeParser.RULE_acmePropertyTypeStructure = 65;
acmeParser.RULE_acmePropertyTypeDeclaration = 66;
acmeParser.RULE_acmePropertyBlockEntry = 67;
acmeParser.RULE_acmePropertyBlock = 68;
acmeParser.RULE_acmePropertyTypeInt = 69;
acmeParser.RULE_acmePropertyTypeAny = 70;
acmeParser.RULE_acmePropertyTypeFloat = 71;
acmeParser.RULE_acmePropertyTypeDouble = 72;
acmeParser.RULE_acmePropertyTypeString = 73;
acmeParser.RULE_acmePropertyTypeBoolean = 74;
acmeParser.RULE_acmeViewDeclaration = 75;
acmeParser.RULE_acmeViewTypeDeclaration = 76;
acmeParser.RULE_acmeViewBody = 77;
acmeParser.RULE_designRule = 78;
acmeParser.RULE_acmeDesignAnalysisDeclaration = 79;
acmeParser.RULE_formalParam = 80;
acmeParser.RULE_terminatedDesignRuleExpression = 81;
acmeParser.RULE_designRuleExpression = 82;
acmeParser.RULE_aSTDRImpliesExpression = 83;
acmeParser.RULE_dRIffExpression = 84;
acmeParser.RULE_dRAndExpression = 85;
acmeParser.RULE_dRNegateExpression = 86;
acmeParser.RULE_dREqualityExpression = 87;
acmeParser.RULE_dRRelationalExpression = 88;
acmeParser.RULE_dRAdditiveExpression = 89;
acmeParser.RULE_dRMultiplicativeExpression = 90;
acmeParser.RULE_dRNegativeExpression = 91;
acmeParser.RULE_primitiveExpression = 92;
acmeParser.RULE_parentheticalExpression = 93;
acmeParser.RULE_reference = 94;
acmeParser.RULE_setReference = 95;
acmeParser.RULE_actualParams = 96;
acmeParser.RULE_literalConstant = 97;
acmeParser.RULE_quantifiedExpression = 98;
acmeParser.RULE_distinctVariableSetDeclaration = 99;
acmeParser.RULE_variableSetDeclaration = 100;
acmeParser.RULE_sequenceExpression = 101;
acmeParser.RULE_setExpression = 102;
acmeParser.RULE_pathExpression = 103;
acmeParser.RULE_pathExpressionContinuation = 104;
acmeParser.RULE_literalSet = 105;
acmeParser.RULE_literalSequence = 106;
acmeParser.RULE_literalRecordEntry = 107;
acmeParser.RULE_literalRecord = 108;
acmeParser.RULE_setConstructor = 109;
acmeParser.RULE_acmeTypeRef = 110;

class AcmeCompUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeCompUnit;
    }

	acmeImportDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeImportDeclarationContext,i);
	    }
	};

	acmeSystemDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeSystemDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeSystemDeclarationContext,i);
	    }
	};

	acmeFamilyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeFamilyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeFamilyDeclarationContext,i);
	    }
	};

	acmeDesignDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeDesignDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeDesignDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeCompUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeCompUnit(this);
		}
	}


}



class AcmeImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(acmeParser.IMPORT, 0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	filename() {
	    return this.getTypedRuleContext(FilenameContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeImportDeclaration(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_stringLiteral;
    }

	STRING_LITERAL() {
	    return this.getToken(acmeParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class FilenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_filename;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.IDENTIFIER);
	    } else {
	        return this.getToken(acmeParser.IDENTIFIER, i);
	    }
	};


	REM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.REM);
	    } else {
	        return this.getToken(acmeParser.REM, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.DOT);
	    } else {
	        return this.getToken(acmeParser.DOT, i);
	    }
	};


	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COLON);
	    } else {
	        return this.getToken(acmeParser.COLON, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.MINUS);
	    } else {
	        return this.getToken(acmeParser.MINUS, i);
	    }
	};


	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.PLUS);
	    } else {
	        return this.getToken(acmeParser.PLUS, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SLASH);
	    } else {
	        return this.getToken(acmeParser.SLASH, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterFilename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitFilename(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(acmeParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class CodeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_codeLiteral;
    }

	STRING_LITERAL() {
	    return this.getToken(acmeParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterCodeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitCodeLiteral(this);
		}
	}


}



class AcmeFamilyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeFamilyDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FAMILY() {
	    return this.getToken(acmeParser.FAMILY, 0);
	};

	STYLE() {
	    return this.getToken(acmeParser.STYLE, 0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeFamilyBody() {
	    return this.getTypedRuleContext(AcmeFamilyBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeFamilyRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeFamilyRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeFamilyRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeFamilyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeFamilyDeclaration(this);
		}
	}


}



class AcmeFamilyBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeFamilyBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmeDesignAnalysisDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeDesignAnalysisDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeDesignAnalysisDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	acmePortDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortDeclarationContext,i);
	    }
	};

	acmeRoleDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleDeclarationContext,i);
	    }
	};

	acmeComponentDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentDeclarationContext,i);
	    }
	};

	acmeConnectorDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorDeclarationContext,i);
	    }
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	acmeGroupDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupDeclarationContext,i);
	    }
	};

	acmeAttachmentDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeAttachmentDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeAttachmentDeclarationContext,i);
	    }
	};

	acmePortTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortTypeDeclarationContext,i);
	    }
	};

	acmeRoleTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleTypeDeclarationContext,i);
	    }
	};

	acmeComponentTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentTypeDeclarationContext,i);
	    }
	};

	acmeConnectorTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorTypeDeclarationContext,i);
	    }
	};

	acmeGenericElementTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGenericElementTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGenericElementTypeDeclarationContext,i);
	    }
	};

	acmePropertyTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyTypeDeclarationContext,i);
	    }
	};

	acmeGroupTypeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupTypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupTypeDeclarationContext,i);
	    }
	};

	PUBLIC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.PUBLIC);
	    } else {
	        return this.getToken(acmeParser.PUBLIC, i);
	    }
	};


	PRIVATE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.PRIVATE);
	    } else {
	        return this.getToken(acmeParser.PRIVATE, i);
	    }
	};


	FINAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.FINAL);
	    } else {
	        return this.getToken(acmeParser.FINAL, i);
	    }
	};


	ABSTRACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.ABSTRACT);
	    } else {
	        return this.getToken(acmeParser.ABSTRACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeFamilyBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeFamilyBody(this);
		}
	}


}



class AcmeSystemDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeSystemDeclaration;
    }

	SYSTEM() {
	    return this.getToken(acmeParser.SYSTEM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeFamilyRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeFamilyRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeFamilyRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeSystemBody() {
	    return this.getTypedRuleContext(AcmeSystemBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeFamilyInstantiationRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeFamilyInstantiationRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeFamilyInstantiationRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeSystemDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeSystemDeclaration(this);
		}
	}


}



class AcmeSystemBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeSystemBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	acmeComponentDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentDeclarationContext,i);
	    }
	};

	acmeConnectorDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorDeclarationContext,i);
	    }
	};

	acmeAttachmentDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeAttachmentDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeAttachmentDeclarationContext,i);
	    }
	};

	acmeGroupDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeSystemBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeSystemBody(this);
		}
	}


}



class AcmeDesignDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeDesignDeclaration;
    }

	DESIGN() {
	    return this.getToken(acmeParser.DESIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeDesignDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeDesignDeclaration(this);
		}
	}


}



class AcmeComponentTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeComponentTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeComponentTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeComponentTypeRef(this);
		}
	}


}



class AcmeComponentInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeComponentInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeComponentInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeComponentInstantiatedTypeRef(this);
		}
	}


}



class AcmeConnectorTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeConnectorTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeConnectorTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeConnectorTypeRef(this);
		}
	}


}



class AcmeConnectorInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeConnectorInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeConnectorInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeConnectorInstantiatedTypeRef(this);
		}
	}


}



class AcmePortTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePortTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePortTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePortTypeRef(this);
		}
	}


}



class AcmePortInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePortInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePortInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePortInstantiatedTypeRef(this);
		}
	}


}



class AcmeGroupTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGroupTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGroupTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGroupTypeRef(this);
		}
	}


}



class AcmeGroupInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGroupInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGroupInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGroupInstantiatedTypeRef(this);
		}
	}


}



class AcmeRoleTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRoleTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRoleTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRoleTypeRef(this);
		}
	}


}



class AcmeRoleInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRoleInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRoleInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRoleInstantiatedTypeRef(this);
		}
	}


}



class AcmeViewTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeViewTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeViewTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeViewTypeRef(this);
		}
	}


}



class AcmeViewInstantiatedTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeViewInstantiatedTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeViewInstantiatedTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeViewInstantiatedTypeRef(this);
		}
	}


}



class AcmeFamilyRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeFamilyRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeFamilyRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeFamilyRef(this);
		}
	}


}



class AcmeFamilyInstantiationRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeFamilyInstantiationRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeFamilyInstantiationRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeFamilyInstantiationRef(this);
		}
	}


}



class AcmeElementTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeElementTypeRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeElementTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeElementTypeRef(this);
		}
	}


}



class AcmePropertyTypeDeclarationRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeDeclarationRef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(acmeParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeDeclarationRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeDeclarationRef(this);
		}
	}


}



class AcmeInstanceRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeInstanceRef;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.IDENTIFIER);
	    } else {
	        return this.getToken(acmeParser.IDENTIFIER, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.DOT);
	    } else {
	        return this.getToken(acmeParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeInstanceRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeInstanceRef(this);
		}
	}


}



class AcmeGenericElementTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGenericElementTypeDeclaration;
    }

	ELEMENT() {
	    return this.getToken(acmeParser.ELEMENT, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeGenericElementBody() {
	    return this.getTypedRuleContext(AcmeGenericElementBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeElementTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeElementTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeElementTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGenericElementTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGenericElementTypeDeclaration(this);
		}
	}


}



class AcmeGenericElementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGenericElementBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGenericElementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGenericElementBody(this);
		}
	}


}



class AcmeGroupTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGroupTypeDeclaration;
    }

	GROUP() {
	    return this.getToken(acmeParser.GROUP, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeGroupBody() {
	    return this.getTypedRuleContext(AcmeGroupBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeGroupTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGroupTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGroupTypeDeclaration(this);
		}
	}


}



class AcmeGroupDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGroupDeclaration;
    }

	GROUP() {
	    return this.getToken(acmeParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeGroupTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupTypeRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeGroupBody() {
	    return this.getTypedRuleContext(AcmeGroupBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeGroupInstantiatedTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeGroupInstantiatedTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeGroupInstantiatedTypeRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGroupDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGroupDeclaration(this);
		}
	}


}



class AcmeGroupBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeGroupBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmeMembersBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeMembersBlockContext);
	    } else {
	        return this.getTypedRuleContext(AcmeMembersBlockContext,i);
	    }
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeGroupBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeGroupBody(this);
		}
	}


}



class AcmeMembersBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeMembersBlock;
    }

	MEMBERS() {
	    return this.getToken(acmeParser.MEMBERS, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmeInstanceRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeInstanceRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeInstanceRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeMembersBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeMembersBlock(this);
		}
	}


}



class AcmePortTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePortTypeDeclaration;
    }

	PORT() {
	    return this.getToken(acmeParser.PORT, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmePortBody() {
	    return this.getTypedRuleContext(AcmePortBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmePortTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePortTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePortTypeDeclaration(this);
		}
	}


}



class AcmePortDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePortDeclaration;
    }

	PORT() {
	    return this.getToken(acmeParser.PORT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePortTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortTypeRefContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmePortBody() {
	    return this.getTypedRuleContext(AcmePortBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmePortInstantiatedTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortInstantiatedTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortInstantiatedTypeRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePortDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePortDeclaration(this);
		}
	}


}



class AcmePortBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePortBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	acmeRepresentationDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRepresentationDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRepresentationDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePortBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePortBody(this);
		}
	}


}



class AcmeRoleTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRoleTypeDeclaration;
    }

	ROLE() {
	    return this.getToken(acmeParser.ROLE, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeRoleBody() {
	    return this.getTypedRuleContext(AcmeRoleBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeRoleTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRoleTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRoleTypeDeclaration(this);
		}
	}


}



class AcmeRoleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRoleDeclaration;
    }

	ROLE() {
	    return this.getToken(acmeParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeRoleTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleTypeRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeRoleBody() {
	    return this.getTypedRuleContext(AcmeRoleBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeRoleInstantiatedTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleInstantiatedTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleInstantiatedTypeRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRoleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRoleDeclaration(this);
		}
	}


}



class AcmeRoleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRoleBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	acmeRepresentationDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRepresentationDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRepresentationDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRoleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRoleBody(this);
		}
	}


}



class AcmeComponentTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeComponentTypeDeclaration;
    }

	COMPONENT() {
	    return this.getToken(acmeParser.COMPONENT, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeComponentBody() {
	    return this.getTypedRuleContext(AcmeComponentBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeComponentTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeComponentTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeComponentTypeDeclaration(this);
		}
	}


}



class AcmeComponentDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeComponentDeclaration;
    }

	COMPONENT() {
	    return this.getToken(acmeParser.COMPONENT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeComponentTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentTypeRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeComponentBody() {
	    return this.getTypedRuleContext(AcmeComponentBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeComponentInstantiatedTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeComponentInstantiatedTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeComponentInstantiatedTypeRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeComponentDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeComponentDeclaration(this);
		}
	}


}



class AcmeComponentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeComponentBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	acmePortDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePortDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePortDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	acmeRepresentationDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRepresentationDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRepresentationDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeComponentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeComponentBody(this);
		}
	}


}



class AcmeConnectorTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeConnectorTypeDeclaration;
    }

	CONNECTOR() {
	    return this.getToken(acmeParser.CONNECTOR, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeConnectorBody() {
	    return this.getTypedRuleContext(AcmeConnectorBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeConnectorTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorTypeRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeConnectorTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeConnectorTypeDeclaration(this);
		}
	}


}



class AcmeConnectorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeConnectorDeclaration;
    }

	CONNECTOR() {
	    return this.getToken(acmeParser.CONNECTOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeConnectorTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorTypeRefContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeConnectorBody() {
	    return this.getTypedRuleContext(AcmeConnectorBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeConnectorInstantiatedTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeConnectorInstantiatedTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeConnectorInstantiatedTypeRefContext,i);
	    }
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeConnectorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeConnectorDeclaration(this);
		}
	}


}



class AcmeConnectorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeConnectorBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyDeclarationContext,i);
	    }
	};

	acmeRoleDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRoleDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRoleDeclarationContext,i);
	    }
	};

	designRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleContext,i);
	    }
	};

	acmeRepresentationDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeRepresentationDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeRepresentationDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeConnectorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeConnectorBody(this);
		}
	}


}



class AcmeRepresentationDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeRepresentationDeclaration;
    }

	REPRESENTATION() {
	    return this.getToken(acmeParser.REPRESENTATION, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	acmeSystemDeclaration() {
	    return this.getTypedRuleContext(AcmeSystemDeclarationContext,0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(acmeParser.IDENTIFIER, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeBindingsMapDeclaration() {
	    return this.getTypedRuleContext(AcmeBindingsMapDeclarationContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeRepresentationDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeRepresentationDeclaration(this);
		}
	}


}



class AcmeBindingsMapDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeBindingsMapDeclaration;
    }

	BINDINGS() {
	    return this.getToken(acmeParser.BINDINGS, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmeBindingDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeBindingDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmeBindingDeclarationContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeBindingsMapDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeBindingsMapDeclaration(this);
		}
	}


}



class AcmeBindingDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeBindingDeclaration;
    }

	acmeInstanceRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeInstanceRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeInstanceRefContext,i);
	    }
	};

	TO() {
	    return this.getToken(acmeParser.TO, 0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	acmePropertyDeclaration() {
	    return this.getTypedRuleContext(AcmePropertyDeclarationContext,0);
	};

	acmePropertyBlock() {
	    return this.getTypedRuleContext(AcmePropertyBlockContext,0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeBindingDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeBindingDeclaration(this);
		}
	}


}



class AcmeAttachmentDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeAttachmentDeclaration;
    }

	ATTACHMENT() {
	    return this.getToken(acmeParser.ATTACHMENT, 0);
	};

	acmeInstanceRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmeInstanceRefContext);
	    } else {
	        return this.getTypedRuleContext(AcmeInstanceRefContext,i);
	    }
	};

	TO() {
	    return this.getToken(acmeParser.TO, 0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeAttachmentDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeAttachmentDeclaration(this);
		}
	}


}



class AcmePropertyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyDeclaration;
    }

	PROPERTY() {
	    return this.getToken(acmeParser.PROPERTY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	acmePropertyBlock() {
	    return this.getTypedRuleContext(AcmePropertyBlockContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmePropertyValueDeclaration() {
	    return this.getTypedRuleContext(AcmePropertyValueDeclarationContext,0);
	};

	CONTAINASSIGN() {
	    return this.getToken(acmeParser.CONTAINASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyDeclaration(this);
		}
	}


}



class AcmePropertyValueDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyValueDeclaration;
    }

	INTEGER_LITERAL() {
	    return this.getToken(acmeParser.INTEGER_LITERAL, 0);
	};

	FLOATING_POINT_LITERAL() {
	    return this.getToken(acmeParser.FLOATING_POINT_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(acmeParser.STRING_LITERAL, 0);
	};

	FALSE() {
	    return this.getToken(acmeParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(acmeParser.TRUE, 0);
	};

	acmePropertySet() {
	    return this.getTypedRuleContext(AcmePropertySetContext,0);
	};

	acmePropertyRecord() {
	    return this.getTypedRuleContext(AcmePropertyRecordContext,0);
	};

	acmePropertySequence() {
	    return this.getTypedRuleContext(AcmePropertySequenceContext,0);
	};

	enumidentifier() {
	    return this.getTypedRuleContext(EnumidentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyValueDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyValueDeclaration(this);
		}
	}


}



class EnumidentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_enumidentifier;
    }

	IDENTIFIER() {
	    return this.getToken(acmeParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterEnumidentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitEnumidentifier(this);
		}
	}


}



class AcmePropertyElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyElement;
    }

	acmePropertyCompoundElement() {
	    return this.getTypedRuleContext(AcmePropertyCompoundElementContext,0);
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.IDENTIFIER);
	    } else {
	        return this.getToken(acmeParser.IDENTIFIER, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.DOT);
	    } else {
	        return this.getToken(acmeParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyElement(this);
		}
	}


}



class AcmePropertyCompoundElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyCompoundElement;
    }

	acmePropertySet() {
	    return this.getTypedRuleContext(AcmePropertySetContext,0);
	};

	acmePropertyRecord() {
	    return this.getTypedRuleContext(AcmePropertyRecordContext,0);
	};

	acmePropertySequence() {
	    return this.getTypedRuleContext(AcmePropertySequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyCompoundElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyCompoundElement(this);
		}
	}


}



class AcmePropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertySet;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmePropertyValueDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyValueDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyValueDeclarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertySet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertySet(this);
		}
	}


}



class AcmePropertyRecordEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyRecordEntry;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmePropertyValueDeclaration() {
	    return this.getTypedRuleContext(AcmePropertyValueDeclarationContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyRecordEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyRecordEntry(this);
		}
	}


}



class AcmePropertyRecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyRecord;
    }

	LBRACKET() {
	    return this.getToken(acmeParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(acmeParser.RBRACKET, 0);
	};

	acmePropertyRecordEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyRecordEntryContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyRecordEntryContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SEMICOLON);
	    } else {
	        return this.getToken(acmeParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyRecord(this);
		}
	}


}



class AcmePropertySequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertySequence;
    }

	LANGLE() {
	    return this.getToken(acmeParser.LANGLE, 0);
	};

	RANGLE() {
	    return this.getToken(acmeParser.RANGLE, 0);
	};

	acmePropertyValueDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyValueDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyValueDeclarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertySequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertySequence(this);
		}
	}


}



class AcmePropertyTypeRecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeRecord;
    }

	RECORD() {
	    return this.getToken(acmeParser.RECORD, 0);
	};

	LBRACKET() {
	    return this.getToken(acmeParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(acmeParser.RBRACKET, 0);
	};

	acmePropertyRecordFieldDescription = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyRecordFieldDescriptionContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyRecordFieldDescriptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeRecord(this);
		}
	}


}



class AcmePropertyTypeSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeSet;
    }

	SET() {
	    return this.getToken(acmeParser.SET, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeSet(this);
		}
	}


}



class AcmePropertyTypeSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeSequence;
    }

	SEQUENCE() {
	    return this.getToken(acmeParser.SEQUENCE, 0);
	};

	LANGLE() {
	    return this.getToken(acmeParser.LANGLE, 0);
	};

	RANGLE() {
	    return this.getToken(acmeParser.RANGLE, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeSequence(this);
		}
	}


}



class AcmePropertyTypeEnumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeEnum;
    }

	ENUM() {
	    return this.getToken(acmeParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeEnum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeEnum(this);
		}
	}


}



class AcmePropertyRecordFieldDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyRecordFieldDescription;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyRecordFieldDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyRecordFieldDescription(this);
		}
	}


}



class AcmePropertyTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeRef;
    }

	acmePropertyTypeStructure() {
	    return this.getTypedRuleContext(AcmePropertyTypeStructureContext,0);
	};

	acmePropertyTypeDeclarationRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeDeclarationRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeRef(this);
		}
	}


}



class AcmePropertyTypeStructureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeStructure;
    }

	acmePropertyTypeAny() {
	    return this.getTypedRuleContext(AcmePropertyTypeAnyContext,0);
	};

	acmePropertyTypeInt() {
	    return this.getTypedRuleContext(AcmePropertyTypeIntContext,0);
	};

	acmePropertyTypeFloat() {
	    return this.getTypedRuleContext(AcmePropertyTypeFloatContext,0);
	};

	acmePropertyTypeDouble() {
	    return this.getTypedRuleContext(AcmePropertyTypeDoubleContext,0);
	};

	acmePropertyTypeString() {
	    return this.getTypedRuleContext(AcmePropertyTypeStringContext,0);
	};

	acmePropertyTypeBoolean() {
	    return this.getTypedRuleContext(AcmePropertyTypeBooleanContext,0);
	};

	acmePropertyTypeRecord() {
	    return this.getTypedRuleContext(AcmePropertyTypeRecordContext,0);
	};

	acmePropertyTypeSet() {
	    return this.getTypedRuleContext(AcmePropertyTypeSetContext,0);
	};

	acmePropertyTypeSequence() {
	    return this.getTypedRuleContext(AcmePropertyTypeSequenceContext,0);
	};

	acmePropertyTypeEnum() {
	    return this.getTypedRuleContext(AcmePropertyTypeEnumContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeStructure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeStructure(this);
		}
	}


}



class AcmePropertyTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeDeclaration;
    }

	PROPERTY() {
	    return this.getToken(acmeParser.PROPERTY, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmePropertyTypeInt() {
	    return this.getTypedRuleContext(AcmePropertyTypeIntContext,0);
	};

	acmePropertyTypeFloat() {
	    return this.getTypedRuleContext(AcmePropertyTypeFloatContext,0);
	};

	acmePropertyTypeDouble() {
	    return this.getTypedRuleContext(AcmePropertyTypeDoubleContext,0);
	};

	acmePropertyTypeString() {
	    return this.getTypedRuleContext(AcmePropertyTypeStringContext,0);
	};

	acmePropertyTypeBoolean() {
	    return this.getTypedRuleContext(AcmePropertyTypeBooleanContext,0);
	};

	acmePropertyTypeRecord() {
	    return this.getTypedRuleContext(AcmePropertyTypeRecordContext,0);
	};

	acmePropertyTypeSet() {
	    return this.getTypedRuleContext(AcmePropertyTypeSetContext,0);
	};

	acmePropertyTypeSequence() {
	    return this.getTypedRuleContext(AcmePropertyTypeSequenceContext,0);
	};

	acmePropertyTypeEnum() {
	    return this.getTypedRuleContext(AcmePropertyTypeEnumContext,0);
	};

	acmePropertyTypeAny() {
	    return this.getTypedRuleContext(AcmePropertyTypeAnyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeDeclaration(this);
		}
	}


}



class AcmePropertyBlockEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyBlockEntry;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmePropertyValueDeclaration() {
	    return this.getTypedRuleContext(AcmePropertyValueDeclarationContext,0);
	};

	CONTAINASSIGN() {
	    return this.getToken(acmeParser.CONTAINASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyBlockEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyBlockEntry(this);
		}
	}


}



class AcmePropertyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyBlock;
    }

	PROPBEGIN() {
	    return this.getToken(acmeParser.PROPBEGIN, 0);
	};

	PROPEND() {
	    return this.getToken(acmeParser.PROPEND, 0);
	};

	acmePropertyBlockEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AcmePropertyBlockEntryContext);
	    } else {
	        return this.getTypedRuleContext(AcmePropertyBlockEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyBlock(this);
		}
	}


}



class AcmePropertyTypeIntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeInt;
    }

	INT() {
	    return this.getToken(acmeParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeInt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeInt(this);
		}
	}


}



class AcmePropertyTypeAnyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeAny;
    }

	ANY() {
	    return this.getToken(acmeParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeAny(this);
		}
	}


}



class AcmePropertyTypeFloatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeFloat;
    }

	FLOAT() {
	    return this.getToken(acmeParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeFloat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeFloat(this);
		}
	}


}



class AcmePropertyTypeDoubleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeDouble;
    }

	DOUBLE() {
	    return this.getToken(acmeParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeDouble(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeDouble(this);
		}
	}


}



class AcmePropertyTypeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeString;
    }

	STRING() {
	    return this.getToken(acmeParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeString(this);
		}
	}


}



class AcmePropertyTypeBooleanContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmePropertyTypeBoolean;
    }

	BOOLEAN() {
	    return this.getToken(acmeParser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmePropertyTypeBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmePropertyTypeBoolean(this);
		}
	}


}



class AcmeViewDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeViewDeclaration;
    }

	VIEW() {
	    return this.getToken(acmeParser.VIEW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeViewTypeRef() {
	    return this.getTypedRuleContext(AcmeViewTypeRefContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeViewBody() {
	    return this.getTypedRuleContext(AcmeViewBodyContext,0);
	};

	NEW() {
	    return this.getToken(acmeParser.NEW, 0);
	};

	acmeViewInstantiatedTypeRef() {
	    return this.getTypedRuleContext(AcmeViewInstantiatedTypeRefContext,0);
	};

	EXTENDED() {
	    return this.getToken(acmeParser.EXTENDED, 0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeViewDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeViewDeclaration(this);
		}
	}


}



class AcmeViewTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeViewTypeDeclaration;
    }

	VIEW() {
	    return this.getToken(acmeParser.VIEW, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	acmeViewBody() {
	    return this.getTypedRuleContext(AcmeViewBodyContext,0);
	};

	EXTENDS() {
	    return this.getToken(acmeParser.EXTENDS, 0);
	};

	acmeViewTypeRef() {
	    return this.getTypedRuleContext(AcmeViewTypeRefContext,0);
	};

	WITH() {
	    return this.getToken(acmeParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeViewTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeViewTypeDeclaration(this);
		}
	}


}



class AcmeViewBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeViewBody;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeViewBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeViewBody(this);
		}
	}


}



class DesignRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_designRule;
    }

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	DESIGN() {
	    return this.getToken(acmeParser.DESIGN, 0);
	};

	RULE() {
	    return this.getToken(acmeParser.RULE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(acmeParser.IDENTIFIER, 0);
	};

	acmePropertyBlock() {
	    return this.getTypedRuleContext(AcmePropertyBlockContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	INVARIANT() {
	    return this.getToken(acmeParser.INVARIANT, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	HEURISTIC() {
	    return this.getToken(acmeParser.HEURISTIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDesignRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDesignRule(this);
		}
	}


}



class AcmeDesignAnalysisDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeDesignAnalysisDeclaration;
    }

	ANALYSIS() {
	    return this.getToken(acmeParser.ANALYSIS, 0);
	};

	IDENTIFIER() {
	    return this.getToken(acmeParser.IDENTIFIER, 0);
	};

	LPAREN() {
	    return this.getToken(acmeParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(acmeParser.RPAREN, 0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	EXTERNAL() {
	    return this.getToken(acmeParser.EXTERNAL, 0);
	};

	codeLiteral() {
	    return this.getTypedRuleContext(CodeLiteralContext,0);
	};

	DESIGN() {
	    return this.getToken(acmeParser.DESIGN, 0);
	};

	formalParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParamContext);
	    } else {
	        return this.getTypedRuleContext(FormalParamContext,i);
	    }
	};

	acmePropertyBlock() {
	    return this.getTypedRuleContext(AcmePropertyBlockContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.DOT);
	    } else {
	        return this.getToken(acmeParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeDesignAnalysisDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeDesignAnalysisDeclaration(this);
		}
	}


}



class FormalParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_formalParam;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterFormalParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitFormalParam(this);
		}
	}


}



class TerminatedDesignRuleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_terminatedDesignRuleExpression;
    }

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(acmeParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterTerminatedDesignRuleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitTerminatedDesignRuleExpression(this);
		}
	}


}



class DesignRuleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_designRuleExpression;
    }

	aSTDRImpliesExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ASTDRImpliesExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ASTDRImpliesExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.OR);
	    } else {
	        return this.getToken(acmeParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDesignRuleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDesignRuleExpression(this);
		}
	}


}



class ASTDRImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_aSTDRImpliesExpression;
    }

	dRIffExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRIffExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRIffExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.IMPLIES);
	    } else {
	        return this.getToken(acmeParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterASTDRImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitASTDRImpliesExpression(this);
		}
	}


}



class DRIffExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRIffExpression;
    }

	dRAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRAndExpressionContext,i);
	    }
	};

	IFF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.IFF);
	    } else {
	        return this.getToken(acmeParser.IFF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRIffExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRIffExpression(this);
		}
	}


}



class DRAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRAndExpression;
    }

	dRNegateExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRNegateExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRNegateExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.AND);
	    } else {
	        return this.getToken(acmeParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRAndExpression(this);
		}
	}


}



class DRNegateExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRNegateExpression;
    }

	BANG() {
	    return this.getToken(acmeParser.BANG, 0);
	};

	dRNegateExpression() {
	    return this.getTypedRuleContext(DRNegateExpressionContext,0);
	};

	dREqualityExpression() {
	    return this.getTypedRuleContext(DREqualityExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRNegateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRNegateExpression(this);
		}
	}


}



class DREqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dREqualityExpression;
    }

	dRRelationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRRelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRRelationalExpressionContext,i);
	    }
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.EQ);
	    } else {
	        return this.getToken(acmeParser.EQ, i);
	    }
	};


	NE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.NE);
	    } else {
	        return this.getToken(acmeParser.NE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDREqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDREqualityExpression(this);
		}
	}


}



class DRRelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRRelationalExpression;
    }

	dRAdditiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRAdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRAdditiveExpressionContext,i);
	    }
	};

	LANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.LANGLE);
	    } else {
	        return this.getToken(acmeParser.LANGLE, i);
	    }
	};


	RANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.RANGLE);
	    } else {
	        return this.getToken(acmeParser.RANGLE, i);
	    }
	};


	LE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.LE);
	    } else {
	        return this.getToken(acmeParser.LE, i);
	    }
	};


	GE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.GE);
	    } else {
	        return this.getToken(acmeParser.GE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRRelationalExpression(this);
		}
	}


}



class DRAdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRAdditiveExpression;
    }

	dRMultiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRMultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRMultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.PLUS);
	    } else {
	        return this.getToken(acmeParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.MINUS);
	    } else {
	        return this.getToken(acmeParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRAdditiveExpression(this);
		}
	}


}



class DRMultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRMultiplicativeExpression;
    }

	dRNegativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DRNegativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DRNegativeExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.STAR);
	    } else {
	        return this.getToken(acmeParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SLASH);
	    } else {
	        return this.getToken(acmeParser.SLASH, i);
	    }
	};


	REM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.REM);
	    } else {
	        return this.getToken(acmeParser.REM, i);
	    }
	};


	POWER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.POWER);
	    } else {
	        return this.getToken(acmeParser.POWER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRMultiplicativeExpression(this);
		}
	}


}



class DRNegativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_dRNegativeExpression;
    }

	MINUS() {
	    return this.getToken(acmeParser.MINUS, 0);
	};

	dRNegativeExpression() {
	    return this.getTypedRuleContext(DRNegativeExpressionContext,0);
	};

	primitiveExpression() {
	    return this.getTypedRuleContext(PrimitiveExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDRNegativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDRNegativeExpression(this);
		}
	}


}



class PrimitiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_primitiveExpression;
    }

	literalConstant() {
	    return this.getTypedRuleContext(LiteralConstantContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	parentheticalExpression() {
	    return this.getTypedRuleContext(ParentheticalExpressionContext,0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	literalSequence() {
	    return this.getTypedRuleContext(LiteralSequenceContext,0);
	};

	literalRecord() {
	    return this.getTypedRuleContext(LiteralRecordContext,0);
	};

	quantifiedExpression() {
	    return this.getTypedRuleContext(QuantifiedExpressionContext,0);
	};

	sequenceExpression() {
	    return this.getTypedRuleContext(SequenceExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterPrimitiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitPrimitiveExpression(this);
		}
	}


}



class ParentheticalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_parentheticalExpression;
    }

	LPAREN() {
	    return this.getToken(acmeParser.LPAREN, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(acmeParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterParentheticalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitParentheticalExpression(this);
		}
	}


}



class ReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_reference;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.DOT);
	    } else {
	        return this.getToken(acmeParser.DOT, i);
	    }
	};


	actualParams() {
	    return this.getTypedRuleContext(ActualParamsContext,0);
	};

	setReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetReferenceContext);
	    } else {
	        return this.getTypedRuleContext(SetReferenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitReference(this);
		}
	}


}



class SetReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_setReference;
    }

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	COMPONENTS() {
	    return this.getToken(acmeParser.COMPONENTS, 0);
	};

	CONNECTORS() {
	    return this.getToken(acmeParser.CONNECTORS, 0);
	};

	PORTS() {
	    return this.getToken(acmeParser.PORTS, 0);
	};

	ROLES() {
	    return this.getToken(acmeParser.ROLES, 0);
	};

	GROUPS() {
	    return this.getToken(acmeParser.GROUPS, 0);
	};

	MEMBERS() {
	    return this.getToken(acmeParser.MEMBERS, 0);
	};

	PROPERTIES() {
	    return this.getToken(acmeParser.PROPERTIES, 0);
	};

	REPRESENTATIONS() {
	    return this.getToken(acmeParser.REPRESENTATIONS, 0);
	};

	ATTACHEDPORTS() {
	    return this.getToken(acmeParser.ATTACHEDPORTS, 0);
	};

	ATTACHEDROLES() {
	    return this.getToken(acmeParser.ATTACHEDROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterSetReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitSetReference(this);
		}
	}


}



class ActualParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_actualParams;
    }

	LPAREN() {
	    return this.getToken(acmeParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(acmeParser.RPAREN, 0);
	};

	designRuleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignRuleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DesignRuleExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterActualParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitActualParams(this);
		}
	}


}



class LiteralConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_literalConstant;
    }

	INTEGER_LITERAL() {
	    return this.getToken(acmeParser.INTEGER_LITERAL, 0);
	};

	FLOATING_POINT_LITERAL() {
	    return this.getToken(acmeParser.FLOATING_POINT_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(acmeParser.STRING_LITERAL, 0);
	};

	TRUE() {
	    return this.getToken(acmeParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(acmeParser.FALSE, 0);
	};

	COMPONENT() {
	    return this.getToken(acmeParser.COMPONENT, 0);
	};

	GROUP() {
	    return this.getToken(acmeParser.GROUP, 0);
	};

	CONNECTOR() {
	    return this.getToken(acmeParser.CONNECTOR, 0);
	};

	PORT() {
	    return this.getToken(acmeParser.PORT, 0);
	};

	ROLE() {
	    return this.getToken(acmeParser.ROLE, 0);
	};

	SYSTEM() {
	    return this.getToken(acmeParser.SYSTEM, 0);
	};

	ELEMENT() {
	    return this.getToken(acmeParser.ELEMENT, 0);
	};

	PROPERTY() {
	    return this.getToken(acmeParser.PROPERTY, 0);
	};

	INT() {
	    return this.getToken(acmeParser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(acmeParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(acmeParser.DOUBLE, 0);
	};

	STRING() {
	    return this.getToken(acmeParser.STRING, 0);
	};

	BOOLEAN() {
	    return this.getToken(acmeParser.BOOLEAN, 0);
	};

	ENUM() {
	    return this.getToken(acmeParser.ENUM, 0);
	};

	SET() {
	    return this.getToken(acmeParser.SET, 0);
	};

	SEQUENCE() {
	    return this.getToken(acmeParser.SEQUENCE, 0);
	};

	RECORD() {
	    return this.getToken(acmeParser.RECORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterLiteralConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitLiteralConstant(this);
		}
	}


}



class QuantifiedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_quantifiedExpression;
    }

	variableSetDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableSetDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableSetDeclarationContext,i);
	    }
	};

	BIT_OR() {
	    return this.getToken(acmeParser.BIT_OR, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	FORALL() {
	    return this.getToken(acmeParser.FORALL, 0);
	};

	EXISTS() {
	    return this.getToken(acmeParser.EXISTS, 0);
	};

	UNIQUE() {
	    return this.getToken(acmeParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterQuantifiedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitQuantifiedExpression(this);
		}
	}


}



class DistinctVariableSetDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_distinctVariableSetDeclaration;
    }

	DISTINCT() {
	    return this.getToken(acmeParser.DISTINCT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(acmeParser.IN, 0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	SET_DECLARE() {
	    return this.getToken(acmeParser.SET_DECLARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterDistinctVariableSetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitDistinctVariableSetDeclaration(this);
		}
	}


}



class VariableSetDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_variableSetDeclaration;
    }

	distinctVariableSetDeclaration() {
	    return this.getTypedRuleContext(DistinctVariableSetDeclarationContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(acmeParser.IN, 0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	SET_DECLARE() {
	    return this.getToken(acmeParser.SET_DECLARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterVariableSetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitVariableSetDeclaration(this);
		}
	}


}



class SequenceExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_sequenceExpression;
    }

	LANGLE() {
	    return this.getToken(acmeParser.LANGLE, 0);
	};

	pathExpression() {
	    return this.getTypedRuleContext(PathExpressionContext,0);
	};

	RANGLE() {
	    return this.getToken(acmeParser.RANGLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterSequenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitSequenceExpression(this);
		}
	}


}



class SetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_setExpression;
    }

	literalSet() {
	    return this.getTypedRuleContext(LiteralSetContext,0);
	};

	setConstructor() {
	    return this.getTypedRuleContext(SetConstructorContext,0);
	};

	pathExpression() {
	    return this.getTypedRuleContext(PathExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterSetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitSetExpression(this);
		}
	}


}



class PathExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_pathExpression;
    }

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SLASH);
	    } else {
	        return this.getToken(acmeParser.SLASH, i);
	    }
	};


	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	LBRACKET() {
	    return this.getToken(acmeParser.LBRACKET, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	RBRACKET() {
	    return this.getToken(acmeParser.RBRACKET, 0);
	};

	pathExpressionContinuation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExpressionContinuationContext);
	    } else {
	        return this.getTypedRuleContext(PathExpressionContinuationContext,i);
	    }
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	SET_DECLARE() {
	    return this.getToken(acmeParser.SET_DECLARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterPathExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitPathExpression(this);
		}
	}


}



class PathExpressionContinuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_pathExpressionContinuation;
    }

	setReference() {
	    return this.getTypedRuleContext(SetReferenceContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	LBRACKET() {
	    return this.getToken(acmeParser.LBRACKET, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	RBRACKET() {
	    return this.getToken(acmeParser.RBRACKET, 0);
	};

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SLASH);
	    } else {
	        return this.getToken(acmeParser.SLASH, i);
	    }
	};


	pathExpressionContinuation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExpressionContinuationContext);
	    } else {
	        return this.getTypedRuleContext(PathExpressionContinuationContext,i);
	    }
	};

	ELLIPSIS() {
	    return this.getToken(acmeParser.ELLIPSIS, 0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	SET_DECLARE() {
	    return this.getToken(acmeParser.SET_DECLARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterPathExpressionContinuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitPathExpressionContinuation(this);
		}
	}


}



class LiteralSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_literalSet;
    }

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	literalConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralConstantContext);
	    } else {
	        return this.getTypedRuleContext(LiteralConstantContext,i);
	    }
	};

	reference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterLiteralSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitLiteralSet(this);
		}
	}


}



class LiteralSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_literalSequence;
    }

	LANGLE() {
	    return this.getToken(acmeParser.LANGLE, 0);
	};

	RANGLE() {
	    return this.getToken(acmeParser.RANGLE, 0);
	};

	literalConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralConstantContext);
	    } else {
	        return this.getTypedRuleContext(LiteralConstantContext,i);
	    }
	};

	reference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.COMMA);
	    } else {
	        return this.getToken(acmeParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterLiteralSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitLiteralSequence(this);
		}
	}


}



class LiteralRecordEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_literalRecordEntry;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(acmeParser.ASSIGN, 0);
	};

	literalConstant() {
	    return this.getTypedRuleContext(LiteralConstantContext,0);
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmePropertyTypeRef() {
	    return this.getTypedRuleContext(AcmePropertyTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterLiteralRecordEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitLiteralRecordEntry(this);
		}
	}


}



class LiteralRecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_literalRecord;
    }

	LBRACKET() {
	    return this.getToken(acmeParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(acmeParser.RBRACKET, 0);
	};

	literalRecordEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralRecordEntryContext);
	    } else {
	        return this.getTypedRuleContext(LiteralRecordEntryContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(acmeParser.SEMICOLON);
	    } else {
	        return this.getToken(acmeParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterLiteralRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitLiteralRecord(this);
		}
	}


}



class SetConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_setConstructor;
    }

	SELECT() {
	    return this.getToken(acmeParser.SELECT, 0);
	};

	variableSetDeclaration() {
	    return this.getTypedRuleContext(VariableSetDeclarationContext,0);
	};

	BIT_OR() {
	    return this.getToken(acmeParser.BIT_OR, 0);
	};

	designRuleExpression() {
	    return this.getTypedRuleContext(DesignRuleExpressionContext,0);
	};

	COLLECT() {
	    return this.getToken(acmeParser.COLLECT, 0);
	};

	reference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceContext,i);
	    }
	};

	COLON() {
	    return this.getToken(acmeParser.COLON, 0);
	};

	acmeTypeRef() {
	    return this.getTypedRuleContext(AcmeTypeRefContext,0);
	};

	IN() {
	    return this.getToken(acmeParser.IN, 0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	LBRACE() {
	    return this.getToken(acmeParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(acmeParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterSetConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitSetConstructor(this);
		}
	}


}



class AcmeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = acmeParser.RULE_acmeTypeRef;
    }

	SYSTEM() {
	    return this.getToken(acmeParser.SYSTEM, 0);
	};

	COMPONENT() {
	    return this.getToken(acmeParser.COMPONENT, 0);
	};

	GROUP() {
	    return this.getToken(acmeParser.GROUP, 0);
	};

	CONNECTOR() {
	    return this.getToken(acmeParser.CONNECTOR, 0);
	};

	PORT() {
	    return this.getToken(acmeParser.PORT, 0);
	};

	ROLE() {
	    return this.getToken(acmeParser.ROLE, 0);
	};

	PROPERTY() {
	    return this.getToken(acmeParser.PROPERTY, 0);
	};

	ELEMENT() {
	    return this.getToken(acmeParser.ELEMENT, 0);
	};

	TYPE() {
	    return this.getToken(acmeParser.TYPE, 0);
	};

	REPRESENTATION() {
	    return this.getToken(acmeParser.REPRESENTATION, 0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	acmePropertyTypeStructure() {
	    return this.getTypedRuleContext(AcmePropertyTypeStructureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.enterAcmeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof acmeListener ) {
	        listener.exitAcmeTypeRef(this);
		}
	}


}




acmeParser.AcmeCompUnitContext = AcmeCompUnitContext; 
acmeParser.AcmeImportDeclarationContext = AcmeImportDeclarationContext; 
acmeParser.StringLiteralContext = StringLiteralContext; 
acmeParser.FilenameContext = FilenameContext; 
acmeParser.IdentifierContext = IdentifierContext; 
acmeParser.CodeLiteralContext = CodeLiteralContext; 
acmeParser.AcmeFamilyDeclarationContext = AcmeFamilyDeclarationContext; 
acmeParser.AcmeFamilyBodyContext = AcmeFamilyBodyContext; 
acmeParser.AcmeSystemDeclarationContext = AcmeSystemDeclarationContext; 
acmeParser.AcmeSystemBodyContext = AcmeSystemBodyContext; 
acmeParser.AcmeDesignDeclarationContext = AcmeDesignDeclarationContext; 
acmeParser.AcmeComponentTypeRefContext = AcmeComponentTypeRefContext; 
acmeParser.AcmeComponentInstantiatedTypeRefContext = AcmeComponentInstantiatedTypeRefContext; 
acmeParser.AcmeConnectorTypeRefContext = AcmeConnectorTypeRefContext; 
acmeParser.AcmeConnectorInstantiatedTypeRefContext = AcmeConnectorInstantiatedTypeRefContext; 
acmeParser.AcmePortTypeRefContext = AcmePortTypeRefContext; 
acmeParser.AcmePortInstantiatedTypeRefContext = AcmePortInstantiatedTypeRefContext; 
acmeParser.AcmeGroupTypeRefContext = AcmeGroupTypeRefContext; 
acmeParser.AcmeGroupInstantiatedTypeRefContext = AcmeGroupInstantiatedTypeRefContext; 
acmeParser.AcmeRoleTypeRefContext = AcmeRoleTypeRefContext; 
acmeParser.AcmeRoleInstantiatedTypeRefContext = AcmeRoleInstantiatedTypeRefContext; 
acmeParser.AcmeViewTypeRefContext = AcmeViewTypeRefContext; 
acmeParser.AcmeViewInstantiatedTypeRefContext = AcmeViewInstantiatedTypeRefContext; 
acmeParser.AcmeFamilyRefContext = AcmeFamilyRefContext; 
acmeParser.AcmeFamilyInstantiationRefContext = AcmeFamilyInstantiationRefContext; 
acmeParser.AcmeElementTypeRefContext = AcmeElementTypeRefContext; 
acmeParser.AcmePropertyTypeDeclarationRefContext = AcmePropertyTypeDeclarationRefContext; 
acmeParser.AcmeInstanceRefContext = AcmeInstanceRefContext; 
acmeParser.AcmeGenericElementTypeDeclarationContext = AcmeGenericElementTypeDeclarationContext; 
acmeParser.AcmeGenericElementBodyContext = AcmeGenericElementBodyContext; 
acmeParser.AcmeGroupTypeDeclarationContext = AcmeGroupTypeDeclarationContext; 
acmeParser.AcmeGroupDeclarationContext = AcmeGroupDeclarationContext; 
acmeParser.AcmeGroupBodyContext = AcmeGroupBodyContext; 
acmeParser.AcmeMembersBlockContext = AcmeMembersBlockContext; 
acmeParser.AcmePortTypeDeclarationContext = AcmePortTypeDeclarationContext; 
acmeParser.AcmePortDeclarationContext = AcmePortDeclarationContext; 
acmeParser.AcmePortBodyContext = AcmePortBodyContext; 
acmeParser.AcmeRoleTypeDeclarationContext = AcmeRoleTypeDeclarationContext; 
acmeParser.AcmeRoleDeclarationContext = AcmeRoleDeclarationContext; 
acmeParser.AcmeRoleBodyContext = AcmeRoleBodyContext; 
acmeParser.AcmeComponentTypeDeclarationContext = AcmeComponentTypeDeclarationContext; 
acmeParser.AcmeComponentDeclarationContext = AcmeComponentDeclarationContext; 
acmeParser.AcmeComponentBodyContext = AcmeComponentBodyContext; 
acmeParser.AcmeConnectorTypeDeclarationContext = AcmeConnectorTypeDeclarationContext; 
acmeParser.AcmeConnectorDeclarationContext = AcmeConnectorDeclarationContext; 
acmeParser.AcmeConnectorBodyContext = AcmeConnectorBodyContext; 
acmeParser.AcmeRepresentationDeclarationContext = AcmeRepresentationDeclarationContext; 
acmeParser.AcmeBindingsMapDeclarationContext = AcmeBindingsMapDeclarationContext; 
acmeParser.AcmeBindingDeclarationContext = AcmeBindingDeclarationContext; 
acmeParser.AcmeAttachmentDeclarationContext = AcmeAttachmentDeclarationContext; 
acmeParser.AcmePropertyDeclarationContext = AcmePropertyDeclarationContext; 
acmeParser.AcmePropertyValueDeclarationContext = AcmePropertyValueDeclarationContext; 
acmeParser.EnumidentifierContext = EnumidentifierContext; 
acmeParser.AcmePropertyElementContext = AcmePropertyElementContext; 
acmeParser.AcmePropertyCompoundElementContext = AcmePropertyCompoundElementContext; 
acmeParser.AcmePropertySetContext = AcmePropertySetContext; 
acmeParser.AcmePropertyRecordEntryContext = AcmePropertyRecordEntryContext; 
acmeParser.AcmePropertyRecordContext = AcmePropertyRecordContext; 
acmeParser.AcmePropertySequenceContext = AcmePropertySequenceContext; 
acmeParser.AcmePropertyTypeRecordContext = AcmePropertyTypeRecordContext; 
acmeParser.AcmePropertyTypeSetContext = AcmePropertyTypeSetContext; 
acmeParser.AcmePropertyTypeSequenceContext = AcmePropertyTypeSequenceContext; 
acmeParser.AcmePropertyTypeEnumContext = AcmePropertyTypeEnumContext; 
acmeParser.AcmePropertyRecordFieldDescriptionContext = AcmePropertyRecordFieldDescriptionContext; 
acmeParser.AcmePropertyTypeRefContext = AcmePropertyTypeRefContext; 
acmeParser.AcmePropertyTypeStructureContext = AcmePropertyTypeStructureContext; 
acmeParser.AcmePropertyTypeDeclarationContext = AcmePropertyTypeDeclarationContext; 
acmeParser.AcmePropertyBlockEntryContext = AcmePropertyBlockEntryContext; 
acmeParser.AcmePropertyBlockContext = AcmePropertyBlockContext; 
acmeParser.AcmePropertyTypeIntContext = AcmePropertyTypeIntContext; 
acmeParser.AcmePropertyTypeAnyContext = AcmePropertyTypeAnyContext; 
acmeParser.AcmePropertyTypeFloatContext = AcmePropertyTypeFloatContext; 
acmeParser.AcmePropertyTypeDoubleContext = AcmePropertyTypeDoubleContext; 
acmeParser.AcmePropertyTypeStringContext = AcmePropertyTypeStringContext; 
acmeParser.AcmePropertyTypeBooleanContext = AcmePropertyTypeBooleanContext; 
acmeParser.AcmeViewDeclarationContext = AcmeViewDeclarationContext; 
acmeParser.AcmeViewTypeDeclarationContext = AcmeViewTypeDeclarationContext; 
acmeParser.AcmeViewBodyContext = AcmeViewBodyContext; 
acmeParser.DesignRuleContext = DesignRuleContext; 
acmeParser.AcmeDesignAnalysisDeclarationContext = AcmeDesignAnalysisDeclarationContext; 
acmeParser.FormalParamContext = FormalParamContext; 
acmeParser.TerminatedDesignRuleExpressionContext = TerminatedDesignRuleExpressionContext; 
acmeParser.DesignRuleExpressionContext = DesignRuleExpressionContext; 
acmeParser.ASTDRImpliesExpressionContext = ASTDRImpliesExpressionContext; 
acmeParser.DRIffExpressionContext = DRIffExpressionContext; 
acmeParser.DRAndExpressionContext = DRAndExpressionContext; 
acmeParser.DRNegateExpressionContext = DRNegateExpressionContext; 
acmeParser.DREqualityExpressionContext = DREqualityExpressionContext; 
acmeParser.DRRelationalExpressionContext = DRRelationalExpressionContext; 
acmeParser.DRAdditiveExpressionContext = DRAdditiveExpressionContext; 
acmeParser.DRMultiplicativeExpressionContext = DRMultiplicativeExpressionContext; 
acmeParser.DRNegativeExpressionContext = DRNegativeExpressionContext; 
acmeParser.PrimitiveExpressionContext = PrimitiveExpressionContext; 
acmeParser.ParentheticalExpressionContext = ParentheticalExpressionContext; 
acmeParser.ReferenceContext = ReferenceContext; 
acmeParser.SetReferenceContext = SetReferenceContext; 
acmeParser.ActualParamsContext = ActualParamsContext; 
acmeParser.LiteralConstantContext = LiteralConstantContext; 
acmeParser.QuantifiedExpressionContext = QuantifiedExpressionContext; 
acmeParser.DistinctVariableSetDeclarationContext = DistinctVariableSetDeclarationContext; 
acmeParser.VariableSetDeclarationContext = VariableSetDeclarationContext; 
acmeParser.SequenceExpressionContext = SequenceExpressionContext; 
acmeParser.SetExpressionContext = SetExpressionContext; 
acmeParser.PathExpressionContext = PathExpressionContext; 
acmeParser.PathExpressionContinuationContext = PathExpressionContinuationContext; 
acmeParser.LiteralSetContext = LiteralSetContext; 
acmeParser.LiteralSequenceContext = LiteralSequenceContext; 
acmeParser.LiteralRecordEntryContext = LiteralRecordEntryContext; 
acmeParser.LiteralRecordContext = LiteralRecordContext; 
acmeParser.SetConstructorContext = SetConstructorContext; 
acmeParser.AcmeTypeRefContext = AcmeTypeRefContext; 
