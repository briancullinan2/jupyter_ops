// Generated from Resources/Parsers/vba/vba.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import vbaListener from './vbaListener.js';
const serializedATN = [4,1,220,2649,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,1,0,1,0,1,0,
1,1,3,1,299,8,1,1,1,5,1,302,8,1,10,1,12,1,305,9,1,1,1,1,1,5,1,309,8,1,10,
1,12,1,312,9,1,3,1,314,8,1,1,1,3,1,317,8,1,1,1,5,1,320,8,1,10,1,12,1,323,
9,1,1,1,3,1,326,8,1,1,1,5,1,329,8,1,10,1,12,1,332,9,1,1,1,3,1,335,8,1,1,
1,5,1,338,8,1,10,1,12,1,341,9,1,1,1,3,1,344,8,1,1,1,5,1,347,8,1,10,1,12,
1,350,9,1,1,1,3,1,353,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,363,8,3,10,
3,12,3,366,9,3,1,3,4,3,369,8,3,11,3,12,3,370,1,3,1,3,1,4,1,4,3,4,377,8,4,
1,4,1,4,3,4,381,8,4,1,4,1,4,5,4,385,8,4,10,4,12,4,388,9,4,1,5,1,5,4,5,392,
8,5,11,5,12,5,393,4,5,396,8,5,11,5,12,5,397,1,6,1,6,4,6,402,8,6,11,6,12,
6,403,1,6,1,6,5,6,408,8,6,10,6,12,6,411,9,6,1,6,5,6,414,8,6,10,6,12,6,417,
9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,427,8,7,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,8,3,8,439,8,8,1,9,1,9,3,9,443,8,9,1,10,1,10,4,10,447,8,10,
11,10,12,10,448,1,10,1,10,5,10,453,8,10,10,10,12,10,456,9,10,1,10,5,10,459,
8,10,10,10,12,10,462,9,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,470,8,11,1,
12,1,12,1,12,1,12,3,12,476,8,12,1,12,1,12,3,12,480,8,12,1,12,1,12,3,12,484,
8,12,1,12,1,12,3,12,488,8,12,1,12,5,12,491,8,12,10,12,12,12,494,9,12,1,13,
1,13,1,13,1,13,5,13,500,8,13,10,13,12,13,503,9,13,1,13,1,13,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,575,8,14,1,15,1,15,1,15,1,15,
3,15,581,8,15,1,15,1,15,3,15,585,8,15,1,15,3,15,588,8,15,1,16,1,16,1,17,
1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,604,8,19,1,19,
1,19,3,19,608,8,19,1,19,5,19,611,8,19,10,19,12,19,614,9,19,3,19,616,8,19,
1,20,1,20,1,20,3,20,621,8,20,1,20,1,20,1,20,1,20,3,20,627,8,20,1,20,1,20,
3,20,631,8,20,1,20,5,20,634,8,20,10,20,12,20,637,9,20,1,21,1,21,3,21,641,
8,21,1,21,1,21,3,21,645,8,21,1,21,3,21,648,8,21,1,21,1,21,3,21,652,8,21,
1,21,1,21,1,22,1,22,3,22,658,8,22,1,22,1,22,3,22,662,8,22,1,22,1,22,1,23,
1,23,1,23,3,23,669,8,23,1,23,1,23,1,23,1,23,3,23,675,8,23,1,23,1,23,3,23,
679,8,23,1,23,3,23,682,8,23,1,23,1,23,1,23,3,23,687,8,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,3,23,697,8,23,1,23,3,23,700,8,23,1,23,3,23,703,
8,23,1,23,1,23,3,23,707,8,23,1,24,1,24,1,24,1,24,3,24,713,8,24,1,24,1,24,
3,24,717,8,24,1,24,5,24,720,8,24,10,24,12,24,723,9,24,1,25,1,25,1,25,1,25,
3,25,729,8,25,1,25,1,25,3,25,733,8,25,1,25,1,25,3,25,737,8,25,1,25,1,25,
3,25,741,8,25,1,25,3,25,744,8,25,1,26,1,26,1,26,3,26,749,8,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,760,8,26,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,3,26,773,8,26,1,27,1,27,1,28,1,28,1,28,3,28,
780,8,28,1,28,1,28,1,28,1,28,1,28,5,28,787,8,28,10,28,12,28,790,9,28,1,28,
1,28,1,29,1,29,3,29,796,8,29,1,29,1,29,3,29,800,8,29,1,29,3,29,803,8,29,
1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,812,8,30,1,30,5,30,815,8,30,10,30,
12,30,818,9,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,3,32,827,8,32,1,32,1,32,
1,32,1,32,3,32,833,8,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,3,34,843,
8,34,1,34,1,34,3,34,847,8,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
857,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,865,8,35,1,35,1,35,1,35,3,35,
870,8,35,1,36,1,36,1,36,1,36,3,36,876,8,36,1,36,1,36,3,36,880,8,36,1,36,
3,36,883,8,36,1,36,1,36,3,36,887,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
1,36,1,36,3,36,898,8,36,1,36,1,36,3,36,902,8,36,1,36,1,36,1,36,3,36,907,
8,36,1,37,1,37,1,37,3,37,912,8,37,1,37,1,37,3,37,916,8,37,1,37,1,37,3,37,
920,8,37,1,37,1,37,3,37,924,8,37,1,37,3,37,927,8,37,1,37,3,37,930,8,37,1,
37,3,37,933,8,37,1,37,3,37,936,8,37,1,37,1,37,3,37,940,8,37,1,37,1,37,1,
38,1,38,1,38,1,38,3,38,948,8,38,1,38,1,38,3,38,952,8,38,1,38,3,38,955,8,
38,1,38,3,38,958,8,38,1,38,1,38,3,38,962,8,38,1,38,1,38,1,39,1,39,1,39,1,
39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
1,41,3,41,985,8,41,1,41,1,41,5,41,989,8,41,10,41,12,41,992,9,41,1,41,3,41,
995,8,41,1,41,1,41,3,41,999,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
1008,8,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1019,8,44,1,
45,1,45,1,45,3,45,1024,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,
1034,8,47,1,47,1,47,3,47,1038,8,47,1,47,4,47,1041,8,47,11,47,12,47,1042,
1,48,1,48,1,48,1,48,1,49,1,49,3,49,1051,8,49,1,49,1,49,3,49,1055,8,49,1,
49,1,49,3,49,1059,8,49,1,49,1,49,1,50,1,50,1,50,1,50,3,50,1067,8,50,1,50,
1,50,3,50,1071,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,3,
52,1083,8,52,1,52,1,52,3,52,1087,8,52,1,52,1,52,1,52,1,52,1,52,3,52,1094,
8,52,3,52,1096,8,52,1,53,1,53,1,53,1,53,3,53,1102,8,53,1,53,1,53,3,53,1106,
8,53,1,53,1,53,1,54,1,54,3,54,1112,8,54,1,54,1,54,3,54,1116,8,54,1,54,1,
54,3,54,1120,8,54,1,54,1,54,1,55,1,55,5,55,1126,8,55,10,55,12,55,1129,9,
55,1,55,3,55,1132,8,55,1,55,1,55,1,56,1,56,3,56,1138,8,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,5,56,1147,8,56,10,56,12,56,1150,9,56,1,57,1,57,3,57,
1154,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,1163,8,57,10,57,12,57,
1166,9,57,1,58,1,58,1,58,1,58,1,58,5,58,1173,8,58,10,58,12,58,1176,9,58,
1,59,1,59,3,59,1180,8,59,1,59,1,59,3,59,1184,8,59,1,59,1,59,3,59,1188,8,
59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1212,8,62,1,63,1,63,1,63,1,
63,1,63,1,63,1,63,1,63,3,63,1222,8,63,1,63,1,63,3,63,1226,8,63,1,63,5,63,
1229,8,63,10,63,12,63,1232,9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
3,64,1242,8,64,1,64,1,64,3,64,1246,8,64,1,64,5,64,1249,8,64,10,64,12,64,
1252,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1265,
8,65,1,65,1,65,3,65,1269,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1278,
8,65,1,65,1,65,3,65,1282,8,65,1,65,3,65,1285,8,65,1,66,1,66,3,66,1289,8,
66,1,66,1,66,3,66,1293,8,66,1,66,3,66,1296,8,66,5,66,1298,8,66,10,66,12,
66,1301,9,66,1,66,3,66,1304,8,66,1,66,3,66,1307,8,66,1,66,1,66,3,66,1311,
8,66,1,66,3,66,1314,8,66,4,66,1316,8,66,11,66,12,66,1317,3,66,1320,8,66,
1,67,1,67,1,67,3,67,1325,8,67,1,67,1,67,3,67,1329,8,67,1,67,1,67,3,67,1333,
8,67,1,67,1,67,3,67,1337,8,67,3,67,1339,8,67,1,68,1,68,1,68,1,68,3,68,1345,
8,68,1,68,1,68,3,68,1349,8,68,1,68,3,68,1352,8,68,1,69,1,69,1,69,3,69,1357,
8,69,1,69,1,69,3,69,1361,8,69,1,69,1,69,1,69,1,69,3,69,1367,8,69,1,69,3,
69,1370,8,69,1,69,3,69,1373,8,69,1,69,1,69,3,69,1377,8,69,1,69,1,69,3,69,
1381,8,69,1,69,1,69,1,70,1,70,1,70,3,70,1388,8,70,1,70,1,70,3,70,1392,8,
70,1,70,1,70,1,70,1,70,3,70,1398,8,70,1,70,3,70,1401,8,70,1,70,1,70,3,70,
1405,8,70,1,70,1,70,1,71,1,71,1,71,3,71,1412,8,71,1,71,1,71,3,71,1416,8,
71,1,71,1,71,1,71,1,71,3,71,1422,8,71,1,71,3,71,1425,8,71,1,71,1,71,3,71,
1429,8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,1437,8,72,1,72,1,72,3,72,1441,
8,72,1,72,3,72,1444,8,72,1,72,3,72,1447,8,72,1,72,1,72,3,72,1451,8,72,1,
72,1,72,1,73,1,73,1,73,1,73,3,73,1459,8,73,1,73,1,73,3,73,1463,8,73,1,73,
1,73,3,73,1467,8,73,3,73,1469,8,73,1,73,3,73,1472,8,73,1,74,1,74,1,74,3,
74,1477,8,74,1,75,1,75,1,75,1,75,3,75,1483,8,75,1,75,1,75,3,75,1487,8,75,
1,75,1,75,3,75,1491,8,75,1,75,5,75,1494,8,75,10,75,12,75,1497,9,75,1,76,
1,76,3,76,1501,8,76,1,76,1,76,3,76,1505,8,76,1,76,1,76,3,76,1509,8,76,1,
76,1,76,1,76,3,76,1514,8,76,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1522,8,78,
3,78,1524,8,78,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,3,81,1536,
8,81,1,81,1,81,3,81,1540,8,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,1548,8,
82,1,82,1,82,3,82,1552,8,82,1,82,1,82,1,83,1,83,1,83,1,83,3,83,1560,8,83,
1,83,1,83,3,83,1564,8,83,1,83,1,83,3,83,1568,8,83,1,83,1,83,3,83,1572,8,
83,1,83,1,83,3,83,1576,8,83,1,83,1,83,3,83,1580,8,83,1,83,1,83,1,84,1,84,
1,84,1,84,3,84,1588,8,84,1,84,1,84,3,84,1592,8,84,1,84,1,84,1,85,1,85,1,
85,1,85,1,85,1,85,1,85,5,85,1603,8,85,10,85,12,85,1606,9,85,1,85,1,85,1,
86,1,86,3,86,1612,8,86,1,86,1,86,3,86,1616,8,86,1,86,1,86,1,86,1,86,1,86,
1,86,1,86,1,86,1,86,3,86,1627,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1634,8,
87,1,88,1,88,1,88,3,88,1639,8,88,1,88,1,88,3,88,1643,8,88,1,88,5,88,1646,
8,88,10,88,12,88,1649,9,88,3,88,1651,8,88,1,89,1,89,1,89,1,89,3,89,1657,
8,89,1,89,1,89,3,89,1661,8,89,1,89,3,89,1664,8,89,1,90,1,90,1,90,1,90,3,
90,1670,8,90,1,90,1,90,3,90,1674,8,90,1,90,1,90,1,91,1,91,1,91,1,91,3,91,
1682,8,91,1,91,1,91,3,91,1686,8,91,1,91,1,91,1,92,1,92,1,93,1,93,1,93,3,
93,1695,8,93,1,93,1,93,3,93,1699,8,93,1,93,1,93,3,93,1703,8,93,1,93,1,93,
3,93,1707,8,93,1,93,3,93,1710,8,93,1,93,1,93,3,93,1714,8,93,1,93,1,93,1,
94,1,94,3,94,1720,8,94,1,94,1,94,3,94,1724,8,94,1,94,1,94,1,95,1,95,1,95,
3,95,1731,8,95,1,95,1,95,1,95,1,95,1,95,5,95,1738,8,95,10,95,12,95,1741,
9,95,1,95,1,95,1,96,1,96,3,96,1747,8,96,1,96,1,96,3,96,1751,8,96,1,96,3,
96,1754,8,96,1,96,3,96,1757,8,96,1,96,3,96,1760,8,96,1,96,1,96,3,96,1764,
8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1775,8,97,1,98,1,
98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,1785,8,99,1,99,1,99,3,99,1789,8,99,
1,99,1,99,1,99,1,99,1,99,3,99,1796,8,99,3,99,1798,8,99,1,100,1,100,1,100,
1,100,1,100,3,100,1805,8,100,1,100,1,100,3,100,1809,8,100,1,100,1,100,3,
100,1813,8,100,1,100,5,100,1816,8,100,10,100,12,100,1819,9,100,1,100,1,100,
1,100,1,100,3,100,1825,8,100,1,100,1,100,1,100,1,100,1,100,3,100,1832,8,
100,1,100,1,100,1,100,3,100,1837,8,100,1,100,1,100,3,100,1841,8,100,1,100,
1,100,1,100,1,100,3,100,1847,8,100,1,100,1,100,1,100,3,100,1852,8,100,1,
100,1,100,1,100,3,100,1857,8,100,1,100,3,100,1860,8,100,1,100,1,100,3,100,
1864,8,100,1,100,1,100,3,100,1868,8,100,1,100,1,100,1,100,3,100,1873,8,100,
1,100,1,100,3,100,1877,8,100,1,100,1,100,1,100,3,100,1882,8,100,1,100,1,
100,3,100,1886,8,100,1,100,1,100,1,100,3,100,1891,8,100,1,100,1,100,3,100,
1895,8,100,1,100,1,100,1,100,3,100,1900,8,100,1,100,1,100,3,100,1904,8,100,
1,100,1,100,1,100,3,100,1909,8,100,1,100,1,100,3,100,1913,8,100,1,100,1,
100,1,100,3,100,1918,8,100,1,100,1,100,3,100,1922,8,100,1,100,1,100,1,100,
3,100,1927,8,100,1,100,1,100,3,100,1931,8,100,1,100,1,100,1,100,3,100,1936,
8,100,1,100,1,100,3,100,1940,8,100,1,100,1,100,1,100,3,100,1945,8,100,1,
100,1,100,3,100,1949,8,100,1,100,1,100,1,100,3,100,1954,8,100,1,100,1,100,
3,100,1958,8,100,1,100,1,100,1,100,3,100,1963,8,100,1,100,1,100,3,100,1967,
8,100,1,100,1,100,1,100,3,100,1972,8,100,1,100,1,100,3,100,1976,8,100,1,
100,1,100,1,100,3,100,1981,8,100,1,100,1,100,3,100,1985,8,100,1,100,1,100,
1,100,3,100,1990,8,100,1,100,1,100,3,100,1994,8,100,1,100,1,100,1,100,3,
100,1999,8,100,1,100,1,100,3,100,2003,8,100,1,100,1,100,1,100,3,100,2008,
8,100,1,100,1,100,3,100,2012,8,100,1,100,1,100,1,100,3,100,2017,8,100,1,
100,1,100,3,100,2021,8,100,1,100,1,100,1,100,3,100,2026,8,100,1,100,1,100,
3,100,2030,8,100,1,100,1,100,1,100,3,100,2035,8,100,1,100,1,100,3,100,2039,
8,100,1,100,5,100,2042,8,100,10,100,12,100,2045,9,100,1,101,1,101,1,101,
3,101,2050,8,101,1,101,1,101,1,101,3,101,2055,8,101,1,101,1,101,1,102,1,
102,3,102,2061,8,102,1,102,1,102,3,102,2065,8,102,1,102,5,102,2068,8,102,
10,102,12,102,2071,9,102,1,103,1,103,3,103,2075,8,103,1,103,1,103,3,103,
2079,8,103,1,103,1,103,3,103,2083,8,103,3,103,2085,8,103,1,103,1,103,3,103,
2089,8,103,3,103,2091,8,103,1,103,3,103,2094,8,103,1,103,1,103,3,103,2098,
8,103,1,104,1,104,1,104,1,104,1,104,3,104,2105,8,104,1,104,1,104,1,105,1,
105,1,105,1,105,3,105,2113,8,105,1,105,1,105,3,105,2117,8,105,1,105,1,105,
1,106,1,106,1,106,1,106,1,106,1,106,3,106,2127,8,106,1,106,1,106,3,106,2131,
8,106,1,106,1,106,1,107,1,107,1,107,1,107,3,107,2139,8,107,1,107,1,107,3,
107,2143,8,107,1,107,3,107,2146,8,107,1,108,3,108,2149,8,108,1,108,1,108,
1,109,1,109,3,109,2155,8,109,1,110,1,110,1,110,1,110,3,110,2161,8,110,1,
110,3,110,2164,8,110,1,110,1,110,3,110,2168,8,110,1,110,1,110,3,110,2172,
8,110,1,110,1,110,3,110,2176,8,110,1,110,3,110,2179,8,110,1,110,1,110,1,
110,1,110,5,110,2185,8,110,10,110,12,110,2188,9,110,1,111,1,111,1,111,3,
111,2193,8,111,1,111,1,111,1,111,3,111,2198,8,111,1,111,3,111,2201,8,111,
1,111,1,111,3,111,2205,8,111,1,111,1,111,3,111,2209,8,111,1,111,1,111,3,
111,2213,8,111,1,111,3,111,2216,8,111,1,111,1,111,1,111,1,111,5,111,2222,
8,111,10,111,12,111,2225,9,111,1,112,1,112,3,112,2229,8,112,1,113,3,113,
2232,8,113,1,113,1,113,1,113,3,113,2237,8,113,1,113,1,113,3,113,2241,8,113,
1,113,3,113,2244,8,113,1,113,3,113,2247,8,113,1,113,1,113,1,113,1,113,5,
113,2253,8,113,10,113,12,113,2256,9,113,1,114,1,114,1,114,3,114,2261,8,114,
1,114,3,114,2264,8,114,1,114,1,114,1,114,1,114,5,114,2270,8,114,10,114,12,
114,2273,9,114,1,115,1,115,1,115,1,115,3,115,2279,8,115,1,116,1,116,3,116,
2283,8,116,1,116,3,116,2286,8,116,1,116,3,116,2289,8,116,1,116,1,116,1,116,
1,116,5,116,2295,8,116,10,116,12,116,2298,9,116,1,117,1,117,3,117,2302,8,
117,1,117,3,117,2305,8,117,1,117,3,117,2308,8,117,1,117,1,117,3,117,2312,
8,117,1,117,1,117,3,117,2316,8,117,3,117,2318,8,117,1,117,1,117,3,117,2322,
8,117,1,117,3,117,2325,8,117,1,117,1,117,1,117,1,117,5,117,2331,8,117,10,
117,12,117,2334,9,117,1,118,1,118,3,118,2338,8,118,1,118,4,118,2341,8,118,
11,118,12,118,2342,1,118,3,118,2346,8,118,1,118,3,118,2349,8,118,1,118,1,
118,1,118,1,118,5,118,2355,8,118,10,118,12,118,2358,9,118,1,119,1,119,1,
119,3,119,2363,8,119,1,120,1,120,1,121,3,121,2368,8,121,1,121,3,121,2371,
8,121,1,121,1,121,3,121,2375,8,121,5,121,2377,8,121,10,121,12,121,2380,9,
121,1,121,1,121,3,121,2384,8,121,1,121,1,121,3,121,2388,8,121,1,121,3,121,
2391,8,121,5,121,2393,8,121,10,121,12,121,2396,9,121,1,122,3,122,2399,8,
122,1,122,1,122,3,122,2403,8,122,1,122,3,122,2406,8,122,1,122,1,122,1,123,
1,123,1,123,3,123,2413,8,123,1,124,1,124,3,124,2417,8,124,1,124,1,124,3,
124,2421,8,124,1,124,1,124,3,124,2425,8,124,1,124,5,124,2428,8,124,10,124,
12,124,2431,9,124,3,124,2433,8,124,1,124,3,124,2436,8,124,1,124,1,124,1,
125,1,125,3,125,2442,8,125,1,125,1,125,3,125,2446,8,125,1,125,1,125,3,125,
2450,8,125,1,125,1,125,3,125,2454,8,125,1,125,3,125,2457,8,125,1,125,1,125,
3,125,2461,8,125,1,125,3,125,2464,8,125,1,125,3,125,2467,8,125,1,125,3,125,
2470,8,125,1,125,3,125,2473,8,125,1,125,3,125,2476,8,125,1,126,1,126,3,126,
2480,8,126,1,126,1,126,1,127,1,127,3,127,2486,8,127,1,127,1,127,3,127,2490,
8,127,1,127,5,127,2493,8,127,10,127,12,127,2496,9,127,1,128,1,128,1,128,
1,128,1,128,3,128,2503,8,128,1,128,1,128,1,129,1,129,4,129,2509,8,129,11,
129,12,129,2510,1,130,1,130,3,130,2515,8,130,1,130,1,130,3,130,2519,8,130,
1,130,1,130,3,130,2523,8,130,1,130,3,130,2526,8,130,1,131,1,131,1,131,1,
131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2538,8,131,1,131,1,131,3,131,
2542,8,131,1,131,3,131,2545,8,131,1,131,3,131,2548,8,131,1,132,1,132,1,132,
5,132,2553,8,132,10,132,12,132,2556,9,132,1,132,1,132,1,132,4,132,2561,8,
132,11,132,12,132,2562,3,132,2565,8,132,1,133,1,133,1,134,1,134,1,134,5,
134,2572,8,134,10,134,12,134,2575,9,134,1,135,1,135,3,135,2579,8,135,1,135,
1,135,3,135,2583,8,135,1,136,1,136,3,136,2587,8,136,1,136,1,136,3,136,2591,
8,136,1,136,3,136,2594,8,136,1,137,1,137,1,137,1,138,1,138,1,139,1,139,3,
139,2603,8,139,1,139,3,139,2606,8,139,1,139,1,139,3,139,2610,8,139,1,139,
3,139,2613,8,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,
144,1,145,3,145,2626,8,145,1,145,1,145,1,145,3,145,2631,8,145,1,145,3,145,
2634,8,145,1,146,1,146,3,146,2638,8,146,1,146,1,146,3,146,2642,8,146,5,146,
2644,8,146,10,146,12,146,2647,9,146,1,146,1,816,1,200,147,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
288,290,292,0,19,3,0,19,19,32,32,167,167,1,0,35,46,2,0,176,176,180,180,1,
0,68,72,3,0,189,189,196,196,200,200,1,0,119,120,5,0,15,15,19,19,86,86,128,
128,139,139,2,0,142,143,184,184,2,0,99,101,158,158,1,0,1,2,2,0,160,160,166,
166,1,0,4,5,2,0,21,22,129,129,1,0,21,22,5,0,87,87,97,97,189,192,194,194,
198,198,4,0,73,73,116,117,171,171,205,211,3,0,3,3,5,8,186,186,4,0,75,75,
79,79,132,132,137,137,9,0,9,53,62,67,73,97,102,102,108,118,121,122,127,132,
137,142,144,185,3077,0,294,1,0,0,0,2,298,1,0,0,0,4,354,1,0,0,0,6,360,1,0,
0,0,8,374,1,0,0,0,10,395,1,0,0,0,12,399,1,0,0,0,14,426,1,0,0,0,16,438,1,
0,0,0,18,442,1,0,0,0,20,444,1,0,0,0,22,469,1,0,0,0,24,471,1,0,0,0,26,495,
1,0,0,0,28,574,1,0,0,0,30,576,1,0,0,0,32,589,1,0,0,0,34,591,1,0,0,0,36,595,
1,0,0,0,38,599,1,0,0,0,40,620,1,0,0,0,42,638,1,0,0,0,44,655,1,0,0,0,46,668,
1,0,0,0,48,708,1,0,0,0,50,724,1,0,0,0,52,772,1,0,0,0,54,774,1,0,0,0,56,779,
1,0,0,0,58,793,1,0,0,0,60,806,1,0,0,0,62,819,1,0,0,0,64,826,1,0,0,0,66,836,
1,0,0,0,68,838,1,0,0,0,70,850,1,0,0,0,72,871,1,0,0,0,74,911,1,0,0,0,76,943,
1,0,0,0,78,965,1,0,0,0,80,969,1,0,0,0,82,998,1,0,0,0,84,1000,1,0,0,0,86,
1009,1,0,0,0,88,1011,1,0,0,0,90,1020,1,0,0,0,92,1025,1,0,0,0,94,1029,1,0,
0,0,96,1044,1,0,0,0,98,1050,1,0,0,0,100,1062,1,0,0,0,102,1074,1,0,0,0,104,
1078,1,0,0,0,106,1097,1,0,0,0,108,1109,1,0,0,0,110,1123,1,0,0,0,112,1135,
1,0,0,0,114,1151,1,0,0,0,116,1167,1,0,0,0,118,1177,1,0,0,0,120,1191,1,0,
0,0,122,1195,1,0,0,0,124,1203,1,0,0,0,126,1213,1,0,0,0,128,1233,1,0,0,0,
130,1253,1,0,0,0,132,1319,1,0,0,0,134,1338,1,0,0,0,136,1340,1,0,0,0,138,
1356,1,0,0,0,140,1387,1,0,0,0,142,1411,1,0,0,0,144,1432,1,0,0,0,146,1454,
1,0,0,0,148,1473,1,0,0,0,150,1478,1,0,0,0,152,1498,1,0,0,0,154,1515,1,0,
0,0,156,1517,1,0,0,0,158,1525,1,0,0,0,160,1527,1,0,0,0,162,1531,1,0,0,0,
164,1543,1,0,0,0,166,1555,1,0,0,0,168,1583,1,0,0,0,170,1595,1,0,0,0,172,
1626,1,0,0,0,174,1628,1,0,0,0,176,1650,1,0,0,0,178,1652,1,0,0,0,180,1665,
1,0,0,0,182,1677,1,0,0,0,184,1689,1,0,0,0,186,1694,1,0,0,0,188,1717,1,0,
0,0,190,1730,1,0,0,0,192,1744,1,0,0,0,194,1767,1,0,0,0,196,1776,1,0,0,0,
198,1780,1,0,0,0,200,1859,1,0,0,0,202,2049,1,0,0,0,204,2058,1,0,0,0,206,
2072,1,0,0,0,208,2099,1,0,0,0,210,2108,1,0,0,0,212,2120,1,0,0,0,214,2134,
1,0,0,0,216,2148,1,0,0,0,218,2154,1,0,0,0,220,2156,1,0,0,0,222,2189,1,0,
0,0,224,2228,1,0,0,0,226,2231,1,0,0,0,228,2257,1,0,0,0,230,2278,1,0,0,0,
232,2280,1,0,0,0,234,2301,1,0,0,0,236,2337,1,0,0,0,238,2359,1,0,0,0,240,
2364,1,0,0,0,242,2378,1,0,0,0,244,2398,1,0,0,0,246,2409,1,0,0,0,248,2414,
1,0,0,0,250,2441,1,0,0,0,252,2477,1,0,0,0,254,2483,1,0,0,0,256,2502,1,0,
0,0,258,2508,1,0,0,0,260,2512,1,0,0,0,262,2547,1,0,0,0,264,2564,1,0,0,0,
266,2566,1,0,0,0,268,2568,1,0,0,0,270,2576,1,0,0,0,272,2584,1,0,0,0,274,
2595,1,0,0,0,276,2598,1,0,0,0,278,2602,1,0,0,0,280,2614,1,0,0,0,282,2616,
1,0,0,0,284,2618,1,0,0,0,286,2620,1,0,0,0,288,2622,1,0,0,0,290,2625,1,0,
0,0,292,2645,1,0,0,0,294,295,3,2,1,0,295,296,5,0,0,1,296,1,1,0,0,0,297,299,
5,219,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,303,1,0,0,0,300,302,3,290,
145,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,
313,1,0,0,0,305,303,1,0,0,0,306,310,3,4,2,0,307,309,3,290,145,0,308,307,
1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,314,1,0,0,0,
312,310,1,0,0,0,313,306,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,
3,6,3,0,316,315,1,0,0,0,316,317,1,0,0,0,317,321,1,0,0,0,318,320,3,290,145,
0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,325,
1,0,0,0,323,321,1,0,0,0,324,326,3,10,5,0,325,324,1,0,0,0,325,326,1,0,0,0,
326,330,1,0,0,0,327,329,3,290,145,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
328,1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,333,335,3,12,
6,0,334,333,1,0,0,0,334,335,1,0,0,0,335,339,1,0,0,0,336,338,3,290,145,0,
337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,343,
1,0,0,0,341,339,1,0,0,0,342,344,3,20,10,0,343,342,1,0,0,0,343,344,1,0,0,
0,344,348,1,0,0,0,345,347,3,290,145,0,346,345,1,0,0,0,347,350,1,0,0,0,348,
346,1,0,0,0,348,349,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,351,353,5,219,
0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,3,1,0,0,0,354,355,5,178,0,0,355,
356,5,219,0,0,356,357,5,210,0,0,357,358,5,219,0,0,358,359,5,28,0,0,359,5,
1,0,0,0,360,364,5,17,0,0,361,363,3,290,145,0,362,361,1,0,0,0,363,366,1,0,
0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,367,
369,3,8,4,0,368,367,1,0,0,0,369,370,1,0,0,0,370,368,1,0,0,0,370,371,1,0,
0,0,371,372,1,0,0,0,372,373,5,62,0,0,373,7,1,0,0,0,374,376,3,258,129,0,375,
377,5,219,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,5,
189,0,0,379,381,5,219,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,
0,382,386,3,276,138,0,383,385,3,290,145,0,384,383,1,0,0,0,385,388,1,0,0,
0,386,384,1,0,0,0,386,387,1,0,0,0,387,9,1,0,0,0,388,386,1,0,0,0,389,391,
3,24,12,0,390,392,3,290,145,0,391,390,1,0,0,0,392,393,1,0,0,0,393,391,1,
0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,389,1,0,0,0,396,397,1,0,0,0,397,
395,1,0,0,0,397,398,1,0,0,0,398,11,1,0,0,0,399,409,3,16,8,0,400,402,3,290,
145,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,
405,1,0,0,0,405,406,3,16,8,0,406,408,1,0,0,0,407,401,1,0,0,0,408,411,1,0,
0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,415,1,0,0,0,411,409,1,0,0,0,412,
414,3,290,145,0,413,412,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,
1,0,0,0,416,13,1,0,0,0,417,415,1,0,0,0,418,419,5,123,0,0,419,420,5,219,0,
0,420,427,5,208,0,0,421,422,5,125,0,0,422,423,5,219,0,0,423,427,7,0,0,0,
424,427,5,124,0,0,425,427,5,126,0,0,426,418,1,0,0,0,426,421,1,0,0,0,426,
424,1,0,0,0,426,425,1,0,0,0,427,15,1,0,0,0,428,439,3,288,144,0,429,439,3,
46,23,0,430,439,3,56,28,0,431,439,3,64,32,0,432,439,3,40,20,0,433,439,3,
92,46,0,434,439,3,202,101,0,435,439,3,14,7,0,436,439,3,190,95,0,437,439,
3,18,9,0,438,428,1,0,0,0,438,429,1,0,0,0,438,430,1,0,0,0,438,431,1,0,0,0,
438,432,1,0,0,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,0,438,436,
1,0,0,0,438,437,1,0,0,0,439,17,1,0,0,0,440,443,3,108,54,0,441,443,3,110,
55,0,442,440,1,0,0,0,442,441,1,0,0,0,443,19,1,0,0,0,444,454,3,22,11,0,445,
447,3,290,145,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,449,
1,0,0,0,449,450,1,0,0,0,450,451,3,22,11,0,451,453,1,0,0,0,452,446,1,0,0,
0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,460,1,0,0,0,456,454,
1,0,0,0,457,459,3,290,145,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,
0,0,460,461,1,0,0,0,461,21,1,0,0,0,462,460,1,0,0,0,463,470,3,74,37,0,464,
470,3,138,69,0,465,470,3,140,70,0,466,470,3,142,71,0,467,470,3,186,93,0,
468,470,3,18,9,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,469,466,
1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,23,1,0,0,0,471,472,5,13,0,0,
472,473,5,219,0,0,473,475,3,230,115,0,474,476,5,219,0,0,475,474,1,0,0,0,
475,476,1,0,0,0,476,477,1,0,0,0,477,479,5,189,0,0,478,480,5,219,0,0,479,
478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,492,3,276,138,0,482,484,
5,219,0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,5,1,0,
0,486,488,5,219,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,
491,3,276,138,0,490,483,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,
1,0,0,0,493,25,1,0,0,0,494,492,1,0,0,0,495,501,3,28,14,0,496,497,3,292,146,
0,497,498,3,28,14,0,498,500,1,0,0,0,499,496,1,0,0,0,500,503,1,0,0,0,501,
499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,3,292,
146,0,505,27,1,0,0,0,506,575,3,274,137,0,507,575,3,30,15,0,508,575,3,24,
12,0,509,575,3,32,16,0,510,575,3,34,17,0,511,575,3,36,18,0,512,575,3,38,
19,0,513,575,3,40,20,0,514,575,3,44,22,0,515,575,3,50,25,0,516,575,3,48,
24,0,517,575,3,52,26,0,518,575,3,54,27,0,519,575,3,60,30,0,520,575,3,62,
31,0,521,575,3,66,33,0,522,575,3,218,109,0,523,575,3,68,34,0,524,575,3,70,
35,0,525,575,3,72,36,0,526,575,3,76,38,0,527,575,3,78,39,0,528,575,3,80,
40,0,529,575,3,82,41,0,530,575,3,92,46,0,531,575,3,94,47,0,532,575,3,96,
48,0,533,575,3,98,49,0,534,575,3,100,50,0,535,575,3,102,51,0,536,575,3,104,
52,0,537,575,3,106,53,0,538,575,3,18,9,0,539,575,3,118,59,0,540,575,3,120,
60,0,541,575,3,122,61,0,542,575,3,124,62,0,543,575,3,126,63,0,544,575,3,
128,64,0,545,575,3,130,65,0,546,575,3,136,68,0,547,575,3,144,72,0,548,575,
3,146,73,0,549,575,3,148,74,0,550,575,3,150,75,0,551,575,3,154,77,0,552,
575,3,156,78,0,553,575,3,158,79,0,554,575,3,160,80,0,555,575,3,162,81,0,
556,575,3,164,82,0,557,575,3,166,83,0,558,575,3,168,84,0,559,575,3,170,85,
0,560,575,3,178,89,0,561,575,3,180,90,0,562,575,3,182,91,0,563,575,3,184,
92,0,564,575,3,188,94,0,565,575,3,196,98,0,566,575,3,198,99,0,567,575,3,
202,101,0,568,575,3,208,104,0,569,575,3,210,105,0,570,575,3,212,106,0,571,
575,3,214,107,0,572,575,3,224,112,0,573,575,3,230,115,0,574,506,1,0,0,0,
574,507,1,0,0,0,574,508,1,0,0,0,574,509,1,0,0,0,574,510,1,0,0,0,574,511,
1,0,0,0,574,512,1,0,0,0,574,513,1,0,0,0,574,514,1,0,0,0,574,515,1,0,0,0,
574,516,1,0,0,0,574,517,1,0,0,0,574,518,1,0,0,0,574,519,1,0,0,0,574,520,
1,0,0,0,574,521,1,0,0,0,574,522,1,0,0,0,574,523,1,0,0,0,574,524,1,0,0,0,
574,525,1,0,0,0,574,526,1,0,0,0,574,527,1,0,0,0,574,528,1,0,0,0,574,529,
1,0,0,0,574,530,1,0,0,0,574,531,1,0,0,0,574,532,1,0,0,0,574,533,1,0,0,0,
574,534,1,0,0,0,574,535,1,0,0,0,574,536,1,0,0,0,574,537,1,0,0,0,574,538,
1,0,0,0,574,539,1,0,0,0,574,540,1,0,0,0,574,541,1,0,0,0,574,542,1,0,0,0,
574,543,1,0,0,0,574,544,1,0,0,0,574,545,1,0,0,0,574,546,1,0,0,0,574,547,
1,0,0,0,574,548,1,0,0,0,574,549,1,0,0,0,574,550,1,0,0,0,574,551,1,0,0,0,
574,552,1,0,0,0,574,553,1,0,0,0,574,554,1,0,0,0,574,555,1,0,0,0,574,556,
1,0,0,0,574,557,1,0,0,0,574,558,1,0,0,0,574,559,1,0,0,0,574,560,1,0,0,0,
574,561,1,0,0,0,574,562,1,0,0,0,574,563,1,0,0,0,574,564,1,0,0,0,574,565,
1,0,0,0,574,566,1,0,0,0,574,567,1,0,0,0,574,568,1,0,0,0,574,569,1,0,0,0,
574,570,1,0,0,0,574,571,1,0,0,0,574,572,1,0,0,0,574,573,1,0,0,0,575,29,1,
0,0,0,576,577,5,14,0,0,577,578,5,219,0,0,578,587,3,200,100,0,579,581,5,219,
0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,584,5,1,0,0,583,
585,5,219,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,3,
200,100,0,587,580,1,0,0,0,587,588,1,0,0,0,588,31,1,0,0,0,589,590,5,18,0,
0,590,33,1,0,0,0,591,592,5,26,0,0,592,593,5,219,0,0,593,594,3,200,100,0,
594,35,1,0,0,0,595,596,5,27,0,0,596,597,5,219,0,0,597,598,3,200,100,0,598,
37,1,0,0,0,599,615,5,29,0,0,600,601,5,219,0,0,601,612,3,216,108,0,602,604,
5,219,0,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,607,5,1,0,
0,606,608,5,219,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,
611,3,216,108,0,610,603,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,
1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,615,600,1,0,0,0,615,616,1,0,0,0,
616,39,1,0,0,0,617,618,3,282,141,0,618,619,5,219,0,0,619,621,1,0,0,0,620,
617,1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,623,5,31,0,0,623,624,5,219,
0,0,624,635,3,42,21,0,625,627,5,219,0,0,626,625,1,0,0,0,626,627,1,0,0,0,
627,628,1,0,0,0,628,630,5,1,0,0,629,631,5,219,0,0,630,629,1,0,0,0,630,631,
1,0,0,0,631,632,1,0,0,0,632,634,3,42,21,0,633,626,1,0,0,0,634,637,1,0,0,
0,635,633,1,0,0,0,635,636,1,0,0,0,636,41,1,0,0,0,637,635,1,0,0,0,638,640,
3,258,129,0,639,641,3,280,140,0,640,639,1,0,0,0,640,641,1,0,0,0,641,644,
1,0,0,0,642,643,5,219,0,0,643,645,3,260,130,0,644,642,1,0,0,0,644,645,1,
0,0,0,645,647,1,0,0,0,646,648,5,219,0,0,647,646,1,0,0,0,647,648,1,0,0,0,
648,649,1,0,0,0,649,651,5,189,0,0,650,652,5,219,0,0,651,650,1,0,0,0,651,
652,1,0,0,0,652,653,1,0,0,0,653,654,3,200,100,0,654,43,1,0,0,0,655,657,5,
33,0,0,656,658,5,219,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,
659,661,5,189,0,0,660,662,5,219,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,
663,1,0,0,0,663,664,3,200,100,0,664,45,1,0,0,0,665,666,3,282,141,0,666,667,
5,219,0,0,667,669,1,0,0,0,668,665,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,
0,670,671,5,34,0,0,671,674,5,219,0,0,672,673,5,136,0,0,673,675,5,219,0,0,
674,672,1,0,0,0,674,675,1,0,0,0,675,681,1,0,0,0,676,678,5,77,0,0,677,679,
3,280,140,0,678,677,1,0,0,0,678,679,1,0,0,0,679,682,1,0,0,0,680,682,5,165,
0,0,681,676,1,0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,684,5,219,0,0,684,
686,3,258,129,0,685,687,3,280,140,0,686,685,1,0,0,0,686,687,1,0,0,0,687,
688,1,0,0,0,688,689,5,219,0,0,689,690,5,96,0,0,690,691,5,219,0,0,691,696,
5,205,0,0,692,693,5,219,0,0,693,694,5,11,0,0,694,695,5,219,0,0,695,697,5,
205,0,0,696,692,1,0,0,0,696,697,1,0,0,0,697,702,1,0,0,0,698,700,5,219,0,
0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,703,3,248,124,0,702,
699,1,0,0,0,702,703,1,0,0,0,703,706,1,0,0,0,704,705,5,219,0,0,705,707,3,
260,130,0,706,704,1,0,0,0,706,707,1,0,0,0,707,47,1,0,0,0,708,709,7,1,0,0,
709,710,5,219,0,0,710,721,3,272,136,0,711,713,5,219,0,0,712,711,1,0,0,0,
712,713,1,0,0,0,713,714,1,0,0,0,714,716,5,1,0,0,715,717,5,219,0,0,716,715,
1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,720,3,272,136,0,719,712,1,0,
0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,49,1,0,0,0,723,721,
1,0,0,0,724,725,5,47,0,0,725,726,5,219,0,0,726,728,3,200,100,0,727,729,5,
219,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,732,5,1,0,0,
731,733,5,219,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,743,
3,200,100,0,735,737,5,219,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,
0,0,0,738,740,5,1,0,0,739,741,5,219,0,0,740,739,1,0,0,0,740,741,1,0,0,0,
741,742,1,0,0,0,742,744,3,200,100,0,743,736,1,0,0,0,743,744,1,0,0,0,744,
51,1,0,0,0,745,746,5,49,0,0,746,748,3,292,146,0,747,749,3,26,13,0,748,747,
1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,93,0,0,751,773,1,0,0,0,
752,753,5,49,0,0,753,754,5,219,0,0,754,755,7,2,0,0,755,756,5,219,0,0,756,
757,3,200,100,0,757,759,3,292,146,0,758,760,3,26,13,0,759,758,1,0,0,0,759,
760,1,0,0,0,760,761,1,0,0,0,761,762,5,93,0,0,762,773,1,0,0,0,763,764,5,49,
0,0,764,765,3,292,146,0,765,766,3,26,13,0,766,767,5,93,0,0,767,768,5,219,
0,0,768,769,7,2,0,0,769,770,5,219,0,0,770,771,3,200,100,0,771,773,1,0,0,
0,772,745,1,0,0,0,772,752,1,0,0,0,772,763,1,0,0,0,773,53,1,0,0,0,774,775,
5,62,0,0,775,55,1,0,0,0,776,777,3,282,141,0,777,778,5,219,0,0,778,780,1,
0,0,0,779,776,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,782,5,63,0,0,782,
783,5,219,0,0,783,784,3,258,129,0,784,788,3,292,146,0,785,787,3,58,29,0,
786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,
1,0,0,0,790,788,1,0,0,0,791,792,5,54,0,0,792,57,1,0,0,0,793,802,3,258,129,
0,794,796,5,219,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,
799,5,189,0,0,798,800,5,219,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,
1,0,0,0,801,803,3,200,100,0,802,795,1,0,0,0,802,803,1,0,0,0,803,804,1,0,
0,0,804,805,3,292,146,0,805,59,1,0,0,0,806,807,5,65,0,0,807,808,5,219,0,
0,808,816,3,200,100,0,809,811,5,1,0,0,810,812,5,219,0,0,811,810,1,0,0,0,
811,812,1,0,0,0,812,813,1,0,0,0,813,815,3,200,100,0,814,809,1,0,0,0,815,
818,1,0,0,0,816,817,1,0,0,0,816,814,1,0,0,0,817,61,1,0,0,0,818,816,1,0,0,
0,819,820,5,66,0,0,820,821,5,219,0,0,821,822,3,200,100,0,822,63,1,0,0,0,
823,824,3,282,141,0,824,825,5,219,0,0,825,827,1,0,0,0,826,823,1,0,0,0,826,
827,1,0,0,0,827,828,1,0,0,0,828,829,5,67,0,0,829,830,5,219,0,0,830,832,3,
258,129,0,831,833,5,219,0,0,832,831,1,0,0,0,832,833,1,0,0,0,833,834,1,0,
0,0,834,835,3,248,124,0,835,65,1,0,0,0,836,837,7,3,0,0,837,67,1,0,0,0,838,
839,5,74,0,0,839,840,5,219,0,0,840,842,3,200,100,0,841,843,5,219,0,0,842,
841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,846,5,1,0,0,845,847,5,219,
0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,3,200,100,0,
849,69,1,0,0,0,850,851,5,76,0,0,851,852,5,219,0,0,852,853,5,51,0,0,853,854,
5,219,0,0,854,856,3,258,129,0,855,857,3,280,140,0,856,855,1,0,0,0,856,857,
1,0,0,0,857,858,1,0,0,0,858,859,5,219,0,0,859,860,5,85,0,0,860,861,5,219,
0,0,861,862,3,200,100,0,862,864,3,292,146,0,863,865,3,26,13,0,864,863,1,
0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,869,5,113,0,0,867,868,5,219,0,
0,868,870,3,258,129,0,869,867,1,0,0,0,869,870,1,0,0,0,870,71,1,0,0,0,871,
872,5,76,0,0,872,873,5,219,0,0,873,875,3,258,129,0,874,876,3,280,140,0,875,
874,1,0,0,0,875,876,1,0,0,0,876,879,1,0,0,0,877,878,5,219,0,0,878,880,3,
260,130,0,879,877,1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,883,5,219,
0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,886,5,189,0,0,885,
887,5,219,0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,889,3,
200,100,0,889,890,5,219,0,0,890,891,5,170,0,0,891,892,5,219,0,0,892,897,
3,200,100,0,893,894,5,219,0,0,894,895,5,162,0,0,895,896,5,219,0,0,896,898,
3,200,100,0,897,893,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,3,292,
146,0,900,902,3,26,13,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,
903,906,5,113,0,0,904,905,5,219,0,0,905,907,3,258,129,0,906,904,1,0,0,0,
906,907,1,0,0,0,907,73,1,0,0,0,908,909,3,282,141,0,909,910,5,219,0,0,910,
912,1,0,0,0,911,908,1,0,0,0,911,912,1,0,0,0,912,915,1,0,0,0,913,914,5,161,
0,0,914,916,5,219,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,
919,5,77,0,0,918,920,5,219,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,
0,0,0,921,923,3,258,129,0,922,924,3,280,140,0,923,922,1,0,0,0,923,924,1,
0,0,0,924,929,1,0,0,0,925,927,5,219,0,0,926,925,1,0,0,0,926,927,1,0,0,0,
927,928,1,0,0,0,928,930,3,248,124,0,929,926,1,0,0,0,929,930,1,0,0,0,930,
935,1,0,0,0,931,933,5,219,0,0,932,931,1,0,0,0,932,933,1,0,0,0,933,934,1,
0,0,0,934,936,3,260,130,0,935,932,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,
0,937,939,3,292,146,0,938,940,3,26,13,0,939,938,1,0,0,0,939,940,1,0,0,0,
940,941,1,0,0,0,941,942,5,55,0,0,942,75,1,0,0,0,943,944,5,78,0,0,944,945,
5,219,0,0,945,947,3,216,108,0,946,948,5,219,0,0,947,946,1,0,0,0,947,948,
1,0,0,0,948,949,1,0,0,0,949,951,5,1,0,0,950,952,5,219,0,0,951,950,1,0,0,
0,951,952,1,0,0,0,952,954,1,0,0,0,953,955,3,200,100,0,954,953,1,0,0,0,954,
955,1,0,0,0,955,957,1,0,0,0,956,958,5,219,0,0,957,956,1,0,0,0,957,958,1,
0,0,0,958,959,1,0,0,0,959,961,5,1,0,0,960,962,5,219,0,0,961,960,1,0,0,0,
961,962,1,0,0,0,962,963,1,0,0,0,963,964,3,200,100,0,964,77,1,0,0,0,965,966,
5,80,0,0,966,967,5,219,0,0,967,968,3,200,100,0,968,79,1,0,0,0,969,970,5,
81,0,0,970,971,5,219,0,0,971,972,3,200,100,0,972,81,1,0,0,0,973,974,5,82,
0,0,974,975,5,219,0,0,975,976,3,86,43,0,976,977,5,219,0,0,977,978,5,168,
0,0,978,979,5,219,0,0,979,984,3,28,14,0,980,981,5,219,0,0,981,982,5,52,0,
0,982,983,5,219,0,0,983,985,3,28,14,0,984,980,1,0,0,0,984,985,1,0,0,0,985,
999,1,0,0,0,986,990,3,84,42,0,987,989,3,88,44,0,988,987,1,0,0,0,989,992,
1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,
993,995,3,90,45,0,994,993,1,0,0,0,994,995,1,0,0,0,995,996,1,0,0,0,996,997,
5,56,0,0,997,999,1,0,0,0,998,973,1,0,0,0,998,986,1,0,0,0,999,83,1,0,0,0,
1000,1001,5,82,0,0,1001,1002,5,219,0,0,1002,1003,3,86,43,0,1003,1004,5,219,
0,0,1004,1005,5,168,0,0,1005,1007,3,292,146,0,1006,1008,3,26,13,0,1007,1006,
1,0,0,0,1007,1008,1,0,0,0,1008,85,1,0,0,0,1009,1010,3,200,100,0,1010,87,
1,0,0,0,1011,1012,5,53,0,0,1012,1013,5,219,0,0,1013,1014,3,86,43,0,1014,
1015,5,219,0,0,1015,1016,5,168,0,0,1016,1018,3,292,146,0,1017,1019,3,26,
13,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,89,1,0,0,0,1020,1021,5,52,
0,0,1021,1023,3,292,146,0,1022,1024,3,26,13,0,1023,1022,1,0,0,0,1023,1024,
1,0,0,0,1024,91,1,0,0,0,1025,1026,5,84,0,0,1026,1027,5,219,0,0,1027,1028,
3,258,129,0,1028,93,1,0,0,0,1029,1030,5,86,0,0,1030,1031,5,219,0,0,1031,
1040,3,216,108,0,1032,1034,5,219,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,
1034,1035,1,0,0,0,1035,1037,5,1,0,0,1036,1038,5,219,0,0,1037,1036,1,0,0,
0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1041,3,200,100,0,1040,1033,1,
0,0,0,1041,1042,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,95,1,0,
0,0,1044,1045,5,89,0,0,1045,1046,5,219,0,0,1046,1047,3,200,100,0,1047,97,
1,0,0,0,1048,1049,5,95,0,0,1049,1051,5,219,0,0,1050,1048,1,0,0,0,1050,1051,
1,0,0,0,1051,1052,1,0,0,0,1052,1054,3,230,115,0,1053,1055,5,219,0,0,1054,
1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1058,7,4,0,0,1057,
1059,5,219,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,
1061,3,200,100,0,1061,99,1,0,0,0,1062,1063,5,98,0,0,1063,1064,5,219,0,0,
1064,1066,3,216,108,0,1065,1067,5,219,0,0,1066,1065,1,0,0,0,1066,1067,1,
0,0,0,1067,1068,1,0,0,0,1068,1070,5,1,0,0,1069,1071,5,219,0,0,1070,1069,
1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,3,200,100,0,1073,101,
1,0,0,0,1074,1075,5,90,0,0,1075,1076,5,219,0,0,1076,1077,3,200,100,0,1077,
103,1,0,0,0,1078,1079,5,91,0,0,1079,1080,5,219,0,0,1080,1095,3,200,100,0,
1081,1083,5,219,0,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,
0,1084,1086,5,1,0,0,1085,1087,5,219,0,0,1086,1085,1,0,0,0,1086,1087,1,0,
0,0,1087,1088,1,0,0,0,1088,1093,3,200,100,0,1089,1090,5,219,0,0,1090,1091,
5,170,0,0,1091,1092,5,219,0,0,1092,1094,3,200,100,0,1093,1089,1,0,0,0,1093,
1094,1,0,0,0,1094,1096,1,0,0,0,1095,1082,1,0,0,0,1095,1096,1,0,0,0,1096,
105,1,0,0,0,1097,1098,5,102,0,0,1098,1099,5,219,0,0,1099,1101,3,230,115,
0,1100,1102,5,219,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,
0,0,1103,1105,5,189,0,0,1104,1106,5,219,0,0,1105,1104,1,0,0,0,1105,1106,
1,0,0,0,1106,1107,1,0,0,0,1107,1108,3,200,100,0,1108,107,1,0,0,0,1109,1111,
5,103,0,0,1110,1112,5,219,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,
1,0,0,0,1113,1115,3,258,129,0,1114,1116,5,219,0,0,1115,1114,1,0,0,0,1115,
1116,1,0,0,0,1116,1117,1,0,0,0,1117,1119,5,189,0,0,1118,1120,5,219,0,0,1119,
1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1122,3,200,100,0,1122,
109,1,0,0,0,1123,1127,3,112,56,0,1124,1126,3,114,57,0,1125,1124,1,0,0,0,
1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1131,1,0,0,0,
1129,1127,1,0,0,0,1130,1132,3,116,58,0,1131,1130,1,0,0,0,1131,1132,1,0,0,
0,1132,1133,1,0,0,0,1133,1134,5,107,0,0,1134,111,1,0,0,0,1135,1137,5,104,
0,0,1136,1138,5,219,0,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1139,1,
0,0,0,1139,1140,3,86,43,0,1140,1141,5,219,0,0,1141,1142,5,168,0,0,1142,1148,
3,292,146,0,1143,1147,3,12,6,0,1144,1147,3,20,10,0,1145,1147,3,26,13,0,1146,
1143,1,0,0,0,1146,1144,1,0,0,0,1146,1145,1,0,0,0,1147,1150,1,0,0,0,1148,
1146,1,0,0,0,1148,1149,1,0,0,0,1149,113,1,0,0,0,1150,1148,1,0,0,0,1151,1153,
5,105,0,0,1152,1154,5,219,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,
1,0,0,0,1155,1156,3,86,43,0,1156,1157,5,219,0,0,1157,1158,5,168,0,0,1158,
1164,3,292,146,0,1159,1163,3,12,6,0,1160,1163,3,20,10,0,1161,1163,3,26,13,
0,1162,1159,1,0,0,0,1162,1160,1,0,0,0,1162,1161,1,0,0,0,1163,1166,1,0,0,
0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,115,1,0,0,0,1166,1164,1,0,0,0,
1167,1168,5,106,0,0,1168,1174,3,292,146,0,1169,1173,3,12,6,0,1170,1173,3,
20,10,0,1171,1173,3,26,13,0,1172,1169,1,0,0,0,1172,1170,1,0,0,0,1172,1171,
1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,117,1,
0,0,0,1176,1174,1,0,0,0,1177,1179,5,109,0,0,1178,1180,5,219,0,0,1179,1178,
1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1183,5,193,0,0,1182,1184,
5,219,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1187,
3,242,121,0,1186,1188,5,219,0,0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,
1189,1,0,0,0,1189,1190,5,202,0,0,1190,119,1,0,0,0,1191,1192,5,110,0,0,1192,
1193,5,219,0,0,1193,1194,3,200,100,0,1194,121,1,0,0,0,1195,1196,5,112,0,
0,1196,1197,5,219,0,0,1197,1198,3,200,100,0,1198,1199,5,219,0,0,1199,1200,
5,16,0,0,1200,1201,5,219,0,0,1201,1202,3,200,100,0,1202,123,1,0,0,0,1203,
1204,7,5,0,0,1204,1211,5,219,0,0,1205,1206,5,81,0,0,1206,1207,5,219,0,0,
1207,1212,3,200,100,0,1208,1209,5,147,0,0,1209,1210,5,219,0,0,1210,1212,
5,113,0,0,1211,1205,1,0,0,0,1211,1208,1,0,0,0,1212,125,1,0,0,0,1213,1214,
5,118,0,0,1214,1215,5,219,0,0,1215,1216,3,200,100,0,1216,1217,5,219,0,0,
1217,1218,5,81,0,0,1218,1219,5,219,0,0,1219,1230,3,200,100,0,1220,1222,5,
219,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1225,
5,1,0,0,1224,1226,5,219,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,
1,0,0,0,1227,1229,3,200,100,0,1228,1221,1,0,0,0,1229,1232,1,0,0,0,1230,1228,
1,0,0,0,1230,1231,1,0,0,0,1231,127,1,0,0,0,1232,1230,1,0,0,0,1233,1234,5,
118,0,0,1234,1235,5,219,0,0,1235,1236,3,200,100,0,1236,1237,5,219,0,0,1237,
1238,5,80,0,0,1238,1239,5,219,0,0,1239,1250,3,200,100,0,1240,1242,5,219,
0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,5,1,
0,0,1244,1246,5,219,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,
0,0,0,1247,1249,3,200,100,0,1248,1241,1,0,0,0,1249,1252,1,0,0,0,1250,1248,
1,0,0,0,1250,1251,1,0,0,0,1251,129,1,0,0,0,1252,1250,1,0,0,0,1253,1254,5,
121,0,0,1254,1255,5,219,0,0,1255,1256,3,200,100,0,1256,1257,5,219,0,0,1257,
1258,5,76,0,0,1258,1259,5,219,0,0,1259,1264,7,6,0,0,1260,1261,5,219,0,0,
1261,1262,5,9,0,0,1262,1263,5,219,0,0,1263,1265,7,7,0,0,1264,1260,1,0,0,
0,1264,1265,1,0,0,0,1265,1268,1,0,0,0,1266,1267,5,219,0,0,1267,1269,7,8,
0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1271,5,219,
0,0,1271,1272,5,16,0,0,1272,1273,5,219,0,0,1273,1284,3,216,108,0,1274,1275,
5,219,0,0,1275,1277,5,94,0,0,1276,1278,5,219,0,0,1277,1276,1,0,0,0,1277,
1278,1,0,0,0,1278,1279,1,0,0,0,1279,1281,5,189,0,0,1280,1282,5,219,0,0,1281,
1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1285,3,200,100,0,1284,
1274,1,0,0,0,1284,1285,1,0,0,0,1285,131,1,0,0,0,1286,1299,3,134,67,0,1287,
1289,5,219,0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,
1292,7,9,0,0,1291,1293,5,219,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,
1295,1,0,0,0,1294,1296,3,134,67,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,
1298,1,0,0,0,1297,1288,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,
1300,1,0,0,0,1300,1320,1,0,0,0,1301,1299,1,0,0,0,1302,1304,3,134,67,0,1303,
1302,1,0,0,0,1303,1304,1,0,0,0,1304,1315,1,0,0,0,1305,1307,5,219,0,0,1306,
1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1310,7,9,0,0,1309,
1311,5,219,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,0,0,0,1312,
1314,3,134,67,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,
1306,1,0,0,0,1316,1317,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
1320,1,0,0,0,1319,1286,1,0,0,0,1319,1303,1,0,0,0,1320,133,1,0,0,0,1321,1339,
3,200,100,0,1322,1336,7,10,0,0,1323,1325,5,219,0,0,1324,1323,1,0,0,0,1324,
1325,1,0,0,0,1325,1326,1,0,0,0,1326,1328,5,193,0,0,1327,1329,5,219,0,0,1328,
1327,1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1332,3,242,121,0,1331,
1333,5,219,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,
1335,5,202,0,0,1335,1337,1,0,0,0,1336,1324,1,0,0,0,1336,1337,1,0,0,0,1337,
1339,1,0,0,0,1338,1321,1,0,0,0,1338,1322,1,0,0,0,1339,135,1,0,0,0,1340,1341,
5,131,0,0,1341,1342,5,219,0,0,1342,1344,3,216,108,0,1343,1345,5,219,0,0,
1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1351,5,1,0,0,
1347,1349,5,219,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,0,
0,1350,1352,3,132,66,0,1351,1348,1,0,0,0,1351,1352,1,0,0,0,1352,137,1,0,
0,0,1353,1354,3,282,141,0,1354,1355,5,219,0,0,1355,1357,1,0,0,0,1356,1353,
1,0,0,0,1356,1357,1,0,0,0,1357,1360,1,0,0,0,1358,1359,5,161,0,0,1359,1361,
5,219,0,0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,1361,1362,1,0,0,0,1362,1363,
5,133,0,0,1363,1364,5,219,0,0,1364,1366,3,258,129,0,1365,1367,3,280,140,
0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1372,1,0,0,0,1368,1370,5,219,
0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,0,1371,1373,3,248,
124,0,1372,1369,1,0,0,0,1372,1373,1,0,0,0,1373,1376,1,0,0,0,1374,1375,5,
219,0,0,1375,1377,3,260,130,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,1378,
1,0,0,0,1378,1380,3,292,146,0,1379,1381,3,26,13,0,1380,1379,1,0,0,0,1380,
1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,5,57,0,0,1383,139,1,0,0,0,1384,
1385,3,282,141,0,1385,1386,5,219,0,0,1386,1388,1,0,0,0,1387,1384,1,0,0,0,
1387,1388,1,0,0,0,1388,1391,1,0,0,0,1389,1390,5,161,0,0,1390,1392,5,219,
0,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,5,135,
0,0,1394,1395,5,219,0,0,1395,1400,3,258,129,0,1396,1398,5,219,0,0,1397,1396,
1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,3,248,124,0,1400,1397,
1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1404,3,292,146,0,1403,1405,
3,26,13,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,1406,1407,
5,57,0,0,1407,141,1,0,0,0,1408,1409,3,282,141,0,1409,1410,5,219,0,0,1410,
1412,1,0,0,0,1411,1408,1,0,0,0,1411,1412,1,0,0,0,1412,1415,1,0,0,0,1413,
1414,5,161,0,0,1414,1416,5,219,0,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,
1417,1,0,0,0,1417,1418,5,134,0,0,1418,1419,5,219,0,0,1419,1424,3,258,129,
0,1420,1422,5,219,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,
0,0,1423,1425,3,248,124,0,1424,1421,1,0,0,0,1424,1425,1,0,0,0,1425,1426,
1,0,0,0,1426,1428,3,292,146,0,1427,1429,3,26,13,0,1428,1427,1,0,0,0,1428,
1429,1,0,0,0,1429,1430,1,0,0,0,1430,1431,5,57,0,0,1431,143,1,0,0,0,1432,
1433,5,138,0,0,1433,1434,5,219,0,0,1434,1436,3,216,108,0,1435,1437,5,219,
0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1440,5,1,
0,0,1439,1441,5,219,0,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,1443,1,
0,0,0,1442,1444,3,200,100,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1446,
1,0,0,0,1445,1447,5,219,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,
1,0,0,0,1448,1450,5,1,0,0,1449,1451,5,219,0,0,1450,1449,1,0,0,0,1450,1451,
1,0,0,0,1451,1452,1,0,0,0,1452,1453,3,200,100,0,1453,145,1,0,0,0,1454,1455,
5,141,0,0,1455,1456,5,219,0,0,1456,1471,3,258,129,0,1457,1459,5,219,0,0,
1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1462,5,193,0,
0,1461,1463,5,219,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1468,1,0,
0,0,1464,1466,3,242,121,0,1465,1467,5,219,0,0,1466,1465,1,0,0,0,1466,1467,
1,0,0,0,1467,1469,1,0,0,0,1468,1464,1,0,0,0,1468,1469,1,0,0,0,1469,1470,
1,0,0,0,1470,1472,5,202,0,0,1471,1458,1,0,0,0,1471,1472,1,0,0,0,1472,147,
1,0,0,0,1473,1476,5,140,0,0,1474,1475,5,219,0,0,1475,1477,3,200,100,0,1476,
1474,1,0,0,0,1476,1477,1,0,0,0,1477,149,1,0,0,0,1478,1479,5,144,0,0,1479,
1482,5,219,0,0,1480,1481,5,130,0,0,1481,1483,5,219,0,0,1482,1480,1,0,0,0,
1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1495,3,152,76,0,1485,1487,5,219,
0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1490,5,1,
0,0,1489,1491,5,219,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,
0,0,0,1492,1494,3,152,76,0,1493,1486,1,0,0,0,1494,1497,1,0,0,0,1495,1493,
1,0,0,0,1495,1496,1,0,0,0,1496,151,1,0,0,0,1497,1495,1,0,0,0,1498,1500,3,
230,115,0,1499,1501,5,219,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,
1,0,0,0,1502,1504,5,193,0,0,1503,1505,5,219,0,0,1504,1503,1,0,0,0,1504,1505,
1,0,0,0,1505,1506,1,0,0,0,1506,1508,3,254,127,0,1507,1509,5,219,0,0,1508,
1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,1510,1513,5,202,0,0,1511,
1512,5,219,0,0,1512,1514,3,260,130,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,
1514,153,1,0,0,0,1515,1516,5,146,0,0,1516,155,1,0,0,0,1517,1523,5,147,0,
0,1518,1521,5,219,0,0,1519,1522,5,113,0,0,1520,1522,3,258,129,0,1521,1519,
1,0,0,0,1521,1520,1,0,0,0,1522,1524,1,0,0,0,1523,1518,1,0,0,0,1523,1524,
1,0,0,0,1524,157,1,0,0,0,1525,1526,5,148,0,0,1526,159,1,0,0,0,1527,1528,
5,149,0,0,1528,1529,5,219,0,0,1529,1530,3,200,100,0,1530,161,1,0,0,0,1531,
1532,5,150,0,0,1532,1533,5,219,0,0,1533,1535,3,230,115,0,1534,1536,5,219,
0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,1539,5,189,
0,0,1538,1540,5,219,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,
0,0,0,1541,1542,3,200,100,0,1542,163,1,0,0,0,1543,1544,5,151,0,0,1544,1545,
5,219,0,0,1545,1547,3,200,100,0,1546,1548,5,219,0,0,1547,1546,1,0,0,0,1547,
1548,1,0,0,0,1548,1549,1,0,0,0,1549,1551,5,1,0,0,1550,1552,5,219,0,0,1551,
1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1554,3,200,100,0,1554,
165,1,0,0,0,1555,1556,5,152,0,0,1556,1557,5,219,0,0,1557,1559,3,200,100,
0,1558,1560,5,219,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,
0,0,1561,1563,5,1,0,0,1562,1564,5,219,0,0,1563,1562,1,0,0,0,1563,1564,1,
0,0,0,1564,1565,1,0,0,0,1565,1567,3,200,100,0,1566,1568,5,219,0,0,1567,1566,
1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1571,5,1,0,0,1570,1572,
5,219,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,
3,200,100,0,1574,1576,5,219,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,
1577,1,0,0,0,1577,1579,5,1,0,0,1578,1580,5,219,0,0,1579,1578,1,0,0,0,1579,
1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,3,200,100,0,1582,167,1,0,0,0,1583,
1584,5,153,0,0,1584,1585,5,219,0,0,1585,1587,3,216,108,0,1586,1588,5,219,
0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1591,5,1,
0,0,1590,1592,5,219,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,
0,0,0,1593,1594,3,200,100,0,1594,169,1,0,0,0,1595,1596,5,154,0,0,1596,1597,
5,219,0,0,1597,1598,5,25,0,0,1598,1599,5,219,0,0,1599,1600,3,200,100,0,1600,
1604,3,292,146,0,1601,1603,3,174,87,0,1602,1601,1,0,0,0,1603,1606,1,0,0,
0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1604,1,0,0,
0,1607,1608,5,58,0,0,1608,171,1,0,0,0,1609,1611,5,87,0,0,1610,1612,5,219,
0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,3,266,
133,0,1614,1616,5,219,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,
1,0,0,0,1617,1618,3,200,100,0,1618,1627,1,0,0,0,1619,1620,3,200,100,0,1620,
1621,5,219,0,0,1621,1622,5,170,0,0,1622,1623,5,219,0,0,1623,1624,3,200,100,
0,1624,1627,1,0,0,0,1625,1627,3,200,100,0,1626,1609,1,0,0,0,1626,1619,1,
0,0,0,1626,1625,1,0,0,0,1627,173,1,0,0,0,1628,1629,5,25,0,0,1629,1630,5,
219,0,0,1630,1631,3,176,88,0,1631,1633,3,292,146,0,1632,1634,3,26,13,0,1633,
1632,1,0,0,0,1633,1634,1,0,0,0,1634,175,1,0,0,0,1635,1651,5,52,0,0,1636,
1647,3,172,86,0,1637,1639,5,219,0,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,
1639,1640,1,0,0,0,1640,1642,5,1,0,0,1641,1643,5,219,0,0,1642,1641,1,0,0,
0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1646,3,172,86,0,1645,1638,1,0,
0,0,1646,1649,1,0,0,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,1651,1,0,
0,0,1649,1647,1,0,0,0,1650,1635,1,0,0,0,1650,1636,1,0,0,0,1651,177,1,0,0,
0,1652,1653,5,155,0,0,1653,1654,5,219,0,0,1654,1663,3,200,100,0,1655,1657,
5,219,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,
5,1,0,0,1659,1661,5,219,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,
1,0,0,0,1662,1664,3,200,100,0,1663,1656,1,0,0,0,1663,1664,1,0,0,0,1664,179,
1,0,0,0,1665,1666,5,157,0,0,1666,1667,5,219,0,0,1667,1669,3,200,100,0,1668,
1670,5,219,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,
1673,5,1,0,0,1672,1674,5,219,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,
1675,1,0,0,0,1675,1676,3,200,100,0,1676,181,1,0,0,0,1677,1678,5,156,0,0,
1678,1679,5,219,0,0,1679,1681,3,230,115,0,1680,1682,5,219,0,0,1681,1680,
1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,5,189,0,0,1684,1686,
5,219,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,1687,1688,
3,200,100,0,1688,183,1,0,0,0,1689,1690,5,163,0,0,1690,185,1,0,0,0,1691,1692,
3,282,141,0,1692,1693,5,219,0,0,1693,1695,1,0,0,0,1694,1691,1,0,0,0,1694,
1695,1,0,0,0,1695,1698,1,0,0,0,1696,1697,5,161,0,0,1697,1699,5,219,0,0,1698,
1696,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1702,5,165,0,0,1701,
1703,5,219,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,
1709,3,258,129,0,1705,1707,5,219,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,
1707,1708,1,0,0,0,1708,1710,3,248,124,0,1709,1706,1,0,0,0,1709,1710,1,0,
0,0,1710,1711,1,0,0,0,1711,1713,3,292,146,0,1712,1714,3,26,13,0,1713,1712,
1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,5,59,0,0,1716,187,
1,0,0,0,1717,1719,5,169,0,0,1718,1720,5,219,0,0,1719,1718,1,0,0,0,1719,1720,
1,0,0,0,1720,1721,1,0,0,0,1721,1723,5,189,0,0,1722,1724,5,219,0,0,1723,1722,
1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1726,3,200,100,0,1726,189,
1,0,0,0,1727,1728,3,282,141,0,1728,1729,5,219,0,0,1729,1731,1,0,0,0,1730,
1727,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1733,5,172,0,0,1733,
1734,5,219,0,0,1734,1735,3,258,129,0,1735,1739,3,292,146,0,1736,1738,3,192,
96,0,1737,1736,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,
0,0,1740,1742,1,0,0,0,1741,1739,1,0,0,0,1742,1743,5,60,0,0,1743,191,1,0,
0,0,1744,1759,3,258,129,0,1745,1747,5,219,0,0,1746,1745,1,0,0,0,1746,1747,
1,0,0,0,1747,1748,1,0,0,0,1748,1753,5,193,0,0,1749,1751,5,219,0,0,1750,1749,
1,0,0,0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1754,3,254,127,0,1753,1750,
1,0,0,0,1753,1754,1,0,0,0,1754,1756,1,0,0,0,1755,1757,5,219,0,0,1756,1755,
1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,1758,1760,5,202,0,0,1759,1746,
1,0,0,0,1759,1760,1,0,0,0,1760,1763,1,0,0,0,1761,1762,5,219,0,0,1762,1764,
3,260,130,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,1766,
3,292,146,0,1766,193,1,0,0,0,1767,1768,5,173,0,0,1768,1769,5,219,0,0,1769,
1774,3,200,100,0,1770,1771,5,219,0,0,1771,1772,5,87,0,0,1772,1773,5,219,
0,0,1773,1775,3,278,139,0,1774,1770,1,0,0,0,1774,1775,1,0,0,0,1775,195,1,
0,0,0,1776,1777,5,174,0,0,1777,1778,5,219,0,0,1778,1779,3,200,100,0,1779,
197,1,0,0,0,1780,1781,5,175,0,0,1781,1782,5,219,0,0,1782,1797,3,216,108,
0,1783,1785,5,219,0,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,1785,1786,1,0,
0,0,1786,1788,5,1,0,0,1787,1789,5,219,0,0,1788,1787,1,0,0,0,1788,1789,1,
0,0,0,1789,1790,1,0,0,0,1790,1795,3,200,100,0,1791,1792,5,219,0,0,1792,1793,
5,170,0,0,1793,1794,5,219,0,0,1794,1796,3,200,100,0,1795,1791,1,0,0,0,1795,
1796,1,0,0,0,1796,1798,1,0,0,0,1797,1784,1,0,0,0,1797,1798,1,0,0,0,1798,
199,1,0,0,0,1799,1800,6,100,-1,0,1800,1860,3,276,138,0,1801,1860,3,230,115,
0,1802,1804,5,193,0,0,1803,1805,5,219,0,0,1804,1803,1,0,0,0,1804,1805,1,
0,0,0,1805,1806,1,0,0,0,1806,1817,3,200,100,0,1807,1809,5,219,0,0,1808,1807,
1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1812,5,1,0,0,1811,1813,
5,219,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1816,
3,200,100,0,1815,1808,1,0,0,0,1816,1819,1,0,0,0,1817,1815,1,0,0,0,1817,1818,
1,0,0,0,1818,1820,1,0,0,0,1819,1817,1,0,0,0,1820,1821,5,202,0,0,1821,1860,
1,0,0,0,1822,1824,5,114,0,0,1823,1825,5,219,0,0,1824,1823,1,0,0,0,1824,1825,
1,0,0,0,1825,1826,1,0,0,0,1826,1860,3,200,100,28,1827,1860,3,194,97,0,1828,
1860,3,118,59,0,1829,1831,5,10,0,0,1830,1832,5,219,0,0,1831,1830,1,0,0,0,
1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1860,3,200,100,25,1834,1836,3,230,
115,0,1835,1837,5,219,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,
1,0,0,0,1838,1840,5,187,0,0,1839,1841,5,219,0,0,1840,1839,1,0,0,0,1840,1841,
1,0,0,0,1841,1842,1,0,0,0,1842,1843,3,200,100,24,1843,1860,1,0,0,0,1844,
1846,5,195,0,0,1845,1847,5,219,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,
1848,1,0,0,0,1848,1860,3,200,100,14,1849,1851,5,199,0,0,1850,1852,5,219,
0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1860,3,200,
100,13,1854,1856,5,115,0,0,1855,1857,5,219,0,0,1856,1855,1,0,0,0,1856,1857,
1,0,0,0,1857,1858,1,0,0,0,1858,1860,3,200,100,1,1859,1799,1,0,0,0,1859,1801,
1,0,0,0,1859,1802,1,0,0,0,1859,1822,1,0,0,0,1859,1827,1,0,0,0,1859,1828,
1,0,0,0,1859,1829,1,0,0,0,1859,1834,1,0,0,0,1859,1844,1,0,0,0,1859,1849,
1,0,0,0,1859,1854,1,0,0,0,1860,2043,1,0,0,0,1861,1863,10,23,0,0,1862,1864,
5,219,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,1,0,0,0,1865,1867,
5,87,0,0,1866,1868,5,219,0,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1869,
1,0,0,0,1869,2042,3,200,100,24,1870,1872,10,22,0,0,1871,1873,5,219,0,0,1872,
1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,97,0,0,1875,
1877,5,219,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,1878,
2042,3,200,100,23,1879,1881,10,21,0,0,1880,1882,5,219,0,0,1881,1880,1,0,
0,0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,1883,1885,5,190,0,0,1884,1886,5,
219,0,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1887,1,0,0,0,1887,2042,
3,200,100,22,1888,1890,10,20,0,0,1889,1891,5,219,0,0,1890,1889,1,0,0,0,1890,
1891,1,0,0,0,1891,1892,1,0,0,0,1892,1894,5,192,0,0,1893,1895,5,219,0,0,1894,
1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,2042,3,200,100,21,
1897,1899,10,19,0,0,1898,1900,5,219,0,0,1899,1898,1,0,0,0,1899,1900,1,0,
0,0,1900,1901,1,0,0,0,1901,1903,5,191,0,0,1902,1904,5,219,0,0,1903,1902,
1,0,0,0,1903,1904,1,0,0,0,1904,1905,1,0,0,0,1905,2042,3,200,100,20,1906,
1908,10,18,0,0,1907,1909,5,219,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,
1910,1,0,0,0,1910,1912,5,194,0,0,1911,1913,5,219,0,0,1912,1911,1,0,0,0,1912,
1913,1,0,0,0,1913,1914,1,0,0,0,1914,2042,3,200,100,19,1915,1917,10,17,0,
0,1916,1918,5,219,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,
0,0,1919,1921,5,198,0,0,1920,1922,5,219,0,0,1921,1920,1,0,0,0,1921,1922,
1,0,0,0,1922,1923,1,0,0,0,1923,2042,3,200,100,18,1924,1926,10,16,0,0,1925,
1927,5,219,0,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,
1930,5,189,0,0,1929,1931,5,219,0,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,
1932,1,0,0,0,1932,2042,3,200,100,17,1933,1935,10,15,0,0,1934,1936,5,219,
0,0,1935,1934,1,0,0,0,1935,1936,1,0,0,0,1936,1937,1,0,0,0,1937,1939,5,201,
0,0,1938,1940,5,219,0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,
0,0,0,1941,2042,3,200,100,16,1942,1944,10,12,0,0,1943,1945,5,219,0,0,1944,
1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,1946,1948,5,188,0,0,1947,
1949,5,219,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,
2042,3,200,100,13,1951,1953,10,11,0,0,1952,1954,5,219,0,0,1953,1952,1,0,
0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1957,5,197,0,0,1956,1958,5,
219,0,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,2042,
3,200,100,12,1960,1962,10,10,0,0,1961,1963,5,219,0,0,1962,1961,1,0,0,0,1962,
1963,1,0,0,0,1963,1964,1,0,0,0,1964,1966,5,111,0,0,1965,1967,5,219,0,0,1966,
1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,2042,3,200,100,11,
1969,1971,10,9,0,0,1970,1972,5,219,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,
0,1972,1973,1,0,0,0,1973,1975,5,199,0,0,1974,1976,5,219,0,0,1975,1974,1,
0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,2042,3,200,100,10,1978,1980,
10,8,0,0,1979,1981,5,219,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,
1,0,0,0,1982,1984,5,195,0,0,1983,1985,5,219,0,0,1984,1983,1,0,0,0,1984,1985,
1,0,0,0,1985,1986,1,0,0,0,1986,2042,3,200,100,9,1987,1989,10,7,0,0,1988,
1990,5,219,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,
1993,5,186,0,0,1992,1994,5,219,0,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,
1995,1,0,0,0,1995,2042,3,200,100,8,1996,1998,10,6,0,0,1997,1999,5,219,0,
0,1998,1997,1,0,0,0,1998,1999,1,0,0,0,1999,2000,1,0,0,0,2000,2002,5,83,0,
0,2001,2003,5,219,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,
0,0,2004,2042,3,200,100,7,2005,2007,10,5,0,0,2006,2008,5,219,0,0,2007,2006,
1,0,0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,0,2009,2011,5,64,0,0,2010,2012,
5,219,0,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,2013,1,0,0,0,2013,2042,
3,200,100,6,2014,2016,10,4,0,0,2015,2017,5,219,0,0,2016,2015,1,0,0,0,2016,
2017,1,0,0,0,2017,2018,1,0,0,0,2018,2020,5,185,0,0,2019,2021,5,219,0,0,2020,
2019,1,0,0,0,2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,2042,3,200,100,5,2023,
2025,10,3,0,0,2024,2026,5,219,0,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,
2027,1,0,0,0,2027,2029,5,127,0,0,2028,2030,5,219,0,0,2029,2028,1,0,0,0,2029,
2030,1,0,0,0,2030,2031,1,0,0,0,2031,2042,3,200,100,4,2032,2034,10,2,0,0,
2033,2035,5,219,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,2036,1,0,0,
0,2036,2038,5,12,0,0,2037,2039,5,219,0,0,2038,2037,1,0,0,0,2038,2039,1,0,
0,0,2039,2040,1,0,0,0,2040,2042,3,200,100,3,2041,1861,1,0,0,0,2041,1870,
1,0,0,0,2041,1879,1,0,0,0,2041,1888,1,0,0,0,2041,1897,1,0,0,0,2041,1906,
1,0,0,0,2041,1915,1,0,0,0,2041,1924,1,0,0,0,2041,1933,1,0,0,0,2041,1942,
1,0,0,0,2041,1951,1,0,0,0,2041,1960,1,0,0,0,2041,1969,1,0,0,0,2041,1978,
1,0,0,0,2041,1987,1,0,0,0,2041,1996,1,0,0,0,2041,2005,1,0,0,0,2041,2014,
1,0,0,0,2041,2023,1,0,0,0,2041,2032,1,0,0,0,2042,2045,1,0,0,0,2043,2041,
1,0,0,0,2043,2044,1,0,0,0,2044,201,1,0,0,0,2045,2043,1,0,0,0,2046,2050,5,
48,0,0,2047,2050,5,161,0,0,2048,2050,3,282,141,0,2049,2046,1,0,0,0,2049,
2047,1,0,0,0,2049,2048,1,0,0,0,2050,2051,1,0,0,0,2051,2054,5,219,0,0,2052,
2053,5,183,0,0,2053,2055,5,219,0,0,2054,2052,1,0,0,0,2054,2055,1,0,0,0,2055,
2056,1,0,0,0,2056,2057,3,204,102,0,2057,203,1,0,0,0,2058,2069,3,206,103,
0,2059,2061,5,219,0,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,
0,0,2062,2064,5,1,0,0,2063,2065,5,219,0,0,2064,2063,1,0,0,0,2064,2065,1,
0,0,0,2065,2066,1,0,0,0,2066,2068,3,206,103,0,2067,2060,1,0,0,0,2068,2071,
1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,205,1,0,0,0,2071,2069,1,
0,0,0,2072,2090,3,258,129,0,2073,2075,5,219,0,0,2074,2073,1,0,0,0,2074,2075,
1,0,0,0,2075,2076,1,0,0,0,2076,2078,5,193,0,0,2077,2079,5,219,0,0,2078,2077,
1,0,0,0,2078,2079,1,0,0,0,2079,2084,1,0,0,0,2080,2082,3,254,127,0,2081,2083,
5,219,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2080,
1,0,0,0,2084,2085,1,0,0,0,2085,2086,1,0,0,0,2086,2088,5,202,0,0,2087,2089,
5,219,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2074,
1,0,0,0,2090,2091,1,0,0,0,2091,2093,1,0,0,0,2092,2094,3,280,140,0,2093,2092,
1,0,0,0,2093,2094,1,0,0,0,2094,2097,1,0,0,0,2095,2096,5,219,0,0,2096,2098,
3,260,130,0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,207,1,0,0,0,2099,2100,
5,180,0,0,2100,2101,5,219,0,0,2101,2102,3,200,100,0,2102,2104,3,292,146,
0,2103,2105,3,26,13,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,
0,0,2106,2107,5,179,0,0,2107,209,1,0,0,0,2108,2109,5,181,0,0,2109,2110,5,
219,0,0,2110,2112,3,216,108,0,2111,2113,5,219,0,0,2112,2111,1,0,0,0,2112,
2113,1,0,0,0,2113,2114,1,0,0,0,2114,2116,5,1,0,0,2115,2117,5,219,0,0,2116,
2115,1,0,0,0,2116,2117,1,0,0,0,2117,2118,1,0,0,0,2118,2119,3,200,100,0,2119,
211,1,0,0,0,2120,2121,5,182,0,0,2121,2126,5,219,0,0,2122,2127,3,230,115,
0,2123,2124,5,114,0,0,2124,2125,5,219,0,0,2125,2127,3,278,139,0,2126,2122,
1,0,0,0,2126,2123,1,0,0,0,2127,2128,1,0,0,0,2128,2130,3,292,146,0,2129,2131,
3,26,13,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,1,0,0,0,2132,2133,
5,61,0,0,2133,213,1,0,0,0,2134,2135,5,184,0,0,2135,2136,5,219,0,0,2136,2138,
3,216,108,0,2137,2139,5,219,0,0,2138,2137,1,0,0,0,2138,2139,1,0,0,0,2139,
2140,1,0,0,0,2140,2145,5,1,0,0,2141,2143,5,219,0,0,2142,2141,1,0,0,0,2142,
2143,1,0,0,0,2143,2144,1,0,0,0,2144,2146,3,132,66,0,2145,2142,1,0,0,0,2145,
2146,1,0,0,0,2146,215,1,0,0,0,2147,2149,5,3,0,0,2148,2147,1,0,0,0,2148,2149,
1,0,0,0,2149,2150,1,0,0,0,2150,2151,3,200,100,0,2151,217,1,0,0,0,2152,2155,
3,220,110,0,2153,2155,3,222,111,0,2154,2152,1,0,0,0,2154,2153,1,0,0,0,2155,
219,1,0,0,0,2156,2157,5,24,0,0,2157,2158,5,219,0,0,2158,2160,3,258,129,0,
2159,2161,3,280,140,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2175,1,0,
0,0,2162,2164,5,219,0,0,2163,2162,1,0,0,0,2163,2164,1,0,0,0,2164,2165,1,
0,0,0,2165,2167,5,193,0,0,2166,2168,5,219,0,0,2167,2166,1,0,0,0,2167,2168,
1,0,0,0,2168,2169,1,0,0,0,2169,2171,3,242,121,0,2170,2172,5,219,0,0,2171,
2170,1,0,0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2174,5,202,0,0,2174,
2176,1,0,0,0,2175,2163,1,0,0,0,2175,2176,1,0,0,0,2176,2186,1,0,0,0,2177,
2179,5,219,0,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,
2181,5,193,0,0,2181,2182,3,254,127,0,2182,2183,5,202,0,0,2183,2185,1,0,0,
0,2184,2178,1,0,0,0,2185,2188,1,0,0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,
0,2187,221,1,0,0,0,2188,2186,1,0,0,0,2189,2190,5,24,0,0,2190,2192,5,219,
0,0,2191,2193,3,230,115,0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,
1,0,0,0,2194,2195,5,4,0,0,2195,2197,3,258,129,0,2196,2198,3,280,140,0,2197,
2196,1,0,0,0,2197,2198,1,0,0,0,2198,2212,1,0,0,0,2199,2201,5,219,0,0,2200,
2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,2204,5,193,0,0,2203,
2205,5,219,0,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,
2208,3,242,121,0,2207,2209,5,219,0,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,
2209,2210,1,0,0,0,2210,2211,5,202,0,0,2211,2213,1,0,0,0,2212,2200,1,0,0,
0,2212,2213,1,0,0,0,2213,2223,1,0,0,0,2214,2216,5,219,0,0,2215,2214,1,0,
0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2218,5,193,0,0,2218,2219,3,
254,127,0,2219,2220,5,202,0,0,2220,2222,1,0,0,0,2221,2215,1,0,0,0,2222,2225,
1,0,0,0,2223,2221,1,0,0,0,2223,2224,1,0,0,0,2224,223,1,0,0,0,2225,2223,1,
0,0,0,2226,2229,3,226,113,0,2227,2229,3,228,114,0,2228,2226,1,0,0,0,2228,
2227,1,0,0,0,2229,225,1,0,0,0,2230,2232,3,230,115,0,2231,2230,1,0,0,0,2231,
2232,1,0,0,0,2232,2233,1,0,0,0,2233,2234,5,4,0,0,2234,2236,3,258,129,0,2235,
2237,3,280,140,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2240,1,0,0,0,2238,
2239,5,219,0,0,2239,2241,3,242,121,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,
2241,2243,1,0,0,0,2242,2244,3,246,123,0,2243,2242,1,0,0,0,2243,2244,1,0,
0,0,2244,2254,1,0,0,0,2245,2247,5,219,0,0,2246,2245,1,0,0,0,2246,2247,1,
0,0,0,2247,2248,1,0,0,0,2248,2249,5,193,0,0,2249,2250,3,254,127,0,2250,2251,
5,202,0,0,2251,2253,1,0,0,0,2252,2246,1,0,0,0,2253,2256,1,0,0,0,2254,2252,
1,0,0,0,2254,2255,1,0,0,0,2255,227,1,0,0,0,2256,2254,1,0,0,0,2257,2260,3,
264,132,0,2258,2259,5,219,0,0,2259,2261,3,242,121,0,2260,2258,1,0,0,0,2260,
2261,1,0,0,0,2261,2271,1,0,0,0,2262,2264,5,219,0,0,2263,2262,1,0,0,0,2263,
2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,5,193,0,0,2266,2267,3,254,127,0,
2267,2268,5,202,0,0,2268,2270,1,0,0,0,2269,2263,1,0,0,0,2270,2273,1,0,0,
0,2271,2269,1,0,0,0,2271,2272,1,0,0,0,2272,229,1,0,0,0,2273,2271,1,0,0,0,
2274,2279,3,236,118,0,2275,2279,3,232,116,0,2276,2279,3,234,117,0,2277,2279,
3,240,120,0,2278,2274,1,0,0,0,2278,2275,1,0,0,0,2278,2276,1,0,0,0,2278,2277,
1,0,0,0,2279,231,1,0,0,0,2280,2282,3,258,129,0,2281,2283,3,280,140,0,2282,
2281,1,0,0,0,2282,2283,1,0,0,0,2283,2285,1,0,0,0,2284,2286,3,246,123,0,2285,
2284,1,0,0,0,2285,2286,1,0,0,0,2286,2296,1,0,0,0,2287,2289,5,219,0,0,2288,
2287,1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,2291,5,193,0,0,2291,
2292,3,254,127,0,2292,2293,5,202,0,0,2293,2295,1,0,0,0,2294,2288,1,0,0,0,
2295,2298,1,0,0,0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,233,1,0,0,0,2298,
2296,1,0,0,0,2299,2302,3,258,129,0,2300,2302,3,262,131,0,2301,2299,1,0,0,
0,2301,2300,1,0,0,0,2302,2304,1,0,0,0,2303,2305,3,280,140,0,2304,2303,1,
0,0,0,2304,2305,1,0,0,0,2305,2307,1,0,0,0,2306,2308,5,219,0,0,2307,2306,
1,0,0,0,2307,2308,1,0,0,0,2308,2309,1,0,0,0,2309,2311,5,193,0,0,2310,2312,
5,219,0,0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,2317,1,0,0,0,2313,2315,
3,242,121,0,2314,2316,5,219,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,
2318,1,0,0,0,2317,2313,1,0,0,0,2317,2318,1,0,0,0,2318,2319,1,0,0,0,2319,
2321,5,202,0,0,2320,2322,3,246,123,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,
2322,2332,1,0,0,0,2323,2325,5,219,0,0,2324,2323,1,0,0,0,2324,2325,1,0,0,
0,2325,2326,1,0,0,0,2326,2327,5,193,0,0,2327,2328,3,254,127,0,2328,2329,
5,202,0,0,2329,2331,1,0,0,0,2330,2324,1,0,0,0,2331,2334,1,0,0,0,2332,2330,
1,0,0,0,2332,2333,1,0,0,0,2333,235,1,0,0,0,2334,2332,1,0,0,0,2335,2338,3,
232,116,0,2336,2338,3,234,117,0,2337,2335,1,0,0,0,2337,2336,1,0,0,0,2337,
2338,1,0,0,0,2338,2340,1,0,0,0,2339,2341,3,238,119,0,2340,2339,1,0,0,0,2341,
2342,1,0,0,0,2342,2340,1,0,0,0,2342,2343,1,0,0,0,2343,2345,1,0,0,0,2344,
2346,3,246,123,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,2356,1,0,0,0,2347,
2349,5,219,0,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2350,1,0,0,0,2350,
2351,5,193,0,0,2351,2352,3,254,127,0,2352,2353,5,202,0,0,2353,2355,1,0,0,
0,2354,2348,1,0,0,0,2355,2358,1,0,0,0,2356,2354,1,0,0,0,2356,2357,1,0,0,
0,2357,237,1,0,0,0,2358,2356,1,0,0,0,2359,2362,7,11,0,0,2360,2363,3,232,
116,0,2361,2363,3,234,117,0,2362,2360,1,0,0,0,2362,2361,1,0,0,0,2363,239,
1,0,0,0,2364,2365,3,246,123,0,2365,241,1,0,0,0,2366,2368,3,244,122,0,2367,
2366,1,0,0,0,2367,2368,1,0,0,0,2368,2370,1,0,0,0,2369,2371,5,219,0,0,2370,
2369,1,0,0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,2372,2374,7,9,0,0,2373,
2375,5,219,0,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2377,1,0,0,0,2376,
2367,1,0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,
2381,1,0,0,0,2380,2378,1,0,0,0,2381,2394,3,244,122,0,2382,2384,5,219,0,0,
2383,2382,1,0,0,0,2383,2384,1,0,0,0,2384,2385,1,0,0,0,2385,2387,7,9,0,0,
2386,2388,5,219,0,0,2387,2386,1,0,0,0,2387,2388,1,0,0,0,2388,2390,1,0,0,
0,2389,2391,3,244,122,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,2391,2393,1,
0,0,0,2392,2383,1,0,0,0,2393,2396,1,0,0,0,2394,2392,1,0,0,0,2394,2395,1,
0,0,0,2395,243,1,0,0,0,2396,2394,1,0,0,0,2397,2399,5,193,0,0,2398,2397,1,
0,0,0,2398,2399,1,0,0,0,2399,2402,1,0,0,0,2400,2401,7,12,0,0,2401,2403,5,
219,0,0,2402,2400,1,0,0,0,2402,2403,1,0,0,0,2403,2405,1,0,0,0,2404,2406,
5,202,0,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,2407,1,0,0,0,2407,2408,
3,200,100,0,2408,245,1,0,0,0,2409,2410,5,5,0,0,2410,2412,3,258,129,0,2411,
2413,3,280,140,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,247,1,0,0,0,2414,
2432,5,193,0,0,2415,2417,5,219,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,
2418,1,0,0,0,2418,2429,3,250,125,0,2419,2421,5,219,0,0,2420,2419,1,0,0,0,
2420,2421,1,0,0,0,2421,2422,1,0,0,0,2422,2424,5,1,0,0,2423,2425,5,219,0,
0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,2426,1,0,0,0,2426,2428,3,250,
125,0,2427,2420,1,0,0,0,2428,2431,1,0,0,0,2429,2427,1,0,0,0,2429,2430,1,
0,0,0,2430,2433,1,0,0,0,2431,2429,1,0,0,0,2432,2416,1,0,0,0,2432,2433,1,
0,0,0,2433,2435,1,0,0,0,2434,2436,5,219,0,0,2435,2434,1,0,0,0,2435,2436,
1,0,0,0,2436,2437,1,0,0,0,2437,2438,5,202,0,0,2438,249,1,0,0,0,2439,2440,
5,122,0,0,2440,2442,5,219,0,0,2441,2439,1,0,0,0,2441,2442,1,0,0,0,2442,2445,
1,0,0,0,2443,2444,7,13,0,0,2444,2446,5,219,0,0,2445,2443,1,0,0,0,2445,2446,
1,0,0,0,2446,2449,1,0,0,0,2447,2448,5,129,0,0,2448,2450,5,219,0,0,2449,2447,
1,0,0,0,2449,2450,1,0,0,0,2450,2451,1,0,0,0,2451,2453,3,258,129,0,2452,2454,
3,280,140,0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,2463,1,0,0,0,2455,2457,
5,219,0,0,2456,2455,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,0,2458,2460,
5,193,0,0,2459,2461,5,219,0,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2462,
1,0,0,0,2462,2464,5,202,0,0,2463,2456,1,0,0,0,2463,2464,1,0,0,0,2464,2469,
1,0,0,0,2465,2467,5,219,0,0,2466,2465,1,0,0,0,2466,2467,1,0,0,0,2467,2468,
1,0,0,0,2468,2470,3,260,130,0,2469,2466,1,0,0,0,2469,2470,1,0,0,0,2470,2475,
1,0,0,0,2471,2473,5,219,0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,
1,0,0,0,2474,2476,3,252,126,0,2475,2472,1,0,0,0,2475,2476,1,0,0,0,2476,251,
1,0,0,0,2477,2479,5,189,0,0,2478,2480,5,219,0,0,2479,2478,1,0,0,0,2479,2480,
1,0,0,0,2480,2481,1,0,0,0,2481,2482,3,200,100,0,2482,253,1,0,0,0,2483,2494,
3,256,128,0,2484,2486,5,219,0,0,2485,2484,1,0,0,0,2485,2486,1,0,0,0,2486,
2487,1,0,0,0,2487,2489,5,1,0,0,2488,2490,5,219,0,0,2489,2488,1,0,0,0,2489,
2490,1,0,0,0,2490,2491,1,0,0,0,2491,2493,3,256,128,0,2492,2485,1,0,0,0,2493,
2496,1,0,0,0,2494,2492,1,0,0,0,2494,2495,1,0,0,0,2495,255,1,0,0,0,2496,2494,
1,0,0,0,2497,2498,3,200,100,0,2498,2499,5,219,0,0,2499,2500,5,170,0,0,2500,
2501,5,219,0,0,2501,2503,1,0,0,0,2502,2497,1,0,0,0,2502,2503,1,0,0,0,2503,
2504,1,0,0,0,2504,2505,3,200,100,0,2505,257,1,0,0,0,2506,2509,5,220,0,0,
2507,2509,3,284,142,0,2508,2506,1,0,0,0,2508,2507,1,0,0,0,2509,2510,1,0,
0,0,2510,2508,1,0,0,0,2510,2511,1,0,0,0,2511,259,1,0,0,0,2512,2514,5,16,
0,0,2513,2515,5,219,0,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2518,1,
0,0,0,2516,2517,5,114,0,0,2517,2519,5,219,0,0,2518,2516,1,0,0,0,2518,2519,
1,0,0,0,2519,2520,1,0,0,0,2520,2525,3,278,139,0,2521,2523,5,219,0,0,2522,
2521,1,0,0,0,2522,2523,1,0,0,0,2523,2524,1,0,0,0,2524,2526,3,270,135,0,2525,
2522,1,0,0,0,2525,2526,1,0,0,0,2526,261,1,0,0,0,2527,2548,5,20,0,0,2528,
2548,5,23,0,0,2529,2548,5,30,0,0,2530,2548,5,33,0,0,2531,2548,5,50,0,0,2532,
2548,5,88,0,0,2533,2548,5,92,0,0,2534,2548,5,159,0,0,2535,2544,5,164,0,0,
2536,2538,5,219,0,0,2537,2536,1,0,0,0,2537,2538,1,0,0,0,2538,2539,1,0,0,
0,2539,2541,5,197,0,0,2540,2542,5,219,0,0,2541,2540,1,0,0,0,2541,2542,1,
0,0,0,2542,2543,1,0,0,0,2543,2545,3,200,100,0,2544,2537,1,0,0,0,2544,2545,
1,0,0,0,2545,2548,1,0,0,0,2546,2548,5,177,0,0,2547,2527,1,0,0,0,2547,2528,
1,0,0,0,2547,2529,1,0,0,0,2547,2530,1,0,0,0,2547,2531,1,0,0,0,2547,2532,
1,0,0,0,2547,2533,1,0,0,0,2547,2534,1,0,0,0,2547,2535,1,0,0,0,2547,2546,
1,0,0,0,2548,263,1,0,0,0,2549,2554,5,220,0,0,2550,2553,3,284,142,0,2551,
2553,5,220,0,0,2552,2550,1,0,0,0,2552,2551,1,0,0,0,2553,2556,1,0,0,0,2554,
2552,1,0,0,0,2554,2555,1,0,0,0,2555,2565,1,0,0,0,2556,2554,1,0,0,0,2557,
2560,3,284,142,0,2558,2561,3,284,142,0,2559,2561,5,220,0,0,2560,2558,1,0,
0,0,2560,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2560,1,0,0,0,2562,2563,1,0,
0,0,2563,2565,1,0,0,0,2564,2549,1,0,0,0,2564,2557,1,0,0,0,2565,265,1,0,0,
0,2566,2567,7,14,0,0,2567,267,1,0,0,0,2568,2573,3,258,129,0,2569,2570,7,
11,0,0,2570,2572,3,258,129,0,2571,2569,1,0,0,0,2572,2575,1,0,0,0,2573,2571,
1,0,0,0,2573,2574,1,0,0,0,2574,269,1,0,0,0,2575,2573,1,0,0,0,2576,2578,5,
197,0,0,2577,2579,5,219,0,0,2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,2582,
1,0,0,0,2580,2583,5,209,0,0,2581,2583,3,258,129,0,2582,2580,1,0,0,0,2582,
2581,1,0,0,0,2583,271,1,0,0,0,2584,2593,3,264,132,0,2585,2587,5,219,0,0,
2586,2585,1,0,0,0,2586,2587,1,0,0,0,2587,2588,1,0,0,0,2588,2590,5,195,0,
0,2589,2591,5,219,0,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,
0,0,2592,2594,3,264,132,0,2593,2586,1,0,0,0,2593,2594,1,0,0,0,2594,273,1,
0,0,0,2595,2596,3,258,129,0,2596,2597,5,217,0,0,2597,275,1,0,0,0,2598,2599,
7,15,0,0,2599,277,1,0,0,0,2600,2603,3,262,131,0,2601,2603,3,268,134,0,2602,
2600,1,0,0,0,2602,2601,1,0,0,0,2603,2612,1,0,0,0,2604,2606,5,219,0,0,2605,
2604,1,0,0,0,2605,2606,1,0,0,0,2606,2607,1,0,0,0,2607,2609,5,193,0,0,2608,
2610,5,219,0,0,2609,2608,1,0,0,0,2609,2610,1,0,0,0,2610,2611,1,0,0,0,2611,
2613,5,202,0,0,2612,2605,1,0,0,0,2612,2613,1,0,0,0,2613,279,1,0,0,0,2614,
2615,7,16,0,0,2615,281,1,0,0,0,2616,2617,7,17,0,0,2617,283,1,0,0,0,2618,
2619,7,18,0,0,2619,285,1,0,0,0,2620,2621,5,214,0,0,2621,287,1,0,0,0,2622,
2623,5,215,0,0,2623,289,1,0,0,0,2624,2626,5,219,0,0,2625,2624,1,0,0,0,2625,
2626,1,0,0,0,2626,2630,1,0,0,0,2627,2631,5,213,0,0,2628,2631,3,288,144,0,
2629,2631,3,286,143,0,2630,2627,1,0,0,0,2630,2628,1,0,0,0,2630,2629,1,0,
0,0,2631,2633,1,0,0,0,2632,2634,5,219,0,0,2633,2632,1,0,0,0,2633,2634,1,
0,0,0,2634,291,1,0,0,0,2635,2644,3,290,145,0,2636,2638,5,219,0,0,2637,2636,
1,0,0,0,2637,2638,1,0,0,0,2638,2639,1,0,0,0,2639,2641,5,217,0,0,2640,2642,
5,219,0,0,2641,2640,1,0,0,0,2641,2642,1,0,0,0,2642,2644,1,0,0,0,2643,2635,
1,0,0,0,2643,2637,1,0,0,0,2644,2647,1,0,0,0,2645,2643,1,0,0,0,2645,2646,
1,0,0,0,2646,293,1,0,0,0,2647,2645,1,0,0,0,451,298,303,310,313,316,321,325,
330,334,339,343,348,352,364,370,376,380,386,393,397,403,409,415,426,438,
442,448,454,460,469,475,479,483,487,492,501,574,580,584,587,603,607,612,
615,620,626,630,635,640,644,647,651,657,661,668,674,678,681,686,696,699,
702,706,712,716,721,728,732,736,740,743,748,759,772,779,788,795,799,802,
811,816,826,832,842,846,856,864,869,875,879,882,886,897,901,906,911,915,
919,923,926,929,932,935,939,947,951,954,957,961,984,990,994,998,1007,1018,
1023,1033,1037,1042,1050,1054,1058,1066,1070,1082,1086,1093,1095,1101,1105,
1111,1115,1119,1127,1131,1137,1146,1148,1153,1162,1164,1172,1174,1179,1183,
1187,1211,1221,1225,1230,1241,1245,1250,1264,1268,1277,1281,1284,1288,1292,
1295,1299,1303,1306,1310,1313,1317,1319,1324,1328,1332,1336,1338,1344,1348,
1351,1356,1360,1366,1369,1372,1376,1380,1387,1391,1397,1400,1404,1411,1415,
1421,1424,1428,1436,1440,1443,1446,1450,1458,1462,1466,1468,1471,1476,1482,
1486,1490,1495,1500,1504,1508,1513,1521,1523,1535,1539,1547,1551,1559,1563,
1567,1571,1575,1579,1587,1591,1604,1611,1615,1626,1633,1638,1642,1647,1650,
1656,1660,1663,1669,1673,1681,1685,1694,1698,1702,1706,1709,1713,1719,1723,
1730,1739,1746,1750,1753,1756,1759,1763,1774,1784,1788,1795,1797,1804,1808,
1812,1817,1824,1831,1836,1840,1846,1851,1856,1859,1863,1867,1872,1876,1881,
1885,1890,1894,1899,1903,1908,1912,1917,1921,1926,1930,1935,1939,1944,1948,
1953,1957,1962,1966,1971,1975,1980,1984,1989,1993,1998,2002,2007,2011,2016,
2020,2025,2029,2034,2038,2041,2043,2049,2054,2060,2064,2069,2074,2078,2082,
2084,2088,2090,2093,2097,2104,2112,2116,2126,2130,2138,2142,2145,2148,2154,
2160,2163,2167,2171,2175,2178,2186,2192,2197,2200,2204,2208,2212,2215,2223,
2228,2231,2236,2240,2243,2246,2254,2260,2263,2271,2278,2282,2285,2288,2296,
2301,2304,2307,2311,2315,2317,2321,2324,2332,2337,2342,2345,2348,2356,2362,
2367,2370,2374,2378,2383,2387,2390,2394,2398,2402,2405,2412,2416,2420,2424,
2429,2432,2435,2441,2445,2449,2453,2456,2460,2463,2466,2469,2472,2475,2479,
2485,2489,2494,2502,2508,2510,2514,2518,2522,2525,2537,2541,2544,2547,2552,
2554,2560,2562,2564,2573,2578,2582,2586,2590,2593,2602,2605,2609,2612,2625,
2630,2633,2637,2641,2643,2645];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class vbaParser extends antlr4.Parser {

    static grammarFileName = "vba.g4";
    static literalNames = [ null, "','", "';'", "'#'", "'.'", "'!'", "'%'", 
                            "'@'", "'$'", null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'&'", "':='", null, 
                            "'='", "'>='", "'>'", "'<='", "'('", "'<'", 
                            "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", 
                            "'^'", "')'", "'['", "']'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'''", "':'", "'_'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                             "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", 
                             "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", 
                             "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", 
                             "CLASS", "CLOSE", "COLLECTION", "CONST", "DATABASE", 
                             "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", 
                             "DEFDBL", "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", 
                             "DEFOBJ", "DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", 
                             "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
                             "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
                             "END_SELECT", "END_SUB", "END_TYPE", "END_WITH", 
                             "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
                             "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", 
                             "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", 
                             "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
                             "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
                             "IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", 
                             "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", 
                             "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", 
                             "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF", 
                             "MACRO_ELSE", "MACRO_END_IF", "ME", "MID", 
                             "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
                             "NOTHING", "NULL_", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
                             "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", 
                             "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
                             "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
                             "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
                             "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", 
                             "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", 
                             "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", 
                             "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", 
                             "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", 
                             "SHARED", "SINGLE", "SPC", "STATIC", "STEP", 
                             "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", 
                             "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", 
                             "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", 
                             "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", 
                             "XOR", "AMPERSAND", "ASSIGN", "DIV", "EQ", 
                             "GEQ", "GT", "LEQ", "LPAREN", "LT", "MINUS", 
                             "MINUS_EQ", "MULT", "NEQ", "PLUS", "PLUS_EQ", 
                             "POW", "RPAREN", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", 
                             "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", 
                             "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
                             "DATELITERAL", "LINE_CONTINUATION", "NEWLINE", 
                             "REMCOMMENT", "COMMENT", "SINGLEQUOTE", "COLON", 
                             "UNDERSCORE", "WS", "IDENTIFIER" ];
    static ruleNames = [ "startRule", "module", "moduleHeader", "moduleConfig", 
                         "moduleConfigElement", "moduleAttributes", "moduleDeclarations", 
                         "moduleOption", "moduleDeclarationsElement", "macroStmt", 
                         "moduleBody", "moduleBodyElement", "attributeStmt", 
                         "block", "blockStmt", "appactivateStmt", "beepStmt", 
                         "chdirStmt", "chdriveStmt", "closeStmt", "constStmt", 
                         "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
                         "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", 
                         "enumerationStmt_Constant", "eraseStmt", "errorStmt", 
                         "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", 
                         "forNextStmt", "functionStmt", "getStmt", "goSubStmt", 
                         "goToStmt", "ifThenElseStmt", "ifBlockStmt", "ifConditionStmt", 
                         "ifElseIfBlockStmt", "ifElseBlockStmt", "implementsStmt", 
                         "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
                         "loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", 
                         "macroIfThenElseStmt", "macroIfBlockStmt", "macroElseIfBlockStmt", 
                         "macroElseBlockStmt", "midStmt", "mkdirStmt", "nameStmt", 
                         "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
                         "outputList", "outputList_Expression", "printStmt", 
                         "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
                         "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
                         "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
                         "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
                         "seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", 
                         "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
                         "stopStmt", "subStmt", "timeStmt", "typeStmt", 
                         "typeStmt_Element", "typeOfStmt", "unloadStmt", 
                         "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
                         "variableSubStmt", "whileWendStmt", "widthStmt", 
                         "withStmt", "writeStmt", "fileNumber", "explicitCallStmt", 
                         "eCS_ProcedureCall", "eCS_MemberProcedureCall", 
                         "implicitCallStmt_InBlock", "iCS_B_MemberProcedureCall", 
                         "iCS_B_ProcedureCall", "implicitCallStmt_InStmt", 
                         "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
                         "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", 
                         "argsCall", "argCall", "dictionaryCallStmt", "argList", 
                         "arg", "argDefaultValue", "subscripts", "subscript_", 
                         "ambiguousIdentifier", "asTypeClause", "baseType", 
                         "certainIdentifier", "comparisonOperator", "complexType", 
                         "fieldLength", "letterrange", "lineLabel", "literal", 
                         "type_", "typeHint", "visibility", "ambiguousKeyword", 
                         "remComment", "comment", "endOfLine", "endOfStatement" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = vbaParser.ruleNames;
        this.literalNames = vbaParser.literalNames;
        this.symbolicNames = vbaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 100:
    	    		return this.valueStmt_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    valueStmt_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 23);
    		case 1:
    			return this.precpred(this._ctx, 22);
    		case 2:
    			return this.precpred(this._ctx, 21);
    		case 3:
    			return this.precpred(this._ctx, 20);
    		case 4:
    			return this.precpred(this._ctx, 19);
    		case 5:
    			return this.precpred(this._ctx, 18);
    		case 6:
    			return this.precpred(this._ctx, 17);
    		case 7:
    			return this.precpred(this._ctx, 16);
    		case 8:
    			return this.precpred(this._ctx, 15);
    		case 9:
    			return this.precpred(this._ctx, 12);
    		case 10:
    			return this.precpred(this._ctx, 11);
    		case 11:
    			return this.precpred(this._ctx, 10);
    		case 12:
    			return this.precpred(this._ctx, 9);
    		case 13:
    			return this.precpred(this._ctx, 8);
    		case 14:
    			return this.precpred(this._ctx, 7);
    		case 15:
    			return this.precpred(this._ctx, 6);
    		case 16:
    			return this.precpred(this._ctx, 5);
    		case 17:
    			return this.precpred(this._ctx, 4);
    		case 18:
    			return this.precpred(this._ctx, 3);
    		case 19:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, vbaParser.RULE_startRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        this.module();
	        this.state = 295;
	        this.match(vbaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, vbaParser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 298;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 297;
	            this.match(vbaParser.WS);

	        }
	        this.state = 303;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 300;
	                this.endOfLine(); 
	            }
	            this.state = 305;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.VERSION) {
	            this.state = 306;
	            this.moduleHeader();
	            this.state = 310;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 307;
	                    this.endOfLine(); 
	                }
	                this.state = 312;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	            }

	        }

	        this.state = 316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.BEGIN) {
	            this.state = 315;
	            this.moduleConfig();
	        }

	        this.state = 321;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 318;
	                this.endOfLine(); 
	            }
	            this.state = 323;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.ATTRIBUTE) {
	            this.state = 324;
	            this.moduleAttributes();
	        }

	        this.state = 330;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 327;
	                this.endOfLine(); 
	            }
	            this.state = 332;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	        this.state = 334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 333;
	            this.moduleDeclarations();

	        }
	        this.state = 339;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 336;
	                this.endOfLine(); 
	            }
	            this.state = 341;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	        this.state = 343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.FUNCTION - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.MACRO_CONST - 75)) | (1 << (vbaParser.MACRO_IF - 75)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (vbaParser.PRIVATE - 132)) | (1 << (vbaParser.PROPERTY_GET - 132)) | (1 << (vbaParser.PROPERTY_LET - 132)) | (1 << (vbaParser.PROPERTY_SET - 132)) | (1 << (vbaParser.PUBLIC - 132)) | (1 << (vbaParser.STATIC - 132)))) !== 0) || _la===vbaParser.SUB) {
	            this.state = 342;
	            this.moduleBody();
	        }

	        this.state = 348;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 345;
	                this.endOfLine(); 
	            }
	            this.state = 350;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	        this.state = 352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 351;
	            this.match(vbaParser.WS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleHeader() {
	    let localctx = new ModuleHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, vbaParser.RULE_moduleHeader);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.match(vbaParser.VERSION);
	        this.state = 355;
	        this.match(vbaParser.WS);
	        this.state = 356;
	        this.match(vbaParser.DOUBLELITERAL);
	        this.state = 357;
	        this.match(vbaParser.WS);
	        this.state = 358;
	        this.match(vbaParser.CLASS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleConfig() {
	    let localctx = new ModuleConfigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, vbaParser.RULE_moduleConfig);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(vbaParser.BEGIN);
	        this.state = 364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0)) {
	            this.state = 361;
	            this.endOfLine();
	            this.state = 366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 368; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 367;
	        		this.moduleConfigElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 370; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,14, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 372;
	        this.match(vbaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleConfigElement() {
	    let localctx = new ModuleConfigElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, vbaParser.RULE_moduleConfigElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 374;
	        this.ambiguousIdentifier();
	        this.state = 376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 375;
	            this.match(vbaParser.WS);
	        }

	        this.state = 378;
	        this.match(vbaParser.EQ);
	        this.state = 380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 379;
	            this.match(vbaParser.WS);
	        }

	        this.state = 382;
	        this.literal();
	        this.state = 386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0)) {
	            this.state = 383;
	            this.endOfLine();
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleAttributes() {
	    let localctx = new ModuleAttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, vbaParser.RULE_moduleAttributes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 389;
	            this.attributeStmt();
	            this.state = 391; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 390;
	            		this.endOfLine();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 393; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,18, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 397; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===vbaParser.ATTRIBUTE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclarations() {
	    let localctx = new ModuleDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, vbaParser.RULE_moduleDeclarations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.moduleDeclarationsElement();
	        this.state = 409;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 401; 
	                this._errHandler.sync(this);
	                var _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 400;
	                		this.endOfLine();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 403; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,20, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                this.state = 405;
	                this.moduleDeclarationsElement(); 
	            }
	            this.state = 411;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	        this.state = 415;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 412;
	                this.endOfLine(); 
	            }
	            this.state = 417;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleOption() {
	    let localctx = new ModuleOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, vbaParser.RULE_moduleOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.OPTION_BASE:
	            localctx = new OptionBaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 418;
	            this.match(vbaParser.OPTION_BASE);
	            this.state = 419;
	            this.match(vbaParser.WS);
	            this.state = 420;
	            this.match(vbaParser.SHORTLITERAL);
	            break;
	        case vbaParser.OPTION_COMPARE:
	            localctx = new OptionCompareStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            this.match(vbaParser.OPTION_COMPARE);
	            this.state = 422;
	            this.match(vbaParser.WS);
	            this.state = 423;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.BINARY || _la===vbaParser.DATABASE || _la===vbaParser.TEXT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case vbaParser.OPTION_EXPLICIT:
	            localctx = new OptionExplicitStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 424;
	            this.match(vbaParser.OPTION_EXPLICIT);
	            break;
	        case vbaParser.OPTION_PRIVATE_MODULE:
	            localctx = new OptionPrivateModuleStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 425;
	            this.match(vbaParser.OPTION_PRIVATE_MODULE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclarationsElement() {
	    let localctx = new ModuleDeclarationsElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, vbaParser.RULE_moduleDeclarationsElement);
	    try {
	        this.state = 438;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 428;
	            this.comment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 429;
	            this.declareStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 430;
	            this.enumerationStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 431;
	            this.eventStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 432;
	            this.constStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 433;
	            this.implementsStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 434;
	            this.variableStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 435;
	            this.moduleOption();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 436;
	            this.typeStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 437;
	            this.macroStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroStmt() {
	    let localctx = new MacroStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, vbaParser.RULE_macroStmt);
	    try {
	        this.state = 442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.MACRO_CONST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 440;
	            this.macroConstStmt();
	            break;
	        case vbaParser.MACRO_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.macroIfThenElseStmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBody() {
	    let localctx = new ModuleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, vbaParser.RULE_moduleBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.moduleBodyElement();
	        this.state = 454;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 446; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 445;
	                    this.endOfLine();
	                    this.state = 448; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) !== 0));
	                this.state = 450;
	                this.moduleBodyElement(); 
	            }
	            this.state = 456;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	        this.state = 460;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 457;
	                this.endOfLine(); 
	            }
	            this.state = 462;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBodyElement() {
	    let localctx = new ModuleBodyElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, vbaParser.RULE_moduleBodyElement);
	    try {
	        this.state = 469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 463;
	            this.functionStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 464;
	            this.propertyGetStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 465;
	            this.propertySetStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 466;
	            this.propertyLetStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 467;
	            this.subStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 468;
	            this.macroStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeStmt() {
	    let localctx = new AttributeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, vbaParser.RULE_attributeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(vbaParser.ATTRIBUTE);
	        this.state = 472;
	        this.match(vbaParser.WS);
	        this.state = 473;
	        this.implicitCallStmt_InStmt();
	        this.state = 475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 474;
	            this.match(vbaParser.WS);
	        }

	        this.state = 477;
	        this.match(vbaParser.EQ);
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 478;
	            this.match(vbaParser.WS);
	        }

	        this.state = 481;
	        this.literal();
	        this.state = 492;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 483;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 482;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 485;
	                this.match(vbaParser.T__0);
	                this.state = 487;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 486;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 489;
	                this.literal(); 
	            }
	            this.state = 494;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, vbaParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.blockStmt();
	        this.state = 501;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 496;
	                this.endOfStatement();
	                this.state = 497;
	                this.blockStmt(); 
	            }
	            this.state = 503;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	        this.state = 504;
	        this.endOfStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStmt() {
	    let localctx = new BlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, vbaParser.RULE_blockStmt);
	    try {
	        this.state = 574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 506;
	            this.lineLabel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 507;
	            this.appactivateStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 508;
	            this.attributeStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 509;
	            this.beepStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 510;
	            this.chdirStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 511;
	            this.chdriveStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 512;
	            this.closeStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 513;
	            this.constStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 514;
	            this.dateStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 515;
	            this.deleteSettingStmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 516;
	            this.deftypeStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 517;
	            this.doLoopStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 518;
	            this.endStmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 519;
	            this.eraseStmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 520;
	            this.errorStmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 521;
	            this.exitStmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 522;
	            this.explicitCallStmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 523;
	            this.filecopyStmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 524;
	            this.forEachStmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 525;
	            this.forNextStmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 526;
	            this.getStmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 527;
	            this.goSubStmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 528;
	            this.goToStmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 529;
	            this.ifThenElseStmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 530;
	            this.implementsStmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 531;
	            this.inputStmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 532;
	            this.killStmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 533;
	            this.letStmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 534;
	            this.lineInputStmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 535;
	            this.loadStmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 536;
	            this.lockStmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 537;
	            this.lsetStmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 538;
	            this.macroStmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 539;
	            this.midStmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 540;
	            this.mkdirStmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 541;
	            this.nameStmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 542;
	            this.onErrorStmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 543;
	            this.onGoToStmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 544;
	            this.onGoSubStmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 545;
	            this.openStmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 546;
	            this.printStmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 547;
	            this.putStmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 548;
	            this.raiseEventStmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 549;
	            this.randomizeStmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 550;
	            this.redimStmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 551;
	            this.resetStmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 552;
	            this.resumeStmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 553;
	            this.returnStmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 554;
	            this.rmdirStmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 555;
	            this.rsetStmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 556;
	            this.savepictureStmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 557;
	            this.saveSettingStmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 558;
	            this.seekStmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 559;
	            this.selectCaseStmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 560;
	            this.sendkeysStmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 561;
	            this.setattrStmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 562;
	            this.setStmt();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 563;
	            this.stopStmt();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 564;
	            this.timeStmt();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 565;
	            this.unloadStmt();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 566;
	            this.unlockStmt();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 567;
	            this.variableStmt();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 568;
	            this.whileWendStmt();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 569;
	            this.widthStmt();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 570;
	            this.withStmt();
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 571;
	            this.writeStmt();
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 572;
	            this.implicitCallStmt_InBlock();
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 573;
	            this.implicitCallStmt_InStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	appactivateStmt() {
	    let localctx = new AppactivateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, vbaParser.RULE_appactivateStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        this.match(vbaParser.APPACTIVATE);
	        this.state = 577;
	        this.match(vbaParser.WS);
	        this.state = 578;
	        this.valueStmt(0);
	        this.state = 587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 579;
	                this.match(vbaParser.WS);
	            }

	            this.state = 582;
	            this.match(vbaParser.T__0);
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 583;
	                this.match(vbaParser.WS);
	            }

	            this.state = 586;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beepStmt() {
	    let localctx = new BeepStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, vbaParser.RULE_beepStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.match(vbaParser.BEEP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chdirStmt() {
	    let localctx = new ChdirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, vbaParser.RULE_chdirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(vbaParser.CHDIR);
	        this.state = 592;
	        this.match(vbaParser.WS);
	        this.state = 593;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chdriveStmt() {
	    let localctx = new ChdriveStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, vbaParser.RULE_chdriveStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.match(vbaParser.CHDRIVE);
	        this.state = 596;
	        this.match(vbaParser.WS);
	        this.state = 597;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeStmt() {
	    let localctx = new CloseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, vbaParser.RULE_closeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.match(vbaParser.CLOSE);
	        this.state = 615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 600;
	            this.match(vbaParser.WS);
	            this.state = 601;
	            this.fileNumber();
	            this.state = 612;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 603;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 602;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 605;
	                    this.match(vbaParser.T__0);
	                    this.state = 607;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 606;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 609;
	                    this.fileNumber(); 
	                }
	                this.state = 614;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constStmt() {
	    let localctx = new ConstStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, vbaParser.RULE_constStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 617;
	            this.visibility();
	            this.state = 618;
	            this.match(vbaParser.WS);
	        }

	        this.state = 622;
	        this.match(vbaParser.CONST);
	        this.state = 623;
	        this.match(vbaParser.WS);
	        this.state = 624;
	        this.constSubStmt();
	        this.state = 635;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 626;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 625;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 628;
	                this.match(vbaParser.T__0);
	                this.state = 630;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 629;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 632;
	                this.constSubStmt(); 
	            }
	            this.state = 637;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constSubStmt() {
	    let localctx = new ConstSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, vbaParser.RULE_constSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.ambiguousIdentifier();
	        this.state = 640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 639;
	            this.typeHint();
	        }

	        this.state = 644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 642;
	            this.match(vbaParser.WS);
	            this.state = 643;
	            this.asTypeClause();

	        }
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 646;
	            this.match(vbaParser.WS);
	        }

	        this.state = 649;
	        this.match(vbaParser.EQ);
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 650;
	            this.match(vbaParser.WS);
	        }

	        this.state = 653;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateStmt() {
	    let localctx = new DateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, vbaParser.RULE_dateStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(vbaParser.DATE);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 656;
	            this.match(vbaParser.WS);
	        }

	        this.state = 659;
	        this.match(vbaParser.EQ);
	        this.state = 661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 660;
	            this.match(vbaParser.WS);
	        }

	        this.state = 663;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareStmt() {
	    let localctx = new DeclareStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, vbaParser.RULE_declareStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 665;
	            this.visibility();
	            this.state = 666;
	            this.match(vbaParser.WS);
	        }

	        this.state = 670;
	        this.match(vbaParser.DECLARE);
	        this.state = 671;
	        this.match(vbaParser.WS);
	        this.state = 674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.PTRSAFE) {
	            this.state = 672;
	            this.match(vbaParser.PTRSAFE);
	            this.state = 673;
	            this.match(vbaParser.WS);
	        }

	        this.state = 681;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.FUNCTION:
	            this.state = 676;
	            this.match(vbaParser.FUNCTION);
	            this.state = 678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	                this.state = 677;
	                this.typeHint();
	            }

	            break;
	        case vbaParser.SUB:
	            this.state = 680;
	            this.match(vbaParser.SUB);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 683;
	        this.match(vbaParser.WS);
	        this.state = 684;
	        this.ambiguousIdentifier();
	        this.state = 686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 685;
	            this.typeHint();
	        }

	        this.state = 688;
	        this.match(vbaParser.WS);
	        this.state = 689;
	        this.match(vbaParser.LIB);
	        this.state = 690;
	        this.match(vbaParser.WS);
	        this.state = 691;
	        this.match(vbaParser.STRINGLITERAL);
	        this.state = 696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 692;
	            this.match(vbaParser.WS);
	            this.state = 693;
	            this.match(vbaParser.ALIAS);
	            this.state = 694;
	            this.match(vbaParser.WS);
	            this.state = 695;
	            this.match(vbaParser.STRINGLITERAL);

	        }
	        this.state = 702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 698;
	                this.match(vbaParser.WS);
	            }

	            this.state = 701;
	            this.argList();

	        }
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 704;
	            this.match(vbaParser.WS);
	            this.state = 705;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deftypeStmt() {
	    let localctx = new DeftypeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, vbaParser.RULE_deftypeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        _la = this._input.LA(1);
	        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (vbaParser.DEFBOOL - 35)) | (1 << (vbaParser.DEFBYTE - 35)) | (1 << (vbaParser.DEFDATE - 35)) | (1 << (vbaParser.DEFDBL - 35)) | (1 << (vbaParser.DEFDEC - 35)) | (1 << (vbaParser.DEFCUR - 35)) | (1 << (vbaParser.DEFINT - 35)) | (1 << (vbaParser.DEFLNG - 35)) | (1 << (vbaParser.DEFOBJ - 35)) | (1 << (vbaParser.DEFSNG - 35)) | (1 << (vbaParser.DEFSTR - 35)) | (1 << (vbaParser.DEFVAR - 35)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 709;
	        this.match(vbaParser.WS);
	        this.state = 710;
	        this.letterrange();
	        this.state = 721;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 712;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 711;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 714;
	                this.match(vbaParser.T__0);
	                this.state = 716;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 715;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 718;
	                this.letterrange(); 
	            }
	            this.state = 723;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteSettingStmt() {
	    let localctx = new DeleteSettingStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, vbaParser.RULE_deleteSettingStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.match(vbaParser.DELETESETTING);
	        this.state = 725;
	        this.match(vbaParser.WS);
	        this.state = 726;
	        this.valueStmt(0);
	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 727;
	            this.match(vbaParser.WS);
	        }

	        this.state = 730;
	        this.match(vbaParser.T__0);
	        this.state = 732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 731;
	            this.match(vbaParser.WS);
	        }

	        this.state = 734;
	        this.valueStmt(0);
	        this.state = 743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 735;
	                this.match(vbaParser.WS);
	            }

	            this.state = 738;
	            this.match(vbaParser.T__0);
	            this.state = 740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 739;
	                this.match(vbaParser.WS);
	            }

	            this.state = 742;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doLoopStmt() {
	    let localctx = new DoLoopStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, vbaParser.RULE_doLoopStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 772;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 745;
	            this.match(vbaParser.DO);
	            this.state = 746;
	            this.endOfStatement();
	            this.state = 748;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	            if(la_===1) {
	                this.state = 747;
	                this.block();

	            }
	            this.state = 750;
	            this.match(vbaParser.LOOP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.match(vbaParser.DO);
	            this.state = 753;
	            this.match(vbaParser.WS);
	            this.state = 754;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.UNTIL || _la===vbaParser.WHILE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 755;
	            this.match(vbaParser.WS);
	            this.state = 756;
	            this.valueStmt(0);
	            this.state = 757;
	            this.endOfStatement();
	            this.state = 759;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	            if(la_===1) {
	                this.state = 758;
	                this.block();

	            }
	            this.state = 761;
	            this.match(vbaParser.LOOP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 763;
	            this.match(vbaParser.DO);
	            this.state = 764;
	            this.endOfStatement();
	            this.state = 765;
	            this.block();
	            this.state = 766;
	            this.match(vbaParser.LOOP);
	            this.state = 767;
	            this.match(vbaParser.WS);
	            this.state = 768;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.UNTIL || _la===vbaParser.WHILE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 769;
	            this.match(vbaParser.WS);
	            this.state = 770;
	            this.valueStmt(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endStmt() {
	    let localctx = new EndStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, vbaParser.RULE_endStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(vbaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationStmt() {
	    let localctx = new EnumerationStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, vbaParser.RULE_enumerationStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 776;
	            this.visibility();
	            this.state = 777;
	            this.match(vbaParser.WS);
	        }

	        this.state = 781;
	        this.match(vbaParser.ENUM);
	        this.state = 782;
	        this.match(vbaParser.WS);
	        this.state = 783;
	        this.ambiguousIdentifier();
	        this.state = 784;
	        this.endOfStatement();
	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 785;
	            this.enumerationStmt_Constant();
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 791;
	        this.match(vbaParser.END_ENUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationStmt_Constant() {
	    let localctx = new EnumerationStmt_ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, vbaParser.RULE_enumerationStmt_Constant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.ambiguousIdentifier();
	        this.state = 802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 794;
	                this.match(vbaParser.WS);
	            }

	            this.state = 797;
	            this.match(vbaParser.EQ);
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 798;
	                this.match(vbaParser.WS);
	            }

	            this.state = 801;
	            this.valueStmt(0);

	        }
	        this.state = 804;
	        this.endOfStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eraseStmt() {
	    let localctx = new EraseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, vbaParser.RULE_eraseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 806;
	        this.match(vbaParser.ERASE);
	        this.state = 807;
	        this.match(vbaParser.WS);
	        this.state = 808;
	        this.valueStmt(0);
	        this.state = 816;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 809;
	                this.match(vbaParser.T__0);
	                this.state = 811;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 810;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 813;
	                this.valueStmt(0); 
	            }
	            this.state = 818;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorStmt() {
	    let localctx = new ErrorStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, vbaParser.RULE_errorStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.match(vbaParser.ERROR);
	        this.state = 820;
	        this.match(vbaParser.WS);
	        this.state = 821;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventStmt() {
	    let localctx = new EventStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, vbaParser.RULE_eventStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 823;
	            this.visibility();
	            this.state = 824;
	            this.match(vbaParser.WS);
	        }

	        this.state = 828;
	        this.match(vbaParser.EVENT);
	        this.state = 829;
	        this.match(vbaParser.WS);
	        this.state = 830;
	        this.ambiguousIdentifier();
	        this.state = 832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 831;
	            this.match(vbaParser.WS);
	        }

	        this.state = 834;
	        this.argList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStmt() {
	    let localctx = new ExitStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, vbaParser.RULE_exitStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vbaParser.EXIT_DO - 68)) | (1 << (vbaParser.EXIT_FOR - 68)) | (1 << (vbaParser.EXIT_FUNCTION - 68)) | (1 << (vbaParser.EXIT_PROPERTY - 68)) | (1 << (vbaParser.EXIT_SUB - 68)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filecopyStmt() {
	    let localctx = new FilecopyStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, vbaParser.RULE_filecopyStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.match(vbaParser.FILECOPY);
	        this.state = 839;
	        this.match(vbaParser.WS);
	        this.state = 840;
	        this.valueStmt(0);
	        this.state = 842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 841;
	            this.match(vbaParser.WS);
	        }

	        this.state = 844;
	        this.match(vbaParser.T__0);
	        this.state = 846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 845;
	            this.match(vbaParser.WS);
	        }

	        this.state = 848;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forEachStmt() {
	    let localctx = new ForEachStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, vbaParser.RULE_forEachStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.match(vbaParser.FOR);
	        this.state = 851;
	        this.match(vbaParser.WS);
	        this.state = 852;
	        this.match(vbaParser.EACH);
	        this.state = 853;
	        this.match(vbaParser.WS);
	        this.state = 854;
	        this.ambiguousIdentifier();
	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 855;
	            this.typeHint();
	        }

	        this.state = 858;
	        this.match(vbaParser.WS);
	        this.state = 859;
	        this.match(vbaParser.IN);
	        this.state = 860;
	        this.match(vbaParser.WS);
	        this.state = 861;
	        this.valueStmt(0);
	        this.state = 862;
	        this.endOfStatement();
	        this.state = 864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        if(la_===1) {
	            this.state = 863;
	            this.block();

	        }
	        this.state = 866;
	        this.match(vbaParser.NEXT);
	        this.state = 869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        if(la_===1) {
	            this.state = 867;
	            this.match(vbaParser.WS);
	            this.state = 868;
	            this.ambiguousIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forNextStmt() {
	    let localctx = new ForNextStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, vbaParser.RULE_forNextStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(vbaParser.FOR);
	        this.state = 872;
	        this.match(vbaParser.WS);
	        this.state = 873;
	        this.ambiguousIdentifier();
	        this.state = 875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 874;
	            this.typeHint();
	        }

	        this.state = 879;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 877;
	            this.match(vbaParser.WS);
	            this.state = 878;
	            this.asTypeClause();

	        }
	        this.state = 882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 881;
	            this.match(vbaParser.WS);
	        }

	        this.state = 884;
	        this.match(vbaParser.EQ);
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 885;
	            this.match(vbaParser.WS);
	        }

	        this.state = 888;
	        this.valueStmt(0);
	        this.state = 889;
	        this.match(vbaParser.WS);
	        this.state = 890;
	        this.match(vbaParser.TO);
	        this.state = 891;
	        this.match(vbaParser.WS);
	        this.state = 892;
	        this.valueStmt(0);
	        this.state = 897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        if(la_===1) {
	            this.state = 893;
	            this.match(vbaParser.WS);
	            this.state = 894;
	            this.match(vbaParser.STEP);
	            this.state = 895;
	            this.match(vbaParser.WS);
	            this.state = 896;
	            this.valueStmt(0);

	        }
	        this.state = 899;
	        this.endOfStatement();
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 900;
	            this.block();

	        }
	        this.state = 903;
	        this.match(vbaParser.NEXT);
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        if(la_===1) {
	            this.state = 904;
	            this.match(vbaParser.WS);
	            this.state = 905;
	            this.ambiguousIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionStmt() {
	    let localctx = new FunctionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, vbaParser.RULE_functionStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 908;
	            this.visibility();
	            this.state = 909;
	            this.match(vbaParser.WS);
	        }

	        this.state = 915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.STATIC) {
	            this.state = 913;
	            this.match(vbaParser.STATIC);
	            this.state = 914;
	            this.match(vbaParser.WS);
	        }

	        this.state = 917;
	        this.match(vbaParser.FUNCTION);
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 918;
	            this.match(vbaParser.WS);
	        }

	        this.state = 921;
	        this.ambiguousIdentifier();
	        this.state = 923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 922;
	            this.typeHint();

	        }
	        this.state = 929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        if(la_===1) {
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 925;
	                this.match(vbaParser.WS);
	            }

	            this.state = 928;
	            this.argList();

	        }
	        this.state = 935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 931;
	                this.match(vbaParser.WS);
	            }

	            this.state = 934;
	            this.asTypeClause();

	        }
	        this.state = 937;
	        this.endOfStatement();
	        this.state = 939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 938;
	            this.block();
	        }

	        this.state = 941;
	        this.match(vbaParser.END_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getStmt() {
	    let localctx = new GetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, vbaParser.RULE_getStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.match(vbaParser.GET);
	        this.state = 944;
	        this.match(vbaParser.WS);
	        this.state = 945;
	        this.fileNumber();
	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 946;
	            this.match(vbaParser.WS);
	        }

	        this.state = 949;
	        this.match(vbaParser.T__0);
	        this.state = 951;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 950;
	            this.match(vbaParser.WS);

	        }
	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
	            this.state = 953;
	            this.valueStmt(0);
	        }

	        this.state = 957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 956;
	            this.match(vbaParser.WS);
	        }

	        this.state = 959;
	        this.match(vbaParser.T__0);
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 960;
	            this.match(vbaParser.WS);
	        }

	        this.state = 963;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goSubStmt() {
	    let localctx = new GoSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, vbaParser.RULE_goSubStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(vbaParser.GOSUB);
	        this.state = 966;
	        this.match(vbaParser.WS);
	        this.state = 967;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goToStmt() {
	    let localctx = new GoToStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, vbaParser.RULE_goToStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(vbaParser.GOTO);
	        this.state = 970;
	        this.match(vbaParser.WS);
	        this.state = 971;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStmt() {
	    let localctx = new IfThenElseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, vbaParser.RULE_ifThenElseStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 998;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InlineIfThenElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 973;
	            this.match(vbaParser.IF);
	            this.state = 974;
	            this.match(vbaParser.WS);
	            this.state = 975;
	            this.ifConditionStmt();
	            this.state = 976;
	            this.match(vbaParser.WS);
	            this.state = 977;
	            this.match(vbaParser.THEN);
	            this.state = 978;
	            this.match(vbaParser.WS);
	            this.state = 979;
	            this.blockStmt();
	            this.state = 984;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            if(la_===1) {
	                this.state = 980;
	                this.match(vbaParser.WS);
	                this.state = 981;
	                this.match(vbaParser.ELSE);
	                this.state = 982;
	                this.match(vbaParser.WS);
	                this.state = 983;
	                this.blockStmt();

	            }
	            break;

	        case 2:
	            localctx = new BlockIfThenElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 986;
	            this.ifBlockStmt();
	            this.state = 990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vbaParser.ELSEIF) {
	                this.state = 987;
	                this.ifElseIfBlockStmt();
	                this.state = 992;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.ELSE) {
	                this.state = 993;
	                this.ifElseBlockStmt();
	            }

	            this.state = 996;
	            this.match(vbaParser.END_IF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifBlockStmt() {
	    let localctx = new IfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, vbaParser.RULE_ifBlockStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.match(vbaParser.IF);
	        this.state = 1001;
	        this.match(vbaParser.WS);
	        this.state = 1002;
	        this.ifConditionStmt();
	        this.state = 1003;
	        this.match(vbaParser.WS);
	        this.state = 1004;
	        this.match(vbaParser.THEN);
	        this.state = 1005;
	        this.endOfStatement();
	        this.state = 1007;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 1006;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifConditionStmt() {
	    let localctx = new IfConditionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, vbaParser.RULE_ifConditionStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElseIfBlockStmt() {
	    let localctx = new IfElseIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, vbaParser.RULE_ifElseIfBlockStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        this.match(vbaParser.ELSEIF);
	        this.state = 1012;
	        this.match(vbaParser.WS);
	        this.state = 1013;
	        this.ifConditionStmt();
	        this.state = 1014;
	        this.match(vbaParser.WS);
	        this.state = 1015;
	        this.match(vbaParser.THEN);
	        this.state = 1016;
	        this.endOfStatement();
	        this.state = 1018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 1017;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElseBlockStmt() {
	    let localctx = new IfElseBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, vbaParser.RULE_ifElseBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this.match(vbaParser.ELSE);
	        this.state = 1021;
	        this.endOfStatement();
	        this.state = 1023;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1022;
	            this.block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implementsStmt() {
	    let localctx = new ImplementsStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, vbaParser.RULE_implementsStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025;
	        this.match(vbaParser.IMPLEMENTS);
	        this.state = 1026;
	        this.match(vbaParser.WS);
	        this.state = 1027;
	        this.ambiguousIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputStmt() {
	    let localctx = new InputStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, vbaParser.RULE_inputStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(vbaParser.INPUT);
	        this.state = 1030;
	        this.match(vbaParser.WS);
	        this.state = 1031;
	        this.fileNumber();
	        this.state = 1040; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1033;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===vbaParser.WS) {
	        		    this.state = 1032;
	        		    this.match(vbaParser.WS);
	        		}

	        		this.state = 1035;
	        		this.match(vbaParser.T__0);
	        		this.state = 1037;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===vbaParser.WS) {
	        		    this.state = 1036;
	        		    this.match(vbaParser.WS);
	        		}

	        		this.state = 1039;
	        		this.valueStmt(0);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1042; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,118, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStmt() {
	    let localctx = new KillStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, vbaParser.RULE_killStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044;
	        this.match(vbaParser.KILL);
	        this.state = 1045;
	        this.match(vbaParser.WS);
	        this.state = 1046;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStmt() {
	    let localctx = new LetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, vbaParser.RULE_letStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1048;
	            this.match(vbaParser.LET);
	            this.state = 1049;
	            this.match(vbaParser.WS);

	        }
	        this.state = 1052;
	        this.implicitCallStmt_InStmt();
	        this.state = 1054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1053;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1056;
	        _la = this._input.LA(1);
	        if(!(((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.MINUS_EQ - 189)) | (1 << (vbaParser.PLUS_EQ - 189)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1057;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1060;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineInputStmt() {
	    let localctx = new LineInputStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, vbaParser.RULE_lineInputStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        this.match(vbaParser.LINE_INPUT);
	        this.state = 1063;
	        this.match(vbaParser.WS);
	        this.state = 1064;
	        this.fileNumber();
	        this.state = 1066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1065;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1068;
	        this.match(vbaParser.T__0);
	        this.state = 1070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1069;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1072;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStmt() {
	    let localctx = new LoadStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, vbaParser.RULE_loadStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074;
	        this.match(vbaParser.LOAD);
	        this.state = 1075;
	        this.match(vbaParser.WS);
	        this.state = 1076;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStmt() {
	    let localctx = new LockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, vbaParser.RULE_lockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078;
	        this.match(vbaParser.LOCK);
	        this.state = 1079;
	        this.match(vbaParser.WS);
	        this.state = 1080;
	        this.valueStmt(0);
	        this.state = 1095;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 1082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1081;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1084;
	            this.match(vbaParser.T__0);
	            this.state = 1086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1085;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1088;
	            this.valueStmt(0);
	            this.state = 1093;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            if(la_===1) {
	                this.state = 1089;
	                this.match(vbaParser.WS);
	                this.state = 1090;
	                this.match(vbaParser.TO);
	                this.state = 1091;
	                this.match(vbaParser.WS);
	                this.state = 1092;
	                this.valueStmt(0);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lsetStmt() {
	    let localctx = new LsetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, vbaParser.RULE_lsetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.match(vbaParser.LSET);
	        this.state = 1098;
	        this.match(vbaParser.WS);
	        this.state = 1099;
	        this.implicitCallStmt_InStmt();
	        this.state = 1101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1100;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1103;
	        this.match(vbaParser.EQ);
	        this.state = 1105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1104;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1107;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroConstStmt() {
	    let localctx = new MacroConstStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, vbaParser.RULE_macroConstStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.match(vbaParser.MACRO_CONST);
	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1110;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1113;
	        this.ambiguousIdentifier();
	        this.state = 1115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1114;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1117;
	        this.match(vbaParser.EQ);
	        this.state = 1119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1118;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1121;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroIfThenElseStmt() {
	    let localctx = new MacroIfThenElseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, vbaParser.RULE_macroIfThenElseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1123;
	        this.macroIfBlockStmt();
	        this.state = 1127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vbaParser.MACRO_ELSEIF) {
	            this.state = 1124;
	            this.macroElseIfBlockStmt();
	            this.state = 1129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.MACRO_ELSE) {
	            this.state = 1130;
	            this.macroElseBlockStmt();
	        }

	        this.state = 1133;
	        this.match(vbaParser.MACRO_END_IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroIfBlockStmt() {
	    let localctx = new MacroIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, vbaParser.RULE_macroIfBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1135;
	        this.match(vbaParser.MACRO_IF);
	        this.state = 1137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1136;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1139;
	        this.ifConditionStmt();
	        this.state = 1140;
	        this.match(vbaParser.WS);
	        this.state = 1141;
	        this.match(vbaParser.THEN);
	        this.state = 1142;
	        this.endOfStatement();
	        this.state = 1148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.COMMENT || _la===vbaParser.IDENTIFIER) {
	            this.state = 1146;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1143;
	                this.moduleDeclarations();
	                break;

	            case 2:
	                this.state = 1144;
	                this.moduleBody();
	                break;

	            case 3:
	                this.state = 1145;
	                this.block();
	                break;

	            }
	            this.state = 1150;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroElseIfBlockStmt() {
	    let localctx = new MacroElseIfBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, vbaParser.RULE_macroElseIfBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this.match(vbaParser.MACRO_ELSEIF);
	        this.state = 1153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1152;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1155;
	        this.ifConditionStmt();
	        this.state = 1156;
	        this.match(vbaParser.WS);
	        this.state = 1157;
	        this.match(vbaParser.THEN);
	        this.state = 1158;
	        this.endOfStatement();
	        this.state = 1164;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.COMMENT || _la===vbaParser.IDENTIFIER) {
	            this.state = 1162;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1159;
	                this.moduleDeclarations();
	                break;

	            case 2:
	                this.state = 1160;
	                this.moduleBody();
	                break;

	            case 3:
	                this.state = 1161;
	                this.block();
	                break;

	            }
	            this.state = 1166;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroElseBlockStmt() {
	    let localctx = new MacroElseBlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, vbaParser.RULE_macroElseBlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.match(vbaParser.MACRO_ELSE);
	        this.state = 1168;
	        this.endOfStatement();
	        this.state = 1174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OPTION_BASE - 96)) | (1 << (vbaParser.OPTION_EXPLICIT - 96)) | (1 << (vbaParser.OPTION_COMPARE - 96)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.COMMENT || _la===vbaParser.IDENTIFIER) {
	            this.state = 1172;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1169;
	                this.moduleDeclarations();
	                break;

	            case 2:
	                this.state = 1170;
	                this.moduleBody();
	                break;

	            case 3:
	                this.state = 1171;
	                this.block();
	                break;

	            }
	            this.state = 1176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midStmt() {
	    let localctx = new MidStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, vbaParser.RULE_midStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(vbaParser.MID);
	        this.state = 1179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1178;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1181;
	        this.match(vbaParser.LPAREN);
	        this.state = 1183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        if(la_===1) {
	            this.state = 1182;
	            this.match(vbaParser.WS);

	        }
	        this.state = 1185;
	        this.argsCall();
	        this.state = 1187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1186;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1189;
	        this.match(vbaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mkdirStmt() {
	    let localctx = new MkdirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, vbaParser.RULE_mkdirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1191;
	        this.match(vbaParser.MKDIR);
	        this.state = 1192;
	        this.match(vbaParser.WS);
	        this.state = 1193;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameStmt() {
	    let localctx = new NameStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, vbaParser.RULE_nameStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this.match(vbaParser.NAME);
	        this.state = 1196;
	        this.match(vbaParser.WS);
	        this.state = 1197;
	        this.valueStmt(0);
	        this.state = 1198;
	        this.match(vbaParser.WS);
	        this.state = 1199;
	        this.match(vbaParser.AS);
	        this.state = 1200;
	        this.match(vbaParser.WS);
	        this.state = 1201;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onErrorStmt() {
	    let localctx = new OnErrorStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, vbaParser.RULE_onErrorStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1203;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.ON_ERROR || _la===vbaParser.ON_LOCAL_ERROR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1204;
	        this.match(vbaParser.WS);
	        this.state = 1211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.GOTO:
	            this.state = 1205;
	            this.match(vbaParser.GOTO);
	            this.state = 1206;
	            this.match(vbaParser.WS);
	            this.state = 1207;
	            this.valueStmt(0);
	            break;
	        case vbaParser.RESUME:
	            this.state = 1208;
	            this.match(vbaParser.RESUME);
	            this.state = 1209;
	            this.match(vbaParser.WS);
	            this.state = 1210;
	            this.match(vbaParser.NEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onGoToStmt() {
	    let localctx = new OnGoToStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, vbaParser.RULE_onGoToStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1213;
	        this.match(vbaParser.ON);
	        this.state = 1214;
	        this.match(vbaParser.WS);
	        this.state = 1215;
	        this.valueStmt(0);
	        this.state = 1216;
	        this.match(vbaParser.WS);
	        this.state = 1217;
	        this.match(vbaParser.GOTO);
	        this.state = 1218;
	        this.match(vbaParser.WS);
	        this.state = 1219;
	        this.valueStmt(0);
	        this.state = 1230;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1221;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1220;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1223;
	                this.match(vbaParser.T__0);
	                this.state = 1225;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1224;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1227;
	                this.valueStmt(0); 
	            }
	            this.state = 1232;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onGoSubStmt() {
	    let localctx = new OnGoSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, vbaParser.RULE_onGoSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this.match(vbaParser.ON);
	        this.state = 1234;
	        this.match(vbaParser.WS);
	        this.state = 1235;
	        this.valueStmt(0);
	        this.state = 1236;
	        this.match(vbaParser.WS);
	        this.state = 1237;
	        this.match(vbaParser.GOSUB);
	        this.state = 1238;
	        this.match(vbaParser.WS);
	        this.state = 1239;
	        this.valueStmt(0);
	        this.state = 1250;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1241;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1240;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1243;
	                this.match(vbaParser.T__0);
	                this.state = 1245;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1244;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1247;
	                this.valueStmt(0); 
	            }
	            this.state = 1252;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openStmt() {
	    let localctx = new OpenStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, vbaParser.RULE_openStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.match(vbaParser.OPEN);
	        this.state = 1254;
	        this.match(vbaParser.WS);
	        this.state = 1255;
	        this.valueStmt(0);
	        this.state = 1256;
	        this.match(vbaParser.WS);
	        this.state = 1257;
	        this.match(vbaParser.FOR);
	        this.state = 1258;
	        this.match(vbaParser.WS);
	        this.state = 1259;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.APPEND || _la===vbaParser.BINARY || _la===vbaParser.INPUT || _la===vbaParser.OUTPUT || _la===vbaParser.RANDOM)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1264;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        if(la_===1) {
	            this.state = 1260;
	            this.match(vbaParser.WS);
	            this.state = 1261;
	            this.match(vbaParser.ACCESS);
	            this.state = 1262;
	            this.match(vbaParser.WS);
	            this.state = 1263;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.READ || _la===vbaParser.READ_WRITE || _la===vbaParser.WRITE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 1266;
	            this.match(vbaParser.WS);
	            this.state = 1267;
	            _la = this._input.LA(1);
	            if(!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (vbaParser.LOCK_READ - 99)) | (1 << (vbaParser.LOCK_WRITE - 99)) | (1 << (vbaParser.LOCK_READ_WRITE - 99)))) !== 0) || _la===vbaParser.SHARED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1270;
	        this.match(vbaParser.WS);
	        this.state = 1271;
	        this.match(vbaParser.AS);
	        this.state = 1272;
	        this.match(vbaParser.WS);
	        this.state = 1273;
	        this.fileNumber();
	        this.state = 1284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        if(la_===1) {
	            this.state = 1274;
	            this.match(vbaParser.WS);
	            this.state = 1275;
	            this.match(vbaParser.LEN);
	            this.state = 1277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1276;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1279;
	            this.match(vbaParser.EQ);
	            this.state = 1281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1280;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1283;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputList() {
	    let localctx = new OutputListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, vbaParser.RULE_outputList);
	    var _la = 0; // Token type
	    try {
	        this.state = 1319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1286;
	            this.outputList_Expression();
	            this.state = 1299;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1288;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1287;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1290;
	                    _la = this._input.LA(1);
	                    if(!(_la===vbaParser.T__0 || _la===vbaParser.T__1)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1292;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	                    if(la_===1) {
	                        this.state = 1291;
	                        this.match(vbaParser.WS);

	                    }
	                    this.state = 1295;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	                    if(la_===1) {
	                        this.state = 1294;
	                        this.outputList_Expression();

	                    } 
	                }
	                this.state = 1301;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
	                this.state = 1302;
	                this.outputList_Expression();
	            }

	            this.state = 1315; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1306;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===vbaParser.WS) {
	            		    this.state = 1305;
	            		    this.match(vbaParser.WS);
	            		}

	            		this.state = 1308;
	            		_la = this._input.LA(1);
	            		if(!(_la===vbaParser.T__0 || _la===vbaParser.T__1)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		this.state = 1310;
	            		this._errHandler.sync(this);
	            		var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	            		if(la_===1) {
	            		    this.state = 1309;
	            		    this.match(vbaParser.WS);

	            		}
	            		this.state = 1313;
	            		this._errHandler.sync(this);
	            		var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	            		if(la_===1) {
	            		    this.state = 1312;
	            		    this.outputList_Expression();

	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1317; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,166, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputList_Expression() {
	    let localctx = new OutputList_ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, vbaParser.RULE_outputList_Expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1338;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1321;
	            this.valueStmt(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1322;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.SPC || _la===vbaParser.TAB)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	            if(la_===1) {
	                this.state = 1324;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1323;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1326;
	                this.match(vbaParser.LPAREN);
	                this.state = 1328;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	                if(la_===1) {
	                    this.state = 1327;
	                    this.match(vbaParser.WS);

	                }
	                this.state = 1330;
	                this.argsCall();
	                this.state = 1332;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1331;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1334;
	                this.match(vbaParser.RPAREN);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printStmt() {
	    let localctx = new PrintStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, vbaParser.RULE_printStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.match(vbaParser.PRINT);
	        this.state = 1341;
	        this.match(vbaParser.WS);
	        this.state = 1342;
	        this.fileNumber();
	        this.state = 1344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1343;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1346;
	        this.match(vbaParser.T__0);
	        this.state = 1351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        if(la_===1) {
	            this.state = 1348;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	            if(la_===1) {
	                this.state = 1347;
	                this.match(vbaParser.WS);

	            }
	            this.state = 1350;
	            this.outputList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyGetStmt() {
	    let localctx = new PropertyGetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, vbaParser.RULE_propertyGetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 1353;
	            this.visibility();
	            this.state = 1354;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.STATIC) {
	            this.state = 1358;
	            this.match(vbaParser.STATIC);
	            this.state = 1359;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1362;
	        this.match(vbaParser.PROPERTY_GET);
	        this.state = 1363;
	        this.match(vbaParser.WS);
	        this.state = 1364;
	        this.ambiguousIdentifier();
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1365;
	            this.typeHint();

	        }
	        this.state = 1372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 1369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1368;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1371;
	            this.argList();

	        }
	        this.state = 1376;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 1374;
	            this.match(vbaParser.WS);
	            this.state = 1375;
	            this.asTypeClause();

	        }
	        this.state = 1378;
	        this.endOfStatement();
	        this.state = 1380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1379;
	            this.block();
	        }

	        this.state = 1382;
	        this.match(vbaParser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySetStmt() {
	    let localctx = new PropertySetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, vbaParser.RULE_propertySetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 1384;
	            this.visibility();
	            this.state = 1385;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.STATIC) {
	            this.state = 1389;
	            this.match(vbaParser.STATIC);
	            this.state = 1390;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1393;
	        this.match(vbaParser.PROPERTY_SET);
	        this.state = 1394;
	        this.match(vbaParser.WS);
	        this.state = 1395;
	        this.ambiguousIdentifier();
	        this.state = 1400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 1397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1396;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1399;
	            this.argList();

	        }
	        this.state = 1402;
	        this.endOfStatement();
	        this.state = 1404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1403;
	            this.block();
	        }

	        this.state = 1406;
	        this.match(vbaParser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyLetStmt() {
	    let localctx = new PropertyLetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, vbaParser.RULE_propertyLetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 1408;
	            this.visibility();
	            this.state = 1409;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.STATIC) {
	            this.state = 1413;
	            this.match(vbaParser.STATIC);
	            this.state = 1414;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1417;
	        this.match(vbaParser.PROPERTY_LET);
	        this.state = 1418;
	        this.match(vbaParser.WS);
	        this.state = 1419;
	        this.ambiguousIdentifier();
	        this.state = 1424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        if(la_===1) {
	            this.state = 1421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1420;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1423;
	            this.argList();

	        }
	        this.state = 1426;
	        this.endOfStatement();
	        this.state = 1428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1427;
	            this.block();
	        }

	        this.state = 1430;
	        this.match(vbaParser.END_PROPERTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	putStmt() {
	    let localctx = new PutStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, vbaParser.RULE_putStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.match(vbaParser.PUT);
	        this.state = 1433;
	        this.match(vbaParser.WS);
	        this.state = 1434;
	        this.fileNumber();
	        this.state = 1436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1435;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1438;
	        this.match(vbaParser.T__0);
	        this.state = 1440;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 1439;
	            this.match(vbaParser.WS);

	        }
	        this.state = 1443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
	            this.state = 1442;
	            this.valueStmt(0);
	        }

	        this.state = 1446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1445;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1448;
	        this.match(vbaParser.T__0);
	        this.state = 1450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1449;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1452;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raiseEventStmt() {
	    let localctx = new RaiseEventStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, vbaParser.RULE_raiseEventStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1454;
	        this.match(vbaParser.RAISEEVENT);
	        this.state = 1455;
	        this.match(vbaParser.WS);
	        this.state = 1456;
	        this.ambiguousIdentifier();
	        this.state = 1471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        if(la_===1) {
	            this.state = 1458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1457;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1460;
	            this.match(vbaParser.LPAREN);
	            this.state = 1462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	            if(la_===1) {
	                this.state = 1461;
	                this.match(vbaParser.WS);

	            }
	            this.state = 1468;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	            if(la_===1) {
	                this.state = 1464;
	                this.argsCall();
	                this.state = 1466;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1465;
	                    this.match(vbaParser.WS);
	                }


	            }
	            this.state = 1470;
	            this.match(vbaParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	randomizeStmt() {
	    let localctx = new RandomizeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, vbaParser.RULE_randomizeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1473;
	        this.match(vbaParser.RANDOMIZE);
	        this.state = 1476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        if(la_===1) {
	            this.state = 1474;
	            this.match(vbaParser.WS);
	            this.state = 1475;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redimStmt() {
	    let localctx = new RedimStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, vbaParser.RULE_redimStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this.match(vbaParser.REDIM);
	        this.state = 1479;
	        this.match(vbaParser.WS);
	        this.state = 1482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        if(la_===1) {
	            this.state = 1480;
	            this.match(vbaParser.PRESERVE);
	            this.state = 1481;
	            this.match(vbaParser.WS);

	        }
	        this.state = 1484;
	        this.redimSubStmt();
	        this.state = 1495;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1486;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1485;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1488;
	                this.match(vbaParser.T__0);
	                this.state = 1490;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1489;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1492;
	                this.redimSubStmt(); 
	            }
	            this.state = 1497;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redimSubStmt() {
	    let localctx = new RedimSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, vbaParser.RULE_redimSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1498;
	        this.implicitCallStmt_InStmt();
	        this.state = 1500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1499;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1502;
	        this.match(vbaParser.LPAREN);
	        this.state = 1504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1503;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1506;
	        this.subscripts();
	        this.state = 1508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1507;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1510;
	        this.match(vbaParser.RPAREN);
	        this.state = 1513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        if(la_===1) {
	            this.state = 1511;
	            this.match(vbaParser.WS);
	            this.state = 1512;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStmt() {
	    let localctx = new ResetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, vbaParser.RULE_resetStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1515;
	        this.match(vbaParser.RESET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resumeStmt() {
	    let localctx = new ResumeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, vbaParser.RULE_resumeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1517;
	        this.match(vbaParser.RESUME);
	        this.state = 1523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        if(la_===1) {
	            this.state = 1518;
	            this.match(vbaParser.WS);
	            this.state = 1521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1519;
	                this.match(vbaParser.NEXT);
	                break;

	            case 2:
	                this.state = 1520;
	                this.ambiguousIdentifier();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmt() {
	    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, vbaParser.RULE_returnStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1525;
	        this.match(vbaParser.RETURN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmdirStmt() {
	    let localctx = new RmdirStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, vbaParser.RULE_rmdirStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1527;
	        this.match(vbaParser.RMDIR);
	        this.state = 1528;
	        this.match(vbaParser.WS);
	        this.state = 1529;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rsetStmt() {
	    let localctx = new RsetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, vbaParser.RULE_rsetStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this.match(vbaParser.RSET);
	        this.state = 1532;
	        this.match(vbaParser.WS);
	        this.state = 1533;
	        this.implicitCallStmt_InStmt();
	        this.state = 1535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1534;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1537;
	        this.match(vbaParser.EQ);
	        this.state = 1539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1538;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1541;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepictureStmt() {
	    let localctx = new SavepictureStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, vbaParser.RULE_savepictureStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1543;
	        this.match(vbaParser.SAVEPICTURE);
	        this.state = 1544;
	        this.match(vbaParser.WS);
	        this.state = 1545;
	        this.valueStmt(0);
	        this.state = 1547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1546;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1549;
	        this.match(vbaParser.T__0);
	        this.state = 1551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1550;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1553;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	saveSettingStmt() {
	    let localctx = new SaveSettingStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, vbaParser.RULE_saveSettingStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.match(vbaParser.SAVESETTING);
	        this.state = 1556;
	        this.match(vbaParser.WS);
	        this.state = 1557;
	        this.valueStmt(0);
	        this.state = 1559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1558;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1561;
	        this.match(vbaParser.T__0);
	        this.state = 1563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1562;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1565;
	        this.valueStmt(0);
	        this.state = 1567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1566;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1569;
	        this.match(vbaParser.T__0);
	        this.state = 1571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1570;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1573;
	        this.valueStmt(0);
	        this.state = 1575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1574;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1577;
	        this.match(vbaParser.T__0);
	        this.state = 1579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1578;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1581;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seekStmt() {
	    let localctx = new SeekStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, vbaParser.RULE_seekStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1583;
	        this.match(vbaParser.SEEK);
	        this.state = 1584;
	        this.match(vbaParser.WS);
	        this.state = 1585;
	        this.fileNumber();
	        this.state = 1587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1586;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1589;
	        this.match(vbaParser.T__0);
	        this.state = 1591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1590;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1593;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectCaseStmt() {
	    let localctx = new SelectCaseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, vbaParser.RULE_selectCaseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(vbaParser.SELECT);
	        this.state = 1596;
	        this.match(vbaParser.WS);
	        this.state = 1597;
	        this.match(vbaParser.CASE);
	        this.state = 1598;
	        this.match(vbaParser.WS);
	        this.state = 1599;
	        this.valueStmt(0);
	        this.state = 1600;
	        this.endOfStatement();
	        this.state = 1604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===vbaParser.CASE) {
	            this.state = 1601;
	            this.sC_Case();
	            this.state = 1606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1607;
	        this.match(vbaParser.END_SELECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_Selection() {
	    let localctx = new SC_SelectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, vbaParser.RULE_sC_Selection);
	    var _la = 0; // Token type
	    try {
	        this.state = 1626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CaseCondIsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1609;
	            this.match(vbaParser.IS);
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1610;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1613;
	            this.comparisonOperator();
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1614;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1617;
	            this.valueStmt(0);
	            break;

	        case 2:
	            localctx = new CaseCondToContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1619;
	            this.valueStmt(0);
	            this.state = 1620;
	            this.match(vbaParser.WS);
	            this.state = 1621;
	            this.match(vbaParser.TO);
	            this.state = 1622;
	            this.match(vbaParser.WS);
	            this.state = 1623;
	            this.valueStmt(0);
	            break;

	        case 3:
	            localctx = new CaseCondValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1625;
	            this.valueStmt(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_Case() {
	    let localctx = new SC_CaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, vbaParser.RULE_sC_Case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1628;
	        this.match(vbaParser.CASE);
	        this.state = 1629;
	        this.match(vbaParser.WS);
	        this.state = 1630;
	        this.sC_Cond();
	        this.state = 1631;
	        this.endOfStatement();
	        this.state = 1633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 1632;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sC_Cond() {
	    let localctx = new SC_CondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, vbaParser.RULE_sC_Cond);
	    var _la = 0; // Token type
	    try {
	        this.state = 1650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CaseCondElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1635;
	            this.match(vbaParser.ELSE);
	            break;

	        case 2:
	            localctx = new CaseCondSelectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1636;
	            this.sC_Selection();
	            this.state = 1647;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1638;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1637;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1640;
	                    this.match(vbaParser.T__0);
	                    this.state = 1642;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1641;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1644;
	                    this.sC_Selection(); 
	                }
	                this.state = 1649;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendkeysStmt() {
	    let localctx = new SendkeysStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, vbaParser.RULE_sendkeysStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.match(vbaParser.SENDKEYS);
	        this.state = 1653;
	        this.match(vbaParser.WS);
	        this.state = 1654;
	        this.valueStmt(0);
	        this.state = 1663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        if(la_===1) {
	            this.state = 1656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1655;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1658;
	            this.match(vbaParser.T__0);
	            this.state = 1660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1659;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1662;
	            this.valueStmt(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setattrStmt() {
	    let localctx = new SetattrStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, vbaParser.RULE_setattrStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this.match(vbaParser.SETATTR);
	        this.state = 1666;
	        this.match(vbaParser.WS);
	        this.state = 1667;
	        this.valueStmt(0);
	        this.state = 1669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1668;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1671;
	        this.match(vbaParser.T__0);
	        this.state = 1673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1672;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1675;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStmt() {
	    let localctx = new SetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, vbaParser.RULE_setStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1677;
	        this.match(vbaParser.SET);
	        this.state = 1678;
	        this.match(vbaParser.WS);
	        this.state = 1679;
	        this.implicitCallStmt_InStmt();
	        this.state = 1681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1680;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1683;
	        this.match(vbaParser.EQ);
	        this.state = 1685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1684;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1687;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopStmt() {
	    let localctx = new StopStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, vbaParser.RULE_stopStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.match(vbaParser.STOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subStmt() {
	    let localctx = new SubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, vbaParser.RULE_subStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 1691;
	            this.visibility();
	            this.state = 1692;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.STATIC) {
	            this.state = 1696;
	            this.match(vbaParser.STATIC);
	            this.state = 1697;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1700;
	        this.match(vbaParser.SUB);
	        this.state = 1702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1701;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1704;
	        this.ambiguousIdentifier();
	        this.state = 1709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	        if(la_===1) {
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1705;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1708;
	            this.argList();

	        }
	        this.state = 1711;
	        this.endOfStatement();
	        this.state = 1713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1712;
	            this.block();
	        }

	        this.state = 1715;
	        this.match(vbaParser.END_SUB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeStmt() {
	    let localctx = new TimeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, vbaParser.RULE_timeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.match(vbaParser.TIME);
	        this.state = 1719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1718;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1721;
	        this.match(vbaParser.EQ);
	        this.state = 1723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 1722;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1725;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStmt() {
	    let localctx = new TypeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, vbaParser.RULE_typeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC) {
	            this.state = 1727;
	            this.visibility();
	            this.state = 1728;
	            this.match(vbaParser.WS);
	        }

	        this.state = 1732;
	        this.match(vbaParser.TYPE);
	        this.state = 1733;
	        this.match(vbaParser.WS);
	        this.state = 1734;
	        this.ambiguousIdentifier();
	        this.state = 1735;
	        this.endOfStatement();
	        this.state = 1739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 1736;
	            this.typeStmt_Element();
	            this.state = 1741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1742;
	        this.match(vbaParser.END_TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStmt_Element() {
	    let localctx = new TypeStmt_ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, vbaParser.RULE_typeStmt_Element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1744;
	        this.ambiguousIdentifier();
	        this.state = 1759;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        if(la_===1) {
	            this.state = 1746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1745;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1748;
	            this.match(vbaParser.LPAREN);
	            this.state = 1753;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 1750;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1749;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1752;
	                this.subscripts();

	            }
	            this.state = 1756;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1755;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1758;
	            this.match(vbaParser.RPAREN);

	        }
	        this.state = 1763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	        if(la_===1) {
	            this.state = 1761;
	            this.match(vbaParser.WS);
	            this.state = 1762;
	            this.asTypeClause();

	        }
	        this.state = 1765;
	        this.endOfStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeOfStmt() {
	    let localctx = new TypeOfStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, vbaParser.RULE_typeOfStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1767;
	        this.match(vbaParser.TYPEOF);
	        this.state = 1768;
	        this.match(vbaParser.WS);
	        this.state = 1769;
	        this.valueStmt(0);
	        this.state = 1774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        if(la_===1) {
	            this.state = 1770;
	            this.match(vbaParser.WS);
	            this.state = 1771;
	            this.match(vbaParser.IS);
	            this.state = 1772;
	            this.match(vbaParser.WS);
	            this.state = 1773;
	            this.type_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unloadStmt() {
	    let localctx = new UnloadStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, vbaParser.RULE_unloadStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776;
	        this.match(vbaParser.UNLOAD);
	        this.state = 1777;
	        this.match(vbaParser.WS);
	        this.state = 1778;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockStmt() {
	    let localctx = new UnlockStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, vbaParser.RULE_unlockStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        this.match(vbaParser.UNLOCK);
	        this.state = 1781;
	        this.match(vbaParser.WS);
	        this.state = 1782;
	        this.fileNumber();
	        this.state = 1797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        if(la_===1) {
	            this.state = 1784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1783;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1786;
	            this.match(vbaParser.T__0);
	            this.state = 1788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1787;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1790;
	            this.valueStmt(0);
	            this.state = 1795;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 1791;
	                this.match(vbaParser.WS);
	                this.state = 1792;
	                this.match(vbaParser.TO);
	                this.state = 1793;
	                this.match(vbaParser.WS);
	                this.state = 1794;
	                this.valueStmt(0);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueStmt(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueStmtContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 200;
	    this.enterRecursionRule(localctx, 200, vbaParser.RULE_valueStmt, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new VsLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1800;
	            this.literal();
	            break;

	        case 2:
	            localctx = new VsICSContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1801;
	            this.implicitCallStmt_InStmt();
	            break;

	        case 3:
	            localctx = new VsStructContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1802;
	            this.match(vbaParser.LPAREN);
	            this.state = 1804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1803;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1806;
	            this.valueStmt(0);
	            this.state = 1817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===vbaParser.T__0 || _la===vbaParser.WS) {
	                this.state = 1808;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1807;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1810;
	                this.match(vbaParser.T__0);
	                this.state = 1812;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 1811;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 1814;
	                this.valueStmt(0);
	                this.state = 1819;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1820;
	            this.match(vbaParser.RPAREN);
	            break;

	        case 4:
	            localctx = new VsNewContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1822;
	            this.match(vbaParser.NEW);
	            this.state = 1824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1823;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1826;
	            this.valueStmt(28);
	            break;

	        case 5:
	            localctx = new VsTypeOfContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1827;
	            this.typeOfStmt();
	            break;

	        case 6:
	            localctx = new VsMidContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1828;
	            this.midStmt();
	            break;

	        case 7:
	            localctx = new VsAddressOfContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1829;
	            this.match(vbaParser.ADDRESSOF);
	            this.state = 1831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1830;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1833;
	            this.valueStmt(25);
	            break;

	        case 8:
	            localctx = new VsAssignContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1834;
	            this.implicitCallStmt_InStmt();
	            this.state = 1836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1835;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1838;
	            this.match(vbaParser.ASSIGN);
	            this.state = 1840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1839;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1842;
	            this.valueStmt(24);
	            break;

	        case 9:
	            localctx = new VsNegationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1844;
	            this.match(vbaParser.MINUS);
	            this.state = 1846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1845;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1848;
	            this.valueStmt(14);
	            break;

	        case 10:
	            localctx = new VsPlusContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1849;
	            this.match(vbaParser.PLUS);
	            this.state = 1851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1850;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1853;
	            this.valueStmt(13);
	            break;

	        case 11:
	            localctx = new VsNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1854;
	            this.match(vbaParser.NOT);
	            this.state = 1856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 1855;
	                this.match(vbaParser.WS);
	            }

	            this.state = 1858;
	            this.valueStmt(1);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2043;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,316,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2041;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new VsIsContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1861;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 1863;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1862;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1865;
	                    this.match(vbaParser.IS);
	                    this.state = 1867;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1866;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1869;
	                    this.valueStmt(24);
	                    break;

	                case 2:
	                    localctx = new VsLikeContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1870;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1872;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1871;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1874;
	                    this.match(vbaParser.LIKE);
	                    this.state = 1876;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1875;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1878;
	                    this.valueStmt(23);
	                    break;

	                case 3:
	                    localctx = new VsGeqContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1879;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1881;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1880;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1883;
	                    this.match(vbaParser.GEQ);
	                    this.state = 1885;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1884;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1887;
	                    this.valueStmt(22);
	                    break;

	                case 4:
	                    localctx = new VsLeqContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1888;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1890;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1889;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1892;
	                    this.match(vbaParser.LEQ);
	                    this.state = 1894;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1893;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1896;
	                    this.valueStmt(21);
	                    break;

	                case 5:
	                    localctx = new VsGtContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1897;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1899;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1898;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1901;
	                    this.match(vbaParser.GT);
	                    this.state = 1903;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1902;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1905;
	                    this.valueStmt(20);
	                    break;

	                case 6:
	                    localctx = new VsLtContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1906;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1908;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1907;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1910;
	                    this.match(vbaParser.LT);
	                    this.state = 1912;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1911;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1914;
	                    this.valueStmt(19);
	                    break;

	                case 7:
	                    localctx = new VsNeqContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1915;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1917;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1916;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1919;
	                    this.match(vbaParser.NEQ);
	                    this.state = 1921;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1920;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1923;
	                    this.valueStmt(18);
	                    break;

	                case 8:
	                    localctx = new VsEqContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1924;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1926;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1925;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1928;
	                    this.match(vbaParser.EQ);
	                    this.state = 1930;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1929;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1932;
	                    this.valueStmt(17);
	                    break;

	                case 9:
	                    localctx = new VsPowContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1933;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1935;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1934;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1937;
	                    this.match(vbaParser.POW);
	                    this.state = 1939;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1938;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1941;
	                    this.valueStmt(16);
	                    break;

	                case 10:
	                    localctx = new VsDivContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1942;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1944;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1943;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1946;
	                    this.match(vbaParser.DIV);
	                    this.state = 1948;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1947;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1950;
	                    this.valueStmt(13);
	                    break;

	                case 11:
	                    localctx = new VsMultContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1951;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1953;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1952;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1955;
	                    this.match(vbaParser.MULT);
	                    this.state = 1957;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1956;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1959;
	                    this.valueStmt(12);
	                    break;

	                case 12:
	                    localctx = new VsModContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1960;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1962;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1961;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1964;
	                    this.match(vbaParser.MOD);
	                    this.state = 1966;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1965;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1968;
	                    this.valueStmt(11);
	                    break;

	                case 13:
	                    localctx = new VsAddContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1969;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1971;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1970;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1973;
	                    this.match(vbaParser.PLUS);
	                    this.state = 1975;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1974;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1977;
	                    this.valueStmt(10);
	                    break;

	                case 14:
	                    localctx = new VsMinusContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1978;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1980;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1979;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1982;
	                    this.match(vbaParser.MINUS);
	                    this.state = 1984;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1983;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1986;
	                    this.valueStmt(9);
	                    break;

	                case 15:
	                    localctx = new VsAmpContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1987;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1989;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1988;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1991;
	                    this.match(vbaParser.AMPERSAND);
	                    this.state = 1993;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1992;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 1995;
	                    this.valueStmt(8);
	                    break;

	                case 16:
	                    localctx = new VsImpContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 1996;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1998;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 1997;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2000;
	                    this.match(vbaParser.IMP);
	                    this.state = 2002;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2001;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2004;
	                    this.valueStmt(7);
	                    break;

	                case 17:
	                    localctx = new VsEqvContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 2005;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2007;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2006;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2009;
	                    this.match(vbaParser.EQV);
	                    this.state = 2011;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2010;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2013;
	                    this.valueStmt(6);
	                    break;

	                case 18:
	                    localctx = new VsXorContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 2014;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2016;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2015;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2018;
	                    this.match(vbaParser.XOR);
	                    this.state = 2020;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2019;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2022;
	                    this.valueStmt(5);
	                    break;

	                case 19:
	                    localctx = new VsOrContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 2023;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2025;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2024;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2027;
	                    this.match(vbaParser.OR);
	                    this.state = 2029;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2028;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2031;
	                    this.valueStmt(4);
	                    break;

	                case 20:
	                    localctx = new VsAndContext(this, new ValueStmtContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, vbaParser.RULE_valueStmt);
	                    this.state = 2032;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2034;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2033;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2036;
	                    this.match(vbaParser.AND);
	                    this.state = 2038;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2037;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2040;
	                    this.valueStmt(3);
	                    break;

	                } 
	            }
	            this.state = 2045;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,316,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	variableStmt() {
	    let localctx = new VariableStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, vbaParser.RULE_variableStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2049;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.DIM:
	            this.state = 2046;
	            this.match(vbaParser.DIM);
	            break;
	        case vbaParser.STATIC:
	            this.state = 2047;
	            this.match(vbaParser.STATIC);
	            break;
	        case vbaParser.FRIEND:
	        case vbaParser.GLOBAL:
	        case vbaParser.PRIVATE:
	        case vbaParser.PUBLIC:
	            this.state = 2048;
	            this.visibility();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2051;
	        this.match(vbaParser.WS);
	        this.state = 2054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	        if(la_===1) {
	            this.state = 2052;
	            this.match(vbaParser.WITHEVENTS);
	            this.state = 2053;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2056;
	        this.variableListStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableListStmt() {
	    let localctx = new VariableListStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, vbaParser.RULE_variableListStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2058;
	        this.variableSubStmt();
	        this.state = 2069;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,321,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2060;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2059;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2062;
	                this.match(vbaParser.T__0);
	                this.state = 2064;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2063;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2066;
	                this.variableSubStmt(); 
	            }
	            this.state = 2071;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,321,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableSubStmt() {
	    let localctx = new VariableSubStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, vbaParser.RULE_variableSubStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2072;
	        this.ambiguousIdentifier();
	        this.state = 2090;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	        if(la_===1) {
	            this.state = 2074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2073;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2076;
	            this.match(vbaParser.LPAREN);
	            this.state = 2078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2077;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
	                this.state = 2080;
	                this.subscripts();
	                this.state = 2082;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2081;
	                    this.match(vbaParser.WS);
	                }

	            }

	            this.state = 2086;
	            this.match(vbaParser.RPAREN);
	            this.state = 2088;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	            if(la_===1) {
	                this.state = 2087;
	                this.match(vbaParser.WS);

	            }

	        }
	        this.state = 2093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        if(la_===1) {
	            this.state = 2092;
	            this.typeHint();

	        }
	        this.state = 2097;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	        if(la_===1) {
	            this.state = 2095;
	            this.match(vbaParser.WS);
	            this.state = 2096;
	            this.asTypeClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileWendStmt() {
	    let localctx = new WhileWendStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, vbaParser.RULE_whileWendStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2099;
	        this.match(vbaParser.WHILE);
	        this.state = 2100;
	        this.match(vbaParser.WS);
	        this.state = 2101;
	        this.valueStmt(0);
	        this.state = 2102;
	        this.endOfStatement();
	        this.state = 2104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        if(la_===1) {
	            this.state = 2103;
	            this.block();

	        }
	        this.state = 2106;
	        this.match(vbaParser.WEND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widthStmt() {
	    let localctx = new WidthStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, vbaParser.RULE_widthStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2108;
	        this.match(vbaParser.WIDTH);
	        this.state = 2109;
	        this.match(vbaParser.WS);
	        this.state = 2110;
	        this.fileNumber();
	        this.state = 2112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2111;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2114;
	        this.match(vbaParser.T__0);
	        this.state = 2116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2115;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2118;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStmt() {
	    let localctx = new WithStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, vbaParser.RULE_withStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.match(vbaParser.WITH);
	        this.state = 2121;
	        this.match(vbaParser.WS);
	        this.state = 2126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2122;
	            this.implicitCallStmt_InStmt();
	            break;

	        case 2:
	            this.state = 2123;
	            this.match(vbaParser.NEW);
	            this.state = 2124;
	            this.match(vbaParser.WS);
	            this.state = 2125;
	            this.type_();
	            break;

	        }
	        this.state = 2128;
	        this.endOfStatement();
	        this.state = 2130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LINE_INPUT - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.MACRO_CONST - 96)) | (1 << (vbaParser.MACRO_IF - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.ON_ERROR - 96)) | (1 << (vbaParser.ON_LOCAL_ERROR - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || _la===vbaParser.IDENTIFIER) {
	            this.state = 2129;
	            this.block();
	        }

	        this.state = 2132;
	        this.match(vbaParser.END_WITH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeStmt() {
	    let localctx = new WriteStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, vbaParser.RULE_writeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.match(vbaParser.WRITE);
	        this.state = 2135;
	        this.match(vbaParser.WS);
	        this.state = 2136;
	        this.fileNumber();
	        this.state = 2138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2137;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2140;
	        this.match(vbaParser.T__0);
	        this.state = 2145;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	        if(la_===1) {
	            this.state = 2142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	            if(la_===1) {
	                this.state = 2141;
	                this.match(vbaParser.WS);

	            }
	            this.state = 2144;
	            this.outputList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileNumber() {
	    let localctx = new FileNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, vbaParser.RULE_fileNumber);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.T__2) {
	            this.state = 2147;
	            this.match(vbaParser.T__2);
	        }

	        this.state = 2150;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitCallStmt() {
	    let localctx = new ExplicitCallStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, vbaParser.RULE_explicitCallStmt);
	    try {
	        this.state = 2154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2152;
	            this.eCS_ProcedureCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2153;
	            this.eCS_MemberProcedureCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eCS_ProcedureCall() {
	    let localctx = new ECS_ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, vbaParser.RULE_eCS_ProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2156;
	        this.match(vbaParser.CALL);
	        this.state = 2157;
	        this.match(vbaParser.WS);
	        this.state = 2158;
	        this.ambiguousIdentifier();
	        this.state = 2160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        if(la_===1) {
	            this.state = 2159;
	            this.typeHint();

	        }
	        this.state = 2175;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        if(la_===1) {
	            this.state = 2163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2162;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2165;
	            this.match(vbaParser.LPAREN);
	            this.state = 2167;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	            if(la_===1) {
	                this.state = 2166;
	                this.match(vbaParser.WS);

	            }
	            this.state = 2169;
	            this.argsCall();
	            this.state = 2171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2170;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2173;
	            this.match(vbaParser.RPAREN);

	        }
	        this.state = 2186;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,346,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2178;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2177;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2180;
	                this.match(vbaParser.LPAREN);
	                this.state = 2181;
	                this.subscripts();
	                this.state = 2182;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2188;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,346,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eCS_MemberProcedureCall() {
	    let localctx = new ECS_MemberProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, vbaParser.RULE_eCS_MemberProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.match(vbaParser.CALL);
	        this.state = 2190;
	        this.match(vbaParser.WS);
	        this.state = 2192;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        if(la_===1) {
	            this.state = 2191;
	            this.implicitCallStmt_InStmt();

	        }
	        this.state = 2194;
	        this.match(vbaParser.T__3);
	        this.state = 2195;
	        this.ambiguousIdentifier();
	        this.state = 2197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	        if(la_===1) {
	            this.state = 2196;
	            this.typeHint();

	        }
	        this.state = 2212;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        if(la_===1) {
	            this.state = 2200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2199;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2202;
	            this.match(vbaParser.LPAREN);
	            this.state = 2204;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	            if(la_===1) {
	                this.state = 2203;
	                this.match(vbaParser.WS);

	            }
	            this.state = 2206;
	            this.argsCall();
	            this.state = 2208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2207;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2210;
	            this.match(vbaParser.RPAREN);

	        }
	        this.state = 2223;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2215;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2214;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2217;
	                this.match(vbaParser.LPAREN);
	                this.state = 2218;
	                this.subscripts();
	                this.state = 2219;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2225;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitCallStmt_InBlock() {
	    let localctx = new ImplicitCallStmt_InBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, vbaParser.RULE_implicitCallStmt_InBlock);
	    try {
	        this.state = 2228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2226;
	            this.iCS_B_MemberProcedureCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2227;
	            this.iCS_B_ProcedureCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_B_MemberProcedureCall() {
	    let localctx = new ICS_B_MemberProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, vbaParser.RULE_iCS_B_MemberProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	        if(la_===1) {
	            this.state = 2230;
	            this.implicitCallStmt_InStmt();

	        }
	        this.state = 2233;
	        this.match(vbaParser.T__3);
	        this.state = 2234;
	        this.ambiguousIdentifier();
	        this.state = 2236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        if(la_===1) {
	            this.state = 2235;
	            this.typeHint();

	        }
	        this.state = 2240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	        if(la_===1) {
	            this.state = 2238;
	            this.match(vbaParser.WS);
	            this.state = 2239;
	            this.argsCall();

	        }
	        this.state = 2243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	        if(la_===1) {
	            this.state = 2242;
	            this.dictionaryCallStmt();

	        }
	        this.state = 2254;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,361,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2246;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2245;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2248;
	                this.match(vbaParser.LPAREN);
	                this.state = 2249;
	                this.subscripts();
	                this.state = 2250;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2256;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,361,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_B_ProcedureCall() {
	    let localctx = new ICS_B_ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, vbaParser.RULE_iCS_B_ProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2257;
	        this.certainIdentifier();
	        this.state = 2260;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	        if(la_===1) {
	            this.state = 2258;
	            this.match(vbaParser.WS);
	            this.state = 2259;
	            this.argsCall();

	        }
	        this.state = 2271;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,364,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2263;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2262;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2265;
	                this.match(vbaParser.LPAREN);
	                this.state = 2266;
	                this.subscripts();
	                this.state = 2267;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2273;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,364,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitCallStmt_InStmt() {
	    let localctx = new ImplicitCallStmt_InStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, vbaParser.RULE_implicitCallStmt_InStmt);
	    try {
	        this.state = 2278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2274;
	            this.iCS_S_MembersCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2275;
	            this.iCS_S_VariableOrProcedureCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2276;
	            this.iCS_S_ProcedureOrArrayCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2277;
	            this.iCS_S_DictionaryCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_VariableOrProcedureCall() {
	    let localctx = new ICS_S_VariableOrProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, vbaParser.RULE_iCS_S_VariableOrProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2280;
	        this.ambiguousIdentifier();
	        this.state = 2282;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	        if(la_===1) {
	            this.state = 2281;
	            this.typeHint();

	        }
	        this.state = 2285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	        if(la_===1) {
	            this.state = 2284;
	            this.dictionaryCallStmt();

	        }
	        this.state = 2296;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,369,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2288;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2287;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2290;
	                this.match(vbaParser.LPAREN);
	                this.state = 2291;
	                this.subscripts();
	                this.state = 2292;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2298;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,369,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_ProcedureOrArrayCall() {
	    let localctx = new ICS_S_ProcedureOrArrayCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, vbaParser.RULE_iCS_S_ProcedureOrArrayCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2299;
	            this.ambiguousIdentifier();
	            break;

	        case 2:
	            this.state = 2300;
	            this.baseType();
	            break;

	        }
	        this.state = 2304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 2303;
	            this.typeHint();
	        }

	        this.state = 2307;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2306;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2309;
	        this.match(vbaParser.LPAREN);
	        this.state = 2311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	        if(la_===1) {
	            this.state = 2310;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	        if(la_===1) {
	            this.state = 2313;
	            this.argsCall();
	            this.state = 2315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2314;
	                this.match(vbaParser.WS);
	            }


	        }
	        this.state = 2319;
	        this.match(vbaParser.RPAREN);
	        this.state = 2321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	        if(la_===1) {
	            this.state = 2320;
	            this.dictionaryCallStmt();

	        }
	        this.state = 2332;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,378,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2324;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2323;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2326;
	                this.match(vbaParser.LPAREN);
	                this.state = 2327;
	                this.subscripts();
	                this.state = 2328;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2334;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,378,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_MembersCall() {
	    let localctx = new ICS_S_MembersCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, vbaParser.RULE_iCS_S_MembersCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	        if(la_===1) {
	            this.state = 2335;
	            this.iCS_S_VariableOrProcedureCall();

	        } else if(la_===2) {
	            this.state = 2336;
	            this.iCS_S_ProcedureOrArrayCall();

	        }
	        this.state = 2340; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2339;
	        		this.iCS_S_MemberCall();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2342; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,380, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	        if(la_===1) {
	            this.state = 2344;
	            this.dictionaryCallStmt();

	        }
	        this.state = 2356;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,383,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2348;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2347;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2350;
	                this.match(vbaParser.LPAREN);
	                this.state = 2351;
	                this.subscripts();
	                this.state = 2352;
	                this.match(vbaParser.RPAREN); 
	            }
	            this.state = 2358;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,383,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_MemberCall() {
	    let localctx = new ICS_S_MemberCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, vbaParser.RULE_iCS_S_MemberCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2359;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.T__3 || _la===vbaParser.T__4)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2360;
	            this.iCS_S_VariableOrProcedureCall();
	            break;

	        case 2:
	            this.state = 2361;
	            this.iCS_S_ProcedureOrArrayCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iCS_S_DictionaryCall() {
	    let localctx = new ICS_S_DictionaryCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, vbaParser.RULE_iCS_S_DictionaryCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2364;
	        this.dictionaryCallStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argsCall() {
	    let localctx = new ArgsCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, vbaParser.RULE_argsCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2378;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,388,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2367;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.RPAREN - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) !== 0)) {
	                    this.state = 2366;
	                    this.argCall();
	                }

	                this.state = 2370;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2369;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2372;
	                _la = this._input.LA(1);
	                if(!(_la===vbaParser.T__0 || _la===vbaParser.T__1)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2374;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	                if(la_===1) {
	                    this.state = 2373;
	                    this.match(vbaParser.WS);

	                } 
	            }
	            this.state = 2380;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,388,this._ctx);
	        }

	        this.state = 2381;
	        this.argCall();
	        this.state = 2394;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,392,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2383;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2382;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2385;
	                _la = this._input.LA(1);
	                if(!(_la===vbaParser.T__0 || _la===vbaParser.T__1)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2387;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	                if(la_===1) {
	                    this.state = 2386;
	                    this.match(vbaParser.WS);

	                }
	                this.state = 2390;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	                if(la_===1) {
	                    this.state = 2389;
	                    this.argCall();

	                } 
	            }
	            this.state = 2396;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,392,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCall() {
	    let localctx = new ArgCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, vbaParser.RULE_argCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2398;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        if(la_===1) {
	            this.state = 2397;
	            this.match(vbaParser.LPAREN);

	        }
	        this.state = 2402;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        if(la_===1) {
	            this.state = 2400;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.BYVAL || _la===vbaParser.BYREF || _la===vbaParser.PARAMARRAY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2401;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2405;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.RPAREN) {
	            this.state = 2404;
	            this.match(vbaParser.RPAREN);
	        }

	        this.state = 2407;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryCallStmt() {
	    let localctx = new DictionaryCallStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, vbaParser.RULE_dictionaryCallStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2409;
	        this.match(vbaParser.T__4);
	        this.state = 2410;
	        this.ambiguousIdentifier();
	        this.state = 2412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	        if(la_===1) {
	            this.state = 2411;
	            this.typeHint();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argList() {
	    let localctx = new ArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, vbaParser.RULE_argList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2414;
	        this.match(vbaParser.LPAREN);
	        this.state = 2432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
	        if(la_===1) {
	            this.state = 2416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2415;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2418;
	            this.arg();
	            this.state = 2429;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,400,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2420;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2419;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2422;
	                    this.match(vbaParser.T__0);
	                    this.state = 2424;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2423;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2426;
	                    this.arg(); 
	                }
	                this.state = 2431;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,400,this._ctx);
	            }


	        }
	        this.state = 2435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2434;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2437;
	        this.match(vbaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, vbaParser.RULE_arg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,403,this._ctx);
	        if(la_===1) {
	            this.state = 2439;
	            this.match(vbaParser.OPTIONAL);
	            this.state = 2440;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        if(la_===1) {
	            this.state = 2443;
	            _la = this._input.LA(1);
	            if(!(_la===vbaParser.BYVAL || _la===vbaParser.BYREF)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2444;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2449;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        if(la_===1) {
	            this.state = 2447;
	            this.match(vbaParser.PARAMARRAY);
	            this.state = 2448;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2451;
	        this.ambiguousIdentifier();
	        this.state = 2453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND) {
	            this.state = 2452;
	            this.typeHint();
	        }

	        this.state = 2463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	        if(la_===1) {
	            this.state = 2456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2455;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2458;
	            this.match(vbaParser.LPAREN);
	            this.state = 2460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2459;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2462;
	            this.match(vbaParser.RPAREN);

	        }
	        this.state = 2469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	        if(la_===1) {
	            this.state = 2466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2465;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2468;
	            this.asTypeClause();

	        }
	        this.state = 2475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	        if(la_===1) {
	            this.state = 2472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2471;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2474;
	            this.argDefaultValue();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argDefaultValue() {
	    let localctx = new ArgDefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, vbaParser.RULE_argDefaultValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2477;
	        this.match(vbaParser.EQ);
	        this.state = 2479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2478;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2481;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscripts() {
	    let localctx = new SubscriptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, vbaParser.RULE_subscripts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2483;
	        this.subscript_();
	        this.state = 2494;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,417,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2485;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2484;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2487;
	                this.match(vbaParser.T__0);
	                this.state = 2489;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2488;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2491;
	                this.subscript_(); 
	            }
	            this.state = 2496;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,417,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, vbaParser.RULE_subscript_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	        if(la_===1) {
	            this.state = 2497;
	            this.valueStmt(0);
	            this.state = 2498;
	            this.match(vbaParser.WS);
	            this.state = 2499;
	            this.match(vbaParser.TO);
	            this.state = 2500;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2504;
	        this.valueStmt(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousIdentifier() {
	    let localctx = new AmbiguousIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, vbaParser.RULE_ambiguousIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2508;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case vbaParser.IDENTIFIER:
	        		    this.state = 2506;
	        		    this.match(vbaParser.IDENTIFIER);
	        		    break;
	        		case vbaParser.ACCESS:
	        		case vbaParser.ADDRESSOF:
	        		case vbaParser.ALIAS:
	        		case vbaParser.AND:
	        		case vbaParser.ATTRIBUTE:
	        		case vbaParser.APPACTIVATE:
	        		case vbaParser.APPEND:
	        		case vbaParser.AS:
	        		case vbaParser.BEGIN:
	        		case vbaParser.BEEP:
	        		case vbaParser.BINARY:
	        		case vbaParser.BOOLEAN:
	        		case vbaParser.BYVAL:
	        		case vbaParser.BYREF:
	        		case vbaParser.BYTE:
	        		case vbaParser.CALL:
	        		case vbaParser.CASE:
	        		case vbaParser.CHDIR:
	        		case vbaParser.CHDRIVE:
	        		case vbaParser.CLASS:
	        		case vbaParser.CLOSE:
	        		case vbaParser.COLLECTION:
	        		case vbaParser.CONST:
	        		case vbaParser.DATABASE:
	        		case vbaParser.DATE:
	        		case vbaParser.DECLARE:
	        		case vbaParser.DEFBOOL:
	        		case vbaParser.DEFBYTE:
	        		case vbaParser.DEFDATE:
	        		case vbaParser.DEFDBL:
	        		case vbaParser.DEFDEC:
	        		case vbaParser.DEFCUR:
	        		case vbaParser.DEFINT:
	        		case vbaParser.DEFLNG:
	        		case vbaParser.DEFOBJ:
	        		case vbaParser.DEFSNG:
	        		case vbaParser.DEFSTR:
	        		case vbaParser.DEFVAR:
	        		case vbaParser.DELETESETTING:
	        		case vbaParser.DIM:
	        		case vbaParser.DO:
	        		case vbaParser.DOUBLE:
	        		case vbaParser.EACH:
	        		case vbaParser.ELSE:
	        		case vbaParser.ELSEIF:
	        		case vbaParser.END:
	        		case vbaParser.ENUM:
	        		case vbaParser.EQV:
	        		case vbaParser.ERASE:
	        		case vbaParser.ERROR:
	        		case vbaParser.EVENT:
	        		case vbaParser.FALSE:
	        		case vbaParser.FILECOPY:
	        		case vbaParser.FRIEND:
	        		case vbaParser.FOR:
	        		case vbaParser.FUNCTION:
	        		case vbaParser.GET:
	        		case vbaParser.GLOBAL:
	        		case vbaParser.GOSUB:
	        		case vbaParser.GOTO:
	        		case vbaParser.IF:
	        		case vbaParser.IMP:
	        		case vbaParser.IMPLEMENTS:
	        		case vbaParser.IN:
	        		case vbaParser.INPUT:
	        		case vbaParser.IS:
	        		case vbaParser.INTEGER:
	        		case vbaParser.KILL:
	        		case vbaParser.LOAD:
	        		case vbaParser.LOCK:
	        		case vbaParser.LONG:
	        		case vbaParser.LOOP:
	        		case vbaParser.LEN:
	        		case vbaParser.LET:
	        		case vbaParser.LIB:
	        		case vbaParser.LIKE:
	        		case vbaParser.LSET:
	        		case vbaParser.ME:
	        		case vbaParser.MID:
	        		case vbaParser.MKDIR:
	        		case vbaParser.MOD:
	        		case vbaParser.NAME:
	        		case vbaParser.NEXT:
	        		case vbaParser.NEW:
	        		case vbaParser.NOT:
	        		case vbaParser.NOTHING:
	        		case vbaParser.NULL_:
	        		case vbaParser.ON:
	        		case vbaParser.OPEN:
	        		case vbaParser.OPTIONAL:
	        		case vbaParser.OR:
	        		case vbaParser.OUTPUT:
	        		case vbaParser.PARAMARRAY:
	        		case vbaParser.PRESERVE:
	        		case vbaParser.PRINT:
	        		case vbaParser.PRIVATE:
	        		case vbaParser.PUBLIC:
	        		case vbaParser.PUT:
	        		case vbaParser.RANDOM:
	        		case vbaParser.RANDOMIZE:
	        		case vbaParser.RAISEEVENT:
	        		case vbaParser.READ:
	        		case vbaParser.REDIM:
	        		case vbaParser.REM:
	        		case vbaParser.RESET:
	        		case vbaParser.RESUME:
	        		case vbaParser.RETURN:
	        		case vbaParser.RMDIR:
	        		case vbaParser.RSET:
	        		case vbaParser.SAVEPICTURE:
	        		case vbaParser.SAVESETTING:
	        		case vbaParser.SEEK:
	        		case vbaParser.SELECT:
	        		case vbaParser.SENDKEYS:
	        		case vbaParser.SET:
	        		case vbaParser.SETATTR:
	        		case vbaParser.SHARED:
	        		case vbaParser.SINGLE:
	        		case vbaParser.SPC:
	        		case vbaParser.STATIC:
	        		case vbaParser.STEP:
	        		case vbaParser.STOP:
	        		case vbaParser.STRING:
	        		case vbaParser.SUB:
	        		case vbaParser.TAB:
	        		case vbaParser.TEXT:
	        		case vbaParser.THEN:
	        		case vbaParser.TIME:
	        		case vbaParser.TO:
	        		case vbaParser.TRUE:
	        		case vbaParser.TYPE:
	        		case vbaParser.TYPEOF:
	        		case vbaParser.UNLOAD:
	        		case vbaParser.UNLOCK:
	        		case vbaParser.UNTIL:
	        		case vbaParser.VARIANT:
	        		case vbaParser.VERSION:
	        		case vbaParser.WEND:
	        		case vbaParser.WHILE:
	        		case vbaParser.WIDTH:
	        		case vbaParser.WITH:
	        		case vbaParser.WITHEVENTS:
	        		case vbaParser.WRITE:
	        		case vbaParser.XOR:
	        		    this.state = 2507;
	        		    this.ambiguousKeyword();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2510; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,420, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asTypeClause() {
	    let localctx = new AsTypeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, vbaParser.RULE_asTypeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2512;
	        this.match(vbaParser.AS);
	        this.state = 2514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2513;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
	        if(la_===1) {
	            this.state = 2516;
	            this.match(vbaParser.NEW);
	            this.state = 2517;
	            this.match(vbaParser.WS);

	        }
	        this.state = 2520;
	        this.type_();
	        this.state = 2525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,424,this._ctx);
	        if(la_===1) {
	            this.state = 2522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2521;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2524;
	            this.fieldLength();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseType() {
	    let localctx = new BaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, vbaParser.RULE_baseType);
	    var _la = 0; // Token type
	    try {
	        this.state = 2547;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.BOOLEAN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2527;
	            this.match(vbaParser.BOOLEAN);
	            break;
	        case vbaParser.BYTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2528;
	            this.match(vbaParser.BYTE);
	            break;
	        case vbaParser.COLLECTION:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2529;
	            this.match(vbaParser.COLLECTION);
	            break;
	        case vbaParser.DATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2530;
	            this.match(vbaParser.DATE);
	            break;
	        case vbaParser.DOUBLE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2531;
	            this.match(vbaParser.DOUBLE);
	            break;
	        case vbaParser.INTEGER:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2532;
	            this.match(vbaParser.INTEGER);
	            break;
	        case vbaParser.LONG:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2533;
	            this.match(vbaParser.LONG);
	            break;
	        case vbaParser.SINGLE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2534;
	            this.match(vbaParser.SINGLE);
	            break;
	        case vbaParser.STRING:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2535;
	            this.match(vbaParser.STRING);
	            this.state = 2544;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
	            if(la_===1) {
	                this.state = 2537;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2536;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2539;
	                this.match(vbaParser.MULT);
	                this.state = 2541;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===vbaParser.WS) {
	                    this.state = 2540;
	                    this.match(vbaParser.WS);
	                }

	                this.state = 2543;
	                this.valueStmt(0);

	            }
	            break;
	        case vbaParser.VARIANT:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2546;
	            this.match(vbaParser.VARIANT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	certainIdentifier() {
	    let localctx = new CertainIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, vbaParser.RULE_certainIdentifier);
	    try {
	        this.state = 2564;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2549;
	            this.match(vbaParser.IDENTIFIER);
	            this.state = 2554;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,430,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2552;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case vbaParser.ACCESS:
	                    case vbaParser.ADDRESSOF:
	                    case vbaParser.ALIAS:
	                    case vbaParser.AND:
	                    case vbaParser.ATTRIBUTE:
	                    case vbaParser.APPACTIVATE:
	                    case vbaParser.APPEND:
	                    case vbaParser.AS:
	                    case vbaParser.BEGIN:
	                    case vbaParser.BEEP:
	                    case vbaParser.BINARY:
	                    case vbaParser.BOOLEAN:
	                    case vbaParser.BYVAL:
	                    case vbaParser.BYREF:
	                    case vbaParser.BYTE:
	                    case vbaParser.CALL:
	                    case vbaParser.CASE:
	                    case vbaParser.CHDIR:
	                    case vbaParser.CHDRIVE:
	                    case vbaParser.CLASS:
	                    case vbaParser.CLOSE:
	                    case vbaParser.COLLECTION:
	                    case vbaParser.CONST:
	                    case vbaParser.DATABASE:
	                    case vbaParser.DATE:
	                    case vbaParser.DECLARE:
	                    case vbaParser.DEFBOOL:
	                    case vbaParser.DEFBYTE:
	                    case vbaParser.DEFDATE:
	                    case vbaParser.DEFDBL:
	                    case vbaParser.DEFDEC:
	                    case vbaParser.DEFCUR:
	                    case vbaParser.DEFINT:
	                    case vbaParser.DEFLNG:
	                    case vbaParser.DEFOBJ:
	                    case vbaParser.DEFSNG:
	                    case vbaParser.DEFSTR:
	                    case vbaParser.DEFVAR:
	                    case vbaParser.DELETESETTING:
	                    case vbaParser.DIM:
	                    case vbaParser.DO:
	                    case vbaParser.DOUBLE:
	                    case vbaParser.EACH:
	                    case vbaParser.ELSE:
	                    case vbaParser.ELSEIF:
	                    case vbaParser.END:
	                    case vbaParser.ENUM:
	                    case vbaParser.EQV:
	                    case vbaParser.ERASE:
	                    case vbaParser.ERROR:
	                    case vbaParser.EVENT:
	                    case vbaParser.FALSE:
	                    case vbaParser.FILECOPY:
	                    case vbaParser.FRIEND:
	                    case vbaParser.FOR:
	                    case vbaParser.FUNCTION:
	                    case vbaParser.GET:
	                    case vbaParser.GLOBAL:
	                    case vbaParser.GOSUB:
	                    case vbaParser.GOTO:
	                    case vbaParser.IF:
	                    case vbaParser.IMP:
	                    case vbaParser.IMPLEMENTS:
	                    case vbaParser.IN:
	                    case vbaParser.INPUT:
	                    case vbaParser.IS:
	                    case vbaParser.INTEGER:
	                    case vbaParser.KILL:
	                    case vbaParser.LOAD:
	                    case vbaParser.LOCK:
	                    case vbaParser.LONG:
	                    case vbaParser.LOOP:
	                    case vbaParser.LEN:
	                    case vbaParser.LET:
	                    case vbaParser.LIB:
	                    case vbaParser.LIKE:
	                    case vbaParser.LSET:
	                    case vbaParser.ME:
	                    case vbaParser.MID:
	                    case vbaParser.MKDIR:
	                    case vbaParser.MOD:
	                    case vbaParser.NAME:
	                    case vbaParser.NEXT:
	                    case vbaParser.NEW:
	                    case vbaParser.NOT:
	                    case vbaParser.NOTHING:
	                    case vbaParser.NULL_:
	                    case vbaParser.ON:
	                    case vbaParser.OPEN:
	                    case vbaParser.OPTIONAL:
	                    case vbaParser.OR:
	                    case vbaParser.OUTPUT:
	                    case vbaParser.PARAMARRAY:
	                    case vbaParser.PRESERVE:
	                    case vbaParser.PRINT:
	                    case vbaParser.PRIVATE:
	                    case vbaParser.PUBLIC:
	                    case vbaParser.PUT:
	                    case vbaParser.RANDOM:
	                    case vbaParser.RANDOMIZE:
	                    case vbaParser.RAISEEVENT:
	                    case vbaParser.READ:
	                    case vbaParser.REDIM:
	                    case vbaParser.REM:
	                    case vbaParser.RESET:
	                    case vbaParser.RESUME:
	                    case vbaParser.RETURN:
	                    case vbaParser.RMDIR:
	                    case vbaParser.RSET:
	                    case vbaParser.SAVEPICTURE:
	                    case vbaParser.SAVESETTING:
	                    case vbaParser.SEEK:
	                    case vbaParser.SELECT:
	                    case vbaParser.SENDKEYS:
	                    case vbaParser.SET:
	                    case vbaParser.SETATTR:
	                    case vbaParser.SHARED:
	                    case vbaParser.SINGLE:
	                    case vbaParser.SPC:
	                    case vbaParser.STATIC:
	                    case vbaParser.STEP:
	                    case vbaParser.STOP:
	                    case vbaParser.STRING:
	                    case vbaParser.SUB:
	                    case vbaParser.TAB:
	                    case vbaParser.TEXT:
	                    case vbaParser.THEN:
	                    case vbaParser.TIME:
	                    case vbaParser.TO:
	                    case vbaParser.TRUE:
	                    case vbaParser.TYPE:
	                    case vbaParser.TYPEOF:
	                    case vbaParser.UNLOAD:
	                    case vbaParser.UNLOCK:
	                    case vbaParser.UNTIL:
	                    case vbaParser.VARIANT:
	                    case vbaParser.VERSION:
	                    case vbaParser.WEND:
	                    case vbaParser.WHILE:
	                    case vbaParser.WIDTH:
	                    case vbaParser.WITH:
	                    case vbaParser.WITHEVENTS:
	                    case vbaParser.WRITE:
	                    case vbaParser.XOR:
	                        this.state = 2550;
	                        this.ambiguousKeyword();
	                        break;
	                    case vbaParser.IDENTIFIER:
	                        this.state = 2551;
	                        this.match(vbaParser.IDENTIFIER);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 2556;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,430,this._ctx);
	            }

	            break;
	        case vbaParser.ACCESS:
	        case vbaParser.ADDRESSOF:
	        case vbaParser.ALIAS:
	        case vbaParser.AND:
	        case vbaParser.ATTRIBUTE:
	        case vbaParser.APPACTIVATE:
	        case vbaParser.APPEND:
	        case vbaParser.AS:
	        case vbaParser.BEGIN:
	        case vbaParser.BEEP:
	        case vbaParser.BINARY:
	        case vbaParser.BOOLEAN:
	        case vbaParser.BYVAL:
	        case vbaParser.BYREF:
	        case vbaParser.BYTE:
	        case vbaParser.CALL:
	        case vbaParser.CASE:
	        case vbaParser.CHDIR:
	        case vbaParser.CHDRIVE:
	        case vbaParser.CLASS:
	        case vbaParser.CLOSE:
	        case vbaParser.COLLECTION:
	        case vbaParser.CONST:
	        case vbaParser.DATABASE:
	        case vbaParser.DATE:
	        case vbaParser.DECLARE:
	        case vbaParser.DEFBOOL:
	        case vbaParser.DEFBYTE:
	        case vbaParser.DEFDATE:
	        case vbaParser.DEFDBL:
	        case vbaParser.DEFDEC:
	        case vbaParser.DEFCUR:
	        case vbaParser.DEFINT:
	        case vbaParser.DEFLNG:
	        case vbaParser.DEFOBJ:
	        case vbaParser.DEFSNG:
	        case vbaParser.DEFSTR:
	        case vbaParser.DEFVAR:
	        case vbaParser.DELETESETTING:
	        case vbaParser.DIM:
	        case vbaParser.DO:
	        case vbaParser.DOUBLE:
	        case vbaParser.EACH:
	        case vbaParser.ELSE:
	        case vbaParser.ELSEIF:
	        case vbaParser.END:
	        case vbaParser.ENUM:
	        case vbaParser.EQV:
	        case vbaParser.ERASE:
	        case vbaParser.ERROR:
	        case vbaParser.EVENT:
	        case vbaParser.FALSE:
	        case vbaParser.FILECOPY:
	        case vbaParser.FRIEND:
	        case vbaParser.FOR:
	        case vbaParser.FUNCTION:
	        case vbaParser.GET:
	        case vbaParser.GLOBAL:
	        case vbaParser.GOSUB:
	        case vbaParser.GOTO:
	        case vbaParser.IF:
	        case vbaParser.IMP:
	        case vbaParser.IMPLEMENTS:
	        case vbaParser.IN:
	        case vbaParser.INPUT:
	        case vbaParser.IS:
	        case vbaParser.INTEGER:
	        case vbaParser.KILL:
	        case vbaParser.LOAD:
	        case vbaParser.LOCK:
	        case vbaParser.LONG:
	        case vbaParser.LOOP:
	        case vbaParser.LEN:
	        case vbaParser.LET:
	        case vbaParser.LIB:
	        case vbaParser.LIKE:
	        case vbaParser.LSET:
	        case vbaParser.ME:
	        case vbaParser.MID:
	        case vbaParser.MKDIR:
	        case vbaParser.MOD:
	        case vbaParser.NAME:
	        case vbaParser.NEXT:
	        case vbaParser.NEW:
	        case vbaParser.NOT:
	        case vbaParser.NOTHING:
	        case vbaParser.NULL_:
	        case vbaParser.ON:
	        case vbaParser.OPEN:
	        case vbaParser.OPTIONAL:
	        case vbaParser.OR:
	        case vbaParser.OUTPUT:
	        case vbaParser.PARAMARRAY:
	        case vbaParser.PRESERVE:
	        case vbaParser.PRINT:
	        case vbaParser.PRIVATE:
	        case vbaParser.PUBLIC:
	        case vbaParser.PUT:
	        case vbaParser.RANDOM:
	        case vbaParser.RANDOMIZE:
	        case vbaParser.RAISEEVENT:
	        case vbaParser.READ:
	        case vbaParser.REDIM:
	        case vbaParser.REM:
	        case vbaParser.RESET:
	        case vbaParser.RESUME:
	        case vbaParser.RETURN:
	        case vbaParser.RMDIR:
	        case vbaParser.RSET:
	        case vbaParser.SAVEPICTURE:
	        case vbaParser.SAVESETTING:
	        case vbaParser.SEEK:
	        case vbaParser.SELECT:
	        case vbaParser.SENDKEYS:
	        case vbaParser.SET:
	        case vbaParser.SETATTR:
	        case vbaParser.SHARED:
	        case vbaParser.SINGLE:
	        case vbaParser.SPC:
	        case vbaParser.STATIC:
	        case vbaParser.STEP:
	        case vbaParser.STOP:
	        case vbaParser.STRING:
	        case vbaParser.SUB:
	        case vbaParser.TAB:
	        case vbaParser.TEXT:
	        case vbaParser.THEN:
	        case vbaParser.TIME:
	        case vbaParser.TO:
	        case vbaParser.TRUE:
	        case vbaParser.TYPE:
	        case vbaParser.TYPEOF:
	        case vbaParser.UNLOAD:
	        case vbaParser.UNLOCK:
	        case vbaParser.UNTIL:
	        case vbaParser.VARIANT:
	        case vbaParser.VERSION:
	        case vbaParser.WEND:
	        case vbaParser.WHILE:
	        case vbaParser.WIDTH:
	        case vbaParser.WITH:
	        case vbaParser.WITHEVENTS:
	        case vbaParser.WRITE:
	        case vbaParser.XOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2557;
	            this.ambiguousKeyword();
	            this.state = 2560; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2560;
	            		this._errHandler.sync(this);
	            		switch(this._input.LA(1)) {
	            		case vbaParser.ACCESS:
	            		case vbaParser.ADDRESSOF:
	            		case vbaParser.ALIAS:
	            		case vbaParser.AND:
	            		case vbaParser.ATTRIBUTE:
	            		case vbaParser.APPACTIVATE:
	            		case vbaParser.APPEND:
	            		case vbaParser.AS:
	            		case vbaParser.BEGIN:
	            		case vbaParser.BEEP:
	            		case vbaParser.BINARY:
	            		case vbaParser.BOOLEAN:
	            		case vbaParser.BYVAL:
	            		case vbaParser.BYREF:
	            		case vbaParser.BYTE:
	            		case vbaParser.CALL:
	            		case vbaParser.CASE:
	            		case vbaParser.CHDIR:
	            		case vbaParser.CHDRIVE:
	            		case vbaParser.CLASS:
	            		case vbaParser.CLOSE:
	            		case vbaParser.COLLECTION:
	            		case vbaParser.CONST:
	            		case vbaParser.DATABASE:
	            		case vbaParser.DATE:
	            		case vbaParser.DECLARE:
	            		case vbaParser.DEFBOOL:
	            		case vbaParser.DEFBYTE:
	            		case vbaParser.DEFDATE:
	            		case vbaParser.DEFDBL:
	            		case vbaParser.DEFDEC:
	            		case vbaParser.DEFCUR:
	            		case vbaParser.DEFINT:
	            		case vbaParser.DEFLNG:
	            		case vbaParser.DEFOBJ:
	            		case vbaParser.DEFSNG:
	            		case vbaParser.DEFSTR:
	            		case vbaParser.DEFVAR:
	            		case vbaParser.DELETESETTING:
	            		case vbaParser.DIM:
	            		case vbaParser.DO:
	            		case vbaParser.DOUBLE:
	            		case vbaParser.EACH:
	            		case vbaParser.ELSE:
	            		case vbaParser.ELSEIF:
	            		case vbaParser.END:
	            		case vbaParser.ENUM:
	            		case vbaParser.EQV:
	            		case vbaParser.ERASE:
	            		case vbaParser.ERROR:
	            		case vbaParser.EVENT:
	            		case vbaParser.FALSE:
	            		case vbaParser.FILECOPY:
	            		case vbaParser.FRIEND:
	            		case vbaParser.FOR:
	            		case vbaParser.FUNCTION:
	            		case vbaParser.GET:
	            		case vbaParser.GLOBAL:
	            		case vbaParser.GOSUB:
	            		case vbaParser.GOTO:
	            		case vbaParser.IF:
	            		case vbaParser.IMP:
	            		case vbaParser.IMPLEMENTS:
	            		case vbaParser.IN:
	            		case vbaParser.INPUT:
	            		case vbaParser.IS:
	            		case vbaParser.INTEGER:
	            		case vbaParser.KILL:
	            		case vbaParser.LOAD:
	            		case vbaParser.LOCK:
	            		case vbaParser.LONG:
	            		case vbaParser.LOOP:
	            		case vbaParser.LEN:
	            		case vbaParser.LET:
	            		case vbaParser.LIB:
	            		case vbaParser.LIKE:
	            		case vbaParser.LSET:
	            		case vbaParser.ME:
	            		case vbaParser.MID:
	            		case vbaParser.MKDIR:
	            		case vbaParser.MOD:
	            		case vbaParser.NAME:
	            		case vbaParser.NEXT:
	            		case vbaParser.NEW:
	            		case vbaParser.NOT:
	            		case vbaParser.NOTHING:
	            		case vbaParser.NULL_:
	            		case vbaParser.ON:
	            		case vbaParser.OPEN:
	            		case vbaParser.OPTIONAL:
	            		case vbaParser.OR:
	            		case vbaParser.OUTPUT:
	            		case vbaParser.PARAMARRAY:
	            		case vbaParser.PRESERVE:
	            		case vbaParser.PRINT:
	            		case vbaParser.PRIVATE:
	            		case vbaParser.PUBLIC:
	            		case vbaParser.PUT:
	            		case vbaParser.RANDOM:
	            		case vbaParser.RANDOMIZE:
	            		case vbaParser.RAISEEVENT:
	            		case vbaParser.READ:
	            		case vbaParser.REDIM:
	            		case vbaParser.REM:
	            		case vbaParser.RESET:
	            		case vbaParser.RESUME:
	            		case vbaParser.RETURN:
	            		case vbaParser.RMDIR:
	            		case vbaParser.RSET:
	            		case vbaParser.SAVEPICTURE:
	            		case vbaParser.SAVESETTING:
	            		case vbaParser.SEEK:
	            		case vbaParser.SELECT:
	            		case vbaParser.SENDKEYS:
	            		case vbaParser.SET:
	            		case vbaParser.SETATTR:
	            		case vbaParser.SHARED:
	            		case vbaParser.SINGLE:
	            		case vbaParser.SPC:
	            		case vbaParser.STATIC:
	            		case vbaParser.STEP:
	            		case vbaParser.STOP:
	            		case vbaParser.STRING:
	            		case vbaParser.SUB:
	            		case vbaParser.TAB:
	            		case vbaParser.TEXT:
	            		case vbaParser.THEN:
	            		case vbaParser.TIME:
	            		case vbaParser.TO:
	            		case vbaParser.TRUE:
	            		case vbaParser.TYPE:
	            		case vbaParser.TYPEOF:
	            		case vbaParser.UNLOAD:
	            		case vbaParser.UNLOCK:
	            		case vbaParser.UNTIL:
	            		case vbaParser.VARIANT:
	            		case vbaParser.VERSION:
	            		case vbaParser.WEND:
	            		case vbaParser.WHILE:
	            		case vbaParser.WIDTH:
	            		case vbaParser.WITH:
	            		case vbaParser.WITHEVENTS:
	            		case vbaParser.WRITE:
	            		case vbaParser.XOR:
	            		    this.state = 2558;
	            		    this.ambiguousKeyword();
	            		    break;
	            		case vbaParser.IDENTIFIER:
	            		    this.state = 2559;
	            		    this.match(vbaParser.IDENTIFIER);
	            		    break;
	            		default:
	            		    throw new antlr4.error.NoViableAltException(this);
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2562; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,432, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, vbaParser.RULE_comparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2566;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.IS || _la===vbaParser.LIKE || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.GEQ - 189)) | (1 << (vbaParser.GT - 189)) | (1 << (vbaParser.LEQ - 189)) | (1 << (vbaParser.LT - 189)) | (1 << (vbaParser.NEQ - 189)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complexType() {
	    let localctx = new ComplexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, vbaParser.RULE_complexType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        this.ambiguousIdentifier();
	        this.state = 2573;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,434,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2569;
	                _la = this._input.LA(1);
	                if(!(_la===vbaParser.T__3 || _la===vbaParser.T__4)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2570;
	                this.ambiguousIdentifier(); 
	            }
	            this.state = 2575;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,434,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldLength() {
	    let localctx = new FieldLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, vbaParser.RULE_fieldLength);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2576;
	        this.match(vbaParser.MULT);
	        this.state = 2578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2577;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.INTEGERLITERAL:
	            this.state = 2580;
	            this.match(vbaParser.INTEGERLITERAL);
	            break;
	        case vbaParser.ACCESS:
	        case vbaParser.ADDRESSOF:
	        case vbaParser.ALIAS:
	        case vbaParser.AND:
	        case vbaParser.ATTRIBUTE:
	        case vbaParser.APPACTIVATE:
	        case vbaParser.APPEND:
	        case vbaParser.AS:
	        case vbaParser.BEGIN:
	        case vbaParser.BEEP:
	        case vbaParser.BINARY:
	        case vbaParser.BOOLEAN:
	        case vbaParser.BYVAL:
	        case vbaParser.BYREF:
	        case vbaParser.BYTE:
	        case vbaParser.CALL:
	        case vbaParser.CASE:
	        case vbaParser.CHDIR:
	        case vbaParser.CHDRIVE:
	        case vbaParser.CLASS:
	        case vbaParser.CLOSE:
	        case vbaParser.COLLECTION:
	        case vbaParser.CONST:
	        case vbaParser.DATABASE:
	        case vbaParser.DATE:
	        case vbaParser.DECLARE:
	        case vbaParser.DEFBOOL:
	        case vbaParser.DEFBYTE:
	        case vbaParser.DEFDATE:
	        case vbaParser.DEFDBL:
	        case vbaParser.DEFDEC:
	        case vbaParser.DEFCUR:
	        case vbaParser.DEFINT:
	        case vbaParser.DEFLNG:
	        case vbaParser.DEFOBJ:
	        case vbaParser.DEFSNG:
	        case vbaParser.DEFSTR:
	        case vbaParser.DEFVAR:
	        case vbaParser.DELETESETTING:
	        case vbaParser.DIM:
	        case vbaParser.DO:
	        case vbaParser.DOUBLE:
	        case vbaParser.EACH:
	        case vbaParser.ELSE:
	        case vbaParser.ELSEIF:
	        case vbaParser.END:
	        case vbaParser.ENUM:
	        case vbaParser.EQV:
	        case vbaParser.ERASE:
	        case vbaParser.ERROR:
	        case vbaParser.EVENT:
	        case vbaParser.FALSE:
	        case vbaParser.FILECOPY:
	        case vbaParser.FRIEND:
	        case vbaParser.FOR:
	        case vbaParser.FUNCTION:
	        case vbaParser.GET:
	        case vbaParser.GLOBAL:
	        case vbaParser.GOSUB:
	        case vbaParser.GOTO:
	        case vbaParser.IF:
	        case vbaParser.IMP:
	        case vbaParser.IMPLEMENTS:
	        case vbaParser.IN:
	        case vbaParser.INPUT:
	        case vbaParser.IS:
	        case vbaParser.INTEGER:
	        case vbaParser.KILL:
	        case vbaParser.LOAD:
	        case vbaParser.LOCK:
	        case vbaParser.LONG:
	        case vbaParser.LOOP:
	        case vbaParser.LEN:
	        case vbaParser.LET:
	        case vbaParser.LIB:
	        case vbaParser.LIKE:
	        case vbaParser.LSET:
	        case vbaParser.ME:
	        case vbaParser.MID:
	        case vbaParser.MKDIR:
	        case vbaParser.MOD:
	        case vbaParser.NAME:
	        case vbaParser.NEXT:
	        case vbaParser.NEW:
	        case vbaParser.NOT:
	        case vbaParser.NOTHING:
	        case vbaParser.NULL_:
	        case vbaParser.ON:
	        case vbaParser.OPEN:
	        case vbaParser.OPTIONAL:
	        case vbaParser.OR:
	        case vbaParser.OUTPUT:
	        case vbaParser.PARAMARRAY:
	        case vbaParser.PRESERVE:
	        case vbaParser.PRINT:
	        case vbaParser.PRIVATE:
	        case vbaParser.PUBLIC:
	        case vbaParser.PUT:
	        case vbaParser.RANDOM:
	        case vbaParser.RANDOMIZE:
	        case vbaParser.RAISEEVENT:
	        case vbaParser.READ:
	        case vbaParser.REDIM:
	        case vbaParser.REM:
	        case vbaParser.RESET:
	        case vbaParser.RESUME:
	        case vbaParser.RETURN:
	        case vbaParser.RMDIR:
	        case vbaParser.RSET:
	        case vbaParser.SAVEPICTURE:
	        case vbaParser.SAVESETTING:
	        case vbaParser.SEEK:
	        case vbaParser.SELECT:
	        case vbaParser.SENDKEYS:
	        case vbaParser.SET:
	        case vbaParser.SETATTR:
	        case vbaParser.SHARED:
	        case vbaParser.SINGLE:
	        case vbaParser.SPC:
	        case vbaParser.STATIC:
	        case vbaParser.STEP:
	        case vbaParser.STOP:
	        case vbaParser.STRING:
	        case vbaParser.SUB:
	        case vbaParser.TAB:
	        case vbaParser.TEXT:
	        case vbaParser.THEN:
	        case vbaParser.TIME:
	        case vbaParser.TO:
	        case vbaParser.TRUE:
	        case vbaParser.TYPE:
	        case vbaParser.TYPEOF:
	        case vbaParser.UNLOAD:
	        case vbaParser.UNLOCK:
	        case vbaParser.UNTIL:
	        case vbaParser.VARIANT:
	        case vbaParser.VERSION:
	        case vbaParser.WEND:
	        case vbaParser.WHILE:
	        case vbaParser.WIDTH:
	        case vbaParser.WITH:
	        case vbaParser.WITHEVENTS:
	        case vbaParser.WRITE:
	        case vbaParser.XOR:
	        case vbaParser.IDENTIFIER:
	            this.state = 2581;
	            this.ambiguousIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letterrange() {
	    let localctx = new LetterrangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, vbaParser.RULE_letterrange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2584;
	        this.certainIdentifier();
	        this.state = 2593;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	        if(la_===1) {
	            this.state = 2586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2585;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2588;
	            this.match(vbaParser.MINUS);
	            this.state = 2590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2589;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2592;
	            this.certainIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineLabel() {
	    let localctx = new LineLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, vbaParser.RULE_lineLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2595;
	        this.ambiguousIdentifier();
	        this.state = 2596;
	        this.match(vbaParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, vbaParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2598;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.FALSE || _la===vbaParser.NOTHING || _la===vbaParser.NULL_ || _la===vbaParser.TRUE || ((((_la - 205)) & ~0x1f) == 0 && ((1 << (_la - 205)) & ((1 << (vbaParser.STRINGLITERAL - 205)) | (1 << (vbaParser.OCTLITERAL - 205)) | (1 << (vbaParser.HEXLITERAL - 205)) | (1 << (vbaParser.SHORTLITERAL - 205)) | (1 << (vbaParser.INTEGERLITERAL - 205)) | (1 << (vbaParser.DOUBLELITERAL - 205)) | (1 << (vbaParser.DATELITERAL - 205)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, vbaParser.RULE_type_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2600;
	            this.baseType();
	            break;

	        case 2:
	            this.state = 2601;
	            this.complexType();
	            break;

	        }
	        this.state = 2612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        if(la_===1) {
	            this.state = 2605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2604;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2607;
	            this.match(vbaParser.LPAREN);
	            this.state = 2609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===vbaParser.WS) {
	                this.state = 2608;
	                this.match(vbaParser.WS);
	            }

	            this.state = 2611;
	            this.match(vbaParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeHint() {
	    let localctx = new TypeHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, vbaParser.RULE_typeHint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2614;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) !== 0) || _la===vbaParser.AMPERSAND)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visibility() {
	    let localctx = new VisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, vbaParser.RULE_visibility);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2616;
	        _la = this._input.LA(1);
	        if(!(_la===vbaParser.FRIEND || _la===vbaParser.GLOBAL || _la===vbaParser.PRIVATE || _la===vbaParser.PUBLIC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousKeyword() {
	    let localctx = new AmbiguousKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, vbaParser.RULE_ambiguousKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbaParser.DATABASE - 32)) | (1 << (vbaParser.DATE - 32)) | (1 << (vbaParser.DECLARE - 32)) | (1 << (vbaParser.DEFBOOL - 32)) | (1 << (vbaParser.DEFBYTE - 32)) | (1 << (vbaParser.DEFDATE - 32)) | (1 << (vbaParser.DEFDBL - 32)) | (1 << (vbaParser.DEFDEC - 32)) | (1 << (vbaParser.DEFCUR - 32)) | (1 << (vbaParser.DEFINT - 32)) | (1 << (vbaParser.DEFLNG - 32)) | (1 << (vbaParser.DEFOBJ - 32)) | (1 << (vbaParser.DEFSNG - 32)) | (1 << (vbaParser.DEFSTR - 32)) | (1 << (vbaParser.DEFVAR - 32)) | (1 << (vbaParser.DELETESETTING - 32)) | (1 << (vbaParser.DIM - 32)) | (1 << (vbaParser.DO - 32)) | (1 << (vbaParser.DOUBLE - 32)) | (1 << (vbaParser.EACH - 32)) | (1 << (vbaParser.ELSE - 32)) | (1 << (vbaParser.ELSEIF - 32)) | (1 << (vbaParser.END - 32)) | (1 << (vbaParser.ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (vbaParser.LIB - 96)) | (1 << (vbaParser.LIKE - 96)) | (1 << (vbaParser.LSET - 96)) | (1 << (vbaParser.ME - 96)) | (1 << (vbaParser.MID - 96)) | (1 << (vbaParser.MKDIR - 96)) | (1 << (vbaParser.MOD - 96)) | (1 << (vbaParser.NAME - 96)) | (1 << (vbaParser.NEXT - 96)) | (1 << (vbaParser.NEW - 96)) | (1 << (vbaParser.NOT - 96)) | (1 << (vbaParser.NOTHING - 96)) | (1 << (vbaParser.NULL_ - 96)) | (1 << (vbaParser.ON - 96)) | (1 << (vbaParser.OPEN - 96)) | (1 << (vbaParser.OPTIONAL - 96)) | (1 << (vbaParser.OR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (vbaParser.SPC - 160)) | (1 << (vbaParser.STATIC - 160)) | (1 << (vbaParser.STEP - 160)) | (1 << (vbaParser.STOP - 160)) | (1 << (vbaParser.STRING - 160)) | (1 << (vbaParser.SUB - 160)) | (1 << (vbaParser.TAB - 160)) | (1 << (vbaParser.TEXT - 160)) | (1 << (vbaParser.THEN - 160)) | (1 << (vbaParser.TIME - 160)) | (1 << (vbaParser.TO - 160)) | (1 << (vbaParser.TRUE - 160)) | (1 << (vbaParser.TYPE - 160)) | (1 << (vbaParser.TYPEOF - 160)) | (1 << (vbaParser.UNLOAD - 160)) | (1 << (vbaParser.UNLOCK - 160)) | (1 << (vbaParser.UNTIL - 160)) | (1 << (vbaParser.VARIANT - 160)) | (1 << (vbaParser.VERSION - 160)) | (1 << (vbaParser.WEND - 160)) | (1 << (vbaParser.WHILE - 160)) | (1 << (vbaParser.WIDTH - 160)) | (1 << (vbaParser.WITH - 160)) | (1 << (vbaParser.WITHEVENTS - 160)) | (1 << (vbaParser.WRITE - 160)) | (1 << (vbaParser.XOR - 160)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remComment() {
	    let localctx = new RemCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, vbaParser.RULE_remComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2620;
	        this.match(vbaParser.REMCOMMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, vbaParser.RULE_comment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2622;
	        this.match(vbaParser.COMMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endOfLine() {
	    let localctx = new EndOfLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, vbaParser.RULE_endOfLine);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===vbaParser.WS) {
	            this.state = 2624;
	            this.match(vbaParser.WS);
	        }

	        this.state = 2630;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case vbaParser.NEWLINE:
	            this.state = 2627;
	            this.match(vbaParser.NEWLINE);
	            break;
	        case vbaParser.COMMENT:
	            this.state = 2628;
	            this.comment();
	            break;
	        case vbaParser.REMCOMMENT:
	            this.state = 2629;
	            this.remComment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        if(la_===1) {
	            this.state = 2632;
	            this.match(vbaParser.WS);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endOfStatement() {
	    let localctx = new EndOfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, vbaParser.RULE_endOfStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2645;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,450,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2643;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2635;
	                    this.endOfLine();
	                    break;

	                case 2:
	                    this.state = 2637;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===vbaParser.WS) {
	                        this.state = 2636;
	                        this.match(vbaParser.WS);
	                    }

	                    this.state = 2639;
	                    this.match(vbaParser.COLON);
	                    this.state = 2641;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,448,this._ctx);
	                    if(la_===1) {
	                        this.state = 2640;
	                        this.match(vbaParser.WS);

	                    }
	                    break;

	                } 
	            }
	            this.state = 2647;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,450,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

vbaParser.EOF = antlr4.Token.EOF;
vbaParser.T__0 = 1;
vbaParser.T__1 = 2;
vbaParser.T__2 = 3;
vbaParser.T__3 = 4;
vbaParser.T__4 = 5;
vbaParser.T__5 = 6;
vbaParser.T__6 = 7;
vbaParser.T__7 = 8;
vbaParser.ACCESS = 9;
vbaParser.ADDRESSOF = 10;
vbaParser.ALIAS = 11;
vbaParser.AND = 12;
vbaParser.ATTRIBUTE = 13;
vbaParser.APPACTIVATE = 14;
vbaParser.APPEND = 15;
vbaParser.AS = 16;
vbaParser.BEGIN = 17;
vbaParser.BEEP = 18;
vbaParser.BINARY = 19;
vbaParser.BOOLEAN = 20;
vbaParser.BYVAL = 21;
vbaParser.BYREF = 22;
vbaParser.BYTE = 23;
vbaParser.CALL = 24;
vbaParser.CASE = 25;
vbaParser.CHDIR = 26;
vbaParser.CHDRIVE = 27;
vbaParser.CLASS = 28;
vbaParser.CLOSE = 29;
vbaParser.COLLECTION = 30;
vbaParser.CONST = 31;
vbaParser.DATABASE = 32;
vbaParser.DATE = 33;
vbaParser.DECLARE = 34;
vbaParser.DEFBOOL = 35;
vbaParser.DEFBYTE = 36;
vbaParser.DEFDATE = 37;
vbaParser.DEFDBL = 38;
vbaParser.DEFDEC = 39;
vbaParser.DEFCUR = 40;
vbaParser.DEFINT = 41;
vbaParser.DEFLNG = 42;
vbaParser.DEFOBJ = 43;
vbaParser.DEFSNG = 44;
vbaParser.DEFSTR = 45;
vbaParser.DEFVAR = 46;
vbaParser.DELETESETTING = 47;
vbaParser.DIM = 48;
vbaParser.DO = 49;
vbaParser.DOUBLE = 50;
vbaParser.EACH = 51;
vbaParser.ELSE = 52;
vbaParser.ELSEIF = 53;
vbaParser.END_ENUM = 54;
vbaParser.END_FUNCTION = 55;
vbaParser.END_IF = 56;
vbaParser.END_PROPERTY = 57;
vbaParser.END_SELECT = 58;
vbaParser.END_SUB = 59;
vbaParser.END_TYPE = 60;
vbaParser.END_WITH = 61;
vbaParser.END = 62;
vbaParser.ENUM = 63;
vbaParser.EQV = 64;
vbaParser.ERASE = 65;
vbaParser.ERROR = 66;
vbaParser.EVENT = 67;
vbaParser.EXIT_DO = 68;
vbaParser.EXIT_FOR = 69;
vbaParser.EXIT_FUNCTION = 70;
vbaParser.EXIT_PROPERTY = 71;
vbaParser.EXIT_SUB = 72;
vbaParser.FALSE = 73;
vbaParser.FILECOPY = 74;
vbaParser.FRIEND = 75;
vbaParser.FOR = 76;
vbaParser.FUNCTION = 77;
vbaParser.GET = 78;
vbaParser.GLOBAL = 79;
vbaParser.GOSUB = 80;
vbaParser.GOTO = 81;
vbaParser.IF = 82;
vbaParser.IMP = 83;
vbaParser.IMPLEMENTS = 84;
vbaParser.IN = 85;
vbaParser.INPUT = 86;
vbaParser.IS = 87;
vbaParser.INTEGER = 88;
vbaParser.KILL = 89;
vbaParser.LOAD = 90;
vbaParser.LOCK = 91;
vbaParser.LONG = 92;
vbaParser.LOOP = 93;
vbaParser.LEN = 94;
vbaParser.LET = 95;
vbaParser.LIB = 96;
vbaParser.LIKE = 97;
vbaParser.LINE_INPUT = 98;
vbaParser.LOCK_READ = 99;
vbaParser.LOCK_WRITE = 100;
vbaParser.LOCK_READ_WRITE = 101;
vbaParser.LSET = 102;
vbaParser.MACRO_CONST = 103;
vbaParser.MACRO_IF = 104;
vbaParser.MACRO_ELSEIF = 105;
vbaParser.MACRO_ELSE = 106;
vbaParser.MACRO_END_IF = 107;
vbaParser.ME = 108;
vbaParser.MID = 109;
vbaParser.MKDIR = 110;
vbaParser.MOD = 111;
vbaParser.NAME = 112;
vbaParser.NEXT = 113;
vbaParser.NEW = 114;
vbaParser.NOT = 115;
vbaParser.NOTHING = 116;
vbaParser.NULL_ = 117;
vbaParser.ON = 118;
vbaParser.ON_ERROR = 119;
vbaParser.ON_LOCAL_ERROR = 120;
vbaParser.OPEN = 121;
vbaParser.OPTIONAL = 122;
vbaParser.OPTION_BASE = 123;
vbaParser.OPTION_EXPLICIT = 124;
vbaParser.OPTION_COMPARE = 125;
vbaParser.OPTION_PRIVATE_MODULE = 126;
vbaParser.OR = 127;
vbaParser.OUTPUT = 128;
vbaParser.PARAMARRAY = 129;
vbaParser.PRESERVE = 130;
vbaParser.PRINT = 131;
vbaParser.PRIVATE = 132;
vbaParser.PROPERTY_GET = 133;
vbaParser.PROPERTY_LET = 134;
vbaParser.PROPERTY_SET = 135;
vbaParser.PTRSAFE = 136;
vbaParser.PUBLIC = 137;
vbaParser.PUT = 138;
vbaParser.RANDOM = 139;
vbaParser.RANDOMIZE = 140;
vbaParser.RAISEEVENT = 141;
vbaParser.READ = 142;
vbaParser.READ_WRITE = 143;
vbaParser.REDIM = 144;
vbaParser.REM = 145;
vbaParser.RESET = 146;
vbaParser.RESUME = 147;
vbaParser.RETURN = 148;
vbaParser.RMDIR = 149;
vbaParser.RSET = 150;
vbaParser.SAVEPICTURE = 151;
vbaParser.SAVESETTING = 152;
vbaParser.SEEK = 153;
vbaParser.SELECT = 154;
vbaParser.SENDKEYS = 155;
vbaParser.SET = 156;
vbaParser.SETATTR = 157;
vbaParser.SHARED = 158;
vbaParser.SINGLE = 159;
vbaParser.SPC = 160;
vbaParser.STATIC = 161;
vbaParser.STEP = 162;
vbaParser.STOP = 163;
vbaParser.STRING = 164;
vbaParser.SUB = 165;
vbaParser.TAB = 166;
vbaParser.TEXT = 167;
vbaParser.THEN = 168;
vbaParser.TIME = 169;
vbaParser.TO = 170;
vbaParser.TRUE = 171;
vbaParser.TYPE = 172;
vbaParser.TYPEOF = 173;
vbaParser.UNLOAD = 174;
vbaParser.UNLOCK = 175;
vbaParser.UNTIL = 176;
vbaParser.VARIANT = 177;
vbaParser.VERSION = 178;
vbaParser.WEND = 179;
vbaParser.WHILE = 180;
vbaParser.WIDTH = 181;
vbaParser.WITH = 182;
vbaParser.WITHEVENTS = 183;
vbaParser.WRITE = 184;
vbaParser.XOR = 185;
vbaParser.AMPERSAND = 186;
vbaParser.ASSIGN = 187;
vbaParser.DIV = 188;
vbaParser.EQ = 189;
vbaParser.GEQ = 190;
vbaParser.GT = 191;
vbaParser.LEQ = 192;
vbaParser.LPAREN = 193;
vbaParser.LT = 194;
vbaParser.MINUS = 195;
vbaParser.MINUS_EQ = 196;
vbaParser.MULT = 197;
vbaParser.NEQ = 198;
vbaParser.PLUS = 199;
vbaParser.PLUS_EQ = 200;
vbaParser.POW = 201;
vbaParser.RPAREN = 202;
vbaParser.L_SQUARE_BRACKET = 203;
vbaParser.R_SQUARE_BRACKET = 204;
vbaParser.STRINGLITERAL = 205;
vbaParser.OCTLITERAL = 206;
vbaParser.HEXLITERAL = 207;
vbaParser.SHORTLITERAL = 208;
vbaParser.INTEGERLITERAL = 209;
vbaParser.DOUBLELITERAL = 210;
vbaParser.DATELITERAL = 211;
vbaParser.LINE_CONTINUATION = 212;
vbaParser.NEWLINE = 213;
vbaParser.REMCOMMENT = 214;
vbaParser.COMMENT = 215;
vbaParser.SINGLEQUOTE = 216;
vbaParser.COLON = 217;
vbaParser.UNDERSCORE = 218;
vbaParser.WS = 219;
vbaParser.IDENTIFIER = 220;

vbaParser.RULE_startRule = 0;
vbaParser.RULE_module = 1;
vbaParser.RULE_moduleHeader = 2;
vbaParser.RULE_moduleConfig = 3;
vbaParser.RULE_moduleConfigElement = 4;
vbaParser.RULE_moduleAttributes = 5;
vbaParser.RULE_moduleDeclarations = 6;
vbaParser.RULE_moduleOption = 7;
vbaParser.RULE_moduleDeclarationsElement = 8;
vbaParser.RULE_macroStmt = 9;
vbaParser.RULE_moduleBody = 10;
vbaParser.RULE_moduleBodyElement = 11;
vbaParser.RULE_attributeStmt = 12;
vbaParser.RULE_block = 13;
vbaParser.RULE_blockStmt = 14;
vbaParser.RULE_appactivateStmt = 15;
vbaParser.RULE_beepStmt = 16;
vbaParser.RULE_chdirStmt = 17;
vbaParser.RULE_chdriveStmt = 18;
vbaParser.RULE_closeStmt = 19;
vbaParser.RULE_constStmt = 20;
vbaParser.RULE_constSubStmt = 21;
vbaParser.RULE_dateStmt = 22;
vbaParser.RULE_declareStmt = 23;
vbaParser.RULE_deftypeStmt = 24;
vbaParser.RULE_deleteSettingStmt = 25;
vbaParser.RULE_doLoopStmt = 26;
vbaParser.RULE_endStmt = 27;
vbaParser.RULE_enumerationStmt = 28;
vbaParser.RULE_enumerationStmt_Constant = 29;
vbaParser.RULE_eraseStmt = 30;
vbaParser.RULE_errorStmt = 31;
vbaParser.RULE_eventStmt = 32;
vbaParser.RULE_exitStmt = 33;
vbaParser.RULE_filecopyStmt = 34;
vbaParser.RULE_forEachStmt = 35;
vbaParser.RULE_forNextStmt = 36;
vbaParser.RULE_functionStmt = 37;
vbaParser.RULE_getStmt = 38;
vbaParser.RULE_goSubStmt = 39;
vbaParser.RULE_goToStmt = 40;
vbaParser.RULE_ifThenElseStmt = 41;
vbaParser.RULE_ifBlockStmt = 42;
vbaParser.RULE_ifConditionStmt = 43;
vbaParser.RULE_ifElseIfBlockStmt = 44;
vbaParser.RULE_ifElseBlockStmt = 45;
vbaParser.RULE_implementsStmt = 46;
vbaParser.RULE_inputStmt = 47;
vbaParser.RULE_killStmt = 48;
vbaParser.RULE_letStmt = 49;
vbaParser.RULE_lineInputStmt = 50;
vbaParser.RULE_loadStmt = 51;
vbaParser.RULE_lockStmt = 52;
vbaParser.RULE_lsetStmt = 53;
vbaParser.RULE_macroConstStmt = 54;
vbaParser.RULE_macroIfThenElseStmt = 55;
vbaParser.RULE_macroIfBlockStmt = 56;
vbaParser.RULE_macroElseIfBlockStmt = 57;
vbaParser.RULE_macroElseBlockStmt = 58;
vbaParser.RULE_midStmt = 59;
vbaParser.RULE_mkdirStmt = 60;
vbaParser.RULE_nameStmt = 61;
vbaParser.RULE_onErrorStmt = 62;
vbaParser.RULE_onGoToStmt = 63;
vbaParser.RULE_onGoSubStmt = 64;
vbaParser.RULE_openStmt = 65;
vbaParser.RULE_outputList = 66;
vbaParser.RULE_outputList_Expression = 67;
vbaParser.RULE_printStmt = 68;
vbaParser.RULE_propertyGetStmt = 69;
vbaParser.RULE_propertySetStmt = 70;
vbaParser.RULE_propertyLetStmt = 71;
vbaParser.RULE_putStmt = 72;
vbaParser.RULE_raiseEventStmt = 73;
vbaParser.RULE_randomizeStmt = 74;
vbaParser.RULE_redimStmt = 75;
vbaParser.RULE_redimSubStmt = 76;
vbaParser.RULE_resetStmt = 77;
vbaParser.RULE_resumeStmt = 78;
vbaParser.RULE_returnStmt = 79;
vbaParser.RULE_rmdirStmt = 80;
vbaParser.RULE_rsetStmt = 81;
vbaParser.RULE_savepictureStmt = 82;
vbaParser.RULE_saveSettingStmt = 83;
vbaParser.RULE_seekStmt = 84;
vbaParser.RULE_selectCaseStmt = 85;
vbaParser.RULE_sC_Selection = 86;
vbaParser.RULE_sC_Case = 87;
vbaParser.RULE_sC_Cond = 88;
vbaParser.RULE_sendkeysStmt = 89;
vbaParser.RULE_setattrStmt = 90;
vbaParser.RULE_setStmt = 91;
vbaParser.RULE_stopStmt = 92;
vbaParser.RULE_subStmt = 93;
vbaParser.RULE_timeStmt = 94;
vbaParser.RULE_typeStmt = 95;
vbaParser.RULE_typeStmt_Element = 96;
vbaParser.RULE_typeOfStmt = 97;
vbaParser.RULE_unloadStmt = 98;
vbaParser.RULE_unlockStmt = 99;
vbaParser.RULE_valueStmt = 100;
vbaParser.RULE_variableStmt = 101;
vbaParser.RULE_variableListStmt = 102;
vbaParser.RULE_variableSubStmt = 103;
vbaParser.RULE_whileWendStmt = 104;
vbaParser.RULE_widthStmt = 105;
vbaParser.RULE_withStmt = 106;
vbaParser.RULE_writeStmt = 107;
vbaParser.RULE_fileNumber = 108;
vbaParser.RULE_explicitCallStmt = 109;
vbaParser.RULE_eCS_ProcedureCall = 110;
vbaParser.RULE_eCS_MemberProcedureCall = 111;
vbaParser.RULE_implicitCallStmt_InBlock = 112;
vbaParser.RULE_iCS_B_MemberProcedureCall = 113;
vbaParser.RULE_iCS_B_ProcedureCall = 114;
vbaParser.RULE_implicitCallStmt_InStmt = 115;
vbaParser.RULE_iCS_S_VariableOrProcedureCall = 116;
vbaParser.RULE_iCS_S_ProcedureOrArrayCall = 117;
vbaParser.RULE_iCS_S_MembersCall = 118;
vbaParser.RULE_iCS_S_MemberCall = 119;
vbaParser.RULE_iCS_S_DictionaryCall = 120;
vbaParser.RULE_argsCall = 121;
vbaParser.RULE_argCall = 122;
vbaParser.RULE_dictionaryCallStmt = 123;
vbaParser.RULE_argList = 124;
vbaParser.RULE_arg = 125;
vbaParser.RULE_argDefaultValue = 126;
vbaParser.RULE_subscripts = 127;
vbaParser.RULE_subscript_ = 128;
vbaParser.RULE_ambiguousIdentifier = 129;
vbaParser.RULE_asTypeClause = 130;
vbaParser.RULE_baseType = 131;
vbaParser.RULE_certainIdentifier = 132;
vbaParser.RULE_comparisonOperator = 133;
vbaParser.RULE_complexType = 134;
vbaParser.RULE_fieldLength = 135;
vbaParser.RULE_letterrange = 136;
vbaParser.RULE_lineLabel = 137;
vbaParser.RULE_literal = 138;
vbaParser.RULE_type_ = 139;
vbaParser.RULE_typeHint = 140;
vbaParser.RULE_visibility = 141;
vbaParser.RULE_ambiguousKeyword = 142;
vbaParser.RULE_remComment = 143;
vbaParser.RULE_comment = 144;
vbaParser.RULE_endOfLine = 145;
vbaParser.RULE_endOfStatement = 146;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_startRule;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	EOF() {
	    return this.getToken(vbaParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitStartRule(this);
		}
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_module;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	moduleHeader() {
	    return this.getTypedRuleContext(ModuleHeaderContext,0);
	};

	moduleConfig() {
	    return this.getTypedRuleContext(ModuleConfigContext,0);
	};

	moduleAttributes() {
	    return this.getTypedRuleContext(ModuleAttributesContext,0);
	};

	moduleDeclarations() {
	    return this.getTypedRuleContext(ModuleDeclarationsContext,0);
	};

	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModule(this);
		}
	}


}



class ModuleHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleHeader;
    }

	VERSION() {
	    return this.getToken(vbaParser.VERSION, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	DOUBLELITERAL() {
	    return this.getToken(vbaParser.DOUBLELITERAL, 0);
	};

	CLASS() {
	    return this.getToken(vbaParser.CLASS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleHeader(this);
		}
	}


}



class ModuleConfigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleConfig;
    }

	BEGIN() {
	    return this.getToken(vbaParser.BEGIN, 0);
	};

	END() {
	    return this.getToken(vbaParser.END, 0);
	};

	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	moduleConfigElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleConfigElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleConfigElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleConfig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleConfig(this);
		}
	}


}



class ModuleConfigElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleConfigElement;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleConfigElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleConfigElement(this);
		}
	}


}



class ModuleAttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleAttributes;
    }

	attributeStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeStmtContext);
	    } else {
	        return this.getTypedRuleContext(AttributeStmtContext,i);
	    }
	};

	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleAttributes(this);
		}
	}


}



class ModuleDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleDeclarations;
    }

	moduleDeclarationsElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDeclarationsElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDeclarationsElementContext,i);
	    }
	};

	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleDeclarations(this);
		}
	}


}



class ModuleOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OptionExplicitStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_EXPLICIT() {
	    return this.getToken(vbaParser.OPTION_EXPLICIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOptionExplicitStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOptionExplicitStmt(this);
		}
	}


}

vbaParser.OptionExplicitStmtContext = OptionExplicitStmtContext;

class OptionBaseStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_BASE() {
	    return this.getToken(vbaParser.OPTION_BASE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	SHORTLITERAL() {
	    return this.getToken(vbaParser.SHORTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOptionBaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOptionBaseStmt(this);
		}
	}


}

vbaParser.OptionBaseStmtContext = OptionBaseStmtContext;

class OptionPrivateModuleStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_PRIVATE_MODULE() {
	    return this.getToken(vbaParser.OPTION_PRIVATE_MODULE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOptionPrivateModuleStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOptionPrivateModuleStmt(this);
		}
	}


}

vbaParser.OptionPrivateModuleStmtContext = OptionPrivateModuleStmtContext;

class OptionCompareStmtContext extends ModuleOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTION_COMPARE() {
	    return this.getToken(vbaParser.OPTION_COMPARE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	BINARY() {
	    return this.getToken(vbaParser.BINARY, 0);
	};

	TEXT() {
	    return this.getToken(vbaParser.TEXT, 0);
	};

	DATABASE() {
	    return this.getToken(vbaParser.DATABASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOptionCompareStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOptionCompareStmt(this);
		}
	}


}

vbaParser.OptionCompareStmtContext = OptionCompareStmtContext;

class ModuleDeclarationsElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleDeclarationsElement;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	declareStmt() {
	    return this.getTypedRuleContext(DeclareStmtContext,0);
	};

	enumerationStmt() {
	    return this.getTypedRuleContext(EnumerationStmtContext,0);
	};

	eventStmt() {
	    return this.getTypedRuleContext(EventStmtContext,0);
	};

	constStmt() {
	    return this.getTypedRuleContext(ConstStmtContext,0);
	};

	implementsStmt() {
	    return this.getTypedRuleContext(ImplementsStmtContext,0);
	};

	variableStmt() {
	    return this.getTypedRuleContext(VariableStmtContext,0);
	};

	moduleOption() {
	    return this.getTypedRuleContext(ModuleOptionContext,0);
	};

	typeStmt() {
	    return this.getTypedRuleContext(TypeStmtContext,0);
	};

	macroStmt() {
	    return this.getTypedRuleContext(MacroStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleDeclarationsElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleDeclarationsElement(this);
		}
	}


}



class MacroStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroStmt;
    }

	macroConstStmt() {
	    return this.getTypedRuleContext(MacroConstStmtContext,0);
	};

	macroIfThenElseStmt() {
	    return this.getTypedRuleContext(MacroIfThenElseStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroStmt(this);
		}
	}


}



class ModuleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleBody;
    }

	moduleBodyElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleBodyElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleBodyElementContext,i);
	    }
	};

	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleBody(this);
		}
	}


}



class ModuleBodyElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_moduleBodyElement;
    }

	functionStmt() {
	    return this.getTypedRuleContext(FunctionStmtContext,0);
	};

	propertyGetStmt() {
	    return this.getTypedRuleContext(PropertyGetStmtContext,0);
	};

	propertySetStmt() {
	    return this.getTypedRuleContext(PropertySetStmtContext,0);
	};

	propertyLetStmt() {
	    return this.getTypedRuleContext(PropertyLetStmtContext,0);
	};

	subStmt() {
	    return this.getTypedRuleContext(SubStmtContext,0);
	};

	macroStmt() {
	    return this.getTypedRuleContext(MacroStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterModuleBodyElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitModuleBodyElement(this);
		}
	}


}



class AttributeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_attributeStmt;
    }

	ATTRIBUTE() {
	    return this.getToken(vbaParser.ATTRIBUTE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterAttributeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitAttributeStmt(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_block;
    }

	blockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(BlockStmtContext,i);
	    }
	};

	endOfStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfStatementContext);
	    } else {
	        return this.getTypedRuleContext(EndOfStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_blockStmt;
    }

	lineLabel() {
	    return this.getTypedRuleContext(LineLabelContext,0);
	};

	appactivateStmt() {
	    return this.getTypedRuleContext(AppactivateStmtContext,0);
	};

	attributeStmt() {
	    return this.getTypedRuleContext(AttributeStmtContext,0);
	};

	beepStmt() {
	    return this.getTypedRuleContext(BeepStmtContext,0);
	};

	chdirStmt() {
	    return this.getTypedRuleContext(ChdirStmtContext,0);
	};

	chdriveStmt() {
	    return this.getTypedRuleContext(ChdriveStmtContext,0);
	};

	closeStmt() {
	    return this.getTypedRuleContext(CloseStmtContext,0);
	};

	constStmt() {
	    return this.getTypedRuleContext(ConstStmtContext,0);
	};

	dateStmt() {
	    return this.getTypedRuleContext(DateStmtContext,0);
	};

	deleteSettingStmt() {
	    return this.getTypedRuleContext(DeleteSettingStmtContext,0);
	};

	deftypeStmt() {
	    return this.getTypedRuleContext(DeftypeStmtContext,0);
	};

	doLoopStmt() {
	    return this.getTypedRuleContext(DoLoopStmtContext,0);
	};

	endStmt() {
	    return this.getTypedRuleContext(EndStmtContext,0);
	};

	eraseStmt() {
	    return this.getTypedRuleContext(EraseStmtContext,0);
	};

	errorStmt() {
	    return this.getTypedRuleContext(ErrorStmtContext,0);
	};

	exitStmt() {
	    return this.getTypedRuleContext(ExitStmtContext,0);
	};

	explicitCallStmt() {
	    return this.getTypedRuleContext(ExplicitCallStmtContext,0);
	};

	filecopyStmt() {
	    return this.getTypedRuleContext(FilecopyStmtContext,0);
	};

	forEachStmt() {
	    return this.getTypedRuleContext(ForEachStmtContext,0);
	};

	forNextStmt() {
	    return this.getTypedRuleContext(ForNextStmtContext,0);
	};

	getStmt() {
	    return this.getTypedRuleContext(GetStmtContext,0);
	};

	goSubStmt() {
	    return this.getTypedRuleContext(GoSubStmtContext,0);
	};

	goToStmt() {
	    return this.getTypedRuleContext(GoToStmtContext,0);
	};

	ifThenElseStmt() {
	    return this.getTypedRuleContext(IfThenElseStmtContext,0);
	};

	implementsStmt() {
	    return this.getTypedRuleContext(ImplementsStmtContext,0);
	};

	inputStmt() {
	    return this.getTypedRuleContext(InputStmtContext,0);
	};

	killStmt() {
	    return this.getTypedRuleContext(KillStmtContext,0);
	};

	letStmt() {
	    return this.getTypedRuleContext(LetStmtContext,0);
	};

	lineInputStmt() {
	    return this.getTypedRuleContext(LineInputStmtContext,0);
	};

	loadStmt() {
	    return this.getTypedRuleContext(LoadStmtContext,0);
	};

	lockStmt() {
	    return this.getTypedRuleContext(LockStmtContext,0);
	};

	lsetStmt() {
	    return this.getTypedRuleContext(LsetStmtContext,0);
	};

	macroStmt() {
	    return this.getTypedRuleContext(MacroStmtContext,0);
	};

	midStmt() {
	    return this.getTypedRuleContext(MidStmtContext,0);
	};

	mkdirStmt() {
	    return this.getTypedRuleContext(MkdirStmtContext,0);
	};

	nameStmt() {
	    return this.getTypedRuleContext(NameStmtContext,0);
	};

	onErrorStmt() {
	    return this.getTypedRuleContext(OnErrorStmtContext,0);
	};

	onGoToStmt() {
	    return this.getTypedRuleContext(OnGoToStmtContext,0);
	};

	onGoSubStmt() {
	    return this.getTypedRuleContext(OnGoSubStmtContext,0);
	};

	openStmt() {
	    return this.getTypedRuleContext(OpenStmtContext,0);
	};

	printStmt() {
	    return this.getTypedRuleContext(PrintStmtContext,0);
	};

	putStmt() {
	    return this.getTypedRuleContext(PutStmtContext,0);
	};

	raiseEventStmt() {
	    return this.getTypedRuleContext(RaiseEventStmtContext,0);
	};

	randomizeStmt() {
	    return this.getTypedRuleContext(RandomizeStmtContext,0);
	};

	redimStmt() {
	    return this.getTypedRuleContext(RedimStmtContext,0);
	};

	resetStmt() {
	    return this.getTypedRuleContext(ResetStmtContext,0);
	};

	resumeStmt() {
	    return this.getTypedRuleContext(ResumeStmtContext,0);
	};

	returnStmt() {
	    return this.getTypedRuleContext(ReturnStmtContext,0);
	};

	rmdirStmt() {
	    return this.getTypedRuleContext(RmdirStmtContext,0);
	};

	rsetStmt() {
	    return this.getTypedRuleContext(RsetStmtContext,0);
	};

	savepictureStmt() {
	    return this.getTypedRuleContext(SavepictureStmtContext,0);
	};

	saveSettingStmt() {
	    return this.getTypedRuleContext(SaveSettingStmtContext,0);
	};

	seekStmt() {
	    return this.getTypedRuleContext(SeekStmtContext,0);
	};

	selectCaseStmt() {
	    return this.getTypedRuleContext(SelectCaseStmtContext,0);
	};

	sendkeysStmt() {
	    return this.getTypedRuleContext(SendkeysStmtContext,0);
	};

	setattrStmt() {
	    return this.getTypedRuleContext(SetattrStmtContext,0);
	};

	setStmt() {
	    return this.getTypedRuleContext(SetStmtContext,0);
	};

	stopStmt() {
	    return this.getTypedRuleContext(StopStmtContext,0);
	};

	timeStmt() {
	    return this.getTypedRuleContext(TimeStmtContext,0);
	};

	unloadStmt() {
	    return this.getTypedRuleContext(UnloadStmtContext,0);
	};

	unlockStmt() {
	    return this.getTypedRuleContext(UnlockStmtContext,0);
	};

	variableStmt() {
	    return this.getTypedRuleContext(VariableStmtContext,0);
	};

	whileWendStmt() {
	    return this.getTypedRuleContext(WhileWendStmtContext,0);
	};

	widthStmt() {
	    return this.getTypedRuleContext(WidthStmtContext,0);
	};

	withStmt() {
	    return this.getTypedRuleContext(WithStmtContext,0);
	};

	writeStmt() {
	    return this.getTypedRuleContext(WriteStmtContext,0);
	};

	implicitCallStmt_InBlock() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InBlockContext,0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitBlockStmt(this);
		}
	}


}



class AppactivateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_appactivateStmt;
    }

	APPACTIVATE() {
	    return this.getToken(vbaParser.APPACTIVATE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterAppactivateStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitAppactivateStmt(this);
		}
	}


}



class BeepStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_beepStmt;
    }

	BEEP() {
	    return this.getToken(vbaParser.BEEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterBeepStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitBeepStmt(this);
		}
	}


}



class ChdirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_chdirStmt;
    }

	CHDIR() {
	    return this.getToken(vbaParser.CHDIR, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterChdirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitChdirStmt(this);
		}
	}


}



class ChdriveStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_chdriveStmt;
    }

	CHDRIVE() {
	    return this.getToken(vbaParser.CHDRIVE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterChdriveStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitChdriveStmt(this);
		}
	}


}



class CloseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_closeStmt;
    }

	CLOSE() {
	    return this.getToken(vbaParser.CLOSE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNumberContext);
	    } else {
	        return this.getTypedRuleContext(FileNumberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCloseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCloseStmt(this);
		}
	}


}



class ConstStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_constStmt;
    }

	CONST() {
	    return this.getToken(vbaParser.CONST, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	constSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(ConstSubStmtContext,i);
	    }
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterConstStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitConstStmt(this);
		}
	}


}



class ConstSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_constSubStmt;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterConstSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitConstSubStmt(this);
		}
	}


}



class DateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_dateStmt;
    }

	DATE() {
	    return this.getToken(vbaParser.DATE, 0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDateStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDateStmt(this);
		}
	}


}



class DeclareStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_declareStmt;
    }

	DECLARE() {
	    return this.getToken(vbaParser.DECLARE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LIB() {
	    return this.getToken(vbaParser.LIB, 0);
	};

	STRINGLITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.STRINGLITERAL);
	    } else {
	        return this.getToken(vbaParser.STRINGLITERAL, i);
	    }
	};


	SUB() {
	    return this.getToken(vbaParser.SUB, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	PTRSAFE() {
	    return this.getToken(vbaParser.PTRSAFE, 0);
	};

	typeHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeHintContext);
	    } else {
	        return this.getTypedRuleContext(TypeHintContext,i);
	    }
	};

	ALIAS() {
	    return this.getToken(vbaParser.ALIAS, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	FUNCTION() {
	    return this.getToken(vbaParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDeclareStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDeclareStmt(this);
		}
	}


}



class DeftypeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_deftypeStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	letterrange = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetterrangeContext);
	    } else {
	        return this.getTypedRuleContext(LetterrangeContext,i);
	    }
	};

	DEFBOOL() {
	    return this.getToken(vbaParser.DEFBOOL, 0);
	};

	DEFBYTE() {
	    return this.getToken(vbaParser.DEFBYTE, 0);
	};

	DEFINT() {
	    return this.getToken(vbaParser.DEFINT, 0);
	};

	DEFLNG() {
	    return this.getToken(vbaParser.DEFLNG, 0);
	};

	DEFCUR() {
	    return this.getToken(vbaParser.DEFCUR, 0);
	};

	DEFSNG() {
	    return this.getToken(vbaParser.DEFSNG, 0);
	};

	DEFDBL() {
	    return this.getToken(vbaParser.DEFDBL, 0);
	};

	DEFDEC() {
	    return this.getToken(vbaParser.DEFDEC, 0);
	};

	DEFDATE() {
	    return this.getToken(vbaParser.DEFDATE, 0);
	};

	DEFSTR() {
	    return this.getToken(vbaParser.DEFSTR, 0);
	};

	DEFOBJ() {
	    return this.getToken(vbaParser.DEFOBJ, 0);
	};

	DEFVAR() {
	    return this.getToken(vbaParser.DEFVAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDeftypeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDeftypeStmt(this);
		}
	}


}



class DeleteSettingStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_deleteSettingStmt;
    }

	DELETESETTING() {
	    return this.getToken(vbaParser.DELETESETTING, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDeleteSettingStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDeleteSettingStmt(this);
		}
	}


}



class DoLoopStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_doLoopStmt;
    }

	DO() {
	    return this.getToken(vbaParser.DO, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	LOOP() {
	    return this.getToken(vbaParser.LOOP, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WHILE() {
	    return this.getToken(vbaParser.WHILE, 0);
	};

	UNTIL() {
	    return this.getToken(vbaParser.UNTIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDoLoopStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDoLoopStmt(this);
		}
	}


}



class EndStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_endStmt;
    }

	END() {
	    return this.getToken(vbaParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEndStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEndStmt(this);
		}
	}


}



class EnumerationStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_enumerationStmt;
    }

	ENUM() {
	    return this.getToken(vbaParser.ENUM, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_ENUM() {
	    return this.getToken(vbaParser.END_ENUM, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enumerationStmt_Constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumerationStmt_ConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumerationStmt_ConstantContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEnumerationStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEnumerationStmt(this);
		}
	}


}



class EnumerationStmt_ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_enumerationStmt_Constant;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEnumerationStmt_Constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEnumerationStmt_Constant(this);
		}
	}


}



class EraseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_eraseStmt;
    }

	ERASE() {
	    return this.getToken(vbaParser.ERASE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEraseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEraseStmt(this);
		}
	}


}



class ErrorStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_errorStmt;
    }

	ERROR() {
	    return this.getToken(vbaParser.ERROR, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterErrorStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitErrorStmt(this);
		}
	}


}



class EventStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_eventStmt;
    }

	EVENT() {
	    return this.getToken(vbaParser.EVENT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEventStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEventStmt(this);
		}
	}


}



class ExitStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_exitStmt;
    }

	EXIT_DO() {
	    return this.getToken(vbaParser.EXIT_DO, 0);
	};

	EXIT_FOR() {
	    return this.getToken(vbaParser.EXIT_FOR, 0);
	};

	EXIT_FUNCTION() {
	    return this.getToken(vbaParser.EXIT_FUNCTION, 0);
	};

	EXIT_PROPERTY() {
	    return this.getToken(vbaParser.EXIT_PROPERTY, 0);
	};

	EXIT_SUB() {
	    return this.getToken(vbaParser.EXIT_SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterExitStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitExitStmt(this);
		}
	}


}



class FilecopyStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_filecopyStmt;
    }

	FILECOPY() {
	    return this.getToken(vbaParser.FILECOPY, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterFilecopyStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitFilecopyStmt(this);
		}
	}


}



class ForEachStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_forEachStmt;
    }

	FOR() {
	    return this.getToken(vbaParser.FOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	EACH() {
	    return this.getToken(vbaParser.EACH, 0);
	};

	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(vbaParser.IN, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	NEXT() {
	    return this.getToken(vbaParser.NEXT, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterForEachStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitForEachStmt(this);
		}
	}


}



class ForNextStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_forNextStmt;
    }

	FOR() {
	    return this.getToken(vbaParser.FOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	NEXT() {
	    return this.getToken(vbaParser.NEXT, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	STEP() {
	    return this.getToken(vbaParser.STEP, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterForNextStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitForNextStmt(this);
		}
	}


}



class FunctionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_functionStmt;
    }

	FUNCTION() {
	    return this.getToken(vbaParser.FUNCTION, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_FUNCTION() {
	    return this.getToken(vbaParser.END_FUNCTION, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterFunctionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitFunctionStmt(this);
		}
	}


}



class GetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_getStmt;
    }

	GET() {
	    return this.getToken(vbaParser.GET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterGetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitGetStmt(this);
		}
	}


}



class GoSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_goSubStmt;
    }

	GOSUB() {
	    return this.getToken(vbaParser.GOSUB, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterGoSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitGoSubStmt(this);
		}
	}


}



class GoToStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_goToStmt;
    }

	GOTO() {
	    return this.getToken(vbaParser.GOTO, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterGoToStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitGoToStmt(this);
		}
	}


}



class IfThenElseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ifThenElseStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BlockIfThenElseContext extends IfThenElseStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ifBlockStmt() {
	    return this.getTypedRuleContext(IfBlockStmtContext,0);
	};

	END_IF() {
	    return this.getToken(vbaParser.END_IF, 0);
	};

	ifElseIfBlockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfElseIfBlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(IfElseIfBlockStmtContext,i);
	    }
	};

	ifElseBlockStmt() {
	    return this.getTypedRuleContext(IfElseBlockStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterBlockIfThenElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitBlockIfThenElse(this);
		}
	}


}

vbaParser.BlockIfThenElseContext = BlockIfThenElseContext;

class InlineIfThenElseContext extends IfThenElseStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(vbaParser.IF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	blockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(BlockStmtContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(vbaParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterInlineIfThenElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitInlineIfThenElse(this);
		}
	}


}

vbaParser.InlineIfThenElseContext = InlineIfThenElseContext;

class IfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ifBlockStmt;
    }

	IF() {
	    return this.getToken(vbaParser.IF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitIfBlockStmt(this);
		}
	}


}



class IfConditionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ifConditionStmt;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterIfConditionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitIfConditionStmt(this);
		}
	}


}



class IfElseIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ifElseIfBlockStmt;
    }

	ELSEIF() {
	    return this.getToken(vbaParser.ELSEIF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterIfElseIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitIfElseIfBlockStmt(this);
		}
	}


}



class IfElseBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ifElseBlockStmt;
    }

	ELSE() {
	    return this.getToken(vbaParser.ELSE, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterIfElseBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitIfElseBlockStmt(this);
		}
	}


}



class ImplementsStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_implementsStmt;
    }

	IMPLEMENTS() {
	    return this.getToken(vbaParser.IMPLEMENTS, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterImplementsStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitImplementsStmt(this);
		}
	}


}



class InputStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_inputStmt;
    }

	INPUT() {
	    return this.getToken(vbaParser.INPUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterInputStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitInputStmt(this);
		}
	}


}



class KillStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_killStmt;
    }

	KILL() {
	    return this.getToken(vbaParser.KILL, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterKillStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitKillStmt(this);
		}
	}


}



class LetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_letStmt;
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	PLUS_EQ() {
	    return this.getToken(vbaParser.PLUS_EQ, 0);
	};

	MINUS_EQ() {
	    return this.getToken(vbaParser.MINUS_EQ, 0);
	};

	LET() {
	    return this.getToken(vbaParser.LET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLetStmt(this);
		}
	}


}



class LineInputStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_lineInputStmt;
    }

	LINE_INPUT() {
	    return this.getToken(vbaParser.LINE_INPUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLineInputStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLineInputStmt(this);
		}
	}


}



class LoadStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_loadStmt;
    }

	LOAD() {
	    return this.getToken(vbaParser.LOAD, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLoadStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLoadStmt(this);
		}
	}


}



class LockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_lockStmt;
    }

	LOCK() {
	    return this.getToken(vbaParser.LOCK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLockStmt(this);
		}
	}


}



class LsetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_lsetStmt;
    }

	LSET() {
	    return this.getToken(vbaParser.LSET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLsetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLsetStmt(this);
		}
	}


}



class MacroConstStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroConstStmt;
    }

	MACRO_CONST() {
	    return this.getToken(vbaParser.MACRO_CONST, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroConstStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroConstStmt(this);
		}
	}


}



class MacroIfThenElseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroIfThenElseStmt;
    }

	macroIfBlockStmt() {
	    return this.getTypedRuleContext(MacroIfBlockStmtContext,0);
	};

	MACRO_END_IF() {
	    return this.getToken(vbaParser.MACRO_END_IF, 0);
	};

	macroElseIfBlockStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroElseIfBlockStmtContext);
	    } else {
	        return this.getTypedRuleContext(MacroElseIfBlockStmtContext,i);
	    }
	};

	macroElseBlockStmt() {
	    return this.getTypedRuleContext(MacroElseBlockStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroIfThenElseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroIfThenElseStmt(this);
		}
	}


}



class MacroIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroIfBlockStmt;
    }

	MACRO_IF() {
	    return this.getToken(vbaParser.MACRO_IF, 0);
	};

	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	moduleDeclarations = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDeclarationsContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDeclarationsContext,i);
	    }
	};

	moduleBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleBodyContext);
	    } else {
	        return this.getTypedRuleContext(ModuleBodyContext,i);
	    }
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroIfBlockStmt(this);
		}
	}


}



class MacroElseIfBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroElseIfBlockStmt;
    }

	MACRO_ELSEIF() {
	    return this.getToken(vbaParser.MACRO_ELSEIF, 0);
	};

	ifConditionStmt() {
	    return this.getTypedRuleContext(IfConditionStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	moduleDeclarations = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDeclarationsContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDeclarationsContext,i);
	    }
	};

	moduleBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleBodyContext);
	    } else {
	        return this.getTypedRuleContext(ModuleBodyContext,i);
	    }
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroElseIfBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroElseIfBlockStmt(this);
		}
	}


}



class MacroElseBlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_macroElseBlockStmt;
    }

	MACRO_ELSE() {
	    return this.getToken(vbaParser.MACRO_ELSE, 0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	moduleDeclarations = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDeclarationsContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDeclarationsContext,i);
	    }
	};

	moduleBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleBodyContext);
	    } else {
	        return this.getTypedRuleContext(ModuleBodyContext,i);
	    }
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMacroElseBlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMacroElseBlockStmt(this);
		}
	}


}



class MidStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_midStmt;
    }

	MID() {
	    return this.getToken(vbaParser.MID, 0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMidStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMidStmt(this);
		}
	}


}



class MkdirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_mkdirStmt;
    }

	MKDIR() {
	    return this.getToken(vbaParser.MKDIR, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterMkdirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitMkdirStmt(this);
		}
	}


}



class NameStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_nameStmt;
    }

	NAME() {
	    return this.getToken(vbaParser.NAME, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AS() {
	    return this.getToken(vbaParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterNameStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitNameStmt(this);
		}
	}


}



class OnErrorStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_onErrorStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ON_ERROR() {
	    return this.getToken(vbaParser.ON_ERROR, 0);
	};

	ON_LOCAL_ERROR() {
	    return this.getToken(vbaParser.ON_LOCAL_ERROR, 0);
	};

	GOTO() {
	    return this.getToken(vbaParser.GOTO, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	RESUME() {
	    return this.getToken(vbaParser.RESUME, 0);
	};

	NEXT() {
	    return this.getToken(vbaParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOnErrorStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOnErrorStmt(this);
		}
	}


}



class OnGoToStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_onGoToStmt;
    }

	ON() {
	    return this.getToken(vbaParser.ON, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GOTO() {
	    return this.getToken(vbaParser.GOTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOnGoToStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOnGoToStmt(this);
		}
	}


}



class OnGoSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_onGoSubStmt;
    }

	ON() {
	    return this.getToken(vbaParser.ON, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GOSUB() {
	    return this.getToken(vbaParser.GOSUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOnGoSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOnGoSubStmt(this);
		}
	}


}



class OpenStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_openStmt;
    }

	OPEN() {
	    return this.getToken(vbaParser.OPEN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	FOR() {
	    return this.getToken(vbaParser.FOR, 0);
	};

	AS() {
	    return this.getToken(vbaParser.AS, 0);
	};

	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	APPEND() {
	    return this.getToken(vbaParser.APPEND, 0);
	};

	BINARY() {
	    return this.getToken(vbaParser.BINARY, 0);
	};

	INPUT() {
	    return this.getToken(vbaParser.INPUT, 0);
	};

	OUTPUT() {
	    return this.getToken(vbaParser.OUTPUT, 0);
	};

	RANDOM() {
	    return this.getToken(vbaParser.RANDOM, 0);
	};

	ACCESS() {
	    return this.getToken(vbaParser.ACCESS, 0);
	};

	LEN() {
	    return this.getToken(vbaParser.LEN, 0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	READ() {
	    return this.getToken(vbaParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(vbaParser.WRITE, 0);
	};

	READ_WRITE() {
	    return this.getToken(vbaParser.READ_WRITE, 0);
	};

	SHARED() {
	    return this.getToken(vbaParser.SHARED, 0);
	};

	LOCK_READ() {
	    return this.getToken(vbaParser.LOCK_READ, 0);
	};

	LOCK_WRITE() {
	    return this.getToken(vbaParser.LOCK_WRITE, 0);
	};

	LOCK_READ_WRITE() {
	    return this.getToken(vbaParser.LOCK_READ_WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOpenStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOpenStmt(this);
		}
	}


}



class OutputListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_outputList;
    }

	outputList_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OutputList_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OutputList_ExpressionContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOutputList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOutputList(this);
		}
	}


}



class OutputList_ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_outputList_Expression;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	SPC() {
	    return this.getToken(vbaParser.SPC, 0);
	};

	TAB() {
	    return this.getToken(vbaParser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterOutputList_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitOutputList_Expression(this);
		}
	}


}



class PrintStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_printStmt;
    }

	PRINT() {
	    return this.getToken(vbaParser.PRINT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	outputList() {
	    return this.getTypedRuleContext(OutputListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterPrintStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitPrintStmt(this);
		}
	}


}



class PropertyGetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_propertyGetStmt;
    }

	PROPERTY_GET() {
	    return this.getToken(vbaParser.PROPERTY_GET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(vbaParser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterPropertyGetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitPropertyGetStmt(this);
		}
	}


}



class PropertySetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_propertySetStmt;
    }

	PROPERTY_SET() {
	    return this.getToken(vbaParser.PROPERTY_SET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(vbaParser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterPropertySetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitPropertySetStmt(this);
		}
	}


}



class PropertyLetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_propertyLetStmt;
    }

	PROPERTY_LET() {
	    return this.getToken(vbaParser.PROPERTY_LET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_PROPERTY() {
	    return this.getToken(vbaParser.END_PROPERTY, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterPropertyLetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitPropertyLetStmt(this);
		}
	}


}



class PutStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_putStmt;
    }

	PUT() {
	    return this.getToken(vbaParser.PUT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterPutStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitPutStmt(this);
		}
	}


}



class RaiseEventStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_raiseEventStmt;
    }

	RAISEEVENT() {
	    return this.getToken(vbaParser.RAISEEVENT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRaiseEventStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRaiseEventStmt(this);
		}
	}


}



class RandomizeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_randomizeStmt;
    }

	RANDOMIZE() {
	    return this.getToken(vbaParser.RANDOMIZE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRandomizeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRandomizeStmt(this);
		}
	}


}



class RedimStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_redimStmt;
    }

	REDIM() {
	    return this.getToken(vbaParser.REDIM, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	redimSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RedimSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(RedimSubStmtContext,i);
	    }
	};

	PRESERVE() {
	    return this.getToken(vbaParser.PRESERVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRedimStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRedimStmt(this);
		}
	}


}



class RedimSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_redimSubStmt;
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRedimSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRedimSubStmt(this);
		}
	}


}



class ResetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_resetStmt;
    }

	RESET() {
	    return this.getToken(vbaParser.RESET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterResetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitResetStmt(this);
		}
	}


}



class ResumeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_resumeStmt;
    }

	RESUME() {
	    return this.getToken(vbaParser.RESUME, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	NEXT() {
	    return this.getToken(vbaParser.NEXT, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterResumeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitResumeStmt(this);
		}
	}


}



class ReturnStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_returnStmt;
    }

	RETURN() {
	    return this.getToken(vbaParser.RETURN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterReturnStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitReturnStmt(this);
		}
	}


}



class RmdirStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_rmdirStmt;
    }

	RMDIR() {
	    return this.getToken(vbaParser.RMDIR, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRmdirStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRmdirStmt(this);
		}
	}


}



class RsetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_rsetStmt;
    }

	RSET() {
	    return this.getToken(vbaParser.RSET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRsetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRsetStmt(this);
		}
	}


}



class SavepictureStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_savepictureStmt;
    }

	SAVEPICTURE() {
	    return this.getToken(vbaParser.SAVEPICTURE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSavepictureStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSavepictureStmt(this);
		}
	}


}



class SaveSettingStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_saveSettingStmt;
    }

	SAVESETTING() {
	    return this.getToken(vbaParser.SAVESETTING, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSaveSettingStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSaveSettingStmt(this);
		}
	}


}



class SeekStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_seekStmt;
    }

	SEEK() {
	    return this.getToken(vbaParser.SEEK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSeekStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSeekStmt(this);
		}
	}


}



class SelectCaseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_selectCaseStmt;
    }

	SELECT() {
	    return this.getToken(vbaParser.SELECT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	CASE() {
	    return this.getToken(vbaParser.CASE, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_SELECT() {
	    return this.getToken(vbaParser.END_SELECT, 0);
	};

	sC_Case = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SC_CaseContext);
	    } else {
	        return this.getTypedRuleContext(SC_CaseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSelectCaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSelectCaseStmt(this);
		}
	}


}



class SC_SelectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_sC_Selection;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CaseCondValueContext extends SC_SelectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCaseCondValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCaseCondValue(this);
		}
	}


}

vbaParser.CaseCondValueContext = CaseCondValueContext;

class CaseCondToContext extends SC_SelectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCaseCondTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCaseCondTo(this);
		}
	}


}

vbaParser.CaseCondToContext = CaseCondToContext;

class CaseCondIsContext extends SC_SelectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(vbaParser.IS, 0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCaseCondIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCaseCondIs(this);
		}
	}


}

vbaParser.CaseCondIsContext = CaseCondIsContext;

class SC_CaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_sC_Case;
    }

	CASE() {
	    return this.getToken(vbaParser.CASE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	sC_Cond() {
	    return this.getTypedRuleContext(SC_CondContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSC_Case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSC_Case(this);
		}
	}


}



class SC_CondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_sC_Cond;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CaseCondSelectionContext extends SC_CondContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sC_Selection = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SC_SelectionContext);
	    } else {
	        return this.getTypedRuleContext(SC_SelectionContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCaseCondSelection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCaseCondSelection(this);
		}
	}


}

vbaParser.CaseCondSelectionContext = CaseCondSelectionContext;

class CaseCondElseContext extends SC_CondContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ELSE() {
	    return this.getToken(vbaParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCaseCondElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCaseCondElse(this);
		}
	}


}

vbaParser.CaseCondElseContext = CaseCondElseContext;

class SendkeysStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_sendkeysStmt;
    }

	SENDKEYS() {
	    return this.getToken(vbaParser.SENDKEYS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSendkeysStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSendkeysStmt(this);
		}
	}


}



class SetattrStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_setattrStmt;
    }

	SETATTR() {
	    return this.getToken(vbaParser.SETATTR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSetattrStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSetattrStmt(this);
		}
	}


}



class SetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_setStmt;
    }

	SET() {
	    return this.getToken(vbaParser.SET, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSetStmt(this);
		}
	}


}



class StopStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_stopStmt;
    }

	STOP() {
	    return this.getToken(vbaParser.STOP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterStopStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitStopStmt(this);
		}
	}


}



class SubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_subStmt;
    }

	SUB() {
	    return this.getToken(vbaParser.SUB, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_SUB() {
	    return this.getToken(vbaParser.END_SUB, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSubStmt(this);
		}
	}


}



class TimeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_timeStmt;
    }

	TIME() {
	    return this.getToken(vbaParser.TIME, 0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterTimeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitTimeStmt(this);
		}
	}


}



class TypeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_typeStmt;
    }

	TYPE() {
	    return this.getToken(vbaParser.TYPE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_TYPE() {
	    return this.getToken(vbaParser.END_TYPE, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	typeStmt_Element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeStmt_ElementContext);
	    } else {
	        return this.getTypedRuleContext(TypeStmt_ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterTypeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitTypeStmt(this);
		}
	}


}



class TypeStmt_ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_typeStmt_Element;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterTypeStmt_Element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitTypeStmt_Element(this);
		}
	}


}



class TypeOfStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_typeOfStmt;
    }

	TYPEOF() {
	    return this.getToken(vbaParser.TYPEOF, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	IS() {
	    return this.getToken(vbaParser.IS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterTypeOfStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitTypeOfStmt(this);
		}
	}


}



class UnloadStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_unloadStmt;
    }

	UNLOAD() {
	    return this.getToken(vbaParser.UNLOAD, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterUnloadStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitUnloadStmt(this);
		}
	}


}



class UnlockStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_unlockStmt;
    }

	UNLOCK() {
	    return this.getToken(vbaParser.UNLOCK, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterUnlockStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitUnlockStmt(this);
		}
	}


}



class ValueStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_valueStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class VsStructContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsStruct(this);
		}
	}


}

vbaParser.VsStructContext = VsStructContext;

class VsAddContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(vbaParser.PLUS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsAdd(this);
		}
	}


}

vbaParser.VsAddContext = VsAddContext;

class VsLtContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	LT() {
	    return this.getToken(vbaParser.LT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsLt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsLt(this);
		}
	}


}

vbaParser.VsLtContext = VsLtContext;

class VsAddressOfContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADDRESSOF() {
	    return this.getToken(vbaParser.ADDRESSOF, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsAddressOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsAddressOf(this);
		}
	}


}

vbaParser.VsAddressOfContext = VsAddressOfContext;

class VsNewContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NEW() {
	    return this.getToken(vbaParser.NEW, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsNew(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsNew(this);
		}
	}


}

vbaParser.VsNewContext = VsNewContext;

class VsMultContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	MULT() {
	    return this.getToken(vbaParser.MULT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsMult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsMult(this);
		}
	}


}

vbaParser.VsMultContext = VsMultContext;

class VsNegationContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(vbaParser.MINUS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsNegation(this);
		}
	}


}

vbaParser.VsNegationContext = VsNegationContext;

class VsAssignContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	ASSIGN() {
	    return this.getToken(vbaParser.ASSIGN, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsAssign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsAssign(this);
		}
	}


}

vbaParser.VsAssignContext = VsAssignContext;

class VsLikeContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(vbaParser.LIKE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsLike(this);
		}
	}


}

vbaParser.VsLikeContext = VsLikeContext;

class VsDivContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	DIV() {
	    return this.getToken(vbaParser.DIV, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsDiv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsDiv(this);
		}
	}


}

vbaParser.VsDivContext = VsDivContext;

class VsPlusContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PLUS() {
	    return this.getToken(vbaParser.PLUS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsPlus(this);
		}
	}


}

vbaParser.VsPlusContext = VsPlusContext;

class VsNotContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(vbaParser.NOT, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsNot(this);
		}
	}


}

vbaParser.VsNotContext = VsNotContext;

class VsGeqContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GEQ() {
	    return this.getToken(vbaParser.GEQ, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsGeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsGeq(this);
		}
	}


}

vbaParser.VsGeqContext = VsGeqContext;

class VsTypeOfContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	typeOfStmt() {
	    return this.getTypedRuleContext(TypeOfStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsTypeOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsTypeOf(this);
		}
	}


}

vbaParser.VsTypeOfContext = VsTypeOfContext;

class VsICSContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsICS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsICS(this);
		}
	}


}

vbaParser.VsICSContext = VsICSContext;

class VsNeqContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	NEQ() {
	    return this.getToken(vbaParser.NEQ, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsNeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsNeq(this);
		}
	}


}

vbaParser.VsNeqContext = VsNeqContext;

class VsXorContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	XOR() {
	    return this.getToken(vbaParser.XOR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsXor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsXor(this);
		}
	}


}

vbaParser.VsXorContext = VsXorContext;

class VsAndContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AND() {
	    return this.getToken(vbaParser.AND, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsAnd(this);
		}
	}


}

vbaParser.VsAndContext = VsAndContext;

class VsLeqContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	LEQ() {
	    return this.getToken(vbaParser.LEQ, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsLeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsLeq(this);
		}
	}


}

vbaParser.VsLeqContext = VsLeqContext;

class VsPowContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	POW() {
	    return this.getToken(vbaParser.POW, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsPow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsPow(this);
		}
	}


}

vbaParser.VsPowContext = VsPowContext;

class VsIsContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	IS() {
	    return this.getToken(vbaParser.IS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsIs(this);
		}
	}


}

vbaParser.VsIsContext = VsIsContext;

class VsModContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	MOD() {
	    return this.getToken(vbaParser.MOD, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsMod(this);
		}
	}


}

vbaParser.VsModContext = VsModContext;

class VsAmpContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	AMPERSAND() {
	    return this.getToken(vbaParser.AMPERSAND, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsAmp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsAmp(this);
		}
	}


}

vbaParser.VsAmpContext = VsAmpContext;

class VsOrContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	OR() {
	    return this.getToken(vbaParser.OR, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsOr(this);
		}
	}


}

vbaParser.VsOrContext = VsOrContext;

class VsMinusContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	MINUS() {
	    return this.getToken(vbaParser.MINUS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsMinus(this);
		}
	}


}

vbaParser.VsMinusContext = VsMinusContext;

class VsLiteralContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsLiteral(this);
		}
	}


}

vbaParser.VsLiteralContext = VsLiteralContext;

class VsEqvContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	EQV() {
	    return this.getToken(vbaParser.EQV, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsEqv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsEqv(this);
		}
	}


}

vbaParser.VsEqvContext = VsEqvContext;

class VsImpContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	IMP() {
	    return this.getToken(vbaParser.IMP, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsImp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsImp(this);
		}
	}


}

vbaParser.VsImpContext = VsImpContext;

class VsGtContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	GT() {
	    return this.getToken(vbaParser.GT, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsGt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsGt(this);
		}
	}


}

vbaParser.VsGtContext = VsGtContext;

class VsEqContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsEq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsEq(this);
		}
	}


}

vbaParser.VsEqContext = VsEqContext;

class VsMidContext extends ValueStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	midStmt() {
	    return this.getTypedRuleContext(MidStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVsMid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVsMid(this);
		}
	}


}

vbaParser.VsMidContext = VsMidContext;

class VariableStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_variableStmt;
    }

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	variableListStmt() {
	    return this.getTypedRuleContext(VariableListStmtContext,0);
	};

	DIM() {
	    return this.getToken(vbaParser.DIM, 0);
	};

	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	WITHEVENTS() {
	    return this.getToken(vbaParser.WITHEVENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVariableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVariableStmt(this);
		}
	}


}



class VariableListStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_variableListStmt;
    }

	variableSubStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableSubStmtContext);
	    } else {
	        return this.getTypedRuleContext(VariableSubStmtContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVariableListStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVariableListStmt(this);
		}
	}


}



class VariableSubStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_variableSubStmt;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVariableSubStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVariableSubStmt(this);
		}
	}


}



class WhileWendStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_whileWendStmt;
    }

	WHILE() {
	    return this.getToken(vbaParser.WHILE, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	WEND() {
	    return this.getToken(vbaParser.WEND, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterWhileWendStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitWhileWendStmt(this);
		}
	}


}



class WidthStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_widthStmt;
    }

	WIDTH() {
	    return this.getToken(vbaParser.WIDTH, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterWidthStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitWidthStmt(this);
		}
	}


}



class WithStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_withStmt;
    }

	WITH() {
	    return this.getToken(vbaParser.WITH, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	endOfStatement() {
	    return this.getTypedRuleContext(EndOfStatementContext,0);
	};

	END_WITH() {
	    return this.getToken(vbaParser.END_WITH, 0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	NEW() {
	    return this.getToken(vbaParser.NEW, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterWithStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitWithStmt(this);
		}
	}


}



class WriteStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_writeStmt;
    }

	WRITE() {
	    return this.getToken(vbaParser.WRITE, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	fileNumber() {
	    return this.getTypedRuleContext(FileNumberContext,0);
	};

	outputList() {
	    return this.getTypedRuleContext(OutputListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterWriteStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitWriteStmt(this);
		}
	}


}



class FileNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_fileNumber;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterFileNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitFileNumber(this);
		}
	}


}



class ExplicitCallStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_explicitCallStmt;
    }

	eCS_ProcedureCall() {
	    return this.getTypedRuleContext(ECS_ProcedureCallContext,0);
	};

	eCS_MemberProcedureCall() {
	    return this.getTypedRuleContext(ECS_MemberProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterExplicitCallStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitExplicitCallStmt(this);
		}
	}


}



class ECS_ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_eCS_ProcedureCall;
    }

	CALL() {
	    return this.getToken(vbaParser.CALL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterECS_ProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitECS_ProcedureCall(this);
		}
	}


}



class ECS_MemberProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_eCS_MemberProcedureCall;
    }

	CALL() {
	    return this.getToken(vbaParser.CALL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterECS_MemberProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitECS_MemberProcedureCall(this);
		}
	}


}



class ImplicitCallStmt_InBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_implicitCallStmt_InBlock;
    }

	iCS_B_MemberProcedureCall() {
	    return this.getTypedRuleContext(ICS_B_MemberProcedureCallContext,0);
	};

	iCS_B_ProcedureCall() {
	    return this.getTypedRuleContext(ICS_B_ProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterImplicitCallStmt_InBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitImplicitCallStmt_InBlock(this);
		}
	}


}



class ICS_B_MemberProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_B_MemberProcedureCall;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	implicitCallStmt_InStmt() {
	    return this.getTypedRuleContext(ImplicitCallStmt_InStmtContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_B_MemberProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_B_MemberProcedureCall(this);
		}
	}


}



class ICS_B_ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_B_ProcedureCall;
    }

	certainIdentifier() {
	    return this.getTypedRuleContext(CertainIdentifierContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_B_ProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_B_ProcedureCall(this);
		}
	}


}



class ImplicitCallStmt_InStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_implicitCallStmt_InStmt;
    }

	iCS_S_MembersCall() {
	    return this.getTypedRuleContext(ICS_S_MembersCallContext,0);
	};

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	iCS_S_DictionaryCall() {
	    return this.getTypedRuleContext(ICS_S_DictionaryCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterImplicitCallStmt_InStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitImplicitCallStmt_InStmt(this);
		}
	}


}



class ICS_S_VariableOrProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_S_VariableOrProcedureCall;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_S_VariableOrProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_S_VariableOrProcedureCall(this);
		}
	}


}



class ICS_S_ProcedureOrArrayCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_S_ProcedureOrArrayCall;
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	argsCall() {
	    return this.getTypedRuleContext(ArgsCallContext,0);
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_S_ProcedureOrArrayCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_S_ProcedureOrArrayCall(this);
		}
	}


}



class ICS_S_MembersCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_S_MembersCall;
    }

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	iCS_S_MemberCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ICS_S_MemberCallContext);
	    } else {
	        return this.getTypedRuleContext(ICS_S_MemberCallContext,i);
	    }
	};

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.LPAREN);
	    } else {
	        return this.getToken(vbaParser.LPAREN, i);
	    }
	};


	subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptsContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptsContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.RPAREN);
	    } else {
	        return this.getToken(vbaParser.RPAREN, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_S_MembersCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_S_MembersCall(this);
		}
	}


}



class ICS_S_MemberCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_S_MemberCall;
    }

	iCS_S_VariableOrProcedureCall() {
	    return this.getTypedRuleContext(ICS_S_VariableOrProcedureCallContext,0);
	};

	iCS_S_ProcedureOrArrayCall() {
	    return this.getTypedRuleContext(ICS_S_ProcedureOrArrayCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_S_MemberCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_S_MemberCall(this);
		}
	}


}



class ICS_S_DictionaryCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_iCS_S_DictionaryCall;
    }

	dictionaryCallStmt() {
	    return this.getTypedRuleContext(DictionaryCallStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterICS_S_DictionaryCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitICS_S_DictionaryCall(this);
		}
	}


}



class ArgsCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_argsCall;
    }

	argCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgCallContext);
	    } else {
	        return this.getTypedRuleContext(ArgCallContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterArgsCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitArgsCall(this);
		}
	}


}



class ArgCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_argCall;
    }

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	BYVAL() {
	    return this.getToken(vbaParser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(vbaParser.BYREF, 0);
	};

	PARAMARRAY() {
	    return this.getToken(vbaParser.PARAMARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterArgCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitArgCall(this);
		}
	}


}



class DictionaryCallStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_dictionaryCallStmt;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterDictionaryCallStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitDictionaryCallStmt(this);
		}
	}


}



class ArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_argList;
    }

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgContext);
	    } else {
	        return this.getTypedRuleContext(ArgContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitArgList(this);
		}
	}


}



class ArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_arg;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	OPTIONAL() {
	    return this.getToken(vbaParser.OPTIONAL, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	PARAMARRAY() {
	    return this.getToken(vbaParser.PARAMARRAY, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	asTypeClause() {
	    return this.getTypedRuleContext(AsTypeClauseContext,0);
	};

	argDefaultValue() {
	    return this.getTypedRuleContext(ArgDefaultValueContext,0);
	};

	BYVAL() {
	    return this.getToken(vbaParser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(vbaParser.BYREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitArg(this);
		}
	}


}



class ArgDefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_argDefaultValue;
    }

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterArgDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitArgDefaultValue(this);
		}
	}


}



class SubscriptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_subscripts;
    }

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSubscripts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSubscripts(this);
		}
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_subscript_;
    }

	valueStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueStmtContext);
	    } else {
	        return this.getTypedRuleContext(ValueStmtContext,i);
	    }
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitSubscript_(this);
		}
	}


}



class AmbiguousIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ambiguousIdentifier;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.IDENTIFIER);
	    } else {
	        return this.getToken(vbaParser.IDENTIFIER, i);
	    }
	};


	ambiguousKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousKeywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterAmbiguousIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitAmbiguousIdentifier(this);
		}
	}


}



class AsTypeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_asTypeClause;
    }

	AS() {
	    return this.getToken(vbaParser.AS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	NEW() {
	    return this.getToken(vbaParser.NEW, 0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterAsTypeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitAsTypeClause(this);
		}
	}


}



class BaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_baseType;
    }

	BOOLEAN() {
	    return this.getToken(vbaParser.BOOLEAN, 0);
	};

	BYTE() {
	    return this.getToken(vbaParser.BYTE, 0);
	};

	COLLECTION() {
	    return this.getToken(vbaParser.COLLECTION, 0);
	};

	DATE() {
	    return this.getToken(vbaParser.DATE, 0);
	};

	DOUBLE() {
	    return this.getToken(vbaParser.DOUBLE, 0);
	};

	INTEGER() {
	    return this.getToken(vbaParser.INTEGER, 0);
	};

	LONG() {
	    return this.getToken(vbaParser.LONG, 0);
	};

	SINGLE() {
	    return this.getToken(vbaParser.SINGLE, 0);
	};

	STRING() {
	    return this.getToken(vbaParser.STRING, 0);
	};

	MULT() {
	    return this.getToken(vbaParser.MULT, 0);
	};

	valueStmt() {
	    return this.getTypedRuleContext(ValueStmtContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	VARIANT() {
	    return this.getToken(vbaParser.VARIANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitBaseType(this);
		}
	}


}



class CertainIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_certainIdentifier;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.IDENTIFIER);
	    } else {
	        return this.getToken(vbaParser.IDENTIFIER, i);
	    }
	};


	ambiguousKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousKeywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterCertainIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitCertainIdentifier(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_comparisonOperator;
    }

	LT() {
	    return this.getToken(vbaParser.LT, 0);
	};

	LEQ() {
	    return this.getToken(vbaParser.LEQ, 0);
	};

	GT() {
	    return this.getToken(vbaParser.GT, 0);
	};

	GEQ() {
	    return this.getToken(vbaParser.GEQ, 0);
	};

	EQ() {
	    return this.getToken(vbaParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(vbaParser.NEQ, 0);
	};

	IS() {
	    return this.getToken(vbaParser.IS, 0);
	};

	LIKE() {
	    return this.getToken(vbaParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class ComplexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_complexType;
    }

	ambiguousIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmbiguousIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(AmbiguousIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterComplexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitComplexType(this);
		}
	}


}



class FieldLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_fieldLength;
    }

	MULT() {
	    return this.getToken(vbaParser.MULT, 0);
	};

	INTEGERLITERAL() {
	    return this.getToken(vbaParser.INTEGERLITERAL, 0);
	};

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	WS() {
	    return this.getToken(vbaParser.WS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterFieldLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitFieldLength(this);
		}
	}


}



class LetterrangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_letterrange;
    }

	certainIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CertainIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(CertainIdentifierContext,i);
	    }
	};

	MINUS() {
	    return this.getToken(vbaParser.MINUS, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLetterrange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLetterrange(this);
		}
	}


}



class LineLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_lineLabel;
    }

	ambiguousIdentifier() {
	    return this.getTypedRuleContext(AmbiguousIdentifierContext,0);
	};

	COLON() {
	    return this.getToken(vbaParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLineLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLineLabel(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_literal;
    }

	HEXLITERAL() {
	    return this.getToken(vbaParser.HEXLITERAL, 0);
	};

	OCTLITERAL() {
	    return this.getToken(vbaParser.OCTLITERAL, 0);
	};

	DATELITERAL() {
	    return this.getToken(vbaParser.DATELITERAL, 0);
	};

	DOUBLELITERAL() {
	    return this.getToken(vbaParser.DOUBLELITERAL, 0);
	};

	INTEGERLITERAL() {
	    return this.getToken(vbaParser.INTEGERLITERAL, 0);
	};

	SHORTLITERAL() {
	    return this.getToken(vbaParser.SHORTLITERAL, 0);
	};

	STRINGLITERAL() {
	    return this.getToken(vbaParser.STRINGLITERAL, 0);
	};

	TRUE() {
	    return this.getToken(vbaParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(vbaParser.FALSE, 0);
	};

	NOTHING() {
	    return this.getToken(vbaParser.NOTHING, 0);
	};

	NULL_() {
	    return this.getToken(vbaParser.NULL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_type_;
    }

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	complexType() {
	    return this.getTypedRuleContext(ComplexTypeContext,0);
	};

	LPAREN() {
	    return this.getToken(vbaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(vbaParser.RPAREN, 0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitType_(this);
		}
	}


}



class TypeHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_typeHint;
    }

	AMPERSAND() {
	    return this.getToken(vbaParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterTypeHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitTypeHint(this);
		}
	}


}



class VisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_visibility;
    }

	PRIVATE() {
	    return this.getToken(vbaParser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(vbaParser.PUBLIC, 0);
	};

	FRIEND() {
	    return this.getToken(vbaParser.FRIEND, 0);
	};

	GLOBAL() {
	    return this.getToken(vbaParser.GLOBAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitVisibility(this);
		}
	}


}



class AmbiguousKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_ambiguousKeyword;
    }

	ACCESS() {
	    return this.getToken(vbaParser.ACCESS, 0);
	};

	ADDRESSOF() {
	    return this.getToken(vbaParser.ADDRESSOF, 0);
	};

	ALIAS() {
	    return this.getToken(vbaParser.ALIAS, 0);
	};

	AND() {
	    return this.getToken(vbaParser.AND, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(vbaParser.ATTRIBUTE, 0);
	};

	APPACTIVATE() {
	    return this.getToken(vbaParser.APPACTIVATE, 0);
	};

	APPEND() {
	    return this.getToken(vbaParser.APPEND, 0);
	};

	AS() {
	    return this.getToken(vbaParser.AS, 0);
	};

	BEEP() {
	    return this.getToken(vbaParser.BEEP, 0);
	};

	BEGIN() {
	    return this.getToken(vbaParser.BEGIN, 0);
	};

	BINARY() {
	    return this.getToken(vbaParser.BINARY, 0);
	};

	BOOLEAN() {
	    return this.getToken(vbaParser.BOOLEAN, 0);
	};

	BYVAL() {
	    return this.getToken(vbaParser.BYVAL, 0);
	};

	BYREF() {
	    return this.getToken(vbaParser.BYREF, 0);
	};

	BYTE() {
	    return this.getToken(vbaParser.BYTE, 0);
	};

	CALL() {
	    return this.getToken(vbaParser.CALL, 0);
	};

	CASE() {
	    return this.getToken(vbaParser.CASE, 0);
	};

	CLASS() {
	    return this.getToken(vbaParser.CLASS, 0);
	};

	CLOSE() {
	    return this.getToken(vbaParser.CLOSE, 0);
	};

	CHDIR() {
	    return this.getToken(vbaParser.CHDIR, 0);
	};

	CHDRIVE() {
	    return this.getToken(vbaParser.CHDRIVE, 0);
	};

	COLLECTION() {
	    return this.getToken(vbaParser.COLLECTION, 0);
	};

	CONST() {
	    return this.getToken(vbaParser.CONST, 0);
	};

	DATABASE() {
	    return this.getToken(vbaParser.DATABASE, 0);
	};

	DATE() {
	    return this.getToken(vbaParser.DATE, 0);
	};

	DECLARE() {
	    return this.getToken(vbaParser.DECLARE, 0);
	};

	DEFBOOL() {
	    return this.getToken(vbaParser.DEFBOOL, 0);
	};

	DEFBYTE() {
	    return this.getToken(vbaParser.DEFBYTE, 0);
	};

	DEFCUR() {
	    return this.getToken(vbaParser.DEFCUR, 0);
	};

	DEFDBL() {
	    return this.getToken(vbaParser.DEFDBL, 0);
	};

	DEFDATE() {
	    return this.getToken(vbaParser.DEFDATE, 0);
	};

	DEFDEC() {
	    return this.getToken(vbaParser.DEFDEC, 0);
	};

	DEFINT() {
	    return this.getToken(vbaParser.DEFINT, 0);
	};

	DEFLNG() {
	    return this.getToken(vbaParser.DEFLNG, 0);
	};

	DEFOBJ() {
	    return this.getToken(vbaParser.DEFOBJ, 0);
	};

	DEFSNG() {
	    return this.getToken(vbaParser.DEFSNG, 0);
	};

	DEFSTR() {
	    return this.getToken(vbaParser.DEFSTR, 0);
	};

	DEFVAR() {
	    return this.getToken(vbaParser.DEFVAR, 0);
	};

	DELETESETTING() {
	    return this.getToken(vbaParser.DELETESETTING, 0);
	};

	DIM() {
	    return this.getToken(vbaParser.DIM, 0);
	};

	DO() {
	    return this.getToken(vbaParser.DO, 0);
	};

	DOUBLE() {
	    return this.getToken(vbaParser.DOUBLE, 0);
	};

	EACH() {
	    return this.getToken(vbaParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(vbaParser.ELSE, 0);
	};

	ELSEIF() {
	    return this.getToken(vbaParser.ELSEIF, 0);
	};

	END() {
	    return this.getToken(vbaParser.END, 0);
	};

	ENUM() {
	    return this.getToken(vbaParser.ENUM, 0);
	};

	EQV() {
	    return this.getToken(vbaParser.EQV, 0);
	};

	ERASE() {
	    return this.getToken(vbaParser.ERASE, 0);
	};

	ERROR() {
	    return this.getToken(vbaParser.ERROR, 0);
	};

	EVENT() {
	    return this.getToken(vbaParser.EVENT, 0);
	};

	FALSE() {
	    return this.getToken(vbaParser.FALSE, 0);
	};

	FILECOPY() {
	    return this.getToken(vbaParser.FILECOPY, 0);
	};

	FRIEND() {
	    return this.getToken(vbaParser.FRIEND, 0);
	};

	FOR() {
	    return this.getToken(vbaParser.FOR, 0);
	};

	FUNCTION() {
	    return this.getToken(vbaParser.FUNCTION, 0);
	};

	GET() {
	    return this.getToken(vbaParser.GET, 0);
	};

	GLOBAL() {
	    return this.getToken(vbaParser.GLOBAL, 0);
	};

	GOSUB() {
	    return this.getToken(vbaParser.GOSUB, 0);
	};

	GOTO() {
	    return this.getToken(vbaParser.GOTO, 0);
	};

	IF() {
	    return this.getToken(vbaParser.IF, 0);
	};

	IMP() {
	    return this.getToken(vbaParser.IMP, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(vbaParser.IMPLEMENTS, 0);
	};

	IN() {
	    return this.getToken(vbaParser.IN, 0);
	};

	INPUT() {
	    return this.getToken(vbaParser.INPUT, 0);
	};

	IS() {
	    return this.getToken(vbaParser.IS, 0);
	};

	INTEGER() {
	    return this.getToken(vbaParser.INTEGER, 0);
	};

	KILL() {
	    return this.getToken(vbaParser.KILL, 0);
	};

	LOAD() {
	    return this.getToken(vbaParser.LOAD, 0);
	};

	LOCK() {
	    return this.getToken(vbaParser.LOCK, 0);
	};

	LONG() {
	    return this.getToken(vbaParser.LONG, 0);
	};

	LOOP() {
	    return this.getToken(vbaParser.LOOP, 0);
	};

	LEN() {
	    return this.getToken(vbaParser.LEN, 0);
	};

	LET() {
	    return this.getToken(vbaParser.LET, 0);
	};

	LIB() {
	    return this.getToken(vbaParser.LIB, 0);
	};

	LIKE() {
	    return this.getToken(vbaParser.LIKE, 0);
	};

	LSET() {
	    return this.getToken(vbaParser.LSET, 0);
	};

	ME() {
	    return this.getToken(vbaParser.ME, 0);
	};

	MID() {
	    return this.getToken(vbaParser.MID, 0);
	};

	MKDIR() {
	    return this.getToken(vbaParser.MKDIR, 0);
	};

	MOD() {
	    return this.getToken(vbaParser.MOD, 0);
	};

	NAME() {
	    return this.getToken(vbaParser.NAME, 0);
	};

	NEXT() {
	    return this.getToken(vbaParser.NEXT, 0);
	};

	NEW() {
	    return this.getToken(vbaParser.NEW, 0);
	};

	NOT() {
	    return this.getToken(vbaParser.NOT, 0);
	};

	NOTHING() {
	    return this.getToken(vbaParser.NOTHING, 0);
	};

	NULL_() {
	    return this.getToken(vbaParser.NULL_, 0);
	};

	ON() {
	    return this.getToken(vbaParser.ON, 0);
	};

	OPEN() {
	    return this.getToken(vbaParser.OPEN, 0);
	};

	OPTIONAL() {
	    return this.getToken(vbaParser.OPTIONAL, 0);
	};

	OR() {
	    return this.getToken(vbaParser.OR, 0);
	};

	OUTPUT() {
	    return this.getToken(vbaParser.OUTPUT, 0);
	};

	PARAMARRAY() {
	    return this.getToken(vbaParser.PARAMARRAY, 0);
	};

	PRESERVE() {
	    return this.getToken(vbaParser.PRESERVE, 0);
	};

	PRINT() {
	    return this.getToken(vbaParser.PRINT, 0);
	};

	PRIVATE() {
	    return this.getToken(vbaParser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(vbaParser.PUBLIC, 0);
	};

	PUT() {
	    return this.getToken(vbaParser.PUT, 0);
	};

	RANDOM() {
	    return this.getToken(vbaParser.RANDOM, 0);
	};

	RANDOMIZE() {
	    return this.getToken(vbaParser.RANDOMIZE, 0);
	};

	RAISEEVENT() {
	    return this.getToken(vbaParser.RAISEEVENT, 0);
	};

	READ() {
	    return this.getToken(vbaParser.READ, 0);
	};

	REDIM() {
	    return this.getToken(vbaParser.REDIM, 0);
	};

	REM() {
	    return this.getToken(vbaParser.REM, 0);
	};

	RESET() {
	    return this.getToken(vbaParser.RESET, 0);
	};

	RESUME() {
	    return this.getToken(vbaParser.RESUME, 0);
	};

	RETURN() {
	    return this.getToken(vbaParser.RETURN, 0);
	};

	RMDIR() {
	    return this.getToken(vbaParser.RMDIR, 0);
	};

	RSET() {
	    return this.getToken(vbaParser.RSET, 0);
	};

	SAVEPICTURE() {
	    return this.getToken(vbaParser.SAVEPICTURE, 0);
	};

	SAVESETTING() {
	    return this.getToken(vbaParser.SAVESETTING, 0);
	};

	SEEK() {
	    return this.getToken(vbaParser.SEEK, 0);
	};

	SELECT() {
	    return this.getToken(vbaParser.SELECT, 0);
	};

	SENDKEYS() {
	    return this.getToken(vbaParser.SENDKEYS, 0);
	};

	SET() {
	    return this.getToken(vbaParser.SET, 0);
	};

	SETATTR() {
	    return this.getToken(vbaParser.SETATTR, 0);
	};

	SHARED() {
	    return this.getToken(vbaParser.SHARED, 0);
	};

	SINGLE() {
	    return this.getToken(vbaParser.SINGLE, 0);
	};

	SPC() {
	    return this.getToken(vbaParser.SPC, 0);
	};

	STATIC() {
	    return this.getToken(vbaParser.STATIC, 0);
	};

	STEP() {
	    return this.getToken(vbaParser.STEP, 0);
	};

	STOP() {
	    return this.getToken(vbaParser.STOP, 0);
	};

	STRING() {
	    return this.getToken(vbaParser.STRING, 0);
	};

	SUB() {
	    return this.getToken(vbaParser.SUB, 0);
	};

	TAB() {
	    return this.getToken(vbaParser.TAB, 0);
	};

	TEXT() {
	    return this.getToken(vbaParser.TEXT, 0);
	};

	THEN() {
	    return this.getToken(vbaParser.THEN, 0);
	};

	TIME() {
	    return this.getToken(vbaParser.TIME, 0);
	};

	TO() {
	    return this.getToken(vbaParser.TO, 0);
	};

	TRUE() {
	    return this.getToken(vbaParser.TRUE, 0);
	};

	TYPE() {
	    return this.getToken(vbaParser.TYPE, 0);
	};

	TYPEOF() {
	    return this.getToken(vbaParser.TYPEOF, 0);
	};

	UNLOAD() {
	    return this.getToken(vbaParser.UNLOAD, 0);
	};

	UNLOCK() {
	    return this.getToken(vbaParser.UNLOCK, 0);
	};

	UNTIL() {
	    return this.getToken(vbaParser.UNTIL, 0);
	};

	VARIANT() {
	    return this.getToken(vbaParser.VARIANT, 0);
	};

	VERSION() {
	    return this.getToken(vbaParser.VERSION, 0);
	};

	WEND() {
	    return this.getToken(vbaParser.WEND, 0);
	};

	WHILE() {
	    return this.getToken(vbaParser.WHILE, 0);
	};

	WIDTH() {
	    return this.getToken(vbaParser.WIDTH, 0);
	};

	WITH() {
	    return this.getToken(vbaParser.WITH, 0);
	};

	WITHEVENTS() {
	    return this.getToken(vbaParser.WITHEVENTS, 0);
	};

	WRITE() {
	    return this.getToken(vbaParser.WRITE, 0);
	};

	XOR() {
	    return this.getToken(vbaParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterAmbiguousKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitAmbiguousKeyword(this);
		}
	}


}



class RemCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_remComment;
    }

	REMCOMMENT() {
	    return this.getToken(vbaParser.REMCOMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterRemComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitRemComment(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_comment;
    }

	COMMENT() {
	    return this.getToken(vbaParser.COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitComment(this);
		}
	}


}



class EndOfLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_endOfLine;
    }

	NEWLINE() {
	    return this.getToken(vbaParser.NEWLINE, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	remComment() {
	    return this.getTypedRuleContext(RemCommentContext,0);
	};

	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEndOfLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEndOfLine(this);
		}
	}


}



class EndOfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbaParser.RULE_endOfStatement;
    }

	endOfLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndOfLineContext);
	    } else {
	        return this.getTypedRuleContext(EndOfLineContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.COLON);
	    } else {
	        return this.getToken(vbaParser.COLON, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(vbaParser.WS);
	    } else {
	        return this.getToken(vbaParser.WS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.enterEndOfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof vbaListener ) {
	        listener.exitEndOfStatement(this);
		}
	}


}




vbaParser.StartRuleContext = StartRuleContext; 
vbaParser.ModuleContext = ModuleContext; 
vbaParser.ModuleHeaderContext = ModuleHeaderContext; 
vbaParser.ModuleConfigContext = ModuleConfigContext; 
vbaParser.ModuleConfigElementContext = ModuleConfigElementContext; 
vbaParser.ModuleAttributesContext = ModuleAttributesContext; 
vbaParser.ModuleDeclarationsContext = ModuleDeclarationsContext; 
vbaParser.ModuleOptionContext = ModuleOptionContext; 
vbaParser.ModuleDeclarationsElementContext = ModuleDeclarationsElementContext; 
vbaParser.MacroStmtContext = MacroStmtContext; 
vbaParser.ModuleBodyContext = ModuleBodyContext; 
vbaParser.ModuleBodyElementContext = ModuleBodyElementContext; 
vbaParser.AttributeStmtContext = AttributeStmtContext; 
vbaParser.BlockContext = BlockContext; 
vbaParser.BlockStmtContext = BlockStmtContext; 
vbaParser.AppactivateStmtContext = AppactivateStmtContext; 
vbaParser.BeepStmtContext = BeepStmtContext; 
vbaParser.ChdirStmtContext = ChdirStmtContext; 
vbaParser.ChdriveStmtContext = ChdriveStmtContext; 
vbaParser.CloseStmtContext = CloseStmtContext; 
vbaParser.ConstStmtContext = ConstStmtContext; 
vbaParser.ConstSubStmtContext = ConstSubStmtContext; 
vbaParser.DateStmtContext = DateStmtContext; 
vbaParser.DeclareStmtContext = DeclareStmtContext; 
vbaParser.DeftypeStmtContext = DeftypeStmtContext; 
vbaParser.DeleteSettingStmtContext = DeleteSettingStmtContext; 
vbaParser.DoLoopStmtContext = DoLoopStmtContext; 
vbaParser.EndStmtContext = EndStmtContext; 
vbaParser.EnumerationStmtContext = EnumerationStmtContext; 
vbaParser.EnumerationStmt_ConstantContext = EnumerationStmt_ConstantContext; 
vbaParser.EraseStmtContext = EraseStmtContext; 
vbaParser.ErrorStmtContext = ErrorStmtContext; 
vbaParser.EventStmtContext = EventStmtContext; 
vbaParser.ExitStmtContext = ExitStmtContext; 
vbaParser.FilecopyStmtContext = FilecopyStmtContext; 
vbaParser.ForEachStmtContext = ForEachStmtContext; 
vbaParser.ForNextStmtContext = ForNextStmtContext; 
vbaParser.FunctionStmtContext = FunctionStmtContext; 
vbaParser.GetStmtContext = GetStmtContext; 
vbaParser.GoSubStmtContext = GoSubStmtContext; 
vbaParser.GoToStmtContext = GoToStmtContext; 
vbaParser.IfThenElseStmtContext = IfThenElseStmtContext; 
vbaParser.IfBlockStmtContext = IfBlockStmtContext; 
vbaParser.IfConditionStmtContext = IfConditionStmtContext; 
vbaParser.IfElseIfBlockStmtContext = IfElseIfBlockStmtContext; 
vbaParser.IfElseBlockStmtContext = IfElseBlockStmtContext; 
vbaParser.ImplementsStmtContext = ImplementsStmtContext; 
vbaParser.InputStmtContext = InputStmtContext; 
vbaParser.KillStmtContext = KillStmtContext; 
vbaParser.LetStmtContext = LetStmtContext; 
vbaParser.LineInputStmtContext = LineInputStmtContext; 
vbaParser.LoadStmtContext = LoadStmtContext; 
vbaParser.LockStmtContext = LockStmtContext; 
vbaParser.LsetStmtContext = LsetStmtContext; 
vbaParser.MacroConstStmtContext = MacroConstStmtContext; 
vbaParser.MacroIfThenElseStmtContext = MacroIfThenElseStmtContext; 
vbaParser.MacroIfBlockStmtContext = MacroIfBlockStmtContext; 
vbaParser.MacroElseIfBlockStmtContext = MacroElseIfBlockStmtContext; 
vbaParser.MacroElseBlockStmtContext = MacroElseBlockStmtContext; 
vbaParser.MidStmtContext = MidStmtContext; 
vbaParser.MkdirStmtContext = MkdirStmtContext; 
vbaParser.NameStmtContext = NameStmtContext; 
vbaParser.OnErrorStmtContext = OnErrorStmtContext; 
vbaParser.OnGoToStmtContext = OnGoToStmtContext; 
vbaParser.OnGoSubStmtContext = OnGoSubStmtContext; 
vbaParser.OpenStmtContext = OpenStmtContext; 
vbaParser.OutputListContext = OutputListContext; 
vbaParser.OutputList_ExpressionContext = OutputList_ExpressionContext; 
vbaParser.PrintStmtContext = PrintStmtContext; 
vbaParser.PropertyGetStmtContext = PropertyGetStmtContext; 
vbaParser.PropertySetStmtContext = PropertySetStmtContext; 
vbaParser.PropertyLetStmtContext = PropertyLetStmtContext; 
vbaParser.PutStmtContext = PutStmtContext; 
vbaParser.RaiseEventStmtContext = RaiseEventStmtContext; 
vbaParser.RandomizeStmtContext = RandomizeStmtContext; 
vbaParser.RedimStmtContext = RedimStmtContext; 
vbaParser.RedimSubStmtContext = RedimSubStmtContext; 
vbaParser.ResetStmtContext = ResetStmtContext; 
vbaParser.ResumeStmtContext = ResumeStmtContext; 
vbaParser.ReturnStmtContext = ReturnStmtContext; 
vbaParser.RmdirStmtContext = RmdirStmtContext; 
vbaParser.RsetStmtContext = RsetStmtContext; 
vbaParser.SavepictureStmtContext = SavepictureStmtContext; 
vbaParser.SaveSettingStmtContext = SaveSettingStmtContext; 
vbaParser.SeekStmtContext = SeekStmtContext; 
vbaParser.SelectCaseStmtContext = SelectCaseStmtContext; 
vbaParser.SC_SelectionContext = SC_SelectionContext; 
vbaParser.SC_CaseContext = SC_CaseContext; 
vbaParser.SC_CondContext = SC_CondContext; 
vbaParser.SendkeysStmtContext = SendkeysStmtContext; 
vbaParser.SetattrStmtContext = SetattrStmtContext; 
vbaParser.SetStmtContext = SetStmtContext; 
vbaParser.StopStmtContext = StopStmtContext; 
vbaParser.SubStmtContext = SubStmtContext; 
vbaParser.TimeStmtContext = TimeStmtContext; 
vbaParser.TypeStmtContext = TypeStmtContext; 
vbaParser.TypeStmt_ElementContext = TypeStmt_ElementContext; 
vbaParser.TypeOfStmtContext = TypeOfStmtContext; 
vbaParser.UnloadStmtContext = UnloadStmtContext; 
vbaParser.UnlockStmtContext = UnlockStmtContext; 
vbaParser.ValueStmtContext = ValueStmtContext; 
vbaParser.VariableStmtContext = VariableStmtContext; 
vbaParser.VariableListStmtContext = VariableListStmtContext; 
vbaParser.VariableSubStmtContext = VariableSubStmtContext; 
vbaParser.WhileWendStmtContext = WhileWendStmtContext; 
vbaParser.WidthStmtContext = WidthStmtContext; 
vbaParser.WithStmtContext = WithStmtContext; 
vbaParser.WriteStmtContext = WriteStmtContext; 
vbaParser.FileNumberContext = FileNumberContext; 
vbaParser.ExplicitCallStmtContext = ExplicitCallStmtContext; 
vbaParser.ECS_ProcedureCallContext = ECS_ProcedureCallContext; 
vbaParser.ECS_MemberProcedureCallContext = ECS_MemberProcedureCallContext; 
vbaParser.ImplicitCallStmt_InBlockContext = ImplicitCallStmt_InBlockContext; 
vbaParser.ICS_B_MemberProcedureCallContext = ICS_B_MemberProcedureCallContext; 
vbaParser.ICS_B_ProcedureCallContext = ICS_B_ProcedureCallContext; 
vbaParser.ImplicitCallStmt_InStmtContext = ImplicitCallStmt_InStmtContext; 
vbaParser.ICS_S_VariableOrProcedureCallContext = ICS_S_VariableOrProcedureCallContext; 
vbaParser.ICS_S_ProcedureOrArrayCallContext = ICS_S_ProcedureOrArrayCallContext; 
vbaParser.ICS_S_MembersCallContext = ICS_S_MembersCallContext; 
vbaParser.ICS_S_MemberCallContext = ICS_S_MemberCallContext; 
vbaParser.ICS_S_DictionaryCallContext = ICS_S_DictionaryCallContext; 
vbaParser.ArgsCallContext = ArgsCallContext; 
vbaParser.ArgCallContext = ArgCallContext; 
vbaParser.DictionaryCallStmtContext = DictionaryCallStmtContext; 
vbaParser.ArgListContext = ArgListContext; 
vbaParser.ArgContext = ArgContext; 
vbaParser.ArgDefaultValueContext = ArgDefaultValueContext; 
vbaParser.SubscriptsContext = SubscriptsContext; 
vbaParser.Subscript_Context = Subscript_Context; 
vbaParser.AmbiguousIdentifierContext = AmbiguousIdentifierContext; 
vbaParser.AsTypeClauseContext = AsTypeClauseContext; 
vbaParser.BaseTypeContext = BaseTypeContext; 
vbaParser.CertainIdentifierContext = CertainIdentifierContext; 
vbaParser.ComparisonOperatorContext = ComparisonOperatorContext; 
vbaParser.ComplexTypeContext = ComplexTypeContext; 
vbaParser.FieldLengthContext = FieldLengthContext; 
vbaParser.LetterrangeContext = LetterrangeContext; 
vbaParser.LineLabelContext = LineLabelContext; 
vbaParser.LiteralContext = LiteralContext; 
vbaParser.Type_Context = Type_Context; 
vbaParser.TypeHintContext = TypeHintContext; 
vbaParser.VisibilityContext = VisibilityContext; 
vbaParser.AmbiguousKeywordContext = AmbiguousKeywordContext; 
vbaParser.RemCommentContext = RemCommentContext; 
vbaParser.CommentContext = CommentContext; 
vbaParser.EndOfLineContext = EndOfLineContext; 
vbaParser.EndOfStatementContext = EndOfStatementContext; 
