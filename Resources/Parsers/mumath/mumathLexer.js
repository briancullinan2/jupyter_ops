// Generated from ./mumath/mumath.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,38,235,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,
14,1,14,5,14,157,8,14,10,14,12,14,160,9,14,1,14,1,14,1,14,1,14,1,15,1,15,
1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,5,34,210,
8,34,10,34,12,34,213,9,34,1,34,3,34,216,8,34,1,35,1,35,1,35,1,35,1,36,1,
36,5,36,224,8,36,10,36,12,36,227,9,36,1,36,1,36,1,37,4,37,232,8,37,11,37,
12,37,233,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
36,73,37,75,38,1,0,5,3,0,9,10,13,13,32,32,2,0,10,10,37,37,3,0,35,35,64,90,
123,123,4,0,35,35,48,57,65,90,125,125,1,0,34,34,240,0,1,1,0,0,0,0,3,1,0,
0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,83,1,0,0,0,5,92,1,0,0,0,7,
101,1,0,0,0,9,108,1,0,0,0,11,111,1,0,0,0,13,116,1,0,0,0,15,124,1,0,0,0,17,
129,1,0,0,0,19,134,1,0,0,0,21,137,1,0,0,0,23,141,1,0,0,0,25,145,1,0,0,0,
27,149,1,0,0,0,29,153,1,0,0,0,31,165,1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,
0,37,172,1,0,0,0,39,174,1,0,0,0,41,176,1,0,0,0,43,178,1,0,0,0,45,180,1,0,
0,0,47,182,1,0,0,0,49,184,1,0,0,0,51,186,1,0,0,0,53,188,1,0,0,0,55,191,1,
0,0,0,57,193,1,0,0,0,59,196,1,0,0,0,61,199,1,0,0,0,63,201,1,0,0,0,65,203,
1,0,0,0,67,205,1,0,0,0,69,207,1,0,0,0,71,217,1,0,0,0,73,221,1,0,0,0,75,231,
1,0,0,0,77,78,5,66,0,0,78,79,5,76,0,0,79,80,5,79,0,0,80,81,5,67,0,0,81,82,
5,75,0,0,82,2,1,0,0,0,83,84,5,69,0,0,84,85,5,78,0,0,85,86,5,68,0,0,86,87,
5,66,0,0,87,88,5,76,0,0,88,89,5,79,0,0,89,90,5,67,0,0,90,91,5,75,0,0,91,
4,1,0,0,0,92,93,5,70,0,0,93,94,5,85,0,0,94,95,5,78,0,0,95,96,5,67,0,0,96,
97,5,84,0,0,97,98,5,73,0,0,98,99,5,79,0,0,99,100,5,78,0,0,100,6,1,0,0,0,
101,102,5,69,0,0,102,103,5,78,0,0,103,104,5,68,0,0,104,105,5,70,0,0,105,
106,5,85,0,0,106,107,5,78,0,0,107,8,1,0,0,0,108,109,5,69,0,0,109,110,5,81,
0,0,110,10,1,0,0,0,111,112,5,76,0,0,112,113,5,79,0,0,113,114,5,79,0,0,114,
115,5,80,0,0,115,12,1,0,0,0,116,117,5,69,0,0,117,118,5,78,0,0,118,119,5,
68,0,0,119,120,5,76,0,0,120,121,5,79,0,0,121,122,5,79,0,0,122,123,5,80,0,
0,123,14,1,0,0,0,124,125,5,87,0,0,125,126,5,72,0,0,126,127,5,69,0,0,127,
128,5,78,0,0,128,16,1,0,0,0,129,130,5,69,0,0,130,131,5,88,0,0,131,132,5,
73,0,0,132,133,5,84,0,0,133,18,1,0,0,0,134,135,5,79,0,0,135,136,5,82,0,0,
136,20,1,0,0,0,137,138,5,65,0,0,138,139,5,78,0,0,139,140,5,68,0,0,140,22,
1,0,0,0,141,142,5,78,0,0,142,143,5,79,0,0,143,144,5,84,0,0,144,24,1,0,0,
0,145,146,5,109,0,0,146,147,5,111,0,0,147,148,5,100,0,0,148,26,1,0,0,0,149,
150,7,0,0,0,150,151,1,0,0,0,151,152,6,13,0,0,152,28,1,0,0,0,153,158,5,37,
0,0,154,157,5,10,0,0,155,157,8,1,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,
160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,
0,0,161,162,5,37,0,0,162,163,1,0,0,0,163,164,6,14,0,0,164,30,1,0,0,0,165,
166,5,61,0,0,166,167,5,61,0,0,167,32,1,0,0,0,168,169,5,39,0,0,169,34,1,0,
0,0,170,171,5,43,0,0,171,36,1,0,0,0,172,173,5,45,0,0,173,38,1,0,0,0,174,
175,5,42,0,0,175,40,1,0,0,0,176,177,5,47,0,0,177,42,1,0,0,0,178,179,5,44,
0,0,179,44,1,0,0,0,180,181,5,59,0,0,181,46,1,0,0,0,182,183,5,36,0,0,183,
48,1,0,0,0,184,185,5,58,0,0,185,50,1,0,0,0,186,187,5,61,0,0,187,52,1,0,0,
0,188,189,5,60,0,0,189,190,5,62,0,0,190,54,1,0,0,0,191,192,5,60,0,0,192,
56,1,0,0,0,193,194,5,60,0,0,194,195,5,61,0,0,195,58,1,0,0,0,196,197,5,62,
0,0,197,198,5,61,0,0,198,60,1,0,0,0,199,200,5,62,0,0,200,62,1,0,0,0,201,
202,5,40,0,0,202,64,1,0,0,0,203,204,5,41,0,0,204,66,1,0,0,0,205,206,5,94,
0,0,206,68,1,0,0,0,207,211,7,2,0,0,208,210,7,3,0,0,209,208,1,0,0,0,210,213,
1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,
214,216,3,71,35,0,215,214,1,0,0,0,215,216,1,0,0,0,216,70,1,0,0,0,217,218,
5,91,0,0,218,219,3,75,37,0,219,220,5,93,0,0,220,72,1,0,0,0,221,225,5,34,
0,0,222,224,8,4,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,
226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,34,0,0,229,74,1,0,
0,0,230,232,2,48,57,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,
234,1,0,0,0,234,76,1,0,0,0,7,0,156,158,211,215,225,233,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class mumathLexer extends antlr4.Lexer {

    static grammarFileName = "mumath.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'BLOCK'", "'ENDBLOCK'", "'FUNCTION'", "'ENDFUN'", 
                         "'EQ'", "'LOOP'", "'ENDLOOP'", "'WHEN'", "'EXIT'", 
                         "'OR'", "'AND'", "'NOT'", "'mod'", null, null, 
                         "'=='", "'''", "'+'", "'-'", "'*'", "'/'", "','", 
                         "';'", "'$'", "':'", "'='", "'<>'", "'<'", "'<='", 
                         "'>='", "'>'", "'('", "')'", "'^'" ];
	static symbolicNames = [ null, "BLOCK", "ENDBLOCK", "FUNCTION", "ENDFUN", 
                          "EQF", "LOOP", "ENDLOOP", "WHEN", "EXIT", "OR", 
                          "AND", "NOT", "MOD", "WS", "COMMENT", "EQUATION", 
                          "QUOTE", "PLUS", "MINUS", "STAR", "SLASH", "COMMA", 
                          "SEMI", "DOLLAR", "COLON", "EQC", "NOT_EQUAL", 
                          "LT", "LE", "GE", "GT", "LPAREN", "RPAREN", "POWER", 
                          "ID", "ARR", "STRING", "NUMBER" ];
	static ruleNames = [ "BLOCK", "ENDBLOCK", "FUNCTION", "ENDFUN", "EQF", 
                      "LOOP", "ENDLOOP", "WHEN", "EXIT", "OR", "AND", "NOT", 
                      "MOD", "WS", "COMMENT", "EQUATION", "QUOTE", "PLUS", 
                      "MINUS", "STAR", "SLASH", "COMMA", "SEMI", "DOLLAR", 
                      "COLON", "EQC", "NOT_EQUAL", "LT", "LE", "GE", "GT", 
                      "LPAREN", "RPAREN", "POWER", "ID", "ARR", "STRING", 
                      "NUMBER" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

mumathLexer.EOF = antlr4.Token.EOF;
mumathLexer.BLOCK = 1;
mumathLexer.ENDBLOCK = 2;
mumathLexer.FUNCTION = 3;
mumathLexer.ENDFUN = 4;
mumathLexer.EQF = 5;
mumathLexer.LOOP = 6;
mumathLexer.ENDLOOP = 7;
mumathLexer.WHEN = 8;
mumathLexer.EXIT = 9;
mumathLexer.OR = 10;
mumathLexer.AND = 11;
mumathLexer.NOT = 12;
mumathLexer.MOD = 13;
mumathLexer.WS = 14;
mumathLexer.COMMENT = 15;
mumathLexer.EQUATION = 16;
mumathLexer.QUOTE = 17;
mumathLexer.PLUS = 18;
mumathLexer.MINUS = 19;
mumathLexer.STAR = 20;
mumathLexer.SLASH = 21;
mumathLexer.COMMA = 22;
mumathLexer.SEMI = 23;
mumathLexer.DOLLAR = 24;
mumathLexer.COLON = 25;
mumathLexer.EQC = 26;
mumathLexer.NOT_EQUAL = 27;
mumathLexer.LT = 28;
mumathLexer.LE = 29;
mumathLexer.GE = 30;
mumathLexer.GT = 31;
mumathLexer.LPAREN = 32;
mumathLexer.RPAREN = 33;
mumathLexer.POWER = 34;
mumathLexer.ID = 35;
mumathLexer.ARR = 36;
mumathLexer.STRING = 37;
mumathLexer.NUMBER = 38;



