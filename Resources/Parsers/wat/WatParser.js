// Generated from ./wat/WatParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import WatParserListener from './WatParserListener.js';
const serializedATN = [4,1,76,1004,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
1,4,1,4,1,4,1,4,3,4,149,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,159,8,6,
10,6,12,6,162,9,6,1,6,1,6,5,6,166,8,6,10,6,12,6,169,9,6,1,6,1,6,1,6,1,6,
3,6,175,8,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,7,1,7,3,7,185,8,7,1,7,1,
7,1,8,1,8,3,8,191,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
1,13,1,13,1,13,1,13,3,13,208,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,4,14,220,8,14,11,14,12,14,221,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,239,8,14,1,14,3,14,242,8,
14,1,14,1,14,3,14,246,8,14,1,14,3,14,249,8,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,3,14,260,8,14,1,15,1,15,3,15,264,8,15,1,15,1,15,1,16,1,
16,1,16,5,16,271,8,16,10,16,12,16,274,9,16,1,16,5,16,277,8,16,10,16,12,16,
280,9,16,1,16,1,16,1,16,5,16,285,8,16,10,16,12,16,288,9,16,1,16,5,16,291,
8,16,10,16,12,16,294,9,16,1,17,1,17,3,17,298,8,17,1,17,1,17,1,18,1,18,1,
18,5,18,305,8,18,10,18,12,18,308,9,18,1,18,5,18,311,8,18,10,18,12,18,314,
9,18,1,18,1,18,1,19,1,19,1,19,5,19,321,8,19,10,19,12,19,324,9,19,1,19,5,
19,327,8,19,10,19,12,19,330,9,19,1,19,1,19,1,20,1,20,3,20,336,8,20,1,20,
1,20,1,20,3,20,341,8,20,1,20,1,20,3,20,345,8,20,1,20,1,20,1,20,3,20,350,
8,20,1,20,3,20,353,8,20,1,20,1,20,3,20,357,8,20,3,20,359,8,20,1,21,1,21,
1,21,1,21,1,21,1,22,3,22,367,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
5,24,377,8,24,10,24,12,24,380,9,24,1,24,1,24,1,24,1,24,3,24,386,8,24,1,24,
1,24,1,24,3,24,391,8,24,1,24,1,24,1,24,3,24,396,8,24,1,24,3,24,399,8,24,
1,25,3,25,402,8,25,1,25,1,25,1,26,1,26,1,26,5,26,409,8,26,10,26,12,26,412,
9,26,1,26,5,26,415,8,26,10,26,12,26,418,9,26,1,26,1,26,1,27,1,27,1,27,5,
27,425,8,27,10,27,12,27,428,9,27,1,27,5,27,431,8,27,10,27,12,27,434,9,27,
1,27,5,27,437,8,27,10,27,12,27,440,9,27,1,28,1,28,1,28,1,28,5,28,446,8,28,
10,28,12,28,449,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,460,
8,28,3,28,462,8,28,1,29,5,29,465,8,29,10,29,12,29,468,9,29,1,29,3,29,471,
8,29,1,30,1,30,1,31,1,31,1,31,3,31,478,8,31,1,31,1,31,1,31,1,32,3,32,484,
8,32,1,32,1,32,1,32,3,32,489,8,32,1,32,1,32,1,32,1,32,1,32,3,32,496,8,32,
1,33,1,33,1,33,5,33,501,8,33,10,33,12,33,504,9,33,1,33,1,33,1,33,1,33,1,
33,1,33,1,33,3,33,513,8,33,1,33,1,33,1,34,1,34,1,34,5,34,520,8,34,10,34,
12,34,523,9,34,1,34,5,34,526,8,34,10,34,12,34,529,9,34,1,35,1,35,1,35,5,
35,534,8,35,10,35,12,35,537,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,
546,8,35,10,35,12,35,549,9,35,1,35,1,35,1,36,1,36,1,36,5,36,556,8,36,10,
36,12,36,559,9,36,1,36,5,36,562,8,36,10,36,12,36,565,9,36,1,36,1,36,1,37,
1,37,1,37,5,37,572,8,37,10,37,12,37,575,9,37,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,5,37,584,8,37,10,37,12,37,587,9,37,1,37,1,37,1,38,1,38,1,38,1,38,
1,38,1,38,3,38,597,8,38,1,39,1,39,1,39,3,39,602,8,39,1,39,1,39,5,39,606,
8,39,10,39,12,39,609,9,39,1,39,1,39,1,40,1,40,1,40,3,40,616,8,40,1,40,1,
40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,632,
8,41,10,41,12,41,635,9,41,1,41,1,41,3,41,639,8,41,1,42,1,42,1,42,3,42,644,
8,42,1,42,1,42,5,42,648,8,42,10,42,12,42,651,9,42,1,42,1,42,1,43,1,43,1,
43,3,43,658,8,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
1,44,1,44,5,44,673,8,44,10,44,12,44,676,9,44,1,44,3,44,679,8,44,1,45,1,45,
1,45,3,45,684,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,3,46,698,8,46,1,47,1,47,1,47,3,47,703,8,47,1,47,1,47,1,47,1,47,1,47,
1,47,3,47,711,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,719,8,47,1,47,1,47,
1,47,1,47,1,47,1,47,3,47,727,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,735,
8,47,1,47,1,47,1,47,3,47,740,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,775,8,50,1,51,
1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,
54,3,54,793,8,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,813,8,56,1,57,1,57,1,57,3,57,818,
8,57,1,57,5,57,821,8,57,10,57,12,57,824,9,57,1,57,1,57,1,58,1,58,1,58,1,
58,3,58,832,8,58,1,58,1,58,5,58,836,8,58,10,58,12,58,839,9,58,1,58,3,58,
842,8,58,1,59,1,59,1,59,3,59,847,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
3,59,856,8,59,1,59,1,59,1,59,3,59,861,8,59,1,60,1,60,1,60,1,60,1,60,1,60,
1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
60,1,60,1,60,3,60,915,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,924,8,
61,1,61,1,61,1,61,3,61,929,8,61,1,62,1,62,1,62,3,62,934,8,62,1,62,5,62,937,
8,62,10,62,12,62,940,9,62,1,62,1,62,1,62,1,62,3,62,946,8,62,1,62,1,62,1,
62,1,62,1,62,3,62,953,8,62,1,62,1,62,1,62,1,62,1,62,3,62,960,8,62,1,62,3,
62,963,8,62,1,63,1,63,1,63,1,63,1,63,1,64,5,64,971,8,64,10,64,12,64,974,
9,64,1,65,5,65,977,8,65,10,65,12,65,980,9,65,1,65,1,65,4,65,984,8,65,11,
65,12,65,985,1,65,1,65,3,65,990,8,65,1,66,1,66,1,66,1,66,5,66,996,8,66,10,
66,12,66,999,9,66,1,66,3,66,1002,8,66,1,66,0,0,67,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,0,5,1,0,4,5,1,0,3,5,2,0,3,3,
74,74,1,0,14,15,1,0,58,59,1104,0,134,1,0,0,0,2,136,1,0,0,0,4,138,1,0,0,0,
6,140,1,0,0,0,8,148,1,0,0,0,10,150,1,0,0,0,12,179,1,0,0,0,14,182,1,0,0,0,
16,188,1,0,0,0,18,192,1,0,0,0,20,197,1,0,0,0,22,199,1,0,0,0,24,201,1,0,0,
0,26,207,1,0,0,0,28,259,1,0,0,0,30,261,1,0,0,0,32,278,1,0,0,0,34,295,1,0,
0,0,36,312,1,0,0,0,38,328,1,0,0,0,40,358,1,0,0,0,42,360,1,0,0,0,44,366,1,
0,0,0,46,370,1,0,0,0,48,398,1,0,0,0,50,401,1,0,0,0,52,416,1,0,0,0,54,432,
1,0,0,0,56,461,1,0,0,0,58,466,1,0,0,0,60,472,1,0,0,0,62,474,1,0,0,0,64,495,
1,0,0,0,66,512,1,0,0,0,68,527,1,0,0,0,70,547,1,0,0,0,72,563,1,0,0,0,74,585,
1,0,0,0,76,596,1,0,0,0,78,598,1,0,0,0,80,612,1,0,0,0,82,638,1,0,0,0,84,640,
1,0,0,0,86,654,1,0,0,0,88,678,1,0,0,0,90,680,1,0,0,0,92,697,1,0,0,0,94,739,
1,0,0,0,96,741,1,0,0,0,98,748,1,0,0,0,100,774,1,0,0,0,102,776,1,0,0,0,104,
782,1,0,0,0,106,787,1,0,0,0,108,789,1,0,0,0,110,797,1,0,0,0,112,812,1,0,
0,0,114,814,1,0,0,0,116,841,1,0,0,0,118,860,1,0,0,0,120,914,1,0,0,0,122,
928,1,0,0,0,124,962,1,0,0,0,126,964,1,0,0,0,128,972,1,0,0,0,130,989,1,0,
0,0,132,1001,1,0,0,0,134,135,7,0,0,0,135,1,1,0,0,0,136,137,5,6,0,0,137,3,
1,0,0,0,138,139,5,7,0,0,139,5,1,0,0,0,140,141,5,9,0,0,141,7,1,0,0,0,142,
149,3,4,2,0,143,144,5,1,0,0,144,145,5,10,0,0,145,146,3,4,2,0,146,147,5,2,
0,0,147,149,1,0,0,0,148,142,1,0,0,0,148,143,1,0,0,0,149,9,1,0,0,0,150,151,
5,1,0,0,151,152,5,44,0,0,152,153,3,12,6,0,153,154,5,2,0,0,154,11,1,0,0,0,
155,174,5,1,0,0,156,160,5,47,0,0,157,159,3,4,2,0,158,157,1,0,0,0,159,162,
1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,175,1,0,0,0,162,160,1,0,0,0,
163,167,5,46,0,0,164,166,3,4,2,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,
1,0,0,0,167,168,1,0,0,0,168,175,1,0,0,0,169,167,1,0,0,0,170,171,5,46,0,0,
171,172,3,24,12,0,172,173,3,4,2,0,173,175,1,0,0,0,174,156,1,0,0,0,174,163,
1,0,0,0,174,170,1,0,0,0,175,176,1,0,0,0,176,178,5,2,0,0,177,155,1,0,0,0,
178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,13,1,0,0,0,181,179,1,
0,0,0,182,184,5,3,0,0,183,185,5,3,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,
186,1,0,0,0,186,187,3,6,3,0,187,15,1,0,0,0,188,190,5,3,0,0,189,191,5,3,0,
0,190,189,1,0,0,0,190,191,1,0,0,0,191,17,1,0,0,0,192,193,5,1,0,0,193,194,
5,43,0,0,194,195,3,22,11,0,195,196,5,2,0,0,196,19,1,0,0,0,197,198,7,1,0,
0,198,21,1,0,0,0,199,200,7,2,0,0,200,23,1,0,0,0,201,202,5,74,0,0,202,25,
1,0,0,0,203,208,3,28,14,0,204,208,3,34,17,0,205,208,3,40,20,0,206,208,3,
46,23,0,207,203,1,0,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,
208,27,1,0,0,0,209,260,5,12,0,0,210,260,5,11,0,0,211,260,5,13,0,0,212,260,
5,24,0,0,213,214,5,17,0,0,214,260,3,22,11,0,215,216,5,18,0,0,216,260,3,22,
11,0,217,219,5,19,0,0,218,220,3,22,11,0,219,218,1,0,0,0,220,221,1,0,0,0,
221,219,1,0,0,0,221,222,1,0,0,0,222,260,1,0,0,0,223,260,5,20,0,0,224,225,
5,25,0,0,225,260,3,22,11,0,226,227,5,27,0,0,227,260,3,22,11,0,228,229,5,
28,0,0,229,260,3,22,11,0,230,231,5,29,0,0,231,260,3,22,11,0,232,233,5,30,
0,0,233,260,3,22,11,0,234,235,5,31,0,0,235,260,3,22,11,0,236,238,5,32,0,
0,237,239,5,34,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,242,
5,35,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,260,1,0,0,0,243,245,5,33,0,
0,244,246,5,34,0,0,245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,249,
5,35,0,0,248,247,1,0,0,0,248,249,1,0,0,0,249,260,1,0,0,0,250,260,5,41,0,
0,251,260,5,42,0,0,252,253,5,8,0,0,253,260,3,20,10,0,254,260,5,38,0,0,255,
260,5,39,0,0,256,260,5,36,0,0,257,260,5,37,0,0,258,260,5,40,0,0,259,209,
1,0,0,0,259,210,1,0,0,0,259,211,1,0,0,0,259,212,1,0,0,0,259,213,1,0,0,0,
259,215,1,0,0,0,259,217,1,0,0,0,259,223,1,0,0,0,259,224,1,0,0,0,259,226,
1,0,0,0,259,228,1,0,0,0,259,230,1,0,0,0,259,232,1,0,0,0,259,234,1,0,0,0,
259,236,1,0,0,0,259,243,1,0,0,0,259,250,1,0,0,0,259,251,1,0,0,0,259,252,
1,0,0,0,259,254,1,0,0,0,259,255,1,0,0,0,259,256,1,0,0,0,259,257,1,0,0,0,
259,258,1,0,0,0,260,29,1,0,0,0,261,263,5,26,0,0,262,264,3,18,9,0,263,262,
1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,3,32,16,0,266,31,1,0,0,0,
267,268,5,1,0,0,268,272,5,46,0,0,269,271,3,4,2,0,270,269,1,0,0,0,271,274,
1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,
275,277,5,2,0,0,276,267,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,
1,0,0,0,279,292,1,0,0,0,280,278,1,0,0,0,281,282,5,1,0,0,282,286,5,47,0,0,
283,285,3,4,2,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,
1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,291,5,2,0,0,290,281,1,0,0,0,
291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,33,1,0,0,0,294,292,1,
0,0,0,295,297,5,26,0,0,296,298,3,18,9,0,297,296,1,0,0,0,297,298,1,0,0,0,
298,299,1,0,0,0,299,300,3,36,18,0,300,35,1,0,0,0,301,302,5,1,0,0,302,306,
5,46,0,0,303,305,3,4,2,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,
306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,311,5,2,0,0,310,301,
1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,
314,312,1,0,0,0,315,316,3,38,19,0,316,37,1,0,0,0,317,318,5,1,0,0,318,322,
5,47,0,0,319,321,3,4,2,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,
322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,327,5,2,0,0,326,317,
1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,
330,328,1,0,0,0,331,332,3,26,13,0,332,39,1,0,0,0,333,335,7,3,0,0,334,336,
3,24,12,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,3,44,22,
0,338,340,5,16,0,0,339,341,3,24,12,0,340,339,1,0,0,0,340,341,1,0,0,0,341,
359,1,0,0,0,342,344,5,21,0,0,343,345,3,24,12,0,344,343,1,0,0,0,344,345,1,
0,0,0,345,346,1,0,0,0,346,352,3,44,22,0,347,349,5,23,0,0,348,350,3,24,12,
0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,3,58,29,0,352,
347,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,5,16,0,0,355,357,3,24,
12,0,356,355,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,333,1,0,0,0,358,
342,1,0,0,0,359,41,1,0,0,0,360,361,5,1,0,0,361,362,5,47,0,0,362,363,3,4,
2,0,363,364,5,2,0,0,364,43,1,0,0,0,365,367,3,42,21,0,366,365,1,0,0,0,366,
367,1,0,0,0,367,368,1,0,0,0,368,369,3,58,29,0,369,45,1,0,0,0,370,371,5,1,
0,0,371,372,3,48,24,0,372,373,5,2,0,0,373,47,1,0,0,0,374,378,3,28,14,0,375,
377,3,46,23,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,
0,0,0,379,399,1,0,0,0,380,378,1,0,0,0,381,382,5,26,0,0,382,399,3,50,25,0,
383,385,5,14,0,0,384,386,3,24,12,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,
1,0,0,0,387,399,3,44,22,0,388,390,5,15,0,0,389,391,3,24,12,0,390,389,1,0,
0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,399,3,44,22,0,393,395,5,21,0,0,394,
396,3,24,12,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,3,
56,28,0,398,374,1,0,0,0,398,381,1,0,0,0,398,383,1,0,0,0,398,388,1,0,0,0,
398,393,1,0,0,0,399,49,1,0,0,0,400,402,3,18,9,0,401,400,1,0,0,0,401,402,
1,0,0,0,402,403,1,0,0,0,403,404,3,52,26,0,404,51,1,0,0,0,405,406,5,1,0,0,
406,410,5,46,0,0,407,409,3,4,2,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,
1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,415,5,2,0,0,
414,405,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,
1,0,0,0,418,416,1,0,0,0,419,420,3,54,27,0,420,53,1,0,0,0,421,422,5,1,0,0,
422,426,5,47,0,0,423,425,3,4,2,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,
1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,431,5,2,0,0,
430,421,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,438,
1,0,0,0,434,432,1,0,0,0,435,437,3,46,23,0,436,435,1,0,0,0,437,440,1,0,0,
0,438,436,1,0,0,0,438,439,1,0,0,0,439,55,1,0,0,0,440,438,1,0,0,0,441,442,
3,42,21,0,442,443,3,56,28,0,443,462,1,0,0,0,444,446,3,46,23,0,445,444,1,
0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,
447,1,0,0,0,450,451,5,1,0,0,451,452,5,22,0,0,452,453,3,58,29,0,453,459,5,
2,0,0,454,455,5,1,0,0,455,456,5,23,0,0,456,457,3,58,29,0,457,458,5,2,0,0,
458,460,1,0,0,0,459,454,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,441,
1,0,0,0,461,447,1,0,0,0,462,57,1,0,0,0,463,465,3,26,13,0,464,463,1,0,0,0,
465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,470,1,0,0,0,468,466,
1,0,0,0,469,471,3,30,15,0,470,469,1,0,0,0,470,471,1,0,0,0,471,59,1,0,0,0,
472,473,3,58,29,0,473,61,1,0,0,0,474,475,5,1,0,0,475,477,5,44,0,0,476,478,
3,24,12,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,480,3,64,32,
0,480,481,5,2,0,0,481,63,1,0,0,0,482,484,3,18,9,0,483,482,1,0,0,0,483,484,
1,0,0,0,484,485,1,0,0,0,485,496,3,70,35,0,486,488,3,98,49,0,487,489,3,18,
9,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,3,66,33,0,491,
496,1,0,0,0,492,493,3,104,52,0,493,494,3,64,32,0,494,496,1,0,0,0,495,483,
1,0,0,0,495,486,1,0,0,0,495,492,1,0,0,0,496,65,1,0,0,0,497,498,5,1,0,0,498,
502,5,46,0,0,499,501,3,4,2,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,
0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,513,5,2,0,0,506,
507,5,1,0,0,507,508,5,46,0,0,508,509,3,24,12,0,509,510,3,4,2,0,510,511,5,
2,0,0,511,513,1,0,0,0,512,497,1,0,0,0,512,506,1,0,0,0,513,514,1,0,0,0,514,
515,3,68,34,0,515,67,1,0,0,0,516,517,5,1,0,0,517,521,5,47,0,0,518,520,3,
4,2,0,519,518,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,
524,1,0,0,0,523,521,1,0,0,0,524,526,5,2,0,0,525,516,1,0,0,0,526,529,1,0,
0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,69,1,0,0,0,529,527,1,0,0,0,530,531,
5,1,0,0,531,535,5,46,0,0,532,534,3,4,2,0,533,532,1,0,0,0,534,537,1,0,0,0,
535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,546,
5,2,0,0,539,540,5,1,0,0,540,541,5,46,0,0,541,542,3,24,12,0,542,543,3,4,2,
0,543,544,5,2,0,0,544,546,1,0,0,0,545,530,1,0,0,0,545,539,1,0,0,0,546,549,
1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,
550,551,3,72,36,0,551,71,1,0,0,0,552,553,5,1,0,0,553,557,5,47,0,0,554,556,
3,4,2,0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,
558,560,1,0,0,0,559,557,1,0,0,0,560,562,5,2,0,0,561,552,1,0,0,0,562,565,
1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,1,0,0,0,
566,567,3,74,37,0,567,73,1,0,0,0,568,569,5,1,0,0,569,573,5,48,0,0,570,572,
3,4,2,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,
574,576,1,0,0,0,575,573,1,0,0,0,576,584,5,2,0,0,577,578,5,1,0,0,578,579,
5,48,0,0,579,580,3,24,12,0,580,581,3,4,2,0,581,582,5,2,0,0,582,584,1,0,0,
0,583,568,1,0,0,0,583,577,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,
1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,589,3,58,29,0,589,75,1,0,0,0,
590,591,5,1,0,0,591,592,5,54,0,0,592,593,3,60,30,0,593,594,5,2,0,0,594,597,
1,0,0,0,595,597,3,46,23,0,596,590,1,0,0,0,596,595,1,0,0,0,597,77,1,0,0,0,
598,599,5,1,0,0,599,601,5,52,0,0,600,602,3,22,11,0,601,600,1,0,0,0,601,602,
1,0,0,0,602,603,1,0,0,0,603,607,3,76,38,0,604,606,3,22,11,0,605,604,1,0,
0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,
607,1,0,0,0,610,611,5,2,0,0,611,79,1,0,0,0,612,613,5,1,0,0,613,615,5,50,
0,0,614,616,3,24,12,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,
618,3,82,41,0,618,619,5,2,0,0,619,81,1,0,0,0,620,639,3,14,7,0,621,622,3,
98,49,0,622,623,3,14,7,0,623,639,1,0,0,0,624,625,3,104,52,0,625,626,3,82,
41,0,626,639,1,0,0,0,627,628,3,6,3,0,628,629,5,1,0,0,629,633,5,52,0,0,630,
632,3,22,11,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,
0,0,0,634,636,1,0,0,0,635,633,1,0,0,0,636,637,5,2,0,0,637,639,1,0,0,0,638,
620,1,0,0,0,638,621,1,0,0,0,638,624,1,0,0,0,638,627,1,0,0,0,639,83,1,0,0,
0,640,641,5,1,0,0,641,643,5,53,0,0,642,644,3,22,11,0,643,642,1,0,0,0,643,
644,1,0,0,0,644,645,1,0,0,0,645,649,3,76,38,0,646,648,5,6,0,0,647,646,1,
0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,
649,1,0,0,0,652,653,5,2,0,0,653,85,1,0,0,0,654,655,5,1,0,0,655,657,5,51,
0,0,656,658,3,24,12,0,657,656,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,
660,3,88,44,0,660,661,5,2,0,0,661,87,1,0,0,0,662,679,3,16,8,0,663,664,3,
98,49,0,664,665,3,16,8,0,665,679,1,0,0,0,666,667,3,104,52,0,667,668,3,88,
44,0,668,679,1,0,0,0,669,670,5,1,0,0,670,674,5,53,0,0,671,673,5,6,0,0,672,
671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,677,1,0,
0,0,676,674,1,0,0,0,677,679,5,2,0,0,678,662,1,0,0,0,678,663,1,0,0,0,678,
666,1,0,0,0,678,669,1,0,0,0,679,89,1,0,0,0,680,681,5,1,0,0,681,683,5,49,
0,0,682,684,3,24,12,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,
686,3,92,46,0,686,687,5,2,0,0,687,91,1,0,0,0,688,689,3,8,4,0,689,690,3,60,
30,0,690,698,1,0,0,0,691,692,3,98,49,0,692,693,3,8,4,0,693,698,1,0,0,0,694,
695,3,104,52,0,695,696,3,92,46,0,696,698,1,0,0,0,697,688,1,0,0,0,697,691,
1,0,0,0,697,694,1,0,0,0,698,93,1,0,0,0,699,700,5,1,0,0,700,702,5,44,0,0,
701,703,3,24,12,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,
3,18,9,0,705,706,5,2,0,0,706,740,1,0,0,0,707,708,5,1,0,0,708,710,5,44,0,
0,709,711,3,24,12,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,
713,3,12,6,0,713,714,5,2,0,0,714,740,1,0,0,0,715,716,5,1,0,0,716,718,5,50,
0,0,717,719,3,24,12,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,
721,3,14,7,0,721,722,5,2,0,0,722,740,1,0,0,0,723,724,5,1,0,0,724,726,5,51,
0,0,725,727,3,24,12,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
729,3,16,8,0,729,730,5,2,0,0,730,740,1,0,0,0,731,732,5,1,0,0,732,734,5,49,
0,0,733,735,3,24,12,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,
737,3,8,4,0,737,738,5,2,0,0,738,740,1,0,0,0,739,699,1,0,0,0,739,707,1,0,
0,0,739,715,1,0,0,0,739,723,1,0,0,0,739,731,1,0,0,0,740,95,1,0,0,0,741,742,
5,1,0,0,742,743,5,55,0,0,743,744,3,2,1,0,744,745,3,2,1,0,745,746,3,94,47,
0,746,747,5,2,0,0,747,97,1,0,0,0,748,749,5,1,0,0,749,750,5,55,0,0,750,751,
3,2,1,0,751,752,3,2,1,0,752,753,5,2,0,0,753,99,1,0,0,0,754,755,5,1,0,0,755,
756,5,44,0,0,756,757,3,22,11,0,757,758,5,2,0,0,758,775,1,0,0,0,759,760,5,
1,0,0,760,761,5,50,0,0,761,762,3,22,11,0,762,763,5,2,0,0,763,775,1,0,0,0,
764,765,5,1,0,0,765,766,5,51,0,0,766,767,3,22,11,0,767,768,5,2,0,0,768,775,
1,0,0,0,769,770,5,1,0,0,770,771,5,49,0,0,771,772,3,22,11,0,772,773,5,2,0,
0,773,775,1,0,0,0,774,754,1,0,0,0,774,759,1,0,0,0,774,764,1,0,0,0,774,769,
1,0,0,0,775,101,1,0,0,0,776,777,5,1,0,0,777,778,5,56,0,0,778,779,3,2,1,0,
779,780,3,100,50,0,780,781,5,2,0,0,781,103,1,0,0,0,782,783,5,1,0,0,783,784,
5,56,0,0,784,785,3,2,1,0,785,786,5,2,0,0,786,105,1,0,0,0,787,788,3,10,5,
0,788,107,1,0,0,0,789,790,5,1,0,0,790,792,5,43,0,0,791,793,3,24,12,0,792,
791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,3,106,53,0,795,796,5,
2,0,0,796,109,1,0,0,0,797,798,5,1,0,0,798,799,5,45,0,0,799,800,3,22,11,0,
800,801,5,2,0,0,801,111,1,0,0,0,802,813,3,108,54,0,803,813,3,90,45,0,804,
813,3,80,40,0,805,813,3,86,43,0,806,813,3,62,31,0,807,813,3,78,39,0,808,
813,3,84,42,0,809,813,3,110,55,0,810,813,3,96,48,0,811,813,3,102,51,0,812,
802,1,0,0,0,812,803,1,0,0,0,812,804,1,0,0,0,812,805,1,0,0,0,812,806,1,0,
0,0,812,807,1,0,0,0,812,808,1,0,0,0,812,809,1,0,0,0,812,810,1,0,0,0,812,
811,1,0,0,0,813,113,1,0,0,0,814,815,5,1,0,0,815,817,5,57,0,0,816,818,5,74,
0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,822,1,0,0,0,819,821,3,112,56,0,820,
819,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,825,1,0,
0,0,824,822,1,0,0,0,825,826,5,2,0,0,826,115,1,0,0,0,827,842,3,114,57,0,828,
829,5,1,0,0,829,831,5,57,0,0,830,832,5,74,0,0,831,830,1,0,0,0,831,832,1,
0,0,0,832,833,1,0,0,0,833,837,7,4,0,0,834,836,5,6,0,0,835,834,1,0,0,0,836,
839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,837,1,0,
0,0,840,842,5,2,0,0,841,827,1,0,0,0,841,828,1,0,0,0,842,117,1,0,0,0,843,
844,5,1,0,0,844,846,5,62,0,0,845,847,5,74,0,0,846,845,1,0,0,0,846,847,1,
0,0,0,847,848,1,0,0,0,848,849,3,2,1,0,849,850,3,128,64,0,850,851,5,2,0,0,
851,861,1,0,0,0,852,853,5,1,0,0,853,855,5,63,0,0,854,856,5,74,0,0,855,854,
1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,3,2,1,0,858,859,5,2,0,0,
859,861,1,0,0,0,860,843,1,0,0,0,860,852,1,0,0,0,861,119,1,0,0,0,862,863,
5,1,0,0,863,864,5,64,0,0,864,865,3,116,58,0,865,866,5,6,0,0,866,867,5,2,
0,0,867,915,1,0,0,0,868,869,5,1,0,0,869,870,5,65,0,0,870,871,3,116,58,0,
871,872,5,6,0,0,872,873,5,2,0,0,873,915,1,0,0,0,874,875,5,1,0,0,875,876,
5,66,0,0,876,877,3,116,58,0,877,878,5,6,0,0,878,879,5,2,0,0,879,915,1,0,
0,0,880,881,5,1,0,0,881,882,5,70,0,0,882,883,3,116,58,0,883,884,5,6,0,0,
884,885,5,2,0,0,885,915,1,0,0,0,886,887,5,1,0,0,887,888,5,67,0,0,888,889,
3,118,59,0,889,890,3,128,64,0,890,891,5,2,0,0,891,915,1,0,0,0,892,893,5,
1,0,0,893,894,5,68,0,0,894,895,3,118,59,0,895,896,5,2,0,0,896,915,1,0,0,
0,897,898,5,1,0,0,898,899,5,69,0,0,899,900,3,118,59,0,900,901,5,2,0,0,901,
915,1,0,0,0,902,903,5,1,0,0,903,904,5,70,0,0,904,905,3,118,59,0,905,906,
5,6,0,0,906,907,5,2,0,0,907,915,1,0,0,0,908,909,5,1,0,0,909,910,5,71,0,0,
910,911,3,118,59,0,911,912,5,6,0,0,912,913,5,2,0,0,913,915,1,0,0,0,914,862,
1,0,0,0,914,868,1,0,0,0,914,874,1,0,0,0,914,880,1,0,0,0,914,886,1,0,0,0,
914,892,1,0,0,0,914,897,1,0,0,0,914,902,1,0,0,0,914,908,1,0,0,0,915,121,
1,0,0,0,916,929,3,118,59,0,917,929,3,120,60,0,918,929,3,116,58,0,919,920,
5,1,0,0,920,921,5,61,0,0,921,923,3,2,1,0,922,924,5,74,0,0,923,922,1,0,0,
0,923,924,1,0,0,0,924,925,1,0,0,0,925,926,5,2,0,0,926,929,1,0,0,0,927,929,
3,124,62,0,928,916,1,0,0,0,928,917,1,0,0,0,928,918,1,0,0,0,928,919,1,0,0,
0,928,927,1,0,0,0,929,123,1,0,0,0,930,931,5,1,0,0,931,933,5,60,0,0,932,934,
5,74,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,938,1,0,0,0,935,937,3,122,61,
0,936,935,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,941,
1,0,0,0,940,938,1,0,0,0,941,963,5,2,0,0,942,943,5,1,0,0,943,945,5,72,0,0,
944,946,5,74,0,0,945,944,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,
5,6,0,0,948,963,5,2,0,0,949,950,5,1,0,0,950,952,5,73,0,0,951,953,5,74,0,
0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,6,0,0,955,963,
5,2,0,0,956,957,5,1,0,0,957,959,5,73,0,0,958,960,5,74,0,0,959,958,1,0,0,
0,959,960,1,0,0,0,960,961,1,0,0,0,961,963,5,2,0,0,962,930,1,0,0,0,962,942,
1,0,0,0,962,949,1,0,0,0,962,956,1,0,0,0,963,125,1,0,0,0,964,965,5,1,0,0,
965,966,5,8,0,0,966,967,3,20,10,0,967,968,5,2,0,0,968,127,1,0,0,0,969,971,
3,126,63,0,970,969,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,
0,973,129,1,0,0,0,974,972,1,0,0,0,975,977,3,122,61,0,976,975,1,0,0,0,977,
980,1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,978,1,0,
0,0,981,990,5,0,0,1,982,984,3,112,56,0,983,982,1,0,0,0,984,985,1,0,0,0,985,
983,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,5,0,0,1,988,990,1,0,
0,0,989,978,1,0,0,0,989,983,1,0,0,0,990,131,1,0,0,0,991,992,3,114,57,0,992,
993,5,0,0,1,993,1002,1,0,0,0,994,996,3,112,56,0,995,994,1,0,0,0,996,999,
1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,999,997,1,0,0,0,
1000,1002,5,0,0,1,1001,991,1,0,0,0,1001,997,1,0,0,0,1002,133,1,0,0,0,109,
148,160,167,174,179,184,190,207,221,238,241,245,248,259,263,272,278,286,
292,297,306,312,322,328,335,340,344,349,352,356,358,366,378,385,390,395,
398,401,410,416,426,432,438,447,459,461,466,470,477,483,488,495,502,512,
521,527,535,545,547,557,563,573,583,585,596,601,607,615,633,638,643,649,
657,674,678,683,697,702,710,718,726,734,739,774,792,812,817,822,831,837,
841,846,855,860,914,923,928,933,938,945,952,959,962,972,978,985,989,997,
1001];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class WatParser extends antlr4.Parser {

    static grammarFileName = "WatParser.g4";
    static literalNames = [ null, "'('", "')'", null, null, null, null, 
                            null, null, "'funcref'", "'mut'", "'nop'", "'unreachable'", 
                            "'drop'", "'block'", "'loop'", "'end'", "'br'", 
                            "'br_if'", "'br_table'", "'return'", "'if'", 
                            "'then'", "'else'", "'select'", "'call'", "'call_indirect'", 
                            "'local.get'", "'local.set'", "'local.tee'", 
                            "'global.get'", "'global.set'", null, null, 
                            null, null, null, null, null, null, null, "'memory.size'", 
                            "'memory.grow'", "'type'", "'func'", "'start'", 
                            "'param'", "'result'", "'local'", "'global'", 
                            "'table'", "'memory'", "'elem'", "'data'", "'offset'", 
                            "'import'", "'export'", "'module'", "'binary'", 
                            "'quote'", "'script'", "'register'", "'invoke'", 
                            "'get'", "'assert_malformed'", "'assert_invalid'", 
                            "'assert_unlinkable'", "'assert_return'", "'assert_return_canonical_nan'", 
                            "'assert_return_arithmetic_nan'", "'assert_trap'", 
                            "'assert_exhaustion'", "'input'", "'output'" ];
    static symbolicNames = [ null, "LPAR", "RPAR", "NAT", "INT", "FLOAT", 
                             "STRING_", "VALUE_TYPE", "CONST", "FUNCREF", 
                             "MUT", "NOP", "UNREACHABLE", "DROP", "BLOCK", 
                             "LOOP", "END", "BR", "BR_IF", "BR_TABLE", "RETURN", 
                             "IF", "THEN", "ELSE", "SELECT", "CALL", "CALL_INDIRECT", 
                             "LOCAL_GET", "LOCAL_SET", "LOCAL_TEE", "GLOBAL_GET", 
                             "GLOBAL_SET", "LOAD", "STORE", "OFFSET_EQ_NAT", 
                             "ALIGN_EQ_NAT", "UNARY", "BINARY", "TEST", 
                             "COMPARE", "CONVERT", "MEMORY_SIZE", "MEMORY_GROW", 
                             "TYPE", "FUNC", "START_", "PARAM", "RESULT", 
                             "LOCAL", "GLOBAL", "TABLE", "MEMORY", "ELEM", 
                             "DATA", "OFFSET", "IMPORT", "EXPORT", "MODULE", 
                             "BIN", "QUOTE", "SCRIPT", "REGISTER", "INVOKE", 
                             "GET", "ASSERT_MALFORMED", "ASSERT_INVALID", 
                             "ASSERT_UNLINKABLE", "ASSERT_RETURN", "ASSERT_RETURN_CANONICAL_NAN", 
                             "ASSERT_RETURN_ARITHMETIC_NAN", "ASSERT_TRAP", 
                             "ASSERT_EXHAUSTION", "INPUT", "OUTPUT", "VAR", 
                             "SPACE", "COMMENT" ];
    static ruleNames = [ "value", "name", "value_type", "elem_type", "global_type", 
                         "def_type", "func_type", "table_type", "memory_type", 
                         "type_use", "literal", "var_", "bind_var", "instr", 
                         "plain_instr", "call_instr", "call_instr_params", 
                         "call_instr_instr", "call_instr_params_instr", 
                         "call_instr_results_instr", "block_instr", "block_type", 
                         "block", "expr", "expr1", "call_expr_type", "call_expr_params", 
                         "call_expr_results", "if_block", "instr_list", 
                         "const_expr", "func_", "func_fields", "func_fields_import", 
                         "func_fields_import_result", "func_fields_body", 
                         "func_result_body", "func_body", "offset", "elem", 
                         "table", "table_fields", "data", "memory", "memory_fields", 
                         "sglobal", "global_fields", "import_desc", "simport", 
                         "inline_import", "export_desc", "export_", "inline_export", 
                         "type_", "type_def", "start_", "module_field", 
                         "module_", "script_module", "action_", "assertion", 
                         "cmd", "meta", "wconst", "const_list", "script", 
                         "module" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = WatParser.ruleNames;
        this.literalNames = WatParser.literalNames;
        this.symbolicNames = WatParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, WatParser.RULE_value);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 134;
	        _la = this._input.LA(1);
	        if(!(_la===WatParser.INT || _la===WatParser.FLOAT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, WatParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 136;
	        this.match(WatParser.STRING_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_type() {
	    let localctx = new Value_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, WatParser.RULE_value_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 138;
	        this.match(WatParser.VALUE_TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elem_type() {
	    let localctx = new Elem_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, WatParser.RULE_elem_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 140;
	        this.match(WatParser.FUNCREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_type() {
	    let localctx = new Global_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, WatParser.RULE_global_type);
	    try {
	        this.state = 148;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WatParser.VALUE_TYPE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 142;
	            this.value_type();
	            break;
	        case WatParser.LPAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 143;
	            this.match(WatParser.LPAR);
	            this.state = 144;
	            this.match(WatParser.MUT);
	            this.state = 145;
	            this.value_type();
	            this.state = 146;
	            this.match(WatParser.RPAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_type() {
	    let localctx = new Def_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, WatParser.RULE_def_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 150;
	        this.match(WatParser.LPAR);
	        this.state = 151;
	        this.match(WatParser.FUNC);
	        this.state = 152;
	        this.func_type();
	        this.state = 153;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_type() {
	    let localctx = new Func_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, WatParser.RULE_func_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 155;
	            this.match(WatParser.LPAR);
	            this.state = 174;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 156;
	                this.match(WatParser.RESULT);
	                this.state = 160;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 157;
	                    this.value_type();
	                    this.state = 162;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 163;
	                this.match(WatParser.PARAM);
	                this.state = 167;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 164;
	                    this.value_type();
	                    this.state = 169;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 3:
	                this.state = 170;
	                this.match(WatParser.PARAM);
	                this.state = 171;
	                this.bind_var();
	                this.state = 172;
	                this.value_type();
	                break;

	            }
	            this.state = 176;
	            this.match(WatParser.RPAR);
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_type() {
	    let localctx = new Table_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, WatParser.RULE_table_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 182;
	        this.match(WatParser.NAT);
	        this.state = 184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.NAT) {
	            this.state = 183;
	            this.match(WatParser.NAT);
	        }

	        this.state = 186;
	        this.elem_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memory_type() {
	    let localctx = new Memory_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, WatParser.RULE_memory_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 188;
	        this.match(WatParser.NAT);
	        this.state = 190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.NAT) {
	            this.state = 189;
	            this.match(WatParser.NAT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_use() {
	    let localctx = new Type_useContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, WatParser.RULE_type_use);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this.match(WatParser.LPAR);
	        this.state = 193;
	        this.match(WatParser.TYPE);
	        this.state = 194;
	        this.var_();
	        this.state = 195;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, WatParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 197;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WatParser.NAT) | (1 << WatParser.INT) | (1 << WatParser.FLOAT))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new Var_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, WatParser.RULE_var_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        _la = this._input.LA(1);
	        if(!(_la===WatParser.NAT || _la===WatParser.VAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_var() {
	    let localctx = new Bind_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, WatParser.RULE_bind_var);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(WatParser.VAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instr() {
	    let localctx = new InstrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, WatParser.RULE_instr);
	    try {
	        this.state = 207;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WatParser.CONST:
	        case WatParser.NOP:
	        case WatParser.UNREACHABLE:
	        case WatParser.DROP:
	        case WatParser.BR:
	        case WatParser.BR_IF:
	        case WatParser.BR_TABLE:
	        case WatParser.RETURN:
	        case WatParser.SELECT:
	        case WatParser.CALL:
	        case WatParser.LOCAL_GET:
	        case WatParser.LOCAL_SET:
	        case WatParser.LOCAL_TEE:
	        case WatParser.GLOBAL_GET:
	        case WatParser.GLOBAL_SET:
	        case WatParser.LOAD:
	        case WatParser.STORE:
	        case WatParser.UNARY:
	        case WatParser.BINARY:
	        case WatParser.TEST:
	        case WatParser.COMPARE:
	        case WatParser.CONVERT:
	        case WatParser.MEMORY_SIZE:
	        case WatParser.MEMORY_GROW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 203;
	            this.plain_instr();
	            break;
	        case WatParser.CALL_INDIRECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 204;
	            this.call_instr_instr();
	            break;
	        case WatParser.BLOCK:
	        case WatParser.LOOP:
	        case WatParser.IF:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 205;
	            this.block_instr();
	            break;
	        case WatParser.LPAR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 206;
	            this.expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plain_instr() {
	    let localctx = new Plain_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, WatParser.RULE_plain_instr);
	    var _la = 0; // Token type
	    try {
	        this.state = 259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WatParser.UNREACHABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 209;
	            this.match(WatParser.UNREACHABLE);
	            break;
	        case WatParser.NOP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.match(WatParser.NOP);
	            break;
	        case WatParser.DROP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 211;
	            this.match(WatParser.DROP);
	            break;
	        case WatParser.SELECT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 212;
	            this.match(WatParser.SELECT);
	            break;
	        case WatParser.BR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 213;
	            this.match(WatParser.BR);
	            this.state = 214;
	            this.var_();
	            break;
	        case WatParser.BR_IF:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 215;
	            this.match(WatParser.BR_IF);
	            this.state = 216;
	            this.var_();
	            break;
	        case WatParser.BR_TABLE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 217;
	            this.match(WatParser.BR_TABLE);
	            this.state = 219; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 218;
	                this.var_();
	                this.state = 221; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===WatParser.NAT || _la===WatParser.VAR);
	            break;
	        case WatParser.RETURN:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 223;
	            this.match(WatParser.RETURN);
	            break;
	        case WatParser.CALL:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 224;
	            this.match(WatParser.CALL);
	            this.state = 225;
	            this.var_();
	            break;
	        case WatParser.LOCAL_GET:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 226;
	            this.match(WatParser.LOCAL_GET);
	            this.state = 227;
	            this.var_();
	            break;
	        case WatParser.LOCAL_SET:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 228;
	            this.match(WatParser.LOCAL_SET);
	            this.state = 229;
	            this.var_();
	            break;
	        case WatParser.LOCAL_TEE:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 230;
	            this.match(WatParser.LOCAL_TEE);
	            this.state = 231;
	            this.var_();
	            break;
	        case WatParser.GLOBAL_GET:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 232;
	            this.match(WatParser.GLOBAL_GET);
	            this.state = 233;
	            this.var_();
	            break;
	        case WatParser.GLOBAL_SET:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 234;
	            this.match(WatParser.GLOBAL_SET);
	            this.state = 235;
	            this.var_();
	            break;
	        case WatParser.LOAD:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 236;
	            this.match(WatParser.LOAD);
	            this.state = 238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.OFFSET_EQ_NAT) {
	                this.state = 237;
	                this.match(WatParser.OFFSET_EQ_NAT);
	            }

	            this.state = 241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.ALIGN_EQ_NAT) {
	                this.state = 240;
	                this.match(WatParser.ALIGN_EQ_NAT);
	            }

	            break;
	        case WatParser.STORE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 243;
	            this.match(WatParser.STORE);
	            this.state = 245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.OFFSET_EQ_NAT) {
	                this.state = 244;
	                this.match(WatParser.OFFSET_EQ_NAT);
	            }

	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.ALIGN_EQ_NAT) {
	                this.state = 247;
	                this.match(WatParser.ALIGN_EQ_NAT);
	            }

	            break;
	        case WatParser.MEMORY_SIZE:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 250;
	            this.match(WatParser.MEMORY_SIZE);
	            break;
	        case WatParser.MEMORY_GROW:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 251;
	            this.match(WatParser.MEMORY_GROW);
	            break;
	        case WatParser.CONST:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 252;
	            this.match(WatParser.CONST);
	            this.state = 253;
	            this.literal();
	            break;
	        case WatParser.TEST:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 254;
	            this.match(WatParser.TEST);
	            break;
	        case WatParser.COMPARE:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 255;
	            this.match(WatParser.COMPARE);
	            break;
	        case WatParser.UNARY:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 256;
	            this.match(WatParser.UNARY);
	            break;
	        case WatParser.BINARY:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 257;
	            this.match(WatParser.BINARY);
	            break;
	        case WatParser.CONVERT:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 258;
	            this.match(WatParser.CONVERT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_instr() {
	    let localctx = new Call_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, WatParser.RULE_call_instr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(WatParser.CALL_INDIRECT);
	        this.state = 263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 262;
	            this.type_use();

	        }
	        this.state = 265;
	        this.call_instr_params();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_instr_params() {
	    let localctx = new Call_instr_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, WatParser.RULE_call_instr_params);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 267;
	                this.match(WatParser.LPAR);
	                this.state = 268;
	                this.match(WatParser.PARAM);
	                this.state = 272;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 269;
	                    this.value_type();
	                    this.state = 274;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 275;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 280;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	        this.state = 292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 281;
	            this.match(WatParser.LPAR);
	            this.state = 282;
	            this.match(WatParser.RESULT);
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.VALUE_TYPE) {
	                this.state = 283;
	                this.value_type();
	                this.state = 288;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 289;
	            this.match(WatParser.RPAR);
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_instr_instr() {
	    let localctx = new Call_instr_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, WatParser.RULE_call_instr_instr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 295;
	        this.match(WatParser.CALL_INDIRECT);
	        this.state = 297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 296;
	            this.type_use();

	        }
	        this.state = 299;
	        this.call_instr_params_instr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_instr_params_instr() {
	    let localctx = new Call_instr_params_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, WatParser.RULE_call_instr_params_instr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 301;
	                this.match(WatParser.LPAR);
	                this.state = 302;
	                this.match(WatParser.PARAM);
	                this.state = 306;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 303;
	                    this.value_type();
	                    this.state = 308;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 309;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 314;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	        this.state = 315;
	        this.call_instr_results_instr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_instr_results_instr() {
	    let localctx = new Call_instr_results_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, WatParser.RULE_call_instr_results_instr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 317;
	                this.match(WatParser.LPAR);
	                this.state = 318;
	                this.match(WatParser.RESULT);
	                this.state = 322;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 319;
	                    this.value_type();
	                    this.state = 324;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 325;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 330;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	        this.state = 331;
	        this.instr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_instr() {
	    let localctx = new Block_instrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, WatParser.RULE_block_instr);
	    var _la = 0; // Token type
	    try {
	        this.state = 358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WatParser.BLOCK:
	        case WatParser.LOOP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 333;
	            _la = this._input.LA(1);
	            if(!(_la===WatParser.BLOCK || _la===WatParser.LOOP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 334;
	                this.bind_var();
	            }

	            this.state = 337;
	            this.block();
	            this.state = 338;
	            this.match(WatParser.END);
	            this.state = 340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 339;
	                this.bind_var();
	            }

	            break;
	        case WatParser.IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 342;
	            this.match(WatParser.IF);
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 343;
	                this.bind_var();
	            }

	            this.state = 346;
	            this.block();
	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.ELSE) {
	                this.state = 347;
	                this.match(WatParser.ELSE);
	                this.state = 349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===WatParser.VAR) {
	                    this.state = 348;
	                    this.bind_var();
	                }

	                this.state = 351;
	                this.instr_list();
	            }

	            this.state = 354;
	            this.match(WatParser.END);
	            this.state = 356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 355;
	                this.bind_var();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_type() {
	    let localctx = new Block_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, WatParser.RULE_block_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(WatParser.LPAR);
	        this.state = 361;
	        this.match(WatParser.RESULT);
	        this.state = 362;
	        this.value_type();
	        this.state = 363;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, WatParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 365;
	            this.block_type();

	        }
	        this.state = 368;
	        this.instr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, WatParser.RULE_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this.match(WatParser.LPAR);
	        this.state = 371;
	        this.expr1();
	        this.state = 372;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr1() {
	    let localctx = new Expr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, WatParser.RULE_expr1);
	    var _la = 0; // Token type
	    try {
	        this.state = 398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WatParser.CONST:
	        case WatParser.NOP:
	        case WatParser.UNREACHABLE:
	        case WatParser.DROP:
	        case WatParser.BR:
	        case WatParser.BR_IF:
	        case WatParser.BR_TABLE:
	        case WatParser.RETURN:
	        case WatParser.SELECT:
	        case WatParser.CALL:
	        case WatParser.LOCAL_GET:
	        case WatParser.LOCAL_SET:
	        case WatParser.LOCAL_TEE:
	        case WatParser.GLOBAL_GET:
	        case WatParser.GLOBAL_SET:
	        case WatParser.LOAD:
	        case WatParser.STORE:
	        case WatParser.UNARY:
	        case WatParser.BINARY:
	        case WatParser.TEST:
	        case WatParser.COMPARE:
	        case WatParser.CONVERT:
	        case WatParser.MEMORY_SIZE:
	        case WatParser.MEMORY_GROW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 374;
	            this.plain_instr();
	            this.state = 378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.LPAR) {
	                this.state = 375;
	                this.expr();
	                this.state = 380;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case WatParser.CALL_INDIRECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 381;
	            this.match(WatParser.CALL_INDIRECT);
	            this.state = 382;
	            this.call_expr_type();
	            break;
	        case WatParser.BLOCK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 383;
	            this.match(WatParser.BLOCK);
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 384;
	                this.bind_var();
	            }

	            this.state = 387;
	            this.block();
	            break;
	        case WatParser.LOOP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 388;
	            this.match(WatParser.LOOP);
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 389;
	                this.bind_var();
	            }

	            this.state = 392;
	            this.block();
	            break;
	        case WatParser.IF:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 393;
	            this.match(WatParser.IF);
	            this.state = 395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 394;
	                this.bind_var();
	            }

	            this.state = 397;
	            this.if_block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_expr_type() {
	    let localctx = new Call_expr_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, WatParser.RULE_call_expr_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 400;
	            this.type_use();

	        }
	        this.state = 403;
	        this.call_expr_params();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_expr_params() {
	    let localctx = new Call_expr_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, WatParser.RULE_call_expr_params);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 405;
	                this.match(WatParser.LPAR);
	                this.state = 406;
	                this.match(WatParser.PARAM);
	                this.state = 410;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 407;
	                    this.value_type();
	                    this.state = 412;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 413;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 418;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	        }

	        this.state = 419;
	        this.call_expr_results();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_expr_results() {
	    let localctx = new Call_expr_resultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, WatParser.RULE_call_expr_results);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 421;
	                this.match(WatParser.LPAR);
	                this.state = 422;
	                this.match(WatParser.RESULT);
	                this.state = 426;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 423;
	                    this.value_type();
	                    this.state = 428;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 429;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 434;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 435;
	            this.expr();
	            this.state = 440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_block() {
	    let localctx = new If_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, WatParser.RULE_if_block);
	    var _la = 0; // Token type
	    try {
	        this.state = 461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 441;
	            this.block_type();
	            this.state = 442;
	            this.if_block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 447;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 444;
	                    this.expr(); 
	                }
	                this.state = 449;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	            }

	            this.state = 450;
	            this.match(WatParser.LPAR);
	            this.state = 451;
	            this.match(WatParser.THEN);
	            this.state = 452;
	            this.instr_list();
	            this.state = 453;
	            this.match(WatParser.RPAR);
	            this.state = 459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.LPAR) {
	                this.state = 454;
	                this.match(WatParser.LPAR);
	                this.state = 455;
	                this.match(WatParser.ELSE);
	                this.state = 456;
	                this.instr_list();
	                this.state = 457;
	                this.match(WatParser.RPAR);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instr_list() {
	    let localctx = new Instr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, WatParser.RULE_instr_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 463;
	                this.instr(); 
	            }
	            this.state = 468;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	        }

	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.CALL_INDIRECT) {
	            this.state = 469;
	            this.call_instr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_expr() {
	    let localctx = new Const_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, WatParser.RULE_const_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.instr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_() {
	    let localctx = new Func_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, WatParser.RULE_func_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.match(WatParser.LPAR);
	        this.state = 475;
	        this.match(WatParser.FUNC);
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 476;
	            this.bind_var();
	        }

	        this.state = 479;
	        this.func_fields();
	        this.state = 480;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_fields() {
	    let localctx = new Func_fieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, WatParser.RULE_func_fields);
	    try {
	        this.state = 495;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	            if(la_===1) {
	                this.state = 482;
	                this.type_use();

	            }
	            this.state = 485;
	            this.func_fields_body();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.inline_import();
	            this.state = 488;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	            if(la_===1) {
	                this.state = 487;
	                this.type_use();

	            }
	            this.state = 490;
	            this.func_fields_import();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 492;
	            this.inline_export();
	            this.state = 493;
	            this.func_fields();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_fields_import() {
	    let localctx = new Func_fields_importContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, WatParser.RULE_func_fields_import);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 497;
	            this.match(WatParser.LPAR);
	            this.state = 498;
	            this.match(WatParser.PARAM);
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.VALUE_TYPE) {
	                this.state = 499;
	                this.value_type();
	                this.state = 504;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 505;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.state = 506;
	            this.match(WatParser.LPAR);
	            this.state = 507;
	            this.match(WatParser.PARAM);
	            this.state = 508;
	            this.bind_var();
	            this.state = 509;
	            this.value_type();
	            this.state = 510;
	            this.match(WatParser.RPAR);
	            break;

	        }
	        this.state = 514;
	        this.func_fields_import_result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_fields_import_result() {
	    let localctx = new Func_fields_import_resultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, WatParser.RULE_func_fields_import_result);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 516;
	            this.match(WatParser.LPAR);
	            this.state = 517;
	            this.match(WatParser.RESULT);
	            this.state = 521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.VALUE_TYPE) {
	                this.state = 518;
	                this.value_type();
	                this.state = 523;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 524;
	            this.match(WatParser.RPAR);
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_fields_body() {
	    let localctx = new Func_fields_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, WatParser.RULE_func_fields_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 545;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 530;
	                    this.match(WatParser.LPAR);
	                    this.state = 531;
	                    this.match(WatParser.PARAM);
	                    this.state = 535;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===WatParser.VALUE_TYPE) {
	                        this.state = 532;
	                        this.value_type();
	                        this.state = 537;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 538;
	                    this.match(WatParser.RPAR);
	                    break;

	                case 2:
	                    this.state = 539;
	                    this.match(WatParser.LPAR);
	                    this.state = 540;
	                    this.match(WatParser.PARAM);
	                    this.state = 541;
	                    this.bind_var();
	                    this.state = 542;
	                    this.value_type();
	                    this.state = 543;
	                    this.match(WatParser.RPAR);
	                    break;

	                } 
	            }
	            this.state = 549;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	        this.state = 550;
	        this.func_result_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_result_body() {
	    let localctx = new Func_result_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, WatParser.RULE_func_result_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 552;
	                this.match(WatParser.LPAR);
	                this.state = 553;
	                this.match(WatParser.RESULT);
	                this.state = 557;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===WatParser.VALUE_TYPE) {
	                    this.state = 554;
	                    this.value_type();
	                    this.state = 559;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 560;
	                this.match(WatParser.RPAR); 
	            }
	            this.state = 565;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	        }

	        this.state = 566;
	        this.func_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_body() {
	    let localctx = new Func_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, WatParser.RULE_func_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 585;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 583;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 568;
	                    this.match(WatParser.LPAR);
	                    this.state = 569;
	                    this.match(WatParser.LOCAL);
	                    this.state = 573;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===WatParser.VALUE_TYPE) {
	                        this.state = 570;
	                        this.value_type();
	                        this.state = 575;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 576;
	                    this.match(WatParser.RPAR);
	                    break;

	                case 2:
	                    this.state = 577;
	                    this.match(WatParser.LPAR);
	                    this.state = 578;
	                    this.match(WatParser.LOCAL);
	                    this.state = 579;
	                    this.bind_var();
	                    this.state = 580;
	                    this.value_type();
	                    this.state = 581;
	                    this.match(WatParser.RPAR);
	                    break;

	                } 
	            }
	            this.state = 587;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	        this.state = 588;
	        this.instr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offset() {
	    let localctx = new OffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, WatParser.RULE_offset);
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 590;
	            this.match(WatParser.LPAR);
	            this.state = 591;
	            this.match(WatParser.OFFSET);
	            this.state = 592;
	            this.const_expr();
	            this.state = 593;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            this.expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elem() {
	    let localctx = new ElemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, WatParser.RULE_elem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(WatParser.LPAR);
	        this.state = 599;
	        this.match(WatParser.ELEM);
	        this.state = 601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.NAT || _la===WatParser.VAR) {
	            this.state = 600;
	            this.var_();
	        }

	        this.state = 603;
	        this.offset();
	        this.state = 607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.NAT || _la===WatParser.VAR) {
	            this.state = 604;
	            this.var_();
	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 610;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table() {
	    let localctx = new TableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, WatParser.RULE_table);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(WatParser.LPAR);
	        this.state = 613;
	        this.match(WatParser.TABLE);
	        this.state = 615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 614;
	            this.bind_var();
	        }

	        this.state = 617;
	        this.table_fields();
	        this.state = 618;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_fields() {
	    let localctx = new Table_fieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, WatParser.RULE_table_fields);
	    var _la = 0; // Token type
	    try {
	        this.state = 638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 620;
	            this.table_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 621;
	            this.inline_import();
	            this.state = 622;
	            this.table_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 624;
	            this.inline_export();
	            this.state = 625;
	            this.table_fields();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 627;
	            this.elem_type();
	            this.state = 628;
	            this.match(WatParser.LPAR);
	            this.state = 629;
	            this.match(WatParser.ELEM);
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.NAT || _la===WatParser.VAR) {
	                this.state = 630;
	                this.var_();
	                this.state = 635;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 636;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data() {
	    let localctx = new DataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, WatParser.RULE_data);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(WatParser.LPAR);
	        this.state = 641;
	        this.match(WatParser.DATA);
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.NAT || _la===WatParser.VAR) {
	            this.state = 642;
	            this.var_();
	        }

	        this.state = 645;
	        this.offset();
	        this.state = 649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.STRING_) {
	            this.state = 646;
	            this.match(WatParser.STRING_);
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 652;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memory() {
	    let localctx = new MemoryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, WatParser.RULE_memory);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.match(WatParser.LPAR);
	        this.state = 655;
	        this.match(WatParser.MEMORY);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 656;
	            this.bind_var();
	        }

	        this.state = 659;
	        this.memory_fields();
	        this.state = 660;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memory_fields() {
	    let localctx = new Memory_fieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, WatParser.RULE_memory_fields);
	    var _la = 0; // Token type
	    try {
	        this.state = 678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.memory_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.inline_import();
	            this.state = 664;
	            this.memory_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 666;
	            this.inline_export();
	            this.state = 667;
	            this.memory_fields();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 669;
	            this.match(WatParser.LPAR);
	            this.state = 670;
	            this.match(WatParser.DATA);
	            this.state = 674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.STRING_) {
	                this.state = 671;
	                this.match(WatParser.STRING_);
	                this.state = 676;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 677;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sglobal() {
	    let localctx = new SglobalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, WatParser.RULE_sglobal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(WatParser.LPAR);
	        this.state = 681;
	        this.match(WatParser.GLOBAL);
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 682;
	            this.bind_var();
	        }

	        this.state = 685;
	        this.global_fields();
	        this.state = 686;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_fields() {
	    let localctx = new Global_fieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, WatParser.RULE_global_fields);
	    try {
	        this.state = 697;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.global_type();
	            this.state = 689;
	            this.const_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 691;
	            this.inline_import();
	            this.state = 692;
	            this.global_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 694;
	            this.inline_export();
	            this.state = 695;
	            this.global_fields();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_desc() {
	    let localctx = new Import_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, WatParser.RULE_import_desc);
	    var _la = 0; // Token type
	    try {
	        this.state = 739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 699;
	            this.match(WatParser.LPAR);
	            this.state = 700;
	            this.match(WatParser.FUNC);
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 701;
	                this.bind_var();
	            }

	            this.state = 704;
	            this.type_use();
	            this.state = 705;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 707;
	            this.match(WatParser.LPAR);
	            this.state = 708;
	            this.match(WatParser.FUNC);
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 709;
	                this.bind_var();
	            }

	            this.state = 712;
	            this.func_type();
	            this.state = 713;
	            this.match(WatParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 715;
	            this.match(WatParser.LPAR);
	            this.state = 716;
	            this.match(WatParser.TABLE);
	            this.state = 718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 717;
	                this.bind_var();
	            }

	            this.state = 720;
	            this.table_type();
	            this.state = 721;
	            this.match(WatParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 723;
	            this.match(WatParser.LPAR);
	            this.state = 724;
	            this.match(WatParser.MEMORY);
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 725;
	                this.bind_var();
	            }

	            this.state = 728;
	            this.memory_type();
	            this.state = 729;
	            this.match(WatParser.RPAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 731;
	            this.match(WatParser.LPAR);
	            this.state = 732;
	            this.match(WatParser.GLOBAL);
	            this.state = 734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 733;
	                this.bind_var();
	            }

	            this.state = 736;
	            this.global_type();
	            this.state = 737;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simport() {
	    let localctx = new SimportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, WatParser.RULE_simport);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.match(WatParser.LPAR);
	        this.state = 742;
	        this.match(WatParser.IMPORT);
	        this.state = 743;
	        this.name();
	        this.state = 744;
	        this.name();
	        this.state = 745;
	        this.import_desc();
	        this.state = 746;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inline_import() {
	    let localctx = new Inline_importContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, WatParser.RULE_inline_import);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.match(WatParser.LPAR);
	        this.state = 749;
	        this.match(WatParser.IMPORT);
	        this.state = 750;
	        this.name();
	        this.state = 751;
	        this.name();
	        this.state = 752;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	export_desc() {
	    let localctx = new Export_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, WatParser.RULE_export_desc);
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 754;
	            this.match(WatParser.LPAR);
	            this.state = 755;
	            this.match(WatParser.FUNC);
	            this.state = 756;
	            this.var_();
	            this.state = 757;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 759;
	            this.match(WatParser.LPAR);
	            this.state = 760;
	            this.match(WatParser.TABLE);
	            this.state = 761;
	            this.var_();
	            this.state = 762;
	            this.match(WatParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 764;
	            this.match(WatParser.LPAR);
	            this.state = 765;
	            this.match(WatParser.MEMORY);
	            this.state = 766;
	            this.var_();
	            this.state = 767;
	            this.match(WatParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 769;
	            this.match(WatParser.LPAR);
	            this.state = 770;
	            this.match(WatParser.GLOBAL);
	            this.state = 771;
	            this.var_();
	            this.state = 772;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	export_() {
	    let localctx = new Export_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, WatParser.RULE_export_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this.match(WatParser.LPAR);
	        this.state = 777;
	        this.match(WatParser.EXPORT);
	        this.state = 778;
	        this.name();
	        this.state = 779;
	        this.export_desc();
	        this.state = 780;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inline_export() {
	    let localctx = new Inline_exportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, WatParser.RULE_inline_export);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.match(WatParser.LPAR);
	        this.state = 783;
	        this.match(WatParser.EXPORT);
	        this.state = 784;
	        this.name();
	        this.state = 785;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, WatParser.RULE_type_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this.def_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_def() {
	    let localctx = new Type_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, WatParser.RULE_type_def);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.match(WatParser.LPAR);
	        this.state = 790;
	        this.match(WatParser.TYPE);
	        this.state = 792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 791;
	            this.bind_var();
	        }

	        this.state = 794;
	        this.type_();
	        this.state = 795;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_() {
	    let localctx = new Start_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, WatParser.RULE_start_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this.match(WatParser.LPAR);
	        this.state = 798;
	        this.match(WatParser.START_);
	        this.state = 799;
	        this.var_();
	        this.state = 800;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_field() {
	    let localctx = new Module_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, WatParser.RULE_module_field);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 802;
	            this.type_def();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 803;
	            this.sglobal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 804;
	            this.table();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 805;
	            this.memory();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 806;
	            this.func_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 807;
	            this.elem();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 808;
	            this.data();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 809;
	            this.start_();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 810;
	            this.simport();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 811;
	            this.export_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_() {
	    let localctx = new Module_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, WatParser.RULE_module_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.match(WatParser.LPAR);
	        this.state = 815;
	        this.match(WatParser.MODULE);
	        this.state = 817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===WatParser.VAR) {
	            this.state = 816;
	            this.match(WatParser.VAR);
	        }

	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 819;
	            this.module_field();
	            this.state = 824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 825;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	script_module() {
	    let localctx = new Script_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, WatParser.RULE_script_module);
	    var _la = 0; // Token type
	    try {
	        this.state = 841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 827;
	            this.module_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 828;
	            this.match(WatParser.LPAR);
	            this.state = 829;
	            this.match(WatParser.MODULE);
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 830;
	                this.match(WatParser.VAR);
	            }

	            this.state = 833;
	            _la = this._input.LA(1);
	            if(!(_la===WatParser.BIN || _la===WatParser.QUOTE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.STRING_) {
	                this.state = 834;
	                this.match(WatParser.STRING_);
	                this.state = 839;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 840;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	action_() {
	    let localctx = new Action_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, WatParser.RULE_action_);
	    var _la = 0; // Token type
	    try {
	        this.state = 860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 843;
	            this.match(WatParser.LPAR);
	            this.state = 844;
	            this.match(WatParser.INVOKE);
	            this.state = 846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 845;
	                this.match(WatParser.VAR);
	            }

	            this.state = 848;
	            this.name();
	            this.state = 849;
	            this.const_list();
	            this.state = 850;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 852;
	            this.match(WatParser.LPAR);
	            this.state = 853;
	            this.match(WatParser.GET);
	            this.state = 855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 854;
	                this.match(WatParser.VAR);
	            }

	            this.state = 857;
	            this.name();
	            this.state = 858;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, WatParser.RULE_assertion);
	    try {
	        this.state = 914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 862;
	            this.match(WatParser.LPAR);
	            this.state = 863;
	            this.match(WatParser.ASSERT_MALFORMED);
	            this.state = 864;
	            this.script_module();
	            this.state = 865;
	            this.match(WatParser.STRING_);
	            this.state = 866;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.match(WatParser.LPAR);
	            this.state = 869;
	            this.match(WatParser.ASSERT_INVALID);
	            this.state = 870;
	            this.script_module();
	            this.state = 871;
	            this.match(WatParser.STRING_);
	            this.state = 872;
	            this.match(WatParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 874;
	            this.match(WatParser.LPAR);
	            this.state = 875;
	            this.match(WatParser.ASSERT_UNLINKABLE);
	            this.state = 876;
	            this.script_module();
	            this.state = 877;
	            this.match(WatParser.STRING_);
	            this.state = 878;
	            this.match(WatParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 880;
	            this.match(WatParser.LPAR);
	            this.state = 881;
	            this.match(WatParser.ASSERT_TRAP);
	            this.state = 882;
	            this.script_module();
	            this.state = 883;
	            this.match(WatParser.STRING_);
	            this.state = 884;
	            this.match(WatParser.RPAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 886;
	            this.match(WatParser.LPAR);
	            this.state = 887;
	            this.match(WatParser.ASSERT_RETURN);
	            this.state = 888;
	            this.action_();
	            this.state = 889;
	            this.const_list();
	            this.state = 890;
	            this.match(WatParser.RPAR);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 892;
	            this.match(WatParser.LPAR);
	            this.state = 893;
	            this.match(WatParser.ASSERT_RETURN_CANONICAL_NAN);
	            this.state = 894;
	            this.action_();
	            this.state = 895;
	            this.match(WatParser.RPAR);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 897;
	            this.match(WatParser.LPAR);
	            this.state = 898;
	            this.match(WatParser.ASSERT_RETURN_ARITHMETIC_NAN);
	            this.state = 899;
	            this.action_();
	            this.state = 900;
	            this.match(WatParser.RPAR);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 902;
	            this.match(WatParser.LPAR);
	            this.state = 903;
	            this.match(WatParser.ASSERT_TRAP);
	            this.state = 904;
	            this.action_();
	            this.state = 905;
	            this.match(WatParser.STRING_);
	            this.state = 906;
	            this.match(WatParser.RPAR);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 908;
	            this.match(WatParser.LPAR);
	            this.state = 909;
	            this.match(WatParser.ASSERT_EXHAUSTION);
	            this.state = 910;
	            this.action_();
	            this.state = 911;
	            this.match(WatParser.STRING_);
	            this.state = 912;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmd() {
	    let localctx = new CmdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, WatParser.RULE_cmd);
	    var _la = 0; // Token type
	    try {
	        this.state = 928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 916;
	            this.action_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 917;
	            this.assertion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 918;
	            this.script_module();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 919;
	            this.match(WatParser.LPAR);
	            this.state = 920;
	            this.match(WatParser.REGISTER);
	            this.state = 921;
	            this.name();
	            this.state = 923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 922;
	                this.match(WatParser.VAR);
	            }

	            this.state = 925;
	            this.match(WatParser.RPAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 927;
	            this.meta();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta() {
	    let localctx = new MetaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, WatParser.RULE_meta);
	    var _la = 0; // Token type
	    try {
	        this.state = 962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 930;
	            this.match(WatParser.LPAR);
	            this.state = 931;
	            this.match(WatParser.SCRIPT);
	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 932;
	                this.match(WatParser.VAR);
	            }

	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.LPAR) {
	                this.state = 935;
	                this.cmd();
	                this.state = 940;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 941;
	            this.match(WatParser.RPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 942;
	            this.match(WatParser.LPAR);
	            this.state = 943;
	            this.match(WatParser.INPUT);
	            this.state = 945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 944;
	                this.match(WatParser.VAR);
	            }

	            this.state = 947;
	            this.match(WatParser.STRING_);
	            this.state = 948;
	            this.match(WatParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 949;
	            this.match(WatParser.LPAR);
	            this.state = 950;
	            this.match(WatParser.OUTPUT);
	            this.state = 952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 951;
	                this.match(WatParser.VAR);
	            }

	            this.state = 954;
	            this.match(WatParser.STRING_);
	            this.state = 955;
	            this.match(WatParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 956;
	            this.match(WatParser.LPAR);
	            this.state = 957;
	            this.match(WatParser.OUTPUT);
	            this.state = 959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===WatParser.VAR) {
	                this.state = 958;
	                this.match(WatParser.VAR);
	            }

	            this.state = 961;
	            this.match(WatParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wconst() {
	    let localctx = new WconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, WatParser.RULE_wconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        this.match(WatParser.LPAR);
	        this.state = 965;
	        this.match(WatParser.CONST);
	        this.state = 966;
	        this.literal();
	        this.state = 967;
	        this.match(WatParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_list() {
	    let localctx = new Const_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, WatParser.RULE_const_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===WatParser.LPAR) {
	            this.state = 969;
	            this.wconst();
	            this.state = 974;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	script() {
	    let localctx = new ScriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, WatParser.RULE_script);
	    var _la = 0; // Token type
	    try {
	        this.state = 989;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.LPAR) {
	                this.state = 975;
	                this.cmd();
	                this.state = 980;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 981;
	            this.match(WatParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 983; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 982;
	                this.module_field();
	                this.state = 985; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===WatParser.LPAR);
	            this.state = 987;
	            this.match(WatParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, WatParser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.state = 1001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 991;
	            this.module_();
	            this.state = 992;
	            this.match(WatParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===WatParser.LPAR) {
	                this.state = 994;
	                this.module_field();
	                this.state = 999;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1000;
	            this.match(WatParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

WatParser.EOF = antlr4.Token.EOF;
WatParser.LPAR = 1;
WatParser.RPAR = 2;
WatParser.NAT = 3;
WatParser.INT = 4;
WatParser.FLOAT = 5;
WatParser.STRING_ = 6;
WatParser.VALUE_TYPE = 7;
WatParser.CONST = 8;
WatParser.FUNCREF = 9;
WatParser.MUT = 10;
WatParser.NOP = 11;
WatParser.UNREACHABLE = 12;
WatParser.DROP = 13;
WatParser.BLOCK = 14;
WatParser.LOOP = 15;
WatParser.END = 16;
WatParser.BR = 17;
WatParser.BR_IF = 18;
WatParser.BR_TABLE = 19;
WatParser.RETURN = 20;
WatParser.IF = 21;
WatParser.THEN = 22;
WatParser.ELSE = 23;
WatParser.SELECT = 24;
WatParser.CALL = 25;
WatParser.CALL_INDIRECT = 26;
WatParser.LOCAL_GET = 27;
WatParser.LOCAL_SET = 28;
WatParser.LOCAL_TEE = 29;
WatParser.GLOBAL_GET = 30;
WatParser.GLOBAL_SET = 31;
WatParser.LOAD = 32;
WatParser.STORE = 33;
WatParser.OFFSET_EQ_NAT = 34;
WatParser.ALIGN_EQ_NAT = 35;
WatParser.UNARY = 36;
WatParser.BINARY = 37;
WatParser.TEST = 38;
WatParser.COMPARE = 39;
WatParser.CONVERT = 40;
WatParser.MEMORY_SIZE = 41;
WatParser.MEMORY_GROW = 42;
WatParser.TYPE = 43;
WatParser.FUNC = 44;
WatParser.START_ = 45;
WatParser.PARAM = 46;
WatParser.RESULT = 47;
WatParser.LOCAL = 48;
WatParser.GLOBAL = 49;
WatParser.TABLE = 50;
WatParser.MEMORY = 51;
WatParser.ELEM = 52;
WatParser.DATA = 53;
WatParser.OFFSET = 54;
WatParser.IMPORT = 55;
WatParser.EXPORT = 56;
WatParser.MODULE = 57;
WatParser.BIN = 58;
WatParser.QUOTE = 59;
WatParser.SCRIPT = 60;
WatParser.REGISTER = 61;
WatParser.INVOKE = 62;
WatParser.GET = 63;
WatParser.ASSERT_MALFORMED = 64;
WatParser.ASSERT_INVALID = 65;
WatParser.ASSERT_UNLINKABLE = 66;
WatParser.ASSERT_RETURN = 67;
WatParser.ASSERT_RETURN_CANONICAL_NAN = 68;
WatParser.ASSERT_RETURN_ARITHMETIC_NAN = 69;
WatParser.ASSERT_TRAP = 70;
WatParser.ASSERT_EXHAUSTION = 71;
WatParser.INPUT = 72;
WatParser.OUTPUT = 73;
WatParser.VAR = 74;
WatParser.SPACE = 75;
WatParser.COMMENT = 76;

WatParser.RULE_value = 0;
WatParser.RULE_name = 1;
WatParser.RULE_value_type = 2;
WatParser.RULE_elem_type = 3;
WatParser.RULE_global_type = 4;
WatParser.RULE_def_type = 5;
WatParser.RULE_func_type = 6;
WatParser.RULE_table_type = 7;
WatParser.RULE_memory_type = 8;
WatParser.RULE_type_use = 9;
WatParser.RULE_literal = 10;
WatParser.RULE_var_ = 11;
WatParser.RULE_bind_var = 12;
WatParser.RULE_instr = 13;
WatParser.RULE_plain_instr = 14;
WatParser.RULE_call_instr = 15;
WatParser.RULE_call_instr_params = 16;
WatParser.RULE_call_instr_instr = 17;
WatParser.RULE_call_instr_params_instr = 18;
WatParser.RULE_call_instr_results_instr = 19;
WatParser.RULE_block_instr = 20;
WatParser.RULE_block_type = 21;
WatParser.RULE_block = 22;
WatParser.RULE_expr = 23;
WatParser.RULE_expr1 = 24;
WatParser.RULE_call_expr_type = 25;
WatParser.RULE_call_expr_params = 26;
WatParser.RULE_call_expr_results = 27;
WatParser.RULE_if_block = 28;
WatParser.RULE_instr_list = 29;
WatParser.RULE_const_expr = 30;
WatParser.RULE_func_ = 31;
WatParser.RULE_func_fields = 32;
WatParser.RULE_func_fields_import = 33;
WatParser.RULE_func_fields_import_result = 34;
WatParser.RULE_func_fields_body = 35;
WatParser.RULE_func_result_body = 36;
WatParser.RULE_func_body = 37;
WatParser.RULE_offset = 38;
WatParser.RULE_elem = 39;
WatParser.RULE_table = 40;
WatParser.RULE_table_fields = 41;
WatParser.RULE_data = 42;
WatParser.RULE_memory = 43;
WatParser.RULE_memory_fields = 44;
WatParser.RULE_sglobal = 45;
WatParser.RULE_global_fields = 46;
WatParser.RULE_import_desc = 47;
WatParser.RULE_simport = 48;
WatParser.RULE_inline_import = 49;
WatParser.RULE_export_desc = 50;
WatParser.RULE_export_ = 51;
WatParser.RULE_inline_export = 52;
WatParser.RULE_type_ = 53;
WatParser.RULE_type_def = 54;
WatParser.RULE_start_ = 55;
WatParser.RULE_module_field = 56;
WatParser.RULE_module_ = 57;
WatParser.RULE_script_module = 58;
WatParser.RULE_action_ = 59;
WatParser.RULE_assertion = 60;
WatParser.RULE_cmd = 61;
WatParser.RULE_meta = 62;
WatParser.RULE_wconst = 63;
WatParser.RULE_const_list = 64;
WatParser.RULE_script = 65;
WatParser.RULE_module = 66;

class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_value;
    }

	INT() {
	    return this.getToken(WatParser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(WatParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitValue(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_name;
    }

	STRING_() {
	    return this.getToken(WatParser.STRING_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitName(this);
		}
	}


}



class Value_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_value_type;
    }

	VALUE_TYPE() {
	    return this.getToken(WatParser.VALUE_TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterValue_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitValue_type(this);
		}
	}


}



class Elem_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_elem_type;
    }

	FUNCREF() {
	    return this.getToken(WatParser.FUNCREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterElem_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitElem_type(this);
		}
	}


}



class Global_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_global_type;
    }

	value_type() {
	    return this.getTypedRuleContext(Value_typeContext,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	MUT() {
	    return this.getToken(WatParser.MUT, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterGlobal_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitGlobal_type(this);
		}
	}


}



class Def_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_def_type;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	FUNC() {
	    return this.getToken(WatParser.FUNC, 0);
	};

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterDef_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitDef_type(this);
		}
	}


}



class Func_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_type;
    }

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	PARAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.PARAM);
	    } else {
	        return this.getToken(WatParser.PARAM, i);
	    }
	};


	bind_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_varContext);
	    } else {
	        return this.getTypedRuleContext(Bind_varContext,i);
	    }
	};

	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_type(this);
		}
	}


}



class Table_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_table_type;
    }

	NAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.NAT);
	    } else {
	        return this.getToken(WatParser.NAT, i);
	    }
	};


	elem_type() {
	    return this.getTypedRuleContext(Elem_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterTable_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitTable_type(this);
		}
	}


}



class Memory_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_memory_type;
    }

	NAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.NAT);
	    } else {
	        return this.getToken(WatParser.NAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterMemory_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitMemory_type(this);
		}
	}


}



class Type_useContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_type_use;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	TYPE() {
	    return this.getToken(WatParser.TYPE, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterType_use(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitType_use(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_literal;
    }

	NAT() {
	    return this.getToken(WatParser.NAT, 0);
	};

	INT() {
	    return this.getToken(WatParser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(WatParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Var_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_var_;
    }

	NAT() {
	    return this.getToken(WatParser.NAT, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterVar_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitVar_(this);
		}
	}


}



class Bind_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_bind_var;
    }

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterBind_var(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitBind_var(this);
		}
	}


}



class InstrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_instr;
    }

	plain_instr() {
	    return this.getTypedRuleContext(Plain_instrContext,0);
	};

	call_instr_instr() {
	    return this.getTypedRuleContext(Call_instr_instrContext,0);
	};

	block_instr() {
	    return this.getTypedRuleContext(Block_instrContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterInstr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitInstr(this);
		}
	}


}



class Plain_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_plain_instr;
    }

	UNREACHABLE() {
	    return this.getToken(WatParser.UNREACHABLE, 0);
	};

	NOP() {
	    return this.getToken(WatParser.NOP, 0);
	};

	DROP() {
	    return this.getToken(WatParser.DROP, 0);
	};

	SELECT() {
	    return this.getToken(WatParser.SELECT, 0);
	};

	BR() {
	    return this.getToken(WatParser.BR, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_Context);
	    } else {
	        return this.getTypedRuleContext(Var_Context,i);
	    }
	};

	BR_IF() {
	    return this.getToken(WatParser.BR_IF, 0);
	};

	BR_TABLE() {
	    return this.getToken(WatParser.BR_TABLE, 0);
	};

	RETURN() {
	    return this.getToken(WatParser.RETURN, 0);
	};

	CALL() {
	    return this.getToken(WatParser.CALL, 0);
	};

	LOCAL_GET() {
	    return this.getToken(WatParser.LOCAL_GET, 0);
	};

	LOCAL_SET() {
	    return this.getToken(WatParser.LOCAL_SET, 0);
	};

	LOCAL_TEE() {
	    return this.getToken(WatParser.LOCAL_TEE, 0);
	};

	GLOBAL_GET() {
	    return this.getToken(WatParser.GLOBAL_GET, 0);
	};

	GLOBAL_SET() {
	    return this.getToken(WatParser.GLOBAL_SET, 0);
	};

	LOAD() {
	    return this.getToken(WatParser.LOAD, 0);
	};

	OFFSET_EQ_NAT() {
	    return this.getToken(WatParser.OFFSET_EQ_NAT, 0);
	};

	ALIGN_EQ_NAT() {
	    return this.getToken(WatParser.ALIGN_EQ_NAT, 0);
	};

	STORE() {
	    return this.getToken(WatParser.STORE, 0);
	};

	MEMORY_SIZE() {
	    return this.getToken(WatParser.MEMORY_SIZE, 0);
	};

	MEMORY_GROW() {
	    return this.getToken(WatParser.MEMORY_GROW, 0);
	};

	CONST() {
	    return this.getToken(WatParser.CONST, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	TEST() {
	    return this.getToken(WatParser.TEST, 0);
	};

	COMPARE() {
	    return this.getToken(WatParser.COMPARE, 0);
	};

	UNARY() {
	    return this.getToken(WatParser.UNARY, 0);
	};

	BINARY() {
	    return this.getToken(WatParser.BINARY, 0);
	};

	CONVERT() {
	    return this.getToken(WatParser.CONVERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterPlain_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitPlain_instr(this);
		}
	}


}



class Call_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_instr;
    }

	CALL_INDIRECT() {
	    return this.getToken(WatParser.CALL_INDIRECT, 0);
	};

	call_instr_params() {
	    return this.getTypedRuleContext(Call_instr_paramsContext,0);
	};

	type_use() {
	    return this.getTypedRuleContext(Type_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_instr(this);
		}
	}


}



class Call_instr_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_instr_params;
    }

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	PARAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.PARAM);
	    } else {
	        return this.getToken(WatParser.PARAM, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_instr_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_instr_params(this);
		}
	}


}



class Call_instr_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_instr_instr;
    }

	CALL_INDIRECT() {
	    return this.getToken(WatParser.CALL_INDIRECT, 0);
	};

	call_instr_params_instr() {
	    return this.getTypedRuleContext(Call_instr_params_instrContext,0);
	};

	type_use() {
	    return this.getTypedRuleContext(Type_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_instr_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_instr_instr(this);
		}
	}


}



class Call_instr_params_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_instr_params_instr;
    }

	call_instr_results_instr() {
	    return this.getTypedRuleContext(Call_instr_results_instrContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	PARAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.PARAM);
	    } else {
	        return this.getToken(WatParser.PARAM, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_instr_params_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_instr_params_instr(this);
		}
	}


}



class Call_instr_results_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_instr_results_instr;
    }

	instr() {
	    return this.getTypedRuleContext(InstrContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_instr_results_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_instr_results_instr(this);
		}
	}


}



class Block_instrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_block_instr;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	END() {
	    return this.getToken(WatParser.END, 0);
	};

	BLOCK() {
	    return this.getToken(WatParser.BLOCK, 0);
	};

	LOOP() {
	    return this.getToken(WatParser.LOOP, 0);
	};

	bind_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_varContext);
	    } else {
	        return this.getTypedRuleContext(Bind_varContext,i);
	    }
	};

	IF() {
	    return this.getToken(WatParser.IF, 0);
	};

	ELSE() {
	    return this.getToken(WatParser.ELSE, 0);
	};

	instr_list() {
	    return this.getTypedRuleContext(Instr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterBlock_instr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitBlock_instr(this);
		}
	}


}



class Block_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_block_type;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	RESULT() {
	    return this.getToken(WatParser.RESULT, 0);
	};

	value_type() {
	    return this.getTypedRuleContext(Value_typeContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterBlock_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitBlock_type(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_block;
    }

	instr_list() {
	    return this.getTypedRuleContext(Instr_listContext,0);
	};

	block_type() {
	    return this.getTypedRuleContext(Block_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitBlock(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_expr;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Expr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_expr1;
    }

	plain_instr() {
	    return this.getTypedRuleContext(Plain_instrContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CALL_INDIRECT() {
	    return this.getToken(WatParser.CALL_INDIRECT, 0);
	};

	call_expr_type() {
	    return this.getTypedRuleContext(Call_expr_typeContext,0);
	};

	BLOCK() {
	    return this.getToken(WatParser.BLOCK, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	LOOP() {
	    return this.getToken(WatParser.LOOP, 0);
	};

	IF() {
	    return this.getToken(WatParser.IF, 0);
	};

	if_block() {
	    return this.getTypedRuleContext(If_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitExpr1(this);
		}
	}


}



class Call_expr_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_expr_type;
    }

	call_expr_params() {
	    return this.getTypedRuleContext(Call_expr_paramsContext,0);
	};

	type_use() {
	    return this.getTypedRuleContext(Type_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_expr_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_expr_type(this);
		}
	}


}



class Call_expr_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_expr_params;
    }

	call_expr_results() {
	    return this.getTypedRuleContext(Call_expr_resultsContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	PARAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.PARAM);
	    } else {
	        return this.getToken(WatParser.PARAM, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_expr_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_expr_params(this);
		}
	}


}



class Call_expr_resultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_call_expr_results;
    }

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCall_expr_results(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCall_expr_results(this);
		}
	}


}



class If_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_if_block;
    }

	block_type() {
	    return this.getTypedRuleContext(Block_typeContext,0);
	};

	if_block() {
	    return this.getTypedRuleContext(If_blockContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	THEN() {
	    return this.getToken(WatParser.THEN, 0);
	};

	instr_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Instr_listContext);
	    } else {
	        return this.getTypedRuleContext(Instr_listContext,i);
	    }
	};

	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(WatParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterIf_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitIf_block(this);
		}
	}


}



class Instr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_instr_list;
    }

	instr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InstrContext);
	    } else {
	        return this.getTypedRuleContext(InstrContext,i);
	    }
	};

	call_instr() {
	    return this.getTypedRuleContext(Call_instrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterInstr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitInstr_list(this);
		}
	}


}



class Const_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_const_expr;
    }

	instr_list() {
	    return this.getTypedRuleContext(Instr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterConst_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitConst_expr(this);
		}
	}


}



class Func_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	FUNC() {
	    return this.getToken(WatParser.FUNC, 0);
	};

	func_fields() {
	    return this.getTypedRuleContext(Func_fieldsContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_(this);
		}
	}


}



class Func_fieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_fields;
    }

	func_fields_body() {
	    return this.getTypedRuleContext(Func_fields_bodyContext,0);
	};

	type_use() {
	    return this.getTypedRuleContext(Type_useContext,0);
	};

	inline_import() {
	    return this.getTypedRuleContext(Inline_importContext,0);
	};

	func_fields_import() {
	    return this.getTypedRuleContext(Func_fields_importContext,0);
	};

	inline_export() {
	    return this.getTypedRuleContext(Inline_exportContext,0);
	};

	func_fields() {
	    return this.getTypedRuleContext(Func_fieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_fields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_fields(this);
		}
	}


}



class Func_fields_importContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_fields_import;
    }

	func_fields_import_result() {
	    return this.getTypedRuleContext(Func_fields_import_resultContext,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	PARAM() {
	    return this.getToken(WatParser.PARAM, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_fields_import(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_fields_import(this);
		}
	}


}



class Func_fields_import_resultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_fields_import_result;
    }

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_fields_import_result(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_fields_import_result(this);
		}
	}


}



class Func_fields_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_fields_body;
    }

	func_result_body() {
	    return this.getTypedRuleContext(Func_result_bodyContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	PARAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.PARAM);
	    } else {
	        return this.getToken(WatParser.PARAM, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	bind_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_varContext);
	    } else {
	        return this.getTypedRuleContext(Bind_varContext,i);
	    }
	};

	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_fields_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_fields_body(this);
		}
	}


}



class Func_result_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_result_body;
    }

	func_body() {
	    return this.getTypedRuleContext(Func_bodyContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	RESULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RESULT);
	    } else {
	        return this.getToken(WatParser.RESULT, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_result_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_result_body(this);
		}
	}


}



class Func_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_func_body;
    }

	instr_list() {
	    return this.getTypedRuleContext(Instr_listContext,0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LPAR);
	    } else {
	        return this.getToken(WatParser.LPAR, i);
	    }
	};


	LOCAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.LOCAL);
	    } else {
	        return this.getToken(WatParser.LOCAL, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.RPAR);
	    } else {
	        return this.getToken(WatParser.RPAR, i);
	    }
	};


	bind_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_varContext);
	    } else {
	        return this.getTypedRuleContext(Bind_varContext,i);
	    }
	};

	value_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_typeContext);
	    } else {
	        return this.getTypedRuleContext(Value_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterFunc_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitFunc_body(this);
		}
	}


}



class OffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_offset;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	OFFSET() {
	    return this.getToken(WatParser.OFFSET, 0);
	};

	const_expr() {
	    return this.getTypedRuleContext(Const_exprContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitOffset(this);
		}
	}


}



class ElemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_elem;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	ELEM() {
	    return this.getToken(WatParser.ELEM, 0);
	};

	offset() {
	    return this.getTypedRuleContext(OffsetContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_Context);
	    } else {
	        return this.getTypedRuleContext(Var_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterElem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitElem(this);
		}
	}


}



class TableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_table;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	TABLE() {
	    return this.getToken(WatParser.TABLE, 0);
	};

	table_fields() {
	    return this.getTypedRuleContext(Table_fieldsContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitTable(this);
		}
	}


}



class Table_fieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_table_fields;
    }

	table_type() {
	    return this.getTypedRuleContext(Table_typeContext,0);
	};

	inline_import() {
	    return this.getTypedRuleContext(Inline_importContext,0);
	};

	inline_export() {
	    return this.getTypedRuleContext(Inline_exportContext,0);
	};

	table_fields() {
	    return this.getTypedRuleContext(Table_fieldsContext,0);
	};

	elem_type() {
	    return this.getTypedRuleContext(Elem_typeContext,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	ELEM() {
	    return this.getToken(WatParser.ELEM, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_Context);
	    } else {
	        return this.getTypedRuleContext(Var_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterTable_fields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitTable_fields(this);
		}
	}


}



class DataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_data;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	DATA() {
	    return this.getToken(WatParser.DATA, 0);
	};

	offset() {
	    return this.getTypedRuleContext(OffsetContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	STRING_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.STRING_);
	    } else {
	        return this.getToken(WatParser.STRING_, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitData(this);
		}
	}


}



class MemoryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_memory;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	MEMORY() {
	    return this.getToken(WatParser.MEMORY, 0);
	};

	memory_fields() {
	    return this.getTypedRuleContext(Memory_fieldsContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterMemory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitMemory(this);
		}
	}


}



class Memory_fieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_memory_fields;
    }

	memory_type() {
	    return this.getTypedRuleContext(Memory_typeContext,0);
	};

	inline_import() {
	    return this.getTypedRuleContext(Inline_importContext,0);
	};

	inline_export() {
	    return this.getTypedRuleContext(Inline_exportContext,0);
	};

	memory_fields() {
	    return this.getTypedRuleContext(Memory_fieldsContext,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	DATA() {
	    return this.getToken(WatParser.DATA, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	STRING_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.STRING_);
	    } else {
	        return this.getToken(WatParser.STRING_, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterMemory_fields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitMemory_fields(this);
		}
	}


}



class SglobalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_sglobal;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	GLOBAL() {
	    return this.getToken(WatParser.GLOBAL, 0);
	};

	global_fields() {
	    return this.getTypedRuleContext(Global_fieldsContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterSglobal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitSglobal(this);
		}
	}


}



class Global_fieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_global_fields;
    }

	global_type() {
	    return this.getTypedRuleContext(Global_typeContext,0);
	};

	const_expr() {
	    return this.getTypedRuleContext(Const_exprContext,0);
	};

	inline_import() {
	    return this.getTypedRuleContext(Inline_importContext,0);
	};

	inline_export() {
	    return this.getTypedRuleContext(Inline_exportContext,0);
	};

	global_fields() {
	    return this.getTypedRuleContext(Global_fieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterGlobal_fields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitGlobal_fields(this);
		}
	}


}



class Import_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_import_desc;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	FUNC() {
	    return this.getToken(WatParser.FUNC, 0);
	};

	type_use() {
	    return this.getTypedRuleContext(Type_useContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	func_type() {
	    return this.getTypedRuleContext(Func_typeContext,0);
	};

	TABLE() {
	    return this.getToken(WatParser.TABLE, 0);
	};

	table_type() {
	    return this.getTypedRuleContext(Table_typeContext,0);
	};

	MEMORY() {
	    return this.getToken(WatParser.MEMORY, 0);
	};

	memory_type() {
	    return this.getTypedRuleContext(Memory_typeContext,0);
	};

	GLOBAL() {
	    return this.getToken(WatParser.GLOBAL, 0);
	};

	global_type() {
	    return this.getTypedRuleContext(Global_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterImport_desc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitImport_desc(this);
		}
	}


}



class SimportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_simport;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	IMPORT() {
	    return this.getToken(WatParser.IMPORT, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	import_desc() {
	    return this.getTypedRuleContext(Import_descContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterSimport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitSimport(this);
		}
	}


}



class Inline_importContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_inline_import;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	IMPORT() {
	    return this.getToken(WatParser.IMPORT, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterInline_import(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitInline_import(this);
		}
	}


}



class Export_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_export_desc;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	FUNC() {
	    return this.getToken(WatParser.FUNC, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	TABLE() {
	    return this.getToken(WatParser.TABLE, 0);
	};

	MEMORY() {
	    return this.getToken(WatParser.MEMORY, 0);
	};

	GLOBAL() {
	    return this.getToken(WatParser.GLOBAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterExport_desc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitExport_desc(this);
		}
	}


}



class Export_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_export_;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	EXPORT() {
	    return this.getToken(WatParser.EXPORT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	export_desc() {
	    return this.getTypedRuleContext(Export_descContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterExport_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitExport_(this);
		}
	}


}



class Inline_exportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_inline_export;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	EXPORT() {
	    return this.getToken(WatParser.EXPORT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterInline_export(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitInline_export(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_type_;
    }

	def_type() {
	    return this.getTypedRuleContext(Def_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitType_(this);
		}
	}


}



class Type_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_type_def;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	TYPE() {
	    return this.getToken(WatParser.TYPE, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	bind_var() {
	    return this.getTypedRuleContext(Bind_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterType_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitType_def(this);
		}
	}


}



class Start_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_start_;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	START_() {
	    return this.getToken(WatParser.START_, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterStart_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitStart_(this);
		}
	}


}



class Module_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_module_field;
    }

	type_def() {
	    return this.getTypedRuleContext(Type_defContext,0);
	};

	sglobal() {
	    return this.getTypedRuleContext(SglobalContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	memory() {
	    return this.getTypedRuleContext(MemoryContext,0);
	};

	func_() {
	    return this.getTypedRuleContext(Func_Context,0);
	};

	elem() {
	    return this.getTypedRuleContext(ElemContext,0);
	};

	data() {
	    return this.getTypedRuleContext(DataContext,0);
	};

	start_() {
	    return this.getTypedRuleContext(Start_Context,0);
	};

	simport() {
	    return this.getTypedRuleContext(SimportContext,0);
	};

	export_() {
	    return this.getTypedRuleContext(Export_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterModule_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitModule_field(this);
		}
	}


}



class Module_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_module_;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	MODULE() {
	    return this.getToken(WatParser.MODULE, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	module_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Module_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterModule_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitModule_(this);
		}
	}


}



class Script_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_script_module;
    }

	module_() {
	    return this.getTypedRuleContext(Module_Context,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	MODULE() {
	    return this.getToken(WatParser.MODULE, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	BIN() {
	    return this.getToken(WatParser.BIN, 0);
	};

	QUOTE() {
	    return this.getToken(WatParser.QUOTE, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	STRING_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WatParser.STRING_);
	    } else {
	        return this.getToken(WatParser.STRING_, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterScript_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitScript_module(this);
		}
	}


}



class Action_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_action_;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	INVOKE() {
	    return this.getToken(WatParser.INVOKE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	const_list() {
	    return this.getTypedRuleContext(Const_listContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	GET() {
	    return this.getToken(WatParser.GET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterAction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitAction_(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_assertion;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	ASSERT_MALFORMED() {
	    return this.getToken(WatParser.ASSERT_MALFORMED, 0);
	};

	script_module() {
	    return this.getTypedRuleContext(Script_moduleContext,0);
	};

	STRING_() {
	    return this.getToken(WatParser.STRING_, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	ASSERT_INVALID() {
	    return this.getToken(WatParser.ASSERT_INVALID, 0);
	};

	ASSERT_UNLINKABLE() {
	    return this.getToken(WatParser.ASSERT_UNLINKABLE, 0);
	};

	ASSERT_TRAP() {
	    return this.getToken(WatParser.ASSERT_TRAP, 0);
	};

	ASSERT_RETURN() {
	    return this.getToken(WatParser.ASSERT_RETURN, 0);
	};

	action_() {
	    return this.getTypedRuleContext(Action_Context,0);
	};

	const_list() {
	    return this.getTypedRuleContext(Const_listContext,0);
	};

	ASSERT_RETURN_CANONICAL_NAN() {
	    return this.getToken(WatParser.ASSERT_RETURN_CANONICAL_NAN, 0);
	};

	ASSERT_RETURN_ARITHMETIC_NAN() {
	    return this.getToken(WatParser.ASSERT_RETURN_ARITHMETIC_NAN, 0);
	};

	ASSERT_EXHAUSTION() {
	    return this.getToken(WatParser.ASSERT_EXHAUSTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitAssertion(this);
		}
	}


}



class CmdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_cmd;
    }

	action_() {
	    return this.getTypedRuleContext(Action_Context,0);
	};

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	script_module() {
	    return this.getTypedRuleContext(Script_moduleContext,0);
	};

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	REGISTER() {
	    return this.getToken(WatParser.REGISTER, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	meta() {
	    return this.getTypedRuleContext(MetaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterCmd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitCmd(this);
		}
	}


}



class MetaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_meta;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	SCRIPT() {
	    return this.getToken(WatParser.SCRIPT, 0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	VAR() {
	    return this.getToken(WatParser.VAR, 0);
	};

	cmd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CmdContext);
	    } else {
	        return this.getTypedRuleContext(CmdContext,i);
	    }
	};

	INPUT() {
	    return this.getToken(WatParser.INPUT, 0);
	};

	STRING_() {
	    return this.getToken(WatParser.STRING_, 0);
	};

	OUTPUT() {
	    return this.getToken(WatParser.OUTPUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterMeta(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitMeta(this);
		}
	}


}



class WconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_wconst;
    }

	LPAR() {
	    return this.getToken(WatParser.LPAR, 0);
	};

	CONST() {
	    return this.getToken(WatParser.CONST, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	RPAR() {
	    return this.getToken(WatParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterWconst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitWconst(this);
		}
	}


}



class Const_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_const_list;
    }

	wconst = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WconstContext);
	    } else {
	        return this.getTypedRuleContext(WconstContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterConst_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitConst_list(this);
		}
	}


}



class ScriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_script;
    }

	EOF() {
	    return this.getToken(WatParser.EOF, 0);
	};

	cmd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CmdContext);
	    } else {
	        return this.getTypedRuleContext(CmdContext,i);
	    }
	};

	module_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Module_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterScript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitScript(this);
		}
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WatParser.RULE_module;
    }

	module_() {
	    return this.getTypedRuleContext(Module_Context,0);
	};

	EOF() {
	    return this.getToken(WatParser.EOF, 0);
	};

	module_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Module_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WatParserListener ) {
	        listener.exitModule(this);
		}
	}


}




WatParser.ValueContext = ValueContext; 
WatParser.NameContext = NameContext; 
WatParser.Value_typeContext = Value_typeContext; 
WatParser.Elem_typeContext = Elem_typeContext; 
WatParser.Global_typeContext = Global_typeContext; 
WatParser.Def_typeContext = Def_typeContext; 
WatParser.Func_typeContext = Func_typeContext; 
WatParser.Table_typeContext = Table_typeContext; 
WatParser.Memory_typeContext = Memory_typeContext; 
WatParser.Type_useContext = Type_useContext; 
WatParser.LiteralContext = LiteralContext; 
WatParser.Var_Context = Var_Context; 
WatParser.Bind_varContext = Bind_varContext; 
WatParser.InstrContext = InstrContext; 
WatParser.Plain_instrContext = Plain_instrContext; 
WatParser.Call_instrContext = Call_instrContext; 
WatParser.Call_instr_paramsContext = Call_instr_paramsContext; 
WatParser.Call_instr_instrContext = Call_instr_instrContext; 
WatParser.Call_instr_params_instrContext = Call_instr_params_instrContext; 
WatParser.Call_instr_results_instrContext = Call_instr_results_instrContext; 
WatParser.Block_instrContext = Block_instrContext; 
WatParser.Block_typeContext = Block_typeContext; 
WatParser.BlockContext = BlockContext; 
WatParser.ExprContext = ExprContext; 
WatParser.Expr1Context = Expr1Context; 
WatParser.Call_expr_typeContext = Call_expr_typeContext; 
WatParser.Call_expr_paramsContext = Call_expr_paramsContext; 
WatParser.Call_expr_resultsContext = Call_expr_resultsContext; 
WatParser.If_blockContext = If_blockContext; 
WatParser.Instr_listContext = Instr_listContext; 
WatParser.Const_exprContext = Const_exprContext; 
WatParser.Func_Context = Func_Context; 
WatParser.Func_fieldsContext = Func_fieldsContext; 
WatParser.Func_fields_importContext = Func_fields_importContext; 
WatParser.Func_fields_import_resultContext = Func_fields_import_resultContext; 
WatParser.Func_fields_bodyContext = Func_fields_bodyContext; 
WatParser.Func_result_bodyContext = Func_result_bodyContext; 
WatParser.Func_bodyContext = Func_bodyContext; 
WatParser.OffsetContext = OffsetContext; 
WatParser.ElemContext = ElemContext; 
WatParser.TableContext = TableContext; 
WatParser.Table_fieldsContext = Table_fieldsContext; 
WatParser.DataContext = DataContext; 
WatParser.MemoryContext = MemoryContext; 
WatParser.Memory_fieldsContext = Memory_fieldsContext; 
WatParser.SglobalContext = SglobalContext; 
WatParser.Global_fieldsContext = Global_fieldsContext; 
WatParser.Import_descContext = Import_descContext; 
WatParser.SimportContext = SimportContext; 
WatParser.Inline_importContext = Inline_importContext; 
WatParser.Export_descContext = Export_descContext; 
WatParser.Export_Context = Export_Context; 
WatParser.Inline_exportContext = Inline_exportContext; 
WatParser.Type_Context = Type_Context; 
WatParser.Type_defContext = Type_defContext; 
WatParser.Start_Context = Start_Context; 
WatParser.Module_fieldContext = Module_fieldContext; 
WatParser.Module_Context = Module_Context; 
WatParser.Script_moduleContext = Script_moduleContext; 
WatParser.Action_Context = Action_Context; 
WatParser.AssertionContext = AssertionContext; 
WatParser.CmdContext = CmdContext; 
WatParser.MetaContext = MetaContext; 
WatParser.WconstContext = WconstContext; 
WatParser.Const_listContext = Const_listContext; 
WatParser.ScriptContext = ScriptContext; 
WatParser.ModuleContext = ModuleContext; 
