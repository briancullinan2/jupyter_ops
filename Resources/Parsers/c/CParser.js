// Generated from ./c/C.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CListener from './CListener.js';
const serializedATN = [4,1,118,1096,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,1,0,1,0,1,0,4,0,178,8,0,11,0,12,0,179,1,0,1,0,1,0,1,0,1,0,
1,0,3,0,188,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,3,0,208,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,
220,8,2,10,2,12,2,223,9,2,1,3,1,3,3,3,227,8,3,1,3,1,3,1,3,1,4,1,4,3,4,234,
8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,242,8,4,1,4,1,4,3,4,246,8,4,1,4,1,4,1,4,
1,4,1,4,1,4,3,4,254,8,4,1,4,1,4,1,4,1,4,5,4,260,8,4,10,4,12,4,263,9,4,1,
5,1,5,1,5,5,5,268,8,5,10,5,12,5,271,9,5,1,6,5,6,274,8,6,10,6,12,6,277,9,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,290,8,6,1,7,1,7,1,8,3,
8,295,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,304,8,8,1,9,1,9,1,9,5,9,309,8,
9,10,9,12,9,312,9,9,1,10,1,10,1,10,5,10,317,8,10,10,10,12,10,320,9,10,1,
11,1,11,1,11,5,11,325,8,11,10,11,12,11,328,9,11,1,12,1,12,1,12,5,12,333,
8,12,10,12,12,12,336,9,12,1,13,1,13,1,13,5,13,341,8,13,10,13,12,13,344,9,
13,1,14,1,14,1,14,5,14,349,8,14,10,14,12,14,352,9,14,1,15,1,15,1,15,5,15,
357,8,15,10,15,12,15,360,9,15,1,16,1,16,1,16,5,16,365,8,16,10,16,12,16,368,
9,16,1,17,1,17,1,17,5,17,373,8,17,10,17,12,17,376,9,17,1,18,1,18,1,18,5,
18,381,8,18,10,18,12,18,384,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,392,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,400,8,20,1,21,1,21,1,22,1,22,1,22,
5,22,407,8,22,10,22,12,22,410,9,22,1,23,1,23,1,24,1,24,3,24,416,8,24,1,24,
1,24,1,24,3,24,421,8,24,1,25,4,25,424,8,25,11,25,12,25,425,1,26,4,26,429,
8,26,11,26,12,26,430,1,27,1,27,1,27,1,27,1,27,3,27,438,8,27,1,28,1,28,1,
28,5,28,443,8,28,10,28,12,28,446,9,28,1,29,1,29,1,29,3,29,451,8,29,1,30,
1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
31,1,31,3,31,470,8,31,1,31,1,31,5,31,474,8,31,10,31,12,31,477,9,31,1,32,
1,32,3,32,481,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,490,8,32,1,33,
1,33,1,34,4,34,495,8,34,11,34,12,34,496,1,35,1,35,3,35,501,8,35,1,35,1,35,
1,35,3,35,506,8,35,1,36,1,36,3,36,510,8,36,1,36,3,36,513,8,36,1,37,1,37,
1,37,5,37,518,8,37,10,37,12,37,521,9,37,1,38,1,38,3,38,525,8,38,1,38,1,38,
3,38,529,8,38,1,39,1,39,3,39,533,8,39,1,39,1,39,1,39,3,39,538,8,39,1,39,
1,39,1,39,1,39,3,39,544,8,39,1,40,1,40,1,40,5,40,549,8,40,10,40,12,40,552,
9,40,1,41,1,41,1,41,3,41,557,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,
1,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,574,8,45,1,46,1,46,1,46,1,46,3,46,
580,8,46,1,46,1,46,1,47,3,47,585,8,47,1,47,1,47,5,47,589,8,47,10,47,12,47,
592,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,605,
8,48,1,48,1,48,1,48,1,48,3,48,611,8,48,1,48,1,48,1,48,3,48,616,8,48,1,48,
3,48,619,8,48,1,48,1,48,1,48,1,48,1,48,3,48,626,8,48,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,641,8,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,653,8,48,1,48,5,48,656,8,48,10,48,
12,48,659,9,48,1,49,1,49,1,49,4,49,664,8,49,11,49,12,49,665,1,49,1,49,3,
49,670,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,3,51,680,8,51,1,51,1,
51,3,51,684,8,51,5,51,686,8,51,10,51,12,51,689,9,51,1,52,1,52,1,52,3,52,
694,8,52,1,52,3,52,697,8,52,1,53,1,53,1,53,1,53,1,53,5,53,704,8,53,10,53,
12,53,707,9,53,1,54,1,54,3,54,711,8,54,4,54,713,8,54,11,54,12,54,714,1,55,
4,55,718,8,55,11,55,12,55,719,1,56,1,56,1,56,3,56,725,8,56,1,57,1,57,1,57,
5,57,730,8,57,10,57,12,57,733,9,57,1,58,1,58,1,58,1,58,1,58,3,58,740,8,58,
3,58,742,8,58,1,59,1,59,1,59,5,59,747,8,59,10,59,12,59,750,9,59,1,60,1,60,
3,60,754,8,60,1,61,1,61,3,61,758,8,61,1,61,1,61,5,61,762,8,61,10,61,12,61,
765,9,61,3,61,767,8,61,1,62,1,62,1,62,1,62,1,62,5,62,774,8,62,10,62,12,62,
777,9,62,1,62,1,62,3,62,781,8,62,1,62,3,62,784,8,62,1,62,1,62,1,62,1,62,
3,62,790,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,3,62,806,8,62,1,62,1,62,5,62,810,8,62,10,62,12,62,813,9,62,3,62,
815,8,62,1,62,1,62,1,62,3,62,820,8,62,1,62,3,62,823,8,62,1,62,1,62,1,62,
1,62,1,62,3,62,830,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,849,8,62,1,62,1,62,5,62,853,8,62,
10,62,12,62,856,9,62,5,62,858,8,62,10,62,12,62,861,9,62,1,63,1,63,1,64,1,
64,1,64,1,64,3,64,869,8,64,1,64,1,64,3,64,873,8,64,1,65,3,65,876,8,65,1,
65,1,65,1,65,3,65,881,8,65,1,65,5,65,884,8,65,10,65,12,65,887,9,65,1,66,
1,66,1,66,1,67,4,67,893,8,67,11,67,12,67,894,1,68,1,68,1,68,1,68,1,68,1,
68,3,68,903,8,68,1,69,1,69,1,69,1,69,1,69,4,69,910,8,69,11,69,12,69,911,
1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
70,5,70,929,8,70,10,70,12,70,932,9,70,3,70,934,8,70,1,70,1,70,1,70,1,70,
5,70,940,8,70,10,70,12,70,943,9,70,3,70,945,8,70,5,70,947,8,70,10,70,12,
70,950,9,70,1,70,1,70,3,70,954,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,3,71,967,8,71,1,72,1,72,3,72,971,8,72,1,72,1,72,1,73,4,
73,976,8,73,11,73,12,73,977,1,74,1,74,3,74,982,8,74,1,75,3,75,985,8,75,1,
75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,996,8,76,1,76,1,76,1,76,
1,76,1,76,1,76,3,76,1004,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1026,8,77,
1,78,1,78,3,78,1030,8,78,3,78,1032,8,78,1,78,1,78,3,78,1036,8,78,1,78,1,
78,3,78,1040,8,78,1,79,1,79,3,79,1044,8,79,1,80,1,80,1,80,5,80,1049,8,80,
10,80,12,80,1052,9,80,1,81,1,81,1,81,1,81,1,81,3,81,1059,8,81,1,81,1,81,
3,81,1063,8,81,1,81,1,81,1,82,3,82,1068,8,82,1,82,1,82,1,83,4,83,1073,8,
83,11,83,12,83,1074,1,84,1,84,1,84,3,84,1080,8,84,1,85,3,85,1083,8,85,1,
85,1,85,3,85,1087,8,85,1,85,1,85,1,86,4,86,1092,8,86,11,86,12,86,1093,1,
86,0,3,62,96,124,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
162,164,166,168,170,172,0,23,1,0,102,103,2,0,72,72,74,74,3,0,39,39,72,72,
74,74,2,0,39,39,50,50,5,0,71,71,73,73,75,75,78,78,83,84,1,0,75,77,2,0,71,
71,73,73,1,0,69,70,1,0,65,68,1,0,100,101,1,0,89,99,6,0,15,15,26,26,34,34,
40,40,43,43,58,58,8,0,4,6,18,18,23,23,27,27,32,33,37,38,45,46,52,53,1,0,
4,6,2,0,41,41,44,44,4,0,19,19,35,35,47,47,51,51,3,0,8,9,31,31,56,56,2,0,
59,60,88,88,1,0,59,60,2,0,75,75,82,82,2,0,11,11,13,13,2,0,14,14,47,47,2,
0,16,16,20,20,1189,0,207,1,0,0,0,2,209,1,0,0,0,4,216,1,0,0,0,6,226,1,0,0,
0,8,245,1,0,0,0,10,264,1,0,0,0,12,275,1,0,0,0,14,291,1,0,0,0,16,303,1,0,
0,0,18,305,1,0,0,0,20,313,1,0,0,0,22,321,1,0,0,0,24,329,1,0,0,0,26,337,1,
0,0,0,28,345,1,0,0,0,30,353,1,0,0,0,32,361,1,0,0,0,34,369,1,0,0,0,36,377,
1,0,0,0,38,385,1,0,0,0,40,399,1,0,0,0,42,401,1,0,0,0,44,403,1,0,0,0,46,411,
1,0,0,0,48,420,1,0,0,0,50,423,1,0,0,0,52,428,1,0,0,0,54,437,1,0,0,0,56,439,
1,0,0,0,58,447,1,0,0,0,60,452,1,0,0,0,62,469,1,0,0,0,64,489,1,0,0,0,66,491,
1,0,0,0,68,494,1,0,0,0,70,505,1,0,0,0,72,509,1,0,0,0,74,514,1,0,0,0,76,528,
1,0,0,0,78,543,1,0,0,0,80,545,1,0,0,0,82,553,1,0,0,0,84,558,1,0,0,0,86,560,
1,0,0,0,88,565,1,0,0,0,90,573,1,0,0,0,92,575,1,0,0,0,94,584,1,0,0,0,96,610,
1,0,0,0,98,669,1,0,0,0,100,671,1,0,0,0,102,679,1,0,0,0,104,690,1,0,0,0,106,
705,1,0,0,0,108,712,1,0,0,0,110,717,1,0,0,0,112,721,1,0,0,0,114,726,1,0,
0,0,116,741,1,0,0,0,118,743,1,0,0,0,120,751,1,0,0,0,122,766,1,0,0,0,124,
814,1,0,0,0,126,862,1,0,0,0,128,872,1,0,0,0,130,875,1,0,0,0,132,888,1,0,
0,0,134,892,1,0,0,0,136,902,1,0,0,0,138,904,1,0,0,0,140,953,1,0,0,0,142,
966,1,0,0,0,144,968,1,0,0,0,146,975,1,0,0,0,148,981,1,0,0,0,150,984,1,0,
0,0,152,1003,1,0,0,0,154,1025,1,0,0,0,156,1031,1,0,0,0,158,1041,1,0,0,0,
160,1045,1,0,0,0,162,1062,1,0,0,0,164,1067,1,0,0,0,166,1072,1,0,0,0,168,
1079,1,0,0,0,170,1082,1,0,0,0,172,1091,1,0,0,0,174,208,5,105,0,0,175,208,
5,106,0,0,176,178,5,108,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,
0,0,179,180,1,0,0,0,180,208,1,0,0,0,181,182,5,59,0,0,182,183,3,44,22,0,183,
184,5,60,0,0,184,208,1,0,0,0,185,208,3,2,1,0,186,188,5,1,0,0,187,186,1,0,
0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,5,59,0,0,190,191,3,144,72,0,
191,192,5,60,0,0,192,208,1,0,0,0,193,194,5,2,0,0,194,195,5,59,0,0,195,196,
3,12,6,0,196,197,5,88,0,0,197,198,3,120,60,0,198,199,5,60,0,0,199,208,1,
0,0,0,200,201,5,3,0,0,201,202,5,59,0,0,202,203,3,120,60,0,203,204,5,88,0,
0,204,205,3,12,6,0,205,206,5,60,0,0,206,208,1,0,0,0,207,174,1,0,0,0,207,
175,1,0,0,0,207,177,1,0,0,0,207,181,1,0,0,0,207,185,1,0,0,0,207,187,1,0,
0,0,207,193,1,0,0,0,207,200,1,0,0,0,208,1,1,0,0,0,209,210,5,54,0,0,210,211,
5,59,0,0,211,212,3,40,20,0,212,213,5,88,0,0,213,214,3,4,2,0,214,215,5,60,
0,0,215,3,1,0,0,0,216,221,3,6,3,0,217,218,5,88,0,0,218,220,3,6,3,0,219,217,
1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,5,1,0,0,0,223,
221,1,0,0,0,224,227,3,120,60,0,225,227,5,21,0,0,226,224,1,0,0,0,226,225,
1,0,0,0,227,228,1,0,0,0,228,229,5,86,0,0,229,230,3,40,20,0,230,7,1,0,0,0,
231,246,3,0,0,0,232,234,5,1,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,
1,0,0,0,235,236,5,59,0,0,236,237,3,120,60,0,237,238,5,60,0,0,238,239,5,63,
0,0,239,241,3,130,65,0,240,242,5,88,0,0,241,240,1,0,0,0,241,242,1,0,0,0,
242,243,1,0,0,0,243,244,5,64,0,0,244,246,1,0,0,0,245,231,1,0,0,0,245,233,
1,0,0,0,246,261,1,0,0,0,247,248,5,61,0,0,248,249,3,44,22,0,249,250,5,62,
0,0,250,260,1,0,0,0,251,253,5,59,0,0,252,254,3,10,5,0,253,252,1,0,0,0,253,
254,1,0,0,0,254,255,1,0,0,0,255,260,5,60,0,0,256,257,7,0,0,0,257,260,5,105,
0,0,258,260,7,1,0,0,259,247,1,0,0,0,259,251,1,0,0,0,259,256,1,0,0,0,259,
258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,9,1,0,0,
0,263,261,1,0,0,0,264,269,3,40,20,0,265,266,5,88,0,0,266,268,3,40,20,0,267,
265,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,11,1,0,0,
0,271,269,1,0,0,0,272,274,7,2,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,
1,0,0,0,275,276,1,0,0,0,276,289,1,0,0,0,277,275,1,0,0,0,278,290,3,8,4,0,
279,280,3,14,7,0,280,281,3,16,8,0,281,290,1,0,0,0,282,283,7,3,0,0,283,284,
5,59,0,0,284,285,3,120,60,0,285,286,5,60,0,0,286,290,1,0,0,0,287,288,5,80,
0,0,288,290,5,105,0,0,289,278,1,0,0,0,289,279,1,0,0,0,289,282,1,0,0,0,289,
287,1,0,0,0,290,13,1,0,0,0,291,292,7,4,0,0,292,15,1,0,0,0,293,295,5,1,0,
0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,5,59,0,0,297,298,
3,120,60,0,298,299,5,60,0,0,299,300,3,16,8,0,300,304,1,0,0,0,301,304,3,12,
6,0,302,304,5,107,0,0,303,294,1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,
17,1,0,0,0,305,310,3,16,8,0,306,307,7,5,0,0,307,309,3,16,8,0,308,306,1,0,
0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,19,1,0,0,0,312,310,
1,0,0,0,313,318,3,18,9,0,314,315,7,6,0,0,315,317,3,18,9,0,316,314,1,0,0,
0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,21,1,0,0,0,320,318,
1,0,0,0,321,326,3,20,10,0,322,323,7,7,0,0,323,325,3,20,10,0,324,322,1,0,
0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,23,1,0,0,0,328,326,
1,0,0,0,329,334,3,22,11,0,330,331,7,8,0,0,331,333,3,22,11,0,332,330,1,0,
0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,25,1,0,0,0,336,334,
1,0,0,0,337,342,3,24,12,0,338,339,7,9,0,0,339,341,3,24,12,0,340,338,1,0,
0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,27,1,0,0,0,344,342,
1,0,0,0,345,350,3,26,13,0,346,347,5,78,0,0,347,349,3,26,13,0,348,346,1,0,
0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,29,1,0,0,0,352,350,
1,0,0,0,353,358,3,28,14,0,354,355,5,82,0,0,355,357,3,28,14,0,356,354,1,0,
0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,31,1,0,0,0,360,358,
1,0,0,0,361,366,3,30,15,0,362,363,5,79,0,0,363,365,3,30,15,0,364,362,1,0,
0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,33,1,0,0,0,368,366,
1,0,0,0,369,374,3,32,16,0,370,371,5,80,0,0,371,373,3,32,16,0,372,370,1,0,
0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,35,1,0,0,0,376,374,
1,0,0,0,377,382,3,34,17,0,378,379,5,81,0,0,379,381,3,34,17,0,380,378,1,0,
0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,37,1,0,0,0,384,382,
1,0,0,0,385,391,3,36,18,0,386,387,5,85,0,0,387,388,3,44,22,0,388,389,5,86,
0,0,389,390,3,38,19,0,390,392,1,0,0,0,391,386,1,0,0,0,391,392,1,0,0,0,392,
39,1,0,0,0,393,400,3,38,19,0,394,395,3,12,6,0,395,396,3,42,21,0,396,397,
3,40,20,0,397,400,1,0,0,0,398,400,5,107,0,0,399,393,1,0,0,0,399,394,1,0,
0,0,399,398,1,0,0,0,400,41,1,0,0,0,401,402,7,10,0,0,402,43,1,0,0,0,403,408,
3,40,20,0,404,405,5,88,0,0,405,407,3,40,20,0,406,404,1,0,0,0,407,410,1,0,
0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,45,1,0,0,0,410,408,1,0,0,0,411,412,
3,38,19,0,412,47,1,0,0,0,413,415,3,50,25,0,414,416,3,56,28,0,415,414,1,0,
0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,87,0,0,418,421,1,0,0,0,419,
421,3,138,69,0,420,413,1,0,0,0,420,419,1,0,0,0,421,49,1,0,0,0,422,424,3,
54,27,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,
426,51,1,0,0,0,427,429,3,54,27,0,428,427,1,0,0,0,429,430,1,0,0,0,430,428,
1,0,0,0,430,431,1,0,0,0,431,53,1,0,0,0,432,438,3,60,30,0,433,438,3,62,31,
0,434,438,3,88,44,0,435,438,3,90,45,0,436,438,3,92,46,0,437,432,1,0,0,0,
437,433,1,0,0,0,437,434,1,0,0,0,437,435,1,0,0,0,437,436,1,0,0,0,438,55,1,
0,0,0,439,444,3,58,29,0,440,441,5,88,0,0,441,443,3,58,29,0,442,440,1,0,0,
0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,57,1,0,0,0,446,444,
1,0,0,0,447,450,3,94,47,0,448,449,5,89,0,0,449,451,3,128,64,0,450,448,1,
0,0,0,450,451,1,0,0,0,451,59,1,0,0,0,452,453,7,11,0,0,453,61,1,0,0,0,454,
455,6,31,-1,0,455,470,7,12,0,0,456,457,5,1,0,0,457,458,5,59,0,0,458,459,
7,13,0,0,459,470,5,60,0,0,460,470,3,86,43,0,461,470,3,64,32,0,462,470,3,
78,39,0,463,470,3,126,63,0,464,465,5,7,0,0,465,466,5,59,0,0,466,467,3,46,
23,0,467,468,5,60,0,0,468,470,1,0,0,0,469,454,1,0,0,0,469,456,1,0,0,0,469,
460,1,0,0,0,469,461,1,0,0,0,469,462,1,0,0,0,469,463,1,0,0,0,469,464,1,0,
0,0,470,475,1,0,0,0,471,472,10,1,0,0,472,474,3,108,54,0,473,471,1,0,0,0,
474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,63,1,0,0,0,477,475,1,
0,0,0,478,480,3,66,33,0,479,481,5,105,0,0,480,479,1,0,0,0,480,481,1,0,0,
0,481,482,1,0,0,0,482,483,5,63,0,0,483,484,3,68,34,0,484,485,5,64,0,0,485,
490,1,0,0,0,486,487,3,66,33,0,487,488,5,105,0,0,488,490,1,0,0,0,489,478,
1,0,0,0,489,486,1,0,0,0,490,65,1,0,0,0,491,492,7,14,0,0,492,67,1,0,0,0,493,
495,3,70,35,0,494,493,1,0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,497,1,
0,0,0,497,69,1,0,0,0,498,500,3,72,36,0,499,501,3,74,37,0,500,499,1,0,0,0,
500,501,1,0,0,0,501,502,1,0,0,0,502,503,5,87,0,0,503,506,1,0,0,0,504,506,
3,138,69,0,505,498,1,0,0,0,505,504,1,0,0,0,506,71,1,0,0,0,507,510,3,62,31,
0,508,510,3,88,44,0,509,507,1,0,0,0,509,508,1,0,0,0,510,512,1,0,0,0,511,
513,3,72,36,0,512,511,1,0,0,0,512,513,1,0,0,0,513,73,1,0,0,0,514,519,3,76,
38,0,515,516,5,88,0,0,516,518,3,76,38,0,517,515,1,0,0,0,518,521,1,0,0,0,
519,517,1,0,0,0,519,520,1,0,0,0,520,75,1,0,0,0,521,519,1,0,0,0,522,529,3,
94,47,0,523,525,3,94,47,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,
0,526,527,5,86,0,0,527,529,3,46,23,0,528,522,1,0,0,0,528,524,1,0,0,0,529,
77,1,0,0,0,530,532,5,25,0,0,531,533,5,105,0,0,532,531,1,0,0,0,532,533,1,
0,0,0,533,534,1,0,0,0,534,535,5,63,0,0,535,537,3,80,40,0,536,538,5,88,0,
0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,5,64,0,0,540,544,
1,0,0,0,541,542,5,25,0,0,542,544,5,105,0,0,543,530,1,0,0,0,543,541,1,0,0,
0,544,79,1,0,0,0,545,550,3,82,41,0,546,547,5,88,0,0,547,549,3,82,41,0,548,
546,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,81,1,0,0,
0,552,550,1,0,0,0,553,556,3,84,42,0,554,555,5,89,0,0,555,557,3,46,23,0,556,
554,1,0,0,0,556,557,1,0,0,0,557,83,1,0,0,0,558,559,5,105,0,0,559,85,1,0,
0,0,560,561,5,51,0,0,561,562,5,59,0,0,562,563,3,120,60,0,563,564,5,60,0,
0,564,87,1,0,0,0,565,566,7,15,0,0,566,89,1,0,0,0,567,574,7,16,0,0,568,574,
3,100,50,0,569,570,5,10,0,0,570,571,5,59,0,0,571,572,5,105,0,0,572,574,5,
60,0,0,573,567,1,0,0,0,573,568,1,0,0,0,573,569,1,0,0,0,574,91,1,0,0,0,575,
576,5,49,0,0,576,579,5,59,0,0,577,580,3,120,60,0,578,580,3,46,23,0,579,577,
1,0,0,0,579,578,1,0,0,0,580,581,1,0,0,0,581,582,5,60,0,0,582,93,1,0,0,0,
583,585,3,108,54,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,590,
3,96,48,0,587,589,3,98,49,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,
0,0,590,591,1,0,0,0,591,95,1,0,0,0,592,590,1,0,0,0,593,594,6,48,-1,0,594,
611,5,105,0,0,595,596,5,59,0,0,596,597,3,94,47,0,597,598,5,60,0,0,598,611,
1,0,0,0,599,600,5,105,0,0,600,601,5,86,0,0,601,611,5,107,0,0,602,604,5,59,
0,0,603,605,3,62,31,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,
607,3,108,54,0,607,608,3,96,48,0,608,609,5,60,0,0,609,611,1,0,0,0,610,593,
1,0,0,0,610,595,1,0,0,0,610,599,1,0,0,0,610,602,1,0,0,0,611,657,1,0,0,0,
612,613,10,8,0,0,613,615,5,61,0,0,614,616,3,110,55,0,615,614,1,0,0,0,615,
616,1,0,0,0,616,618,1,0,0,0,617,619,3,40,20,0,618,617,1,0,0,0,618,619,1,
0,0,0,619,620,1,0,0,0,620,656,5,62,0,0,621,622,10,7,0,0,622,623,5,61,0,0,
623,625,5,40,0,0,624,626,3,110,55,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
627,1,0,0,0,627,628,3,40,20,0,628,629,5,62,0,0,629,656,1,0,0,0,630,631,10,
6,0,0,631,632,5,61,0,0,632,633,3,110,55,0,633,634,5,40,0,0,634,635,3,40,
20,0,635,636,5,62,0,0,636,656,1,0,0,0,637,638,10,5,0,0,638,640,5,61,0,0,
639,641,3,110,55,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,
5,75,0,0,643,656,5,62,0,0,644,645,10,4,0,0,645,646,5,59,0,0,646,647,3,112,
56,0,647,648,5,60,0,0,648,656,1,0,0,0,649,650,10,3,0,0,650,652,5,59,0,0,
651,653,3,118,59,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,656,
5,60,0,0,655,612,1,0,0,0,655,621,1,0,0,0,655,630,1,0,0,0,655,637,1,0,0,0,
655,644,1,0,0,0,655,649,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,
1,0,0,0,658,97,1,0,0,0,659,657,1,0,0,0,660,661,5,11,0,0,661,663,5,59,0,0,
662,664,5,108,0,0,663,662,1,0,0,0,664,665,1,0,0,0,665,663,1,0,0,0,665,666,
1,0,0,0,666,667,1,0,0,0,667,670,5,60,0,0,668,670,3,100,50,0,669,660,1,0,
0,0,669,668,1,0,0,0,670,99,1,0,0,0,671,672,5,12,0,0,672,673,5,59,0,0,673,
674,5,59,0,0,674,675,3,102,51,0,675,676,5,60,0,0,676,677,5,60,0,0,677,101,
1,0,0,0,678,680,3,104,52,0,679,678,1,0,0,0,679,680,1,0,0,0,680,687,1,0,0,
0,681,683,5,88,0,0,682,684,3,104,52,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
686,1,0,0,0,685,681,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,
0,0,688,103,1,0,0,0,689,687,1,0,0,0,690,696,8,17,0,0,691,693,5,59,0,0,692,
694,3,10,5,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,697,5,60,
0,0,696,691,1,0,0,0,696,697,1,0,0,0,697,105,1,0,0,0,698,704,8,18,0,0,699,
700,5,59,0,0,700,701,3,106,53,0,701,702,5,60,0,0,702,704,1,0,0,0,703,698,
1,0,0,0,703,699,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,
706,107,1,0,0,0,707,705,1,0,0,0,708,710,7,19,0,0,709,711,3,110,55,0,710,
709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,708,1,0,0,0,713,714,1,0,
0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,109,1,0,0,0,716,718,3,88,44,0,717,
716,1,0,0,0,718,719,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,111,1,0,
0,0,721,724,3,114,57,0,722,723,5,88,0,0,723,725,5,104,0,0,724,722,1,0,0,
0,724,725,1,0,0,0,725,113,1,0,0,0,726,731,3,116,58,0,727,728,5,88,0,0,728,
730,3,116,58,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,
0,0,0,732,115,1,0,0,0,733,731,1,0,0,0,734,735,3,50,25,0,735,736,3,94,47,
0,736,742,1,0,0,0,737,739,3,52,26,0,738,740,3,122,61,0,739,738,1,0,0,0,739,
740,1,0,0,0,740,742,1,0,0,0,741,734,1,0,0,0,741,737,1,0,0,0,742,117,1,0,
0,0,743,748,5,105,0,0,744,745,5,88,0,0,745,747,5,105,0,0,746,744,1,0,0,0,
747,750,1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,119,1,0,0,0,750,748,
1,0,0,0,751,753,3,72,36,0,752,754,3,122,61,0,753,752,1,0,0,0,753,754,1,0,
0,0,754,121,1,0,0,0,755,767,3,108,54,0,756,758,3,108,54,0,757,756,1,0,0,
0,757,758,1,0,0,0,758,759,1,0,0,0,759,763,3,124,62,0,760,762,3,98,49,0,761,
760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,767,1,0,
0,0,765,763,1,0,0,0,766,755,1,0,0,0,766,757,1,0,0,0,767,123,1,0,0,0,768,
769,6,62,-1,0,769,770,5,59,0,0,770,771,3,122,61,0,771,775,5,60,0,0,772,774,
3,98,49,0,773,772,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,
0,776,815,1,0,0,0,777,775,1,0,0,0,778,780,5,61,0,0,779,781,3,110,55,0,780,
779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,784,3,40,20,0,783,782,1,
0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,815,5,62,0,0,786,787,5,61,0,0,
787,789,5,40,0,0,788,790,3,110,55,0,789,788,1,0,0,0,789,790,1,0,0,0,790,
791,1,0,0,0,791,792,3,40,20,0,792,793,5,62,0,0,793,815,1,0,0,0,794,795,5,
61,0,0,795,796,3,110,55,0,796,797,5,40,0,0,797,798,3,40,20,0,798,799,5,62,
0,0,799,815,1,0,0,0,800,801,5,61,0,0,801,802,5,75,0,0,802,815,5,62,0,0,803,
805,5,59,0,0,804,806,3,112,56,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,
1,0,0,0,807,811,5,60,0,0,808,810,3,98,49,0,809,808,1,0,0,0,810,813,1,0,0,
0,811,809,1,0,0,0,811,812,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,814,768,
1,0,0,0,814,778,1,0,0,0,814,786,1,0,0,0,814,794,1,0,0,0,814,800,1,0,0,0,
814,803,1,0,0,0,815,859,1,0,0,0,816,817,10,5,0,0,817,819,5,61,0,0,818,820,
3,110,55,0,819,818,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,823,3,40,
20,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,858,5,62,0,0,825,
826,10,4,0,0,826,827,5,61,0,0,827,829,5,40,0,0,828,830,3,110,55,0,829,828,
1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,3,40,20,0,832,833,5,62,0,
0,833,858,1,0,0,0,834,835,10,3,0,0,835,836,5,61,0,0,836,837,3,110,55,0,837,
838,5,40,0,0,838,839,3,40,20,0,839,840,5,62,0,0,840,858,1,0,0,0,841,842,
10,2,0,0,842,843,5,61,0,0,843,844,5,75,0,0,844,858,5,62,0,0,845,846,10,1,
0,0,846,848,5,59,0,0,847,849,3,112,56,0,848,847,1,0,0,0,848,849,1,0,0,0,
849,850,1,0,0,0,850,854,5,60,0,0,851,853,3,98,49,0,852,851,1,0,0,0,853,856,
1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,858,1,0,0,0,856,854,1,0,0,0,
857,816,1,0,0,0,857,825,1,0,0,0,857,834,1,0,0,0,857,841,1,0,0,0,857,845,
1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,125,1,0,0,0,
861,859,1,0,0,0,862,863,5,105,0,0,863,127,1,0,0,0,864,873,3,40,20,0,865,
866,5,63,0,0,866,868,3,130,65,0,867,869,5,88,0,0,868,867,1,0,0,0,868,869,
1,0,0,0,869,870,1,0,0,0,870,871,5,64,0,0,871,873,1,0,0,0,872,864,1,0,0,0,
872,865,1,0,0,0,873,129,1,0,0,0,874,876,3,132,66,0,875,874,1,0,0,0,875,876,
1,0,0,0,876,877,1,0,0,0,877,885,3,128,64,0,878,880,5,88,0,0,879,881,3,132,
66,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,884,3,128,64,0,
883,878,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,131,
1,0,0,0,887,885,1,0,0,0,888,889,3,134,67,0,889,890,5,89,0,0,890,133,1,0,
0,0,891,893,3,136,68,0,892,891,1,0,0,0,893,894,1,0,0,0,894,892,1,0,0,0,894,
895,1,0,0,0,895,135,1,0,0,0,896,897,5,61,0,0,897,898,3,46,23,0,898,899,5,
62,0,0,899,903,1,0,0,0,900,901,5,103,0,0,901,903,5,105,0,0,902,896,1,0,0,
0,902,900,1,0,0,0,903,137,1,0,0,0,904,905,5,57,0,0,905,906,5,59,0,0,906,
907,3,46,23,0,907,909,5,88,0,0,908,910,5,108,0,0,909,908,1,0,0,0,910,911,
1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,914,5,60,0,0,
914,915,5,87,0,0,915,139,1,0,0,0,916,954,3,142,71,0,917,954,3,144,72,0,918,
954,3,150,75,0,919,954,3,152,76,0,920,954,3,154,77,0,921,954,3,162,81,0,
922,923,7,20,0,0,923,924,7,21,0,0,924,933,5,59,0,0,925,930,3,36,18,0,926,
927,5,88,0,0,927,929,3,36,18,0,928,926,1,0,0,0,929,932,1,0,0,0,930,928,1,
0,0,0,930,931,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,933,925,1,0,0,0,933,
934,1,0,0,0,934,948,1,0,0,0,935,944,5,86,0,0,936,941,3,36,18,0,937,938,5,
88,0,0,938,940,3,36,18,0,939,937,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,
941,942,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,944,936,1,0,0,0,944,945,
1,0,0,0,945,947,1,0,0,0,946,935,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,
948,949,1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,952,5,60,0,0,952,954,
5,87,0,0,953,916,1,0,0,0,953,917,1,0,0,0,953,918,1,0,0,0,953,919,1,0,0,0,
953,920,1,0,0,0,953,921,1,0,0,0,953,922,1,0,0,0,954,141,1,0,0,0,955,956,
5,105,0,0,956,957,5,86,0,0,957,967,3,140,70,0,958,959,5,17,0,0,959,960,3,
46,23,0,960,961,5,86,0,0,961,962,3,140,70,0,962,967,1,0,0,0,963,964,5,21,
0,0,964,965,5,86,0,0,965,967,3,140,70,0,966,955,1,0,0,0,966,958,1,0,0,0,
966,963,1,0,0,0,967,143,1,0,0,0,968,970,5,63,0,0,969,971,3,146,73,0,970,
969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,973,5,64,0,0,973,145,1,0,
0,0,974,976,3,148,74,0,975,974,1,0,0,0,976,977,1,0,0,0,977,975,1,0,0,0,977,
978,1,0,0,0,978,147,1,0,0,0,979,982,3,140,70,0,980,982,3,48,24,0,981,979,
1,0,0,0,981,980,1,0,0,0,982,149,1,0,0,0,983,985,3,44,22,0,984,983,1,0,0,
0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,87,0,0,987,151,1,0,0,0,988,989,
5,30,0,0,989,990,5,59,0,0,990,991,3,44,22,0,991,992,5,60,0,0,992,995,3,140,
70,0,993,994,5,24,0,0,994,996,3,140,70,0,995,993,1,0,0,0,995,996,1,0,0,0,
996,1004,1,0,0,0,997,998,5,42,0,0,998,999,5,59,0,0,999,1000,3,44,22,0,1000,
1001,5,60,0,0,1001,1002,3,140,70,0,1002,1004,1,0,0,0,1003,988,1,0,0,0,1003,
997,1,0,0,0,1004,153,1,0,0,0,1005,1006,5,48,0,0,1006,1007,5,59,0,0,1007,
1008,3,44,22,0,1008,1009,5,60,0,0,1009,1010,3,140,70,0,1010,1026,1,0,0,0,
1011,1012,5,22,0,0,1012,1013,3,140,70,0,1013,1014,5,48,0,0,1014,1015,5,59,
0,0,1015,1016,3,44,22,0,1016,1017,5,60,0,0,1017,1018,5,87,0,0,1018,1026,
1,0,0,0,1019,1020,5,28,0,0,1020,1021,5,59,0,0,1021,1022,3,156,78,0,1022,
1023,5,60,0,0,1023,1024,3,140,70,0,1024,1026,1,0,0,0,1025,1005,1,0,0,0,1025,
1011,1,0,0,0,1025,1019,1,0,0,0,1026,155,1,0,0,0,1027,1032,3,158,79,0,1028,
1030,3,44,22,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,
1027,1,0,0,0,1031,1029,1,0,0,0,1032,1033,1,0,0,0,1033,1035,5,87,0,0,1034,
1036,3,160,80,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,
1039,5,87,0,0,1038,1040,3,160,80,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,
157,1,0,0,0,1041,1043,3,50,25,0,1042,1044,3,56,28,0,1043,1042,1,0,0,0,1043,
1044,1,0,0,0,1044,159,1,0,0,0,1045,1050,3,40,20,0,1046,1047,5,88,0,0,1047,
1049,3,40,20,0,1048,1046,1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,
1051,1,0,0,0,1051,161,1,0,0,0,1052,1050,1,0,0,0,1053,1054,5,29,0,0,1054,
1063,5,105,0,0,1055,1063,7,22,0,0,1056,1058,5,36,0,0,1057,1059,3,44,22,0,
1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1063,1,0,0,0,1060,1061,5,29,0,0,
1061,1063,3,12,6,0,1062,1053,1,0,0,0,1062,1055,1,0,0,0,1062,1056,1,0,0,0,
1062,1060,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,87,0,0,1065,163,1,0,0,0,
1066,1068,3,166,83,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,
0,1069,1070,5,0,0,1,1070,165,1,0,0,0,1071,1073,3,168,84,0,1072,1071,1,0,
0,0,1073,1074,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,167,1,0,0,
0,1076,1080,3,170,85,0,1077,1080,3,48,24,0,1078,1080,5,87,0,0,1079,1076,
1,0,0,0,1079,1077,1,0,0,0,1079,1078,1,0,0,0,1080,169,1,0,0,0,1081,1083,3,
50,25,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,
3,94,47,0,1085,1087,3,172,86,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,
1088,1,0,0,0,1088,1089,3,144,72,0,1089,171,1,0,0,0,1090,1092,3,48,24,0,1091,
1090,1,0,0,0,1092,1093,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,
173,1,0,0,0,137,179,187,207,221,226,233,241,245,253,259,261,269,275,289,
294,303,310,318,326,334,342,350,358,366,374,382,391,399,408,415,420,425,
430,437,444,450,469,475,480,489,496,500,505,509,512,519,524,528,532,537,
543,550,556,573,579,584,590,604,610,615,618,625,640,652,655,657,665,669,
679,683,687,693,696,703,705,710,714,719,724,731,739,741,748,753,757,763,
766,775,780,783,789,805,811,814,819,822,829,848,854,857,859,868,872,875,
880,885,894,902,911,930,933,941,944,948,953,966,970,977,981,984,995,1003,
1025,1029,1031,1035,1039,1043,1050,1058,1062,1067,1074,1079,1082,1086,1093];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CParser extends antlr4.Parser {

    static grammarFileName = "C.g4";
    static literalNames = [ null, "'__extension__'", "'__builtin_va_arg'", 
                            "'__builtin_offsetof'", "'__m128'", "'__m128d'", 
                            "'__m128i'", "'__typeof__'", "'__inline__'", 
                            "'__stdcall'", "'__declspec'", "'__asm'", "'__attribute__'", 
                            "'__asm__'", "'__volatile__'", "'auto'", "'break'", 
                            "'case'", "'char'", "'const'", "'continue'", 
                            "'default'", "'do'", "'double'", "'else'", "'enum'", 
                            "'extern'", "'float'", "'for'", "'goto'", "'if'", 
                            "'inline'", "'int'", "'long'", "'register'", 
                            "'restrict'", "'return'", "'short'", "'signed'", 
                            "'sizeof'", "'static'", "'struct'", "'switch'", 
                            "'typedef'", "'union'", "'unsigned'", "'void'", 
                            "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
                            "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", 
                            "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                            "'_Thread_local'", "'('", "')'", "'['", "']'", 
                            "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
                            "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", 
                            "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", 
                            "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                            "'='", "'*='", "'/='", "'%='", "'+='", "'-='", 
                            "'<<='", "'>>='", "'&='", "'^='", "'|='", "'=='", 
                            "'!='", "'->'", "'.'", "'...'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, "Auto", 
                             "Break", "Case", "Char", "Const", "Continue", 
                             "Default", "Do", "Double", "Else", "Enum", 
                             "Extern", "Float", "For", "Goto", "If", "Inline", 
                             "Int", "Long", "Register", "Restrict", "Return", 
                             "Short", "Signed", "Sizeof", "Static", "Struct", 
                             "Switch", "Typedef", "Union", "Unsigned", "Void", 
                             "Volatile", "While", "Alignas", "Alignof", 
                             "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
                             "Noreturn", "StaticAssert", "ThreadLocal", 
                             "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                             "LeftBrace", "RightBrace", "Less", "LessEqual", 
                             "Greater", "GreaterEqual", "LeftShift", "RightShift", 
                             "Plus", "PlusPlus", "Minus", "MinusMinus", 
                             "Star", "Div", "Mod", "And", "Or", "AndAnd", 
                             "OrOr", "Caret", "Not", "Tilde", "Question", 
                             "Colon", "Semi", "Comma", "Assign", "StarAssign", 
                             "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", 
                             "LeftShiftAssign", "RightShiftAssign", "AndAssign", 
                             "XorAssign", "OrAssign", "Equal", "NotEqual", 
                             "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                             "DigitSequence", "StringLiteral", "ComplexDefine", 
                             "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                             "LineDirective", "PragmaDirective", "Whitespace", 
                             "Newline", "BlockComment", "LineComment" ];
    static ruleNames = [ "primaryExpression", "genericSelection", "genericAssocList", 
                         "genericAssociation", "postfixExpression", "argumentExpressionList", 
                         "unaryExpression", "unaryOperator", "castExpression", 
                         "multiplicativeExpression", "additiveExpression", 
                         "shiftExpression", "relationalExpression", "equalityExpression", 
                         "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                         "logicalAndExpression", "logicalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignmentOperator", "expression", "constantExpression", 
                         "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                         "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                         "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                         "structOrUnion", "structDeclarationList", "structDeclaration", 
                         "specifierQualifierList", "structDeclaratorList", 
                         "structDeclarator", "enumSpecifier", "enumeratorList", 
                         "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                         "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                         "declarator", "directDeclarator", "gccDeclaratorExtension", 
                         "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                         "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                         "parameterTypeList", "parameterList", "parameterDeclaration", 
                         "identifierList", "typeName", "abstractDeclarator", 
                         "directAbstractDeclarator", "typedefName", "initializer", 
                         "initializerList", "designation", "designatorList", 
                         "designator", "staticAssertDeclaration", "statement", 
                         "labeledStatement", "compoundStatement", "blockItemList", 
                         "blockItem", "expressionStatement", "selectionStatement", 
                         "iterationStatement", "forCondition", "forDeclaration", 
                         "forExpression", "jumpStatement", "compilationUnit", 
                         "translationUnit", "externalDeclaration", "functionDefinition", 
                         "declarationList" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CParser.ruleNames;
        this.literalNames = CParser.literalNames;
        this.symbolicNames = CParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 31:
    	    		return this.typeSpecifier_sempred(localctx, predIndex);
    	case 48:
    	    		return this.directDeclarator_sempred(localctx, predIndex);
    	case 62:
    	    		return this.directAbstractDeclarator_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typeSpecifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    directDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 8);
    		case 2:
    			return this.precpred(this._ctx, 7);
    		case 3:
    			return this.precpred(this._ctx, 6);
    		case 4:
    			return this.precpred(this._ctx, 5);
    		case 5:
    			return this.precpred(this._ctx, 4);
    		case 6:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    directAbstractDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 5);
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 3);
    		case 10:
    			return this.precpred(this._ctx, 2);
    		case 11:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CParser.RULE_primaryExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 174;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 175;
	            this.match(CParser.Constant);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 177; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 176;
	                this.match(CParser.StringLiteral);
	                this.state = 179; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===CParser.StringLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 181;
	            this.match(CParser.LeftParen);
	            this.state = 182;
	            this.expression();
	            this.state = 183;
	            this.match(CParser.RightParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 185;
	            this.genericSelection();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.T__0) {
	                this.state = 186;
	                this.match(CParser.T__0);
	            }

	            this.state = 189;
	            this.match(CParser.LeftParen);
	            this.state = 190;
	            this.compoundStatement();
	            this.state = 191;
	            this.match(CParser.RightParen);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 193;
	            this.match(CParser.T__1);
	            this.state = 194;
	            this.match(CParser.LeftParen);
	            this.state = 195;
	            this.unaryExpression();
	            this.state = 196;
	            this.match(CParser.Comma);
	            this.state = 197;
	            this.typeName();
	            this.state = 198;
	            this.match(CParser.RightParen);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 200;
	            this.match(CParser.T__2);
	            this.state = 201;
	            this.match(CParser.LeftParen);
	            this.state = 202;
	            this.typeName();
	            this.state = 203;
	            this.match(CParser.Comma);
	            this.state = 204;
	            this.unaryExpression();
	            this.state = 205;
	            this.match(CParser.RightParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericSelection() {
	    let localctx = new GenericSelectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CParser.RULE_genericSelection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this.match(CParser.Generic);
	        this.state = 210;
	        this.match(CParser.LeftParen);
	        this.state = 211;
	        this.assignmentExpression();
	        this.state = 212;
	        this.match(CParser.Comma);
	        this.state = 213;
	        this.genericAssocList();
	        this.state = 214;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericAssocList() {
	    let localctx = new GenericAssocListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CParser.RULE_genericAssocList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 216;
	        this.genericAssociation();
	        this.state = 221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 217;
	            this.match(CParser.Comma);
	            this.state = 218;
	            this.genericAssociation();
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericAssociation() {
	    let localctx = new GenericAssociationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CParser.RULE_genericAssociation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__0:
	        case CParser.T__3:
	        case CParser.T__4:
	        case CParser.T__5:
	        case CParser.T__6:
	        case CParser.Char:
	        case CParser.Const:
	        case CParser.Double:
	        case CParser.Enum:
	        case CParser.Float:
	        case CParser.Int:
	        case CParser.Long:
	        case CParser.Restrict:
	        case CParser.Short:
	        case CParser.Signed:
	        case CParser.Struct:
	        case CParser.Union:
	        case CParser.Unsigned:
	        case CParser.Void:
	        case CParser.Volatile:
	        case CParser.Atomic:
	        case CParser.Bool:
	        case CParser.Complex:
	        case CParser.Identifier:
	            this.state = 224;
	            this.typeName();
	            break;
	        case CParser.Default:
	            this.state = 225;
	            this.match(CParser.Default);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 228;
	        this.match(CParser.Colon);
	        this.state = 229;
	        this.assignmentExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CParser.RULE_postfixExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 231;
	            this.primaryExpression();
	            break;

	        case 2:
	            this.state = 233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.T__0) {
	                this.state = 232;
	                this.match(CParser.T__0);
	            }

	            this.state = 235;
	            this.match(CParser.LeftParen);
	            this.state = 236;
	            this.typeName();
	            this.state = 237;
	            this.match(CParser.RightParen);
	            this.state = 238;
	            this.match(CParser.LeftBrace);
	            this.state = 239;
	            this.initializerList();
	            this.state = 241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Comma) {
	                this.state = 240;
	                this.match(CParser.Comma);
	            }

	            this.state = 243;
	            this.match(CParser.RightBrace);
	            break;

	        }
	        this.state = 261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.PlusPlus - 59)) | (1 << (CParser.MinusMinus - 59)))) !== 0) || _la===CParser.Arrow || _la===CParser.Dot) {
	            this.state = 259;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CParser.LeftBracket:
	                this.state = 247;
	                this.match(CParser.LeftBracket);
	                this.state = 248;
	                this.expression();
	                this.state = 249;
	                this.match(CParser.RightBracket);
	                break;
	            case CParser.LeftParen:
	                this.state = 251;
	                this.match(CParser.LeftParen);
	                this.state = 253;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                    this.state = 252;
	                    this.argumentExpressionList();
	                }

	                this.state = 255;
	                this.match(CParser.RightParen);
	                break;
	            case CParser.Arrow:
	            case CParser.Dot:
	                this.state = 256;
	                _la = this._input.LA(1);
	                if(!(_la===CParser.Arrow || _la===CParser.Dot)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 257;
	                this.match(CParser.Identifier);
	                break;
	            case CParser.PlusPlus:
	            case CParser.MinusMinus:
	                this.state = 258;
	                _la = this._input.LA(1);
	                if(!(_la===CParser.PlusPlus || _la===CParser.MinusMinus)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 263;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentExpressionList() {
	    let localctx = new ArgumentExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CParser.RULE_argumentExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.assignmentExpression();
	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 265;
	            this.match(CParser.Comma);
	            this.state = 266;
	            this.assignmentExpression();
	            this.state = 271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CParser.RULE_unaryExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 272;
	                _la = this._input.LA(1);
	                if(!(_la===CParser.Sizeof || _la===CParser.PlusPlus || _la===CParser.MinusMinus)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 277;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	        this.state = 289;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__0:
	        case CParser.T__1:
	        case CParser.T__2:
	        case CParser.Generic:
	        case CParser.LeftParen:
	        case CParser.Identifier:
	        case CParser.Constant:
	        case CParser.StringLiteral:
	            this.state = 278;
	            this.postfixExpression();
	            break;
	        case CParser.Plus:
	        case CParser.Minus:
	        case CParser.Star:
	        case CParser.And:
	        case CParser.Not:
	        case CParser.Tilde:
	            this.state = 279;
	            this.unaryOperator();
	            this.state = 280;
	            this.castExpression();
	            break;
	        case CParser.Sizeof:
	        case CParser.Alignof:
	            this.state = 282;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.Sizeof || _la===CParser.Alignof)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 283;
	            this.match(CParser.LeftParen);
	            this.state = 284;
	            this.typeName();
	            this.state = 285;
	            this.match(CParser.RightParen);
	            break;
	        case CParser.AndAnd:
	            this.state = 287;
	            this.match(CParser.AndAnd);
	            this.state = 288;
	            this.match(CParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CParser.RULE_unaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        _la = this._input.LA(1);
	        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CParser.RULE_castExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 303;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.T__0) {
	                this.state = 293;
	                this.match(CParser.T__0);
	            }

	            this.state = 296;
	            this.match(CParser.LeftParen);
	            this.state = 297;
	            this.typeName();
	            this.state = 298;
	            this.match(CParser.RightParen);
	            this.state = 299;
	            this.castExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 301;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 302;
	            this.match(CParser.DigitSequence);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CParser.RULE_multiplicativeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 305;
	        this.castExpression();
	        this.state = 310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Div - 75)) | (1 << (CParser.Mod - 75)))) !== 0)) {
	            this.state = 306;
	            _la = this._input.LA(1);
	            if(!(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Div - 75)) | (1 << (CParser.Mod - 75)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 307;
	            this.castExpression();
	            this.state = 312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CParser.RULE_additiveExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        this.multiplicativeExpression();
	        this.state = 318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Plus || _la===CParser.Minus) {
	            this.state = 314;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.Plus || _la===CParser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 315;
	            this.multiplicativeExpression();
	            this.state = 320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CParser.RULE_shiftExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.additiveExpression();
	        this.state = 326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.LeftShift || _la===CParser.RightShift) {
	            this.state = 322;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.LeftShift || _la===CParser.RightShift)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 323;
	            this.additiveExpression();
	            this.state = 328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CParser.RULE_relationalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this.shiftExpression();
	        this.state = 334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Less - 65)) | (1 << (CParser.LessEqual - 65)) | (1 << (CParser.Greater - 65)) | (1 << (CParser.GreaterEqual - 65)))) !== 0)) {
	            this.state = 330;
	            _la = this._input.LA(1);
	            if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Less - 65)) | (1 << (CParser.LessEqual - 65)) | (1 << (CParser.Greater - 65)) | (1 << (CParser.GreaterEqual - 65)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 331;
	            this.shiftExpression();
	            this.state = 336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CParser.RULE_equalityExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.relationalExpression();
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Equal || _la===CParser.NotEqual) {
	            this.state = 338;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.Equal || _la===CParser.NotEqual)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 339;
	            this.relationalExpression();
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CParser.RULE_andExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.equalityExpression();
	        this.state = 350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.And) {
	            this.state = 346;
	            this.match(CParser.And);
	            this.state = 347;
	            this.equalityExpression();
	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusiveOrExpression() {
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CParser.RULE_exclusiveOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 353;
	        this.andExpression();
	        this.state = 358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Caret) {
	            this.state = 354;
	            this.match(CParser.Caret);
	            this.state = 355;
	            this.andExpression();
	            this.state = 360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusiveOrExpression() {
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CParser.RULE_inclusiveOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.exclusiveOrExpression();
	        this.state = 366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Or) {
	            this.state = 362;
	            this.match(CParser.Or);
	            this.state = 363;
	            this.exclusiveOrExpression();
	            this.state = 368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CParser.RULE_logicalAndExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 369;
	        this.inclusiveOrExpression();
	        this.state = 374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.AndAnd) {
	            this.state = 370;
	            this.match(CParser.AndAnd);
	            this.state = 371;
	            this.inclusiveOrExpression();
	            this.state = 376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CParser.RULE_logicalOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 377;
	        this.logicalAndExpression();
	        this.state = 382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.OrOr) {
	            this.state = 378;
	            this.match(CParser.OrOr);
	            this.state = 379;
	            this.logicalAndExpression();
	            this.state = 384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CParser.RULE_conditionalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 385;
	        this.logicalOrExpression();
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.Question) {
	            this.state = 386;
	            this.match(CParser.Question);
	            this.state = 387;
	            this.expression();
	            this.state = 388;
	            this.match(CParser.Colon);
	            this.state = 389;
	            this.conditionalExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CParser.RULE_assignmentExpression);
	    try {
	        this.state = 399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 393;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 394;
	            this.unaryExpression();
	            this.state = 395;
	            this.assignmentOperator();
	            this.state = 396;
	            this.assignmentExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 398;
	            this.match(CParser.DigitSequence);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        _la = this._input.LA(1);
	        if(!(((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (CParser.Assign - 89)) | (1 << (CParser.StarAssign - 89)) | (1 << (CParser.DivAssign - 89)) | (1 << (CParser.ModAssign - 89)) | (1 << (CParser.PlusAssign - 89)) | (1 << (CParser.MinusAssign - 89)) | (1 << (CParser.LeftShiftAssign - 89)) | (1 << (CParser.RightShiftAssign - 89)) | (1 << (CParser.AndAssign - 89)) | (1 << (CParser.XorAssign - 89)) | (1 << (CParser.OrAssign - 89)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.assignmentExpression();
	        this.state = 408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 404;
	            this.match(CParser.Comma);
	            this.state = 405;
	            this.assignmentExpression();
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CParser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CParser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 420;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__0:
	        case CParser.T__3:
	        case CParser.T__4:
	        case CParser.T__5:
	        case CParser.T__6:
	        case CParser.T__7:
	        case CParser.T__8:
	        case CParser.T__9:
	        case CParser.T__11:
	        case CParser.Auto:
	        case CParser.Char:
	        case CParser.Const:
	        case CParser.Double:
	        case CParser.Enum:
	        case CParser.Extern:
	        case CParser.Float:
	        case CParser.Inline:
	        case CParser.Int:
	        case CParser.Long:
	        case CParser.Register:
	        case CParser.Restrict:
	        case CParser.Short:
	        case CParser.Signed:
	        case CParser.Static:
	        case CParser.Struct:
	        case CParser.Typedef:
	        case CParser.Union:
	        case CParser.Unsigned:
	        case CParser.Void:
	        case CParser.Volatile:
	        case CParser.Alignas:
	        case CParser.Atomic:
	        case CParser.Bool:
	        case CParser.Complex:
	        case CParser.Noreturn:
	        case CParser.ThreadLocal:
	        case CParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 413;
	            this.declarationSpecifiers();
	            this.state = 415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0) || _la===CParser.Identifier) {
	                this.state = 414;
	                this.initDeclaratorList();
	            }

	            this.state = 417;
	            this.match(CParser.Semi);
	            break;
	        case CParser.StaticAssert:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 419;
	            this.staticAssertDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifiers() {
	    let localctx = new DeclarationSpecifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CParser.RULE_declarationSpecifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 422;
	        		this.declarationSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 425; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifiers2() {
	    let localctx = new DeclarationSpecifiers2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CParser.RULE_declarationSpecifiers2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 428; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 427;
	            this.declarationSpecifier();
	            this.state = 430; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationSpecifier() {
	    let localctx = new DeclarationSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CParser.RULE_declarationSpecifier);
	    try {
	        this.state = 437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 432;
	            this.storageClassSpecifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 433;
	            this.typeSpecifier(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 434;
	            this.typeQualifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 435;
	            this.functionSpecifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 436;
	            this.alignmentSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclaratorList() {
	    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CParser.RULE_initDeclaratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.initDeclarator();
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 440;
	            this.match(CParser.Comma);
	            this.state = 441;
	            this.initDeclarator();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclarator() {
	    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CParser.RULE_initDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.declarator();
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.Assign) {
	            this.state = 448;
	            this.match(CParser.Assign);
	            this.state = 449;
	            this.initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageClassSpecifier() {
	    let localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CParser.RULE_storageClassSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 452;
	        _la = this._input.LA(1);
	        if(!(_la===CParser.Auto || _la===CParser.Extern || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CParser.Register - 34)) | (1 << (CParser.Static - 34)) | (1 << (CParser.Typedef - 34)) | (1 << (CParser.ThreadLocal - 34)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typeSpecifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeSpecifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 62;
	    this.enterRecursionRule(localctx, 62, CParser.RULE_typeSpecifier, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__3:
	        case CParser.T__4:
	        case CParser.T__5:
	        case CParser.Char:
	        case CParser.Double:
	        case CParser.Float:
	        case CParser.Int:
	        case CParser.Long:
	        case CParser.Short:
	        case CParser.Signed:
	        case CParser.Unsigned:
	        case CParser.Void:
	        case CParser.Bool:
	        case CParser.Complex:
	            this.state = 455;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case CParser.T__0:
	            this.state = 456;
	            this.match(CParser.T__0);
	            this.state = 457;
	            this.match(CParser.LeftParen);
	            this.state = 458;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 459;
	            this.match(CParser.RightParen);
	            break;
	        case CParser.Atomic:
	            this.state = 460;
	            this.atomicTypeSpecifier();
	            break;
	        case CParser.Struct:
	        case CParser.Union:
	            this.state = 461;
	            this.structOrUnionSpecifier();
	            break;
	        case CParser.Enum:
	            this.state = 462;
	            this.enumSpecifier();
	            break;
	        case CParser.Identifier:
	            this.state = 463;
	            this.typedefName();
	            break;
	        case CParser.T__6:
	            this.state = 464;
	            this.match(CParser.T__6);
	            this.state = 465;
	            this.match(CParser.LeftParen);
	            this.state = 466;
	            this.constantExpression();
	            this.state = 467;
	            this.match(CParser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 475;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeSpecifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_typeSpecifier);
	                this.state = 471;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 472;
	                this.pointer(); 
	            }
	            this.state = 477;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	structOrUnionSpecifier() {
	    let localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CParser.RULE_structOrUnionSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.structOrUnion();
	            this.state = 480;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Identifier) {
	                this.state = 479;
	                this.match(CParser.Identifier);
	            }

	            this.state = 482;
	            this.match(CParser.LeftBrace);
	            this.state = 483;
	            this.structDeclarationList();
	            this.state = 484;
	            this.match(CParser.RightBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.structOrUnion();
	            this.state = 487;
	            this.match(CParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structOrUnion() {
	    let localctx = new StructOrUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CParser.RULE_structOrUnion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        _la = this._input.LA(1);
	        if(!(_la===CParser.Struct || _la===CParser.Union)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclarationList() {
	    let localctx = new StructDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CParser.RULE_structDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 493;
	            this.structDeclaration();
	            this.state = 496; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.StaticAssert - 32)))) !== 0) || _la===CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclaration() {
	    let localctx = new StructDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CParser.RULE_structDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__0:
	        case CParser.T__3:
	        case CParser.T__4:
	        case CParser.T__5:
	        case CParser.T__6:
	        case CParser.Char:
	        case CParser.Const:
	        case CParser.Double:
	        case CParser.Enum:
	        case CParser.Float:
	        case CParser.Int:
	        case CParser.Long:
	        case CParser.Restrict:
	        case CParser.Short:
	        case CParser.Signed:
	        case CParser.Struct:
	        case CParser.Union:
	        case CParser.Unsigned:
	        case CParser.Void:
	        case CParser.Volatile:
	        case CParser.Atomic:
	        case CParser.Bool:
	        case CParser.Complex:
	        case CParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 498;
	            this.specifierQualifierList();
	            this.state = 500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Colon - 59)))) !== 0) || _la===CParser.Identifier) {
	                this.state = 499;
	                this.structDeclaratorList();
	            }

	            this.state = 502;
	            this.match(CParser.Semi);
	            break;
	        case CParser.StaticAssert:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 504;
	            this.staticAssertDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specifierQualifierList() {
	    let localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CParser.RULE_specifierQualifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 507;
	            this.typeSpecifier(0);
	            break;

	        case 2:
	            this.state = 508;
	            this.typeQualifier();
	            break;

	        }
	        this.state = 512;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 511;
	            this.specifierQualifierList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclaratorList() {
	    let localctx = new StructDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CParser.RULE_structDeclaratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.structDeclarator();
	        this.state = 519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 515;
	            this.match(CParser.Comma);
	            this.state = 516;
	            this.structDeclarator();
	            this.state = 521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclarator() {
	    let localctx = new StructDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CParser.RULE_structDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.state = 528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 522;
	            this.declarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0) || _la===CParser.Identifier) {
	                this.state = 523;
	                this.declarator();
	            }

	            this.state = 526;
	            this.match(CParser.Colon);
	            this.state = 527;
	            this.constantExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSpecifier() {
	    let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CParser.RULE_enumSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 543;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 530;
	            this.match(CParser.Enum);
	            this.state = 532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Identifier) {
	                this.state = 531;
	                this.match(CParser.Identifier);
	            }

	            this.state = 534;
	            this.match(CParser.LeftBrace);
	            this.state = 535;
	            this.enumeratorList();
	            this.state = 537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Comma) {
	                this.state = 536;
	                this.match(CParser.Comma);
	            }

	            this.state = 539;
	            this.match(CParser.RightBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this.match(CParser.Enum);
	            this.state = 542;
	            this.match(CParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorList() {
	    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CParser.RULE_enumeratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.enumerator();
	        this.state = 550;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 546;
	                this.match(CParser.Comma);
	                this.state = 547;
	                this.enumerator(); 
	            }
	            this.state = 552;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CParser.RULE_enumerator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.enumerationConstant();
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.Assign) {
	            this.state = 554;
	            this.match(CParser.Assign);
	            this.state = 555;
	            this.constantExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationConstant() {
	    let localctx = new EnumerationConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CParser.RULE_enumerationConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.match(CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicTypeSpecifier() {
	    let localctx = new AtomicTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CParser.RULE_atomicTypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(CParser.Atomic);
	        this.state = 561;
	        this.match(CParser.LeftParen);
	        this.state = 562;
	        this.typeName();
	        this.state = 563;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQualifier() {
	    let localctx = new TypeQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CParser.RULE_typeQualifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        _la = this._input.LA(1);
	        if(!(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecifier() {
	    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CParser.RULE_functionSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 573;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__7:
	        case CParser.T__8:
	        case CParser.Inline:
	        case CParser.Noreturn:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 567;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline))) !== 0) || _la===CParser.Noreturn)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case CParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 568;
	            this.gccAttributeSpecifier();
	            break;
	        case CParser.T__9:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 569;
	            this.match(CParser.T__9);
	            this.state = 570;
	            this.match(CParser.LeftParen);
	            this.state = 571;
	            this.match(CParser.Identifier);
	            this.state = 572;
	            this.match(CParser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alignmentSpecifier() {
	    let localctx = new AlignmentSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CParser.RULE_alignmentSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.match(CParser.Alignas);
	        this.state = 576;
	        this.match(CParser.LeftParen);
	        this.state = 579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 577;
	            this.typeName();
	            break;

	        case 2:
	            this.state = 578;
	            this.constantExpression();
	            break;

	        }
	        this.state = 581;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CParser.RULE_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.Star || _la===CParser.Caret) {
	            this.state = 583;
	            this.pointer();
	        }

	        this.state = 586;
	        this.directDeclarator(0);
	        this.state = 590;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 587;
	                this.gccDeclaratorExtension(); 
	            }
	            this.state = 592;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	directDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DirectDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 96;
	    this.enterRecursionRule(localctx, 96, CParser.RULE_directDeclarator, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 594;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.state = 595;
	            this.match(CParser.LeftParen);
	            this.state = 596;
	            this.declarator();
	            this.state = 597;
	            this.match(CParser.RightParen);
	            break;

	        case 3:
	            this.state = 599;
	            this.match(CParser.Identifier);
	            this.state = 600;
	            this.match(CParser.Colon);
	            this.state = 601;
	            this.match(CParser.DigitSequence);
	            break;

	        case 4:
	            this.state = 602;
	            this.match(CParser.LeftParen);
	            this.state = 604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)))) !== 0) || _la===CParser.Identifier) {
	                this.state = 603;
	                this.typeSpecifier(0);
	            }

	            this.state = 606;
	            this.pointer();
	            this.state = 607;
	            this.directDeclarator(0);
	            this.state = 608;
	            this.match(CParser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 657;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 655;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 612;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 613;
	                    this.match(CParser.LeftBracket);
	                    this.state = 615;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                        this.state = 614;
	                        this.typeQualifierList();
	                    }

	                    this.state = 618;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                        this.state = 617;
	                        this.assignmentExpression();
	                    }

	                    this.state = 620;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 621;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 622;
	                    this.match(CParser.LeftBracket);
	                    this.state = 623;
	                    this.match(CParser.Static);
	                    this.state = 625;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                        this.state = 624;
	                        this.typeQualifierList();
	                    }

	                    this.state = 627;
	                    this.assignmentExpression();
	                    this.state = 628;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 3:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 630;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 631;
	                    this.match(CParser.LeftBracket);
	                    this.state = 632;
	                    this.typeQualifierList();
	                    this.state = 633;
	                    this.match(CParser.Static);
	                    this.state = 634;
	                    this.assignmentExpression();
	                    this.state = 635;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 4:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 637;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 638;
	                    this.match(CParser.LeftBracket);
	                    this.state = 640;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                        this.state = 639;
	                        this.typeQualifierList();
	                    }

	                    this.state = 642;
	                    this.match(CParser.Star);
	                    this.state = 643;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 5:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 644;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 645;
	                    this.match(CParser.LeftParen);
	                    this.state = 646;
	                    this.parameterTypeList();
	                    this.state = 647;
	                    this.match(CParser.RightParen);
	                    break;

	                case 6:
	                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
	                    this.state = 649;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 650;
	                    this.match(CParser.LeftParen);
	                    this.state = 652;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Identifier) {
	                        this.state = 651;
	                        this.identifierList();
	                    }

	                    this.state = 654;
	                    this.match(CParser.RightParen);
	                    break;

	                } 
	            }
	            this.state = 659;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	gccDeclaratorExtension() {
	    let localctx = new GccDeclaratorExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CParser.RULE_gccDeclaratorExtension);
	    var _la = 0; // Token type
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 660;
	            this.match(CParser.T__10);
	            this.state = 661;
	            this.match(CParser.LeftParen);
	            this.state = 663; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 662;
	                this.match(CParser.StringLiteral);
	                this.state = 665; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===CParser.StringLiteral);
	            this.state = 667;
	            this.match(CParser.RightParen);
	            break;
	        case CParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.gccAttributeSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttributeSpecifier() {
	    let localctx = new GccAttributeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CParser.RULE_gccAttributeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this.match(CParser.T__11);
	        this.state = 672;
	        this.match(CParser.LeftParen);
	        this.state = 673;
	        this.match(CParser.LeftParen);
	        this.state = 674;
	        this.gccAttributeList();
	        this.state = 675;
	        this.match(CParser.RightParen);
	        this.state = 676;
	        this.match(CParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttributeList() {
	    let localctx = new GccAttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CParser.RULE_gccAttributeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Imaginary - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftBracket - 32)) | (1 << (CParser.RightBracket - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CParser.RightShiftAssign - 96)) | (1 << (CParser.AndAssign - 96)) | (1 << (CParser.XorAssign - 96)) | (1 << (CParser.OrAssign - 96)) | (1 << (CParser.Equal - 96)) | (1 << (CParser.NotEqual - 96)) | (1 << (CParser.Arrow - 96)) | (1 << (CParser.Dot - 96)) | (1 << (CParser.Ellipsis - 96)) | (1 << (CParser.Identifier - 96)) | (1 << (CParser.Constant - 96)) | (1 << (CParser.DigitSequence - 96)) | (1 << (CParser.StringLiteral - 96)) | (1 << (CParser.ComplexDefine - 96)) | (1 << (CParser.IncludeDirective - 96)) | (1 << (CParser.AsmBlock - 96)) | (1 << (CParser.LineAfterPreprocessing - 96)) | (1 << (CParser.LineDirective - 96)) | (1 << (CParser.PragmaDirective - 96)) | (1 << (CParser.Whitespace - 96)) | (1 << (CParser.Newline - 96)) | (1 << (CParser.BlockComment - 96)) | (1 << (CParser.LineComment - 96)))) !== 0)) {
	            this.state = 678;
	            this.gccAttribute();
	        }

	        this.state = 687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 681;
	            this.match(CParser.Comma);
	            this.state = 683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Imaginary - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftBracket - 32)) | (1 << (CParser.RightBracket - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CParser.RightShiftAssign - 96)) | (1 << (CParser.AndAssign - 96)) | (1 << (CParser.XorAssign - 96)) | (1 << (CParser.OrAssign - 96)) | (1 << (CParser.Equal - 96)) | (1 << (CParser.NotEqual - 96)) | (1 << (CParser.Arrow - 96)) | (1 << (CParser.Dot - 96)) | (1 << (CParser.Ellipsis - 96)) | (1 << (CParser.Identifier - 96)) | (1 << (CParser.Constant - 96)) | (1 << (CParser.DigitSequence - 96)) | (1 << (CParser.StringLiteral - 96)) | (1 << (CParser.ComplexDefine - 96)) | (1 << (CParser.IncludeDirective - 96)) | (1 << (CParser.AsmBlock - 96)) | (1 << (CParser.LineAfterPreprocessing - 96)) | (1 << (CParser.LineDirective - 96)) | (1 << (CParser.PragmaDirective - 96)) | (1 << (CParser.Whitespace - 96)) | (1 << (CParser.Newline - 96)) | (1 << (CParser.BlockComment - 96)) | (1 << (CParser.LineComment - 96)))) !== 0)) {
	                this.state = 682;
	                this.gccAttribute();
	            }

	            this.state = 689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gccAttribute() {
	    let localctx = new GccAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CParser.RULE_gccAttribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        _la = this._input.LA(1);
	        if(_la<=0 || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.RightParen - 59)) | (1 << (CParser.Comma - 59)))) !== 0)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.LeftParen) {
	            this.state = 691;
	            this.match(CParser.LeftParen);
	            this.state = 693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                this.state = 692;
	                this.argumentExpressionList();
	            }

	            this.state = 695;
	            this.match(CParser.RightParen);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedParenthesesBlock() {
	    let localctx = new NestedParenthesesBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CParser.RULE_nestedParenthesesBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Imaginary - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBracket - 32)) | (1 << (CParser.RightBracket - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CParser.RightShiftAssign - 96)) | (1 << (CParser.AndAssign - 96)) | (1 << (CParser.XorAssign - 96)) | (1 << (CParser.OrAssign - 96)) | (1 << (CParser.Equal - 96)) | (1 << (CParser.NotEqual - 96)) | (1 << (CParser.Arrow - 96)) | (1 << (CParser.Dot - 96)) | (1 << (CParser.Ellipsis - 96)) | (1 << (CParser.Identifier - 96)) | (1 << (CParser.Constant - 96)) | (1 << (CParser.DigitSequence - 96)) | (1 << (CParser.StringLiteral - 96)) | (1 << (CParser.ComplexDefine - 96)) | (1 << (CParser.IncludeDirective - 96)) | (1 << (CParser.AsmBlock - 96)) | (1 << (CParser.LineAfterPreprocessing - 96)) | (1 << (CParser.LineDirective - 96)) | (1 << (CParser.PragmaDirective - 96)) | (1 << (CParser.Whitespace - 96)) | (1 << (CParser.Newline - 96)) | (1 << (CParser.BlockComment - 96)) | (1 << (CParser.LineComment - 96)))) !== 0)) {
	            this.state = 703;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CParser.T__0:
	            case CParser.T__1:
	            case CParser.T__2:
	            case CParser.T__3:
	            case CParser.T__4:
	            case CParser.T__5:
	            case CParser.T__6:
	            case CParser.T__7:
	            case CParser.T__8:
	            case CParser.T__9:
	            case CParser.T__10:
	            case CParser.T__11:
	            case CParser.T__12:
	            case CParser.T__13:
	            case CParser.Auto:
	            case CParser.Break:
	            case CParser.Case:
	            case CParser.Char:
	            case CParser.Const:
	            case CParser.Continue:
	            case CParser.Default:
	            case CParser.Do:
	            case CParser.Double:
	            case CParser.Else:
	            case CParser.Enum:
	            case CParser.Extern:
	            case CParser.Float:
	            case CParser.For:
	            case CParser.Goto:
	            case CParser.If:
	            case CParser.Inline:
	            case CParser.Int:
	            case CParser.Long:
	            case CParser.Register:
	            case CParser.Restrict:
	            case CParser.Return:
	            case CParser.Short:
	            case CParser.Signed:
	            case CParser.Sizeof:
	            case CParser.Static:
	            case CParser.Struct:
	            case CParser.Switch:
	            case CParser.Typedef:
	            case CParser.Union:
	            case CParser.Unsigned:
	            case CParser.Void:
	            case CParser.Volatile:
	            case CParser.While:
	            case CParser.Alignas:
	            case CParser.Alignof:
	            case CParser.Atomic:
	            case CParser.Bool:
	            case CParser.Complex:
	            case CParser.Generic:
	            case CParser.Imaginary:
	            case CParser.Noreturn:
	            case CParser.StaticAssert:
	            case CParser.ThreadLocal:
	            case CParser.LeftBracket:
	            case CParser.RightBracket:
	            case CParser.LeftBrace:
	            case CParser.RightBrace:
	            case CParser.Less:
	            case CParser.LessEqual:
	            case CParser.Greater:
	            case CParser.GreaterEqual:
	            case CParser.LeftShift:
	            case CParser.RightShift:
	            case CParser.Plus:
	            case CParser.PlusPlus:
	            case CParser.Minus:
	            case CParser.MinusMinus:
	            case CParser.Star:
	            case CParser.Div:
	            case CParser.Mod:
	            case CParser.And:
	            case CParser.Or:
	            case CParser.AndAnd:
	            case CParser.OrOr:
	            case CParser.Caret:
	            case CParser.Not:
	            case CParser.Tilde:
	            case CParser.Question:
	            case CParser.Colon:
	            case CParser.Semi:
	            case CParser.Comma:
	            case CParser.Assign:
	            case CParser.StarAssign:
	            case CParser.DivAssign:
	            case CParser.ModAssign:
	            case CParser.PlusAssign:
	            case CParser.MinusAssign:
	            case CParser.LeftShiftAssign:
	            case CParser.RightShiftAssign:
	            case CParser.AndAssign:
	            case CParser.XorAssign:
	            case CParser.OrAssign:
	            case CParser.Equal:
	            case CParser.NotEqual:
	            case CParser.Arrow:
	            case CParser.Dot:
	            case CParser.Ellipsis:
	            case CParser.Identifier:
	            case CParser.Constant:
	            case CParser.DigitSequence:
	            case CParser.StringLiteral:
	            case CParser.ComplexDefine:
	            case CParser.IncludeDirective:
	            case CParser.AsmBlock:
	            case CParser.LineAfterPreprocessing:
	            case CParser.LineDirective:
	            case CParser.PragmaDirective:
	            case CParser.Whitespace:
	            case CParser.Newline:
	            case CParser.BlockComment:
	            case CParser.LineComment:
	                this.state = 698;
	                _la = this._input.LA(1);
	                if(_la<=0 || _la===CParser.LeftParen || _la===CParser.RightParen) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case CParser.LeftParen:
	                this.state = 699;
	                this.match(CParser.LeftParen);
	                this.state = 700;
	                this.nestedParenthesesBlock();
	                this.state = 701;
	                this.match(CParser.RightParen);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointer() {
	    let localctx = new PointerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CParser.RULE_pointer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 708;
	        		_la = this._input.LA(1);
	        		if(!(_la===CParser.Star || _la===CParser.Caret)) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		this.state = 710;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        		if(la_===1) {
	        		    this.state = 709;
	        		    this.typeQualifierList();

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 714; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,76, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQualifierList() {
	    let localctx = new TypeQualifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CParser.RULE_typeQualifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 716;
	        		this.typeQualifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 719; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,77, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterTypeList() {
	    let localctx = new ParameterTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CParser.RULE_parameterTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.parameterList();
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.Comma) {
	            this.state = 722;
	            this.match(CParser.Comma);
	            this.state = 723;
	            this.match(CParser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CParser.RULE_parameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this.parameterDeclaration();
	        this.state = 731;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 727;
	                this.match(CParser.Comma);
	                this.state = 728;
	                this.parameterDeclaration(); 
	            }
	            this.state = 733;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CParser.RULE_parameterDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.declarationSpecifiers();
	            this.state = 735;
	            this.declarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.declarationSpecifiers2();
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0)) {
	                this.state = 738;
	                this.abstractDeclarator();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CParser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.match(CParser.Identifier);
	        this.state = 748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 744;
	            this.match(CParser.Comma);
	            this.state = 745;
	            this.match(CParser.Identifier);
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CParser.RULE_typeName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.specifierQualifierList();
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0)) {
	            this.state = 752;
	            this.abstractDeclarator();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractDeclarator() {
	    let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CParser.RULE_abstractDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.state = 766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 755;
	            this.pointer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Star || _la===CParser.Caret) {
	                this.state = 756;
	                this.pointer();
	            }

	            this.state = 759;
	            this.directAbstractDeclarator(0);
	            this.state = 763;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CParser.T__10 || _la===CParser.T__11) {
	                this.state = 760;
	                this.gccDeclaratorExtension();
	                this.state = 765;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	directAbstractDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DirectAbstractDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 124;
	    this.enterRecursionRule(localctx, 124, CParser.RULE_directAbstractDeclarator, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 769;
	            this.match(CParser.LeftParen);
	            this.state = 770;
	            this.abstractDeclarator();
	            this.state = 771;
	            this.match(CParser.RightParen);
	            this.state = 775;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 772;
	                    this.gccDeclaratorExtension(); 
	                }
	                this.state = 777;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 778;
	            this.match(CParser.LeftBracket);
	            this.state = 780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                this.state = 779;
	                this.typeQualifierList();
	            }

	            this.state = 783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                this.state = 782;
	                this.assignmentExpression();
	            }

	            this.state = 785;
	            this.match(CParser.RightBracket);
	            break;

	        case 3:
	            this.state = 786;
	            this.match(CParser.LeftBracket);
	            this.state = 787;
	            this.match(CParser.Static);
	            this.state = 789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                this.state = 788;
	                this.typeQualifierList();
	            }

	            this.state = 791;
	            this.assignmentExpression();
	            this.state = 792;
	            this.match(CParser.RightBracket);
	            break;

	        case 4:
	            this.state = 794;
	            this.match(CParser.LeftBracket);
	            this.state = 795;
	            this.typeQualifierList();
	            this.state = 796;
	            this.match(CParser.Static);
	            this.state = 797;
	            this.assignmentExpression();
	            this.state = 798;
	            this.match(CParser.RightBracket);
	            break;

	        case 5:
	            this.state = 800;
	            this.match(CParser.LeftBracket);
	            this.state = 801;
	            this.match(CParser.Star);
	            this.state = 802;
	            this.match(CParser.RightBracket);
	            break;

	        case 6:
	            this.state = 803;
	            this.match(CParser.LeftParen);
	            this.state = 805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
	                this.state = 804;
	                this.parameterTypeList();
	            }

	            this.state = 807;
	            this.match(CParser.RightParen);
	            this.state = 811;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 808;
	                    this.gccDeclaratorExtension(); 
	                }
	                this.state = 813;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 859;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 857;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 816;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 817;
	                    this.match(CParser.LeftBracket);
	                    this.state = 819;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                        this.state = 818;
	                        this.typeQualifierList();
	                    }

	                    this.state = 822;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                        this.state = 821;
	                        this.assignmentExpression();
	                    }

	                    this.state = 824;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 825;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 826;
	                    this.match(CParser.LeftBracket);
	                    this.state = 827;
	                    this.match(CParser.Static);
	                    this.state = 829;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
	                        this.state = 828;
	                        this.typeQualifierList();
	                    }

	                    this.state = 831;
	                    this.assignmentExpression();
	                    this.state = 832;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 3:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 834;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 835;
	                    this.match(CParser.LeftBracket);
	                    this.state = 836;
	                    this.typeQualifierList();
	                    this.state = 837;
	                    this.match(CParser.Static);
	                    this.state = 838;
	                    this.assignmentExpression();
	                    this.state = 839;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 4:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 841;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 842;
	                    this.match(CParser.LeftBracket);
	                    this.state = 843;
	                    this.match(CParser.Star);
	                    this.state = 844;
	                    this.match(CParser.RightBracket);
	                    break;

	                case 5:
	                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
	                    this.state = 845;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 846;
	                    this.match(CParser.LeftParen);
	                    this.state = 848;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
	                        this.state = 847;
	                        this.parameterTypeList();
	                    }

	                    this.state = 850;
	                    this.match(CParser.RightParen);
	                    this.state = 854;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 851;
	                            this.gccDeclaratorExtension(); 
	                        }
	                        this.state = 856;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
	                    }

	                    break;

	                } 
	            }
	            this.state = 861;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typedefName() {
	    let localctx = new TypedefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CParser.RULE_typedefName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.match(CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CParser.RULE_initializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 872;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.T__0:
	        case CParser.T__1:
	        case CParser.T__2:
	        case CParser.Sizeof:
	        case CParser.Alignof:
	        case CParser.Generic:
	        case CParser.LeftParen:
	        case CParser.Plus:
	        case CParser.PlusPlus:
	        case CParser.Minus:
	        case CParser.MinusMinus:
	        case CParser.Star:
	        case CParser.And:
	        case CParser.AndAnd:
	        case CParser.Not:
	        case CParser.Tilde:
	        case CParser.Identifier:
	        case CParser.Constant:
	        case CParser.DigitSequence:
	        case CParser.StringLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 864;
	            this.assignmentExpression();
	            break;
	        case CParser.LeftBrace:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 865;
	            this.match(CParser.LeftBrace);
	            this.state = 866;
	            this.initializerList();
	            this.state = 868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CParser.Comma) {
	                this.state = 867;
	                this.match(CParser.Comma);
	            }

	            this.state = 870;
	            this.match(CParser.RightBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerList() {
	    let localctx = new InitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CParser.RULE_initializerList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CParser.LeftBracket || _la===CParser.Dot) {
	            this.state = 874;
	            this.designation();
	        }

	        this.state = 877;
	        this.initializer();
	        this.state = 885;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 878;
	                this.match(CParser.Comma);
	                this.state = 880;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CParser.LeftBracket || _la===CParser.Dot) {
	                    this.state = 879;
	                    this.designation();
	                }

	                this.state = 882;
	                this.initializer(); 
	            }
	            this.state = 887;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designation() {
	    let localctx = new DesignationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CParser.RULE_designation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.designatorList();
	        this.state = 889;
	        this.match(CParser.Assign);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designatorList() {
	    let localctx = new DesignatorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CParser.RULE_designatorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 892; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 891;
	            this.designator();
	            this.state = 894; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CParser.LeftBracket || _la===CParser.Dot);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designator() {
	    let localctx = new DesignatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CParser.RULE_designator);
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.LeftBracket:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 896;
	            this.match(CParser.LeftBracket);
	            this.state = 897;
	            this.constantExpression();
	            this.state = 898;
	            this.match(CParser.RightBracket);
	            break;
	        case CParser.Dot:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.match(CParser.Dot);
	            this.state = 901;
	            this.match(CParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticAssertDeclaration() {
	    let localctx = new StaticAssertDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CParser.RULE_staticAssertDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.match(CParser.StaticAssert);
	        this.state = 905;
	        this.match(CParser.LeftParen);
	        this.state = 906;
	        this.constantExpression();
	        this.state = 907;
	        this.match(CParser.Comma);
	        this.state = 909; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 908;
	            this.match(CParser.StringLiteral);
	            this.state = 911; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CParser.StringLiteral);
	        this.state = 913;
	        this.match(CParser.RightParen);
	        this.state = 914;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 916;
	            this.labeledStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 917;
	            this.compoundStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 918;
	            this.expressionStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 919;
	            this.selectionStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 920;
	            this.iterationStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 921;
	            this.jumpStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 922;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.T__10 || _la===CParser.T__12)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 923;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.T__13 || _la===CParser.Volatile)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 924;
	            this.match(CParser.LeftParen);
	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                this.state = 925;
	                this.logicalOrExpression();
	                this.state = 930;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===CParser.Comma) {
	                    this.state = 926;
	                    this.match(CParser.Comma);
	                    this.state = 927;
	                    this.logicalOrExpression();
	                    this.state = 932;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CParser.Colon) {
	                this.state = 935;
	                this.match(CParser.Colon);
	                this.state = 944;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                    this.state = 936;
	                    this.logicalOrExpression();
	                    this.state = 941;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===CParser.Comma) {
	                        this.state = 937;
	                        this.match(CParser.Comma);
	                        this.state = 938;
	                        this.logicalOrExpression();
	                        this.state = 943;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 950;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 951;
	            this.match(CParser.RightParen);
	            this.state = 952;
	            this.match(CParser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CParser.RULE_labeledStatement);
	    try {
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 955;
	            this.match(CParser.Identifier);
	            this.state = 956;
	            this.match(CParser.Colon);
	            this.state = 957;
	            this.statement();
	            break;
	        case CParser.Case:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 958;
	            this.match(CParser.Case);
	            this.state = 959;
	            this.constantExpression();
	            this.state = 960;
	            this.match(CParser.Colon);
	            this.state = 961;
	            this.statement();
	            break;
	        case CParser.Default:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 963;
	            this.match(CParser.Default);
	            this.state = 964;
	            this.match(CParser.Colon);
	            this.state = 965;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CParser.RULE_compoundStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.match(CParser.LeftBrace);
	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	            this.state = 969;
	            this.blockItemList();
	        }

	        this.state = 972;
	        this.match(CParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockItemList() {
	    let localctx = new BlockItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CParser.RULE_blockItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 974;
	            this.blockItem();
	            this.state = 977; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockItem() {
	    let localctx = new BlockItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CParser.RULE_blockItem);
	    try {
	        this.state = 981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 979;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 980;
	            this.declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CParser.RULE_expressionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	            this.state = 983;
	            this.expression();
	        }

	        this.state = 986;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionStatement() {
	    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CParser.RULE_selectionStatement);
	    try {
	        this.state = 1003;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.If:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.match(CParser.If);
	            this.state = 989;
	            this.match(CParser.LeftParen);
	            this.state = 990;
	            this.expression();
	            this.state = 991;
	            this.match(CParser.RightParen);
	            this.state = 992;
	            this.statement();
	            this.state = 995;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            if(la_===1) {
	                this.state = 993;
	                this.match(CParser.Else);
	                this.state = 994;
	                this.statement();

	            }
	            break;
	        case CParser.Switch:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 997;
	            this.match(CParser.Switch);
	            this.state = 998;
	            this.match(CParser.LeftParen);
	            this.state = 999;
	            this.expression();
	            this.state = 1000;
	            this.match(CParser.RightParen);
	            this.state = 1001;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CParser.RULE_iterationStatement);
	    try {
	        this.state = 1025;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CParser.While:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1005;
	            this.match(CParser.While);
	            this.state = 1006;
	            this.match(CParser.LeftParen);
	            this.state = 1007;
	            this.expression();
	            this.state = 1008;
	            this.match(CParser.RightParen);
	            this.state = 1009;
	            this.statement();
	            break;
	        case CParser.Do:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1011;
	            this.match(CParser.Do);
	            this.state = 1012;
	            this.statement();
	            this.state = 1013;
	            this.match(CParser.While);
	            this.state = 1014;
	            this.match(CParser.LeftParen);
	            this.state = 1015;
	            this.expression();
	            this.state = 1016;
	            this.match(CParser.RightParen);
	            this.state = 1017;
	            this.match(CParser.Semi);
	            break;
	        case CParser.For:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1019;
	            this.match(CParser.For);
	            this.state = 1020;
	            this.match(CParser.LeftParen);
	            this.state = 1021;
	            this.forCondition();
	            this.state = 1022;
	            this.match(CParser.RightParen);
	            this.state = 1023;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forCondition() {
	    let localctx = new ForConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CParser.RULE_forCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1027;
	            this.forDeclaration();
	            break;

	        case 2:
	            this.state = 1029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                this.state = 1028;
	                this.expression();
	            }

	            break;

	        }
	        this.state = 1033;
	        this.match(CParser.Semi);
	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	            this.state = 1034;
	            this.forExpression();
	        }

	        this.state = 1037;
	        this.match(CParser.Semi);
	        this.state = 1039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	            this.state = 1038;
	            this.forExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forDeclaration() {
	    let localctx = new ForDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CParser.RULE_forDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1041;
	        this.declarationSpecifiers();
	        this.state = 1043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0) || _la===CParser.Identifier) {
	            this.state = 1042;
	            this.initDeclaratorList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpression() {
	    let localctx = new ForExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CParser.RULE_forExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this.assignmentExpression();
	        this.state = 1050;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CParser.Comma) {
	            this.state = 1046;
	            this.match(CParser.Comma);
	            this.state = 1047;
	            this.assignmentExpression();
	            this.state = 1052;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jumpStatement() {
	    let localctx = new JumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CParser.RULE_jumpStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1053;
	            this.match(CParser.Goto);
	            this.state = 1054;
	            this.match(CParser.Identifier);
	            break;

	        case 2:
	            this.state = 1055;
	            _la = this._input.LA(1);
	            if(!(_la===CParser.Break || _la===CParser.Continue)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.state = 1056;
	            this.match(CParser.Return);
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
	                this.state = 1057;
	                this.expression();
	            }

	            break;

	        case 4:
	            this.state = 1060;
	            this.match(CParser.Goto);
	            this.state = 1061;
	            this.unaryExpression();
	            break;

	        }
	        this.state = 1064;
	        this.match(CParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CParser.RULE_compilationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)))) !== 0)) {
	            this.state = 1066;
	            this.translationUnit();
	        }

	        this.state = 1069;
	        this.match(CParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	translationUnit() {
	    let localctx = new TranslationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CParser.RULE_translationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1072; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1071;
	            this.externalDeclaration();
	            this.state = 1074; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalDeclaration() {
	    let localctx = new ExternalDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CParser.RULE_externalDeclaration);
	    try {
	        this.state = 1079;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1076;
	            this.functionDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1077;
	            this.declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1078;
	            this.match(CParser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CParser.RULE_functionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        if(la_===1) {
	            this.state = 1081;
	            this.declarationSpecifiers();

	        }
	        this.state = 1084;
	        this.declarator();
	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
	            this.state = 1085;
	            this.declarationList();
	        }

	        this.state = 1088;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationList() {
	    let localctx = new DeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CParser.RULE_declarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1091; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1090;
	            this.declaration();
	            this.state = 1093; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CParser.EOF = antlr4.Token.EOF;
CParser.T__0 = 1;
CParser.T__1 = 2;
CParser.T__2 = 3;
CParser.T__3 = 4;
CParser.T__4 = 5;
CParser.T__5 = 6;
CParser.T__6 = 7;
CParser.T__7 = 8;
CParser.T__8 = 9;
CParser.T__9 = 10;
CParser.T__10 = 11;
CParser.T__11 = 12;
CParser.T__12 = 13;
CParser.T__13 = 14;
CParser.Auto = 15;
CParser.Break = 16;
CParser.Case = 17;
CParser.Char = 18;
CParser.Const = 19;
CParser.Continue = 20;
CParser.Default = 21;
CParser.Do = 22;
CParser.Double = 23;
CParser.Else = 24;
CParser.Enum = 25;
CParser.Extern = 26;
CParser.Float = 27;
CParser.For = 28;
CParser.Goto = 29;
CParser.If = 30;
CParser.Inline = 31;
CParser.Int = 32;
CParser.Long = 33;
CParser.Register = 34;
CParser.Restrict = 35;
CParser.Return = 36;
CParser.Short = 37;
CParser.Signed = 38;
CParser.Sizeof = 39;
CParser.Static = 40;
CParser.Struct = 41;
CParser.Switch = 42;
CParser.Typedef = 43;
CParser.Union = 44;
CParser.Unsigned = 45;
CParser.Void = 46;
CParser.Volatile = 47;
CParser.While = 48;
CParser.Alignas = 49;
CParser.Alignof = 50;
CParser.Atomic = 51;
CParser.Bool = 52;
CParser.Complex = 53;
CParser.Generic = 54;
CParser.Imaginary = 55;
CParser.Noreturn = 56;
CParser.StaticAssert = 57;
CParser.ThreadLocal = 58;
CParser.LeftParen = 59;
CParser.RightParen = 60;
CParser.LeftBracket = 61;
CParser.RightBracket = 62;
CParser.LeftBrace = 63;
CParser.RightBrace = 64;
CParser.Less = 65;
CParser.LessEqual = 66;
CParser.Greater = 67;
CParser.GreaterEqual = 68;
CParser.LeftShift = 69;
CParser.RightShift = 70;
CParser.Plus = 71;
CParser.PlusPlus = 72;
CParser.Minus = 73;
CParser.MinusMinus = 74;
CParser.Star = 75;
CParser.Div = 76;
CParser.Mod = 77;
CParser.And = 78;
CParser.Or = 79;
CParser.AndAnd = 80;
CParser.OrOr = 81;
CParser.Caret = 82;
CParser.Not = 83;
CParser.Tilde = 84;
CParser.Question = 85;
CParser.Colon = 86;
CParser.Semi = 87;
CParser.Comma = 88;
CParser.Assign = 89;
CParser.StarAssign = 90;
CParser.DivAssign = 91;
CParser.ModAssign = 92;
CParser.PlusAssign = 93;
CParser.MinusAssign = 94;
CParser.LeftShiftAssign = 95;
CParser.RightShiftAssign = 96;
CParser.AndAssign = 97;
CParser.XorAssign = 98;
CParser.OrAssign = 99;
CParser.Equal = 100;
CParser.NotEqual = 101;
CParser.Arrow = 102;
CParser.Dot = 103;
CParser.Ellipsis = 104;
CParser.Identifier = 105;
CParser.Constant = 106;
CParser.DigitSequence = 107;
CParser.StringLiteral = 108;
CParser.ComplexDefine = 109;
CParser.IncludeDirective = 110;
CParser.AsmBlock = 111;
CParser.LineAfterPreprocessing = 112;
CParser.LineDirective = 113;
CParser.PragmaDirective = 114;
CParser.Whitespace = 115;
CParser.Newline = 116;
CParser.BlockComment = 117;
CParser.LineComment = 118;

CParser.RULE_primaryExpression = 0;
CParser.RULE_genericSelection = 1;
CParser.RULE_genericAssocList = 2;
CParser.RULE_genericAssociation = 3;
CParser.RULE_postfixExpression = 4;
CParser.RULE_argumentExpressionList = 5;
CParser.RULE_unaryExpression = 6;
CParser.RULE_unaryOperator = 7;
CParser.RULE_castExpression = 8;
CParser.RULE_multiplicativeExpression = 9;
CParser.RULE_additiveExpression = 10;
CParser.RULE_shiftExpression = 11;
CParser.RULE_relationalExpression = 12;
CParser.RULE_equalityExpression = 13;
CParser.RULE_andExpression = 14;
CParser.RULE_exclusiveOrExpression = 15;
CParser.RULE_inclusiveOrExpression = 16;
CParser.RULE_logicalAndExpression = 17;
CParser.RULE_logicalOrExpression = 18;
CParser.RULE_conditionalExpression = 19;
CParser.RULE_assignmentExpression = 20;
CParser.RULE_assignmentOperator = 21;
CParser.RULE_expression = 22;
CParser.RULE_constantExpression = 23;
CParser.RULE_declaration = 24;
CParser.RULE_declarationSpecifiers = 25;
CParser.RULE_declarationSpecifiers2 = 26;
CParser.RULE_declarationSpecifier = 27;
CParser.RULE_initDeclaratorList = 28;
CParser.RULE_initDeclarator = 29;
CParser.RULE_storageClassSpecifier = 30;
CParser.RULE_typeSpecifier = 31;
CParser.RULE_structOrUnionSpecifier = 32;
CParser.RULE_structOrUnion = 33;
CParser.RULE_structDeclarationList = 34;
CParser.RULE_structDeclaration = 35;
CParser.RULE_specifierQualifierList = 36;
CParser.RULE_structDeclaratorList = 37;
CParser.RULE_structDeclarator = 38;
CParser.RULE_enumSpecifier = 39;
CParser.RULE_enumeratorList = 40;
CParser.RULE_enumerator = 41;
CParser.RULE_enumerationConstant = 42;
CParser.RULE_atomicTypeSpecifier = 43;
CParser.RULE_typeQualifier = 44;
CParser.RULE_functionSpecifier = 45;
CParser.RULE_alignmentSpecifier = 46;
CParser.RULE_declarator = 47;
CParser.RULE_directDeclarator = 48;
CParser.RULE_gccDeclaratorExtension = 49;
CParser.RULE_gccAttributeSpecifier = 50;
CParser.RULE_gccAttributeList = 51;
CParser.RULE_gccAttribute = 52;
CParser.RULE_nestedParenthesesBlock = 53;
CParser.RULE_pointer = 54;
CParser.RULE_typeQualifierList = 55;
CParser.RULE_parameterTypeList = 56;
CParser.RULE_parameterList = 57;
CParser.RULE_parameterDeclaration = 58;
CParser.RULE_identifierList = 59;
CParser.RULE_typeName = 60;
CParser.RULE_abstractDeclarator = 61;
CParser.RULE_directAbstractDeclarator = 62;
CParser.RULE_typedefName = 63;
CParser.RULE_initializer = 64;
CParser.RULE_initializerList = 65;
CParser.RULE_designation = 66;
CParser.RULE_designatorList = 67;
CParser.RULE_designator = 68;
CParser.RULE_staticAssertDeclaration = 69;
CParser.RULE_statement = 70;
CParser.RULE_labeledStatement = 71;
CParser.RULE_compoundStatement = 72;
CParser.RULE_blockItemList = 73;
CParser.RULE_blockItem = 74;
CParser.RULE_expressionStatement = 75;
CParser.RULE_selectionStatement = 76;
CParser.RULE_iterationStatement = 77;
CParser.RULE_forCondition = 78;
CParser.RULE_forDeclaration = 79;
CParser.RULE_forExpression = 80;
CParser.RULE_jumpStatement = 81;
CParser.RULE_compilationUnit = 82;
CParser.RULE_translationUnit = 83;
CParser.RULE_externalDeclaration = 84;
CParser.RULE_functionDefinition = 85;
CParser.RULE_declarationList = 86;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_primaryExpression;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Constant() {
	    return this.getToken(CParser.Constant, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	genericSelection() {
	    return this.getTypedRuleContext(GenericSelectionContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class GenericSelectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericSelection;
    }

	Generic() {
	    return this.getToken(CParser.Generic, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	genericAssocList() {
	    return this.getTypedRuleContext(GenericAssocListContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericSelection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericSelection(this);
		}
	}


}



class GenericAssocListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericAssocList;
    }

	genericAssociation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericAssociationContext);
	    } else {
	        return this.getTypedRuleContext(GenericAssociationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericAssocList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericAssocList(this);
		}
	}


}



class GenericAssociationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_genericAssociation;
    }

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	Default() {
	    return this.getToken(CParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGenericAssociation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGenericAssociation(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_postfixExpression;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	LeftBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftBracket);
	    } else {
	        return this.getToken(CParser.LeftBracket, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RightBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightBracket);
	    } else {
	        return this.getToken(CParser.RightBracket, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Identifier);
	    } else {
	        return this.getToken(CParser.Identifier, i);
	    }
	};


	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Dot);
	    } else {
	        return this.getToken(CParser.Dot, i);
	    }
	};


	Arrow = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Arrow);
	    } else {
	        return this.getToken(CParser.Arrow, i);
	    }
	};


	PlusPlus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.PlusPlus);
	    } else {
	        return this.getToken(CParser.PlusPlus, i);
	    }
	};


	MinusMinus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.MinusMinus);
	    } else {
	        return this.getToken(CParser.MinusMinus, i);
	    }
	};


	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	argumentExpressionList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentExpressionListContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentExpressionListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class ArgumentExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_argumentExpressionList;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterArgumentExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitArgumentExpressionList(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_unaryExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	AndAnd() {
	    return this.getToken(CParser.AndAnd, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Sizeof = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Sizeof);
	    } else {
	        return this.getToken(CParser.Sizeof, i);
	    }
	};


	Alignof() {
	    return this.getToken(CParser.Alignof, 0);
	};

	PlusPlus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.PlusPlus);
	    } else {
	        return this.getToken(CParser.PlusPlus, i);
	    }
	};


	MinusMinus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.MinusMinus);
	    } else {
	        return this.getToken(CParser.MinusMinus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_unaryOperator;
    }

	And() {
	    return this.getToken(CParser.And, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	Plus() {
	    return this.getToken(CParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(CParser.Minus, 0);
	};

	Tilde() {
	    return this.getToken(CParser.Tilde, 0);
	};

	Not() {
	    return this.getToken(CParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_castExpression;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCastExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_multiplicativeExpression;
    }

	castExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CastExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CastExpressionContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Star);
	    } else {
	        return this.getToken(CParser.Star, i);
	    }
	};


	Div = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Div);
	    } else {
	        return this.getToken(CParser.Div, i);
	    }
	};


	Mod = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Mod);
	    } else {
	        return this.getToken(CParser.Mod, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Plus);
	    } else {
	        return this.getToken(CParser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Minus);
	    } else {
	        return this.getToken(CParser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	LeftShift = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftShift);
	    } else {
	        return this.getToken(CParser.LeftShift, i);
	    }
	};


	RightShift = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightShift);
	    } else {
	        return this.getToken(CParser.RightShift, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_relationalExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Less);
	    } else {
	        return this.getToken(CParser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Greater);
	    } else {
	        return this.getToken(CParser.Greater, i);
	    }
	};


	LessEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LessEqual);
	    } else {
	        return this.getToken(CParser.LessEqual, i);
	    }
	};


	GreaterEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.GreaterEqual);
	    } else {
	        return this.getToken(CParser.GreaterEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	Equal = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Equal);
	    } else {
	        return this.getToken(CParser.Equal, i);
	    }
	};


	NotEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.NotEqual);
	    } else {
	        return this.getToken(CParser.NotEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_andExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.And);
	    } else {
	        return this.getToken(CParser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAndExpression(this);
		}
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_exclusiveOrExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Caret);
	    } else {
	        return this.getToken(CParser.Caret, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExclusiveOrExpressionContext,i);
	    }
	};

	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Or);
	    } else {
	        return this.getToken(CParser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_logicalAndExpression;
    }

	inclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InclusiveOrExpressionContext,i);
	    }
	};

	AndAnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.AndAnd);
	    } else {
	        return this.getToken(CParser.AndAnd, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	OrOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.OrOr);
	    } else {
	        return this.getToken(CParser.OrOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_conditionalExpression;
    }

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	Question() {
	    return this.getToken(CParser.Question, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_assignmentOperator;
    }

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	StarAssign() {
	    return this.getToken(CParser.StarAssign, 0);
	};

	DivAssign() {
	    return this.getToken(CParser.DivAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CParser.ModAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(CParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CParser.MinusAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CParser.LeftShiftAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CParser.RightShiftAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CParser.AndAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CParser.XorAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CParser.OrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_expression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_constantExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class DeclarationSpecifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifiers;
    }

	declarationSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifiers(this);
		}
	}


}



class DeclarationSpecifiers2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifiers2;
    }

	declarationSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifiers2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifiers2(this);
		}
	}


}



class DeclarationSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationSpecifier;
    }

	storageClassSpecifier() {
	    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	typeQualifier() {
	    return this.getTypedRuleContext(TypeQualifierContext,0);
	};

	functionSpecifier() {
	    return this.getTypedRuleContext(FunctionSpecifierContext,0);
	};

	alignmentSpecifier() {
	    return this.getTypedRuleContext(AlignmentSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationSpecifier(this);
		}
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initDeclaratorList;
    }

	initDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(InitDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitDeclaratorList(this);
		}
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitDeclarator(this);
		}
	}


}



class StorageClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_storageClassSpecifier;
    }

	Typedef() {
	    return this.getToken(CParser.Typedef, 0);
	};

	Extern() {
	    return this.getToken(CParser.Extern, 0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	ThreadLocal() {
	    return this.getToken(CParser.ThreadLocal, 0);
	};

	Auto() {
	    return this.getToken(CParser.Auto, 0);
	};

	Register() {
	    return this.getToken(CParser.Register, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStorageClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStorageClassSpecifier(this);
		}
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeSpecifier;
    }

	Void() {
	    return this.getToken(CParser.Void, 0);
	};

	Char() {
	    return this.getToken(CParser.Char, 0);
	};

	Short() {
	    return this.getToken(CParser.Short, 0);
	};

	Int() {
	    return this.getToken(CParser.Int, 0);
	};

	Long() {
	    return this.getToken(CParser.Long, 0);
	};

	Float() {
	    return this.getToken(CParser.Float, 0);
	};

	Double() {
	    return this.getToken(CParser.Double, 0);
	};

	Signed() {
	    return this.getToken(CParser.Signed, 0);
	};

	Unsigned() {
	    return this.getToken(CParser.Unsigned, 0);
	};

	Bool() {
	    return this.getToken(CParser.Bool, 0);
	};

	Complex() {
	    return this.getToken(CParser.Complex, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	atomicTypeSpecifier() {
	    return this.getTypedRuleContext(AtomicTypeSpecifierContext,0);
	};

	structOrUnionSpecifier() {
	    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
	};

	enumSpecifier() {
	    return this.getTypedRuleContext(EnumSpecifierContext,0);
	};

	typedefName() {
	    return this.getTypedRuleContext(TypedefNameContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeSpecifier(this);
		}
	}


}



class StructOrUnionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structOrUnionSpecifier;
    }

	structOrUnion() {
	    return this.getTypedRuleContext(StructOrUnionContext,0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	structDeclarationList() {
	    return this.getTypedRuleContext(StructDeclarationListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructOrUnionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructOrUnionSpecifier(this);
		}
	}


}



class StructOrUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structOrUnion;
    }

	Struct() {
	    return this.getToken(CParser.Struct, 0);
	};

	Union() {
	    return this.getToken(CParser.Union, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructOrUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructOrUnion(this);
		}
	}


}



class StructDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclarationList;
    }

	structDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(StructDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclarationList(this);
		}
	}


}



class StructDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclaration;
    }

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	structDeclaratorList() {
	    return this.getTypedRuleContext(StructDeclaratorListContext,0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclaration(this);
		}
	}


}



class SpecifierQualifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_specifierQualifierList;
    }

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	typeQualifier() {
	    return this.getTypedRuleContext(TypeQualifierContext,0);
	};

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterSpecifierQualifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitSpecifierQualifierList(this);
		}
	}


}



class StructDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclaratorList;
    }

	structDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(StructDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclaratorList(this);
		}
	}


}



class StructDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_structDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStructDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStructDeclarator(this);
		}
	}


}



class EnumSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumSpecifier;
    }

	Enum() {
	    return this.getToken(CParser.Enum, 0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	enumeratorList() {
	    return this.getTypedRuleContext(EnumeratorListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumSpecifier(this);
		}
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumeratorList;
    }

	enumerator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumeratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumeratorList(this);
		}
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumerator;
    }

	enumerationConstant() {
	    return this.getTypedRuleContext(EnumerationConstantContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumerator(this);
		}
	}


}



class EnumerationConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_enumerationConstant;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterEnumerationConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitEnumerationConstant(this);
		}
	}


}



class AtomicTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_atomicTypeSpecifier;
    }

	Atomic() {
	    return this.getToken(CParser.Atomic, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAtomicTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAtomicTypeSpecifier(this);
		}
	}


}



class TypeQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeQualifier;
    }

	Const() {
	    return this.getToken(CParser.Const, 0);
	};

	Restrict() {
	    return this.getToken(CParser.Restrict, 0);
	};

	Volatile() {
	    return this.getToken(CParser.Volatile, 0);
	};

	Atomic() {
	    return this.getToken(CParser.Atomic, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeQualifier(this);
		}
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_functionSpecifier;
    }

	Inline() {
	    return this.getToken(CParser.Inline, 0);
	};

	Noreturn() {
	    return this.getToken(CParser.Noreturn, 0);
	};

	gccAttributeSpecifier() {
	    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitFunctionSpecifier(this);
		}
	}


}



class AlignmentSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_alignmentSpecifier;
    }

	Alignas() {
	    return this.getToken(CParser.Alignas, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAlignmentSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAlignmentSpecifier(this);
		}
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarator;
    }

	directDeclarator() {
	    return this.getTypedRuleContext(DirectDeclaratorContext,0);
	};

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarator(this);
		}
	}


}



class DirectDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_directDeclarator;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	DigitSequence() {
	    return this.getToken(CParser.DigitSequence, 0);
	};

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	directDeclarator() {
	    return this.getTypedRuleContext(DirectDeclaratorContext,0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	typeQualifierList() {
	    return this.getTypedRuleContext(TypeQualifierListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	parameterTypeList() {
	    return this.getTypedRuleContext(ParameterTypeListContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDirectDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDirectDeclarator(this);
		}
	}


}



class GccDeclaratorExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccDeclaratorExtension;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	gccAttributeSpecifier() {
	    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccDeclaratorExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccDeclaratorExtension(this);
		}
	}


}



class GccAttributeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttributeSpecifier;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	gccAttributeList() {
	    return this.getTypedRuleContext(GccAttributeListContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttributeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttributeSpecifier(this);
		}
	}


}



class GccAttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttributeList;
    }

	gccAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccAttributeContext);
	    } else {
	        return this.getTypedRuleContext(GccAttributeContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttributeList(this);
		}
	}


}



class GccAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_gccAttribute;
    }

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	argumentExpressionList() {
	    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterGccAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitGccAttribute(this);
		}
	}


}



class NestedParenthesesBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_nestedParenthesesBlock;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.LeftParen);
	    } else {
	        return this.getToken(CParser.LeftParen, i);
	    }
	};


	nestedParenthesesBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedParenthesesBlockContext);
	    } else {
	        return this.getTypedRuleContext(NestedParenthesesBlockContext,i);
	    }
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.RightParen);
	    } else {
	        return this.getToken(CParser.RightParen, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterNestedParenthesesBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitNestedParenthesesBlock(this);
		}
	}


}



class PointerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_pointer;
    }

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Star);
	    } else {
	        return this.getToken(CParser.Star, i);
	    }
	};


	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Caret);
	    } else {
	        return this.getToken(CParser.Caret, i);
	    }
	};


	typeQualifierList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeQualifierListContext);
	    } else {
	        return this.getTypedRuleContext(TypeQualifierListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterPointer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitPointer(this);
		}
	}


}



class TypeQualifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeQualifierList;
    }

	typeQualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeQualifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeQualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeQualifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeQualifierList(this);
		}
	}


}



class ParameterTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterTypeList;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	Ellipsis() {
	    return this.getToken(CParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterTypeList(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_parameterDeclaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	declarationSpecifiers2() {
	    return this.getTypedRuleContext(DeclarationSpecifiers2Context,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitParameterDeclaration(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_identifierList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Identifier);
	    } else {
	        return this.getToken(CParser.Identifier, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typeName;
    }

	specifierQualifierList() {
	    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class AbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_abstractDeclarator;
    }

	pointer() {
	    return this.getTypedRuleContext(PointerContext,0);
	};

	directAbstractDeclarator() {
	    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitAbstractDeclarator(this);
		}
	}


}



class DirectAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_directAbstractDeclarator;
    }

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	gccDeclaratorExtension = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
	    } else {
	        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
	    }
	};

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	typeQualifierList() {
	    return this.getTypedRuleContext(TypeQualifierListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	Static() {
	    return this.getToken(CParser.Static, 0);
	};

	Star() {
	    return this.getToken(CParser.Star, 0);
	};

	parameterTypeList() {
	    return this.getTypedRuleContext(ParameterTypeListContext,0);
	};

	directAbstractDeclarator() {
	    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDirectAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDirectAbstractDeclarator(this);
		}
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_typedefName;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTypedefName(this);
		}
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initializer;
    }

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitializer(this);
		}
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_initializerList;
    }

	initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerContext);
	    } else {
	        return this.getTypedRuleContext(InitializerContext,i);
	    }
	};

	designation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignationContext);
	    } else {
	        return this.getTypedRuleContext(DesignationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitInitializerList(this);
		}
	}


}



class DesignationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designation;
    }

	designatorList() {
	    return this.getTypedRuleContext(DesignatorListContext,0);
	};

	Assign() {
	    return this.getToken(CParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignation(this);
		}
	}


}



class DesignatorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designatorList;
    }

	designator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DesignatorContext);
	    } else {
	        return this.getTypedRuleContext(DesignatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignatorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignatorList(this);
		}
	}


}



class DesignatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_designator;
    }

	LeftBracket() {
	    return this.getToken(CParser.LeftBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	RightBracket() {
	    return this.getToken(CParser.RightBracket, 0);
	};

	Dot() {
	    return this.getToken(CParser.Dot, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDesignator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDesignator(this);
		}
	}


}



class StaticAssertDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_staticAssertDeclaration;
    }

	StaticAssert() {
	    return this.getToken(CParser.StaticAssert, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CParser.Comma, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.StringLiteral);
	    } else {
	        return this.getToken(CParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStaticAssertDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStaticAssertDeclaration(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_statement;
    }

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	selectionStatement() {
	    return this.getTypedRuleContext(SelectionStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	jumpStatement() {
	    return this.getTypedRuleContext(JumpStatementContext,0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	Volatile() {
	    return this.getToken(CParser.Volatile, 0);
	};

	logicalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Colon);
	    } else {
	        return this.getToken(CParser.Colon, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitStatement(this);
		}
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_labeledStatement;
    }

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(CParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Case() {
	    return this.getToken(CParser.Case, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Default() {
	    return this.getToken(CParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitLabeledStatement(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_compoundStatement;
    }

	LeftBrace() {
	    return this.getToken(CParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CParser.RightBrace, 0);
	};

	blockItemList() {
	    return this.getTypedRuleContext(BlockItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCompoundStatement(this);
		}
	}


}



class BlockItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_blockItemList;
    }

	blockItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockItemContext);
	    } else {
	        return this.getTypedRuleContext(BlockItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterBlockItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitBlockItemList(this);
		}
	}


}



class BlockItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_blockItem;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterBlockItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitBlockItem(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_expressionStatement;
    }

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_selectionStatement;
    }

	If() {
	    return this.getToken(CParser.If, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(CParser.Else, 0);
	};

	Switch() {
	    return this.getToken(CParser.Switch, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitSelectionStatement(this);
		}
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_iterationStatement;
    }

	While() {
	    return this.getToken(CParser.While, 0);
	};

	LeftParen() {
	    return this.getToken(CParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CParser.RightParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Do() {
	    return this.getToken(CParser.Do, 0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	For() {
	    return this.getToken(CParser.For, 0);
	};

	forCondition() {
	    return this.getTypedRuleContext(ForConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitIterationStatement(this);
		}
	}


}



class ForConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forCondition;
    }

	Semi = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Semi);
	    } else {
	        return this.getToken(CParser.Semi, i);
	    }
	};


	forDeclaration() {
	    return this.getTypedRuleContext(ForDeclarationContext,0);
	};

	forExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ForExpressionContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForCondition(this);
		}
	}


}



class ForDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forDeclaration;
    }

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForDeclaration(this);
		}
	}


}



class ForExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_forExpression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CParser.Comma);
	    } else {
	        return this.getToken(CParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterForExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitForExpression(this);
		}
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_jumpStatement;
    }

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	Goto() {
	    return this.getToken(CParser.Goto, 0);
	};

	Identifier() {
	    return this.getToken(CParser.Identifier, 0);
	};

	Return() {
	    return this.getToken(CParser.Return, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	Continue() {
	    return this.getToken(CParser.Continue, 0);
	};

	Break() {
	    return this.getToken(CParser.Break, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitJumpStatement(this);
		}
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(CParser.EOF, 0);
	};

	translationUnit() {
	    return this.getTypedRuleContext(TranslationUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class TranslationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_translationUnit;
    }

	externalDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExternalDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ExternalDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterTranslationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitTranslationUnit(this);
		}
	}


}



class ExternalDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_externalDeclaration;
    }

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	Semi() {
	    return this.getToken(CParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterExternalDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitExternalDeclaration(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_functionDefinition;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	declarationSpecifiers() {
	    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class DeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CParser.RULE_declarationList;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.enterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CListener ) {
	        listener.exitDeclarationList(this);
		}
	}


}




CParser.PrimaryExpressionContext = PrimaryExpressionContext; 
CParser.GenericSelectionContext = GenericSelectionContext; 
CParser.GenericAssocListContext = GenericAssocListContext; 
CParser.GenericAssociationContext = GenericAssociationContext; 
CParser.PostfixExpressionContext = PostfixExpressionContext; 
CParser.ArgumentExpressionListContext = ArgumentExpressionListContext; 
CParser.UnaryExpressionContext = UnaryExpressionContext; 
CParser.UnaryOperatorContext = UnaryOperatorContext; 
CParser.CastExpressionContext = CastExpressionContext; 
CParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CParser.ShiftExpressionContext = ShiftExpressionContext; 
CParser.RelationalExpressionContext = RelationalExpressionContext; 
CParser.EqualityExpressionContext = EqualityExpressionContext; 
CParser.AndExpressionContext = AndExpressionContext; 
CParser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
CParser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
CParser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
CParser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
CParser.ConditionalExpressionContext = ConditionalExpressionContext; 
CParser.AssignmentExpressionContext = AssignmentExpressionContext; 
CParser.AssignmentOperatorContext = AssignmentOperatorContext; 
CParser.ExpressionContext = ExpressionContext; 
CParser.ConstantExpressionContext = ConstantExpressionContext; 
CParser.DeclarationContext = DeclarationContext; 
CParser.DeclarationSpecifiersContext = DeclarationSpecifiersContext; 
CParser.DeclarationSpecifiers2Context = DeclarationSpecifiers2Context; 
CParser.DeclarationSpecifierContext = DeclarationSpecifierContext; 
CParser.InitDeclaratorListContext = InitDeclaratorListContext; 
CParser.InitDeclaratorContext = InitDeclaratorContext; 
CParser.StorageClassSpecifierContext = StorageClassSpecifierContext; 
CParser.TypeSpecifierContext = TypeSpecifierContext; 
CParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext; 
CParser.StructOrUnionContext = StructOrUnionContext; 
CParser.StructDeclarationListContext = StructDeclarationListContext; 
CParser.StructDeclarationContext = StructDeclarationContext; 
CParser.SpecifierQualifierListContext = SpecifierQualifierListContext; 
CParser.StructDeclaratorListContext = StructDeclaratorListContext; 
CParser.StructDeclaratorContext = StructDeclaratorContext; 
CParser.EnumSpecifierContext = EnumSpecifierContext; 
CParser.EnumeratorListContext = EnumeratorListContext; 
CParser.EnumeratorContext = EnumeratorContext; 
CParser.EnumerationConstantContext = EnumerationConstantContext; 
CParser.AtomicTypeSpecifierContext = AtomicTypeSpecifierContext; 
CParser.TypeQualifierContext = TypeQualifierContext; 
CParser.FunctionSpecifierContext = FunctionSpecifierContext; 
CParser.AlignmentSpecifierContext = AlignmentSpecifierContext; 
CParser.DeclaratorContext = DeclaratorContext; 
CParser.DirectDeclaratorContext = DirectDeclaratorContext; 
CParser.GccDeclaratorExtensionContext = GccDeclaratorExtensionContext; 
CParser.GccAttributeSpecifierContext = GccAttributeSpecifierContext; 
CParser.GccAttributeListContext = GccAttributeListContext; 
CParser.GccAttributeContext = GccAttributeContext; 
CParser.NestedParenthesesBlockContext = NestedParenthesesBlockContext; 
CParser.PointerContext = PointerContext; 
CParser.TypeQualifierListContext = TypeQualifierListContext; 
CParser.ParameterTypeListContext = ParameterTypeListContext; 
CParser.ParameterListContext = ParameterListContext; 
CParser.ParameterDeclarationContext = ParameterDeclarationContext; 
CParser.IdentifierListContext = IdentifierListContext; 
CParser.TypeNameContext = TypeNameContext; 
CParser.AbstractDeclaratorContext = AbstractDeclaratorContext; 
CParser.DirectAbstractDeclaratorContext = DirectAbstractDeclaratorContext; 
CParser.TypedefNameContext = TypedefNameContext; 
CParser.InitializerContext = InitializerContext; 
CParser.InitializerListContext = InitializerListContext; 
CParser.DesignationContext = DesignationContext; 
CParser.DesignatorListContext = DesignatorListContext; 
CParser.DesignatorContext = DesignatorContext; 
CParser.StaticAssertDeclarationContext = StaticAssertDeclarationContext; 
CParser.StatementContext = StatementContext; 
CParser.LabeledStatementContext = LabeledStatementContext; 
CParser.CompoundStatementContext = CompoundStatementContext; 
CParser.BlockItemListContext = BlockItemListContext; 
CParser.BlockItemContext = BlockItemContext; 
CParser.ExpressionStatementContext = ExpressionStatementContext; 
CParser.SelectionStatementContext = SelectionStatementContext; 
CParser.IterationStatementContext = IterationStatementContext; 
CParser.ForConditionContext = ForConditionContext; 
CParser.ForDeclarationContext = ForDeclarationContext; 
CParser.ForExpressionContext = ForExpressionContext; 
CParser.JumpStatementContext = JumpStatementContext; 
CParser.CompilationUnitContext = CompilationUnitContext; 
CParser.TranslationUnitContext = TranslationUnitContext; 
CParser.ExternalDeclarationContext = ExternalDeclarationContext; 
CParser.FunctionDefinitionContext = FunctionDefinitionContext; 
CParser.DeclarationListContext = DeclarationListContext; 
