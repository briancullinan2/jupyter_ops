// Generated from Resources/Parsers/pl0/pl0.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,288,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,
1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,
1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,5,56,275,8,56,10,
56,12,56,278,9,56,1,57,4,57,281,8,57,11,57,12,57,282,1,58,1,58,1,58,1,58,
0,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
26,53,27,55,28,57,29,59,30,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,
79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,
107,0,109,0,111,0,113,31,115,32,117,33,1,0,29,2,0,65,65,97,97,2,0,66,66,
98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,
102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,
106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,
110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,
114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,
118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,
122,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,263,0,1,1,0,0,0,0,3,
1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,121,1,0,
0,0,5,123,1,0,0,0,7,125,1,0,0,0,9,127,1,0,0,0,11,130,1,0,0,0,13,132,1,0,
0,0,15,134,1,0,0,0,17,136,1,0,0,0,19,138,1,0,0,0,21,141,1,0,0,0,23,143,1,
0,0,0,25,146,1,0,0,0,27,148,1,0,0,0,29,150,1,0,0,0,31,152,1,0,0,0,33,154,
1,0,0,0,35,156,1,0,0,0,37,158,1,0,0,0,39,164,1,0,0,0,41,170,1,0,0,0,43,173,
1,0,0,0,45,176,1,0,0,0,47,181,1,0,0,0,49,185,1,0,0,0,51,191,1,0,0,0,53,195,
1,0,0,0,55,200,1,0,0,0,57,206,1,0,0,0,59,210,1,0,0,0,61,220,1,0,0,0,63,222,
1,0,0,0,65,224,1,0,0,0,67,226,1,0,0,0,69,228,1,0,0,0,71,230,1,0,0,0,73,232,
1,0,0,0,75,234,1,0,0,0,77,236,1,0,0,0,79,238,1,0,0,0,81,240,1,0,0,0,83,242,
1,0,0,0,85,244,1,0,0,0,87,246,1,0,0,0,89,248,1,0,0,0,91,250,1,0,0,0,93,252,
1,0,0,0,95,254,1,0,0,0,97,256,1,0,0,0,99,258,1,0,0,0,101,260,1,0,0,0,103,
262,1,0,0,0,105,264,1,0,0,0,107,266,1,0,0,0,109,268,1,0,0,0,111,270,1,0,
0,0,113,272,1,0,0,0,115,280,1,0,0,0,117,284,1,0,0,0,119,120,5,46,0,0,120,
2,1,0,0,0,121,122,5,61,0,0,122,4,1,0,0,0,123,124,5,44,0,0,124,6,1,0,0,0,
125,126,5,59,0,0,126,8,1,0,0,0,127,128,5,58,0,0,128,129,5,61,0,0,129,10,
1,0,0,0,130,131,5,63,0,0,131,12,1,0,0,0,132,133,5,33,0,0,133,14,1,0,0,0,
134,135,5,35,0,0,135,16,1,0,0,0,136,137,5,60,0,0,137,18,1,0,0,0,138,139,
5,60,0,0,139,140,5,61,0,0,140,20,1,0,0,0,141,142,5,62,0,0,142,22,1,0,0,0,
143,144,5,62,0,0,144,145,5,61,0,0,145,24,1,0,0,0,146,147,5,43,0,0,147,26,
1,0,0,0,148,149,5,45,0,0,149,28,1,0,0,0,150,151,5,42,0,0,151,30,1,0,0,0,
152,153,5,47,0,0,153,32,1,0,0,0,154,155,5,40,0,0,155,34,1,0,0,0,156,157,
5,41,0,0,157,36,1,0,0,0,158,159,3,105,52,0,159,160,3,95,47,0,160,161,3,77,
38,0,161,162,3,99,49,0,162,163,3,69,34,0,163,38,1,0,0,0,164,165,3,105,52,
0,165,166,3,75,37,0,166,167,3,77,38,0,167,168,3,83,41,0,168,169,3,69,34,
0,169,40,1,0,0,0,170,171,3,67,33,0,171,172,3,89,44,0,172,42,1,0,0,0,173,
174,3,77,38,0,174,175,3,71,35,0,175,44,1,0,0,0,176,177,3,99,49,0,177,178,
3,75,37,0,178,179,3,69,34,0,179,180,3,87,43,0,180,46,1,0,0,0,181,182,3,89,
44,0,182,183,3,67,33,0,183,184,3,67,33,0,184,48,1,0,0,0,185,186,3,63,31,
0,186,187,3,69,34,0,187,188,3,73,36,0,188,189,3,77,38,0,189,190,3,87,43,
0,190,50,1,0,0,0,191,192,3,69,34,0,192,193,3,87,43,0,193,194,3,67,33,0,194,
52,1,0,0,0,195,196,3,65,32,0,196,197,3,61,30,0,197,198,3,83,41,0,198,199,
3,83,41,0,199,54,1,0,0,0,200,201,3,65,32,0,201,202,3,89,44,0,202,203,3,87,
43,0,203,204,3,97,48,0,204,205,3,99,49,0,205,56,1,0,0,0,206,207,3,103,51,
0,207,208,3,61,30,0,208,209,3,95,47,0,209,58,1,0,0,0,210,211,3,91,45,0,211,
212,3,95,47,0,212,213,3,89,44,0,213,214,3,65,32,0,214,215,3,69,34,0,215,
216,3,67,33,0,216,217,3,101,50,0,217,218,3,95,47,0,218,219,3,69,34,0,219,
60,1,0,0,0,220,221,7,0,0,0,221,62,1,0,0,0,222,223,7,1,0,0,223,64,1,0,0,0,
224,225,7,2,0,0,225,66,1,0,0,0,226,227,7,3,0,0,227,68,1,0,0,0,228,229,7,
4,0,0,229,70,1,0,0,0,230,231,7,5,0,0,231,72,1,0,0,0,232,233,7,6,0,0,233,
74,1,0,0,0,234,235,7,7,0,0,235,76,1,0,0,0,236,237,7,8,0,0,237,78,1,0,0,0,
238,239,7,9,0,0,239,80,1,0,0,0,240,241,7,10,0,0,241,82,1,0,0,0,242,243,7,
11,0,0,243,84,1,0,0,0,244,245,7,12,0,0,245,86,1,0,0,0,246,247,7,13,0,0,247,
88,1,0,0,0,248,249,7,14,0,0,249,90,1,0,0,0,250,251,7,15,0,0,251,92,1,0,0,
0,252,253,7,16,0,0,253,94,1,0,0,0,254,255,7,17,0,0,255,96,1,0,0,0,256,257,
7,18,0,0,257,98,1,0,0,0,258,259,7,19,0,0,259,100,1,0,0,0,260,261,7,20,0,
0,261,102,1,0,0,0,262,263,7,21,0,0,263,104,1,0,0,0,264,265,7,22,0,0,265,
106,1,0,0,0,266,267,7,23,0,0,267,108,1,0,0,0,268,269,7,24,0,0,269,110,1,
0,0,0,270,271,7,25,0,0,271,112,1,0,0,0,272,276,7,26,0,0,273,275,7,26,0,0,
274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,114,
1,0,0,0,278,276,1,0,0,0,279,281,7,27,0,0,280,279,1,0,0,0,281,282,1,0,0,0,
282,280,1,0,0,0,282,283,1,0,0,0,283,116,1,0,0,0,284,285,7,28,0,0,285,286,
1,0,0,0,286,287,6,58,0,0,287,118,1,0,0,0,3,0,276,282,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class pl0Lexer extends antlr4.Lexer {

    static grammarFileName = "pl0.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'.'", "'='", "','", "';'", "':='", "'?'", 
                         "'!'", "'#'", "'<'", "'<='", "'>'", "'>='", "'+'", 
                         "'-'", "'*'", "'/'", "'('", "')'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, "WRITE", "WHILE", "DO", "IF", 
                          "THEN", "ODD", "BEGIN", "END", "CALL", "CONST", 
                          "VAR", "PROCEDURE", "STRING", "NUMBER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "WRITE", 
                      "WHILE", "DO", "IF", "THEN", "ODD", "BEGIN", "END", 
                      "CALL", "CONST", "VAR", "PROCEDURE", "A", "B", "C", 
                      "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
                      "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", 
                      "X", "Y", "Z", "STRING", "NUMBER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

pl0Lexer.EOF = antlr4.Token.EOF;
pl0Lexer.T__0 = 1;
pl0Lexer.T__1 = 2;
pl0Lexer.T__2 = 3;
pl0Lexer.T__3 = 4;
pl0Lexer.T__4 = 5;
pl0Lexer.T__5 = 6;
pl0Lexer.T__6 = 7;
pl0Lexer.T__7 = 8;
pl0Lexer.T__8 = 9;
pl0Lexer.T__9 = 10;
pl0Lexer.T__10 = 11;
pl0Lexer.T__11 = 12;
pl0Lexer.T__12 = 13;
pl0Lexer.T__13 = 14;
pl0Lexer.T__14 = 15;
pl0Lexer.T__15 = 16;
pl0Lexer.T__16 = 17;
pl0Lexer.T__17 = 18;
pl0Lexer.WRITE = 19;
pl0Lexer.WHILE = 20;
pl0Lexer.DO = 21;
pl0Lexer.IF = 22;
pl0Lexer.THEN = 23;
pl0Lexer.ODD = 24;
pl0Lexer.BEGIN = 25;
pl0Lexer.END = 26;
pl0Lexer.CALL = 27;
pl0Lexer.CONST = 28;
pl0Lexer.VAR = 29;
pl0Lexer.PROCEDURE = 30;
pl0Lexer.STRING = 31;
pl0Lexer.NUMBER = 32;
pl0Lexer.WS = 33;



