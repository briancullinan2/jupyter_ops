// Generated from Resources/Parsers/mdx/mdx.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,55,414,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,1,
1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,
1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
1,46,1,47,1,47,1,47,1,47,1,47,1,48,4,48,329,8,48,11,48,12,48,330,1,49,4,
49,334,8,49,11,49,12,49,335,1,49,1,49,5,49,340,8,49,10,49,12,49,343,9,49,
1,50,1,50,5,50,347,8,50,10,50,12,50,350,9,50,1,51,1,51,1,51,1,51,1,51,4,
51,357,8,51,11,51,12,51,358,1,51,5,51,362,8,51,10,51,12,51,365,9,51,1,51,
3,51,368,8,51,1,51,1,51,1,52,1,52,1,52,4,52,375,8,52,11,52,12,52,376,1,52,
5,52,380,8,52,10,52,12,52,383,9,52,1,52,3,52,386,8,52,1,52,1,52,1,53,1,53,
5,53,392,8,53,10,53,12,53,395,9,53,1,53,1,53,1,53,5,53,400,8,53,10,53,12,
53,403,9,53,1,53,3,53,406,8,53,1,54,4,54,409,8,54,11,54,12,54,410,1,54,1,
54,0,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
99,50,101,51,103,52,105,53,107,54,109,55,1,0,6,4,0,36,36,65,90,95,95,97,
122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,9,9,32,32,1,0,34,34,1,0,39,39,
3,0,9,10,12,13,32,32,427,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
1,0,0,0,1,111,1,0,0,0,3,113,1,0,0,0,5,115,1,0,0,0,7,117,1,0,0,0,9,119,1,
0,0,0,11,121,1,0,0,0,13,124,1,0,0,0,15,126,1,0,0,0,17,128,1,0,0,0,19,131,
1,0,0,0,21,133,1,0,0,0,23,135,1,0,0,0,25,138,1,0,0,0,27,140,1,0,0,0,29,142,
1,0,0,0,31,144,1,0,0,0,33,147,1,0,0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,153,
1,0,0,0,41,155,1,0,0,0,43,159,1,0,0,0,45,162,1,0,0,0,47,167,1,0,0,0,49,172,
1,0,0,0,51,185,1,0,0,0,53,192,1,0,0,0,55,202,1,0,0,0,57,207,1,0,0,0,59,213,
1,0,0,0,61,217,1,0,0,0,63,233,1,0,0,0,65,238,1,0,0,0,67,245,1,0,0,0,69,252,
1,0,0,0,71,256,1,0,0,0,73,260,1,0,0,0,75,263,1,0,0,0,77,266,1,0,0,0,79,277,
1,0,0,0,81,284,1,0,0,0,83,292,1,0,0,0,85,296,1,0,0,0,87,301,1,0,0,0,89,307,
1,0,0,0,91,312,1,0,0,0,93,318,1,0,0,0,95,322,1,0,0,0,97,328,1,0,0,0,99,333,
1,0,0,0,101,344,1,0,0,0,103,351,1,0,0,0,105,371,1,0,0,0,107,405,1,0,0,0,
109,408,1,0,0,0,111,112,5,39,0,0,112,2,1,0,0,0,113,114,5,42,0,0,114,4,1,
0,0,0,115,116,5,58,0,0,116,6,1,0,0,0,117,118,5,59,0,0,118,8,1,0,0,0,119,
120,5,44,0,0,120,10,1,0,0,0,121,122,5,124,0,0,122,123,5,124,0,0,123,12,1,
0,0,0,124,125,5,46,0,0,125,14,1,0,0,0,126,127,5,61,0,0,127,16,1,0,0,0,128,
129,5,62,0,0,129,130,5,61,0,0,130,18,1,0,0,0,131,132,5,62,0,0,132,20,1,0,
0,0,133,134,5,123,0,0,134,22,1,0,0,0,135,136,5,60,0,0,136,137,5,61,0,0,137,
24,1,0,0,0,138,139,5,40,0,0,139,26,1,0,0,0,140,141,5,60,0,0,141,28,1,0,0,
0,142,143,5,45,0,0,143,30,1,0,0,0,144,145,5,60,0,0,145,146,5,62,0,0,146,
32,1,0,0,0,147,148,5,43,0,0,148,34,1,0,0,0,149,150,5,125,0,0,150,36,1,0,
0,0,151,152,5,41,0,0,152,38,1,0,0,0,153,154,5,47,0,0,154,40,1,0,0,0,155,
156,5,65,0,0,156,157,5,78,0,0,157,158,5,68,0,0,158,42,1,0,0,0,159,160,5,
65,0,0,160,161,5,83,0,0,161,44,1,0,0,0,162,163,5,67,0,0,163,164,5,65,0,0,
164,165,5,83,0,0,165,166,5,69,0,0,166,46,1,0,0,0,167,168,5,67,0,0,168,169,
5,69,0,0,169,170,5,76,0,0,170,171,5,76,0,0,171,48,1,0,0,0,172,173,5,67,0,
0,173,174,5,69,0,0,174,175,5,76,0,0,175,176,5,76,0,0,176,177,5,95,0,0,177,
178,5,79,0,0,178,179,5,82,0,0,179,180,5,68,0,0,180,181,5,73,0,0,181,182,
5,78,0,0,182,183,5,65,0,0,183,184,5,76,0,0,184,50,1,0,0,0,185,186,5,67,0,
0,186,187,5,82,0,0,187,188,5,69,0,0,188,189,5,65,0,0,189,190,5,84,0,0,190,
191,5,69,0,0,191,52,1,0,0,0,192,193,5,68,0,0,193,194,5,73,0,0,194,195,5,
77,0,0,195,196,5,69,0,0,196,197,5,78,0,0,197,198,5,83,0,0,198,199,5,73,0,
0,199,200,5,79,0,0,200,201,5,78,0,0,201,54,1,0,0,0,202,203,5,69,0,0,203,
204,5,76,0,0,204,205,5,83,0,0,205,206,5,69,0,0,206,56,1,0,0,0,207,208,5,
69,0,0,208,209,5,77,0,0,209,210,5,80,0,0,210,211,5,84,0,0,211,212,5,89,0,
0,212,58,1,0,0,0,213,214,5,69,0,0,214,215,5,78,0,0,215,216,5,68,0,0,216,
60,1,0,0,0,217,218,5,70,0,0,218,219,5,79,0,0,219,220,5,82,0,0,220,221,5,
77,0,0,221,222,5,65,0,0,222,223,5,84,0,0,223,224,5,84,0,0,224,225,5,69,0,
0,225,226,5,68,0,0,226,227,5,95,0,0,227,228,5,86,0,0,228,229,5,65,0,0,229,
230,5,76,0,0,230,231,5,85,0,0,231,232,5,69,0,0,232,62,1,0,0,0,233,234,5,
70,0,0,234,235,5,82,0,0,235,236,5,79,0,0,236,237,5,77,0,0,237,64,1,0,0,0,
238,239,5,71,0,0,239,240,5,76,0,0,240,241,5,79,0,0,241,242,5,66,0,0,242,
243,5,65,0,0,243,244,5,76,0,0,244,66,1,0,0,0,245,246,5,77,0,0,246,247,5,
69,0,0,247,248,5,77,0,0,248,249,5,66,0,0,249,250,5,69,0,0,250,251,5,82,0,
0,251,68,1,0,0,0,252,253,5,78,0,0,253,254,5,79,0,0,254,255,5,78,0,0,255,
70,1,0,0,0,256,257,5,78,0,0,257,258,5,79,0,0,258,259,5,84,0,0,259,72,1,0,
0,0,260,261,5,79,0,0,261,262,5,78,0,0,262,74,1,0,0,0,263,264,5,79,0,0,264,
265,5,82,0,0,265,76,1,0,0,0,266,267,5,80,0,0,267,268,5,82,0,0,268,269,5,
79,0,0,269,270,5,80,0,0,270,271,5,69,0,0,271,272,5,82,0,0,272,273,5,84,0,
0,273,274,5,73,0,0,274,275,5,69,0,0,275,276,5,83,0,0,276,78,1,0,0,0,277,
278,5,83,0,0,278,279,5,69,0,0,279,280,5,76,0,0,280,281,5,69,0,0,281,282,
5,67,0,0,282,283,5,84,0,0,283,80,1,0,0,0,284,285,5,83,0,0,285,286,5,69,0,
0,286,287,5,83,0,0,287,288,5,83,0,0,288,289,5,73,0,0,289,290,5,79,0,0,290,
291,5,78,0,0,291,82,1,0,0,0,292,293,5,83,0,0,293,294,5,69,0,0,294,295,5,
84,0,0,295,84,1,0,0,0,296,297,5,84,0,0,297,298,5,72,0,0,298,299,5,69,0,0,
299,300,5,78,0,0,300,86,1,0,0,0,301,302,5,86,0,0,302,303,5,65,0,0,303,304,
5,76,0,0,304,305,5,85,0,0,305,306,5,69,0,0,306,88,1,0,0,0,307,308,5,87,0,
0,308,309,5,72,0,0,309,310,5,69,0,0,310,311,5,78,0,0,311,90,1,0,0,0,312,
313,5,87,0,0,313,314,5,72,0,0,314,315,5,69,0,0,315,316,5,82,0,0,316,317,
5,69,0,0,317,92,1,0,0,0,318,319,5,88,0,0,319,320,5,79,0,0,320,321,5,82,0,
0,321,94,1,0,0,0,322,323,5,87,0,0,323,324,5,73,0,0,324,325,5,84,0,0,325,
326,5,72,0,0,326,96,1,0,0,0,327,329,2,48,57,0,328,327,1,0,0,0,329,330,1,
0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,98,1,0,0,0,332,334,2,48,57,0,333,
332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,337,1,0,
0,0,337,341,5,46,0,0,338,340,2,48,57,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
339,1,0,0,0,341,342,1,0,0,0,342,100,1,0,0,0,343,341,1,0,0,0,344,348,7,0,
0,0,345,347,7,1,0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,
349,1,0,0,0,349,102,1,0,0,0,350,348,1,0,0,0,351,352,5,91,0,0,352,353,5,38,
0,0,353,367,1,0,0,0,354,363,3,101,50,0,355,357,7,2,0,0,356,355,1,0,0,0,357,
358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,362,3,101,
50,0,361,356,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,
368,1,0,0,0,365,363,1,0,0,0,366,368,3,97,48,0,367,354,1,0,0,0,367,366,1,
0,0,0,368,369,1,0,0,0,369,370,5,93,0,0,370,104,1,0,0,0,371,385,5,91,0,0,
372,381,3,101,50,0,373,375,7,2,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,374,
1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,3,101,50,0,379,374,1,0,0,
0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,386,1,0,0,0,383,381,
1,0,0,0,384,386,3,97,48,0,385,372,1,0,0,0,385,384,1,0,0,0,386,387,1,0,0,
0,387,388,5,93,0,0,388,106,1,0,0,0,389,393,5,34,0,0,390,392,8,3,0,0,391,
390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,
0,0,395,393,1,0,0,0,396,406,5,34,0,0,397,401,5,39,0,0,398,400,8,4,0,0,399,
398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,
0,0,403,401,1,0,0,0,404,406,5,39,0,0,405,389,1,0,0,0,405,397,1,0,0,0,406,
108,1,0,0,0,407,409,7,5,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,
0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,6,54,0,0,413,110,1,0,0,0,15,
0,330,335,341,348,358,363,367,376,381,385,393,401,405,410,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class mdxLexer extends antlr4.Lexer {

    static grammarFileName = "mdx.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'''", "'*'", "':'", "';'", "','", "'||'", 
                         "'.'", "'='", "'>='", "'>'", "'{'", "'<='", "'('", 
                         "'<'", "'-'", "'<>'", "'+'", "'}'", "')'", "'/'", 
                         "'AND'", "'AS'", "'CASE'", "'CELL'", "'CELL_ORDINAL'", 
                         "'CREATE'", "'DIMENSION'", "'ELSE'", "'EMPTY'", 
                         "'END'", "'FORMATTED_VALUE'", "'FROM'", "'GLOBAL'", 
                         "'MEMBER'", "'NON'", "'NOT'", "'ON'", "'OR'", "'PROPERTIES'", 
                         "'SELECT'", "'SESSION'", "'SET'", "'THEN'", "'VALUE'", 
                         "'WHEN'", "'WHERE'", "'XOR'", "'WITH'" ];
	static symbolicNames = [ null, "QUOTE", "ASTERISK", "COLON", "SEMICOLON", 
                          "COMMA", "CONCAT", "DOT", "EQ", "GE", "GT", "LBRACE", 
                          "LE", "LPAREN", "LT", "MINUS", "NE", "PLUS", "RBRACE", 
                          "RPAREN", "SOLIDUS", "AND", "AS", "CASE", "CELL", 
                          "CELL_ORDINAL", "CREATE", "DIMENSION", "ELSE", 
                          "EMPTY", "END", "FORMATTED_VALUE", "FROM", "GLOBAL", 
                          "MEMBER", "NON", "NOT", "ON", "OR", "PROPERTIES", 
                          "SELECT", "SESSION", "SET", "THEN", "VALUE", "WHEN", 
                          "WHERE", "XOR", "WITH", "NUMBER", "F", "ID", "AMP_QUOTED_ID", 
                          "QUOTED_ID", "STRING", "WS" ];
	static ruleNames = [ "QUOTE", "ASTERISK", "COLON", "SEMICOLON", "COMMA", 
                      "CONCAT", "DOT", "EQ", "GE", "GT", "LBRACE", "LE", 
                      "LPAREN", "LT", "MINUS", "NE", "PLUS", "RBRACE", "RPAREN", 
                      "SOLIDUS", "AND", "AS", "CASE", "CELL", "CELL_ORDINAL", 
                      "CREATE", "DIMENSION", "ELSE", "EMPTY", "END", "FORMATTED_VALUE", 
                      "FROM", "GLOBAL", "MEMBER", "NON", "NOT", "ON", "OR", 
                      "PROPERTIES", "SELECT", "SESSION", "SET", "THEN", 
                      "VALUE", "WHEN", "WHERE", "XOR", "WITH", "NUMBER", 
                      "F", "ID", "AMP_QUOTED_ID", "QUOTED_ID", "STRING", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

mdxLexer.EOF = antlr4.Token.EOF;
mdxLexer.QUOTE = 1;
mdxLexer.ASTERISK = 2;
mdxLexer.COLON = 3;
mdxLexer.SEMICOLON = 4;
mdxLexer.COMMA = 5;
mdxLexer.CONCAT = 6;
mdxLexer.DOT = 7;
mdxLexer.EQ = 8;
mdxLexer.GE = 9;
mdxLexer.GT = 10;
mdxLexer.LBRACE = 11;
mdxLexer.LE = 12;
mdxLexer.LPAREN = 13;
mdxLexer.LT = 14;
mdxLexer.MINUS = 15;
mdxLexer.NE = 16;
mdxLexer.PLUS = 17;
mdxLexer.RBRACE = 18;
mdxLexer.RPAREN = 19;
mdxLexer.SOLIDUS = 20;
mdxLexer.AND = 21;
mdxLexer.AS = 22;
mdxLexer.CASE = 23;
mdxLexer.CELL = 24;
mdxLexer.CELL_ORDINAL = 25;
mdxLexer.CREATE = 26;
mdxLexer.DIMENSION = 27;
mdxLexer.ELSE = 28;
mdxLexer.EMPTY = 29;
mdxLexer.END = 30;
mdxLexer.FORMATTED_VALUE = 31;
mdxLexer.FROM = 32;
mdxLexer.GLOBAL = 33;
mdxLexer.MEMBER = 34;
mdxLexer.NON = 35;
mdxLexer.NOT = 36;
mdxLexer.ON = 37;
mdxLexer.OR = 38;
mdxLexer.PROPERTIES = 39;
mdxLexer.SELECT = 40;
mdxLexer.SESSION = 41;
mdxLexer.SET = 42;
mdxLexer.THEN = 43;
mdxLexer.VALUE = 44;
mdxLexer.WHEN = 45;
mdxLexer.WHERE = 46;
mdxLexer.XOR = 47;
mdxLexer.WITH = 48;
mdxLexer.NUMBER = 49;
mdxLexer.F = 50;
mdxLexer.ID = 51;
mdxLexer.AMP_QUOTED_ID = 52;
mdxLexer.QUOTED_ID = 53;
mdxLexer.STRING = 54;
mdxLexer.WS = 55;



