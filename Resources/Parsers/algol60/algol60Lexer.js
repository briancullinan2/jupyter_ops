// Generated from ./Resources/Parsers/algol60/algol60.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,64,587,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,
0,1,0,1,0,1,0,3,0,176,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
9,1,9,1,9,1,10,1,10,1,10,5,10,231,8,10,10,10,12,10,234,9,10,1,10,1,10,1,
10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,
26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,349,8,36,1,37,1,37,1,38,
1,38,1,39,1,39,1,39,3,39,358,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
1,44,1,44,1,44,3,44,371,8,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,
56,1,57,1,57,1,58,1,58,3,58,401,8,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
3,60,410,8,60,1,61,1,61,1,61,1,61,3,61,416,8,61,1,62,1,62,1,62,1,62,1,62,
3,62,423,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,431,8,63,1,64,1,64,1,65,
1,65,1,65,1,65,1,65,3,65,440,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,448,
8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,462,
8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,471,8,68,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,3,69,480,8,69,1,70,1,70,1,70,3,70,485,8,70,1,71,1,71,4,71,
489,8,71,11,71,12,71,490,1,71,1,71,1,71,1,71,1,72,1,72,4,72,499,8,72,11,
72,12,72,500,1,73,4,73,504,8,73,11,73,12,73,505,1,74,1,74,1,74,1,75,1,75,
1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,521,8,75,1,76,1,76,1,76,1,76,
1,76,3,76,528,8,76,1,77,1,77,1,77,1,77,1,77,3,77,535,8,77,1,78,5,78,538,
8,78,10,78,12,78,541,9,78,1,79,1,79,1,79,1,79,1,79,3,79,548,8,79,1,80,1,
80,1,80,1,80,1,81,1,81,1,81,1,81,3,81,558,8,81,1,82,1,82,1,82,5,82,563,8,
82,10,82,12,82,566,9,82,1,82,1,82,1,82,5,82,571,8,82,10,82,12,82,574,9,82,
1,82,3,82,577,8,82,1,83,1,83,1,83,1,83,1,84,4,84,584,8,84,11,84,12,84,585,
0,0,85,1,0,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,
13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,
25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,
37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,
49,101,50,103,51,105,0,107,0,109,0,111,52,113,0,115,53,117,0,119,54,121,
0,123,0,125,0,127,0,129,55,131,0,133,0,135,0,137,0,139,0,141,0,143,56,145,
57,147,58,149,59,151,60,153,61,155,62,157,0,159,0,161,0,163,0,165,63,167,
64,169,0,1,0,35,2,0,65,65,97,97,2,0,82,82,114,114,2,0,89,89,121,121,2,0,
66,66,98,98,2,0,69,69,101,101,2,0,71,71,103,103,2,0,73,73,105,105,2,0,78,
78,110,110,2,0,79,79,111,111,2,0,76,76,108,108,2,0,67,67,99,99,2,0,77,77,
109,109,2,0,84,84,116,116,2,0,68,68,100,100,2,0,83,83,115,115,2,0,70,70,
102,102,2,0,87,87,119,119,2,0,80,80,112,112,2,0,85,85,117,117,2,0,72,72,
104,104,2,0,86,86,118,118,2,0,38,38,8896,8896,2,0,47,47,247,247,2,0,94,94,
8593,8593,2,0,45,45,8211,8211,2,0,42,42,215,215,2,0,33,33,172,172,2,0,124,
124,8897,8897,3,0,65,90,95,95,97,122,2,0,8968,8968,8989,8989,1,0,59,59,1,
0,8988,8989,1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,640,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,111,1,0,
0,0,0,115,1,0,0,0,0,119,1,0,0,0,0,129,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,
0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
0,165,1,0,0,0,0,167,1,0,0,0,1,175,1,0,0,0,3,177,1,0,0,0,5,183,1,0,0,0,7,
189,1,0,0,0,9,197,1,0,0,0,11,205,1,0,0,0,13,208,1,0,0,0,15,213,1,0,0,0,17,
217,1,0,0,0,19,223,1,0,0,0,21,227,1,0,0,0,23,238,1,0,0,0,25,241,1,0,0,0,
27,249,1,0,0,0,29,255,1,0,0,0,31,259,1,0,0,0,33,269,1,0,0,0,35,274,1,0,0,
0,37,279,1,0,0,0,39,286,1,0,0,0,41,293,1,0,0,0,43,298,1,0,0,0,45,303,1,0,
0,0,47,309,1,0,0,0,49,315,1,0,0,0,51,321,1,0,0,0,53,323,1,0,0,0,55,326,1,
0,0,0,57,328,1,0,0,0,59,330,1,0,0,0,61,332,1,0,0,0,63,334,1,0,0,0,65,337,
1,0,0,0,67,339,1,0,0,0,69,341,1,0,0,0,71,343,1,0,0,0,73,348,1,0,0,0,75,350,
1,0,0,0,77,352,1,0,0,0,79,357,1,0,0,0,81,359,1,0,0,0,83,361,1,0,0,0,85,363,
1,0,0,0,87,365,1,0,0,0,89,370,1,0,0,0,91,372,1,0,0,0,93,374,1,0,0,0,95,376,
1,0,0,0,97,378,1,0,0,0,99,380,1,0,0,0,101,382,1,0,0,0,103,384,1,0,0,0,105,
386,1,0,0,0,107,388,1,0,0,0,109,390,1,0,0,0,111,392,1,0,0,0,113,394,1,0,
0,0,115,396,1,0,0,0,117,400,1,0,0,0,119,402,1,0,0,0,121,409,1,0,0,0,123,
415,1,0,0,0,125,422,1,0,0,0,127,430,1,0,0,0,129,432,1,0,0,0,131,439,1,0,
0,0,133,447,1,0,0,0,135,461,1,0,0,0,137,470,1,0,0,0,139,479,1,0,0,0,141,
484,1,0,0,0,143,486,1,0,0,0,145,498,1,0,0,0,147,503,1,0,0,0,149,507,1,0,
0,0,151,510,1,0,0,0,153,527,1,0,0,0,155,534,1,0,0,0,157,539,1,0,0,0,159,
547,1,0,0,0,161,549,1,0,0,0,163,557,1,0,0,0,165,576,1,0,0,0,167,578,1,0,
0,0,169,583,1,0,0,0,171,176,3,105,52,0,172,176,3,107,53,0,173,176,3,117,
58,0,174,176,3,121,60,0,175,171,1,0,0,0,175,172,1,0,0,0,175,173,1,0,0,0,
175,174,1,0,0,0,176,2,1,0,0,0,177,178,7,0,0,0,178,179,7,1,0,0,179,180,7,
1,0,0,180,181,7,0,0,0,181,182,7,2,0,0,182,4,1,0,0,0,183,184,7,3,0,0,184,
185,7,4,0,0,185,186,7,5,0,0,186,187,7,6,0,0,187,188,7,7,0,0,188,6,1,0,0,
0,189,190,7,3,0,0,190,191,7,8,0,0,191,192,7,8,0,0,192,193,7,9,0,0,193,194,
7,4,0,0,194,195,7,0,0,0,195,196,7,7,0,0,196,8,1,0,0,0,197,198,7,10,0,0,198,
199,7,8,0,0,199,200,7,11,0,0,200,201,7,11,0,0,201,202,7,4,0,0,202,203,7,
7,0,0,203,204,7,12,0,0,204,10,1,0,0,0,205,206,7,13,0,0,206,207,7,8,0,0,207,
12,1,0,0,0,208,209,7,4,0,0,209,210,7,9,0,0,210,211,7,14,0,0,211,212,7,4,
0,0,212,14,1,0,0,0,213,214,7,4,0,0,214,215,7,7,0,0,215,216,7,13,0,0,216,
16,1,0,0,0,217,218,7,15,0,0,218,219,7,0,0,0,219,220,7,9,0,0,220,221,7,14,
0,0,221,222,7,4,0,0,222,18,1,0,0,0,223,224,7,15,0,0,224,225,7,8,0,0,225,
226,7,1,0,0,226,20,1,0,0,0,227,228,7,5,0,0,228,232,7,8,0,0,229,231,3,169,
84,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
235,1,0,0,0,234,232,1,0,0,0,235,236,7,12,0,0,236,237,7,8,0,0,237,22,1,0,
0,0,238,239,7,6,0,0,239,240,7,15,0,0,240,24,1,0,0,0,241,242,7,6,0,0,242,
243,7,7,0,0,243,244,7,12,0,0,244,245,7,4,0,0,245,246,7,5,0,0,246,247,7,4,
0,0,247,248,7,1,0,0,248,26,1,0,0,0,249,250,7,9,0,0,250,251,7,0,0,0,251,252,
7,3,0,0,252,253,7,4,0,0,253,254,7,9,0,0,254,28,1,0,0,0,255,256,7,8,0,0,256,
257,7,16,0,0,257,258,7,7,0,0,258,30,1,0,0,0,259,260,7,17,0,0,260,261,7,1,
0,0,261,262,7,8,0,0,262,263,7,10,0,0,263,264,7,4,0,0,264,265,7,13,0,0,265,
266,7,18,0,0,266,267,7,1,0,0,267,268,7,4,0,0,268,32,1,0,0,0,269,270,7,1,
0,0,270,271,7,4,0,0,271,272,7,0,0,0,272,273,7,9,0,0,273,34,1,0,0,0,274,275,
7,14,0,0,275,276,7,12,0,0,276,277,7,4,0,0,277,278,7,17,0,0,278,36,1,0,0,
0,279,280,7,14,0,0,280,281,7,12,0,0,281,282,7,1,0,0,282,283,7,6,0,0,283,
284,7,7,0,0,284,285,7,5,0,0,285,38,1,0,0,0,286,287,7,14,0,0,287,288,7,16,
0,0,288,289,7,6,0,0,289,290,7,12,0,0,290,291,7,10,0,0,291,292,7,19,0,0,292,
40,1,0,0,0,293,294,7,12,0,0,294,295,7,19,0,0,295,296,7,4,0,0,296,297,7,7,
0,0,297,42,1,0,0,0,298,299,7,12,0,0,299,300,7,1,0,0,300,301,7,18,0,0,301,
302,7,4,0,0,302,44,1,0,0,0,303,304,7,18,0,0,304,305,7,7,0,0,305,306,7,12,
0,0,306,307,7,6,0,0,307,308,7,9,0,0,308,46,1,0,0,0,309,310,7,20,0,0,310,
311,7,0,0,0,311,312,7,9,0,0,312,313,7,18,0,0,313,314,7,4,0,0,314,48,1,0,
0,0,315,316,7,16,0,0,316,317,7,19,0,0,317,318,7,6,0,0,318,319,7,9,0,0,319,
320,7,4,0,0,320,50,1,0,0,0,321,322,7,21,0,0,322,52,1,0,0,0,323,324,5,58,
0,0,324,325,5,61,0,0,325,54,1,0,0,0,326,327,5,58,0,0,327,56,1,0,0,0,328,
329,5,44,0,0,329,58,1,0,0,0,330,331,5,46,0,0,331,60,1,0,0,0,332,333,7,22,
0,0,333,62,1,0,0,0,334,335,5,94,0,0,335,336,5,61,0,0,336,64,1,0,0,0,337,
338,5,61,0,0,338,66,1,0,0,0,339,340,5,8801,0,0,340,68,1,0,0,0,341,342,7,
23,0,0,342,70,1,0,0,0,343,344,5,62,0,0,344,72,1,0,0,0,345,349,5,8805,0,0,
346,347,5,62,0,0,347,349,5,61,0,0,348,345,1,0,0,0,348,346,1,0,0,0,349,74,
1,0,0,0,350,351,5,8835,0,0,351,76,1,0,0,0,352,353,5,91,0,0,353,78,1,0,0,
0,354,355,5,60,0,0,355,358,5,61,0,0,356,358,5,8804,0,0,357,354,1,0,0,0,357,
356,1,0,0,0,358,80,1,0,0,0,359,360,5,40,0,0,360,82,1,0,0,0,361,362,5,60,
0,0,362,84,1,0,0,0,363,364,7,24,0,0,364,86,1,0,0,0,365,366,7,25,0,0,366,
88,1,0,0,0,367,371,5,8800,0,0,368,369,5,33,0,0,369,371,5,61,0,0,370,367,
1,0,0,0,370,368,1,0,0,0,371,90,1,0,0,0,372,373,7,26,0,0,373,92,1,0,0,0,374,
375,7,27,0,0,375,94,1,0,0,0,376,377,5,43,0,0,377,96,1,0,0,0,378,379,5,93,
0,0,379,98,1,0,0,0,380,381,5,41,0,0,381,100,1,0,0,0,382,383,5,59,0,0,383,
102,1,0,0,0,384,385,5,95,0,0,385,104,1,0,0,0,386,387,7,28,0,0,387,106,1,
0,0,0,388,389,2,48,57,0,389,108,1,0,0,0,390,391,5,8988,0,0,391,110,1,0,0,
0,392,393,3,109,54,0,393,112,1,0,0,0,394,395,5,8989,0,0,395,114,1,0,0,0,
396,397,3,113,56,0,397,116,1,0,0,0,398,401,3,43,21,0,399,401,3,17,8,0,400,
398,1,0,0,0,400,399,1,0,0,0,401,118,1,0,0,0,402,403,3,117,58,0,403,120,1,
0,0,0,404,410,3,123,61,0,405,410,3,135,67,0,406,410,3,137,68,0,407,410,3,
139,69,0,408,410,3,141,70,0,409,404,1,0,0,0,409,405,1,0,0,0,409,406,1,0,
0,0,409,407,1,0,0,0,409,408,1,0,0,0,410,122,1,0,0,0,411,416,3,125,62,0,412,
416,3,127,63,0,413,416,3,131,65,0,414,416,3,133,66,0,415,411,1,0,0,0,415,
412,1,0,0,0,415,413,1,0,0,0,415,414,1,0,0,0,416,124,1,0,0,0,417,423,3,95,
47,0,418,423,3,85,42,0,419,423,3,87,43,0,420,423,3,61,30,0,421,423,3,69,
34,0,422,417,1,0,0,0,422,418,1,0,0,0,422,419,1,0,0,0,422,420,1,0,0,0,422,
421,1,0,0,0,423,126,1,0,0,0,424,431,3,83,41,0,425,431,3,79,39,0,426,431,
3,65,32,0,427,431,3,89,44,0,428,431,3,71,35,0,429,431,3,73,36,0,430,424,
1,0,0,0,430,425,1,0,0,0,430,426,1,0,0,0,430,427,1,0,0,0,430,428,1,0,0,0,
430,429,1,0,0,0,431,128,1,0,0,0,432,433,3,127,63,0,433,130,1,0,0,0,434,440,
3,67,33,0,435,440,3,75,37,0,436,440,3,93,46,0,437,440,3,51,25,0,438,440,
3,91,45,0,439,434,1,0,0,0,439,435,1,0,0,0,439,436,1,0,0,0,439,437,1,0,0,
0,439,438,1,0,0,0,440,132,1,0,0,0,441,448,3,21,10,0,442,448,3,23,11,0,443,
448,3,41,20,0,444,448,3,13,6,0,445,448,3,19,9,0,446,448,3,11,5,0,447,441,
1,0,0,0,447,442,1,0,0,0,447,443,1,0,0,0,447,444,1,0,0,0,447,445,1,0,0,0,
447,446,1,0,0,0,448,134,1,0,0,0,449,462,3,57,28,0,450,462,3,59,29,0,451,
452,5,49,0,0,452,462,5,48,0,0,453,462,3,55,27,0,454,462,3,101,50,0,455,462,
3,53,26,0,456,462,3,103,51,0,457,462,3,35,17,0,458,462,3,45,22,0,459,462,
3,49,24,0,460,462,3,9,4,0,461,449,1,0,0,0,461,450,1,0,0,0,461,451,1,0,0,
0,461,453,1,0,0,0,461,454,1,0,0,0,461,455,1,0,0,0,461,456,1,0,0,0,461,457,
1,0,0,0,461,458,1,0,0,0,461,459,1,0,0,0,461,460,1,0,0,0,462,136,1,0,0,0,
463,471,3,81,40,0,464,471,3,99,49,0,465,471,3,77,38,0,466,471,3,97,48,0,
467,471,7,29,0,0,468,471,3,5,2,0,469,471,3,15,7,0,470,463,1,0,0,0,470,464,
1,0,0,0,470,465,1,0,0,0,470,466,1,0,0,0,470,467,1,0,0,0,470,468,1,0,0,0,
470,469,1,0,0,0,471,138,1,0,0,0,472,480,3,29,14,0,473,480,3,7,3,0,474,480,
3,25,12,0,475,480,3,33,16,0,476,480,3,3,1,0,477,480,3,39,19,0,478,480,3,
31,15,0,479,472,1,0,0,0,479,473,1,0,0,0,479,474,1,0,0,0,479,475,1,0,0,0,
479,476,1,0,0,0,479,477,1,0,0,0,479,478,1,0,0,0,480,140,1,0,0,0,481,485,
3,37,18,0,482,485,3,27,13,0,483,485,3,47,23,0,484,481,1,0,0,0,484,482,1,
0,0,0,484,483,1,0,0,0,485,142,1,0,0,0,486,488,3,9,4,0,487,489,8,30,0,0,488,
487,1,0,0,0,489,490,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,492,1,0,
0,0,492,493,3,101,50,0,493,494,1,0,0,0,494,495,6,71,0,0,495,144,1,0,0,0,
496,499,3,105,52,0,497,499,3,107,53,0,498,496,1,0,0,0,498,497,1,0,0,0,499,
500,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,146,1,0,0,0,502,504,3,107,
53,0,503,502,1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
148,1,0,0,0,507,508,3,59,29,0,508,509,3,147,73,0,509,150,1,0,0,0,510,511,
5,49,0,0,511,512,5,48,0,0,512,520,1,0,0,0,513,521,3,147,73,0,514,515,3,95,
47,0,515,516,3,147,73,0,516,521,1,0,0,0,517,518,3,85,42,0,518,519,3,147,
73,0,519,521,1,0,0,0,520,513,1,0,0,0,520,514,1,0,0,0,520,517,1,0,0,0,521,
152,1,0,0,0,522,528,3,147,73,0,523,528,3,149,74,0,524,525,3,147,73,0,525,
526,3,149,74,0,526,528,1,0,0,0,527,522,1,0,0,0,527,523,1,0,0,0,527,524,1,
0,0,0,528,154,1,0,0,0,529,535,3,153,76,0,530,535,3,151,75,0,531,532,3,153,
76,0,532,533,3,151,75,0,533,535,1,0,0,0,534,529,1,0,0,0,534,530,1,0,0,0,
534,531,1,0,0,0,535,156,1,0,0,0,536,538,8,31,0,0,537,536,1,0,0,0,538,541,
1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,158,1,0,0,0,541,539,1,0,0,0,
542,548,3,157,78,0,543,544,3,157,78,0,544,545,3,161,80,0,545,546,3,159,79,
0,546,548,1,0,0,0,547,542,1,0,0,0,547,543,1,0,0,0,548,160,1,0,0,0,549,550,
3,111,55,0,550,551,3,159,79,0,551,552,3,115,57,0,552,162,1,0,0,0,553,558,
3,161,80,0,554,555,3,161,80,0,555,556,3,163,81,0,556,558,1,0,0,0,557,553,
1,0,0,0,557,554,1,0,0,0,558,164,1,0,0,0,559,577,3,163,81,0,560,564,5,34,
0,0,561,563,8,32,0,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,
565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,577,5,34,0,0,568,572,5,96,
0,0,569,571,8,33,0,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,
573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,0,575,577,5,39,0,0,576,559,1,0,
0,0,576,560,1,0,0,0,576,568,1,0,0,0,577,166,1,0,0,0,578,579,3,169,84,0,579,
580,1,0,0,0,580,581,6,83,0,0,581,168,1,0,0,0,582,584,7,34,0,0,583,582,1,
0,0,0,584,585,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,170,1,0,0,0,31,
0,175,232,348,357,370,400,409,415,422,430,439,447,461,470,479,484,490,498,
500,505,520,527,534,539,547,557,564,572,576,585,1,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class algol60Lexer extends antlr4.Lexer {

    static grammarFileName = "algol60.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, "':='", "':'", "','", "'.'", null, 
                         "'^='", "'='", "'\\u2261'", null, "'>'", null, 
                         "'\\u2283'", "'['", null, "'('", "'<'", null, null, 
                         null, null, null, "'+'", "']'", "')'", "';'", "'_'" ];
	static symbolicNames = [ null, "Array_", "Begin_", "Boolean_", "Comment_", 
                          "Do_", "Else_", "End_", "False_", "For_", "Goto_", 
                          "If_", "Integer_", "Label_", "Own_", "Procedure_", 
                          "Real_", "Step_", "String_", "Switch_", "Then_", 
                          "True_", "Until_", "Value_", "While_", "And_", 
                          "Assign_", "Colon_", "Comma_", "Dot_", "Divide_", 
                          "Eor_", "Eq_", "Equiv_", "Exp_", "Gt_", "Ge_", 
                          "Includes_", "Lb_", "Le_", "LP_", "Lt_", "Minus_", 
                          "Mult_", "Ne_", "Not_", "Or_", "Plus_", "Rb_", 
                          "Rp_", "Semi_", "Underscore_", "ULCorner", "URCorner", 
                          "Logical_value", "Relational_operator", "Comment", 
                          "Identifier", "Unsigned_integer", "Decimal_fraction", 
                          "Exponential_part", "Decimal_number", "Unsigned_number", 
                          "String", "WS" ];
	static ruleNames = [ "Basic_symbol", "Array_", "Begin_", "Boolean_", "Comment_", 
                      "Do_", "Else_", "End_", "False_", "For_", "Goto_", 
                      "If_", "Integer_", "Label_", "Own_", "Procedure_", 
                      "Real_", "Step_", "String_", "Switch_", "Then_", "True_", 
                      "Until_", "Value_", "While_", "And_", "Assign_", "Colon_", 
                      "Comma_", "Dot_", "Divide_", "Eor_", "Eq_", "Equiv_", 
                      "Exp_", "Gt_", "Ge_", "Includes_", "Lb_", "Le_", "LP_", 
                      "Lt_", "Minus_", "Mult_", "Ne_", "Not_", "Or_", "Plus_", 
                      "Rb_", "Rp_", "Semi_", "Underscore_", "Letter", "Digit", 
                      "ULCorner_f", "ULCorner", "URCorner_f", "URCorner", 
                      "Logical_value_f", "Logical_value", "Delimiter", "Operator", 
                      "Arithmetic_operator", "Relational_operator_f", "Relational_operator", 
                      "Logical_operator", "Sequential_operator", "Separator", 
                      "Bracket", "Declarator", "Specificator", "Comment", 
                      "Identifier", "Unsigned_integer", "Decimal_fraction", 
                      "Exponential_part", "Decimal_number", "Unsigned_number", 
                      "Proper_string", "Open_string", "Closed_string", "StdString", 
                      "String", "WS", "Ws" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

algol60Lexer.EOF = antlr4.Token.EOF;
algol60Lexer.Array_ = 1;
algol60Lexer.Begin_ = 2;
algol60Lexer.Boolean_ = 3;
algol60Lexer.Comment_ = 4;
algol60Lexer.Do_ = 5;
algol60Lexer.Else_ = 6;
algol60Lexer.End_ = 7;
algol60Lexer.False_ = 8;
algol60Lexer.For_ = 9;
algol60Lexer.Goto_ = 10;
algol60Lexer.If_ = 11;
algol60Lexer.Integer_ = 12;
algol60Lexer.Label_ = 13;
algol60Lexer.Own_ = 14;
algol60Lexer.Procedure_ = 15;
algol60Lexer.Real_ = 16;
algol60Lexer.Step_ = 17;
algol60Lexer.String_ = 18;
algol60Lexer.Switch_ = 19;
algol60Lexer.Then_ = 20;
algol60Lexer.True_ = 21;
algol60Lexer.Until_ = 22;
algol60Lexer.Value_ = 23;
algol60Lexer.While_ = 24;
algol60Lexer.And_ = 25;
algol60Lexer.Assign_ = 26;
algol60Lexer.Colon_ = 27;
algol60Lexer.Comma_ = 28;
algol60Lexer.Dot_ = 29;
algol60Lexer.Divide_ = 30;
algol60Lexer.Eor_ = 31;
algol60Lexer.Eq_ = 32;
algol60Lexer.Equiv_ = 33;
algol60Lexer.Exp_ = 34;
algol60Lexer.Gt_ = 35;
algol60Lexer.Ge_ = 36;
algol60Lexer.Includes_ = 37;
algol60Lexer.Lb_ = 38;
algol60Lexer.Le_ = 39;
algol60Lexer.LP_ = 40;
algol60Lexer.Lt_ = 41;
algol60Lexer.Minus_ = 42;
algol60Lexer.Mult_ = 43;
algol60Lexer.Ne_ = 44;
algol60Lexer.Not_ = 45;
algol60Lexer.Or_ = 46;
algol60Lexer.Plus_ = 47;
algol60Lexer.Rb_ = 48;
algol60Lexer.Rp_ = 49;
algol60Lexer.Semi_ = 50;
algol60Lexer.Underscore_ = 51;
algol60Lexer.ULCorner = 52;
algol60Lexer.URCorner = 53;
algol60Lexer.Logical_value = 54;
algol60Lexer.Relational_operator = 55;
algol60Lexer.Comment = 56;
algol60Lexer.Identifier = 57;
algol60Lexer.Unsigned_integer = 58;
algol60Lexer.Decimal_fraction = 59;
algol60Lexer.Exponential_part = 60;
algol60Lexer.Decimal_number = 61;
algol60Lexer.Unsigned_number = 62;
algol60Lexer.String = 63;
algol60Lexer.WS = 64;



