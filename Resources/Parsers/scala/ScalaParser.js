// Generated from ./scala/Scala.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ScalaListener from './ScalaListener.js';
const serializedATN = [4,1,78,1444,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
1,0,3,0,214,8,0,1,0,1,0,3,0,218,8,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,226,8,0,
1,1,1,1,1,1,5,1,231,8,1,10,1,12,1,234,9,1,1,2,1,2,1,2,5,2,239,8,2,10,2,12,
2,242,9,2,1,3,1,3,1,3,1,3,3,3,248,8,3,1,3,1,3,1,3,3,3,253,8,3,1,3,1,3,3,
3,257,8,3,3,3,259,8,3,1,3,1,3,1,3,5,3,264,8,3,10,3,12,3,267,9,3,1,4,1,4,
1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,279,8,5,3,5,281,8,5,1,6,1,6,1,6,1,6,
1,6,5,6,288,8,6,10,6,12,6,291,9,6,3,6,293,8,6,1,6,3,6,296,8,6,1,7,1,7,1,
7,4,7,301,8,7,11,7,12,7,302,1,7,1,7,1,8,1,8,1,8,1,8,3,8,311,8,8,1,9,1,9,
1,9,5,9,316,8,9,10,9,12,9,319,9,9,1,10,1,10,1,10,5,10,324,8,10,10,10,12,
10,327,9,10,1,10,3,10,330,8,10,1,10,3,10,333,8,10,1,11,1,11,5,11,337,8,11,
10,11,12,11,340,9,11,1,12,1,12,1,12,1,12,3,12,346,8,12,1,12,1,12,1,12,1,
12,3,12,352,8,12,1,12,1,12,1,12,1,12,1,12,5,12,359,8,12,10,12,12,12,362,
9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,371,8,14,10,14,12,14,374,9,
14,1,15,3,15,377,8,15,1,15,1,15,4,15,381,8,15,11,15,12,15,382,1,15,1,15,
1,16,1,16,1,16,3,16,390,8,16,1,17,1,17,1,18,1,18,1,18,1,18,4,18,398,8,18,
11,18,12,18,399,1,18,1,18,1,18,3,18,405,8,18,1,19,1,19,3,19,409,8,19,1,19,
1,19,3,19,413,8,19,1,19,1,19,1,19,3,19,418,8,19,1,20,1,20,1,20,1,20,1,20,
5,20,425,8,20,10,20,12,20,428,9,20,1,20,1,20,1,20,3,20,433,8,20,1,20,1,20,
1,20,1,20,1,20,5,20,440,8,20,10,20,12,20,443,9,20,1,20,1,20,1,20,1,20,1,
20,1,20,3,20,451,8,20,1,20,1,20,3,20,455,8,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,473,8,20,1,20,
3,20,476,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,484,8,20,1,20,1,20,1,20,
3,20,489,8,20,3,20,491,8,20,1,20,1,20,3,20,495,8,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,3,20,507,8,20,1,20,1,20,1,20,1,20,1,20,1,20,
3,20,515,8,20,1,21,1,21,1,22,1,22,3,22,521,8,22,1,22,1,22,1,22,5,22,526,
8,22,10,22,12,22,529,9,22,1,22,3,22,532,8,22,1,23,1,23,1,23,1,23,1,23,1,
23,3,23,540,8,23,1,23,5,23,543,8,23,10,23,12,23,546,9,23,1,24,3,24,549,8,
24,1,24,1,24,1,24,3,24,554,8,24,3,24,556,8,24,1,25,1,25,1,25,3,25,561,8,
25,1,25,3,25,564,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,572,8,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,582,8,26,1,26,1,26,3,26,586,8,26,1,
26,1,26,1,26,1,26,3,26,592,8,26,1,26,1,26,1,26,5,26,597,8,26,10,26,12,26,
600,9,26,1,27,1,27,1,27,5,27,605,8,27,10,27,12,27,608,9,27,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,3,28,619,8,28,1,28,3,28,622,8,28,1,29,3,29,
625,8,29,1,29,1,29,1,29,3,29,630,8,29,1,29,1,29,3,29,634,8,29,3,29,636,8,
29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,646,8,30,1,31,4,31,649,8,
31,11,31,12,31,650,1,31,3,31,654,8,31,1,32,1,32,5,32,658,8,32,10,32,12,32,
661,9,32,1,32,3,32,664,8,32,1,32,1,32,5,32,668,8,32,10,32,12,32,671,9,32,
1,32,5,32,674,8,32,10,32,12,32,677,9,32,1,32,1,32,3,32,681,8,32,1,33,1,33,
1,33,3,33,686,8,33,1,33,1,33,3,33,690,8,33,1,33,1,33,3,33,694,8,33,1,33,
1,33,1,33,3,33,699,8,33,1,34,4,34,702,8,34,11,34,12,34,703,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,5,35,714,8,35,10,35,12,35,717,9,35,1,36,4,36,720,
8,36,11,36,12,36,721,1,37,1,37,1,37,3,37,727,8,37,1,37,1,37,1,37,1,38,1,
38,1,38,1,39,1,39,1,39,5,39,738,8,39,10,39,12,39,741,9,39,1,40,1,40,1,40,
1,40,3,40,747,8,40,1,41,1,41,1,41,3,41,752,8,41,1,41,3,41,755,8,41,1,42,
1,42,1,42,1,42,3,42,761,8,42,1,42,5,42,764,8,42,10,42,12,42,767,9,42,3,42,
769,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,777,8,43,1,43,3,43,780,8,43,
1,43,1,43,1,43,1,43,1,43,3,43,787,8,43,1,43,1,43,3,43,791,8,43,1,43,1,43,
1,43,1,43,1,43,1,43,3,43,799,8,43,1,43,3,43,802,8,43,1,44,1,44,1,44,3,44,
807,8,44,1,44,1,44,3,44,811,8,44,1,45,1,45,1,45,1,45,5,45,817,8,45,10,45,
12,45,820,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,828,8,46,10,46,12,46,831,
9,46,1,46,1,46,1,47,5,47,836,8,47,10,47,12,47,839,9,47,1,47,3,47,842,8,47,
1,47,1,47,1,48,1,48,3,48,848,8,48,1,48,1,48,3,48,852,8,48,1,48,1,48,3,48,
856,8,48,1,48,1,48,5,48,860,8,48,10,48,12,48,863,9,48,1,48,1,48,5,48,867,
8,48,10,48,12,48,870,9,48,1,49,5,49,873,8,49,10,49,12,49,876,9,49,1,49,3,
49,879,8,49,1,49,1,49,1,49,1,49,1,49,3,49,886,8,49,1,50,3,50,889,8,50,1,
50,1,50,3,50,893,8,50,1,50,1,50,1,51,1,51,1,51,5,51,900,8,51,10,51,12,51,
903,9,51,1,52,5,52,906,8,52,10,52,12,52,909,9,52,1,52,1,52,1,52,3,52,914,
8,52,1,52,1,52,3,52,918,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,926,8,53,
1,54,5,54,929,8,54,10,54,12,54,932,9,54,1,54,3,54,935,8,54,1,54,1,54,1,54,
1,54,1,54,3,54,942,8,54,1,55,3,55,945,8,55,1,55,1,55,3,55,949,8,55,1,55,
1,55,1,56,1,56,1,56,5,56,956,8,56,10,56,12,56,959,9,56,1,57,5,57,962,8,57,
10,57,12,57,965,9,57,1,57,5,57,968,8,57,10,57,12,57,971,9,57,1,57,3,57,974,
8,57,1,57,1,57,1,57,1,57,1,57,3,57,981,8,57,1,58,1,58,1,58,1,58,5,58,987,
8,58,10,58,12,58,990,9,58,1,58,1,58,1,59,1,59,1,59,3,59,997,8,59,1,60,1,
60,1,60,3,60,1002,8,60,1,61,1,61,1,62,1,62,3,62,1008,8,62,1,63,1,63,1,63,
1,63,1,64,1,64,1,64,5,64,1017,8,64,10,64,12,64,1020,9,64,1,65,1,65,1,65,
1,65,1,66,3,66,1027,8,66,1,66,1,66,3,66,1031,8,66,1,66,4,66,1034,8,66,11,
66,12,66,1035,1,66,1,66,1,67,1,67,1,67,3,67,1043,8,67,5,67,1045,8,67,10,
67,12,67,1048,9,67,1,67,5,67,1051,8,67,10,67,12,67,1054,9,67,1,67,1,67,1,
67,3,67,1059,8,67,5,67,1061,8,67,10,67,12,67,1064,9,67,1,67,5,67,1067,8,
67,10,67,12,67,1070,9,67,1,67,1,67,3,67,1074,8,67,1,68,1,68,1,68,3,68,1079,
8,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1087,8,68,1,69,1,69,1,69,1,69,5,
69,1093,8,69,10,69,12,69,1096,9,69,1,70,1,70,1,70,1,70,1,70,3,70,1103,8,
70,3,70,1105,8,70,1,71,1,71,1,71,1,71,5,71,1111,8,71,10,71,12,71,1114,9,
71,1,71,1,71,3,71,1118,8,71,1,71,1,71,1,72,1,72,1,72,3,72,1125,8,72,1,73,
1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,1135,8,73,10,73,12,73,1138,9,73,
1,73,3,73,1141,8,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,
76,3,76,1154,8,76,1,77,1,77,3,77,1158,8,77,1,77,1,77,1,78,1,78,3,78,1164,
8,78,1,78,1,78,3,78,1168,8,78,1,78,1,78,3,78,1172,8,78,1,79,1,79,1,79,1,
79,3,79,1178,8,79,1,80,1,80,1,80,1,80,1,80,5,80,1185,8,80,10,80,12,80,1188,
9,80,1,80,1,80,3,80,1192,8,80,1,81,1,81,1,81,5,81,1197,8,81,10,81,12,81,
1200,9,81,1,81,1,81,3,81,1204,8,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,
82,1,82,1,82,3,82,1216,8,82,1,83,1,83,1,83,3,83,1221,8,83,1,83,1,83,1,83,
1,83,1,83,3,83,1228,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
83,3,83,1240,8,83,1,83,3,83,1243,8,83,3,83,1245,8,83,1,84,1,84,3,84,1249,
8,84,1,84,1,84,1,84,1,85,3,85,1255,8,85,1,85,1,85,1,85,3,85,1260,8,85,1,
85,1,85,1,85,1,85,3,85,1266,8,85,1,86,1,86,3,86,1270,8,86,1,86,5,86,1273,
8,86,10,86,12,86,1276,9,86,1,86,3,86,1279,8,86,1,86,1,86,1,86,1,87,1,87,
3,87,1286,8,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1296,8,89,1,
89,3,89,1299,8,89,3,89,1301,8,89,1,90,1,90,1,90,3,90,1306,8,90,1,90,3,90,
1309,8,90,3,90,1311,8,90,1,91,3,91,1314,8,91,1,91,1,91,3,91,1318,8,91,1,
92,3,92,1321,8,92,1,92,1,92,3,92,1325,8,92,1,93,1,93,1,93,5,93,1330,8,93,
10,93,12,93,1333,9,93,1,94,1,94,1,94,5,94,1338,8,94,10,94,12,94,1341,9,94,
1,95,1,95,5,95,1345,8,95,10,95,12,95,1348,9,95,1,96,1,96,4,96,1352,8,96,
11,96,12,96,1353,1,96,1,96,1,96,1,97,1,97,3,97,1361,8,97,5,97,1363,8,97,
10,97,12,97,1366,9,97,1,97,5,97,1369,8,97,10,97,12,97,1372,9,97,1,97,1,97,
1,98,1,98,3,98,1378,8,98,1,99,1,99,1,99,5,99,1383,8,99,10,99,12,99,1386,
9,99,1,99,1,99,1,100,1,100,4,100,1392,8,100,11,100,12,100,1393,1,101,4,101,
1397,8,101,11,101,12,101,1398,1,102,1,102,3,102,1403,8,102,5,102,1405,8,
102,10,102,12,102,1408,9,102,1,102,5,102,1411,8,102,10,102,12,102,1414,9,
102,1,102,1,102,1,102,1,102,3,102,1420,8,102,1,103,1,103,1,103,3,103,1425,
8,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,5,105,
1437,8,105,10,105,12,105,1440,9,105,1,105,1,105,1,105,0,4,6,24,46,52,106,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,0,10,2,0,1,1,36,38,1,0,19,21,2,0,22,22,40,40,3,0,20,20,62,62,70,
70,2,0,1,1,36,36,2,0,20,20,62,62,2,0,16,16,48,48,3,0,22,22,40,40,50,52,1,
0,53,54,2,0,5,5,62,62,1586,0,225,1,0,0,0,2,227,1,0,0,0,4,235,1,0,0,0,6,258,
1,0,0,0,8,268,1,0,0,0,10,280,1,0,0,0,12,295,1,0,0,0,14,297,1,0,0,0,16,310,
1,0,0,0,18,312,1,0,0,0,20,332,1,0,0,0,22,334,1,0,0,0,24,351,1,0,0,0,26,363,
1,0,0,0,28,367,1,0,0,0,30,376,1,0,0,0,32,389,1,0,0,0,34,391,1,0,0,0,36,404,
1,0,0,0,38,417,1,0,0,0,40,514,1,0,0,0,42,516,1,0,0,0,44,518,1,0,0,0,46,533,
1,0,0,0,48,548,1,0,0,0,50,563,1,0,0,0,52,581,1,0,0,0,54,601,1,0,0,0,56,621,
1,0,0,0,58,635,1,0,0,0,60,645,1,0,0,0,62,648,1,0,0,0,64,680,1,0,0,0,66,698,
1,0,0,0,68,701,1,0,0,0,70,705,1,0,0,0,72,719,1,0,0,0,74,723,1,0,0,0,76,731,
1,0,0,0,78,734,1,0,0,0,80,746,1,0,0,0,82,754,1,0,0,0,84,768,1,0,0,0,86,801,
1,0,0,0,88,810,1,0,0,0,90,812,1,0,0,0,92,823,1,0,0,0,94,837,1,0,0,0,96,845,
1,0,0,0,98,874,1,0,0,0,100,888,1,0,0,0,102,896,1,0,0,0,104,907,1,0,0,0,106,
925,1,0,0,0,108,930,1,0,0,0,110,944,1,0,0,0,112,952,1,0,0,0,114,963,1,0,
0,0,116,982,1,0,0,0,118,993,1,0,0,0,120,1001,1,0,0,0,122,1003,1,0,0,0,124,
1005,1,0,0,0,126,1009,1,0,0,0,128,1013,1,0,0,0,130,1021,1,0,0,0,132,1026,
1,0,0,0,134,1073,1,0,0,0,136,1086,1,0,0,0,138,1088,1,0,0,0,140,1097,1,0,
0,0,142,1106,1,0,0,0,144,1121,1,0,0,0,146,1140,1,0,0,0,148,1142,1,0,0,0,
150,1146,1,0,0,0,152,1150,1,0,0,0,154,1155,1,0,0,0,156,1161,1,0,0,0,158,
1177,1,0,0,0,160,1191,1,0,0,0,162,1193,1,0,0,0,164,1215,1,0,0,0,166,1244,
1,0,0,0,168,1246,1,0,0,0,170,1265,1,0,0,0,172,1267,1,0,0,0,174,1283,1,0,
0,0,176,1289,1,0,0,0,178,1300,1,0,0,0,180,1310,1,0,0,0,182,1313,1,0,0,0,
184,1320,1,0,0,0,186,1326,1,0,0,0,188,1334,1,0,0,0,190,1342,1,0,0,0,192,
1349,1,0,0,0,194,1364,1,0,0,0,196,1377,1,0,0,0,198,1379,1,0,0,0,200,1389,
1,0,0,0,202,1396,1,0,0,0,204,1419,1,0,0,0,206,1421,1,0,0,0,208,1430,1,0,
0,0,210,1438,1,0,0,0,212,214,5,1,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,
215,1,0,0,0,215,226,5,66,0,0,216,218,5,1,0,0,217,216,1,0,0,0,217,218,1,0,
0,0,218,219,1,0,0,0,219,226,5,68,0,0,220,226,5,63,0,0,221,226,5,64,0,0,222,
226,5,67,0,0,223,226,5,65,0,0,224,226,5,2,0,0,225,213,1,0,0,0,225,217,1,
0,0,0,225,220,1,0,0,0,225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,225,
224,1,0,0,0,226,1,1,0,0,0,227,232,5,62,0,0,228,229,5,3,0,0,229,231,5,62,
0,0,230,228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
3,1,0,0,0,234,232,1,0,0,0,235,240,5,62,0,0,236,237,5,4,0,0,237,239,5,62,
0,0,238,236,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,
5,1,0,0,0,242,240,1,0,0,0,243,244,6,3,-1,0,244,259,5,62,0,0,245,246,5,62,
0,0,246,248,5,3,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,256,1,0,0,0,249,
257,5,5,0,0,250,252,5,6,0,0,251,253,3,8,4,0,252,251,1,0,0,0,252,253,1,0,
0,0,253,254,1,0,0,0,254,255,5,3,0,0,255,257,5,62,0,0,256,249,1,0,0,0,256,
250,1,0,0,0,257,259,1,0,0,0,258,243,1,0,0,0,258,247,1,0,0,0,259,265,1,0,
0,0,260,261,10,2,0,0,261,262,5,3,0,0,262,264,5,62,0,0,263,260,1,0,0,0,264,
267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,7,1,0,0,0,267,265,1,0,0,
0,268,269,5,7,0,0,269,270,5,62,0,0,270,271,5,8,0,0,271,9,1,0,0,0,272,273,
3,12,6,0,273,274,5,9,0,0,274,275,3,10,5,0,275,281,1,0,0,0,276,278,3,18,9,
0,277,279,3,14,7,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,272,
1,0,0,0,280,276,1,0,0,0,281,11,1,0,0,0,282,296,3,18,9,0,283,292,5,10,0,0,
284,289,3,106,53,0,285,286,5,4,0,0,286,288,3,106,53,0,287,285,1,0,0,0,288,
291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,293,1,0,0,0,291,289,1,0,
0,0,292,284,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,296,5,11,0,0,295,
282,1,0,0,0,295,283,1,0,0,0,296,13,1,0,0,0,297,298,5,12,0,0,298,300,5,13,
0,0,299,301,3,16,8,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,
303,1,0,0,0,303,304,1,0,0,0,304,305,5,14,0,0,305,15,1,0,0,0,306,307,5,15,
0,0,307,311,3,156,78,0,308,309,5,16,0,0,309,311,3,148,74,0,310,306,1,0,0,
0,310,308,1,0,0,0,311,17,1,0,0,0,312,317,3,20,10,0,313,314,5,62,0,0,314,
316,3,20,10,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,
0,0,0,318,19,1,0,0,0,319,317,1,0,0,0,320,325,3,22,11,0,321,322,5,17,0,0,
322,324,3,22,11,0,323,321,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,
1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,330,3,30,15,0,329,328,1,0,0,
0,329,330,1,0,0,0,330,333,1,0,0,0,331,333,3,30,15,0,332,320,1,0,0,0,332,
331,1,0,0,0,333,21,1,0,0,0,334,338,3,24,12,0,335,337,3,128,64,0,336,335,
1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,23,1,0,0,0,340,
338,1,0,0,0,341,342,6,12,-1,0,342,345,3,6,3,0,343,344,5,3,0,0,344,346,5,
15,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,352,1,0,0,0,347,348,5,10,0,0,
348,349,3,28,14,0,349,350,5,11,0,0,350,352,1,0,0,0,351,341,1,0,0,0,351,347,
1,0,0,0,352,360,1,0,0,0,353,354,10,4,0,0,354,359,3,26,13,0,355,356,10,3,
0,0,356,357,5,18,0,0,357,359,5,62,0,0,358,353,1,0,0,0,358,355,1,0,0,0,359,
362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,25,1,0,0,0,362,360,1,0,0,
0,363,364,5,7,0,0,364,365,3,28,14,0,365,366,5,8,0,0,366,27,1,0,0,0,367,372,
3,10,5,0,368,369,5,4,0,0,369,371,3,10,5,0,370,368,1,0,0,0,371,374,1,0,0,
0,372,370,1,0,0,0,372,373,1,0,0,0,373,29,1,0,0,0,374,372,1,0,0,0,375,377,
5,74,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,5,13,0,
0,379,381,3,32,16,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,0,382,
383,1,0,0,0,383,384,1,0,0,0,384,385,5,14,0,0,385,31,1,0,0,0,386,390,3,146,
73,0,387,388,5,15,0,0,388,390,3,168,84,0,389,386,1,0,0,0,389,387,1,0,0,0,
390,33,1,0,0,0,391,392,3,10,5,0,392,35,1,0,0,0,393,394,5,19,0,0,394,405,
3,18,9,0,395,397,5,19,0,0,396,398,3,128,64,0,397,396,1,0,0,0,398,399,1,0,
0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,405,1,0,0,0,401,402,5,19,0,0,402,
403,5,20,0,0,403,405,5,21,0,0,404,393,1,0,0,0,404,395,1,0,0,0,404,401,1,
0,0,0,405,37,1,0,0,0,406,413,3,116,58,0,407,409,5,22,0,0,408,407,1,0,0,0,
408,409,1,0,0,0,409,410,1,0,0,0,410,413,5,62,0,0,411,413,5,20,0,0,412,406,
1,0,0,0,412,408,1,0,0,0,412,411,1,0,0,0,413,414,1,0,0,0,414,415,5,9,0,0,
415,418,3,38,19,0,416,418,3,40,20,0,417,412,1,0,0,0,417,416,1,0,0,0,418,
39,1,0,0,0,419,420,5,23,0,0,420,421,5,10,0,0,421,422,3,38,19,0,422,426,5,
11,0,0,423,425,5,74,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,
426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,432,3,38,19,0,430,431,
5,24,0,0,431,433,3,38,19,0,432,430,1,0,0,0,432,433,1,0,0,0,433,515,1,0,0,
0,434,435,5,25,0,0,435,436,5,10,0,0,436,437,3,38,19,0,437,441,5,11,0,0,438,
440,5,74,0,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,
0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,445,3,38,19,0,445,515,1,0,0,0,446,
447,5,26,0,0,447,450,3,38,19,0,448,449,5,27,0,0,449,451,3,38,19,0,450,448,
1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,453,5,28,0,0,453,455,3,38,19,
0,454,452,1,0,0,0,454,455,1,0,0,0,455,515,1,0,0,0,456,457,5,29,0,0,457,458,
3,38,19,0,458,459,5,25,0,0,459,460,5,10,0,0,460,461,3,38,19,0,461,462,5,
11,0,0,462,515,1,0,0,0,463,472,5,30,0,0,464,465,5,10,0,0,465,466,3,68,34,
0,466,467,5,11,0,0,467,473,1,0,0,0,468,469,5,13,0,0,469,470,3,68,34,0,470,
471,5,14,0,0,471,473,1,0,0,0,472,464,1,0,0,0,472,468,1,0,0,0,473,475,1,0,
0,0,474,476,5,31,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,
478,3,38,19,0,478,515,1,0,0,0,479,480,5,32,0,0,480,515,3,38,19,0,481,483,
5,33,0,0,482,484,3,38,19,0,483,482,1,0,0,0,483,484,1,0,0,0,484,515,1,0,0,
0,485,491,3,50,25,0,486,488,3,52,26,0,487,489,5,20,0,0,488,487,1,0,0,0,488,
489,1,0,0,0,489,491,1,0,0,0,490,485,1,0,0,0,490,486,1,0,0,0,491,492,1,0,
0,0,492,493,5,3,0,0,493,495,1,0,0,0,494,490,1,0,0,0,494,495,1,0,0,0,495,
496,1,0,0,0,496,497,5,62,0,0,497,498,5,34,0,0,498,515,3,38,19,0,499,500,
3,52,26,0,500,501,3,56,28,0,501,502,5,34,0,0,502,503,3,38,19,0,503,515,1,
0,0,0,504,506,3,44,22,0,505,507,3,36,18,0,506,505,1,0,0,0,506,507,1,0,0,
0,507,515,1,0,0,0,508,509,3,44,22,0,509,510,5,35,0,0,510,511,5,13,0,0,511,
512,3,72,36,0,512,513,5,14,0,0,513,515,1,0,0,0,514,419,1,0,0,0,514,434,1,
0,0,0,514,446,1,0,0,0,514,456,1,0,0,0,514,463,1,0,0,0,514,479,1,0,0,0,514,
481,1,0,0,0,514,494,1,0,0,0,514,499,1,0,0,0,514,504,1,0,0,0,514,508,1,0,
0,0,515,41,1,0,0,0,516,517,7,0,0,0,517,43,1,0,0,0,518,520,3,46,23,0,519,
521,5,62,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,527,1,0,0,0,522,523,3,42,
21,0,523,524,3,52,26,0,524,526,1,0,0,0,525,522,1,0,0,0,526,529,1,0,0,0,527,
525,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,530,532,5,74,
0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,45,1,0,0,0,533,534,6,23,-1,0,534,
535,3,48,24,0,535,544,1,0,0,0,536,537,10,1,0,0,537,539,5,62,0,0,538,540,
5,74,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,543,3,46,23,
2,542,536,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,47,
1,0,0,0,546,544,1,0,0,0,547,549,3,42,21,0,548,547,1,0,0,0,548,549,1,0,0,
0,549,555,1,0,0,0,550,556,3,50,25,0,551,553,3,52,26,0,552,554,5,20,0,0,553,
552,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,550,1,0,0,0,555,551,1,0,
0,0,556,49,1,0,0,0,557,560,5,39,0,0,558,561,3,182,91,0,559,561,3,132,66,
0,560,558,1,0,0,0,560,559,1,0,0,0,561,564,1,0,0,0,562,564,3,60,30,0,563,
557,1,0,0,0,563,562,1,0,0,0,564,51,1,0,0,0,565,566,6,26,-1,0,566,582,3,0,
0,0,567,582,3,6,3,0,568,582,5,20,0,0,569,571,5,10,0,0,570,572,3,54,27,0,
571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,582,5,11,0,0,574,575,
3,50,25,0,575,576,5,3,0,0,576,577,5,62,0,0,577,582,1,0,0,0,578,579,3,50,
25,0,579,580,3,26,13,0,580,582,1,0,0,0,581,565,1,0,0,0,581,567,1,0,0,0,581,
568,1,0,0,0,581,569,1,0,0,0,581,574,1,0,0,0,581,578,1,0,0,0,582,598,1,0,
0,0,583,585,10,4,0,0,584,586,5,20,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,
587,1,0,0,0,587,588,5,3,0,0,588,597,5,62,0,0,589,591,10,2,0,0,590,592,5,
20,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,3,26,13,0,
594,595,10,1,0,0,595,597,3,56,28,0,596,583,1,0,0,0,596,589,1,0,0,0,596,594,
1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,53,1,0,0,0,600,
598,1,0,0,0,601,606,3,38,19,0,602,603,5,4,0,0,603,605,3,38,19,0,604,602,
1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,55,1,0,0,0,608,
606,1,0,0,0,609,610,5,10,0,0,610,611,3,58,29,0,611,612,5,11,0,0,612,622,
1,0,0,0,613,614,5,13,0,0,614,615,3,58,29,0,615,616,5,14,0,0,616,622,1,0,
0,0,617,619,5,74,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,
622,3,60,30,0,621,609,1,0,0,0,621,613,1,0,0,0,621,618,1,0,0,0,622,57,1,0,
0,0,623,625,3,54,27,0,624,623,1,0,0,0,624,625,1,0,0,0,625,636,1,0,0,0,626,
627,3,54,27,0,627,628,5,4,0,0,628,630,1,0,0,0,629,626,1,0,0,0,629,630,1,
0,0,0,630,631,1,0,0,0,631,633,3,44,22,0,632,634,7,1,0,0,633,632,1,0,0,0,
633,634,1,0,0,0,634,636,1,0,0,0,635,624,1,0,0,0,635,629,1,0,0,0,636,59,1,
0,0,0,637,638,5,13,0,0,638,639,3,72,36,0,639,640,5,14,0,0,640,646,1,0,0,
0,641,642,5,13,0,0,642,643,3,62,31,0,643,644,5,14,0,0,644,646,1,0,0,0,645,
637,1,0,0,0,645,641,1,0,0,0,646,61,1,0,0,0,647,649,3,64,32,0,648,647,1,0,
0,0,649,650,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,
654,3,66,33,0,653,652,1,0,0,0,653,654,1,0,0,0,654,63,1,0,0,0,655,681,3,138,
69,0,656,658,3,128,64,0,657,656,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,
659,660,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,662,664,7,2,0,0,663,662,
1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,681,3,160,80,0,666,668,3,128,
64,0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
675,1,0,0,0,671,669,1,0,0,0,672,674,3,122,61,0,673,672,1,0,0,0,674,677,1,
0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,
681,3,170,85,0,679,681,3,40,20,0,680,655,1,0,0,0,680,659,1,0,0,0,680,669,
1,0,0,0,680,679,1,0,0,0,681,65,1,0,0,0,682,699,3,40,20,0,683,694,3,116,58,
0,684,686,5,22,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,690,
5,62,0,0,688,690,5,20,0,0,689,685,1,0,0,0,689,688,1,0,0,0,690,691,1,0,0,
0,691,692,5,19,0,0,692,694,3,20,10,0,693,683,1,0,0,0,693,689,1,0,0,0,694,
695,1,0,0,0,695,696,5,9,0,0,696,697,3,62,31,0,697,699,1,0,0,0,698,682,1,
0,0,0,698,693,1,0,0,0,699,67,1,0,0,0,700,702,3,70,35,0,701,700,1,0,0,0,702,
703,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,69,1,0,0,0,705,706,3,80,
40,0,706,707,5,41,0,0,707,715,3,38,19,0,708,714,3,76,38,0,709,710,3,80,40,
0,710,711,5,34,0,0,711,712,3,38,19,0,712,714,1,0,0,0,713,708,1,0,0,0,713,
709,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,71,1,0,0,
0,717,715,1,0,0,0,718,720,3,74,37,0,719,718,1,0,0,0,720,721,1,0,0,0,721,
719,1,0,0,0,721,722,1,0,0,0,722,73,1,0,0,0,723,724,5,42,0,0,724,726,3,78,
39,0,725,727,3,76,38,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
729,5,9,0,0,729,730,3,62,31,0,730,75,1,0,0,0,731,732,5,23,0,0,732,733,3,
44,22,0,733,77,1,0,0,0,734,739,3,80,40,0,735,736,5,43,0,0,736,738,3,80,40,
0,737,735,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,79,
1,0,0,0,741,739,1,0,0,0,742,743,7,3,0,0,743,744,5,19,0,0,744,747,3,34,17,
0,745,747,3,82,41,0,746,742,1,0,0,0,746,745,1,0,0,0,747,81,1,0,0,0,748,751,
5,62,0,0,749,750,5,44,0,0,750,752,3,84,42,0,751,749,1,0,0,0,751,752,1,0,
0,0,752,755,1,0,0,0,753,755,3,84,42,0,754,748,1,0,0,0,754,753,1,0,0,0,755,
83,1,0,0,0,756,769,3,86,43,0,757,765,3,86,43,0,758,760,5,62,0,0,759,761,
5,74,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,3,86,43,
0,763,758,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,769,
1,0,0,0,767,765,1,0,0,0,768,756,1,0,0,0,768,757,1,0,0,0,769,85,1,0,0,0,770,
802,5,20,0,0,771,802,5,69,0,0,772,802,3,0,0,0,773,779,3,6,3,0,774,776,5,
10,0,0,775,777,3,88,44,0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,
778,780,5,11,0,0,779,774,1,0,0,0,779,780,1,0,0,0,780,802,1,0,0,0,781,782,
3,6,3,0,782,786,5,10,0,0,783,784,3,88,44,0,784,785,5,4,0,0,785,787,1,0,0,
0,786,783,1,0,0,0,786,787,1,0,0,0,787,790,1,0,0,0,788,789,5,62,0,0,789,791,
5,44,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,5,20,0,
0,793,794,5,21,0,0,794,795,5,11,0,0,795,802,1,0,0,0,796,798,5,10,0,0,797,
799,3,88,44,0,798,797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,802,5,
11,0,0,801,770,1,0,0,0,801,771,1,0,0,0,801,772,1,0,0,0,801,773,1,0,0,0,801,
781,1,0,0,0,801,796,1,0,0,0,802,87,1,0,0,0,803,806,3,78,39,0,804,805,5,4,
0,0,805,807,3,88,44,0,806,804,1,0,0,0,806,807,1,0,0,0,807,811,1,0,0,0,808,
809,5,20,0,0,809,811,5,21,0,0,810,803,1,0,0,0,810,808,1,0,0,0,811,89,1,0,
0,0,812,813,5,7,0,0,813,818,3,94,47,0,814,815,5,4,0,0,815,817,3,94,47,0,
816,814,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,
1,0,0,0,820,818,1,0,0,0,821,822,5,8,0,0,822,91,1,0,0,0,823,824,5,7,0,0,824,
829,3,96,48,0,825,826,5,4,0,0,826,828,3,96,48,0,827,825,1,0,0,0,828,831,
1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,
832,833,5,8,0,0,833,93,1,0,0,0,834,836,3,128,64,0,835,834,1,0,0,0,836,839,
1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,
840,842,7,4,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,
3,96,48,0,844,95,1,0,0,0,845,847,7,5,0,0,846,848,3,90,45,0,847,846,1,0,0,
0,847,848,1,0,0,0,848,851,1,0,0,0,849,850,5,45,0,0,850,852,3,10,5,0,851,
849,1,0,0,0,851,852,1,0,0,0,852,855,1,0,0,0,853,854,5,46,0,0,854,856,3,10,
5,0,855,853,1,0,0,0,855,856,1,0,0,0,856,861,1,0,0,0,857,858,5,47,0,0,858,
860,3,10,5,0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,
0,0,862,868,1,0,0,0,863,861,1,0,0,0,864,865,5,19,0,0,865,867,3,10,5,0,866,
864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,97,1,0,0,
0,870,868,1,0,0,0,871,873,3,100,50,0,872,871,1,0,0,0,873,876,1,0,0,0,874,
872,1,0,0,0,874,875,1,0,0,0,875,885,1,0,0,0,876,874,1,0,0,0,877,879,5,74,
0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,881,5,10,0,0,881,
882,5,22,0,0,882,883,3,102,51,0,883,884,5,11,0,0,884,886,1,0,0,0,885,878,
1,0,0,0,885,886,1,0,0,0,886,99,1,0,0,0,887,889,5,74,0,0,888,887,1,0,0,0,
888,889,1,0,0,0,889,890,1,0,0,0,890,892,5,10,0,0,891,893,3,102,51,0,892,
891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,11,0,0,895,101,1,0,
0,0,896,901,3,104,52,0,897,898,5,4,0,0,898,900,3,104,52,0,899,897,1,0,0,
0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,103,1,0,0,0,903,901,
1,0,0,0,904,906,3,128,64,0,905,904,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,
0,907,908,1,0,0,0,908,910,1,0,0,0,909,907,1,0,0,0,910,913,5,62,0,0,911,912,
5,19,0,0,912,914,3,106,53,0,913,911,1,0,0,0,913,914,1,0,0,0,914,917,1,0,
0,0,915,916,5,34,0,0,916,918,3,38,19,0,917,915,1,0,0,0,917,918,1,0,0,0,918,
105,1,0,0,0,919,926,3,10,5,0,920,921,5,9,0,0,921,926,3,10,5,0,922,923,3,
10,5,0,923,924,5,21,0,0,924,926,1,0,0,0,925,919,1,0,0,0,925,920,1,0,0,0,
925,922,1,0,0,0,926,107,1,0,0,0,927,929,3,110,55,0,928,927,1,0,0,0,929,932,
1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,941,1,0,0,0,932,930,1,0,0,0,
933,935,5,74,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,
5,10,0,0,937,938,5,22,0,0,938,939,3,112,56,0,939,940,5,11,0,0,940,942,1,
0,0,0,941,934,1,0,0,0,941,942,1,0,0,0,942,109,1,0,0,0,943,945,5,74,0,0,944,
943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,5,10,0,0,947,949,3,112,
56,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,5,11,0,0,951,
111,1,0,0,0,952,957,3,114,57,0,953,954,5,4,0,0,954,956,3,114,57,0,955,953,
1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,113,1,0,0,0,
959,957,1,0,0,0,960,962,3,128,64,0,961,960,1,0,0,0,962,965,1,0,0,0,963,961,
1,0,0,0,963,964,1,0,0,0,964,969,1,0,0,0,965,963,1,0,0,0,966,968,3,120,60,
0,967,966,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,973,
1,0,0,0,971,969,1,0,0,0,972,974,7,6,0,0,973,972,1,0,0,0,973,974,1,0,0,0,
974,975,1,0,0,0,975,976,5,62,0,0,976,977,5,19,0,0,977,980,3,106,53,0,978,
979,5,34,0,0,979,981,3,38,19,0,980,978,1,0,0,0,980,981,1,0,0,0,981,115,1,
0,0,0,982,983,5,10,0,0,983,988,3,118,59,0,984,985,5,4,0,0,985,987,3,118,
59,0,986,984,1,0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,
991,1,0,0,0,990,988,1,0,0,0,991,992,5,11,0,0,992,117,1,0,0,0,993,996,7,5,
0,0,994,995,5,19,0,0,995,997,3,10,5,0,996,994,1,0,0,0,996,997,1,0,0,0,997,
119,1,0,0,0,998,1002,3,122,61,0,999,1002,3,124,62,0,1000,1002,5,49,0,0,1001,
998,1,0,0,0,1001,999,1,0,0,0,1001,1000,1,0,0,0,1002,121,1,0,0,0,1003,1004,
7,7,0,0,1004,123,1,0,0,0,1005,1007,7,8,0,0,1006,1008,3,126,63,0,1007,1006,
1,0,0,0,1007,1008,1,0,0,0,1008,125,1,0,0,0,1009,1010,5,7,0,0,1010,1011,7,
9,0,0,1011,1012,5,8,0,0,1012,127,1,0,0,0,1013,1014,5,44,0,0,1014,1018,3,
24,12,0,1015,1017,3,56,28,0,1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,1016,
1,0,0,0,1018,1019,1,0,0,0,1019,129,1,0,0,0,1020,1018,1,0,0,0,1021,1022,5,
44,0,0,1022,1023,3,24,12,0,1023,1024,3,56,28,0,1024,131,1,0,0,0,1025,1027,
5,74,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1030,
5,13,0,0,1029,1031,3,136,68,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1033,
1,0,0,0,1032,1034,3,134,67,0,1033,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1033,
1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,5,14,0,0,1038,133,
1,0,0,0,1039,1074,3,138,69,0,1040,1042,3,128,64,0,1041,1043,5,74,0,0,1042,
1041,1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,0,0,1044,1040,1,0,0,0,1045,
1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1052,1,0,0,0,1048,
1046,1,0,0,0,1049,1051,3,120,60,0,1050,1049,1,0,0,0,1051,1054,1,0,0,0,1052,
1050,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1052,1,0,0,0,1055,
1074,3,160,80,0,1056,1058,3,128,64,0,1057,1059,5,74,0,0,1058,1057,1,0,0,
0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1056,1,0,0,0,1061,1064,1,0,0,
0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1068,1,0,0,0,1064,1062,1,0,0,
0,1065,1067,3,120,60,0,1066,1065,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,
0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,1068,1,0,0,0,1071,1074,3,146,
73,0,1072,1074,3,38,19,0,1073,1039,1,0,0,0,1073,1046,1,0,0,0,1073,1062,1,
0,0,0,1073,1072,1,0,0,0,1074,135,1,0,0,0,1075,1078,5,62,0,0,1076,1077,5,
19,0,0,1077,1079,3,10,5,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,1080,
1,0,0,0,1080,1087,5,9,0,0,1081,1082,5,5,0,0,1082,1083,5,19,0,0,1083,1084,
3,10,5,0,1084,1085,5,9,0,0,1085,1087,1,0,0,0,1086,1075,1,0,0,0,1086,1081,
1,0,0,0,1087,137,1,0,0,0,1088,1089,5,55,0,0,1089,1094,3,140,70,0,1090,1091,
5,4,0,0,1091,1093,3,140,70,0,1092,1090,1,0,0,0,1093,1096,1,0,0,0,1094,1092,
1,0,0,0,1094,1095,1,0,0,0,1095,139,1,0,0,0,1096,1094,1,0,0,0,1097,1104,3,
6,3,0,1098,1102,5,3,0,0,1099,1103,5,62,0,0,1100,1103,5,20,0,0,1101,1103,
3,142,71,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1105,
1,0,0,0,1104,1098,1,0,0,0,1104,1105,1,0,0,0,1105,141,1,0,0,0,1106,1112,5,
13,0,0,1107,1108,3,144,72,0,1108,1109,5,4,0,0,1109,1111,1,0,0,0,1110,1107,
1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1117,
1,0,0,0,1114,1112,1,0,0,0,1115,1118,3,144,72,0,1116,1118,5,20,0,0,1117,1115,
1,0,0,0,1117,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,14,0,0,1120,143,
1,0,0,0,1121,1124,5,62,0,0,1122,1123,5,9,0,0,1123,1125,7,5,0,0,1124,1122,
1,0,0,0,1124,1125,1,0,0,0,1125,145,1,0,0,0,1126,1127,5,16,0,0,1127,1141,
3,148,74,0,1128,1129,5,48,0,0,1129,1141,3,150,75,0,1130,1131,5,56,0,0,1131,
1141,3,152,76,0,1132,1136,5,15,0,0,1133,1135,5,74,0,0,1134,1133,1,0,0,0,
1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1139,1,0,0,0,
1138,1136,1,0,0,0,1139,1141,3,156,78,0,1140,1126,1,0,0,0,1140,1128,1,0,0,
0,1140,1130,1,0,0,0,1140,1132,1,0,0,0,1141,147,1,0,0,0,1142,1143,3,4,2,0,
1143,1144,5,19,0,0,1144,1145,3,10,5,0,1145,149,1,0,0,0,1146,1147,3,4,2,0,
1147,1148,5,19,0,0,1148,1149,3,10,5,0,1149,151,1,0,0,0,1150,1153,3,154,77,
0,1151,1152,5,19,0,0,1152,1154,3,10,5,0,1153,1151,1,0,0,0,1153,1154,1,0,
0,0,1154,153,1,0,0,0,1155,1157,5,62,0,0,1156,1158,3,92,46,0,1157,1156,1,
0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,3,98,49,0,1160,155,1,
0,0,0,1161,1163,5,62,0,0,1162,1164,3,90,45,0,1163,1162,1,0,0,0,1163,1164,
1,0,0,0,1164,1167,1,0,0,0,1165,1166,5,45,0,0,1166,1168,3,10,5,0,1167,1165,
1,0,0,0,1167,1168,1,0,0,0,1168,1171,1,0,0,0,1169,1170,5,46,0,0,1170,1172,
3,10,5,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,157,1,0,0,0,1173,1174,
5,16,0,0,1174,1178,3,162,81,0,1175,1176,5,48,0,0,1176,1178,3,164,82,0,1177,
1173,1,0,0,0,1177,1175,1,0,0,0,1178,159,1,0,0,0,1179,1192,3,158,79,0,1180,
1181,5,56,0,0,1181,1192,3,166,83,0,1182,1186,5,15,0,0,1183,1185,5,74,0,0,
1184,1183,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,
1187,1189,1,0,0,0,1188,1186,1,0,0,0,1189,1192,3,168,84,0,1190,1192,3,170,
85,0,1191,1179,1,0,0,0,1191,1180,1,0,0,0,1191,1182,1,0,0,0,1191,1190,1,0,
0,0,1192,161,1,0,0,0,1193,1198,3,82,41,0,1194,1195,5,4,0,0,1195,1197,3,82,
41,0,1196,1194,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,
0,0,1199,1203,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,19,0,0,1202,1204,3,10,
5,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,34,
0,0,1206,1207,3,38,19,0,1207,163,1,0,0,0,1208,1216,3,162,81,0,1209,1210,
3,4,2,0,1210,1211,5,19,0,0,1211,1212,3,10,5,0,1212,1213,5,34,0,0,1213,1214,
5,20,0,0,1214,1216,1,0,0,0,1215,1208,1,0,0,0,1215,1209,1,0,0,0,1216,165,
1,0,0,0,1217,1220,3,154,77,0,1218,1219,5,19,0,0,1219,1221,3,10,5,0,1220,
1218,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1223,5,34,0,0,1223,
1224,3,38,19,0,1224,1245,1,0,0,0,1225,1227,3,154,77,0,1226,1228,5,74,0,0,
1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,13,0,0,
1230,1231,3,62,31,0,1231,1232,5,14,0,0,1232,1245,1,0,0,0,1233,1234,5,5,0,
0,1234,1235,3,100,50,0,1235,1242,3,98,49,0,1236,1237,5,34,0,0,1237,1243,
3,196,98,0,1238,1240,5,74,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,
1,0,0,0,1241,1243,3,198,99,0,1242,1236,1,0,0,0,1242,1239,1,0,0,0,1243,1245,
1,0,0,0,1244,1217,1,0,0,0,1244,1225,1,0,0,0,1244,1233,1,0,0,0,1245,167,1,
0,0,0,1246,1248,5,62,0,0,1247,1249,3,90,45,0,1248,1247,1,0,0,0,1248,1249,
1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,34,0,0,1251,1252,3,10,5,0,1252,169,
1,0,0,0,1253,1255,5,42,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,
1,0,0,0,1256,1257,5,57,0,0,1257,1266,3,172,86,0,1258,1260,5,42,0,0,1259,
1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,58,0,0,1262,
1266,3,176,88,0,1263,1264,5,59,0,0,1264,1266,3,174,87,0,1265,1254,1,0,0,
0,1265,1259,1,0,0,0,1265,1263,1,0,0,0,1266,171,1,0,0,0,1267,1269,5,62,0,
0,1268,1270,3,90,45,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1274,1,0,
0,0,1271,1273,3,130,65,0,1272,1271,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,
0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1277,1279,3,
124,62,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,
3,108,54,0,1281,1282,3,178,89,0,1282,173,1,0,0,0,1283,1285,5,62,0,0,1284,
1286,3,90,45,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,1287,1,0,0,0,1287,
1288,3,180,90,0,1288,175,1,0,0,0,1289,1290,5,62,0,0,1290,1291,3,178,89,0,
1291,177,1,0,0,0,1292,1293,5,60,0,0,1293,1301,3,182,91,0,1294,1296,5,60,
0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1299,3,132,
66,0,1298,1295,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,1292,1,0,
0,0,1300,1298,1,0,0,0,1301,179,1,0,0,0,1302,1303,5,60,0,0,1303,1311,3,184,
92,0,1304,1306,5,60,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,
0,0,0,1307,1309,3,132,66,0,1308,1305,1,0,0,0,1308,1309,1,0,0,0,1309,1311,
1,0,0,0,1310,1302,1,0,0,0,1310,1308,1,0,0,0,1311,181,1,0,0,0,1312,1314,3,
192,96,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1317,
3,186,93,0,1316,1318,3,132,66,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,
183,1,0,0,0,1319,1321,3,192,96,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,
1322,1,0,0,0,1322,1324,3,188,94,0,1323,1325,3,132,66,0,1324,1323,1,0,0,0,
1324,1325,1,0,0,0,1325,185,1,0,0,0,1326,1331,3,190,95,0,1327,1328,5,17,0,
0,1328,1330,3,22,11,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,
0,0,1331,1332,1,0,0,0,1332,187,1,0,0,0,1333,1331,1,0,0,0,1334,1339,3,22,
11,0,1335,1336,5,17,0,0,1336,1338,3,22,11,0,1337,1335,1,0,0,0,1338,1341,
1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,189,1,0,0,0,1341,1339,1,
0,0,0,1342,1346,3,22,11,0,1343,1345,3,56,28,0,1344,1343,1,0,0,0,1345,1348,
1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,191,1,0,0,0,1348,1346,1,
0,0,0,1349,1351,5,13,0,0,1350,1352,3,194,97,0,1351,1350,1,0,0,0,1352,1353,
1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,0,0,0,1355,1356,
5,14,0,0,1356,1357,5,17,0,0,1357,193,1,0,0,0,1358,1360,3,128,64,0,1359,1361,
5,74,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,1358,
1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,1370,
1,0,0,0,1366,1364,1,0,0,0,1367,1369,3,120,60,0,1368,1367,1,0,0,0,1369,1372,
1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,1370,
1,0,0,0,1373,1374,3,158,79,0,1374,195,1,0,0,0,1375,1378,3,200,100,0,1376,
1378,3,198,99,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,1378,197,1,0,0,0,1379,
1380,5,13,0,0,1380,1384,3,200,100,0,1381,1383,3,64,32,0,1382,1381,1,0,0,
0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,
0,1386,1384,1,0,0,0,1387,1388,5,14,0,0,1388,199,1,0,0,0,1389,1391,5,5,0,
0,1390,1392,3,56,28,0,1391,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1391,1,0,
0,0,1393,1394,1,0,0,0,1394,201,1,0,0,0,1395,1397,3,204,102,0,1396,1395,1,
0,0,0,1397,1398,1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,203,1,0,
0,0,1400,1402,3,128,64,0,1401,1403,5,74,0,0,1402,1401,1,0,0,0,1402,1403,
1,0,0,0,1403,1405,1,0,0,0,1404,1400,1,0,0,0,1405,1408,1,0,0,0,1406,1404,
1,0,0,0,1406,1407,1,0,0,0,1407,1412,1,0,0,0,1408,1406,1,0,0,0,1409,1411,
3,120,60,0,1410,1409,1,0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,
1,0,0,0,1413,1415,1,0,0,0,1414,1412,1,0,0,0,1415,1420,3,170,85,0,1416,1420,
3,138,69,0,1417,1420,3,206,103,0,1418,1420,3,208,104,0,1419,1406,1,0,0,0,
1419,1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,205,1,0,0,0,1421,
1422,5,61,0,0,1422,1424,3,2,1,0,1423,1425,5,74,0,0,1424,1423,1,0,0,0,1424,
1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,13,0,0,1427,1428,3,202,101,0,
1428,1429,5,14,0,0,1429,207,1,0,0,0,1430,1431,5,61,0,0,1431,1432,5,58,0,
0,1432,1433,3,176,88,0,1433,209,1,0,0,0,1434,1435,5,61,0,0,1435,1437,3,2,
1,0,1436,1434,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,
0,0,1439,1441,1,0,0,0,1440,1438,1,0,0,0,1441,1442,3,202,101,0,1442,211,1,
0,0,0,208,213,217,225,232,240,247,252,256,258,265,278,280,289,292,295,302,
310,317,325,329,332,338,345,351,358,360,372,376,382,389,399,404,408,412,
417,426,432,441,450,454,472,475,483,488,490,494,506,514,520,527,531,539,
544,548,553,555,560,563,571,581,585,591,596,598,606,618,621,624,629,633,
635,645,650,653,659,663,669,675,680,685,689,693,698,703,713,715,721,726,
739,746,751,754,760,765,768,776,779,786,790,798,801,806,810,818,829,837,
841,847,851,855,861,868,874,878,885,888,892,901,907,913,917,925,930,934,
941,944,948,957,963,969,973,980,988,996,1001,1007,1018,1026,1030,1035,1042,
1046,1052,1058,1062,1068,1073,1078,1086,1094,1102,1104,1112,1117,1124,1136,
1140,1153,1157,1163,1167,1171,1177,1186,1191,1198,1203,1215,1220,1227,1239,
1242,1244,1248,1254,1259,1265,1269,1274,1278,1285,1295,1298,1300,1305,1308,
1310,1313,1317,1320,1324,1331,1339,1346,1353,1360,1364,1370,1377,1384,1393,
1398,1402,1406,1412,1419,1424,1438];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class ScalaParser extends antlr4.Parser {

    static grammarFileName = "Scala.g4";
    static literalNames = [ null, "'-'", "'null'", "'.'", "','", "'this'", 
                            "'super'", "'['", "']'", "'=>'", "'('", "')'", 
                            "'forSome'", "'{'", "'}'", "'type'", "'val'", 
                            "'with'", "'#'", "':'", "'_'", "'*'", "'implicit'", 
                            "'if'", "'else'", "'while'", "'try'", "'catch'", 
                            "'finally'", "'do'", "'for'", "'yield'", "'throw'", 
                            "'return'", "'='", "'match'", "'+'", "'~'", 
                            "'!'", "'new'", "'lazy'", "'<-'", "'case'", 
                            "'|'", "'@'", "'>:'", "'<:'", "'<%'", "'var'", 
                            "'override'", "'abstract'", "'final'", "'sealed'", 
                            "'private'", "'protected'", "'import'", "'def'", 
                            "'class'", "'object'", "'trait'", "'extends'", 
                            "'package'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, "Id", "BooleanLiteral", 
                             "CharacterLiteral", "SymbolLiteral", "IntegerLiteral", 
                             "StringLiteral", "FloatingPointLiteral", "Varid", 
                             "BoundVarid", "Paren", "Delim", "Semi", "NL", 
                             "NEWLINE", "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "literal", "qualId", "ids", "stableId", "classQualifier", 
                         "type_", "functionArgTypes", "existentialClause", 
                         "existentialDcl", "infixType", "compoundType", 
                         "annotType", "simpleType", "typeArgs", "types", 
                         "refinement", "refineStat", "typePat", "ascription", 
                         "expr", "expr1", "prefixDef", "postfixExpr", "infixExpr", 
                         "prefixExpr", "simpleExpr", "simpleExpr1", "exprs", 
                         "argumentExprs", "args", "blockExpr", "block", 
                         "blockStat", "resultExpr", "enumerators", "generator", 
                         "caseClauses", "caseClause", "guard_", "pattern", 
                         "pattern1", "pattern2", "pattern3", "simplePattern", 
                         "patterns", "typeParamClause", "funTypeParamClause", 
                         "variantTypeParam", "typeParam", "paramClauses", 
                         "paramClause", "params", "param", "paramType", 
                         "classParamClauses", "classParamClause", "classParams", 
                         "classParam", "bindings", "binding", "modifier", 
                         "localModifier", "accessModifier", "accessQualifier", 
                         "annotation", "constrAnnotation", "templateBody", 
                         "templateStat", "selfType", "import_", "importExpr", 
                         "importSelectors", "importSelector", "dcl", "valDcl", 
                         "varDcl", "funDcl", "funSig", "typeDcl", "patVarDef", 
                         "def_", "patDef", "varDef", "funDef", "typeDef", 
                         "tmplDef", "classDef", "traitDef", "objectDef", 
                         "classTemplateOpt", "traitTemplateOpt", "classTemplate", 
                         "traitTemplate", "classParents", "traitParents", 
                         "constr", "earlyDefs", "earlyDef", "constrExpr", 
                         "constrBlock", "selfInvocation", "topStatSeq", 
                         "topStat", "packaging", "packageObject", "compilationUnit" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ScalaParser.ruleNames;
        this.literalNames = ScalaParser.literalNames;
        this.symbolicNames = ScalaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 3:
    	    		return this.stableId_sempred(localctx, predIndex);
    	case 12:
    	    		return this.simpleType_sempred(localctx, predIndex);
    	case 23:
    	    		return this.infixExpr_sempred(localctx, predIndex);
    	case 26:
    	    		return this.simpleExpr1_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    stableId_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simpleType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 4);
    		case 2:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    infixExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simpleExpr1_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 4);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ScalaParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__0) {
	                this.state = 212;
	                this.match(ScalaParser.T__0);
	            }

	            this.state = 215;
	            this.match(ScalaParser.IntegerLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__0) {
	                this.state = 216;
	                this.match(ScalaParser.T__0);
	            }

	            this.state = 219;
	            this.match(ScalaParser.FloatingPointLiteral);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 220;
	            this.match(ScalaParser.BooleanLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 221;
	            this.match(ScalaParser.CharacterLiteral);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 222;
	            this.match(ScalaParser.StringLiteral);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 223;
	            this.match(ScalaParser.SymbolLiteral);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 224;
	            this.match(ScalaParser.T__1);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualId() {
	    let localctx = new QualIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ScalaParser.RULE_qualId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        this.match(ScalaParser.Id);
	        this.state = 232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__2) {
	            this.state = 228;
	            this.match(ScalaParser.T__2);
	            this.state = 229;
	            this.match(ScalaParser.Id);
	            this.state = 234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ids() {
	    let localctx = new IdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ScalaParser.RULE_ids);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        this.match(ScalaParser.Id);
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 236;
	            this.match(ScalaParser.T__3);
	            this.state = 237;
	            this.match(ScalaParser.Id);
	            this.state = 242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	stableId(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new StableIdContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 6;
	    this.enterRecursionRule(localctx, 6, ScalaParser.RULE_stableId, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 244;
	            this.match(ScalaParser.Id);
	            break;

	        case 2:
	            this.state = 247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.Id) {
	                this.state = 245;
	                this.match(ScalaParser.Id);
	                this.state = 246;
	                this.match(ScalaParser.T__2);
	            }

	            this.state = 256;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.T__4:
	                this.state = 249;
	                this.match(ScalaParser.T__4);
	                break;
	            case ScalaParser.T__5:
	                this.state = 250;
	                this.match(ScalaParser.T__5);
	                this.state = 252;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.T__6) {
	                    this.state = 251;
	                    this.classQualifier();
	                }

	                this.state = 254;
	                this.match(ScalaParser.T__2);
	                this.state = 255;
	                this.match(ScalaParser.Id);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 265;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new StableIdContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_stableId);
	                this.state = 260;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 261;
	                this.match(ScalaParser.T__2);
	                this.state = 262;
	                this.match(ScalaParser.Id); 
	            }
	            this.state = 267;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	classQualifier() {
	    let localctx = new ClassQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ScalaParser.RULE_classQualifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 268;
	        this.match(ScalaParser.T__6);
	        this.state = 269;
	        this.match(ScalaParser.Id);
	        this.state = 270;
	        this.match(ScalaParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ScalaParser.RULE_type_);
	    var _la = 0; // Token type
	    try {
	        this.state = 280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            this.functionArgTypes();
	            this.state = 273;
	            this.match(ScalaParser.T__8);
	            this.state = 274;
	            this.type_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 276;
	            this.infixType();
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__11) {
	                this.state = 277;
	                this.existentialClause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgTypes() {
	    let localctx = new FunctionArgTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ScalaParser.RULE_functionArgTypes);
	    var _la = 0; // Token type
	    try {
	        this.state = 295;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 282;
	            this.infixType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 283;
	            this.match(ScalaParser.T__9);
	            this.state = 292;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__8) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12))) !== 0) || _la===ScalaParser.Id || _la===ScalaParser.NL) {
	                this.state = 284;
	                this.paramType();
	                this.state = 289;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ScalaParser.T__3) {
	                    this.state = 285;
	                    this.match(ScalaParser.T__3);
	                    this.state = 286;
	                    this.paramType();
	                    this.state = 291;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 294;
	            this.match(ScalaParser.T__10);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existentialClause() {
	    let localctx = new ExistentialClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ScalaParser.RULE_existentialClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(ScalaParser.T__11);
	        this.state = 298;
	        this.match(ScalaParser.T__12);
	        this.state = 300; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 299;
	            this.existentialDcl();
	            this.state = 302; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ScalaParser.T__14 || _la===ScalaParser.T__15);
	        this.state = 304;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existentialDcl() {
	    let localctx = new ExistentialDclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ScalaParser.RULE_existentialDcl);
	    try {
	        this.state = 310;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 306;
	            this.match(ScalaParser.T__14);
	            this.state = 307;
	            this.typeDcl();
	            break;
	        case ScalaParser.T__15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 308;
	            this.match(ScalaParser.T__15);
	            this.state = 309;
	            this.valDcl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixType() {
	    let localctx = new InfixTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ScalaParser.RULE_infixType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.compoundType();
	        this.state = 317;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 313;
	                this.match(ScalaParser.Id);
	                this.state = 314;
	                this.compoundType(); 
	            }
	            this.state = 319;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundType() {
	    let localctx = new CompoundTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ScalaParser.RULE_compoundType);
	    var _la = 0; // Token type
	    try {
	        this.state = 332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__4:
	        case ScalaParser.T__5:
	        case ScalaParser.T__9:
	        case ScalaParser.Id:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 320;
	            this.annotType();
	            this.state = 325;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__16) {
	                this.state = 321;
	                this.match(ScalaParser.T__16);
	                this.state = 322;
	                this.annotType();
	                this.state = 327;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 328;
	                this.refinement();

	            }
	            break;
	        case ScalaParser.T__12:
	        case ScalaParser.NL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.refinement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotType() {
	    let localctx = new AnnotTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ScalaParser.RULE_annotType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 334;
	        this.simpleType(0);
	        this.state = 338;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 335;
	                this.annotation(); 
	            }
	            this.state = 340;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	simpleType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimpleTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 24;
	    this.enterRecursionRule(localctx, 24, ScalaParser.RULE_simpleType, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__4:
	        case ScalaParser.T__5:
	        case ScalaParser.Id:
	            this.state = 342;
	            this.stableId(0);
	            this.state = 345;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 343;
	                this.match(ScalaParser.T__2);
	                this.state = 344;
	                this.match(ScalaParser.T__14);

	            }
	            break;
	        case ScalaParser.T__9:
	            this.state = 347;
	            this.match(ScalaParser.T__9);
	            this.state = 348;
	            this.types();
	            this.state = 349;
	            this.match(ScalaParser.T__10);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 360;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 358;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SimpleTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_simpleType);
	                    this.state = 353;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 354;
	                    this.typeArgs();
	                    break;

	                case 2:
	                    localctx = new SimpleTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_simpleType);
	                    this.state = 355;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 356;
	                    this.match(ScalaParser.T__17);
	                    this.state = 357;
	                    this.match(ScalaParser.Id);
	                    break;

	                } 
	            }
	            this.state = 362;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeArgs() {
	    let localctx = new TypeArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ScalaParser.RULE_typeArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 363;
	        this.match(ScalaParser.T__6);
	        this.state = 364;
	        this.types();
	        this.state = 365;
	        this.match(ScalaParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	types() {
	    let localctx = new TypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ScalaParser.RULE_types);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.type_();
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 368;
	            this.match(ScalaParser.T__3);
	            this.state = 369;
	            this.type_();
	            this.state = 374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refinement() {
	    let localctx = new RefinementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ScalaParser.RULE_refinement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 375;
	            this.match(ScalaParser.NL);
	        }

	        this.state = 378;
	        this.match(ScalaParser.T__12);
	        this.state = 380; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 379;
	            this.refineStat();
	            this.state = 382; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ScalaParser.T__14 || _la===ScalaParser.T__15 || _la===ScalaParser.T__47 || _la===ScalaParser.T__55);
	        this.state = 384;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refineStat() {
	    let localctx = new RefineStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ScalaParser.RULE_refineStat);
	    try {
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 386;
	            this.dcl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 387;
	            this.match(ScalaParser.T__14);
	            this.state = 388;
	            this.typeDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePat() {
	    let localctx = new TypePatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ScalaParser.RULE_typePat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ascription() {
	    let localctx = new AscriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ScalaParser.RULE_ascription);
	    try {
	        this.state = 404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 393;
	            this.match(ScalaParser.T__18);
	            this.state = 394;
	            this.infixType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 395;
	            this.match(ScalaParser.T__18);
	            this.state = 397; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 396;
	            		this.annotation();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 399; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,30, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 401;
	            this.match(ScalaParser.T__18);
	            this.state = 402;
	            this.match(ScalaParser.T__19);
	            this.state = 403;
	            this.match(ScalaParser.T__20);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ScalaParser.RULE_expr);
	    var _la = 0; // Token type
	    try {
	        this.state = 417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 412;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.T__9:
	                this.state = 406;
	                this.bindings();
	                break;
	            case ScalaParser.T__21:
	            case ScalaParser.Id:
	                this.state = 408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.T__21) {
	                    this.state = 407;
	                    this.match(ScalaParser.T__21);
	                }

	                this.state = 410;
	                this.match(ScalaParser.Id);
	                break;
	            case ScalaParser.T__19:
	                this.state = 411;
	                this.match(ScalaParser.T__19);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 414;
	            this.match(ScalaParser.T__8);
	            this.state = 415;
	            this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 416;
	            this.expr1();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr1() {
	    let localctx = new Expr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ScalaParser.RULE_expr1);
	    var _la = 0; // Token type
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 419;
	            this.match(ScalaParser.T__22);
	            this.state = 420;
	            this.match(ScalaParser.T__9);
	            this.state = 421;
	            this.expr();
	            this.state = 422;
	            this.match(ScalaParser.T__10);
	            this.state = 426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.NL) {
	                this.state = 423;
	                this.match(ScalaParser.NL);
	                this.state = 428;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 429;
	            this.expr();
	            this.state = 432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            if(la_===1) {
	                this.state = 430;
	                this.match(ScalaParser.T__23);
	                this.state = 431;
	                this.expr();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 434;
	            this.match(ScalaParser.T__24);
	            this.state = 435;
	            this.match(ScalaParser.T__9);
	            this.state = 436;
	            this.expr();
	            this.state = 437;
	            this.match(ScalaParser.T__10);
	            this.state = 441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.NL) {
	                this.state = 438;
	                this.match(ScalaParser.NL);
	                this.state = 443;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 444;
	            this.expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 446;
	            this.match(ScalaParser.T__25);
	            this.state = 447;
	            this.expr();
	            this.state = 450;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 448;
	                this.match(ScalaParser.T__26);
	                this.state = 449;
	                this.expr();

	            }
	            this.state = 454;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 452;
	                this.match(ScalaParser.T__27);
	                this.state = 453;
	                this.expr();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 456;
	            this.match(ScalaParser.T__28);
	            this.state = 457;
	            this.expr();
	            this.state = 458;
	            this.match(ScalaParser.T__24);
	            this.state = 459;
	            this.match(ScalaParser.T__9);
	            this.state = 460;
	            this.expr();
	            this.state = 461;
	            this.match(ScalaParser.T__10);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 463;
	            this.match(ScalaParser.T__29);
	            this.state = 472;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.T__9:
	                this.state = 464;
	                this.match(ScalaParser.T__9);
	                this.state = 465;
	                this.enumerators();
	                this.state = 466;
	                this.match(ScalaParser.T__10);
	                break;
	            case ScalaParser.T__12:
	                this.state = 468;
	                this.match(ScalaParser.T__12);
	                this.state = 469;
	                this.enumerators();
	                this.state = 470;
	                this.match(ScalaParser.T__13);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 475;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__30) {
	                this.state = 474;
	                this.match(ScalaParser.T__30);
	            }

	            this.state = 477;
	            this.expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 479;
	            this.match(ScalaParser.T__31);
	            this.state = 480;
	            this.expr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 481;
	            this.match(ScalaParser.T__32);
	            this.state = 483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 482;
	                this.expr();

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 494;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            if(la_===1) {
	                this.state = 490;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 485;
	                    this.simpleExpr();
	                    break;

	                case 2:
	                    this.state = 486;
	                    this.simpleExpr1(0);
	                    this.state = 488;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ScalaParser.T__19) {
	                        this.state = 487;
	                        this.match(ScalaParser.T__19);
	                    }

	                    break;

	                }
	                this.state = 492;
	                this.match(ScalaParser.T__2);

	            }
	            this.state = 496;
	            this.match(ScalaParser.Id);
	            this.state = 497;
	            this.match(ScalaParser.T__33);
	            this.state = 498;
	            this.expr();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 499;
	            this.simpleExpr1(0);
	            this.state = 500;
	            this.argumentExprs();
	            this.state = 501;
	            this.match(ScalaParser.T__33);
	            this.state = 502;
	            this.expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 504;
	            this.postfixExpr();
	            this.state = 506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__18) {
	                this.state = 505;
	                this.ascription();
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 508;
	            this.postfixExpr();
	            this.state = 509;
	            this.match(ScalaParser.T__34);
	            this.state = 510;
	            this.match(ScalaParser.T__12);
	            this.state = 511;
	            this.caseClauses();
	            this.state = 512;
	            this.match(ScalaParser.T__13);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixDef() {
	    let localctx = new PrefixDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ScalaParser.RULE_prefixDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        _la = this._input.LA(1);
	        if(!(_la===ScalaParser.T__0 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ScalaParser.T__35 - 36)) | (1 << (ScalaParser.T__36 - 36)) | (1 << (ScalaParser.T__37 - 36)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpr() {
	    let localctx = new PostfixExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ScalaParser.RULE_postfixExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this.infixExpr(0);
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 519;
	            this.match(ScalaParser.Id);

	        }
	        this.state = 527;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 522;
	                this.prefixDef();
	                this.state = 523;
	                this.simpleExpr1(0); 
	            }
	            this.state = 529;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 530;
	            this.match(ScalaParser.NL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	infixExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new InfixExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 46;
	    this.enterRecursionRule(localctx, 46, ScalaParser.RULE_infixExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this.prefixExpr();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 544;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new InfixExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_infixExpr);
	                this.state = 536;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 537;
	                this.match(ScalaParser.Id);
	                this.state = 539;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 538;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 541;
	                this.infixExpr(2); 
	            }
	            this.state = 546;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	prefixExpr() {
	    let localctx = new PrefixExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ScalaParser.RULE_prefixExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 547;
	            this.prefixDef();

	        }
	        this.state = 555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 550;
	            this.simpleExpr();
	            break;

	        case 2:
	            this.state = 551;
	            this.simpleExpr1(0);
	            this.state = 553;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	            if(la_===1) {
	                this.state = 552;
	                this.match(ScalaParser.T__19);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleExpr() {
	    let localctx = new SimpleExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ScalaParser.RULE_simpleExpr);
	    try {
	        this.state = 563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__38:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 557;
	            this.match(ScalaParser.T__38);
	            this.state = 560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 558;
	                this.classTemplate();
	                break;

	            case 2:
	                this.state = 559;
	                this.templateBody();
	                break;

	            }
	            break;
	        case ScalaParser.T__12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 562;
	            this.blockExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	simpleExpr1(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimpleExpr1Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 52;
	    this.enterRecursionRule(localctx, 52, ScalaParser.RULE_simpleExpr1, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 566;
	            this.literal();
	            break;

	        case 2:
	            this.state = 567;
	            this.stableId(0);
	            break;

	        case 3:
	            this.state = 568;
	            this.match(ScalaParser.T__19);
	            break;

	        case 4:
	            this.state = 569;
	            this.match(ScalaParser.T__9);
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ScalaParser.T__31 - 32)) | (1 << (ScalaParser.T__32 - 32)) | (1 << (ScalaParser.T__35 - 32)) | (1 << (ScalaParser.T__36 - 32)) | (1 << (ScalaParser.T__37 - 32)) | (1 << (ScalaParser.T__38 - 32)) | (1 << (ScalaParser.Id - 32)) | (1 << (ScalaParser.BooleanLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) !== 0)) {
	                this.state = 570;
	                this.exprs();
	            }

	            this.state = 573;
	            this.match(ScalaParser.T__10);
	            break;

	        case 5:
	            this.state = 574;
	            this.simpleExpr();
	            this.state = 575;
	            this.match(ScalaParser.T__2);
	            this.state = 576;
	            this.match(ScalaParser.Id);
	            break;

	        case 6:
	            this.state = 578;
	            this.simpleExpr();
	            this.state = 579;
	            this.typeArgs();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 598;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 596;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SimpleExpr1Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_simpleExpr1);
	                    this.state = 583;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 585;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ScalaParser.T__19) {
	                        this.state = 584;
	                        this.match(ScalaParser.T__19);
	                    }

	                    this.state = 587;
	                    this.match(ScalaParser.T__2);
	                    this.state = 588;
	                    this.match(ScalaParser.Id);
	                    break;

	                case 2:
	                    localctx = new SimpleExpr1Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_simpleExpr1);
	                    this.state = 589;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 591;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ScalaParser.T__19) {
	                        this.state = 590;
	                        this.match(ScalaParser.T__19);
	                    }

	                    this.state = 593;
	                    this.typeArgs();
	                    break;

	                case 3:
	                    localctx = new SimpleExpr1Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, ScalaParser.RULE_simpleExpr1);
	                    this.state = 594;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 595;
	                    this.argumentExprs();
	                    break;

	                } 
	            }
	            this.state = 600;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	exprs() {
	    let localctx = new ExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ScalaParser.RULE_exprs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.expr();
	        this.state = 606;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 602;
	                this.match(ScalaParser.T__3);
	                this.state = 603;
	                this.expr(); 
	            }
	            this.state = 608;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentExprs() {
	    let localctx = new ArgumentExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ScalaParser.RULE_argumentExprs);
	    var _la = 0; // Token type
	    try {
	        this.state = 621;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 609;
	            this.match(ScalaParser.T__9);
	            this.state = 610;
	            this.args();
	            this.state = 611;
	            this.match(ScalaParser.T__10);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 613;
	            this.match(ScalaParser.T__12);
	            this.state = 614;
	            this.args();
	            this.state = 615;
	            this.match(ScalaParser.T__13);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.NL) {
	                this.state = 617;
	                this.match(ScalaParser.NL);
	            }

	            this.state = 620;
	            this.blockExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	args() {
	    let localctx = new ArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ScalaParser.RULE_args);
	    var _la = 0; // Token type
	    try {
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ScalaParser.T__31 - 32)) | (1 << (ScalaParser.T__32 - 32)) | (1 << (ScalaParser.T__35 - 32)) | (1 << (ScalaParser.T__36 - 32)) | (1 << (ScalaParser.T__37 - 32)) | (1 << (ScalaParser.T__38 - 32)) | (1 << (ScalaParser.Id - 32)) | (1 << (ScalaParser.BooleanLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) !== 0)) {
	                this.state = 623;
	                this.exprs();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 629;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 626;
	                this.exprs();
	                this.state = 627;
	                this.match(ScalaParser.T__3);

	            }
	            this.state = 631;
	            this.postfixExpr();
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__18) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__20))) !== 0)) {
	                this.state = 632;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__18) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__20))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockExpr() {
	    let localctx = new BlockExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ScalaParser.RULE_blockExpr);
	    try {
	        this.state = 645;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 637;
	            this.match(ScalaParser.T__12);
	            this.state = 638;
	            this.caseClauses();
	            this.state = 639;
	            this.match(ScalaParser.T__13);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 641;
	            this.match(ScalaParser.T__12);
	            this.state = 642;
	            this.block();
	            this.state = 643;
	            this.match(ScalaParser.T__13);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ScalaParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 647;
	        		this.blockStat();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 650; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,72, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ScalaParser.T__31 - 32)) | (1 << (ScalaParser.T__32 - 32)) | (1 << (ScalaParser.T__35 - 32)) | (1 << (ScalaParser.T__36 - 32)) | (1 << (ScalaParser.T__37 - 32)) | (1 << (ScalaParser.T__38 - 32)) | (1 << (ScalaParser.Id - 32)) | (1 << (ScalaParser.BooleanLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) !== 0)) {
	            this.state = 652;
	            this.resultExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStat() {
	    let localctx = new BlockStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ScalaParser.RULE_blockStat);
	    var _la = 0; // Token type
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 655;
	            this.import_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__43) {
	                this.state = 656;
	                this.annotation();
	                this.state = 661;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__21 || _la===ScalaParser.T__39) {
	                this.state = 662;
	                _la = this._input.LA(1);
	                if(!(_la===ScalaParser.T__21 || _la===ScalaParser.T__39)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 665;
	            this.def_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__43) {
	                this.state = 666;
	                this.annotation();
	                this.state = 671;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (ScalaParser.T__21 - 22)) | (1 << (ScalaParser.T__39 - 22)) | (1 << (ScalaParser.T__49 - 22)) | (1 << (ScalaParser.T__50 - 22)) | (1 << (ScalaParser.T__51 - 22)))) !== 0)) {
	                this.state = 672;
	                this.localModifier();
	                this.state = 677;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 678;
	            this.tmplDef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 679;
	            this.expr1();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultExpr() {
	    let localctx = new ResultExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ScalaParser.RULE_resultExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 682;
	            this.expr1();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 693;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.T__9:
	                this.state = 683;
	                this.bindings();
	                break;
	            case ScalaParser.T__19:
	            case ScalaParser.T__21:
	            case ScalaParser.Id:
	                this.state = 689;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case ScalaParser.T__21:
	                case ScalaParser.Id:
	                    this.state = 685;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ScalaParser.T__21) {
	                        this.state = 684;
	                        this.match(ScalaParser.T__21);
	                    }

	                    this.state = 687;
	                    this.match(ScalaParser.Id);
	                    break;
	                case ScalaParser.T__19:
	                    this.state = 688;
	                    this.match(ScalaParser.T__19);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 691;
	                this.match(ScalaParser.T__18);
	                this.state = 692;
	                this.compoundType();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 695;
	            this.match(ScalaParser.T__8);
	            this.state = 696;
	            this.block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerators() {
	    let localctx = new EnumeratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ScalaParser.RULE_enumerators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 700;
	            this.generator();
	            this.state = 703; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ScalaParser.Id - 62)) | (1 << (ScalaParser.BooleanLiteral - 62)) | (1 << (ScalaParser.CharacterLiteral - 62)) | (1 << (ScalaParser.SymbolLiteral - 62)) | (1 << (ScalaParser.IntegerLiteral - 62)) | (1 << (ScalaParser.StringLiteral - 62)) | (1 << (ScalaParser.FloatingPointLiteral - 62)) | (1 << (ScalaParser.Varid - 62)) | (1 << (ScalaParser.BoundVarid - 62)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generator() {
	    let localctx = new GeneratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ScalaParser.RULE_generator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.pattern1();
	        this.state = 706;
	        this.match(ScalaParser.T__40);
	        this.state = 707;
	        this.expr();
	        this.state = 715;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 713;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case ScalaParser.T__22:
	                    this.state = 708;
	                    this.guard_();
	                    break;
	                case ScalaParser.T__0:
	                case ScalaParser.T__1:
	                case ScalaParser.T__4:
	                case ScalaParser.T__5:
	                case ScalaParser.T__9:
	                case ScalaParser.T__19:
	                case ScalaParser.Id:
	                case ScalaParser.BooleanLiteral:
	                case ScalaParser.CharacterLiteral:
	                case ScalaParser.SymbolLiteral:
	                case ScalaParser.IntegerLiteral:
	                case ScalaParser.StringLiteral:
	                case ScalaParser.FloatingPointLiteral:
	                case ScalaParser.Varid:
	                case ScalaParser.BoundVarid:
	                    this.state = 709;
	                    this.pattern1();
	                    this.state = 710;
	                    this.match(ScalaParser.T__33);
	                    this.state = 711;
	                    this.expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 717;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ScalaParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 718;
	            this.caseClause();
	            this.state = 721; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ScalaParser.T__41);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ScalaParser.RULE_caseClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this.match(ScalaParser.T__41);
	        this.state = 724;
	        this.pattern();
	        this.state = 726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__22) {
	            this.state = 725;
	            this.guard_();
	        }

	        this.state = 728;
	        this.match(ScalaParser.T__8);
	        this.state = 729;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard_() {
	    let localctx = new Guard_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ScalaParser.RULE_guard_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.match(ScalaParser.T__22);
	        this.state = 732;
	        this.postfixExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ScalaParser.RULE_pattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.pattern1();
	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__42) {
	            this.state = 735;
	            this.match(ScalaParser.T__42);
	            this.state = 736;
	            this.pattern1();
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern1() {
	    let localctx = new Pattern1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ScalaParser.RULE_pattern1);
	    var _la = 0; // Token type
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            _la = this._input.LA(1);
	            if(!(_la===ScalaParser.T__19 || _la===ScalaParser.Id || _la===ScalaParser.BoundVarid)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 743;
	            this.match(ScalaParser.T__18);
	            this.state = 744;
	            this.typePat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.pattern2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern2() {
	    let localctx = new Pattern2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ScalaParser.RULE_pattern2);
	    var _la = 0; // Token type
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.match(ScalaParser.Id);
	            this.state = 751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__43) {
	                this.state = 749;
	                this.match(ScalaParser.T__43);
	                this.state = 750;
	                this.pattern3();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 753;
	            this.pattern3();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern3() {
	    let localctx = new Pattern3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ScalaParser.RULE_pattern3);
	    var _la = 0; // Token type
	    try {
	        this.state = 768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.simplePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.simplePattern();
	            this.state = 765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.Id) {
	                this.state = 758;
	                this.match(ScalaParser.Id);
	                this.state = 760;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 759;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 762;
	                this.simplePattern();
	                this.state = 767;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePattern() {
	    let localctx = new SimplePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ScalaParser.RULE_simplePattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.match(ScalaParser.T__19);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 771;
	            this.match(ScalaParser.Varid);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 772;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 773;
	            this.stableId(0);
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__9) {
	                this.state = 774;
	                this.match(ScalaParser.T__9);
	                this.state = 776;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ScalaParser.Id - 62)) | (1 << (ScalaParser.BooleanLiteral - 62)) | (1 << (ScalaParser.CharacterLiteral - 62)) | (1 << (ScalaParser.SymbolLiteral - 62)) | (1 << (ScalaParser.IntegerLiteral - 62)) | (1 << (ScalaParser.StringLiteral - 62)) | (1 << (ScalaParser.FloatingPointLiteral - 62)) | (1 << (ScalaParser.Varid - 62)) | (1 << (ScalaParser.BoundVarid - 62)))) !== 0)) {
	                    this.state = 775;
	                    this.patterns();
	                }

	                this.state = 778;
	                this.match(ScalaParser.T__10);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 781;
	            this.stableId(0);
	            this.state = 782;
	            this.match(ScalaParser.T__9);
	            this.state = 786;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	            if(la_===1) {
	                this.state = 783;
	                this.patterns();
	                this.state = 784;
	                this.match(ScalaParser.T__3);

	            }
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.Id) {
	                this.state = 788;
	                this.match(ScalaParser.Id);
	                this.state = 789;
	                this.match(ScalaParser.T__43);
	            }

	            this.state = 792;
	            this.match(ScalaParser.T__19);
	            this.state = 793;
	            this.match(ScalaParser.T__20);
	            this.state = 794;
	            this.match(ScalaParser.T__10);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 796;
	            this.match(ScalaParser.T__9);
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ScalaParser.Id - 62)) | (1 << (ScalaParser.BooleanLiteral - 62)) | (1 << (ScalaParser.CharacterLiteral - 62)) | (1 << (ScalaParser.SymbolLiteral - 62)) | (1 << (ScalaParser.IntegerLiteral - 62)) | (1 << (ScalaParser.StringLiteral - 62)) | (1 << (ScalaParser.FloatingPointLiteral - 62)) | (1 << (ScalaParser.Varid - 62)) | (1 << (ScalaParser.BoundVarid - 62)))) !== 0)) {
	                this.state = 797;
	                this.patterns();
	            }

	            this.state = 800;
	            this.match(ScalaParser.T__10);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patterns() {
	    let localctx = new PatternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ScalaParser.RULE_patterns);
	    try {
	        this.state = 810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 803;
	            this.pattern();
	            this.state = 806;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	            if(la_===1) {
	                this.state = 804;
	                this.match(ScalaParser.T__3);
	                this.state = 805;
	                this.patterns();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 808;
	            this.match(ScalaParser.T__19);
	            this.state = 809;
	            this.match(ScalaParser.T__20);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParamClause() {
	    let localctx = new TypeParamClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ScalaParser.RULE_typeParamClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 812;
	        this.match(ScalaParser.T__6);
	        this.state = 813;
	        this.variantTypeParam();
	        this.state = 818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 814;
	            this.match(ScalaParser.T__3);
	            this.state = 815;
	            this.variantTypeParam();
	            this.state = 820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 821;
	        this.match(ScalaParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funTypeParamClause() {
	    let localctx = new FunTypeParamClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ScalaParser.RULE_funTypeParamClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.match(ScalaParser.T__6);
	        this.state = 824;
	        this.typeParam();
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 825;
	            this.match(ScalaParser.T__3);
	            this.state = 826;
	            this.typeParam();
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 832;
	        this.match(ScalaParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variantTypeParam() {
	    let localctx = new VariantTypeParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ScalaParser.RULE_variantTypeParam);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__43) {
	            this.state = 834;
	            this.annotation();
	            this.state = 839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__0 || _la===ScalaParser.T__35) {
	            this.state = 840;
	            _la = this._input.LA(1);
	            if(!(_la===ScalaParser.T__0 || _la===ScalaParser.T__35)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 843;
	        this.typeParam();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParam() {
	    let localctx = new TypeParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ScalaParser.RULE_typeParam);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        _la = this._input.LA(1);
	        if(!(_la===ScalaParser.T__19 || _la===ScalaParser.Id)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 846;
	            this.typeParamClause();
	        }

	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__44) {
	            this.state = 849;
	            this.match(ScalaParser.T__44);
	            this.state = 850;
	            this.type_();
	        }

	        this.state = 855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__45) {
	            this.state = 853;
	            this.match(ScalaParser.T__45);
	            this.state = 854;
	            this.type_();
	        }

	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__46) {
	            this.state = 857;
	            this.match(ScalaParser.T__46);
	            this.state = 858;
	            this.type_();
	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__18) {
	            this.state = 864;
	            this.match(ScalaParser.T__18);
	            this.state = 865;
	            this.type_();
	            this.state = 870;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramClauses() {
	    let localctx = new ParamClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ScalaParser.RULE_paramClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 871;
	                this.paramClause(); 
	            }
	            this.state = 876;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	        }

	        this.state = 885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.NL) {
	                this.state = 877;
	                this.match(ScalaParser.NL);
	            }

	            this.state = 880;
	            this.match(ScalaParser.T__9);
	            this.state = 881;
	            this.match(ScalaParser.T__21);
	            this.state = 882;
	            this.params();
	            this.state = 883;
	            this.match(ScalaParser.T__10);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramClause() {
	    let localctx = new ParamClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ScalaParser.RULE_paramClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 887;
	            this.match(ScalaParser.NL);
	        }

	        this.state = 890;
	        this.match(ScalaParser.T__9);
	        this.state = 892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__43 || _la===ScalaParser.Id) {
	            this.state = 891;
	            this.params();
	        }

	        this.state = 894;
	        this.match(ScalaParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	params() {
	    let localctx = new ParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ScalaParser.RULE_params);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 896;
	        this.param();
	        this.state = 901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 897;
	            this.match(ScalaParser.T__3);
	            this.state = 898;
	            this.param();
	            this.state = 903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param() {
	    let localctx = new ParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ScalaParser.RULE_param);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__43) {
	            this.state = 904;
	            this.annotation();
	            this.state = 909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 910;
	        this.match(ScalaParser.Id);
	        this.state = 913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__18) {
	            this.state = 911;
	            this.match(ScalaParser.T__18);
	            this.state = 912;
	            this.paramType();
	        }

	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__33) {
	            this.state = 915;
	            this.match(ScalaParser.T__33);
	            this.state = 916;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramType() {
	    let localctx = new ParamTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ScalaParser.RULE_paramType);
	    try {
	        this.state = 925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            this.type_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 920;
	            this.match(ScalaParser.T__8);
	            this.state = 921;
	            this.type_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 922;
	            this.type_();
	            this.state = 923;
	            this.match(ScalaParser.T__20);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classParamClauses() {
	    let localctx = new ClassParamClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ScalaParser.RULE_classParamClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 927;
	                this.classParamClause(); 
	            }
	            this.state = 932;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	        }

	        this.state = 941;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.NL) {
	                this.state = 933;
	                this.match(ScalaParser.NL);
	            }

	            this.state = 936;
	            this.match(ScalaParser.T__9);
	            this.state = 937;
	            this.match(ScalaParser.T__21);
	            this.state = 938;
	            this.classParams();
	            this.state = 939;
	            this.match(ScalaParser.T__10);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classParamClause() {
	    let localctx = new ClassParamClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ScalaParser.RULE_classParamClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 943;
	            this.match(ScalaParser.NL);
	        }

	        this.state = 946;
	        this.match(ScalaParser.T__9);
	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__15 || _la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__43 - 40)) | (1 << (ScalaParser.T__47 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)) | (1 << (ScalaParser.Id - 40)))) !== 0)) {
	            this.state = 947;
	            this.classParams();
	        }

	        this.state = 950;
	        this.match(ScalaParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classParams() {
	    let localctx = new ClassParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ScalaParser.RULE_classParams);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.classParam();
	        this.state = 957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 953;
	            this.match(ScalaParser.T__3);
	            this.state = 954;
	            this.classParam();
	            this.state = 959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classParam() {
	    let localctx = new ClassParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ScalaParser.RULE_classParam);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__43) {
	            this.state = 960;
	            this.annotation();
	            this.state = 965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0)) {
	            this.state = 966;
	            this.modifier();
	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__15 || _la===ScalaParser.T__47) {
	            this.state = 972;
	            _la = this._input.LA(1);
	            if(!(_la===ScalaParser.T__15 || _la===ScalaParser.T__47)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 975;
	        this.match(ScalaParser.Id);
	        this.state = 976;
	        this.match(ScalaParser.T__18);
	        this.state = 977;
	        this.paramType();
	        this.state = 980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__33) {
	            this.state = 978;
	            this.match(ScalaParser.T__33);
	            this.state = 979;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindings() {
	    let localctx = new BindingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ScalaParser.RULE_bindings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.match(ScalaParser.T__9);
	        this.state = 983;
	        this.binding();
	        this.state = 988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 984;
	            this.match(ScalaParser.T__3);
	            this.state = 985;
	            this.binding();
	            this.state = 990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 991;
	        this.match(ScalaParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binding() {
	    let localctx = new BindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ScalaParser.RULE_binding);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        _la = this._input.LA(1);
	        if(!(_la===ScalaParser.T__19 || _la===ScalaParser.Id)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__18) {
	            this.state = 994;
	            this.match(ScalaParser.T__18);
	            this.state = 995;
	            this.type_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ScalaParser.RULE_modifier);
	    try {
	        this.state = 1001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__21:
	        case ScalaParser.T__39:
	        case ScalaParser.T__49:
	        case ScalaParser.T__50:
	        case ScalaParser.T__51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 998;
	            this.localModifier();
	            break;
	        case ScalaParser.T__52:
	        case ScalaParser.T__53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 999;
	            this.accessModifier();
	            break;
	        case ScalaParser.T__48:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1000;
	            this.match(ScalaParser.T__48);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localModifier() {
	    let localctx = new LocalModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ScalaParser.RULE_localModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        _la = this._input.LA(1);
	        if(!(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (ScalaParser.T__21 - 22)) | (1 << (ScalaParser.T__39 - 22)) | (1 << (ScalaParser.T__49 - 22)) | (1 << (ScalaParser.T__50 - 22)) | (1 << (ScalaParser.T__51 - 22)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessModifier() {
	    let localctx = new AccessModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ScalaParser.RULE_accessModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005;
	        _la = this._input.LA(1);
	        if(!(_la===ScalaParser.T__52 || _la===ScalaParser.T__53)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1006;
	            this.accessQualifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessQualifier() {
	    let localctx = new AccessQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ScalaParser.RULE_accessQualifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this.match(ScalaParser.T__6);
	        this.state = 1010;
	        _la = this._input.LA(1);
	        if(!(_la===ScalaParser.T__4 || _la===ScalaParser.Id)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1011;
	        this.match(ScalaParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ScalaParser.RULE_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1013;
	        this.match(ScalaParser.T__43);
	        this.state = 1014;
	        this.simpleType(0);
	        this.state = 1018;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1015;
	                this.argumentExprs(); 
	            }
	            this.state = 1020;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constrAnnotation() {
	    let localctx = new ConstrAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ScalaParser.RULE_constrAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.match(ScalaParser.T__43);
	        this.state = 1022;
	        this.simpleType(0);
	        this.state = 1023;
	        this.argumentExprs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateBody() {
	    let localctx = new TemplateBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ScalaParser.RULE_templateBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 1025;
	            this.match(ScalaParser.NL);
	        }

	        this.state = 1028;
	        this.match(ScalaParser.T__12);
	        this.state = 1030;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 1029;
	            this.selfType();

	        }
	        this.state = 1033; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1032;
	            this.templateStat();
	            this.state = 1035; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__14) | (1 << ScalaParser.T__15) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ScalaParser.T__31 - 32)) | (1 << (ScalaParser.T__32 - 32)) | (1 << (ScalaParser.T__35 - 32)) | (1 << (ScalaParser.T__36 - 32)) | (1 << (ScalaParser.T__37 - 32)) | (1 << (ScalaParser.T__38 - 32)) | (1 << (ScalaParser.T__39 - 32)) | (1 << (ScalaParser.T__41 - 32)) | (1 << (ScalaParser.T__43 - 32)) | (1 << (ScalaParser.T__47 - 32)) | (1 << (ScalaParser.T__48 - 32)) | (1 << (ScalaParser.T__49 - 32)) | (1 << (ScalaParser.T__50 - 32)) | (1 << (ScalaParser.T__51 - 32)) | (1 << (ScalaParser.T__52 - 32)) | (1 << (ScalaParser.T__53 - 32)) | (1 << (ScalaParser.T__54 - 32)) | (1 << (ScalaParser.T__55 - 32)) | (1 << (ScalaParser.T__56 - 32)) | (1 << (ScalaParser.T__57 - 32)) | (1 << (ScalaParser.T__58 - 32)) | (1 << (ScalaParser.Id - 32)) | (1 << (ScalaParser.BooleanLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) !== 0));
	        this.state = 1037;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStat() {
	    let localctx = new TemplateStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ScalaParser.RULE_templateStat);
	    var _la = 0; // Token type
	    try {
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1039;
	            this.import_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__43) {
	                this.state = 1040;
	                this.annotation();
	                this.state = 1042;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 1041;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 1048;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1052;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0)) {
	                this.state = 1049;
	                this.modifier();
	                this.state = 1054;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1055;
	            this.def_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1062;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__43) {
	                this.state = 1056;
	                this.annotation();
	                this.state = 1058;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 1057;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 1064;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0)) {
	                this.state = 1065;
	                this.modifier();
	                this.state = 1070;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1071;
	            this.dcl();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1072;
	            this.expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selfType() {
	    let localctx = new SelfTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ScalaParser.RULE_selfType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1086;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.Id:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1075;
	            this.match(ScalaParser.Id);
	            this.state = 1078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__18) {
	                this.state = 1076;
	                this.match(ScalaParser.T__18);
	                this.state = 1077;
	                this.type_();
	            }

	            this.state = 1080;
	            this.match(ScalaParser.T__8);
	            break;
	        case ScalaParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1081;
	            this.match(ScalaParser.T__4);
	            this.state = 1082;
	            this.match(ScalaParser.T__18);
	            this.state = 1083;
	            this.type_();
	            this.state = 1084;
	            this.match(ScalaParser.T__8);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_() {
	    let localctx = new Import_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ScalaParser.RULE_import_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(ScalaParser.T__54);
	        this.state = 1089;
	        this.importExpr();
	        this.state = 1094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 1090;
	            this.match(ScalaParser.T__3);
	            this.state = 1091;
	            this.importExpr();
	            this.state = 1096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importExpr() {
	    let localctx = new ImportExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ScalaParser.RULE_importExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.stableId(0);
	        this.state = 1104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__2) {
	            this.state = 1098;
	            this.match(ScalaParser.T__2);
	            this.state = 1102;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.Id:
	                this.state = 1099;
	                this.match(ScalaParser.Id);
	                break;
	            case ScalaParser.T__19:
	                this.state = 1100;
	                this.match(ScalaParser.T__19);
	                break;
	            case ScalaParser.T__12:
	                this.state = 1101;
	                this.importSelectors();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importSelectors() {
	    let localctx = new ImportSelectorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ScalaParser.RULE_importSelectors);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        this.match(ScalaParser.T__12);
	        this.state = 1112;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1107;
	                this.importSelector();
	                this.state = 1108;
	                this.match(ScalaParser.T__3); 
	            }
	            this.state = 1114;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	        }

	        this.state = 1117;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.Id:
	            this.state = 1115;
	            this.importSelector();
	            break;
	        case ScalaParser.T__19:
	            this.state = 1116;
	            this.match(ScalaParser.T__19);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1119;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importSelector() {
	    let localctx = new ImportSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ScalaParser.RULE_importSelector);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this.match(ScalaParser.Id);
	        this.state = 1124;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__8) {
	            this.state = 1122;
	            this.match(ScalaParser.T__8);
	            this.state = 1123;
	            _la = this._input.LA(1);
	            if(!(_la===ScalaParser.T__19 || _la===ScalaParser.Id)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dcl() {
	    let localctx = new DclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ScalaParser.RULE_dcl);
	    var _la = 0; // Token type
	    try {
	        this.state = 1140;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1126;
	            this.match(ScalaParser.T__15);
	            this.state = 1127;
	            this.valDcl();
	            break;
	        case ScalaParser.T__47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1128;
	            this.match(ScalaParser.T__47);
	            this.state = 1129;
	            this.varDcl();
	            break;
	        case ScalaParser.T__55:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1130;
	            this.match(ScalaParser.T__55);
	            this.state = 1131;
	            this.funDcl();
	            break;
	        case ScalaParser.T__14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1132;
	            this.match(ScalaParser.T__14);
	            this.state = 1136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.NL) {
	                this.state = 1133;
	                this.match(ScalaParser.NL);
	                this.state = 1138;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1139;
	            this.typeDcl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valDcl() {
	    let localctx = new ValDclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ScalaParser.RULE_valDcl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.ids();
	        this.state = 1143;
	        this.match(ScalaParser.T__18);
	        this.state = 1144;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDcl() {
	    let localctx = new VarDclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ScalaParser.RULE_varDcl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1146;
	        this.ids();
	        this.state = 1147;
	        this.match(ScalaParser.T__18);
	        this.state = 1148;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funDcl() {
	    let localctx = new FunDclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ScalaParser.RULE_funDcl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1150;
	        this.funSig();
	        this.state = 1153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__18) {
	            this.state = 1151;
	            this.match(ScalaParser.T__18);
	            this.state = 1152;
	            this.type_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funSig() {
	    let localctx = new FunSigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ScalaParser.RULE_funSig);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1155;
	        this.match(ScalaParser.Id);
	        this.state = 1157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1156;
	            this.funTypeParamClause();
	        }

	        this.state = 1159;
	        this.paramClauses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDcl() {
	    let localctx = new TypeDclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ScalaParser.RULE_typeDcl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this.match(ScalaParser.Id);
	        this.state = 1163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1162;
	            this.typeParamClause();
	        }

	        this.state = 1167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__44) {
	            this.state = 1165;
	            this.match(ScalaParser.T__44);
	            this.state = 1166;
	            this.type_();
	        }

	        this.state = 1171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__45) {
	            this.state = 1169;
	            this.match(ScalaParser.T__45);
	            this.state = 1170;
	            this.type_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patVarDef() {
	    let localctx = new PatVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, ScalaParser.RULE_patVarDef);
	    try {
	        this.state = 1177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1173;
	            this.match(ScalaParser.T__15);
	            this.state = 1174;
	            this.patDef();
	            break;
	        case ScalaParser.T__47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1175;
	            this.match(ScalaParser.T__47);
	            this.state = 1176;
	            this.varDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_() {
	    let localctx = new Def_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, ScalaParser.RULE_def_);
	    var _la = 0; // Token type
	    try {
	        this.state = 1191;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__15:
	        case ScalaParser.T__47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1179;
	            this.patVarDef();
	            break;
	        case ScalaParser.T__55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1180;
	            this.match(ScalaParser.T__55);
	            this.state = 1181;
	            this.funDef();
	            break;
	        case ScalaParser.T__14:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1182;
	            this.match(ScalaParser.T__14);
	            this.state = 1186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.NL) {
	                this.state = 1183;
	                this.match(ScalaParser.NL);
	                this.state = 1188;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1189;
	            this.typeDef();
	            break;
	        case ScalaParser.T__41:
	        case ScalaParser.T__56:
	        case ScalaParser.T__57:
	        case ScalaParser.T__58:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1190;
	            this.tmplDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patDef() {
	    let localctx = new PatDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, ScalaParser.RULE_patDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.pattern2();
	        this.state = 1198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__3) {
	            this.state = 1194;
	            this.match(ScalaParser.T__3);
	            this.state = 1195;
	            this.pattern2();
	            this.state = 1200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__18) {
	            this.state = 1201;
	            this.match(ScalaParser.T__18);
	            this.state = 1202;
	            this.type_();
	        }

	        this.state = 1205;
	        this.match(ScalaParser.T__33);
	        this.state = 1206;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDef() {
	    let localctx = new VarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, ScalaParser.RULE_varDef);
	    try {
	        this.state = 1215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1208;
	            this.patDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1209;
	            this.ids();
	            this.state = 1210;
	            this.match(ScalaParser.T__18);
	            this.state = 1211;
	            this.type_();
	            this.state = 1212;
	            this.match(ScalaParser.T__33);
	            this.state = 1213;
	            this.match(ScalaParser.T__19);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funDef() {
	    let localctx = new FunDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, ScalaParser.RULE_funDef);
	    var _la = 0; // Token type
	    try {
	        this.state = 1244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1217;
	            this.funSig();
	            this.state = 1220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__18) {
	                this.state = 1218;
	                this.match(ScalaParser.T__18);
	                this.state = 1219;
	                this.type_();
	            }

	            this.state = 1222;
	            this.match(ScalaParser.T__33);
	            this.state = 1223;
	            this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1225;
	            this.funSig();
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.NL) {
	                this.state = 1226;
	                this.match(ScalaParser.NL);
	            }

	            this.state = 1229;
	            this.match(ScalaParser.T__12);
	            this.state = 1230;
	            this.block();
	            this.state = 1231;
	            this.match(ScalaParser.T__13);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1233;
	            this.match(ScalaParser.T__4);
	            this.state = 1234;
	            this.paramClause();
	            this.state = 1235;
	            this.paramClauses();
	            this.state = 1242;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ScalaParser.T__33:
	                this.state = 1236;
	                this.match(ScalaParser.T__33);
	                this.state = 1237;
	                this.constrExpr();
	                break;
	            case ScalaParser.T__12:
	            case ScalaParser.NL:
	                this.state = 1239;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 1238;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 1241;
	                this.constrBlock();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDef() {
	    let localctx = new TypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, ScalaParser.RULE_typeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this.match(ScalaParser.Id);
	        this.state = 1248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1247;
	            this.typeParamClause();
	        }

	        this.state = 1250;
	        this.match(ScalaParser.T__33);
	        this.state = 1251;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tmplDef() {
	    let localctx = new TmplDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, ScalaParser.RULE_tmplDef);
	    var _la = 0; // Token type
	    try {
	        this.state = 1265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__41) {
	                this.state = 1253;
	                this.match(ScalaParser.T__41);
	            }

	            this.state = 1256;
	            this.match(ScalaParser.T__56);
	            this.state = 1257;
	            this.classDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.T__41) {
	                this.state = 1258;
	                this.match(ScalaParser.T__41);
	            }

	            this.state = 1261;
	            this.match(ScalaParser.T__57);
	            this.state = 1262;
	            this.objectDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1263;
	            this.match(ScalaParser.T__58);
	            this.state = 1264;
	            this.traitDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDef() {
	    let localctx = new ClassDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, ScalaParser.RULE_classDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1267;
	        this.match(ScalaParser.Id);
	        this.state = 1269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1268;
	            this.typeParamClause();
	        }

	        this.state = 1274;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1271;
	                this.constrAnnotation(); 
	            }
	            this.state = 1276;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
	        }

	        this.state = 1278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 1277;
	            this.accessModifier();

	        }
	        this.state = 1280;
	        this.classParamClauses();
	        this.state = 1281;
	        this.classTemplateOpt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitDef() {
	    let localctx = new TraitDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, ScalaParser.RULE_traitDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.match(ScalaParser.Id);
	        this.state = 1285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__6) {
	            this.state = 1284;
	            this.typeParamClause();
	        }

	        this.state = 1287;
	        this.traitTemplateOpt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectDef() {
	    let localctx = new ObjectDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, ScalaParser.RULE_objectDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1289;
	        this.match(ScalaParser.Id);
	        this.state = 1290;
	        this.classTemplateOpt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTemplateOpt() {
	    let localctx = new ClassTemplateOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, ScalaParser.RULE_classTemplateOpt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1292;
	            this.match(ScalaParser.T__59);
	            this.state = 1293;
	            this.classTemplate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1298;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	            if(la_===1) {
	                this.state = 1295;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.T__59) {
	                    this.state = 1294;
	                    this.match(ScalaParser.T__59);
	                }

	                this.state = 1297;
	                this.templateBody();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitTemplateOpt() {
	    let localctx = new TraitTemplateOptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, ScalaParser.RULE_traitTemplateOpt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1302;
	            this.match(ScalaParser.T__59);
	            this.state = 1303;
	            this.traitTemplate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1308;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 1305;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.T__59) {
	                    this.state = 1304;
	                    this.match(ScalaParser.T__59);
	                }

	                this.state = 1307;
	                this.templateBody();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTemplate() {
	    let localctx = new ClassTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, ScalaParser.RULE_classTemplate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__12) {
	            this.state = 1312;
	            this.earlyDefs();
	        }

	        this.state = 1315;
	        this.classParents();
	        this.state = 1317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        if(la_===1) {
	            this.state = 1316;
	            this.templateBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitTemplate() {
	    let localctx = new TraitTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, ScalaParser.RULE_traitTemplate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.T__12) {
	            this.state = 1319;
	            this.earlyDefs();
	        }

	        this.state = 1322;
	        this.traitParents();
	        this.state = 1324;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        if(la_===1) {
	            this.state = 1323;
	            this.templateBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classParents() {
	    let localctx = new ClassParentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, ScalaParser.RULE_classParents);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1326;
	        this.constr();
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,191,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1327;
	                this.match(ScalaParser.T__16);
	                this.state = 1328;
	                this.annotType(); 
	            }
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,191,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitParents() {
	    let localctx = new TraitParentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, ScalaParser.RULE_traitParents);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1334;
	        this.annotType();
	        this.state = 1339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__16) {
	            this.state = 1335;
	            this.match(ScalaParser.T__16);
	            this.state = 1336;
	            this.annotType();
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constr() {
	    let localctx = new ConstrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, ScalaParser.RULE_constr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1342;
	        this.annotType();
	        this.state = 1346;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1343;
	                this.argumentExprs(); 
	            }
	            this.state = 1348;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	earlyDefs() {
	    let localctx = new EarlyDefsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, ScalaParser.RULE_earlyDefs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1349;
	        this.match(ScalaParser.T__12);
	        this.state = 1351; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1350;
	            this.earlyDef();
	            this.state = 1353; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ScalaParser.T__15 || _la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__43 - 40)) | (1 << (ScalaParser.T__47 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0));
	        this.state = 1355;
	        this.match(ScalaParser.T__13);
	        this.state = 1356;
	        this.match(ScalaParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	earlyDef() {
	    let localctx = new EarlyDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, ScalaParser.RULE_earlyDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__43) {
	            this.state = 1358;
	            this.annotation();
	            this.state = 1360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ScalaParser.NL) {
	                this.state = 1359;
	                this.match(ScalaParser.NL);
	            }

	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0)) {
	            this.state = 1367;
	            this.modifier();
	            this.state = 1372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1373;
	        this.patVarDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constrExpr() {
	    let localctx = new ConstrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, ScalaParser.RULE_constrExpr);
	    try {
	        this.state = 1377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ScalaParser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1375;
	            this.selfInvocation();
	            break;
	        case ScalaParser.T__12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1376;
	            this.constrBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constrBlock() {
	    let localctx = new ConstrBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, ScalaParser.RULE_constrBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.match(ScalaParser.T__12);
	        this.state = 1380;
	        this.selfInvocation();
	        this.state = 1384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__14) | (1 << ScalaParser.T__15) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ScalaParser.T__31 - 32)) | (1 << (ScalaParser.T__32 - 32)) | (1 << (ScalaParser.T__35 - 32)) | (1 << (ScalaParser.T__36 - 32)) | (1 << (ScalaParser.T__37 - 32)) | (1 << (ScalaParser.T__38 - 32)) | (1 << (ScalaParser.T__39 - 32)) | (1 << (ScalaParser.T__41 - 32)) | (1 << (ScalaParser.T__43 - 32)) | (1 << (ScalaParser.T__47 - 32)) | (1 << (ScalaParser.T__49 - 32)) | (1 << (ScalaParser.T__50 - 32)) | (1 << (ScalaParser.T__51 - 32)) | (1 << (ScalaParser.T__54 - 32)) | (1 << (ScalaParser.T__55 - 32)) | (1 << (ScalaParser.T__56 - 32)) | (1 << (ScalaParser.T__57 - 32)) | (1 << (ScalaParser.T__58 - 32)) | (1 << (ScalaParser.Id - 32)) | (1 << (ScalaParser.BooleanLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) !== 0)) {
	            this.state = 1381;
	            this.blockStat();
	            this.state = 1386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1387;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selfInvocation() {
	    let localctx = new SelfInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, ScalaParser.RULE_selfInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this.match(ScalaParser.T__4);
	        this.state = 1391; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1390;
	        		this.argumentExprs();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1393; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,200, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topStatSeq() {
	    let localctx = new TopStatSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, ScalaParser.RULE_topStatSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1396; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1395;
	            this.topStat();
	            this.state = 1398; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__41 - 40)) | (1 << (ScalaParser.T__43 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)) | (1 << (ScalaParser.T__54 - 40)) | (1 << (ScalaParser.T__56 - 40)) | (1 << (ScalaParser.T__57 - 40)) | (1 << (ScalaParser.T__58 - 40)) | (1 << (ScalaParser.T__60 - 40)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topStat() {
	    let localctx = new TopStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, ScalaParser.RULE_topStat);
	    var _la = 0; // Token type
	    try {
	        this.state = 1419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__43) {
	                this.state = 1400;
	                this.annotation();
	                this.state = 1402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ScalaParser.NL) {
	                    this.state = 1401;
	                    this.match(ScalaParser.NL);
	                }

	                this.state = 1408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ScalaParser.T__21 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ScalaParser.T__39 - 40)) | (1 << (ScalaParser.T__48 - 40)) | (1 << (ScalaParser.T__49 - 40)) | (1 << (ScalaParser.T__50 - 40)) | (1 << (ScalaParser.T__51 - 40)) | (1 << (ScalaParser.T__52 - 40)) | (1 << (ScalaParser.T__53 - 40)))) !== 0)) {
	                this.state = 1409;
	                this.modifier();
	                this.state = 1414;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1415;
	            this.tmplDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1416;
	            this.import_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1417;
	            this.packaging();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1418;
	            this.packageObject();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packaging() {
	    let localctx = new PackagingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, ScalaParser.RULE_packaging);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1421;
	        this.match(ScalaParser.T__60);
	        this.state = 1422;
	        this.qualId();
	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ScalaParser.NL) {
	            this.state = 1423;
	            this.match(ScalaParser.NL);
	        }

	        this.state = 1426;
	        this.match(ScalaParser.T__12);
	        this.state = 1427;
	        this.topStatSeq();
	        this.state = 1428;
	        this.match(ScalaParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageObject() {
	    let localctx = new PackageObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, ScalaParser.RULE_packageObject);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this.match(ScalaParser.T__60);
	        this.state = 1431;
	        this.match(ScalaParser.T__57);
	        this.state = 1432;
	        this.objectDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, ScalaParser.RULE_compilationUnit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1438;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1434;
	                this.match(ScalaParser.T__60);
	                this.state = 1435;
	                this.qualId(); 
	            }
	            this.state = 1440;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	        this.state = 1441;
	        this.topStatSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ScalaParser.EOF = antlr4.Token.EOF;
ScalaParser.T__0 = 1;
ScalaParser.T__1 = 2;
ScalaParser.T__2 = 3;
ScalaParser.T__3 = 4;
ScalaParser.T__4 = 5;
ScalaParser.T__5 = 6;
ScalaParser.T__6 = 7;
ScalaParser.T__7 = 8;
ScalaParser.T__8 = 9;
ScalaParser.T__9 = 10;
ScalaParser.T__10 = 11;
ScalaParser.T__11 = 12;
ScalaParser.T__12 = 13;
ScalaParser.T__13 = 14;
ScalaParser.T__14 = 15;
ScalaParser.T__15 = 16;
ScalaParser.T__16 = 17;
ScalaParser.T__17 = 18;
ScalaParser.T__18 = 19;
ScalaParser.T__19 = 20;
ScalaParser.T__20 = 21;
ScalaParser.T__21 = 22;
ScalaParser.T__22 = 23;
ScalaParser.T__23 = 24;
ScalaParser.T__24 = 25;
ScalaParser.T__25 = 26;
ScalaParser.T__26 = 27;
ScalaParser.T__27 = 28;
ScalaParser.T__28 = 29;
ScalaParser.T__29 = 30;
ScalaParser.T__30 = 31;
ScalaParser.T__31 = 32;
ScalaParser.T__32 = 33;
ScalaParser.T__33 = 34;
ScalaParser.T__34 = 35;
ScalaParser.T__35 = 36;
ScalaParser.T__36 = 37;
ScalaParser.T__37 = 38;
ScalaParser.T__38 = 39;
ScalaParser.T__39 = 40;
ScalaParser.T__40 = 41;
ScalaParser.T__41 = 42;
ScalaParser.T__42 = 43;
ScalaParser.T__43 = 44;
ScalaParser.T__44 = 45;
ScalaParser.T__45 = 46;
ScalaParser.T__46 = 47;
ScalaParser.T__47 = 48;
ScalaParser.T__48 = 49;
ScalaParser.T__49 = 50;
ScalaParser.T__50 = 51;
ScalaParser.T__51 = 52;
ScalaParser.T__52 = 53;
ScalaParser.T__53 = 54;
ScalaParser.T__54 = 55;
ScalaParser.T__55 = 56;
ScalaParser.T__56 = 57;
ScalaParser.T__57 = 58;
ScalaParser.T__58 = 59;
ScalaParser.T__59 = 60;
ScalaParser.T__60 = 61;
ScalaParser.Id = 62;
ScalaParser.BooleanLiteral = 63;
ScalaParser.CharacterLiteral = 64;
ScalaParser.SymbolLiteral = 65;
ScalaParser.IntegerLiteral = 66;
ScalaParser.StringLiteral = 67;
ScalaParser.FloatingPointLiteral = 68;
ScalaParser.Varid = 69;
ScalaParser.BoundVarid = 70;
ScalaParser.Paren = 71;
ScalaParser.Delim = 72;
ScalaParser.Semi = 73;
ScalaParser.NL = 74;
ScalaParser.NEWLINE = 75;
ScalaParser.WS = 76;
ScalaParser.COMMENT = 77;
ScalaParser.LINE_COMMENT = 78;

ScalaParser.RULE_literal = 0;
ScalaParser.RULE_qualId = 1;
ScalaParser.RULE_ids = 2;
ScalaParser.RULE_stableId = 3;
ScalaParser.RULE_classQualifier = 4;
ScalaParser.RULE_type_ = 5;
ScalaParser.RULE_functionArgTypes = 6;
ScalaParser.RULE_existentialClause = 7;
ScalaParser.RULE_existentialDcl = 8;
ScalaParser.RULE_infixType = 9;
ScalaParser.RULE_compoundType = 10;
ScalaParser.RULE_annotType = 11;
ScalaParser.RULE_simpleType = 12;
ScalaParser.RULE_typeArgs = 13;
ScalaParser.RULE_types = 14;
ScalaParser.RULE_refinement = 15;
ScalaParser.RULE_refineStat = 16;
ScalaParser.RULE_typePat = 17;
ScalaParser.RULE_ascription = 18;
ScalaParser.RULE_expr = 19;
ScalaParser.RULE_expr1 = 20;
ScalaParser.RULE_prefixDef = 21;
ScalaParser.RULE_postfixExpr = 22;
ScalaParser.RULE_infixExpr = 23;
ScalaParser.RULE_prefixExpr = 24;
ScalaParser.RULE_simpleExpr = 25;
ScalaParser.RULE_simpleExpr1 = 26;
ScalaParser.RULE_exprs = 27;
ScalaParser.RULE_argumentExprs = 28;
ScalaParser.RULE_args = 29;
ScalaParser.RULE_blockExpr = 30;
ScalaParser.RULE_block = 31;
ScalaParser.RULE_blockStat = 32;
ScalaParser.RULE_resultExpr = 33;
ScalaParser.RULE_enumerators = 34;
ScalaParser.RULE_generator = 35;
ScalaParser.RULE_caseClauses = 36;
ScalaParser.RULE_caseClause = 37;
ScalaParser.RULE_guard_ = 38;
ScalaParser.RULE_pattern = 39;
ScalaParser.RULE_pattern1 = 40;
ScalaParser.RULE_pattern2 = 41;
ScalaParser.RULE_pattern3 = 42;
ScalaParser.RULE_simplePattern = 43;
ScalaParser.RULE_patterns = 44;
ScalaParser.RULE_typeParamClause = 45;
ScalaParser.RULE_funTypeParamClause = 46;
ScalaParser.RULE_variantTypeParam = 47;
ScalaParser.RULE_typeParam = 48;
ScalaParser.RULE_paramClauses = 49;
ScalaParser.RULE_paramClause = 50;
ScalaParser.RULE_params = 51;
ScalaParser.RULE_param = 52;
ScalaParser.RULE_paramType = 53;
ScalaParser.RULE_classParamClauses = 54;
ScalaParser.RULE_classParamClause = 55;
ScalaParser.RULE_classParams = 56;
ScalaParser.RULE_classParam = 57;
ScalaParser.RULE_bindings = 58;
ScalaParser.RULE_binding = 59;
ScalaParser.RULE_modifier = 60;
ScalaParser.RULE_localModifier = 61;
ScalaParser.RULE_accessModifier = 62;
ScalaParser.RULE_accessQualifier = 63;
ScalaParser.RULE_annotation = 64;
ScalaParser.RULE_constrAnnotation = 65;
ScalaParser.RULE_templateBody = 66;
ScalaParser.RULE_templateStat = 67;
ScalaParser.RULE_selfType = 68;
ScalaParser.RULE_import_ = 69;
ScalaParser.RULE_importExpr = 70;
ScalaParser.RULE_importSelectors = 71;
ScalaParser.RULE_importSelector = 72;
ScalaParser.RULE_dcl = 73;
ScalaParser.RULE_valDcl = 74;
ScalaParser.RULE_varDcl = 75;
ScalaParser.RULE_funDcl = 76;
ScalaParser.RULE_funSig = 77;
ScalaParser.RULE_typeDcl = 78;
ScalaParser.RULE_patVarDef = 79;
ScalaParser.RULE_def_ = 80;
ScalaParser.RULE_patDef = 81;
ScalaParser.RULE_varDef = 82;
ScalaParser.RULE_funDef = 83;
ScalaParser.RULE_typeDef = 84;
ScalaParser.RULE_tmplDef = 85;
ScalaParser.RULE_classDef = 86;
ScalaParser.RULE_traitDef = 87;
ScalaParser.RULE_objectDef = 88;
ScalaParser.RULE_classTemplateOpt = 89;
ScalaParser.RULE_traitTemplateOpt = 90;
ScalaParser.RULE_classTemplate = 91;
ScalaParser.RULE_traitTemplate = 92;
ScalaParser.RULE_classParents = 93;
ScalaParser.RULE_traitParents = 94;
ScalaParser.RULE_constr = 95;
ScalaParser.RULE_earlyDefs = 96;
ScalaParser.RULE_earlyDef = 97;
ScalaParser.RULE_constrExpr = 98;
ScalaParser.RULE_constrBlock = 99;
ScalaParser.RULE_selfInvocation = 100;
ScalaParser.RULE_topStatSeq = 101;
ScalaParser.RULE_topStat = 102;
ScalaParser.RULE_packaging = 103;
ScalaParser.RULE_packageObject = 104;
ScalaParser.RULE_compilationUnit = 105;

class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(ScalaParser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(ScalaParser.FloatingPointLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(ScalaParser.BooleanLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(ScalaParser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(ScalaParser.StringLiteral, 0);
	};

	SymbolLiteral() {
	    return this.getToken(ScalaParser.SymbolLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class QualIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_qualId;
    }

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterQualId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitQualId(this);
		}
	}


}



class IdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_ids;
    }

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterIds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitIds(this);
		}
	}


}



class StableIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_stableId;
    }

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	classQualifier() {
	    return this.getTypedRuleContext(ClassQualifierContext,0);
	};

	stableId() {
	    return this.getTypedRuleContext(StableIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterStableId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitStableId(this);
		}
	}


}



class ClassQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classQualifier;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassQualifier(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_type_;
    }

	functionArgTypes() {
	    return this.getTypedRuleContext(FunctionArgTypesContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	infixType() {
	    return this.getTypedRuleContext(InfixTypeContext,0);
	};

	existentialClause() {
	    return this.getTypedRuleContext(ExistentialClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitType_(this);
		}
	}


}



class FunctionArgTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_functionArgTypes;
    }

	infixType() {
	    return this.getTypedRuleContext(InfixTypeContext,0);
	};

	paramType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamTypeContext);
	    } else {
	        return this.getTypedRuleContext(ParamTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterFunctionArgTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitFunctionArgTypes(this);
		}
	}


}



class ExistentialClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_existentialClause;
    }

	existentialDcl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExistentialDclContext);
	    } else {
	        return this.getTypedRuleContext(ExistentialDclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterExistentialClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitExistentialClause(this);
		}
	}


}



class ExistentialDclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_existentialDcl;
    }

	typeDcl() {
	    return this.getTypedRuleContext(TypeDclContext,0);
	};

	valDcl() {
	    return this.getTypedRuleContext(ValDclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterExistentialDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitExistentialDcl(this);
		}
	}


}



class InfixTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_infixType;
    }

	compoundType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompoundTypeContext);
	    } else {
	        return this.getTypedRuleContext(CompoundTypeContext,i);
	    }
	};

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterInfixType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitInfixType(this);
		}
	}


}



class CompoundTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_compoundType;
    }

	annotType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotTypeContext);
	    } else {
	        return this.getTypedRuleContext(AnnotTypeContext,i);
	    }
	};

	refinement() {
	    return this.getTypedRuleContext(RefinementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterCompoundType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitCompoundType(this);
		}
	}


}



class AnnotTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_annotType;
    }

	simpleType() {
	    return this.getTypedRuleContext(SimpleTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterAnnotType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitAnnotType(this);
		}
	}


}



class SimpleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_simpleType;
    }

	stableId() {
	    return this.getTypedRuleContext(StableIdContext,0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	simpleType() {
	    return this.getTypedRuleContext(SimpleTypeContext,0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSimpleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSimpleType(this);
		}
	}


}



class TypeArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typeArgs;
    }

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypeArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypeArgs(this);
		}
	}


}



class TypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_types;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypes(this);
		}
	}


}



class RefinementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_refinement;
    }

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	refineStat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RefineStatContext);
	    } else {
	        return this.getTypedRuleContext(RefineStatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterRefinement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitRefinement(this);
		}
	}


}



class RefineStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_refineStat;
    }

	dcl() {
	    return this.getTypedRuleContext(DclContext,0);
	};

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterRefineStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitRefineStat(this);
		}
	}


}



class TypePatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typePat;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypePat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypePat(this);
		}
	}


}



class AscriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_ascription;
    }

	infixType() {
	    return this.getTypedRuleContext(InfixTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterAscription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitAscription(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	bindings() {
	    return this.getTypedRuleContext(BindingsContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Expr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_expr1;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	enumerators() {
	    return this.getTypedRuleContext(EnumeratorsContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	simpleExpr1() {
	    return this.getTypedRuleContext(SimpleExpr1Context,0);
	};

	argumentExprs() {
	    return this.getTypedRuleContext(ArgumentExprsContext,0);
	};

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	ascription() {
	    return this.getTypedRuleContext(AscriptionContext,0);
	};

	caseClauses() {
	    return this.getTypedRuleContext(CaseClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitExpr1(this);
		}
	}


}



class PrefixDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_prefixDef;
    }


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPrefixDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPrefixDef(this);
		}
	}


}



class PostfixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_postfixExpr;
    }

	infixExpr() {
	    return this.getTypedRuleContext(InfixExprContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	prefixDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrefixDefContext);
	    } else {
	        return this.getTypedRuleContext(PrefixDefContext,i);
	    }
	};

	simpleExpr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExpr1Context);
	    } else {
	        return this.getTypedRuleContext(SimpleExpr1Context,i);
	    }
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPostfixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPostfixExpr(this);
		}
	}


}



class InfixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_infixExpr;
    }

	prefixExpr() {
	    return this.getTypedRuleContext(PrefixExprContext,0);
	};

	infixExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InfixExprContext);
	    } else {
	        return this.getTypedRuleContext(InfixExprContext,i);
	    }
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterInfixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitInfixExpr(this);
		}
	}


}



class PrefixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_prefixExpr;
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	simpleExpr1() {
	    return this.getTypedRuleContext(SimpleExpr1Context,0);
	};

	prefixDef() {
	    return this.getTypedRuleContext(PrefixDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPrefixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPrefixExpr(this);
		}
	}


}



class SimpleExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_simpleExpr;
    }

	classTemplate() {
	    return this.getTypedRuleContext(ClassTemplateContext,0);
	};

	templateBody() {
	    return this.getTypedRuleContext(TemplateBodyContext,0);
	};

	blockExpr() {
	    return this.getTypedRuleContext(BlockExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSimpleExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSimpleExpr(this);
		}
	}


}



class SimpleExpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_simpleExpr1;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	stableId() {
	    return this.getTypedRuleContext(StableIdContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	simpleExpr1() {
	    return this.getTypedRuleContext(SimpleExpr1Context,0);
	};

	argumentExprs() {
	    return this.getTypedRuleContext(ArgumentExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSimpleExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSimpleExpr1(this);
		}
	}


}



class ExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_exprs;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitExprs(this);
		}
	}


}



class ArgumentExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_argumentExprs;
    }

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	blockExpr() {
	    return this.getTypedRuleContext(BlockExprContext,0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterArgumentExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitArgumentExprs(this);
		}
	}


}



class ArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_args;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitArgs(this);
		}
	}


}



class BlockExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_blockExpr;
    }

	caseClauses() {
	    return this.getTypedRuleContext(CaseClausesContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterBlockExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitBlockExpr(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_block;
    }

	blockStat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatContext,i);
	    }
	};

	resultExpr() {
	    return this.getTypedRuleContext(ResultExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_blockStat;
    }

	import_() {
	    return this.getTypedRuleContext(Import_Context,0);
	};

	def_() {
	    return this.getTypedRuleContext(Def_Context,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	tmplDef() {
	    return this.getTypedRuleContext(TmplDefContext,0);
	};

	localModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalModifierContext);
	    } else {
	        return this.getTypedRuleContext(LocalModifierContext,i);
	    }
	};

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterBlockStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitBlockStat(this);
		}
	}


}



class ResultExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_resultExpr;
    }

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	bindings() {
	    return this.getTypedRuleContext(BindingsContext,0);
	};

	compoundType() {
	    return this.getTypedRuleContext(CompoundTypeContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterResultExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitResultExpr(this);
		}
	}


}



class EnumeratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_enumerators;
    }

	generator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GeneratorContext);
	    } else {
	        return this.getTypedRuleContext(GeneratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterEnumerators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitEnumerators(this);
		}
	}


}



class GeneratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_generator;
    }

	pattern1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pattern1Context);
	    } else {
	        return this.getTypedRuleContext(Pattern1Context,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	guard_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Guard_Context);
	    } else {
	        return this.getTypedRuleContext(Guard_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterGenerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitGenerator(this);
		}
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitCaseClauses(this);
		}
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_caseClause;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	guard_() {
	    return this.getTypedRuleContext(Guard_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitCaseClause(this);
		}
	}


}



class Guard_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_guard_;
    }

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterGuard_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitGuard_(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_pattern;
    }

	pattern1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pattern1Context);
	    } else {
	        return this.getTypedRuleContext(Pattern1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPattern(this);
		}
	}


}



class Pattern1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_pattern1;
    }

	typePat() {
	    return this.getTypedRuleContext(TypePatContext,0);
	};

	BoundVarid() {
	    return this.getToken(ScalaParser.BoundVarid, 0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	pattern2() {
	    return this.getTypedRuleContext(Pattern2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPattern1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPattern1(this);
		}
	}


}



class Pattern2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_pattern2;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	pattern3() {
	    return this.getTypedRuleContext(Pattern3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPattern2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPattern2(this);
		}
	}


}



class Pattern3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_pattern3;
    }

	simplePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePatternContext);
	    } else {
	        return this.getTypedRuleContext(SimplePatternContext,i);
	    }
	};

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPattern3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPattern3(this);
		}
	}


}



class SimplePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_simplePattern;
    }

	Varid() {
	    return this.getToken(ScalaParser.Varid, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	stableId() {
	    return this.getTypedRuleContext(StableIdContext,0);
	};

	patterns() {
	    return this.getTypedRuleContext(PatternsContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSimplePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSimplePattern(this);
		}
	}


}



class PatternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_patterns;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	patterns() {
	    return this.getTypedRuleContext(PatternsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPatterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPatterns(this);
		}
	}


}



class TypeParamClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typeParamClause;
    }

	variantTypeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariantTypeParamContext);
	    } else {
	        return this.getTypedRuleContext(VariantTypeParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypeParamClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypeParamClause(this);
		}
	}


}



class FunTypeParamClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_funTypeParamClause;
    }

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterFunTypeParamClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitFunTypeParamClause(this);
		}
	}


}



class VariantTypeParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_variantTypeParam;
    }

	typeParam() {
	    return this.getTypedRuleContext(TypeParamContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterVariantTypeParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitVariantTypeParam(this);
		}
	}


}



class TypeParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typeParam;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	typeParamClause() {
	    return this.getTypedRuleContext(TypeParamClauseContext,0);
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypeParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypeParam(this);
		}
	}


}



class ParamClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_paramClauses;
    }

	paramClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamClauseContext);
	    } else {
	        return this.getTypedRuleContext(ParamClauseContext,i);
	    }
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterParamClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitParamClauses(this);
		}
	}


}



class ParamClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_paramClause;
    }

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterParamClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitParamClause(this);
		}
	}


}



class ParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_params;
    }

	param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamContext);
	    } else {
	        return this.getTypedRuleContext(ParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitParams(this);
		}
	}


}



class ParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_param;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	paramType() {
	    return this.getTypedRuleContext(ParamTypeContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitParam(this);
		}
	}


}



class ParamTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_paramType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterParamType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitParamType(this);
		}
	}


}



class ClassParamClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classParamClauses;
    }

	classParamClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassParamClauseContext);
	    } else {
	        return this.getTypedRuleContext(ClassParamClauseContext,i);
	    }
	};

	classParams() {
	    return this.getTypedRuleContext(ClassParamsContext,0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassParamClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassParamClauses(this);
		}
	}


}



class ClassParamClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classParamClause;
    }

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	classParams() {
	    return this.getTypedRuleContext(ClassParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassParamClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassParamClause(this);
		}
	}


}



class ClassParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classParams;
    }

	classParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassParamContext);
	    } else {
	        return this.getTypedRuleContext(ClassParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassParams(this);
		}
	}


}



class ClassParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classParam;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	paramType() {
	    return this.getTypedRuleContext(ParamTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassParam(this);
		}
	}


}



class BindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_bindings;
    }

	binding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingContext);
	    } else {
	        return this.getTypedRuleContext(BindingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterBindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitBindings(this);
		}
	}


}



class BindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_binding;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitBinding(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_modifier;
    }

	localModifier() {
	    return this.getTypedRuleContext(LocalModifierContext,0);
	};

	accessModifier() {
	    return this.getTypedRuleContext(AccessModifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitModifier(this);
		}
	}


}



class LocalModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_localModifier;
    }


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterLocalModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitLocalModifier(this);
		}
	}


}



class AccessModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_accessModifier;
    }

	accessQualifier() {
	    return this.getTypedRuleContext(AccessQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterAccessModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitAccessModifier(this);
		}
	}


}



class AccessQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_accessQualifier;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterAccessQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitAccessQualifier(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_annotation;
    }

	simpleType() {
	    return this.getTypedRuleContext(SimpleTypeContext,0);
	};

	argumentExprs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentExprsContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentExprsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class ConstrAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_constrAnnotation;
    }

	simpleType() {
	    return this.getTypedRuleContext(SimpleTypeContext,0);
	};

	argumentExprs() {
	    return this.getTypedRuleContext(ArgumentExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterConstrAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitConstrAnnotation(this);
		}
	}


}



class TemplateBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_templateBody;
    }

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	selfType() {
	    return this.getTypedRuleContext(SelfTypeContext,0);
	};

	templateStat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStatContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTemplateBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTemplateBody(this);
		}
	}


}



class TemplateStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_templateStat;
    }

	import_() {
	    return this.getTypedRuleContext(Import_Context,0);
	};

	def_() {
	    return this.getTypedRuleContext(Def_Context,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	dcl() {
	    return this.getTypedRuleContext(DclContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTemplateStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTemplateStat(this);
		}
	}


}



class SelfTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_selfType;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSelfType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSelfType(this);
		}
	}


}



class Import_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_import_;
    }

	importExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportExprContext);
	    } else {
	        return this.getTypedRuleContext(ImportExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterImport_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitImport_(this);
		}
	}


}



class ImportExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_importExpr;
    }

	stableId() {
	    return this.getTypedRuleContext(StableIdContext,0);
	};

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	importSelectors() {
	    return this.getTypedRuleContext(ImportSelectorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterImportExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitImportExpr(this);
		}
	}


}



class ImportSelectorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_importSelectors;
    }

	importSelector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportSelectorContext);
	    } else {
	        return this.getTypedRuleContext(ImportSelectorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterImportSelectors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitImportSelectors(this);
		}
	}


}



class ImportSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_importSelector;
    }

	Id = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.Id);
	    } else {
	        return this.getToken(ScalaParser.Id, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterImportSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitImportSelector(this);
		}
	}


}



class DclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_dcl;
    }

	valDcl() {
	    return this.getTypedRuleContext(ValDclContext,0);
	};

	varDcl() {
	    return this.getTypedRuleContext(VarDclContext,0);
	};

	funDcl() {
	    return this.getTypedRuleContext(FunDclContext,0);
	};

	typeDcl() {
	    return this.getTypedRuleContext(TypeDclContext,0);
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitDcl(this);
		}
	}


}



class ValDclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_valDcl;
    }

	ids() {
	    return this.getTypedRuleContext(IdsContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterValDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitValDcl(this);
		}
	}


}



class VarDclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_varDcl;
    }

	ids() {
	    return this.getTypedRuleContext(IdsContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterVarDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitVarDcl(this);
		}
	}


}



class FunDclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_funDcl;
    }

	funSig() {
	    return this.getTypedRuleContext(FunSigContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterFunDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitFunDcl(this);
		}
	}


}



class FunSigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_funSig;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	paramClauses() {
	    return this.getTypedRuleContext(ParamClausesContext,0);
	};

	funTypeParamClause() {
	    return this.getTypedRuleContext(FunTypeParamClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterFunSig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitFunSig(this);
		}
	}


}



class TypeDclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typeDcl;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	typeParamClause() {
	    return this.getTypedRuleContext(TypeParamClauseContext,0);
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypeDcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypeDcl(this);
		}
	}


}



class PatVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_patVarDef;
    }

	patDef() {
	    return this.getTypedRuleContext(PatDefContext,0);
	};

	varDef() {
	    return this.getTypedRuleContext(VarDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPatVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPatVarDef(this);
		}
	}


}



class Def_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_def_;
    }

	patVarDef() {
	    return this.getTypedRuleContext(PatVarDefContext,0);
	};

	funDef() {
	    return this.getTypedRuleContext(FunDefContext,0);
	};

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	tmplDef() {
	    return this.getTypedRuleContext(TmplDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterDef_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitDef_(this);
		}
	}


}



class PatDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_patDef;
    }

	pattern2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pattern2Context);
	    } else {
	        return this.getTypedRuleContext(Pattern2Context,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPatDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPatDef(this);
		}
	}


}



class VarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_varDef;
    }

	patDef() {
	    return this.getTypedRuleContext(PatDefContext,0);
	};

	ids() {
	    return this.getTypedRuleContext(IdsContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitVarDef(this);
		}
	}


}



class FunDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_funDef;
    }

	funSig() {
	    return this.getTypedRuleContext(FunSigContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	paramClause() {
	    return this.getTypedRuleContext(ParamClauseContext,0);
	};

	paramClauses() {
	    return this.getTypedRuleContext(ParamClausesContext,0);
	};

	constrExpr() {
	    return this.getTypedRuleContext(ConstrExprContext,0);
	};

	constrBlock() {
	    return this.getTypedRuleContext(ConstrBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterFunDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitFunDef(this);
		}
	}


}



class TypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_typeDef;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	typeParamClause() {
	    return this.getTypedRuleContext(TypeParamClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTypeDef(this);
		}
	}


}



class TmplDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_tmplDef;
    }

	classDef() {
	    return this.getTypedRuleContext(ClassDefContext,0);
	};

	objectDef() {
	    return this.getTypedRuleContext(ObjectDefContext,0);
	};

	traitDef() {
	    return this.getTypedRuleContext(TraitDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTmplDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTmplDef(this);
		}
	}


}



class ClassDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classDef;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	classParamClauses() {
	    return this.getTypedRuleContext(ClassParamClausesContext,0);
	};

	classTemplateOpt() {
	    return this.getTypedRuleContext(ClassTemplateOptContext,0);
	};

	typeParamClause() {
	    return this.getTypedRuleContext(TypeParamClauseContext,0);
	};

	constrAnnotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstrAnnotationContext);
	    } else {
	        return this.getTypedRuleContext(ConstrAnnotationContext,i);
	    }
	};

	accessModifier() {
	    return this.getTypedRuleContext(AccessModifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassDef(this);
		}
	}


}



class TraitDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_traitDef;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	traitTemplateOpt() {
	    return this.getTypedRuleContext(TraitTemplateOptContext,0);
	};

	typeParamClause() {
	    return this.getTypedRuleContext(TypeParamClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTraitDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTraitDef(this);
		}
	}


}



class ObjectDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_objectDef;
    }

	Id() {
	    return this.getToken(ScalaParser.Id, 0);
	};

	classTemplateOpt() {
	    return this.getTypedRuleContext(ClassTemplateOptContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterObjectDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitObjectDef(this);
		}
	}


}



class ClassTemplateOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classTemplateOpt;
    }

	classTemplate() {
	    return this.getTypedRuleContext(ClassTemplateContext,0);
	};

	templateBody() {
	    return this.getTypedRuleContext(TemplateBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassTemplateOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassTemplateOpt(this);
		}
	}


}



class TraitTemplateOptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_traitTemplateOpt;
    }

	traitTemplate() {
	    return this.getTypedRuleContext(TraitTemplateContext,0);
	};

	templateBody() {
	    return this.getTypedRuleContext(TemplateBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTraitTemplateOpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTraitTemplateOpt(this);
		}
	}


}



class ClassTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classTemplate;
    }

	classParents() {
	    return this.getTypedRuleContext(ClassParentsContext,0);
	};

	earlyDefs() {
	    return this.getTypedRuleContext(EarlyDefsContext,0);
	};

	templateBody() {
	    return this.getTypedRuleContext(TemplateBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassTemplate(this);
		}
	}


}



class TraitTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_traitTemplate;
    }

	traitParents() {
	    return this.getTypedRuleContext(TraitParentsContext,0);
	};

	earlyDefs() {
	    return this.getTypedRuleContext(EarlyDefsContext,0);
	};

	templateBody() {
	    return this.getTypedRuleContext(TemplateBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTraitTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTraitTemplate(this);
		}
	}


}



class ClassParentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_classParents;
    }

	constr() {
	    return this.getTypedRuleContext(ConstrContext,0);
	};

	annotType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotTypeContext);
	    } else {
	        return this.getTypedRuleContext(AnnotTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterClassParents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitClassParents(this);
		}
	}


}



class TraitParentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_traitParents;
    }

	annotType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotTypeContext);
	    } else {
	        return this.getTypedRuleContext(AnnotTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTraitParents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTraitParents(this);
		}
	}


}



class ConstrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_constr;
    }

	annotType() {
	    return this.getTypedRuleContext(AnnotTypeContext,0);
	};

	argumentExprs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentExprsContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentExprsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterConstr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitConstr(this);
		}
	}


}



class EarlyDefsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_earlyDefs;
    }

	earlyDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EarlyDefContext);
	    } else {
	        return this.getTypedRuleContext(EarlyDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterEarlyDefs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitEarlyDefs(this);
		}
	}


}



class EarlyDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_earlyDef;
    }

	patVarDef() {
	    return this.getTypedRuleContext(PatVarDefContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterEarlyDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitEarlyDef(this);
		}
	}


}



class ConstrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_constrExpr;
    }

	selfInvocation() {
	    return this.getTypedRuleContext(SelfInvocationContext,0);
	};

	constrBlock() {
	    return this.getTypedRuleContext(ConstrBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterConstrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitConstrExpr(this);
		}
	}


}



class ConstrBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_constrBlock;
    }

	selfInvocation() {
	    return this.getTypedRuleContext(SelfInvocationContext,0);
	};

	blockStat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterConstrBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitConstrBlock(this);
		}
	}


}



class SelfInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_selfInvocation;
    }

	argumentExprs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentExprsContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentExprsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterSelfInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitSelfInvocation(this);
		}
	}


}



class TopStatSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_topStatSeq;
    }

	topStat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopStatContext);
	    } else {
	        return this.getTypedRuleContext(TopStatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTopStatSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTopStatSeq(this);
		}
	}


}



class TopStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_topStat;
    }

	tmplDef() {
	    return this.getTypedRuleContext(TmplDefContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ScalaParser.NL);
	    } else {
	        return this.getToken(ScalaParser.NL, i);
	    }
	};


	import_() {
	    return this.getTypedRuleContext(Import_Context,0);
	};

	packaging() {
	    return this.getTypedRuleContext(PackagingContext,0);
	};

	packageObject() {
	    return this.getTypedRuleContext(PackageObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterTopStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitTopStat(this);
		}
	}


}



class PackagingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_packaging;
    }

	qualId() {
	    return this.getTypedRuleContext(QualIdContext,0);
	};

	topStatSeq() {
	    return this.getTypedRuleContext(TopStatSeqContext,0);
	};

	NL() {
	    return this.getToken(ScalaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPackaging(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPackaging(this);
		}
	}


}



class PackageObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_packageObject;
    }

	objectDef() {
	    return this.getTypedRuleContext(ObjectDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterPackageObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitPackageObject(this);
		}
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ScalaParser.RULE_compilationUnit;
    }

	topStatSeq() {
	    return this.getTypedRuleContext(TopStatSeqContext,0);
	};

	qualId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualIdContext);
	    } else {
	        return this.getTypedRuleContext(QualIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ScalaListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}




ScalaParser.LiteralContext = LiteralContext; 
ScalaParser.QualIdContext = QualIdContext; 
ScalaParser.IdsContext = IdsContext; 
ScalaParser.StableIdContext = StableIdContext; 
ScalaParser.ClassQualifierContext = ClassQualifierContext; 
ScalaParser.Type_Context = Type_Context; 
ScalaParser.FunctionArgTypesContext = FunctionArgTypesContext; 
ScalaParser.ExistentialClauseContext = ExistentialClauseContext; 
ScalaParser.ExistentialDclContext = ExistentialDclContext; 
ScalaParser.InfixTypeContext = InfixTypeContext; 
ScalaParser.CompoundTypeContext = CompoundTypeContext; 
ScalaParser.AnnotTypeContext = AnnotTypeContext; 
ScalaParser.SimpleTypeContext = SimpleTypeContext; 
ScalaParser.TypeArgsContext = TypeArgsContext; 
ScalaParser.TypesContext = TypesContext; 
ScalaParser.RefinementContext = RefinementContext; 
ScalaParser.RefineStatContext = RefineStatContext; 
ScalaParser.TypePatContext = TypePatContext; 
ScalaParser.AscriptionContext = AscriptionContext; 
ScalaParser.ExprContext = ExprContext; 
ScalaParser.Expr1Context = Expr1Context; 
ScalaParser.PrefixDefContext = PrefixDefContext; 
ScalaParser.PostfixExprContext = PostfixExprContext; 
ScalaParser.InfixExprContext = InfixExprContext; 
ScalaParser.PrefixExprContext = PrefixExprContext; 
ScalaParser.SimpleExprContext = SimpleExprContext; 
ScalaParser.SimpleExpr1Context = SimpleExpr1Context; 
ScalaParser.ExprsContext = ExprsContext; 
ScalaParser.ArgumentExprsContext = ArgumentExprsContext; 
ScalaParser.ArgsContext = ArgsContext; 
ScalaParser.BlockExprContext = BlockExprContext; 
ScalaParser.BlockContext = BlockContext; 
ScalaParser.BlockStatContext = BlockStatContext; 
ScalaParser.ResultExprContext = ResultExprContext; 
ScalaParser.EnumeratorsContext = EnumeratorsContext; 
ScalaParser.GeneratorContext = GeneratorContext; 
ScalaParser.CaseClausesContext = CaseClausesContext; 
ScalaParser.CaseClauseContext = CaseClauseContext; 
ScalaParser.Guard_Context = Guard_Context; 
ScalaParser.PatternContext = PatternContext; 
ScalaParser.Pattern1Context = Pattern1Context; 
ScalaParser.Pattern2Context = Pattern2Context; 
ScalaParser.Pattern3Context = Pattern3Context; 
ScalaParser.SimplePatternContext = SimplePatternContext; 
ScalaParser.PatternsContext = PatternsContext; 
ScalaParser.TypeParamClauseContext = TypeParamClauseContext; 
ScalaParser.FunTypeParamClauseContext = FunTypeParamClauseContext; 
ScalaParser.VariantTypeParamContext = VariantTypeParamContext; 
ScalaParser.TypeParamContext = TypeParamContext; 
ScalaParser.ParamClausesContext = ParamClausesContext; 
ScalaParser.ParamClauseContext = ParamClauseContext; 
ScalaParser.ParamsContext = ParamsContext; 
ScalaParser.ParamContext = ParamContext; 
ScalaParser.ParamTypeContext = ParamTypeContext; 
ScalaParser.ClassParamClausesContext = ClassParamClausesContext; 
ScalaParser.ClassParamClauseContext = ClassParamClauseContext; 
ScalaParser.ClassParamsContext = ClassParamsContext; 
ScalaParser.ClassParamContext = ClassParamContext; 
ScalaParser.BindingsContext = BindingsContext; 
ScalaParser.BindingContext = BindingContext; 
ScalaParser.ModifierContext = ModifierContext; 
ScalaParser.LocalModifierContext = LocalModifierContext; 
ScalaParser.AccessModifierContext = AccessModifierContext; 
ScalaParser.AccessQualifierContext = AccessQualifierContext; 
ScalaParser.AnnotationContext = AnnotationContext; 
ScalaParser.ConstrAnnotationContext = ConstrAnnotationContext; 
ScalaParser.TemplateBodyContext = TemplateBodyContext; 
ScalaParser.TemplateStatContext = TemplateStatContext; 
ScalaParser.SelfTypeContext = SelfTypeContext; 
ScalaParser.Import_Context = Import_Context; 
ScalaParser.ImportExprContext = ImportExprContext; 
ScalaParser.ImportSelectorsContext = ImportSelectorsContext; 
ScalaParser.ImportSelectorContext = ImportSelectorContext; 
ScalaParser.DclContext = DclContext; 
ScalaParser.ValDclContext = ValDclContext; 
ScalaParser.VarDclContext = VarDclContext; 
ScalaParser.FunDclContext = FunDclContext; 
ScalaParser.FunSigContext = FunSigContext; 
ScalaParser.TypeDclContext = TypeDclContext; 
ScalaParser.PatVarDefContext = PatVarDefContext; 
ScalaParser.Def_Context = Def_Context; 
ScalaParser.PatDefContext = PatDefContext; 
ScalaParser.VarDefContext = VarDefContext; 
ScalaParser.FunDefContext = FunDefContext; 
ScalaParser.TypeDefContext = TypeDefContext; 
ScalaParser.TmplDefContext = TmplDefContext; 
ScalaParser.ClassDefContext = ClassDefContext; 
ScalaParser.TraitDefContext = TraitDefContext; 
ScalaParser.ObjectDefContext = ObjectDefContext; 
ScalaParser.ClassTemplateOptContext = ClassTemplateOptContext; 
ScalaParser.TraitTemplateOptContext = TraitTemplateOptContext; 
ScalaParser.ClassTemplateContext = ClassTemplateContext; 
ScalaParser.TraitTemplateContext = TraitTemplateContext; 
ScalaParser.ClassParentsContext = ClassParentsContext; 
ScalaParser.TraitParentsContext = TraitParentsContext; 
ScalaParser.ConstrContext = ConstrContext; 
ScalaParser.EarlyDefsContext = EarlyDefsContext; 
ScalaParser.EarlyDefContext = EarlyDefContext; 
ScalaParser.ConstrExprContext = ConstrExprContext; 
ScalaParser.ConstrBlockContext = ConstrBlockContext; 
ScalaParser.SelfInvocationContext = SelfInvocationContext; 
ScalaParser.TopStatSeqContext = TopStatSeqContext; 
ScalaParser.TopStatContext = TopStatContext; 
ScalaParser.PackagingContext = PackagingContext; 
ScalaParser.PackageObjectContext = PackageObjectContext; 
ScalaParser.CompilationUnitContext = CompilationUnitContext; 
