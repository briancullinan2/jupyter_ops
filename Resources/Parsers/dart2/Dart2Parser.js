// Generated from ./dart2/Dart2.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Dart2Listener from './Dart2Listener.js';
const serializedATN = [4,1,126,1821,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,1,0,1,0,3,0,349,8,0,1,1,1,1,1,1,5,1,354,8,1,10,1,12,1,357,9,
1,1,2,1,2,1,2,1,2,1,3,1,3,3,3,365,8,3,1,3,1,3,3,3,369,8,3,1,3,3,3,372,8,
3,1,4,1,4,3,4,376,8,4,1,5,1,5,1,5,3,5,381,8,5,1,5,1,5,5,5,385,8,5,10,5,12,
5,388,9,5,1,6,1,6,1,6,3,6,393,8,6,1,7,1,7,1,7,5,7,398,8,7,10,7,12,7,401,
9,7,1,8,1,8,3,8,405,8,8,1,8,1,8,1,8,1,9,3,9,411,8,9,1,9,1,9,1,10,1,10,3,
10,417,8,10,1,11,3,11,420,8,11,1,11,1,11,1,11,1,11,1,11,3,11,427,8,11,1,
11,3,11,430,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,3,13,446,8,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,454,8,13,
1,14,1,14,1,14,5,14,459,8,14,10,14,12,14,462,9,14,1,15,1,15,3,15,466,8,15,
1,16,1,16,1,16,1,16,5,16,472,8,16,10,16,12,16,475,9,16,1,16,3,16,478,8,16,
1,16,1,16,1,17,1,17,1,17,1,17,5,17,486,8,17,10,17,12,17,489,9,17,1,17,3,
17,492,8,17,1,17,1,17,1,18,1,18,1,18,3,18,499,8,18,1,19,1,19,3,19,503,8,
19,1,19,3,19,506,8,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,514,8,20,1,20,1,
20,3,20,518,8,20,1,21,1,21,3,21,522,8,21,1,21,1,21,1,21,1,21,3,21,528,8,
21,1,22,1,22,1,22,3,22,533,8,22,1,23,1,23,1,23,3,23,538,8,23,1,23,1,23,1,
23,3,23,543,8,23,3,23,545,8,23,1,24,1,24,3,24,549,8,24,1,24,1,24,1,24,3,
24,554,8,24,1,24,3,24,557,8,24,1,24,3,24,560,8,24,1,24,3,24,563,8,24,1,24,
1,24,1,24,1,24,5,24,569,8,24,10,24,12,24,572,9,24,1,24,1,24,1,24,1,24,3,
24,578,8,24,1,24,1,24,1,24,3,24,583,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
26,1,26,1,26,3,26,594,8,26,1,27,1,27,3,27,598,8,27,1,27,1,27,3,27,602,8,
27,1,27,1,27,3,27,606,8,27,1,27,1,27,3,27,610,8,27,1,27,1,27,3,27,614,8,
27,1,28,1,28,1,28,3,28,619,8,28,1,28,1,28,1,28,3,28,624,8,28,1,28,1,28,1,
28,1,28,1,28,1,28,3,28,632,8,28,3,28,634,8,28,1,28,1,28,1,28,3,28,639,8,
28,3,28,641,8,28,1,28,1,28,3,28,645,8,28,1,28,1,28,1,28,3,28,650,8,28,3,
28,652,8,28,1,28,1,28,1,28,1,28,3,28,658,8,28,1,28,1,28,1,28,3,28,663,8,
28,1,28,1,28,3,28,667,8,28,1,28,1,28,3,28,671,8,28,1,28,3,28,674,8,28,1,
29,1,29,1,29,5,29,679,8,29,10,29,12,29,682,9,29,1,30,1,30,1,30,1,30,1,31,
3,31,689,8,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,699,8,32,1,33,
1,33,1,33,1,33,1,33,1,33,3,33,707,8,33,1,34,3,34,710,8,34,1,34,1,34,1,34,
1,35,3,35,716,8,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,3,36,725,8,36,1,36,
1,36,1,37,1,37,1,37,1,37,3,37,733,8,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,
741,8,38,10,38,12,38,744,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,3,39,755,8,39,1,40,1,40,3,40,759,8,40,1,40,1,40,1,40,1,40,5,40,765,8,
40,10,40,12,40,768,9,40,1,41,1,41,1,41,1,41,3,41,774,8,41,1,41,1,41,1,42,
3,42,779,8,42,1,42,1,42,1,42,1,42,3,42,785,8,42,1,42,1,42,1,42,1,42,1,42,
3,42,792,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
3,46,806,8,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,815,8,47,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,5,48,824,8,48,10,48,12,48,827,9,48,1,48,3,48,830,
8,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,3,50,841,8,50,1,51,1,51,
1,51,1,51,5,51,847,8,51,10,51,12,51,850,9,51,1,51,1,51,1,52,1,52,1,52,1,
52,3,52,858,8,52,1,52,3,52,861,8,52,5,52,863,8,52,10,52,12,52,866,9,52,1,
53,1,53,1,53,1,53,1,53,1,53,5,53,874,8,53,10,53,12,53,877,9,53,1,53,3,53,
880,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,888,8,54,1,55,1,55,1,55,5,55,
893,8,55,10,55,12,55,896,9,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,1,56,3,56,910,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,
919,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,4,61,928,8,61,11,61,12,61,929,
1,62,1,62,1,62,1,62,1,62,1,62,3,62,938,8,62,1,63,1,63,1,63,1,63,1,63,5,63,
945,8,63,10,63,12,63,948,9,63,3,63,950,8,63,1,64,3,64,953,8,64,1,64,3,64,
956,8,64,1,64,1,64,1,64,3,64,961,8,64,3,64,963,8,64,1,64,1,64,1,65,3,65,
968,8,65,1,65,3,65,971,8,65,1,65,1,65,1,65,1,65,5,65,977,8,65,10,65,12,65,
980,9,65,1,65,3,65,983,8,65,3,65,985,8,65,1,65,1,65,1,66,1,66,1,66,1,66,
1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,
71,3,71,1008,8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,1016,8,72,1,72,1,72,
1,73,1,73,1,73,3,73,1023,8,73,3,73,1025,8,73,1,73,1,73,1,74,1,74,1,74,5,
74,1032,8,74,10,74,12,74,1035,9,74,1,74,1,74,1,74,5,74,1040,8,74,10,74,12,
74,1043,9,74,3,74,1045,8,74,1,75,1,75,1,75,1,76,1,76,1,76,5,76,1053,8,76,
10,76,12,76,1056,9,76,1,76,1,76,5,76,1060,8,76,10,76,12,76,1063,9,76,5,76,
1065,8,76,10,76,12,76,1068,9,76,1,76,1,76,1,76,3,76,1073,8,76,1,77,1,77,
1,77,1,77,1,77,3,77,1080,8,77,1,78,3,78,1083,8,78,1,78,1,78,1,79,1,79,3,
79,1089,8,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1099,8,81,1,82,
1,82,1,82,5,82,1104,8,82,10,82,12,82,1107,9,82,1,83,1,83,1,83,5,83,1112,
8,83,10,83,12,83,1115,9,83,1,84,1,84,1,84,5,84,1120,8,84,10,84,12,84,1123,
9,84,1,85,1,85,1,85,1,85,3,85,1129,8,85,1,85,1,85,1,85,1,85,3,85,1135,8,
85,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1145,8,87,1,87,1,87,1,87,
1,87,3,87,1151,8,87,1,88,1,88,1,89,1,89,1,89,5,89,1158,8,89,10,89,12,89,
1161,9,89,1,89,1,89,1,89,4,89,1166,8,89,11,89,12,89,1167,3,89,1170,8,89,
1,90,1,90,1,90,5,90,1175,8,90,10,90,12,90,1178,9,90,1,90,1,90,1,90,4,90,
1183,8,90,11,90,12,90,1184,3,90,1187,8,90,1,91,1,91,1,91,5,91,1192,8,91,
10,91,12,91,1195,9,91,1,91,1,91,1,91,4,91,1200,8,91,11,91,12,91,1201,3,91,
1204,8,91,1,92,1,92,1,93,1,93,1,93,1,93,5,93,1212,8,93,10,93,12,93,1215,
9,93,1,93,1,93,1,93,1,93,4,93,1221,8,93,11,93,12,93,1222,3,93,1225,8,93,
1,94,1,94,1,95,1,95,1,95,1,95,5,95,1233,8,95,10,95,12,95,1236,9,95,1,95,
1,95,1,95,1,95,4,95,1242,8,95,11,95,12,95,1243,3,95,1246,8,95,1,96,1,96,
1,97,1,97,1,97,1,97,5,97,1254,8,97,10,97,12,97,1257,9,97,1,97,1,97,1,97,
1,97,4,97,1263,8,97,11,97,12,97,1264,3,97,1267,8,97,1,98,1,98,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,3,99,1278,8,99,1,99,1,99,1,99,1,99,1,99,3,99,1285,
8,99,1,100,1,100,1,100,3,100,1290,8,100,1,101,1,101,1,102,1,102,1,103,1,
103,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,5,105,1306,8,105,10,
105,12,105,1309,9,105,3,105,1311,8,105,1,106,1,106,1,107,1,107,3,107,1317,
8,107,1,108,1,108,1,109,1,109,5,109,1323,8,109,10,109,12,109,1326,9,109,
1,109,3,109,1329,8,109,1,109,1,109,1,109,1,109,3,109,1335,8,109,1,110,1,
110,1,110,1,110,1,110,1,110,3,110,1343,8,110,1,111,1,111,1,111,3,111,1348,
8,111,1,112,1,112,1,113,1,113,1,113,3,113,1355,8,113,1,114,1,114,1,114,1,
115,1,115,3,115,1362,8,115,1,116,1,116,1,116,1,117,1,117,1,118,5,118,1370,
8,118,10,118,12,118,1373,9,118,1,119,5,119,1376,8,119,10,119,12,119,1379,
9,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1400,8,120,1,121,3,
121,1403,8,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,124,1,124,
1,124,1,124,1,124,1,124,1,124,3,124,1420,8,124,1,125,3,125,1423,8,125,1,
125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,3,126,1433,8,126,1,126,1,126,
3,126,1437,8,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1447,
8,126,1,127,1,127,3,127,1451,8,127,1,127,3,127,1454,8,127,1,128,1,128,1,
128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,
130,1,130,1,130,1,130,1,130,1,130,5,130,1476,8,130,10,130,12,130,1479,9,
130,1,130,3,130,1482,8,130,1,130,1,130,1,131,5,131,1487,8,131,10,131,12,
131,1490,9,131,1,131,1,131,1,131,1,131,1,131,1,132,5,132,1498,8,132,10,132,
12,132,1501,9,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,134,1,134,
1,134,4,134,1513,8,134,11,134,12,134,1514,1,134,3,134,1518,8,134,1,134,3,
134,1521,8,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,1529,8,135,1,135,
1,135,3,135,1533,8,135,1,136,1,136,1,136,1,136,1,136,3,136,1540,8,136,1,
136,1,136,1,137,1,137,1,137,1,138,1,138,3,138,1549,8,138,1,138,1,138,1,139,
1,139,1,139,1,140,1,140,3,140,1558,8,140,1,140,1,140,1,141,1,141,3,141,1564,
8,141,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,144,
1,144,1,144,1,145,1,145,1,145,1,145,1,145,3,145,1584,8,145,1,145,3,145,1587,
8,145,1,145,1,145,1,146,1,146,1,146,1,146,3,146,1595,8,146,1,146,1,146,1,
146,1,146,3,146,1601,8,146,1,146,1,146,1,146,1,146,3,146,1607,8,146,1,146,
1,146,1,146,1,146,1,146,1,146,1,146,3,146,1616,8,146,1,146,1,146,1,146,1,
146,1,146,3,146,1623,8,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,
1632,8,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,1640,8,146,1,147,1,
147,1,148,3,148,1645,8,148,1,148,3,148,1648,8,148,1,148,5,148,1651,8,148,
10,148,12,148,1654,9,148,1,148,5,148,1657,8,148,10,148,12,148,1660,9,148,
1,148,5,148,1663,8,148,10,148,12,148,1666,9,148,1,149,1,149,5,149,1670,8,
149,10,149,12,149,1673,9,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,
151,1,151,3,151,1684,8,151,1,152,1,152,1,152,5,152,1689,8,152,10,152,12,
152,1692,9,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,3,154,1701,8,154,
1,154,5,154,1704,8,154,10,154,12,154,1707,9,154,1,154,1,154,1,155,1,155,
1,155,1,155,3,155,1715,8,155,1,156,1,156,1,156,5,156,1720,8,156,10,156,12,
156,1723,9,156,1,157,1,157,1,157,1,157,5,157,1729,8,157,10,157,12,157,1732,
9,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,1,159,1,159,1,159,
1,159,1,159,5,159,1747,8,159,10,159,12,159,1750,9,159,1,159,1,159,1,160,
1,160,5,160,1756,8,160,10,160,12,160,1759,9,160,1,160,1,160,1,161,1,161,
1,162,1,162,5,162,1767,8,162,10,162,12,162,1770,9,162,1,163,1,163,1,163,
1,163,1,163,1,163,1,164,1,164,1,164,3,164,1781,8,164,1,165,1,165,3,165,1785,
8,165,1,166,1,166,3,166,1789,8,166,1,167,1,167,1,167,1,167,1,168,1,168,1,
168,5,168,1798,8,168,10,168,12,168,1801,9,168,1,169,1,169,1,169,1,169,1,
170,1,170,1,171,1,171,3,171,1811,8,171,1,171,1,171,1,171,1,172,3,172,1817,
8,172,1,172,1,172,1,172,0,0,173,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
336,338,340,342,344,0,16,2,0,7,7,10,11,1,0,2,3,2,0,18,18,25,25,1,0,119,120,
1,0,43,44,1,0,121,122,1,0,51,62,2,0,31,31,67,67,2,0,39,40,68,69,1,0,70,72,
1,0,73,75,1,0,76,77,1,0,78,81,1,0,84,85,1,0,32,33,1,0,123,123,1933,0,348,
1,0,0,0,2,350,1,0,0,0,4,358,1,0,0,0,6,371,1,0,0,0,8,375,1,0,0,0,10,377,1,
0,0,0,12,389,1,0,0,0,14,394,1,0,0,0,16,402,1,0,0,0,18,410,1,0,0,0,20,416,
1,0,0,0,22,429,1,0,0,0,24,431,1,0,0,0,26,453,1,0,0,0,28,455,1,0,0,0,30,465,
1,0,0,0,32,467,1,0,0,0,34,481,1,0,0,0,36,498,1,0,0,0,38,500,1,0,0,0,40,517,
1,0,0,0,42,519,1,0,0,0,44,529,1,0,0,0,46,544,1,0,0,0,48,582,1,0,0,0,50,584,
1,0,0,0,52,593,1,0,0,0,54,613,1,0,0,0,56,673,1,0,0,0,58,675,1,0,0,0,60,683,
1,0,0,0,62,688,1,0,0,0,64,698,1,0,0,0,66,706,1,0,0,0,68,709,1,0,0,0,70,715,
1,0,0,0,72,721,1,0,0,0,74,728,1,0,0,0,76,736,1,0,0,0,78,754,1,0,0,0,80,758,
1,0,0,0,82,769,1,0,0,0,84,778,1,0,0,0,86,793,1,0,0,0,88,797,1,0,0,0,90,800,
1,0,0,0,92,803,1,0,0,0,94,811,1,0,0,0,96,816,1,0,0,0,98,833,1,0,0,0,100,
836,1,0,0,0,102,842,1,0,0,0,104,864,1,0,0,0,106,879,1,0,0,0,108,887,1,0,
0,0,110,889,1,0,0,0,112,909,1,0,0,0,114,918,1,0,0,0,116,920,1,0,0,0,118,
922,1,0,0,0,120,924,1,0,0,0,122,927,1,0,0,0,124,937,1,0,0,0,126,939,1,0,
0,0,128,952,1,0,0,0,130,967,1,0,0,0,132,988,1,0,0,0,134,992,1,0,0,0,136,
995,1,0,0,0,138,998,1,0,0,0,140,1001,1,0,0,0,142,1003,1,0,0,0,144,1011,1,
0,0,0,146,1019,1,0,0,0,148,1044,1,0,0,0,150,1046,1,0,0,0,152,1049,1,0,0,
0,154,1079,1,0,0,0,156,1082,1,0,0,0,158,1088,1,0,0,0,160,1090,1,0,0,0,162,
1092,1,0,0,0,164,1100,1,0,0,0,166,1108,1,0,0,0,168,1116,1,0,0,0,170,1134,
1,0,0,0,172,1136,1,0,0,0,174,1150,1,0,0,0,176,1152,1,0,0,0,178,1169,1,0,
0,0,180,1186,1,0,0,0,182,1203,1,0,0,0,184,1205,1,0,0,0,186,1224,1,0,0,0,
188,1226,1,0,0,0,190,1245,1,0,0,0,192,1247,1,0,0,0,194,1266,1,0,0,0,196,
1268,1,0,0,0,198,1284,1,0,0,0,200,1289,1,0,0,0,202,1291,1,0,0,0,204,1293,
1,0,0,0,206,1295,1,0,0,0,208,1297,1,0,0,0,210,1310,1,0,0,0,212,1312,1,0,
0,0,214,1316,1,0,0,0,216,1318,1,0,0,0,218,1334,1,0,0,0,220,1342,1,0,0,0,
222,1347,1,0,0,0,224,1349,1,0,0,0,226,1351,1,0,0,0,228,1356,1,0,0,0,230,
1359,1,0,0,0,232,1363,1,0,0,0,234,1366,1,0,0,0,236,1371,1,0,0,0,238,1377,
1,0,0,0,240,1399,1,0,0,0,242,1402,1,0,0,0,244,1406,1,0,0,0,246,1409,1,0,
0,0,248,1412,1,0,0,0,250,1422,1,0,0,0,252,1446,1,0,0,0,254,1453,1,0,0,0,
256,1455,1,0,0,0,258,1461,1,0,0,0,260,1469,1,0,0,0,262,1488,1,0,0,0,264,
1499,1,0,0,0,266,1506,1,0,0,0,268,1509,1,0,0,0,270,1532,1,0,0,0,272,1534,
1,0,0,0,274,1543,1,0,0,0,276,1546,1,0,0,0,278,1552,1,0,0,0,280,1555,1,0,
0,0,282,1561,1,0,0,0,284,1567,1,0,0,0,286,1571,1,0,0,0,288,1575,1,0,0,0,
290,1578,1,0,0,0,292,1639,1,0,0,0,294,1641,1,0,0,0,296,1644,1,0,0,0,298,
1667,1,0,0,0,300,1676,1,0,0,0,302,1683,1,0,0,0,304,1685,1,0,0,0,306,1693,
1,0,0,0,308,1696,1,0,0,0,310,1714,1,0,0,0,312,1716,1,0,0,0,314,1724,1,0,
0,0,316,1735,1,0,0,0,318,1740,1,0,0,0,320,1753,1,0,0,0,322,1762,1,0,0,0,
324,1764,1,0,0,0,326,1771,1,0,0,0,328,1777,1,0,0,0,330,1782,1,0,0,0,332,
1788,1,0,0,0,334,1790,1,0,0,0,336,1794,1,0,0,0,338,1802,1,0,0,0,340,1806,
1,0,0,0,342,1808,1,0,0,0,344,1816,1,0,0,0,346,349,3,296,148,0,347,349,3,
320,160,0,348,346,1,0,0,0,348,347,1,0,0,0,349,1,1,0,0,0,350,355,3,4,2,0,
351,352,5,1,0,0,352,354,3,224,112,0,353,351,1,0,0,0,354,357,1,0,0,0,355,
353,1,0,0,0,355,356,1,0,0,0,356,3,1,0,0,0,357,355,1,0,0,0,358,359,3,104,
52,0,359,360,3,6,3,0,360,361,3,224,112,0,361,5,1,0,0,0,362,364,5,2,0,0,363,
365,3,330,165,0,364,363,1,0,0,0,364,365,1,0,0,0,365,372,1,0,0,0,366,368,
5,3,0,0,367,369,3,330,165,0,368,367,1,0,0,0,368,369,1,0,0,0,369,372,1,0,
0,0,370,372,3,8,4,0,371,362,1,0,0,0,371,366,1,0,0,0,371,370,1,0,0,0,372,
7,1,0,0,0,373,376,5,4,0,0,374,376,3,330,165,0,375,373,1,0,0,0,375,374,1,
0,0,0,376,9,1,0,0,0,377,380,3,4,2,0,378,379,5,5,0,0,379,381,3,106,53,0,380,
378,1,0,0,0,380,381,1,0,0,0,381,386,1,0,0,0,382,383,5,1,0,0,383,385,3,12,
6,0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,
11,1,0,0,0,388,386,1,0,0,0,389,392,3,224,112,0,390,391,5,5,0,0,391,393,3,
106,53,0,392,390,1,0,0,0,392,393,1,0,0,0,393,13,1,0,0,0,394,399,3,12,6,0,
395,396,5,1,0,0,396,398,3,12,6,0,397,395,1,0,0,0,398,401,1,0,0,0,399,397,
1,0,0,0,399,400,1,0,0,0,400,15,1,0,0,0,401,399,1,0,0,0,402,404,3,104,52,
0,403,405,3,20,10,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,
407,3,224,112,0,407,408,3,18,9,0,408,17,1,0,0,0,409,411,3,102,51,0,410,409,
1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,3,26,13,0,413,19,1,0,0,0,
414,417,5,6,0,0,415,417,3,330,165,0,416,414,1,0,0,0,416,415,1,0,0,0,417,
21,1,0,0,0,418,420,5,7,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,
0,421,422,5,8,0,0,422,423,3,106,53,0,423,424,5,9,0,0,424,430,1,0,0,0,425,
427,7,0,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,430,3,24,
12,0,429,419,1,0,0,0,429,426,1,0,0,0,430,23,1,0,0,0,431,432,5,12,0,0,432,
433,3,236,118,0,433,434,5,13,0,0,434,25,1,0,0,0,435,436,5,14,0,0,436,454,
5,15,0,0,437,438,5,14,0,0,438,439,3,28,14,0,439,440,5,15,0,0,440,454,1,0,
0,0,441,442,5,14,0,0,442,445,3,28,14,0,443,444,5,1,0,0,444,446,3,30,15,0,
445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,5,15,0,0,448,454,
1,0,0,0,449,450,5,14,0,0,450,451,3,30,15,0,451,452,5,15,0,0,452,454,1,0,
0,0,453,435,1,0,0,0,453,437,1,0,0,0,453,441,1,0,0,0,453,449,1,0,0,0,454,
27,1,0,0,0,455,460,3,36,18,0,456,457,5,1,0,0,457,459,3,36,18,0,458,456,1,
0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,29,1,0,0,0,462,
460,1,0,0,0,463,466,3,32,16,0,464,466,3,34,17,0,465,463,1,0,0,0,465,464,
1,0,0,0,466,31,1,0,0,0,467,468,5,16,0,0,468,473,3,44,22,0,469,470,5,1,0,
0,470,472,3,44,22,0,471,469,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,
474,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,476,478,5,1,0,0,477,476,1,0,
0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,480,5,17,0,0,480,33,1,0,0,0,481,
482,5,12,0,0,482,487,3,46,23,0,483,484,5,1,0,0,484,486,3,46,23,0,485,483,
1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,
489,487,1,0,0,0,490,492,5,1,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,
1,0,0,0,493,494,5,13,0,0,494,35,1,0,0,0,495,499,3,38,19,0,496,499,3,42,21,
0,497,499,3,40,20,0,498,495,1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,
37,1,0,0,0,500,502,3,104,52,0,501,503,5,18,0,0,502,501,1,0,0,0,502,503,1,
0,0,0,503,505,1,0,0,0,504,506,3,20,10,0,505,504,1,0,0,0,505,506,1,0,0,0,
506,507,1,0,0,0,507,508,3,224,112,0,508,509,3,18,9,0,509,39,1,0,0,0,510,
518,3,4,2,0,511,513,3,104,52,0,512,514,5,18,0,0,513,512,1,0,0,0,513,514,
1,0,0,0,514,515,1,0,0,0,515,516,3,224,112,0,516,518,1,0,0,0,517,510,1,0,
0,0,517,511,1,0,0,0,518,41,1,0,0,0,519,521,3,104,52,0,520,522,3,6,3,0,521,
520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,5,19,0,0,524,525,5,20,
0,0,525,527,3,224,112,0,526,528,3,18,9,0,527,526,1,0,0,0,527,528,1,0,0,0,
528,43,1,0,0,0,529,532,3,36,18,0,530,531,5,5,0,0,531,533,3,106,53,0,532,
530,1,0,0,0,532,533,1,0,0,0,533,45,1,0,0,0,534,537,3,36,18,0,535,536,5,5,
0,0,536,538,3,106,53,0,537,535,1,0,0,0,537,538,1,0,0,0,538,545,1,0,0,0,539,
542,3,36,18,0,540,541,5,21,0,0,541,543,3,106,53,0,542,540,1,0,0,0,542,543,
1,0,0,0,543,545,1,0,0,0,544,534,1,0,0,0,544,539,1,0,0,0,545,47,1,0,0,0,546,
548,3,104,52,0,547,549,5,22,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,
1,0,0,0,550,551,5,23,0,0,551,553,3,224,112,0,552,554,3,102,51,0,553,552,
1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,557,3,88,44,0,556,555,1,0,0,
0,556,557,1,0,0,0,557,559,1,0,0,0,558,560,3,50,25,0,559,558,1,0,0,0,559,
560,1,0,0,0,560,562,1,0,0,0,561,563,3,90,45,0,562,561,1,0,0,0,562,563,1,
0,0,0,563,564,1,0,0,0,564,570,5,12,0,0,565,566,3,104,52,0,566,567,3,52,26,
0,567,569,1,0,0,0,568,565,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,
1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,574,5,13,0,0,574,583,1,0,0,0,
575,577,3,104,52,0,576,578,5,22,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,
579,1,0,0,0,579,580,5,23,0,0,580,581,3,92,46,0,581,583,1,0,0,0,582,546,1,
0,0,0,582,575,1,0,0,0,583,49,1,0,0,0,584,585,5,24,0,0,585,586,3,336,168,
0,586,51,1,0,0,0,587,588,3,56,28,0,588,589,5,9,0,0,589,594,1,0,0,0,590,591,
3,54,27,0,591,592,3,22,11,0,592,594,1,0,0,0,593,587,1,0,0,0,593,590,1,0,
0,0,594,53,1,0,0,0,595,597,3,72,36,0,596,598,3,76,38,0,597,596,1,0,0,0,597,
598,1,0,0,0,598,614,1,0,0,0,599,614,3,82,41,0,600,602,5,25,0,0,601,600,1,
0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,614,3,16,8,0,604,606,5,25,0,0,
605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,614,3,68,34,0,608,610,
5,25,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,614,3,70,35,
0,612,614,3,62,31,0,613,595,1,0,0,0,613,599,1,0,0,0,613,601,1,0,0,0,613,
605,1,0,0,0,613,609,1,0,0,0,613,612,1,0,0,0,614,55,1,0,0,0,615,618,3,86,
43,0,616,619,3,74,37,0,617,619,3,76,38,0,618,616,1,0,0,0,618,617,1,0,0,0,
618,619,1,0,0,0,619,674,1,0,0,0,620,623,3,72,36,0,621,624,3,74,37,0,622,
624,3,76,38,0,623,621,1,0,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,674,1,
0,0,0,625,626,5,26,0,0,626,674,3,86,43,0,627,628,5,26,0,0,628,674,3,72,36,
0,629,631,5,26,0,0,630,632,5,25,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,
634,1,0,0,0,633,629,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,674,3,68,
34,0,636,638,5,26,0,0,637,639,5,25,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,
641,1,0,0,0,640,636,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,674,3,70,
35,0,643,645,5,26,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,
674,3,62,31,0,647,649,5,26,0,0,648,650,5,25,0,0,649,648,1,0,0,0,649,650,
1,0,0,0,650,652,1,0,0,0,651,647,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,
653,674,3,16,8,0,654,655,5,25,0,0,655,657,7,1,0,0,656,658,3,330,165,0,657,
656,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,674,3,58,29,0,660,662,5,
2,0,0,661,663,3,330,165,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,
0,664,674,3,14,7,0,665,667,7,2,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,670,
1,0,0,0,668,671,5,4,0,0,669,671,3,330,165,0,670,668,1,0,0,0,670,669,1,0,
0,0,671,672,1,0,0,0,672,674,3,14,7,0,673,615,1,0,0,0,673,620,1,0,0,0,673,
625,1,0,0,0,673,627,1,0,0,0,673,633,1,0,0,0,673,640,1,0,0,0,673,644,1,0,
0,0,673,651,1,0,0,0,673,654,1,0,0,0,673,660,1,0,0,0,673,666,1,0,0,0,674,
57,1,0,0,0,675,680,3,60,30,0,676,677,5,1,0,0,677,679,3,60,30,0,678,676,1,
0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,59,1,0,0,0,682,
680,1,0,0,0,683,684,3,224,112,0,684,685,5,5,0,0,685,686,3,106,53,0,686,61,
1,0,0,0,687,689,3,20,10,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,
0,690,691,5,27,0,0,691,692,3,64,32,0,692,693,3,26,13,0,693,63,1,0,0,0,694,
699,5,28,0,0,695,699,3,66,33,0,696,699,5,29,0,0,697,699,5,30,0,0,698,694,
1,0,0,0,698,695,1,0,0,0,698,696,1,0,0,0,698,697,1,0,0,0,699,65,1,0,0,0,700,
707,3,196,98,0,701,707,3,192,96,0,702,707,3,188,94,0,703,707,3,176,88,0,
704,707,5,31,0,0,705,707,3,184,92,0,706,700,1,0,0,0,706,701,1,0,0,0,706,
702,1,0,0,0,706,703,1,0,0,0,706,704,1,0,0,0,706,705,1,0,0,0,707,67,1,0,0,
0,708,710,3,20,10,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,
712,5,32,0,0,712,713,3,224,112,0,713,69,1,0,0,0,714,716,3,20,10,0,715,714,
1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,718,5,33,0,0,718,719,3,224,112,
0,719,720,3,26,13,0,720,71,1,0,0,0,721,724,3,224,112,0,722,723,5,20,0,0,
723,725,3,224,112,0,724,722,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
727,3,26,13,0,727,73,1,0,0,0,728,729,5,21,0,0,729,732,5,19,0,0,730,731,5,
20,0,0,731,733,3,224,112,0,732,730,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,
0,734,735,3,146,73,0,735,75,1,0,0,0,736,737,5,21,0,0,737,742,3,78,39,0,738,
739,5,1,0,0,739,741,3,78,39,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,
0,0,0,742,743,1,0,0,0,743,77,1,0,0,0,744,742,1,0,0,0,745,746,5,34,0,0,746,
755,3,146,73,0,747,748,5,34,0,0,748,749,5,20,0,0,749,750,3,224,112,0,750,
751,3,146,73,0,751,755,1,0,0,0,752,755,3,80,40,0,753,755,3,290,145,0,754,
745,1,0,0,0,754,747,1,0,0,0,754,752,1,0,0,0,754,753,1,0,0,0,755,79,1,0,0,
0,756,757,5,19,0,0,757,759,5,20,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,
760,1,0,0,0,760,761,3,224,112,0,761,762,5,5,0,0,762,766,3,162,81,0,763,765,
3,152,76,0,764,763,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,
0,767,81,1,0,0,0,768,766,1,0,0,0,769,770,5,35,0,0,770,773,3,224,112,0,771,
772,5,20,0,0,772,774,3,224,112,0,773,771,1,0,0,0,773,774,1,0,0,0,774,775,
1,0,0,0,775,776,3,26,13,0,776,83,1,0,0,0,777,779,5,3,0,0,778,777,1,0,0,0,
778,779,1,0,0,0,779,780,1,0,0,0,780,781,5,35,0,0,781,784,3,224,112,0,782,
783,5,20,0,0,783,785,3,224,112,0,784,782,1,0,0,0,784,785,1,0,0,0,785,786,
1,0,0,0,786,787,3,26,13,0,787,788,5,5,0,0,788,791,3,330,165,0,789,790,5,
20,0,0,790,792,3,224,112,0,791,789,1,0,0,0,791,792,1,0,0,0,792,85,1,0,0,
0,793,794,5,3,0,0,794,795,3,226,113,0,795,796,3,26,13,0,796,87,1,0,0,0,797,
798,5,36,0,0,798,799,3,330,165,0,799,89,1,0,0,0,800,801,5,37,0,0,801,802,
3,336,168,0,802,91,1,0,0,0,803,805,3,224,112,0,804,806,3,102,51,0,805,804,
1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,808,5,5,0,0,808,809,3,94,47,
0,809,810,5,9,0,0,810,93,1,0,0,0,811,812,3,330,165,0,812,814,3,50,25,0,813,
815,3,90,45,0,814,813,1,0,0,0,814,815,1,0,0,0,815,95,1,0,0,0,816,817,3,104,
52,0,817,818,5,38,0,0,818,819,3,224,112,0,819,820,5,12,0,0,820,825,3,98,
49,0,821,822,5,1,0,0,822,824,3,98,49,0,823,821,1,0,0,0,824,827,1,0,0,0,825,
823,1,0,0,0,825,826,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,828,830,5,1,
0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,5,13,0,0,832,
97,1,0,0,0,833,834,3,104,52,0,834,835,3,224,112,0,835,99,1,0,0,0,836,837,
3,104,52,0,837,840,3,224,112,0,838,839,5,36,0,0,839,841,3,330,165,0,840,
838,1,0,0,0,840,841,1,0,0,0,841,101,1,0,0,0,842,843,5,39,0,0,843,848,3,100,
50,0,844,845,5,1,0,0,845,847,3,100,50,0,846,844,1,0,0,0,847,850,1,0,0,0,
848,846,1,0,0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,848,1,0,0,0,851,852,
5,40,0,0,852,103,1,0,0,0,853,854,5,41,0,0,854,857,3,226,113,0,855,856,5,
20,0,0,856,858,3,224,112,0,857,855,1,0,0,0,857,858,1,0,0,0,858,860,1,0,0,
0,859,861,3,146,73,0,860,859,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,
853,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,105,1,0,
0,0,866,864,1,0,0,0,867,868,3,218,109,0,868,869,3,158,79,0,869,870,3,106,
53,0,870,880,1,0,0,0,871,875,3,162,81,0,872,874,3,152,76,0,873,872,1,0,0,
0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,880,1,0,0,0,877,875,
1,0,0,0,878,880,3,134,67,0,879,867,1,0,0,0,879,871,1,0,0,0,879,878,1,0,0,
0,880,107,1,0,0,0,881,882,3,218,109,0,882,883,3,158,79,0,883,884,3,108,54,
0,884,888,1,0,0,0,885,888,3,162,81,0,886,888,3,136,68,0,887,881,1,0,0,0,
887,885,1,0,0,0,887,886,1,0,0,0,888,109,1,0,0,0,889,894,3,106,53,0,890,891,
5,1,0,0,891,893,3,106,53,0,892,890,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,
0,894,895,1,0,0,0,895,111,1,0,0,0,896,894,1,0,0,0,897,910,3,140,70,0,898,
899,5,34,0,0,899,910,3,220,110,0,900,910,3,138,69,0,901,910,3,114,57,0,902,
910,3,224,112,0,903,910,3,142,71,0,904,910,3,144,72,0,905,906,5,14,0,0,906,
907,3,106,53,0,907,908,5,15,0,0,908,910,1,0,0,0,909,897,1,0,0,0,909,898,
1,0,0,0,909,900,1,0,0,0,909,901,1,0,0,0,909,902,1,0,0,0,909,903,1,0,0,0,
909,904,1,0,0,0,909,905,1,0,0,0,910,113,1,0,0,0,911,919,3,116,58,0,912,919,
3,120,60,0,913,919,3,118,59,0,914,919,3,122,61,0,915,919,3,126,63,0,916,
919,3,130,65,0,917,919,3,128,64,0,918,911,1,0,0,0,918,912,1,0,0,0,918,913,
1,0,0,0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,0,
919,115,1,0,0,0,920,921,5,42,0,0,921,117,1,0,0,0,922,923,7,3,0,0,923,119,
1,0,0,0,924,925,7,4,0,0,925,121,1,0,0,0,926,928,7,5,0,0,927,926,1,0,0,0,
928,929,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,123,1,0,0,0,931,932,
5,45,0,0,932,938,3,224,112,0,933,934,5,46,0,0,934,935,3,106,53,0,935,936,
5,13,0,0,936,938,1,0,0,0,937,931,1,0,0,0,937,933,1,0,0,0,938,125,1,0,0,0,
939,949,5,47,0,0,940,950,3,64,32,0,941,946,3,224,112,0,942,943,5,1,0,0,943,
945,3,224,112,0,944,942,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,946,947,
1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,949,940,1,0,0,0,949,941,1,0,0,0,
950,127,1,0,0,0,951,953,5,3,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,955,
1,0,0,0,954,956,3,334,167,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,
0,0,957,962,5,16,0,0,958,960,3,110,55,0,959,961,5,1,0,0,960,959,1,0,0,0,
960,961,1,0,0,0,961,963,1,0,0,0,962,958,1,0,0,0,962,963,1,0,0,0,963,964,
1,0,0,0,964,965,5,17,0,0,965,129,1,0,0,0,966,968,5,3,0,0,967,966,1,0,0,0,
967,968,1,0,0,0,968,970,1,0,0,0,969,971,3,334,167,0,970,969,1,0,0,0,970,
971,1,0,0,0,971,972,1,0,0,0,972,984,5,12,0,0,973,978,3,132,66,0,974,975,
5,1,0,0,975,977,3,132,66,0,976,974,1,0,0,0,977,980,1,0,0,0,978,976,1,0,0,
0,978,979,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,981,983,5,1,0,0,982,981,
1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,973,1,0,0,0,984,985,1,0,0,0,
985,986,1,0,0,0,986,987,5,13,0,0,987,131,1,0,0,0,988,989,3,106,53,0,989,
990,5,21,0,0,990,991,3,106,53,0,991,133,1,0,0,0,992,993,5,48,0,0,993,994,
3,106,53,0,994,135,1,0,0,0,995,996,5,48,0,0,996,997,3,108,54,0,997,137,1,
0,0,0,998,999,3,18,9,0,999,1000,3,22,11,0,1000,139,1,0,0,0,1001,1002,5,19,
0,0,1002,141,1,0,0,0,1003,1004,5,49,0,0,1004,1007,3,330,165,0,1005,1006,
5,20,0,0,1006,1008,3,224,112,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,
1009,1,0,0,0,1009,1010,3,146,73,0,1010,143,1,0,0,0,1011,1012,5,3,0,0,1012,
1015,3,330,165,0,1013,1014,5,20,0,0,1014,1016,3,224,112,0,1015,1013,1,0,
0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1018,3,146,73,0,1018,145,1,
0,0,0,1019,1024,5,14,0,0,1020,1022,3,148,74,0,1021,1023,5,1,0,0,1022,1021,
1,0,0,0,1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,1020,1,0,0,0,1024,1025,
1,0,0,0,1025,1026,1,0,0,0,1026,1027,5,15,0,0,1027,147,1,0,0,0,1028,1033,
3,150,75,0,1029,1030,5,1,0,0,1030,1032,3,150,75,0,1031,1029,1,0,0,0,1032,
1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,1045,1,0,0,0,1035,
1033,1,0,0,0,1036,1041,3,110,55,0,1037,1038,5,1,0,0,1038,1040,3,150,75,0,
1039,1037,1,0,0,0,1040,1043,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,
1042,1045,1,0,0,0,1043,1041,1,0,0,0,1044,1028,1,0,0,0,1044,1036,1,0,0,0,
1045,149,1,0,0,0,1046,1047,3,278,139,0,1047,1048,3,106,53,0,1048,151,1,0,
0,0,1049,1050,5,50,0,0,1050,1054,3,154,77,0,1051,1053,3,156,78,0,1052,1051,
1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,1066,
1,0,0,0,1056,1054,1,0,0,0,1057,1061,3,222,111,0,1058,1060,3,156,78,0,1059,
1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,
1065,1,0,0,0,1063,1061,1,0,0,0,1064,1057,1,0,0,0,1065,1068,1,0,0,0,1066,
1064,1,0,0,0,1066,1067,1,0,0,0,1067,1072,1,0,0,0,1068,1066,1,0,0,0,1069,
1070,3,158,79,0,1070,1071,3,108,54,0,1071,1073,1,0,0,0,1072,1069,1,0,0,0,
1072,1073,1,0,0,0,1073,153,1,0,0,0,1074,1075,5,16,0,0,1075,1076,3,106,53,
0,1076,1077,5,17,0,0,1077,1080,1,0,0,0,1078,1080,3,224,112,0,1079,1074,1,
0,0,0,1079,1078,1,0,0,0,1080,155,1,0,0,0,1081,1083,3,334,167,0,1082,1081,
1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,3,146,73,0,1085,157,
1,0,0,0,1086,1089,5,5,0,0,1087,1089,3,160,80,0,1088,1086,1,0,0,0,1088,1087,
1,0,0,0,1089,159,1,0,0,0,1090,1091,7,6,0,0,1091,161,1,0,0,0,1092,1098,3,
164,82,0,1093,1094,5,63,0,0,1094,1095,3,108,54,0,1095,1096,5,21,0,0,1096,
1097,3,108,54,0,1097,1099,1,0,0,0,1098,1093,1,0,0,0,1098,1099,1,0,0,0,1099,
163,1,0,0,0,1100,1105,3,166,83,0,1101,1102,5,64,0,0,1102,1104,3,166,83,0,
1103,1101,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,
1106,165,1,0,0,0,1107,1105,1,0,0,0,1108,1113,3,168,84,0,1109,1110,5,65,0,
0,1110,1112,3,168,84,0,1111,1109,1,0,0,0,1112,1115,1,0,0,0,1113,1111,1,0,
0,0,1113,1114,1,0,0,0,1114,167,1,0,0,0,1115,1113,1,0,0,0,1116,1121,3,170,
85,0,1117,1118,5,66,0,0,1118,1120,3,170,85,0,1119,1117,1,0,0,0,1120,1123,
1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,169,1,0,0,0,1123,1121,1,
0,0,0,1124,1128,3,174,87,0,1125,1126,3,172,86,0,1126,1127,3,174,87,0,1127,
1129,1,0,0,0,1128,1125,1,0,0,0,1128,1129,1,0,0,0,1129,1135,1,0,0,0,1130,
1131,5,34,0,0,1131,1132,3,172,86,0,1132,1133,3,174,87,0,1133,1135,1,0,0,
0,1134,1124,1,0,0,0,1134,1130,1,0,0,0,1135,171,1,0,0,0,1136,1137,7,7,0,0,
1137,173,1,0,0,0,1138,1144,3,178,89,0,1139,1145,3,228,114,0,1140,1145,3,
232,116,0,1141,1142,3,176,88,0,1142,1143,3,178,89,0,1143,1145,1,0,0,0,1144,
1139,1,0,0,0,1144,1140,1,0,0,0,1144,1141,1,0,0,0,1144,1145,1,0,0,0,1145,
1151,1,0,0,0,1146,1147,5,34,0,0,1147,1148,3,176,88,0,1148,1149,3,178,89,
0,1149,1151,1,0,0,0,1150,1138,1,0,0,0,1150,1146,1,0,0,0,1151,175,1,0,0,0,
1152,1153,7,8,0,0,1153,177,1,0,0,0,1154,1159,3,180,90,0,1155,1156,5,70,0,
0,1156,1158,3,180,90,0,1157,1155,1,0,0,0,1158,1161,1,0,0,0,1159,1157,1,0,
0,0,1159,1160,1,0,0,0,1160,1170,1,0,0,0,1161,1159,1,0,0,0,1162,1165,5,34,
0,0,1163,1164,5,70,0,0,1164,1166,3,178,89,0,1165,1163,1,0,0,0,1166,1167,
1,0,0,0,1167,1165,1,0,0,0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1154,
1,0,0,0,1169,1162,1,0,0,0,1170,179,1,0,0,0,1171,1176,3,182,91,0,1172,1173,
5,71,0,0,1173,1175,3,182,91,0,1174,1172,1,0,0,0,1175,1178,1,0,0,0,1176,1174,
1,0,0,0,1176,1177,1,0,0,0,1177,1187,1,0,0,0,1178,1176,1,0,0,0,1179,1182,
5,34,0,0,1180,1181,5,71,0,0,1181,1183,3,182,91,0,1182,1180,1,0,0,0,1183,
1184,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,
1171,1,0,0,0,1186,1179,1,0,0,0,1187,181,1,0,0,0,1188,1193,3,186,93,0,1189,
1190,5,72,0,0,1190,1192,3,186,93,0,1191,1189,1,0,0,0,1192,1195,1,0,0,0,1193,
1191,1,0,0,0,1193,1194,1,0,0,0,1194,1204,1,0,0,0,1195,1193,1,0,0,0,1196,
1199,5,34,0,0,1197,1198,5,72,0,0,1198,1200,3,186,93,0,1199,1197,1,0,0,0,
1200,1201,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,
1203,1188,1,0,0,0,1203,1196,1,0,0,0,1204,183,1,0,0,0,1205,1206,7,9,0,0,1206,
185,1,0,0,0,1207,1213,3,190,95,0,1208,1209,3,188,94,0,1209,1210,3,190,95,
0,1210,1212,1,0,0,0,1211,1208,1,0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,0,
0,1213,1214,1,0,0,0,1214,1225,1,0,0,0,1215,1213,1,0,0,0,1216,1220,5,34,0,
0,1217,1218,3,188,94,0,1218,1219,3,190,95,0,1219,1221,1,0,0,0,1220,1217,
1,0,0,0,1221,1222,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,
1,0,0,0,1224,1207,1,0,0,0,1224,1216,1,0,0,0,1225,187,1,0,0,0,1226,1227,7,
10,0,0,1227,189,1,0,0,0,1228,1234,3,194,97,0,1229,1230,3,192,96,0,1230,1231,
3,194,97,0,1231,1233,1,0,0,0,1232,1229,1,0,0,0,1233,1236,1,0,0,0,1234,1232,
1,0,0,0,1234,1235,1,0,0,0,1235,1246,1,0,0,0,1236,1234,1,0,0,0,1237,1241,
5,34,0,0,1238,1239,3,192,96,0,1239,1240,3,194,97,0,1240,1242,1,0,0,0,1241,
1238,1,0,0,0,1242,1243,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,
1246,1,0,0,0,1245,1228,1,0,0,0,1245,1237,1,0,0,0,1246,191,1,0,0,0,1247,1248,
7,11,0,0,1248,193,1,0,0,0,1249,1255,3,198,99,0,1250,1251,3,196,98,0,1251,
1252,3,198,99,0,1252,1254,1,0,0,0,1253,1250,1,0,0,0,1254,1257,1,0,0,0,1255,
1253,1,0,0,0,1255,1256,1,0,0,0,1256,1267,1,0,0,0,1257,1255,1,0,0,0,1258,
1262,5,34,0,0,1259,1260,3,196,98,0,1260,1261,3,198,99,0,1261,1263,1,0,0,
0,1262,1259,1,0,0,0,1263,1264,1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,
0,1265,1267,1,0,0,0,1266,1249,1,0,0,0,1266,1258,1,0,0,0,1267,195,1,0,0,0,
1268,1269,7,12,0,0,1269,197,1,0,0,0,1270,1271,3,200,100,0,1271,1272,3,198,
99,0,1272,1285,1,0,0,0,1273,1285,3,208,104,0,1274,1285,3,210,105,0,1275,
1278,3,202,101,0,1276,1278,3,206,103,0,1277,1275,1,0,0,0,1277,1276,1,0,0,
0,1278,1279,1,0,0,0,1279,1280,5,34,0,0,1280,1285,1,0,0,0,1281,1282,3,216,
108,0,1282,1283,3,218,109,0,1283,1285,1,0,0,0,1284,1270,1,0,0,0,1284,1273,
1,0,0,0,1284,1274,1,0,0,0,1284,1277,1,0,0,0,1284,1281,1,0,0,0,1285,199,1,
0,0,0,1286,1290,3,202,101,0,1287,1290,3,204,102,0,1288,1290,3,206,103,0,
1289,1286,1,0,0,0,1289,1287,1,0,0,0,1289,1288,1,0,0,0,1290,201,1,0,0,0,1291,
1292,5,77,0,0,1292,203,1,0,0,0,1293,1294,5,82,0,0,1294,205,1,0,0,0,1295,
1296,5,28,0,0,1296,207,1,0,0,0,1297,1298,5,83,0,0,1298,1299,3,198,99,0,1299,
209,1,0,0,0,1300,1301,3,218,109,0,1301,1302,3,212,106,0,1302,1311,1,0,0,
0,1303,1307,3,112,56,0,1304,1306,3,214,107,0,1305,1304,1,0,0,0,1306,1309,
1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1311,1,0,0,0,1309,1307,
1,0,0,0,1310,1300,1,0,0,0,1310,1303,1,0,0,0,1311,211,1,0,0,0,1312,1313,3,
216,108,0,1313,213,1,0,0,0,1314,1317,3,222,111,0,1315,1317,3,156,78,0,1316,
1314,1,0,0,0,1316,1315,1,0,0,0,1317,215,1,0,0,0,1318,1319,7,13,0,0,1319,
217,1,0,0,0,1320,1328,3,112,56,0,1321,1323,3,156,78,0,1322,1321,1,0,0,0,
1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,1327,1,0,0,0,
1326,1324,1,0,0,0,1327,1329,3,222,111,0,1328,1324,1,0,0,0,1328,1329,1,0,
0,0,1329,1335,1,0,0,0,1330,1331,5,34,0,0,1331,1332,3,220,110,0,1332,1333,
3,224,112,0,1333,1335,1,0,0,0,1334,1320,1,0,0,0,1334,1330,1,0,0,0,1335,219,
1,0,0,0,1336,1337,5,16,0,0,1337,1338,3,106,53,0,1338,1339,5,17,0,0,1339,
1343,1,0,0,0,1340,1341,5,20,0,0,1341,1343,3,224,112,0,1342,1336,1,0,0,0,
1342,1340,1,0,0,0,1343,221,1,0,0,0,1344,1348,3,220,110,0,1345,1346,5,86,
0,0,1346,1348,3,224,112,0,1347,1344,1,0,0,0,1347,1345,1,0,0,0,1348,223,1,
0,0,0,1349,1350,5,124,0,0,1350,225,1,0,0,0,1351,1354,3,224,112,0,1352,1353,
5,20,0,0,1353,1355,3,224,112,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,
227,1,0,0,0,1356,1357,3,230,115,0,1357,1358,3,330,165,0,1358,229,1,0,0,0,
1359,1361,5,87,0,0,1360,1362,5,82,0,0,1361,1360,1,0,0,0,1361,1362,1,0,0,
0,1362,231,1,0,0,0,1363,1364,3,234,117,0,1364,1365,3,330,165,0,1365,233,
1,0,0,0,1366,1367,5,88,0,0,1367,235,1,0,0,0,1368,1370,3,238,119,0,1369,1368,
1,0,0,0,1370,1373,1,0,0,0,1371,1369,1,0,0,0,1371,1372,1,0,0,0,1372,237,1,
0,0,0,1373,1371,1,0,0,0,1374,1376,3,278,139,0,1375,1374,1,0,0,0,1376,1379,
1,0,0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,1377,
1,0,0,0,1380,1381,3,240,120,0,1381,239,1,0,0,0,1382,1400,3,24,12,0,1383,
1400,3,244,122,0,1384,1400,3,250,125,0,1385,1400,3,256,128,0,1386,1400,3,
258,129,0,1387,1400,3,260,130,0,1388,1400,3,248,124,0,1389,1400,3,266,133,
0,1390,1400,3,268,134,0,1391,1400,3,280,140,0,1392,1400,3,282,141,0,1393,
1400,3,276,138,0,1394,1400,3,284,142,0,1395,1400,3,286,143,0,1396,1400,3,
242,121,0,1397,1400,3,288,144,0,1398,1400,3,246,123,0,1399,1382,1,0,0,0,
1399,1383,1,0,0,0,1399,1384,1,0,0,0,1399,1385,1,0,0,0,1399,1386,1,0,0,0,
1399,1387,1,0,0,0,1399,1388,1,0,0,0,1399,1389,1,0,0,0,1399,1390,1,0,0,0,
1399,1391,1,0,0,0,1399,1392,1,0,0,0,1399,1393,1,0,0,0,1399,1394,1,0,0,0,
1399,1395,1,0,0,0,1399,1396,1,0,0,0,1399,1397,1,0,0,0,1399,1398,1,0,0,0,
1400,241,1,0,0,0,1401,1403,3,106,53,0,1402,1401,1,0,0,0,1402,1403,1,0,0,
0,1403,1404,1,0,0,0,1404,1405,5,9,0,0,1405,243,1,0,0,0,1406,1407,3,10,5,
0,1407,1408,5,9,0,0,1408,245,1,0,0,0,1409,1410,3,16,8,0,1410,1411,3,22,11,
0,1411,247,1,0,0,0,1412,1413,5,89,0,0,1413,1414,5,14,0,0,1414,1415,3,106,
53,0,1415,1416,5,15,0,0,1416,1419,3,238,119,0,1417,1418,5,90,0,0,1418,1420,
3,238,119,0,1419,1417,1,0,0,0,1419,1420,1,0,0,0,1420,249,1,0,0,0,1421,1423,
5,83,0,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1425,
5,91,0,0,1425,1426,5,14,0,0,1426,1427,3,252,126,0,1427,1428,5,15,0,0,1428,
1429,3,238,119,0,1429,251,1,0,0,0,1430,1432,3,254,127,0,1431,1433,3,106,
53,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1436,5,9,
0,0,1435,1437,3,110,55,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1447,1,
0,0,0,1438,1439,3,4,2,0,1439,1440,5,92,0,0,1440,1441,3,106,53,0,1441,1447,
1,0,0,0,1442,1443,3,224,112,0,1443,1444,5,92,0,0,1444,1445,3,106,53,0,1445,
1447,1,0,0,0,1446,1430,1,0,0,0,1446,1438,1,0,0,0,1446,1442,1,0,0,0,1447,
253,1,0,0,0,1448,1454,3,244,122,0,1449,1451,3,106,53,0,1450,1449,1,0,0,0,
1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1454,5,9,0,0,1453,1448,1,0,0,0,
1453,1450,1,0,0,0,1454,255,1,0,0,0,1455,1456,5,93,0,0,1456,1457,5,14,0,0,
1457,1458,3,106,53,0,1458,1459,5,15,0,0,1459,1460,3,238,119,0,1460,257,1,
0,0,0,1461,1462,5,94,0,0,1462,1463,3,238,119,0,1463,1464,5,93,0,0,1464,1465,
5,14,0,0,1465,1466,3,106,53,0,1466,1467,5,15,0,0,1467,1468,5,9,0,0,1468,
259,1,0,0,0,1469,1470,5,95,0,0,1470,1471,5,14,0,0,1471,1472,3,106,53,0,1472,
1473,5,15,0,0,1473,1477,5,12,0,0,1474,1476,3,262,131,0,1475,1474,1,0,0,0,
1476,1479,1,0,0,0,1477,1475,1,0,0,0,1477,1478,1,0,0,0,1478,1481,1,0,0,0,
1479,1477,1,0,0,0,1480,1482,3,264,132,0,1481,1480,1,0,0,0,1481,1482,1,0,
0,0,1482,1483,1,0,0,0,1483,1484,5,13,0,0,1484,261,1,0,0,0,1485,1487,3,278,
139,0,1486,1485,1,0,0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,
0,0,0,1489,1491,1,0,0,0,1490,1488,1,0,0,0,1491,1492,5,96,0,0,1492,1493,3,
106,53,0,1493,1494,5,21,0,0,1494,1495,3,236,118,0,1495,263,1,0,0,0,1496,
1498,3,278,139,0,1497,1496,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,0,0,0,1499,
1500,1,0,0,0,1500,1502,1,0,0,0,1501,1499,1,0,0,0,1502,1503,5,97,0,0,1503,
1504,5,21,0,0,1504,1505,3,236,118,0,1505,265,1,0,0,0,1506,1507,5,98,0,0,
1507,1508,5,9,0,0,1508,267,1,0,0,0,1509,1510,5,99,0,0,1510,1520,3,24,12,
0,1511,1513,3,270,135,0,1512,1511,1,0,0,0,1513,1514,1,0,0,0,1514,1512,1,
0,0,0,1514,1515,1,0,0,0,1515,1517,1,0,0,0,1516,1518,3,274,137,0,1517,1516,
1,0,0,0,1517,1518,1,0,0,0,1518,1521,1,0,0,0,1519,1521,3,274,137,0,1520,1512,
1,0,0,0,1520,1519,1,0,0,0,1521,269,1,0,0,0,1522,1523,3,272,136,0,1523,1524,
3,24,12,0,1524,1533,1,0,0,0,1525,1526,5,100,0,0,1526,1528,3,330,165,0,1527,
1529,3,272,136,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,
1531,3,24,12,0,1531,1533,1,0,0,0,1532,1522,1,0,0,0,1532,1525,1,0,0,0,1533,
271,1,0,0,0,1534,1535,5,101,0,0,1535,1536,5,14,0,0,1536,1539,3,224,112,0,
1537,1538,5,1,0,0,1538,1540,3,224,112,0,1539,1537,1,0,0,0,1539,1540,1,0,
0,0,1540,1541,1,0,0,0,1541,1542,5,15,0,0,1542,273,1,0,0,0,1543,1544,5,102,
0,0,1544,1545,3,24,12,0,1545,275,1,0,0,0,1546,1548,5,103,0,0,1547,1549,3,
106,53,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,1550,1551,
5,9,0,0,1551,277,1,0,0,0,1552,1553,3,224,112,0,1553,1554,5,21,0,0,1554,279,
1,0,0,0,1555,1557,5,104,0,0,1556,1558,3,224,112,0,1557,1556,1,0,0,0,1557,
1558,1,0,0,0,1558,1559,1,0,0,0,1559,1560,5,9,0,0,1560,281,1,0,0,0,1561,1563,
5,105,0,0,1562,1564,3,224,112,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,
1565,1,0,0,0,1565,1566,5,9,0,0,1566,283,1,0,0,0,1567,1568,5,106,0,0,1568,
1569,3,106,53,0,1569,1570,5,9,0,0,1570,285,1,0,0,0,1571,1572,5,107,0,0,1572,
1573,3,106,53,0,1573,1574,5,9,0,0,1574,287,1,0,0,0,1575,1576,3,290,145,0,
1576,1577,5,9,0,0,1577,289,1,0,0,0,1578,1579,5,108,0,0,1579,1580,5,14,0,
0,1580,1583,3,106,53,0,1581,1582,5,1,0,0,1582,1584,3,106,53,0,1583,1581,
1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,1587,5,1,0,0,1586,1585,
1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1589,5,15,0,0,1589,291,
1,0,0,0,1590,1640,3,48,24,0,1591,1640,3,96,48,0,1592,1640,3,338,169,0,1593,
1595,5,26,0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,
1597,3,16,8,0,1597,1598,5,9,0,0,1598,1640,1,0,0,0,1599,1601,5,26,0,0,1600,
1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,1602,1603,3,68,34,0,1603,
1604,5,9,0,0,1604,1640,1,0,0,0,1605,1607,5,26,0,0,1606,1605,1,0,0,0,1606,
1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,3,70,35,0,1609,1610,5,9,0,0,1610,
1640,1,0,0,0,1611,1612,3,16,8,0,1612,1613,3,22,11,0,1613,1640,1,0,0,0,1614,
1616,3,20,10,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,
1618,5,32,0,0,1618,1619,3,224,112,0,1619,1620,3,22,11,0,1620,1640,1,0,0,
0,1621,1623,3,20,10,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1624,1,0,
0,0,1624,1625,5,33,0,0,1625,1626,3,224,112,0,1626,1627,3,26,13,0,1627,1628,
3,22,11,0,1628,1640,1,0,0,0,1629,1631,7,1,0,0,1630,1632,3,330,165,0,1631,
1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1634,3,58,29,0,1634,
1635,5,9,0,0,1635,1640,1,0,0,0,1636,1637,3,2,1,0,1637,1638,5,9,0,0,1638,
1640,1,0,0,0,1639,1590,1,0,0,0,1639,1591,1,0,0,0,1639,1592,1,0,0,0,1639,
1594,1,0,0,0,1639,1600,1,0,0,0,1639,1606,1,0,0,0,1639,1611,1,0,0,0,1639,
1615,1,0,0,0,1639,1622,1,0,0,0,1639,1629,1,0,0,0,1639,1636,1,0,0,0,1640,
293,1,0,0,0,1641,1642,7,14,0,0,1642,295,1,0,0,0,1643,1645,3,298,149,0,1644,
1643,1,0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1648,3,300,150,0,1647,
1646,1,0,0,0,1647,1648,1,0,0,0,1648,1652,1,0,0,0,1649,1651,3,302,151,0,1650,
1649,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,0,0,0,1652,1653,1,0,0,0,1653,
1658,1,0,0,0,1654,1652,1,0,0,0,1655,1657,3,316,158,0,1656,1655,1,0,0,0,1657,
1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,1664,1,0,0,0,1660,
1658,1,0,0,0,1661,1663,3,292,146,0,1662,1661,1,0,0,0,1663,1666,1,0,0,0,1664,
1662,1,0,0,0,1664,1665,1,0,0,0,1665,297,1,0,0,0,1666,1664,1,0,0,0,1667,1671,
5,109,0,0,1668,1670,8,15,0,0,1669,1668,1,0,0,0,1670,1673,1,0,0,0,1671,1669,
1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1671,1,0,0,0,1674,1675,
5,123,0,0,1675,299,1,0,0,0,1676,1677,3,104,52,0,1677,1678,5,110,0,0,1678,
1679,3,304,152,0,1679,1680,5,9,0,0,1680,301,1,0,0,0,1681,1684,3,306,153,
0,1682,1684,3,314,157,0,1683,1681,1,0,0,0,1683,1682,1,0,0,0,1684,303,1,0,
0,0,1685,1690,3,224,112,0,1686,1687,5,1,0,0,1687,1689,3,224,112,0,1688,1686,
1,0,0,0,1689,1692,1,0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,305,1,
0,0,0,1692,1690,1,0,0,0,1693,1694,3,104,52,0,1694,1695,3,308,154,0,1695,
307,1,0,0,0,1696,1697,5,111,0,0,1697,1700,3,324,162,0,1698,1699,5,88,0,0,
1699,1701,3,224,112,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,1705,1,0,
0,0,1702,1704,3,310,155,0,1703,1702,1,0,0,0,1704,1707,1,0,0,0,1705,1703,
1,0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,1705,1,0,0,0,1708,1709,
5,9,0,0,1709,309,1,0,0,0,1710,1711,5,112,0,0,1711,1715,3,312,156,0,1712,
1713,5,113,0,0,1713,1715,3,312,156,0,1714,1710,1,0,0,0,1714,1712,1,0,0,0,
1715,311,1,0,0,0,1716,1721,3,224,112,0,1717,1718,5,1,0,0,1718,1720,3,224,
112,0,1719,1717,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,1,
0,0,0,1722,313,1,0,0,0,1723,1721,1,0,0,0,1724,1725,3,104,52,0,1725,1726,
5,114,0,0,1726,1730,3,324,162,0,1727,1729,3,310,155,0,1728,1727,1,0,0,0,
1729,1732,1,0,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,
1732,1730,1,0,0,0,1733,1734,5,9,0,0,1734,315,1,0,0,0,1735,1736,3,104,52,
0,1736,1737,5,115,0,0,1737,1738,3,322,161,0,1738,1739,5,9,0,0,1739,317,1,
0,0,0,1740,1741,3,104,52,0,1741,1742,5,115,0,0,1742,1743,5,116,0,0,1743,
1748,3,224,112,0,1744,1745,5,20,0,0,1745,1747,3,224,112,0,1746,1744,1,0,
0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,1751,1,0,
0,0,1750,1748,1,0,0,0,1751,1752,5,9,0,0,1752,319,1,0,0,0,1753,1757,3,318,
159,0,1754,1756,3,292,146,0,1755,1754,1,0,0,0,1756,1759,1,0,0,0,1757,1755,
1,0,0,0,1757,1758,1,0,0,0,1758,1760,1,0,0,0,1759,1757,1,0,0,0,1760,1761,
5,0,0,1,1761,321,1,0,0,0,1762,1763,3,122,61,0,1763,323,1,0,0,0,1764,1768,
3,322,161,0,1765,1767,3,326,163,0,1766,1765,1,0,0,0,1767,1770,1,0,0,0,1768,
1766,1,0,0,0,1768,1769,1,0,0,0,1769,325,1,0,0,0,1770,1768,1,0,0,0,1771,1772,
5,89,0,0,1772,1773,5,14,0,0,1773,1774,3,328,164,0,1774,1775,5,15,0,0,1775,
1776,3,322,161,0,1776,327,1,0,0,0,1777,1780,3,304,152,0,1778,1779,5,31,0,
0,1779,1781,3,122,61,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,329,1,0,
0,0,1782,1784,3,332,166,0,1783,1785,3,334,167,0,1784,1783,1,0,0,0,1784,1785,
1,0,0,0,1785,331,1,0,0,0,1786,1789,3,226,113,0,1787,1789,5,6,0,0,1788,1786,
1,0,0,0,1788,1787,1,0,0,0,1789,333,1,0,0,0,1790,1791,5,39,0,0,1791,1792,
3,336,168,0,1792,1793,5,40,0,0,1793,335,1,0,0,0,1794,1799,3,330,165,0,1795,
1796,5,1,0,0,1796,1798,3,330,165,0,1797,1795,1,0,0,0,1798,1801,1,0,0,0,1799,
1797,1,0,0,0,1799,1800,1,0,0,0,1800,337,1,0,0,0,1801,1799,1,0,0,0,1802,1803,
3,104,52,0,1803,1804,5,117,0,0,1804,1805,3,340,170,0,1805,339,1,0,0,0,1806,
1807,3,342,171,0,1807,341,1,0,0,0,1808,1810,3,344,172,0,1809,1811,3,102,
51,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1813,3,26,
13,0,1813,1814,5,9,0,0,1814,343,1,0,0,0,1815,1817,3,20,10,0,1816,1815,1,
0,0,0,1816,1817,1,0,0,0,1817,1818,1,0,0,0,1818,1819,3,224,112,0,1819,345,
1,0,0,0,215,348,355,364,368,371,375,380,386,392,399,404,410,416,419,426,
429,445,453,460,465,473,477,487,491,498,502,505,513,517,521,527,532,537,
542,544,548,553,556,559,562,570,577,582,593,597,601,605,609,613,618,623,
631,633,638,640,644,649,651,657,662,666,670,673,680,688,698,706,709,715,
724,732,742,754,758,766,773,778,784,791,805,814,825,829,840,848,857,860,
864,875,879,887,894,909,918,929,937,946,949,952,955,960,962,967,970,978,
982,984,1007,1015,1022,1024,1033,1041,1044,1054,1061,1066,1072,1079,1082,
1088,1098,1105,1113,1121,1128,1134,1144,1150,1159,1167,1169,1176,1184,1186,
1193,1201,1203,1213,1222,1224,1234,1243,1245,1255,1264,1266,1277,1284,1289,
1307,1310,1316,1324,1328,1334,1342,1347,1354,1361,1371,1377,1399,1402,1419,
1422,1432,1436,1446,1450,1453,1477,1481,1488,1499,1514,1517,1520,1528,1532,
1539,1548,1557,1563,1583,1586,1594,1600,1606,1615,1622,1631,1639,1644,1647,
1652,1658,1664,1671,1683,1690,1700,1705,1714,1721,1730,1748,1757,1768,1780,
1784,1788,1799,1810,1816];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Dart2Parser extends antlr4.Parser {

    static grammarFileName = "Dart2.g4";
    static literalNames = [ null, "','", "'final'", "'const'", "'var'", 
                            "'='", "'void'", "'async'", "'=>'", "';'", "'async*'", 
                            "'sync*'", "'{'", "'}'", "'('", "')'", "'['", 
                            "']'", "'covariant'", "'this'", "'.'", "':'", 
                            "'abstract'", "'class'", "'with'", "'static'", 
                            "'external'", "'operator'", "'~'", "'[]'", "'[]='", 
                            "'=='", "'get'", "'set'", "'super'", "'factory'", 
                            "'extends'", "'implements'", "'enum'", "'<'", 
                            "'>'", "'@'", "'null'", "'true'", "'false'", 
                            "'$'", "'${'", "'#'", "'throw'", "'new'", "'..'", 
                            "'*='", "'/='", "'~/='", "'%='", "'+='", "'<<='", 
                            "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'??='", 
                            "'?'", "'??'", "'||'", "'&&'", "'!='", "'>='", 
                            "'<='", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                            "'>>>'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                            "'~/'", "'!'", "'await'", "'++'", "'--'", "'?.'", 
                            "'is'", "'as'", "'if'", "'else'", "'for'", "'in'", 
                            "'while'", "'do'", "'switch'", "'case'", "'default'", 
                            "'rethrow'", "'try'", "'on'", "'catch'", "'finally'", 
                            "'return'", "'break'", "'continue'", "'yield'", 
                            "'yield*'", "'assert'", "'#!'", "'library'", 
                            "'import'", "'show'", "'hide'", "'export'", 
                            "'part'", "'of'", "'typedef'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, "WHITESPACE", 
                             "NUMBER", "HEX_NUMBER", "SingleLineString", 
                             "MultiLineString", "NEWLINE", "IDENTIFIER", 
                             "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT" ];
    static ruleNames = [ "compilationUnit", "variableDeclaration", "declaredIdentifier", 
                         "finalConstVarOrType", "varOrType", "initializedVariableDeclaration", 
                         "initializedIdentifier", "initializedIdentifierList", 
                         "functionSignature", "formalParameterPart", "returnType", 
                         "functionBody", "block", "formalParameterList", 
                         "normalFormalParameters", "optionalFormalParameters", 
                         "optionalPositionalFormalParameters", "namedFormalParameters", 
                         "normalFormalParameter", "functionFormalParameter", 
                         "simpleFormalParameter", "fieldFormalParameter", 
                         "defaultFormalParameter", "defaultNamedParameter", 
                         "classDefinition", "mixins", "classMemberDefinition", 
                         "methodSignature", "declaration", "staticFinalDeclarationList", 
                         "staticFinalDeclaration", "operatorSignature", 
                         "operator_", "binaryOperator", "getterSignature", 
                         "setterSignature", "constructorSignature", "redirection", 
                         "initializers", "initializerListEntry", "fieldInitializer", 
                         "factoryConstructorSignature", "redirectingFactoryConstructorSignature", 
                         "constantConstructorSignature", "superclass", "interfaces", 
                         "mixinApplicationClass", "mixinApplication", "enumType", 
                         "enumEntry", "typeParameter", "typeParameters", 
                         "metadata", "expression", "expressionWithoutCascade", 
                         "expressionList", "primary", "literal", "nullLiteral", 
                         "numericLiteral", "booleanLiteral", "stringLiteral", 
                         "stringInterpolation", "symbolLiteral", "listLiteral", 
                         "mapLiteral", "mapLiteralEntry", "throwExpression", 
                         "throwExpressionWithoutCascade", "functionExpression", 
                         "thisExpression", "nayaExpression", "constObjectExpression", 
                         "arguments", "argumentList", "namedArgument", "cascadeSection", 
                         "cascadeSelector", "argumentPart", "assignmentOperator", 
                         "compoundAssignmentOperator", "conditionalExpression", 
                         "ifNullExpression", "logicalOrExpression", "logicalAndExpression", 
                         "equalityExpression", "equalityOperator", "relationalExpression", 
                         "relationalOperator", "bitwiseOrExpression", "bitwiseXorExpression", 
                         "bitwiseAndExpression", "bitwiseOperator", "shiftExpression", 
                         "shiftOperator", "additiveExpression", "additiveOperator", 
                         "multiplicativeExpression", "multiplicativeOperator", 
                         "unaryExpression", "prefixOperator", "minusOperator", 
                         "negationOperator", "tildeOperator", "awaitExpression", 
                         "postfixExpression", "postfixOperator", "selector", 
                         "incrementOperator", "assignableExpression", "unconditionalAssignableSelector", 
                         "assignableSelector", "identifier", "qualified", 
                         "typeTest", "isOperator", "typeCast", "asOperator", 
                         "statements", "statement", "nonLabledStatment", 
                         "expressionStatement", "localVariableDeclaration", 
                         "localFunctionDeclaration", "ifStatement", "forStatement", 
                         "forLoopParts", "forInitializerStatement", "whileStatement", 
                         "doStatement", "switchStatement", "switchCase", 
                         "defaultCase", "rethrowStatment", "tryStatement", 
                         "onPart", "catchPart", "finallyPart", "returnStatement", 
                         "label", "breakStatement", "continueStatement", 
                         "yieldStatement", "yieldEachStatement", "assertStatement", 
                         "assertion", "topLevelDefinition", "getOrSet", 
                         "libraryDefinition", "scriptTag", "libraryName", 
                         "importOrExport", "dottedIdentifierList", "libraryimport", 
                         "importSpecification", "combinator", "identifierList", 
                         "libraryExport", "partDirective", "partHeader", 
                         "partDeclaration", "uri", "configurableUri", "configurationUri", 
                         "uriTest", "dtype", "typeName", "typeArguments", 
                         "typeList", "typeAlias", "typeAliasBody", "functionTypeAlias", 
                         "functionPrefix" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Dart2Parser.ruleNames;
        this.literalNames = Dart2Parser.literalNames;
        this.symbolicNames = Dart2Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Dart2Parser.RULE_compilationUnit);
	    try {
	        this.state = 348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 346;
	            this.libraryDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 347;
	            this.partDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Dart2Parser.RULE_variableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.declaredIdentifier();
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 351;
	            this.match(Dart2Parser.T__0);
	            this.state = 352;
	            this.identifier();
	            this.state = 357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaredIdentifier() {
	    let localctx = new DeclaredIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Dart2Parser.RULE_declaredIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        this.metadata();
	        this.state = 359;
	        this.finalConstVarOrType();
	        this.state = 360;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finalConstVarOrType() {
	    let localctx = new FinalConstVarOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Dart2Parser.RULE_finalConstVarOrType);
	    try {
	        this.state = 371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 362;
	            this.match(Dart2Parser.T__1);
	            this.state = 364;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	            if(la_===1) {
	                this.state = 363;
	                this.dtype();

	            }
	            break;
	        case Dart2Parser.T__2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 366;
	            this.match(Dart2Parser.T__2);
	            this.state = 368;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            if(la_===1) {
	                this.state = 367;
	                this.dtype();

	            }
	            break;
	        case Dart2Parser.T__3:
	        case Dart2Parser.T__5:
	        case Dart2Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 370;
	            this.varOrType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrType() {
	    let localctx = new VarOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Dart2Parser.RULE_varOrType);
	    try {
	        this.state = 375;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 373;
	            this.match(Dart2Parser.T__3);
	            break;
	        case Dart2Parser.T__5:
	        case Dart2Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 374;
	            this.dtype();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedVariableDeclaration() {
	    let localctx = new InitializedVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Dart2Parser.RULE_initializedVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 377;
	        this.declaredIdentifier();
	        this.state = 380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__4) {
	            this.state = 378;
	            this.match(Dart2Parser.T__4);
	            this.state = 379;
	            this.expression();
	        }

	        this.state = 386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 382;
	            this.match(Dart2Parser.T__0);
	            this.state = 383;
	            this.initializedIdentifier();
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedIdentifier() {
	    let localctx = new InitializedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Dart2Parser.RULE_initializedIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this.identifier();
	        this.state = 392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__4) {
	            this.state = 390;
	            this.match(Dart2Parser.T__4);
	            this.state = 391;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedIdentifierList() {
	    let localctx = new InitializedIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Dart2Parser.RULE_initializedIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.initializedIdentifier();
	        this.state = 399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 395;
	            this.match(Dart2Parser.T__0);
	            this.state = 396;
	            this.initializedIdentifier();
	            this.state = 401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSignature() {
	    let localctx = new FunctionSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Dart2Parser.RULE_functionSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.metadata();
	        this.state = 404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 403;
	            this.returnType();

	        }
	        this.state = 406;
	        this.identifier();
	        this.state = 407;
	        this.formalParameterPart();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterPart() {
	    let localctx = new FormalParameterPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Dart2Parser.RULE_formalParameterPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 409;
	            this.typeParameters();
	        }

	        this.state = 412;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnType() {
	    let localctx = new ReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Dart2Parser.RULE_returnType);
	    try {
	        this.state = 416;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 414;
	            this.match(Dart2Parser.T__5);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 415;
	            this.dtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Dart2Parser.RULE_functionBody);
	    var _la = 0; // Token type
	    try {
	        this.state = 429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__6) {
	                this.state = 418;
	                this.match(Dart2Parser.T__6);
	            }

	            this.state = 421;
	            this.match(Dart2Parser.T__7);
	            this.state = 422;
	            this.expression();
	            this.state = 423;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__6) | (1 << Dart2Parser.T__9) | (1 << Dart2Parser.T__10))) !== 0)) {
	                this.state = 425;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__6) | (1 << Dart2Parser.T__9) | (1 << Dart2Parser.T__10))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 428;
	            this.block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Dart2Parser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.match(Dart2Parser.T__11);
	        this.state = 432;
	        this.statements();
	        this.state = 433;
	        this.match(Dart2Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Dart2Parser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 435;
	            this.match(Dart2Parser.T__13);
	            this.state = 436;
	            this.match(Dart2Parser.T__14);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 437;
	            this.match(Dart2Parser.T__13);
	            this.state = 438;
	            this.normalFormalParameters();
	            this.state = 439;
	            this.match(Dart2Parser.T__14);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 441;
	            this.match(Dart2Parser.T__13);
	            this.state = 442;
	            this.normalFormalParameters();
	            this.state = 445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__0) {
	                this.state = 443;
	                this.match(Dart2Parser.T__0);
	                this.state = 444;
	                this.optionalFormalParameters();
	            }

	            this.state = 447;
	            this.match(Dart2Parser.T__14);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 449;
	            this.match(Dart2Parser.T__13);
	            this.state = 450;
	            this.optionalFormalParameters();
	            this.state = 451;
	            this.match(Dart2Parser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalFormalParameters() {
	    let localctx = new NormalFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Dart2Parser.RULE_normalFormalParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.normalFormalParameter();
	        this.state = 460;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 456;
	                this.match(Dart2Parser.T__0);
	                this.state = 457;
	                this.normalFormalParameter(); 
	            }
	            this.state = 462;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalFormalParameters() {
	    let localctx = new OptionalFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Dart2Parser.RULE_optionalFormalParameters);
	    try {
	        this.state = 465;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 463;
	            this.optionalPositionalFormalParameters();
	            break;
	        case Dart2Parser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 464;
	            this.namedFormalParameters();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalPositionalFormalParameters() {
	    let localctx = new OptionalPositionalFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Dart2Parser.RULE_optionalPositionalFormalParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.match(Dart2Parser.T__15);
	        this.state = 468;
	        this.defaultFormalParameter();
	        this.state = 473;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 469;
	                this.match(Dart2Parser.T__0);
	                this.state = 470;
	                this.defaultFormalParameter(); 
	            }
	            this.state = 475;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__0) {
	            this.state = 476;
	            this.match(Dart2Parser.T__0);
	        }

	        this.state = 479;
	        this.match(Dart2Parser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedFormalParameters() {
	    let localctx = new NamedFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Dart2Parser.RULE_namedFormalParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.match(Dart2Parser.T__11);
	        this.state = 482;
	        this.defaultNamedParameter();
	        this.state = 487;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 483;
	                this.match(Dart2Parser.T__0);
	                this.state = 484;
	                this.defaultNamedParameter(); 
	            }
	            this.state = 489;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	        this.state = 491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__0) {
	            this.state = 490;
	            this.match(Dart2Parser.T__0);
	        }

	        this.state = 493;
	        this.match(Dart2Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalFormalParameter() {
	    let localctx = new NormalFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Dart2Parser.RULE_normalFormalParameter);
	    try {
	        this.state = 498;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 495;
	            this.functionFormalParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 496;
	            this.fieldFormalParameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 497;
	            this.simpleFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionFormalParameter() {
	    let localctx = new FunctionFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Dart2Parser.RULE_functionFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.metadata();
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__17) {
	            this.state = 501;
	            this.match(Dart2Parser.T__17);
	        }

	        this.state = 505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 504;
	            this.returnType();

	        }
	        this.state = 507;
	        this.identifier();
	        this.state = 508;
	        this.formalParameterPart();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFormalParameter() {
	    let localctx = new SimpleFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Dart2Parser.RULE_simpleFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.state = 517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 510;
	            this.declaredIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 511;
	            this.metadata();
	            this.state = 513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__17) {
	                this.state = 512;
	                this.match(Dart2Parser.T__17);
	            }

	            this.state = 515;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldFormalParameter() {
	    let localctx = new FieldFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Dart2Parser.RULE_fieldFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.metadata();
	        this.state = 521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__1) | (1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__3) | (1 << Dart2Parser.T__5))) !== 0) || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 520;
	            this.finalConstVarOrType();
	        }

	        this.state = 523;
	        this.match(Dart2Parser.T__18);
	        this.state = 524;
	        this.match(Dart2Parser.T__19);
	        this.state = 525;
	        this.identifier();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__13 || _la===Dart2Parser.T__38) {
	            this.state = 526;
	            this.formalParameterPart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultFormalParameter() {
	    let localctx = new DefaultFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Dart2Parser.RULE_defaultFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.normalFormalParameter();
	        this.state = 532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__4) {
	            this.state = 530;
	            this.match(Dart2Parser.T__4);
	            this.state = 531;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultNamedParameter() {
	    let localctx = new DefaultNamedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Dart2Parser.RULE_defaultNamedParameter);
	    var _la = 0; // Token type
	    try {
	        this.state = 544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 534;
	            this.normalFormalParameter();
	            this.state = 537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__4) {
	                this.state = 535;
	                this.match(Dart2Parser.T__4);
	                this.state = 536;
	                this.expression();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 539;
	            this.normalFormalParameter();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__20) {
	                this.state = 540;
	                this.match(Dart2Parser.T__20);
	                this.state = 541;
	                this.expression();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDefinition() {
	    let localctx = new ClassDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Dart2Parser.RULE_classDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 546;
	            this.metadata();
	            this.state = 548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__21) {
	                this.state = 547;
	                this.match(Dart2Parser.T__21);
	            }

	            this.state = 550;
	            this.match(Dart2Parser.T__22);
	            this.state = 551;
	            this.identifier();
	            this.state = 553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__38) {
	                this.state = 552;
	                this.typeParameters();
	            }

	            this.state = 556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__35) {
	                this.state = 555;
	                this.superclass();
	            }

	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__23) {
	                this.state = 558;
	                this.mixins();
	            }

	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__36) {
	                this.state = 561;
	                this.interfaces();
	            }

	            this.state = 564;
	            this.match(Dart2Parser.T__11);
	            this.state = 570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__1) | (1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__3) | (1 << Dart2Parser.T__5) | (1 << Dart2Parser.T__17) | (1 << Dart2Parser.T__24) | (1 << Dart2Parser.T__25) | (1 << Dart2Parser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Dart2Parser.T__31 - 32)) | (1 << (Dart2Parser.T__32 - 32)) | (1 << (Dart2Parser.T__34 - 32)) | (1 << (Dart2Parser.T__40 - 32)))) !== 0) || _la===Dart2Parser.IDENTIFIER) {
	                this.state = 565;
	                this.metadata();
	                this.state = 566;
	                this.classMemberDefinition();
	                this.state = 572;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 573;
	            this.match(Dart2Parser.T__12);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            this.metadata();
	            this.state = 577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__21) {
	                this.state = 576;
	                this.match(Dart2Parser.T__21);
	            }

	            this.state = 579;
	            this.match(Dart2Parser.T__22);
	            this.state = 580;
	            this.mixinApplicationClass();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixins() {
	    let localctx = new MixinsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Dart2Parser.RULE_mixins);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(Dart2Parser.T__23);
	        this.state = 585;
	        this.typeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDefinition() {
	    let localctx = new ClassMemberDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Dart2Parser.RULE_classMemberDefinition);
	    try {
	        this.state = 593;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 587;
	            this.declaration();
	            this.state = 588;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 590;
	            this.methodSignature();
	            this.state = 591;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodSignature() {
	    let localctx = new MethodSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Dart2Parser.RULE_methodSignature);
	    var _la = 0; // Token type
	    try {
	        this.state = 613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 595;
	            this.constructorSignature();
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__20) {
	                this.state = 596;
	                this.initializers();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 599;
	            this.factoryConstructorSignature();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__24) {
	                this.state = 600;
	                this.match(Dart2Parser.T__24);
	            }

	            this.state = 603;
	            this.functionSignature();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__24) {
	                this.state = 604;
	                this.match(Dart2Parser.T__24);
	            }

	            this.state = 607;
	            this.getterSignature();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__24) {
	                this.state = 608;
	                this.match(Dart2Parser.T__24);
	            }

	            this.state = 611;
	            this.setterSignature();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 612;
	            this.operatorSignature();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Dart2Parser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 615;
	            this.constantConstructorSignature();
	            this.state = 618;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	            if(la_===1) {
	                this.state = 616;
	                this.redirection();

	            } else if(la_===2) {
	                this.state = 617;
	                this.initializers();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 620;
	            this.constructorSignature();
	            this.state = 623;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	            if(la_===1) {
	                this.state = 621;
	                this.redirection();

	            } else if(la_===2) {
	                this.state = 622;
	                this.initializers();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 625;
	            this.match(Dart2Parser.T__25);
	            this.state = 626;
	            this.constantConstructorSignature();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 627;
	            this.match(Dart2Parser.T__25);
	            this.state = 628;
	            this.constructorSignature();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 629;
	                this.match(Dart2Parser.T__25);
	                this.state = 631;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Dart2Parser.T__24) {
	                    this.state = 630;
	                    this.match(Dart2Parser.T__24);
	                }

	            }

	            this.state = 635;
	            this.getterSignature();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 636;
	                this.match(Dart2Parser.T__25);
	                this.state = 638;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Dart2Parser.T__24) {
	                    this.state = 637;
	                    this.match(Dart2Parser.T__24);
	                }

	            }

	            this.state = 642;
	            this.setterSignature();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 643;
	                this.match(Dart2Parser.T__25);
	            }

	            this.state = 646;
	            this.operatorSignature();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 647;
	                this.match(Dart2Parser.T__25);
	                this.state = 649;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Dart2Parser.T__24) {
	                    this.state = 648;
	                    this.match(Dart2Parser.T__24);
	                }

	            }

	            this.state = 653;
	            this.functionSignature();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 654;
	            this.match(Dart2Parser.T__24);
	            this.state = 655;
	            _la = this._input.LA(1);
	            if(!(_la===Dart2Parser.T__1 || _la===Dart2Parser.T__2)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            if(la_===1) {
	                this.state = 656;
	                this.dtype();

	            }
	            this.state = 659;
	            this.staticFinalDeclarationList();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 660;
	            this.match(Dart2Parser.T__1);
	            this.state = 662;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 661;
	                this.dtype();

	            }
	            this.state = 664;
	            this.initializedIdentifierList();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__17 || _la===Dart2Parser.T__24) {
	                this.state = 665;
	                _la = this._input.LA(1);
	                if(!(_la===Dart2Parser.T__17 || _la===Dart2Parser.T__24)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 670;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Dart2Parser.T__3:
	                this.state = 668;
	                this.match(Dart2Parser.T__3);
	                break;
	            case Dart2Parser.T__5:
	            case Dart2Parser.IDENTIFIER:
	                this.state = 669;
	                this.dtype();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 672;
	            this.initializedIdentifierList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticFinalDeclarationList() {
	    let localctx = new StaticFinalDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Dart2Parser.RULE_staticFinalDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 675;
	        this.staticFinalDeclaration();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 676;
	            this.match(Dart2Parser.T__0);
	            this.state = 677;
	            this.staticFinalDeclaration();
	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticFinalDeclaration() {
	    let localctx = new StaticFinalDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Dart2Parser.RULE_staticFinalDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.identifier();
	        this.state = 684;
	        this.match(Dart2Parser.T__4);
	        this.state = 685;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorSignature() {
	    let localctx = new OperatorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Dart2Parser.RULE_operatorSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__5 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 687;
	            this.returnType();
	        }

	        this.state = 690;
	        this.match(Dart2Parser.T__26);
	        this.state = 691;
	        this.operator_();
	        this.state = 692;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_() {
	    let localctx = new Operator_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Dart2Parser.RULE_operator_);
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 694;
	            this.match(Dart2Parser.T__27);
	            break;
	        case Dart2Parser.T__30:
	        case Dart2Parser.T__38:
	        case Dart2Parser.T__39:
	        case Dart2Parser.T__67:
	        case Dart2Parser.T__68:
	        case Dart2Parser.T__69:
	        case Dart2Parser.T__70:
	        case Dart2Parser.T__71:
	        case Dart2Parser.T__72:
	        case Dart2Parser.T__73:
	        case Dart2Parser.T__74:
	        case Dart2Parser.T__75:
	        case Dart2Parser.T__76:
	        case Dart2Parser.T__77:
	        case Dart2Parser.T__78:
	        case Dart2Parser.T__79:
	        case Dart2Parser.T__80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 695;
	            this.binaryOperator();
	            break;
	        case Dart2Parser.T__28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 696;
	            this.match(Dart2Parser.T__28);
	            break;
	        case Dart2Parser.T__29:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 697;
	            this.match(Dart2Parser.T__29);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryOperator() {
	    let localctx = new BinaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Dart2Parser.RULE_binaryOperator);
	    try {
	        this.state = 706;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__77:
	        case Dart2Parser.T__78:
	        case Dart2Parser.T__79:
	        case Dart2Parser.T__80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 700;
	            this.multiplicativeOperator();
	            break;
	        case Dart2Parser.T__75:
	        case Dart2Parser.T__76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 701;
	            this.additiveOperator();
	            break;
	        case Dart2Parser.T__72:
	        case Dart2Parser.T__73:
	        case Dart2Parser.T__74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 702;
	            this.shiftOperator();
	            break;
	        case Dart2Parser.T__38:
	        case Dart2Parser.T__39:
	        case Dart2Parser.T__67:
	        case Dart2Parser.T__68:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 703;
	            this.relationalOperator();
	            break;
	        case Dart2Parser.T__30:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 704;
	            this.match(Dart2Parser.T__30);
	            break;
	        case Dart2Parser.T__69:
	        case Dart2Parser.T__70:
	        case Dart2Parser.T__71:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 705;
	            this.bitwiseOperator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getterSignature() {
	    let localctx = new GetterSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Dart2Parser.RULE_getterSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__5 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 708;
	            this.returnType();
	        }

	        this.state = 711;
	        this.match(Dart2Parser.T__31);
	        this.state = 712;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setterSignature() {
	    let localctx = new SetterSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Dart2Parser.RULE_setterSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__5 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 714;
	            this.returnType();
	        }

	        this.state = 717;
	        this.match(Dart2Parser.T__32);
	        this.state = 718;
	        this.identifier();
	        this.state = 719;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorSignature() {
	    let localctx = new ConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Dart2Parser.RULE_constructorSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.identifier();
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 722;
	            this.match(Dart2Parser.T__19);
	            this.state = 723;
	            this.identifier();
	        }

	        this.state = 726;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redirection() {
	    let localctx = new RedirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Dart2Parser.RULE_redirection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.match(Dart2Parser.T__20);
	        this.state = 729;
	        this.match(Dart2Parser.T__18);
	        this.state = 732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 730;
	            this.match(Dart2Parser.T__19);
	            this.state = 731;
	            this.identifier();
	        }

	        this.state = 734;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializers() {
	    let localctx = new InitializersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Dart2Parser.RULE_initializers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(Dart2Parser.T__20);
	        this.state = 737;
	        this.initializerListEntry();
	        this.state = 742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 738;
	            this.match(Dart2Parser.T__0);
	            this.state = 739;
	            this.initializerListEntry();
	            this.state = 744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerListEntry() {
	    let localctx = new InitializerListEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Dart2Parser.RULE_initializerListEntry);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 745;
	            this.match(Dart2Parser.T__33);
	            this.state = 746;
	            this.arguments();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 747;
	            this.match(Dart2Parser.T__33);
	            this.state = 748;
	            this.match(Dart2Parser.T__19);
	            this.state = 749;
	            this.identifier();
	            this.state = 750;
	            this.arguments();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 752;
	            this.fieldInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 753;
	            this.assertion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldInitializer() {
	    let localctx = new FieldInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Dart2Parser.RULE_fieldInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__18) {
	            this.state = 756;
	            this.match(Dart2Parser.T__18);
	            this.state = 757;
	            this.match(Dart2Parser.T__19);
	        }

	        this.state = 760;
	        this.identifier();
	        this.state = 761;
	        this.match(Dart2Parser.T__4);
	        this.state = 762;
	        this.conditionalExpression();
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__49) {
	            this.state = 763;
	            this.cascadeSection();
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factoryConstructorSignature() {
	    let localctx = new FactoryConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Dart2Parser.RULE_factoryConstructorSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this.match(Dart2Parser.T__34);
	        this.state = 770;
	        this.identifier();
	        this.state = 773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 771;
	            this.match(Dart2Parser.T__19);
	            this.state = 772;
	            this.identifier();
	        }

	        this.state = 775;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redirectingFactoryConstructorSignature() {
	    let localctx = new RedirectingFactoryConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Dart2Parser.RULE_redirectingFactoryConstructorSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__2) {
	            this.state = 777;
	            this.match(Dart2Parser.T__2);
	        }

	        this.state = 780;
	        this.match(Dart2Parser.T__34);
	        this.state = 781;
	        this.identifier();
	        this.state = 784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 782;
	            this.match(Dart2Parser.T__19);
	            this.state = 783;
	            this.identifier();
	        }

	        this.state = 786;
	        this.formalParameterList();
	        this.state = 787;
	        this.match(Dart2Parser.T__4);
	        this.state = 788;
	        this.dtype();
	        this.state = 791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 789;
	            this.match(Dart2Parser.T__19);
	            this.state = 790;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantConstructorSignature() {
	    let localctx = new ConstantConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Dart2Parser.RULE_constantConstructorSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(Dart2Parser.T__2);
	        this.state = 794;
	        this.qualified();
	        this.state = 795;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superclass() {
	    let localctx = new SuperclassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Dart2Parser.RULE_superclass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this.match(Dart2Parser.T__35);
	        this.state = 798;
	        this.dtype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaces() {
	    let localctx = new InterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Dart2Parser.RULE_interfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.match(Dart2Parser.T__36);
	        this.state = 801;
	        this.typeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinApplicationClass() {
	    let localctx = new MixinApplicationClassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Dart2Parser.RULE_mixinApplicationClass);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.identifier();
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 804;
	            this.typeParameters();
	        }

	        this.state = 807;
	        this.match(Dart2Parser.T__4);
	        this.state = 808;
	        this.mixinApplication();
	        this.state = 809;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinApplication() {
	    let localctx = new MixinApplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Dart2Parser.RULE_mixinApplication);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.dtype();
	        this.state = 812;
	        this.mixins();
	        this.state = 814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__36) {
	            this.state = 813;
	            this.interfaces();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Dart2Parser.RULE_enumType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.metadata();
	        this.state = 817;
	        this.match(Dart2Parser.T__37);
	        this.state = 818;
	        this.identifier();
	        this.state = 819;
	        this.match(Dart2Parser.T__11);
	        this.state = 820;
	        this.enumEntry();
	        this.state = 825;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 821;
	                this.match(Dart2Parser.T__0);
	                this.state = 822;
	                this.enumEntry(); 
	            }
	            this.state = 827;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__0) {
	            this.state = 828;
	            this.match(Dart2Parser.T__0);
	        }

	        this.state = 831;
	        this.match(Dart2Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumEntry() {
	    let localctx = new EnumEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Dart2Parser.RULE_enumEntry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.metadata();
	        this.state = 834;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Dart2Parser.RULE_typeParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.metadata();
	        this.state = 837;
	        this.identifier();
	        this.state = 840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__35) {
	            this.state = 838;
	            this.match(Dart2Parser.T__35);
	            this.state = 839;
	            this.dtype();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Dart2Parser.RULE_typeParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(Dart2Parser.T__38);
	        this.state = 843;
	        this.typeParameter();
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 844;
	            this.match(Dart2Parser.T__0);
	            this.state = 845;
	            this.typeParameter();
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 851;
	        this.match(Dart2Parser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metadata() {
	    let localctx = new MetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Dart2Parser.RULE_metadata);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 853;
	                this.match(Dart2Parser.T__40);
	                this.state = 854;
	                this.qualified();
	                this.state = 857;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Dart2Parser.T__19) {
	                    this.state = 855;
	                    this.match(Dart2Parser.T__19);
	                    this.state = 856;
	                    this.identifier();
	                }

	                this.state = 860;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Dart2Parser.T__13) {
	                    this.state = 859;
	                    this.arguments();
	                }
	         
	            }
	            this.state = 866;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Dart2Parser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 879;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 867;
	            this.assignableExpression();
	            this.state = 868;
	            this.assignmentOperator();
	            this.state = 869;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 871;
	            this.conditionalExpression();
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Dart2Parser.T__49) {
	                this.state = 872;
	                this.cascadeSection();
	                this.state = 877;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 878;
	            this.throwExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionWithoutCascade() {
	    let localctx = new ExpressionWithoutCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Dart2Parser.RULE_expressionWithoutCascade);
	    try {
	        this.state = 887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 881;
	            this.assignableExpression();
	            this.state = 882;
	            this.assignmentOperator();
	            this.state = 883;
	            this.expressionWithoutCascade();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.conditionalExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 886;
	            this.throwExpressionWithoutCascade();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Dart2Parser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this.expression();
	        this.state = 894;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 890;
	                this.match(Dart2Parser.T__0);
	                this.state = 891;
	                this.expression(); 
	            }
	            this.state = 896;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Dart2Parser.RULE_primary);
	    try {
	        this.state = 909;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 897;
	            this.thisExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 898;
	            this.match(Dart2Parser.T__33);
	            this.state = 899;
	            this.unconditionalAssignableSelector();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 900;
	            this.functionExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 901;
	            this.literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 902;
	            this.identifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 903;
	            this.nayaExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 904;
	            this.constObjectExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 905;
	            this.match(Dart2Parser.T__13);
	            this.state = 906;
	            this.expression();
	            this.state = 907;
	            this.match(Dart2Parser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Dart2Parser.RULE_literal);
	    try {
	        this.state = 918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 911;
	            this.nullLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 912;
	            this.booleanLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 913;
	            this.numericLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 914;
	            this.stringLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 915;
	            this.symbolLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 916;
	            this.mapLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 917;
	            this.listLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Dart2Parser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(Dart2Parser.T__41);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Dart2Parser.RULE_numericLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.NUMBER || _la===Dart2Parser.HEX_NUMBER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Dart2Parser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.T__42 || _la===Dart2Parser.T__43)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Dart2Parser.RULE_stringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 927; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 926;
	            _la = this._input.LA(1);
	            if(!(_la===Dart2Parser.SingleLineString || _la===Dart2Parser.MultiLineString)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 929; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Dart2Parser.SingleLineString || _la===Dart2Parser.MultiLineString);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringInterpolation() {
	    let localctx = new StringInterpolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Dart2Parser.RULE_stringInterpolation);
	    try {
	        this.state = 937;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 931;
	            this.match(Dart2Parser.T__44);
	            this.state = 932;
	            this.identifier();
	            break;
	        case Dart2Parser.T__45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.match(Dart2Parser.T__45);
	            this.state = 934;
	            this.expression();
	            this.state = 935;
	            this.match(Dart2Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolLiteral() {
	    let localctx = new SymbolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Dart2Parser.RULE_symbolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.match(Dart2Parser.T__46);
	        this.state = 949;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__27:
	        case Dart2Parser.T__28:
	        case Dart2Parser.T__29:
	        case Dart2Parser.T__30:
	        case Dart2Parser.T__38:
	        case Dart2Parser.T__39:
	        case Dart2Parser.T__67:
	        case Dart2Parser.T__68:
	        case Dart2Parser.T__69:
	        case Dart2Parser.T__70:
	        case Dart2Parser.T__71:
	        case Dart2Parser.T__72:
	        case Dart2Parser.T__73:
	        case Dart2Parser.T__74:
	        case Dart2Parser.T__75:
	        case Dart2Parser.T__76:
	        case Dart2Parser.T__77:
	        case Dart2Parser.T__78:
	        case Dart2Parser.T__79:
	        case Dart2Parser.T__80:
	            this.state = 940;
	            this.operator_();
	            break;
	        case Dart2Parser.IDENTIFIER:
	            this.state = 941;
	            this.identifier();
	            this.state = 946;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 942;
	                    this.match(Dart2Parser.T__0);
	                    this.state = 943;
	                    this.identifier(); 
	                }
	                this.state = 948;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Dart2Parser.RULE_listLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__2) {
	            this.state = 951;
	            this.match(Dart2Parser.T__2);
	        }

	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 954;
	            this.typeArguments();
	        }

	        this.state = 957;
	        this.match(Dart2Parser.T__15);
	        this.state = 962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	            this.state = 958;
	            this.expressionList();
	            this.state = 960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__0) {
	                this.state = 959;
	                this.match(Dart2Parser.T__0);
	            }

	        }

	        this.state = 964;
	        this.match(Dart2Parser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapLiteral() {
	    let localctx = new MapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Dart2Parser.RULE_mapLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__2) {
	            this.state = 966;
	            this.match(Dart2Parser.T__2);
	        }

	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 969;
	            this.typeArguments();
	        }

	        this.state = 972;
	        this.match(Dart2Parser.T__11);
	        this.state = 984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	            this.state = 973;
	            this.mapLiteralEntry();
	            this.state = 978;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 974;
	                    this.match(Dart2Parser.T__0);
	                    this.state = 975;
	                    this.mapLiteralEntry(); 
	                }
	                this.state = 980;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	            }

	            this.state = 982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__0) {
	                this.state = 981;
	                this.match(Dart2Parser.T__0);
	            }

	        }

	        this.state = 986;
	        this.match(Dart2Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapLiteralEntry() {
	    let localctx = new MapLiteralEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Dart2Parser.RULE_mapLiteralEntry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this.expression();
	        this.state = 989;
	        this.match(Dart2Parser.T__20);
	        this.state = 990;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExpression() {
	    let localctx = new ThrowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Dart2Parser.RULE_throwExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this.match(Dart2Parser.T__47);
	        this.state = 993;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExpressionWithoutCascade() {
	    let localctx = new ThrowExpressionWithoutCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Dart2Parser.RULE_throwExpressionWithoutCascade);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.match(Dart2Parser.T__47);
	        this.state = 996;
	        this.expressionWithoutCascade();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpression() {
	    let localctx = new FunctionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Dart2Parser.RULE_functionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        this.formalParameterPart();
	        this.state = 999;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thisExpression() {
	    let localctx = new ThisExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Dart2Parser.RULE_thisExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this.match(Dart2Parser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nayaExpression() {
	    let localctx = new NayaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Dart2Parser.RULE_nayaExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this.match(Dart2Parser.T__48);
	        this.state = 1004;
	        this.dtype();
	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 1005;
	            this.match(Dart2Parser.T__19);
	            this.state = 1006;
	            this.identifier();
	        }

	        this.state = 1009;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constObjectExpression() {
	    let localctx = new ConstObjectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Dart2Parser.RULE_constObjectExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        this.match(Dart2Parser.T__2);
	        this.state = 1012;
	        this.dtype();
	        this.state = 1015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__19) {
	            this.state = 1013;
	            this.match(Dart2Parser.T__19);
	            this.state = 1014;
	            this.identifier();
	        }

	        this.state = 1017;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Dart2Parser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1019;
	        this.match(Dart2Parser.T__13);
	        this.state = 1024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	            this.state = 1020;
	            this.argumentList();
	            this.state = 1022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__0) {
	                this.state = 1021;
	                this.match(Dart2Parser.T__0);
	            }

	        }

	        this.state = 1026;
	        this.match(Dart2Parser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Dart2Parser.RULE_argumentList);
	    try {
	        this.state = 1044;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1028;
	            this.namedArgument();
	            this.state = 1033;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1029;
	                    this.match(Dart2Parser.T__0);
	                    this.state = 1030;
	                    this.namedArgument(); 
	                }
	                this.state = 1035;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1036;
	            this.expressionList();
	            this.state = 1041;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1037;
	                    this.match(Dart2Parser.T__0);
	                    this.state = 1038;
	                    this.namedArgument(); 
	                }
	                this.state = 1043;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedArgument() {
	    let localctx = new NamedArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Dart2Parser.RULE_namedArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046;
	        this.label();
	        this.state = 1047;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascadeSection() {
	    let localctx = new CascadeSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Dart2Parser.RULE_cascadeSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.match(Dart2Parser.T__49);

	        this.state = 1050;
	        this.cascadeSelector();
	        this.state = 1054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__13 || _la===Dart2Parser.T__38) {
	            this.state = 1051;
	            this.argumentPart();
	            this.state = 1056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__15 || _la===Dart2Parser.T__19 || _la===Dart2Parser.T__85) {
	            this.state = 1057;
	            this.assignableSelector();
	            this.state = 1061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Dart2Parser.T__13 || _la===Dart2Parser.T__38) {
	                this.state = 1058;
	                this.argumentPart();
	                this.state = 1063;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__4 || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (Dart2Parser.T__50 - 51)) | (1 << (Dart2Parser.T__51 - 51)) | (1 << (Dart2Parser.T__52 - 51)) | (1 << (Dart2Parser.T__53 - 51)) | (1 << (Dart2Parser.T__54 - 51)) | (1 << (Dart2Parser.T__55 - 51)) | (1 << (Dart2Parser.T__56 - 51)) | (1 << (Dart2Parser.T__57 - 51)) | (1 << (Dart2Parser.T__58 - 51)) | (1 << (Dart2Parser.T__59 - 51)) | (1 << (Dart2Parser.T__60 - 51)) | (1 << (Dart2Parser.T__61 - 51)))) !== 0)) {
	            this.state = 1069;
	            this.assignmentOperator();
	            this.state = 1070;
	            this.expressionWithoutCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascadeSelector() {
	    let localctx = new CascadeSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Dart2Parser.RULE_cascadeSelector);
	    try {
	        this.state = 1079;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1074;
	            this.match(Dart2Parser.T__15);
	            this.state = 1075;
	            this.expression();
	            this.state = 1076;
	            this.match(Dart2Parser.T__16);
	            break;
	        case Dart2Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1078;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentPart() {
	    let localctx = new ArgumentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Dart2Parser.RULE_argumentPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 1081;
	            this.typeArguments();
	        }

	        this.state = 1084;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Dart2Parser.RULE_assignmentOperator);
	    try {
	        this.state = 1088;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1086;
	            this.match(Dart2Parser.T__4);
	            break;
	        case Dart2Parser.T__50:
	        case Dart2Parser.T__51:
	        case Dart2Parser.T__52:
	        case Dart2Parser.T__53:
	        case Dart2Parser.T__54:
	        case Dart2Parser.T__55:
	        case Dart2Parser.T__56:
	        case Dart2Parser.T__57:
	        case Dart2Parser.T__58:
	        case Dart2Parser.T__59:
	        case Dart2Parser.T__60:
	        case Dart2Parser.T__61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1087;
	            this.compoundAssignmentOperator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundAssignmentOperator() {
	    let localctx = new CompoundAssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Dart2Parser.RULE_compoundAssignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        _la = this._input.LA(1);
	        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (Dart2Parser.T__50 - 51)) | (1 << (Dart2Parser.T__51 - 51)) | (1 << (Dart2Parser.T__52 - 51)) | (1 << (Dart2Parser.T__53 - 51)) | (1 << (Dart2Parser.T__54 - 51)) | (1 << (Dart2Parser.T__55 - 51)) | (1 << (Dart2Parser.T__56 - 51)) | (1 << (Dart2Parser.T__57 - 51)) | (1 << (Dart2Parser.T__58 - 51)) | (1 << (Dart2Parser.T__59 - 51)) | (1 << (Dart2Parser.T__60 - 51)) | (1 << (Dart2Parser.T__61 - 51)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Dart2Parser.RULE_conditionalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this.ifNullExpression();
	        this.state = 1098;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__62) {
	            this.state = 1093;
	            this.match(Dart2Parser.T__62);
	            this.state = 1094;
	            this.expressionWithoutCascade();
	            this.state = 1095;
	            this.match(Dart2Parser.T__20);
	            this.state = 1096;
	            this.expressionWithoutCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNullExpression() {
	    let localctx = new IfNullExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Dart2Parser.RULE_ifNullExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1100;
	        this.logicalOrExpression();
	        this.state = 1105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__63) {
	            this.state = 1101;
	            this.match(Dart2Parser.T__63);
	            this.state = 1102;
	            this.logicalOrExpression();
	            this.state = 1107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Dart2Parser.RULE_logicalOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this.logicalAndExpression();
	        this.state = 1113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__64) {
	            this.state = 1109;
	            this.match(Dart2Parser.T__64);
	            this.state = 1110;
	            this.logicalAndExpression();
	            this.state = 1115;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Dart2Parser.RULE_logicalAndExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1116;
	        this.equalityExpression();
	        this.state = 1121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__65) {
	            this.state = 1117;
	            this.match(Dart2Parser.T__65);
	            this.state = 1118;
	            this.equalityExpression();
	            this.state = 1123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Dart2Parser.RULE_equalityExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1124;
	            this.relationalExpression();
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__30 || _la===Dart2Parser.T__66) {
	                this.state = 1125;
	                this.equalityOperator();
	                this.state = 1126;
	                this.relationalExpression();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1130;
	            this.match(Dart2Parser.T__33);
	            this.state = 1131;
	            this.equalityOperator();
	            this.state = 1132;
	            this.relationalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityOperator() {
	    let localctx = new EqualityOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Dart2Parser.RULE_equalityOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.T__30 || _la===Dart2Parser.T__66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Dart2Parser.RULE_relationalExpression);
	    try {
	        this.state = 1150;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1138;
	            this.bitwiseOrExpression();
	            this.state = 1144;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case Dart2Parser.T__86:
	            	this.state = 1139;
	            	this.typeTest();
	            	break;
	            case Dart2Parser.T__87:
	            	this.state = 1140;
	            	this.typeCast();
	            	break;
	            case Dart2Parser.T__38:
	            case Dart2Parser.T__39:
	            case Dart2Parser.T__67:
	            case Dart2Parser.T__68:
	            	this.state = 1141;
	            	this.relationalOperator();
	            	this.state = 1142;
	            	this.bitwiseOrExpression();
	            	break;
	            case Dart2Parser.T__0:
	            case Dart2Parser.T__6:
	            case Dart2Parser.T__7:
	            case Dart2Parser.T__8:
	            case Dart2Parser.T__9:
	            case Dart2Parser.T__10:
	            case Dart2Parser.T__11:
	            case Dart2Parser.T__12:
	            case Dart2Parser.T__14:
	            case Dart2Parser.T__16:
	            case Dart2Parser.T__20:
	            case Dart2Parser.T__30:
	            case Dart2Parser.T__49:
	            case Dart2Parser.T__62:
	            case Dart2Parser.T__63:
	            case Dart2Parser.T__64:
	            case Dart2Parser.T__65:
	            case Dart2Parser.T__66:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1146;
	            this.match(Dart2Parser.T__33);
	            this.state = 1147;
	            this.relationalOperator();
	            this.state = 1148;
	            this.bitwiseOrExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalOperator() {
	    let localctx = new RelationalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Dart2Parser.RULE_relationalOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        _la = this._input.LA(1);
	        if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (Dart2Parser.T__38 - 39)) | (1 << (Dart2Parser.T__39 - 39)) | (1 << (Dart2Parser.T__67 - 39)) | (1 << (Dart2Parser.T__68 - 39)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOrExpression() {
	    let localctx = new BitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Dart2Parser.RULE_bitwiseOrExpression);
	    try {
	        this.state = 1169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1154;
	            this.bitwiseXorExpression();
	            this.state = 1159;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1155;
	                    this.match(Dart2Parser.T__69);
	                    this.state = 1156;
	                    this.bitwiseXorExpression(); 
	                }
	                this.state = 1161;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1162;
	            this.match(Dart2Parser.T__33);
	            this.state = 1165; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1163;
	            		this.match(Dart2Parser.T__69);
	            		this.state = 1164;
	            		this.bitwiseOrExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1167; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,130, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseXorExpression() {
	    let localctx = new BitwiseXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Dart2Parser.RULE_bitwiseXorExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1171;
	            this.bitwiseAndExpression();
	            this.state = 1176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Dart2Parser.T__70) {
	                this.state = 1172;
	                this.match(Dart2Parser.T__70);
	                this.state = 1173;
	                this.bitwiseAndExpression();
	                this.state = 1178;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1179;
	            this.match(Dart2Parser.T__33);
	            this.state = 1182; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1180;
	                this.match(Dart2Parser.T__70);
	                this.state = 1181;
	                this.bitwiseAndExpression();
	                this.state = 1184; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Dart2Parser.T__70);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseAndExpression() {
	    let localctx = new BitwiseAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Dart2Parser.RULE_bitwiseAndExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1203;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1188;
	            this.shiftExpression();
	            this.state = 1193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Dart2Parser.T__71) {
	                this.state = 1189;
	                this.match(Dart2Parser.T__71);
	                this.state = 1190;
	                this.shiftExpression();
	                this.state = 1195;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1196;
	            this.match(Dart2Parser.T__33);
	            this.state = 1199; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1197;
	                this.match(Dart2Parser.T__71);
	                this.state = 1198;
	                this.shiftExpression();
	                this.state = 1201; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Dart2Parser.T__71);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOperator() {
	    let localctx = new BitwiseOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Dart2Parser.RULE_bitwiseOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1205;
	        _la = this._input.LA(1);
	        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Dart2Parser.T__69 - 70)) | (1 << (Dart2Parser.T__70 - 70)) | (1 << (Dart2Parser.T__71 - 70)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Dart2Parser.RULE_shiftExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1207;
	            this.additiveExpression();
	            this.state = 1213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (Dart2Parser.T__72 - 73)) | (1 << (Dart2Parser.T__73 - 73)) | (1 << (Dart2Parser.T__74 - 73)))) !== 0)) {
	                this.state = 1208;
	                this.shiftOperator();
	                this.state = 1209;
	                this.additiveExpression();
	                this.state = 1215;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1216;
	            this.match(Dart2Parser.T__33);
	            this.state = 1220; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1217;
	                this.shiftOperator();
	                this.state = 1218;
	                this.additiveExpression();
	                this.state = 1222; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (Dart2Parser.T__72 - 73)) | (1 << (Dart2Parser.T__73 - 73)) | (1 << (Dart2Parser.T__74 - 73)))) !== 0));
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftOperator() {
	    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Dart2Parser.RULE_shiftOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1226;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (Dart2Parser.T__72 - 73)) | (1 << (Dart2Parser.T__73 - 73)) | (1 << (Dart2Parser.T__74 - 73)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Dart2Parser.RULE_additiveExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1228;
	            this.multiplicativeExpression();
	            this.state = 1234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Dart2Parser.T__75 || _la===Dart2Parser.T__76) {
	                this.state = 1229;
	                this.additiveOperator();
	                this.state = 1230;
	                this.multiplicativeExpression();
	                this.state = 1236;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1237;
	            this.match(Dart2Parser.T__33);
	            this.state = 1241; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1238;
	                this.additiveOperator();
	                this.state = 1239;
	                this.multiplicativeExpression();
	                this.state = 1243; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Dart2Parser.T__75 || _la===Dart2Parser.T__76);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveOperator() {
	    let localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Dart2Parser.RULE_additiveOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.T__75 || _la===Dart2Parser.T__76)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Dart2Parser.RULE_multiplicativeExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1249;
	            this.unaryExpression();
	            this.state = 1255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (Dart2Parser.T__77 - 78)) | (1 << (Dart2Parser.T__78 - 78)) | (1 << (Dart2Parser.T__79 - 78)) | (1 << (Dart2Parser.T__80 - 78)))) !== 0)) {
	                this.state = 1250;
	                this.multiplicativeOperator();
	                this.state = 1251;
	                this.unaryExpression();
	                this.state = 1257;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1258;
	            this.match(Dart2Parser.T__33);
	            this.state = 1262; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1259;
	                this.multiplicativeOperator();
	                this.state = 1260;
	                this.unaryExpression();
	                this.state = 1264; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (Dart2Parser.T__77 - 78)) | (1 << (Dart2Parser.T__78 - 78)) | (1 << (Dart2Parser.T__79 - 78)) | (1 << (Dart2Parser.T__80 - 78)))) !== 0));
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeOperator() {
	    let localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Dart2Parser.RULE_multiplicativeOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        _la = this._input.LA(1);
	        if(!(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (Dart2Parser.T__77 - 78)) | (1 << (Dart2Parser.T__78 - 78)) | (1 << (Dart2Parser.T__79 - 78)) | (1 << (Dart2Parser.T__80 - 78)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Dart2Parser.RULE_unaryExpression);
	    try {
	        this.state = 1284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1270;
	            this.prefixOperator();
	            this.state = 1271;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1273;
	            this.awaitExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1274;
	            this.postfixExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1277;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Dart2Parser.T__76:
	                this.state = 1275;
	                this.minusOperator();
	                break;
	            case Dart2Parser.T__27:
	                this.state = 1276;
	                this.tildeOperator();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1279;
	            this.match(Dart2Parser.T__33);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1281;
	            this.incrementOperator();
	            this.state = 1282;
	            this.assignableExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixOperator() {
	    let localctx = new PrefixOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Dart2Parser.RULE_prefixOperator);
	    try {
	        this.state = 1289;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1286;
	            this.minusOperator();
	            break;
	        case Dart2Parser.T__81:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1287;
	            this.negationOperator();
	            break;
	        case Dart2Parser.T__27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1288;
	            this.tildeOperator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minusOperator() {
	    let localctx = new MinusOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Dart2Parser.RULE_minusOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.match(Dart2Parser.T__76);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negationOperator() {
	    let localctx = new NegationOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Dart2Parser.RULE_negationOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.match(Dart2Parser.T__81);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tildeOperator() {
	    let localctx = new TildeOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Dart2Parser.RULE_tildeOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1295;
	        this.match(Dart2Parser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	awaitExpression() {
	    let localctx = new AwaitExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Dart2Parser.RULE_awaitExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1297;
	        this.match(Dart2Parser.T__82);
	        this.state = 1298;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Dart2Parser.RULE_postfixExpression);
	    try {
	        this.state = 1310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1300;
	            this.assignableExpression();
	            this.state = 1301;
	            this.postfixOperator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1303;
	            this.primary();
	            this.state = 1307;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1304;
	                    this.selector(); 
	                }
	                this.state = 1309;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixOperator() {
	    let localctx = new PostfixOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Dart2Parser.RULE_postfixOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.incrementOperator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector() {
	    let localctx = new SelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Dart2Parser.RULE_selector);
	    try {
	        this.state = 1316;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__15:
	        case Dart2Parser.T__19:
	        case Dart2Parser.T__85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1314;
	            this.assignableSelector();
	            break;
	        case Dart2Parser.T__13:
	        case Dart2Parser.T__38:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1315;
	            this.argumentPart();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	incrementOperator() {
	    let localctx = new IncrementOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Dart2Parser.RULE_incrementOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.T__83 || _la===Dart2Parser.T__84)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignableExpression() {
	    let localctx = new AssignableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Dart2Parser.RULE_assignableExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1320;
	            this.primary();
	            this.state = 1328;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	            if(la_===1) {
	                this.state = 1324;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===Dart2Parser.T__13 || _la===Dart2Parser.T__38) {
	                    this.state = 1321;
	                    this.argumentPart();
	                    this.state = 1326;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1327;
	                this.assignableSelector();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1330;
	            this.match(Dart2Parser.T__33);
	            this.state = 1331;
	            this.unconditionalAssignableSelector();
	            this.state = 1332;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unconditionalAssignableSelector() {
	    let localctx = new UnconditionalAssignableSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Dart2Parser.RULE_unconditionalAssignableSelector);
	    try {
	        this.state = 1342;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1336;
	            this.match(Dart2Parser.T__15);
	            this.state = 1337;
	            this.expression();
	            this.state = 1338;
	            this.match(Dart2Parser.T__16);
	            break;
	        case Dart2Parser.T__19:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1340;
	            this.match(Dart2Parser.T__19);
	            this.state = 1341;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignableSelector() {
	    let localctx = new AssignableSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Dart2Parser.RULE_assignableSelector);
	    try {
	        this.state = 1347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__15:
	        case Dart2Parser.T__19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1344;
	            this.unconditionalAssignableSelector();
	            break;
	        case Dart2Parser.T__85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1345;
	            this.match(Dart2Parser.T__85);
	            this.state = 1346;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Dart2Parser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1349;
	        this.match(Dart2Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified() {
	    let localctx = new QualifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Dart2Parser.RULE_qualified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        this.identifier();
	        this.state = 1354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 1352;
	            this.match(Dart2Parser.T__19);
	            this.state = 1353;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTest() {
	    let localctx = new TypeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Dart2Parser.RULE_typeTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.isOperator();
	        this.state = 1357;
	        this.dtype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOperator() {
	    let localctx = new IsOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Dart2Parser.RULE_isOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1359;
	        this.match(Dart2Parser.T__86);
	        this.state = 1361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__81) {
	            this.state = 1360;
	            this.match(Dart2Parser.T__81);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCast() {
	    let localctx = new TypeCastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Dart2Parser.RULE_typeCast);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1363;
	        this.asOperator();
	        this.state = 1364;
	        this.dtype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asOperator() {
	    let localctx = new AsOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Dart2Parser.RULE_asOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.match(Dart2Parser.T__87);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Dart2Parser.RULE_statements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1368;
	                this.statement(); 
	            }
	            this.state = 1373;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Dart2Parser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1377;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1374;
	                this.label(); 
	            }
	            this.state = 1379;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	        this.state = 1380;
	        this.nonLabledStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonLabledStatment() {
	    let localctx = new NonLabledStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Dart2Parser.RULE_nonLabledStatment);
	    try {
	        this.state = 1399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1382;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1383;
	            this.localVariableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1384;
	            this.forStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1385;
	            this.whileStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1386;
	            this.doStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1387;
	            this.switchStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1388;
	            this.ifStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1389;
	            this.rethrowStatment();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1390;
	            this.tryStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1391;
	            this.breakStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1392;
	            this.continueStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1393;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1394;
	            this.yieldStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1395;
	            this.yieldEachStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1396;
	            this.expressionStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1397;
	            this.assertStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1398;
	            this.localFunctionDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Dart2Parser.RULE_expressionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	            this.state = 1401;
	            this.expression();
	        }

	        this.state = 1404;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Dart2Parser.RULE_localVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        this.initializedVariableDeclaration();
	        this.state = 1407;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localFunctionDeclaration() {
	    let localctx = new LocalFunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Dart2Parser.RULE_localFunctionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1409;
	        this.functionSignature();
	        this.state = 1410;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Dart2Parser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.match(Dart2Parser.T__88);
	        this.state = 1413;
	        this.match(Dart2Parser.T__13);
	        this.state = 1414;
	        this.expression();
	        this.state = 1415;
	        this.match(Dart2Parser.T__14);
	        this.state = 1416;
	        this.statement();
	        this.state = 1419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 1417;
	            this.match(Dart2Parser.T__89);
	            this.state = 1418;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Dart2Parser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__82) {
	            this.state = 1421;
	            this.match(Dart2Parser.T__82);
	        }

	        this.state = 1424;
	        this.match(Dart2Parser.T__90);
	        this.state = 1425;
	        this.match(Dart2Parser.T__13);
	        this.state = 1426;
	        this.forLoopParts();
	        this.state = 1427;
	        this.match(Dart2Parser.T__14);
	        this.state = 1428;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forLoopParts() {
	    let localctx = new ForLoopPartsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Dart2Parser.RULE_forLoopParts);
	    var _la = 0; // Token type
	    try {
	        this.state = 1446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1430;
	            this.forInitializerStatement();
	            this.state = 1432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	                this.state = 1431;
	                this.expression();
	            }

	            this.state = 1434;
	            this.match(Dart2Parser.T__8);
	            this.state = 1436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	                this.state = 1435;
	                this.expressionList();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1438;
	            this.declaredIdentifier();
	            this.state = 1439;
	            this.match(Dart2Parser.T__91);
	            this.state = 1440;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1442;
	            this.identifier();
	            this.state = 1443;
	            this.match(Dart2Parser.T__91);
	            this.state = 1444;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInitializerStatement() {
	    let localctx = new ForInitializerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Dart2Parser.RULE_forInitializerStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1448;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	                this.state = 1449;
	                this.expression();
	            }

	            this.state = 1452;
	            this.match(Dart2Parser.T__8);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Dart2Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1455;
	        this.match(Dart2Parser.T__92);
	        this.state = 1456;
	        this.match(Dart2Parser.T__13);
	        this.state = 1457;
	        this.expression();
	        this.state = 1458;
	        this.match(Dart2Parser.T__14);
	        this.state = 1459;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Dart2Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1461;
	        this.match(Dart2Parser.T__93);
	        this.state = 1462;
	        this.statement();
	        this.state = 1463;
	        this.match(Dart2Parser.T__92);
	        this.state = 1464;
	        this.match(Dart2Parser.T__13);
	        this.state = 1465;
	        this.expression();
	        this.state = 1466;
	        this.match(Dart2Parser.T__14);
	        this.state = 1467;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Dart2Parser.RULE_switchStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.match(Dart2Parser.T__94);
	        this.state = 1470;
	        this.match(Dart2Parser.T__13);
	        this.state = 1471;
	        this.expression();
	        this.state = 1472;
	        this.match(Dart2Parser.T__14);
	        this.state = 1473;
	        this.match(Dart2Parser.T__11);
	        this.state = 1477;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1474;
	                this.switchCase(); 
	            }
	            this.state = 1479;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__96 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 1480;
	            this.defaultCase();
	        }

	        this.state = 1483;
	        this.match(Dart2Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchCase() {
	    let localctx = new SwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Dart2Parser.RULE_switchCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.IDENTIFIER) {
	            this.state = 1485;
	            this.label();
	            this.state = 1490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1491;
	        this.match(Dart2Parser.T__95);
	        this.state = 1492;
	        this.expression();
	        this.state = 1493;
	        this.match(Dart2Parser.T__20);
	        this.state = 1494;
	        this.statements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultCase() {
	    let localctx = new DefaultCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Dart2Parser.RULE_defaultCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.IDENTIFIER) {
	            this.state = 1496;
	            this.label();
	            this.state = 1501;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1502;
	        this.match(Dart2Parser.T__96);
	        this.state = 1503;
	        this.match(Dart2Parser.T__20);
	        this.state = 1504;
	        this.statements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rethrowStatment() {
	    let localctx = new RethrowStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Dart2Parser.RULE_rethrowStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1506;
	        this.match(Dart2Parser.T__97);
	        this.state = 1507;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Dart2Parser.RULE_tryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        this.match(Dart2Parser.T__98);
	        this.state = 1510;
	        this.block();
	        this.state = 1520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__99:
	        case Dart2Parser.T__100:
	            this.state = 1512; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1511;
	                this.onPart();
	                this.state = 1514; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Dart2Parser.T__99 || _la===Dart2Parser.T__100);
	            this.state = 1517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__101) {
	                this.state = 1516;
	                this.finallyPart();
	            }

	            break;
	        case Dart2Parser.T__101:
	            this.state = 1519;
	            this.finallyPart();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onPart() {
	    let localctx = new OnPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Dart2Parser.RULE_onPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1532;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__100:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1522;
	            this.catchPart();
	            this.state = 1523;
	            this.block();
	            break;
	        case Dart2Parser.T__99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1525;
	            this.match(Dart2Parser.T__99);
	            this.state = 1526;
	            this.dtype();
	            this.state = 1528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__100) {
	                this.state = 1527;
	                this.catchPart();
	            }

	            this.state = 1530;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchPart() {
	    let localctx = new CatchPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Dart2Parser.RULE_catchPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.match(Dart2Parser.T__100);
	        this.state = 1535;
	        this.match(Dart2Parser.T__13);
	        this.state = 1536;
	        this.identifier();
	        this.state = 1539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__0) {
	            this.state = 1537;
	            this.match(Dart2Parser.T__0);
	            this.state = 1538;
	            this.identifier();
	        }

	        this.state = 1541;
	        this.match(Dart2Parser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyPart() {
	    let localctx = new FinallyPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Dart2Parser.RULE_finallyPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1543;
	        this.match(Dart2Parser.T__101);
	        this.state = 1544;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Dart2Parser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(Dart2Parser.T__102);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__27))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Dart2Parser.T__33 - 34)) | (1 << (Dart2Parser.T__38 - 34)) | (1 << (Dart2Parser.T__41 - 34)) | (1 << (Dart2Parser.T__42 - 34)) | (1 << (Dart2Parser.T__43 - 34)) | (1 << (Dart2Parser.T__46 - 34)) | (1 << (Dart2Parser.T__47 - 34)) | (1 << (Dart2Parser.T__48 - 34)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (Dart2Parser.T__76 - 77)) | (1 << (Dart2Parser.T__81 - 77)) | (1 << (Dart2Parser.T__82 - 77)) | (1 << (Dart2Parser.T__83 - 77)) | (1 << (Dart2Parser.T__84 - 77)))) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (Dart2Parser.NUMBER - 119)) | (1 << (Dart2Parser.HEX_NUMBER - 119)) | (1 << (Dart2Parser.SingleLineString - 119)) | (1 << (Dart2Parser.MultiLineString - 119)) | (1 << (Dart2Parser.IDENTIFIER - 119)))) !== 0)) {
	            this.state = 1547;
	            this.expression();
	        }

	        this.state = 1550;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Dart2Parser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.identifier();
	        this.state = 1553;
	        this.match(Dart2Parser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Dart2Parser.RULE_breakStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.match(Dart2Parser.T__103);
	        this.state = 1557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.IDENTIFIER) {
	            this.state = 1556;
	            this.identifier();
	        }

	        this.state = 1559;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Dart2Parser.RULE_continueStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1561;
	        this.match(Dart2Parser.T__104);
	        this.state = 1563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.IDENTIFIER) {
	            this.state = 1562;
	            this.identifier();
	        }

	        this.state = 1565;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Dart2Parser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1567;
	        this.match(Dart2Parser.T__105);
	        this.state = 1568;
	        this.expression();
	        this.state = 1569;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldEachStatement() {
	    let localctx = new YieldEachStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Dart2Parser.RULE_yieldEachStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1571;
	        this.match(Dart2Parser.T__106);
	        this.state = 1572;
	        this.expression();
	        this.state = 1573;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Dart2Parser.RULE_assertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1575;
	        this.assertion();
	        this.state = 1576;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Dart2Parser.RULE_assertion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.match(Dart2Parser.T__107);
	        this.state = 1579;
	        this.match(Dart2Parser.T__13);
	        this.state = 1580;
	        this.expression();
	        this.state = 1583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        if(la_===1) {
	            this.state = 1581;
	            this.match(Dart2Parser.T__0);
	            this.state = 1582;
	            this.expression();

	        }
	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__0) {
	            this.state = 1585;
	            this.match(Dart2Parser.T__0);
	        }

	        this.state = 1588;
	        this.match(Dart2Parser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topLevelDefinition() {
	    let localctx = new TopLevelDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Dart2Parser.RULE_topLevelDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1590;
	            this.classDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1591;
	            this.enumType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1592;
	            this.typeAlias();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 1593;
	                this.match(Dart2Parser.T__25);
	            }

	            this.state = 1596;
	            this.functionSignature();
	            this.state = 1597;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 1599;
	                this.match(Dart2Parser.T__25);
	            }

	            this.state = 1602;
	            this.getterSignature();
	            this.state = 1603;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__25) {
	                this.state = 1605;
	                this.match(Dart2Parser.T__25);
	            }

	            this.state = 1608;
	            this.setterSignature();
	            this.state = 1609;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1611;
	            this.functionSignature();
	            this.state = 1612;
	            this.functionBody();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__5 || _la===Dart2Parser.IDENTIFIER) {
	                this.state = 1614;
	                this.returnType();
	            }

	            this.state = 1617;
	            this.match(Dart2Parser.T__31);
	            this.state = 1618;
	            this.identifier();
	            this.state = 1619;
	            this.functionBody();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Dart2Parser.T__5 || _la===Dart2Parser.IDENTIFIER) {
	                this.state = 1621;
	                this.returnType();
	            }

	            this.state = 1624;
	            this.match(Dart2Parser.T__32);
	            this.state = 1625;
	            this.identifier();
	            this.state = 1626;
	            this.formalParameterList();
	            this.state = 1627;
	            this.functionBody();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1629;
	            _la = this._input.LA(1);
	            if(!(_la===Dart2Parser.T__1 || _la===Dart2Parser.T__2)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1631;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	            if(la_===1) {
	                this.state = 1630;
	                this.dtype();

	            }
	            this.state = 1633;
	            this.staticFinalDeclarationList();
	            this.state = 1634;
	            this.match(Dart2Parser.T__8);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1636;
	            this.variableDeclaration();
	            this.state = 1637;
	            this.match(Dart2Parser.T__8);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getOrSet() {
	    let localctx = new GetOrSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Dart2Parser.RULE_getOrSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1641;
	        _la = this._input.LA(1);
	        if(!(_la===Dart2Parser.T__31 || _la===Dart2Parser.T__32)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryDefinition() {
	    let localctx = new LibraryDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Dart2Parser.RULE_libraryDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__108) {
	            this.state = 1643;
	            this.scriptTag();
	        }

	        this.state = 1647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 1646;
	            this.libraryName();

	        }
	        this.state = 1652;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1649;
	                this.importOrExport(); 
	            }
	            this.state = 1654;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
	        }

	        this.state = 1658;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1655;
	                this.partDirective(); 
	            }
	            this.state = 1660;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	        }

	        this.state = 1664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__1) | (1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__3) | (1 << Dart2Parser.T__5) | (1 << Dart2Parser.T__21) | (1 << Dart2Parser.T__22) | (1 << Dart2Parser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Dart2Parser.T__31 - 32)) | (1 << (Dart2Parser.T__32 - 32)) | (1 << (Dart2Parser.T__37 - 32)) | (1 << (Dart2Parser.T__40 - 32)))) !== 0) || _la===Dart2Parser.T__116 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 1661;
	            this.topLevelDefinition();
	            this.state = 1666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scriptTag() {
	    let localctx = new ScriptTagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Dart2Parser.RULE_scriptTag);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this.match(Dart2Parser.T__108);
	        this.state = 1671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__0) | (1 << Dart2Parser.T__1) | (1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__3) | (1 << Dart2Parser.T__4) | (1 << Dart2Parser.T__5) | (1 << Dart2Parser.T__6) | (1 << Dart2Parser.T__7) | (1 << Dart2Parser.T__8) | (1 << Dart2Parser.T__9) | (1 << Dart2Parser.T__10) | (1 << Dart2Parser.T__11) | (1 << Dart2Parser.T__12) | (1 << Dart2Parser.T__13) | (1 << Dart2Parser.T__14) | (1 << Dart2Parser.T__15) | (1 << Dart2Parser.T__16) | (1 << Dart2Parser.T__17) | (1 << Dart2Parser.T__18) | (1 << Dart2Parser.T__19) | (1 << Dart2Parser.T__20) | (1 << Dart2Parser.T__21) | (1 << Dart2Parser.T__22) | (1 << Dart2Parser.T__23) | (1 << Dart2Parser.T__24) | (1 << Dart2Parser.T__25) | (1 << Dart2Parser.T__26) | (1 << Dart2Parser.T__27) | (1 << Dart2Parser.T__28) | (1 << Dart2Parser.T__29) | (1 << Dart2Parser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Dart2Parser.T__31 - 32)) | (1 << (Dart2Parser.T__32 - 32)) | (1 << (Dart2Parser.T__33 - 32)) | (1 << (Dart2Parser.T__34 - 32)) | (1 << (Dart2Parser.T__35 - 32)) | (1 << (Dart2Parser.T__36 - 32)) | (1 << (Dart2Parser.T__37 - 32)) | (1 << (Dart2Parser.T__38 - 32)) | (1 << (Dart2Parser.T__39 - 32)) | (1 << (Dart2Parser.T__40 - 32)) | (1 << (Dart2Parser.T__41 - 32)) | (1 << (Dart2Parser.T__42 - 32)) | (1 << (Dart2Parser.T__43 - 32)) | (1 << (Dart2Parser.T__44 - 32)) | (1 << (Dart2Parser.T__45 - 32)) | (1 << (Dart2Parser.T__46 - 32)) | (1 << (Dart2Parser.T__47 - 32)) | (1 << (Dart2Parser.T__48 - 32)) | (1 << (Dart2Parser.T__49 - 32)) | (1 << (Dart2Parser.T__50 - 32)) | (1 << (Dart2Parser.T__51 - 32)) | (1 << (Dart2Parser.T__52 - 32)) | (1 << (Dart2Parser.T__53 - 32)) | (1 << (Dart2Parser.T__54 - 32)) | (1 << (Dart2Parser.T__55 - 32)) | (1 << (Dart2Parser.T__56 - 32)) | (1 << (Dart2Parser.T__57 - 32)) | (1 << (Dart2Parser.T__58 - 32)) | (1 << (Dart2Parser.T__59 - 32)) | (1 << (Dart2Parser.T__60 - 32)) | (1 << (Dart2Parser.T__61 - 32)) | (1 << (Dart2Parser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Dart2Parser.T__63 - 64)) | (1 << (Dart2Parser.T__64 - 64)) | (1 << (Dart2Parser.T__65 - 64)) | (1 << (Dart2Parser.T__66 - 64)) | (1 << (Dart2Parser.T__67 - 64)) | (1 << (Dart2Parser.T__68 - 64)) | (1 << (Dart2Parser.T__69 - 64)) | (1 << (Dart2Parser.T__70 - 64)) | (1 << (Dart2Parser.T__71 - 64)) | (1 << (Dart2Parser.T__72 - 64)) | (1 << (Dart2Parser.T__73 - 64)) | (1 << (Dart2Parser.T__74 - 64)) | (1 << (Dart2Parser.T__75 - 64)) | (1 << (Dart2Parser.T__76 - 64)) | (1 << (Dart2Parser.T__77 - 64)) | (1 << (Dart2Parser.T__78 - 64)) | (1 << (Dart2Parser.T__79 - 64)) | (1 << (Dart2Parser.T__80 - 64)) | (1 << (Dart2Parser.T__81 - 64)) | (1 << (Dart2Parser.T__82 - 64)) | (1 << (Dart2Parser.T__83 - 64)) | (1 << (Dart2Parser.T__84 - 64)) | (1 << (Dart2Parser.T__85 - 64)) | (1 << (Dart2Parser.T__86 - 64)) | (1 << (Dart2Parser.T__87 - 64)) | (1 << (Dart2Parser.T__88 - 64)) | (1 << (Dart2Parser.T__89 - 64)) | (1 << (Dart2Parser.T__90 - 64)) | (1 << (Dart2Parser.T__91 - 64)) | (1 << (Dart2Parser.T__92 - 64)) | (1 << (Dart2Parser.T__93 - 64)) | (1 << (Dart2Parser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Dart2Parser.T__95 - 96)) | (1 << (Dart2Parser.T__96 - 96)) | (1 << (Dart2Parser.T__97 - 96)) | (1 << (Dart2Parser.T__98 - 96)) | (1 << (Dart2Parser.T__99 - 96)) | (1 << (Dart2Parser.T__100 - 96)) | (1 << (Dart2Parser.T__101 - 96)) | (1 << (Dart2Parser.T__102 - 96)) | (1 << (Dart2Parser.T__103 - 96)) | (1 << (Dart2Parser.T__104 - 96)) | (1 << (Dart2Parser.T__105 - 96)) | (1 << (Dart2Parser.T__106 - 96)) | (1 << (Dart2Parser.T__107 - 96)) | (1 << (Dart2Parser.T__108 - 96)) | (1 << (Dart2Parser.T__109 - 96)) | (1 << (Dart2Parser.T__110 - 96)) | (1 << (Dart2Parser.T__111 - 96)) | (1 << (Dart2Parser.T__112 - 96)) | (1 << (Dart2Parser.T__113 - 96)) | (1 << (Dart2Parser.T__114 - 96)) | (1 << (Dart2Parser.T__115 - 96)) | (1 << (Dart2Parser.T__116 - 96)) | (1 << (Dart2Parser.WHITESPACE - 96)) | (1 << (Dart2Parser.NUMBER - 96)) | (1 << (Dart2Parser.HEX_NUMBER - 96)) | (1 << (Dart2Parser.SingleLineString - 96)) | (1 << (Dart2Parser.MultiLineString - 96)) | (1 << (Dart2Parser.IDENTIFIER - 96)) | (1 << (Dart2Parser.SINGLE_LINE_COMMENT - 96)) | (1 << (Dart2Parser.MULTI_LINE_COMMENT - 96)))) !== 0)) {
	            this.state = 1668;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===Dart2Parser.NEWLINE) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1674;
	        this.match(Dart2Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryName() {
	    let localctx = new LibraryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Dart2Parser.RULE_libraryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1676;
	        this.metadata();
	        this.state = 1677;
	        this.match(Dart2Parser.T__109);
	        this.state = 1678;
	        this.dottedIdentifierList();
	        this.state = 1679;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importOrExport() {
	    let localctx = new ImportOrExportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Dart2Parser.RULE_importOrExport);
	    try {
	        this.state = 1683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1681;
	            this.libraryimport();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1682;
	            this.libraryExport();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedIdentifierList() {
	    let localctx = new DottedIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Dart2Parser.RULE_dottedIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1685;
	        this.identifier();
	        this.state = 1690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 1686;
	            this.match(Dart2Parser.T__0);
	            this.state = 1687;
	            this.identifier();
	            this.state = 1692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryimport() {
	    let localctx = new LibraryimportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Dart2Parser.RULE_libraryimport);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1693;
	        this.metadata();
	        this.state = 1694;
	        this.importSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importSpecification() {
	    let localctx = new ImportSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Dart2Parser.RULE_importSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.match(Dart2Parser.T__110);
	        this.state = 1697;
	        this.configurableUri();
	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__87) {
	            this.state = 1698;
	            this.match(Dart2Parser.T__87);
	            this.state = 1699;
	            this.identifier();
	        }

	        this.state = 1705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__111 || _la===Dart2Parser.T__112) {
	            this.state = 1702;
	            this.combinator();
	            this.state = 1707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1708;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	combinator() {
	    let localctx = new CombinatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Dart2Parser.RULE_combinator);
	    try {
	        this.state = 1714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.T__111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1710;
	            this.match(Dart2Parser.T__111);
	            this.state = 1711;
	            this.identifierList();
	            break;
	        case Dart2Parser.T__112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1712;
	            this.match(Dart2Parser.T__112);
	            this.state = 1713;
	            this.identifierList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Dart2Parser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1716;
	        this.identifier();
	        this.state = 1721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 1717;
	            this.match(Dart2Parser.T__0);
	            this.state = 1718;
	            this.identifier();
	            this.state = 1723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryExport() {
	    let localctx = new LibraryExportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Dart2Parser.RULE_libraryExport);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.metadata();
	        this.state = 1725;
	        this.match(Dart2Parser.T__113);
	        this.state = 1726;
	        this.configurableUri();
	        this.state = 1730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__111 || _la===Dart2Parser.T__112) {
	            this.state = 1727;
	            this.combinator();
	            this.state = 1732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1733;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partDirective() {
	    let localctx = new PartDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Dart2Parser.RULE_partDirective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1735;
	        this.metadata();
	        this.state = 1736;
	        this.match(Dart2Parser.T__114);
	        this.state = 1737;
	        this.uri();
	        this.state = 1738;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partHeader() {
	    let localctx = new PartHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Dart2Parser.RULE_partHeader);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1740;
	        this.metadata();
	        this.state = 1741;
	        this.match(Dart2Parser.T__114);
	        this.state = 1742;
	        this.match(Dart2Parser.T__115);
	        this.state = 1743;
	        this.identifier();
	        this.state = 1748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__19) {
	            this.state = 1744;
	            this.match(Dart2Parser.T__19);
	            this.state = 1745;
	            this.identifier();
	            this.state = 1750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1751;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partDeclaration() {
	    let localctx = new PartDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Dart2Parser.RULE_partDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.partHeader();
	        this.state = 1757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Dart2Parser.T__1) | (1 << Dart2Parser.T__2) | (1 << Dart2Parser.T__3) | (1 << Dart2Parser.T__5) | (1 << Dart2Parser.T__21) | (1 << Dart2Parser.T__22) | (1 << Dart2Parser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Dart2Parser.T__31 - 32)) | (1 << (Dart2Parser.T__32 - 32)) | (1 << (Dart2Parser.T__37 - 32)) | (1 << (Dart2Parser.T__40 - 32)))) !== 0) || _la===Dart2Parser.T__116 || _la===Dart2Parser.IDENTIFIER) {
	            this.state = 1754;
	            this.topLevelDefinition();
	            this.state = 1759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1760;
	        this.match(Dart2Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uri() {
	    let localctx = new UriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Dart2Parser.RULE_uri);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1762;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurableUri() {
	    let localctx = new ConfigurableUriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Dart2Parser.RULE_configurableUri);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.uri();
	        this.state = 1768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__88) {
	            this.state = 1765;
	            this.configurationUri();
	            this.state = 1770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationUri() {
	    let localctx = new ConfigurationUriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Dart2Parser.RULE_configurationUri);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1771;
	        this.match(Dart2Parser.T__88);
	        this.state = 1772;
	        this.match(Dart2Parser.T__13);
	        this.state = 1773;
	        this.uriTest();
	        this.state = 1774;
	        this.match(Dart2Parser.T__14);
	        this.state = 1775;
	        this.uri();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uriTest() {
	    let localctx = new UriTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Dart2Parser.RULE_uriTest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1777;
	        this.dottedIdentifierList();
	        this.state = 1780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__30) {
	            this.state = 1778;
	            this.match(Dart2Parser.T__30);
	            this.state = 1779;
	            this.stringLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtype() {
	    let localctx = new DtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Dart2Parser.RULE_dtype);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1782;
	        this.typeName();
	        this.state = 1784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 1783;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Dart2Parser.RULE_typeName);
	    try {
	        this.state = 1788;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Dart2Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1786;
	            this.qualified();
	            break;
	        case Dart2Parser.T__5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1787;
	            this.match(Dart2Parser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Dart2Parser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1790;
	        this.match(Dart2Parser.T__38);
	        this.state = 1791;
	        this.typeList();
	        this.state = 1792;
	        this.match(Dart2Parser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Dart2Parser.RULE_typeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.dtype();
	        this.state = 1799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Dart2Parser.T__0) {
	            this.state = 1795;
	            this.match(Dart2Parser.T__0);
	            this.state = 1796;
	            this.dtype();
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAlias() {
	    let localctx = new TypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Dart2Parser.RULE_typeAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1802;
	        this.metadata();
	        this.state = 1803;
	        this.match(Dart2Parser.T__116);
	        this.state = 1804;
	        this.typeAliasBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAliasBody() {
	    let localctx = new TypeAliasBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Dart2Parser.RULE_typeAliasBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1806;
	        this.functionTypeAlias();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeAlias() {
	    let localctx = new FunctionTypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Dart2Parser.RULE_functionTypeAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        this.functionPrefix();
	        this.state = 1810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Dart2Parser.T__38) {
	            this.state = 1809;
	            this.typeParameters();
	        }

	        this.state = 1812;
	        this.formalParameterList();
	        this.state = 1813;
	        this.match(Dart2Parser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionPrefix() {
	    let localctx = new FunctionPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Dart2Parser.RULE_functionPrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 1815;
	            this.returnType();

	        }
	        this.state = 1818;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Dart2Parser.EOF = antlr4.Token.EOF;
Dart2Parser.T__0 = 1;
Dart2Parser.T__1 = 2;
Dart2Parser.T__2 = 3;
Dart2Parser.T__3 = 4;
Dart2Parser.T__4 = 5;
Dart2Parser.T__5 = 6;
Dart2Parser.T__6 = 7;
Dart2Parser.T__7 = 8;
Dart2Parser.T__8 = 9;
Dart2Parser.T__9 = 10;
Dart2Parser.T__10 = 11;
Dart2Parser.T__11 = 12;
Dart2Parser.T__12 = 13;
Dart2Parser.T__13 = 14;
Dart2Parser.T__14 = 15;
Dart2Parser.T__15 = 16;
Dart2Parser.T__16 = 17;
Dart2Parser.T__17 = 18;
Dart2Parser.T__18 = 19;
Dart2Parser.T__19 = 20;
Dart2Parser.T__20 = 21;
Dart2Parser.T__21 = 22;
Dart2Parser.T__22 = 23;
Dart2Parser.T__23 = 24;
Dart2Parser.T__24 = 25;
Dart2Parser.T__25 = 26;
Dart2Parser.T__26 = 27;
Dart2Parser.T__27 = 28;
Dart2Parser.T__28 = 29;
Dart2Parser.T__29 = 30;
Dart2Parser.T__30 = 31;
Dart2Parser.T__31 = 32;
Dart2Parser.T__32 = 33;
Dart2Parser.T__33 = 34;
Dart2Parser.T__34 = 35;
Dart2Parser.T__35 = 36;
Dart2Parser.T__36 = 37;
Dart2Parser.T__37 = 38;
Dart2Parser.T__38 = 39;
Dart2Parser.T__39 = 40;
Dart2Parser.T__40 = 41;
Dart2Parser.T__41 = 42;
Dart2Parser.T__42 = 43;
Dart2Parser.T__43 = 44;
Dart2Parser.T__44 = 45;
Dart2Parser.T__45 = 46;
Dart2Parser.T__46 = 47;
Dart2Parser.T__47 = 48;
Dart2Parser.T__48 = 49;
Dart2Parser.T__49 = 50;
Dart2Parser.T__50 = 51;
Dart2Parser.T__51 = 52;
Dart2Parser.T__52 = 53;
Dart2Parser.T__53 = 54;
Dart2Parser.T__54 = 55;
Dart2Parser.T__55 = 56;
Dart2Parser.T__56 = 57;
Dart2Parser.T__57 = 58;
Dart2Parser.T__58 = 59;
Dart2Parser.T__59 = 60;
Dart2Parser.T__60 = 61;
Dart2Parser.T__61 = 62;
Dart2Parser.T__62 = 63;
Dart2Parser.T__63 = 64;
Dart2Parser.T__64 = 65;
Dart2Parser.T__65 = 66;
Dart2Parser.T__66 = 67;
Dart2Parser.T__67 = 68;
Dart2Parser.T__68 = 69;
Dart2Parser.T__69 = 70;
Dart2Parser.T__70 = 71;
Dart2Parser.T__71 = 72;
Dart2Parser.T__72 = 73;
Dart2Parser.T__73 = 74;
Dart2Parser.T__74 = 75;
Dart2Parser.T__75 = 76;
Dart2Parser.T__76 = 77;
Dart2Parser.T__77 = 78;
Dart2Parser.T__78 = 79;
Dart2Parser.T__79 = 80;
Dart2Parser.T__80 = 81;
Dart2Parser.T__81 = 82;
Dart2Parser.T__82 = 83;
Dart2Parser.T__83 = 84;
Dart2Parser.T__84 = 85;
Dart2Parser.T__85 = 86;
Dart2Parser.T__86 = 87;
Dart2Parser.T__87 = 88;
Dart2Parser.T__88 = 89;
Dart2Parser.T__89 = 90;
Dart2Parser.T__90 = 91;
Dart2Parser.T__91 = 92;
Dart2Parser.T__92 = 93;
Dart2Parser.T__93 = 94;
Dart2Parser.T__94 = 95;
Dart2Parser.T__95 = 96;
Dart2Parser.T__96 = 97;
Dart2Parser.T__97 = 98;
Dart2Parser.T__98 = 99;
Dart2Parser.T__99 = 100;
Dart2Parser.T__100 = 101;
Dart2Parser.T__101 = 102;
Dart2Parser.T__102 = 103;
Dart2Parser.T__103 = 104;
Dart2Parser.T__104 = 105;
Dart2Parser.T__105 = 106;
Dart2Parser.T__106 = 107;
Dart2Parser.T__107 = 108;
Dart2Parser.T__108 = 109;
Dart2Parser.T__109 = 110;
Dart2Parser.T__110 = 111;
Dart2Parser.T__111 = 112;
Dart2Parser.T__112 = 113;
Dart2Parser.T__113 = 114;
Dart2Parser.T__114 = 115;
Dart2Parser.T__115 = 116;
Dart2Parser.T__116 = 117;
Dart2Parser.WHITESPACE = 118;
Dart2Parser.NUMBER = 119;
Dart2Parser.HEX_NUMBER = 120;
Dart2Parser.SingleLineString = 121;
Dart2Parser.MultiLineString = 122;
Dart2Parser.NEWLINE = 123;
Dart2Parser.IDENTIFIER = 124;
Dart2Parser.SINGLE_LINE_COMMENT = 125;
Dart2Parser.MULTI_LINE_COMMENT = 126;

Dart2Parser.RULE_compilationUnit = 0;
Dart2Parser.RULE_variableDeclaration = 1;
Dart2Parser.RULE_declaredIdentifier = 2;
Dart2Parser.RULE_finalConstVarOrType = 3;
Dart2Parser.RULE_varOrType = 4;
Dart2Parser.RULE_initializedVariableDeclaration = 5;
Dart2Parser.RULE_initializedIdentifier = 6;
Dart2Parser.RULE_initializedIdentifierList = 7;
Dart2Parser.RULE_functionSignature = 8;
Dart2Parser.RULE_formalParameterPart = 9;
Dart2Parser.RULE_returnType = 10;
Dart2Parser.RULE_functionBody = 11;
Dart2Parser.RULE_block = 12;
Dart2Parser.RULE_formalParameterList = 13;
Dart2Parser.RULE_normalFormalParameters = 14;
Dart2Parser.RULE_optionalFormalParameters = 15;
Dart2Parser.RULE_optionalPositionalFormalParameters = 16;
Dart2Parser.RULE_namedFormalParameters = 17;
Dart2Parser.RULE_normalFormalParameter = 18;
Dart2Parser.RULE_functionFormalParameter = 19;
Dart2Parser.RULE_simpleFormalParameter = 20;
Dart2Parser.RULE_fieldFormalParameter = 21;
Dart2Parser.RULE_defaultFormalParameter = 22;
Dart2Parser.RULE_defaultNamedParameter = 23;
Dart2Parser.RULE_classDefinition = 24;
Dart2Parser.RULE_mixins = 25;
Dart2Parser.RULE_classMemberDefinition = 26;
Dart2Parser.RULE_methodSignature = 27;
Dart2Parser.RULE_declaration = 28;
Dart2Parser.RULE_staticFinalDeclarationList = 29;
Dart2Parser.RULE_staticFinalDeclaration = 30;
Dart2Parser.RULE_operatorSignature = 31;
Dart2Parser.RULE_operator_ = 32;
Dart2Parser.RULE_binaryOperator = 33;
Dart2Parser.RULE_getterSignature = 34;
Dart2Parser.RULE_setterSignature = 35;
Dart2Parser.RULE_constructorSignature = 36;
Dart2Parser.RULE_redirection = 37;
Dart2Parser.RULE_initializers = 38;
Dart2Parser.RULE_initializerListEntry = 39;
Dart2Parser.RULE_fieldInitializer = 40;
Dart2Parser.RULE_factoryConstructorSignature = 41;
Dart2Parser.RULE_redirectingFactoryConstructorSignature = 42;
Dart2Parser.RULE_constantConstructorSignature = 43;
Dart2Parser.RULE_superclass = 44;
Dart2Parser.RULE_interfaces = 45;
Dart2Parser.RULE_mixinApplicationClass = 46;
Dart2Parser.RULE_mixinApplication = 47;
Dart2Parser.RULE_enumType = 48;
Dart2Parser.RULE_enumEntry = 49;
Dart2Parser.RULE_typeParameter = 50;
Dart2Parser.RULE_typeParameters = 51;
Dart2Parser.RULE_metadata = 52;
Dart2Parser.RULE_expression = 53;
Dart2Parser.RULE_expressionWithoutCascade = 54;
Dart2Parser.RULE_expressionList = 55;
Dart2Parser.RULE_primary = 56;
Dart2Parser.RULE_literal = 57;
Dart2Parser.RULE_nullLiteral = 58;
Dart2Parser.RULE_numericLiteral = 59;
Dart2Parser.RULE_booleanLiteral = 60;
Dart2Parser.RULE_stringLiteral = 61;
Dart2Parser.RULE_stringInterpolation = 62;
Dart2Parser.RULE_symbolLiteral = 63;
Dart2Parser.RULE_listLiteral = 64;
Dart2Parser.RULE_mapLiteral = 65;
Dart2Parser.RULE_mapLiteralEntry = 66;
Dart2Parser.RULE_throwExpression = 67;
Dart2Parser.RULE_throwExpressionWithoutCascade = 68;
Dart2Parser.RULE_functionExpression = 69;
Dart2Parser.RULE_thisExpression = 70;
Dart2Parser.RULE_nayaExpression = 71;
Dart2Parser.RULE_constObjectExpression = 72;
Dart2Parser.RULE_arguments = 73;
Dart2Parser.RULE_argumentList = 74;
Dart2Parser.RULE_namedArgument = 75;
Dart2Parser.RULE_cascadeSection = 76;
Dart2Parser.RULE_cascadeSelector = 77;
Dart2Parser.RULE_argumentPart = 78;
Dart2Parser.RULE_assignmentOperator = 79;
Dart2Parser.RULE_compoundAssignmentOperator = 80;
Dart2Parser.RULE_conditionalExpression = 81;
Dart2Parser.RULE_ifNullExpression = 82;
Dart2Parser.RULE_logicalOrExpression = 83;
Dart2Parser.RULE_logicalAndExpression = 84;
Dart2Parser.RULE_equalityExpression = 85;
Dart2Parser.RULE_equalityOperator = 86;
Dart2Parser.RULE_relationalExpression = 87;
Dart2Parser.RULE_relationalOperator = 88;
Dart2Parser.RULE_bitwiseOrExpression = 89;
Dart2Parser.RULE_bitwiseXorExpression = 90;
Dart2Parser.RULE_bitwiseAndExpression = 91;
Dart2Parser.RULE_bitwiseOperator = 92;
Dart2Parser.RULE_shiftExpression = 93;
Dart2Parser.RULE_shiftOperator = 94;
Dart2Parser.RULE_additiveExpression = 95;
Dart2Parser.RULE_additiveOperator = 96;
Dart2Parser.RULE_multiplicativeExpression = 97;
Dart2Parser.RULE_multiplicativeOperator = 98;
Dart2Parser.RULE_unaryExpression = 99;
Dart2Parser.RULE_prefixOperator = 100;
Dart2Parser.RULE_minusOperator = 101;
Dart2Parser.RULE_negationOperator = 102;
Dart2Parser.RULE_tildeOperator = 103;
Dart2Parser.RULE_awaitExpression = 104;
Dart2Parser.RULE_postfixExpression = 105;
Dart2Parser.RULE_postfixOperator = 106;
Dart2Parser.RULE_selector = 107;
Dart2Parser.RULE_incrementOperator = 108;
Dart2Parser.RULE_assignableExpression = 109;
Dart2Parser.RULE_unconditionalAssignableSelector = 110;
Dart2Parser.RULE_assignableSelector = 111;
Dart2Parser.RULE_identifier = 112;
Dart2Parser.RULE_qualified = 113;
Dart2Parser.RULE_typeTest = 114;
Dart2Parser.RULE_isOperator = 115;
Dart2Parser.RULE_typeCast = 116;
Dart2Parser.RULE_asOperator = 117;
Dart2Parser.RULE_statements = 118;
Dart2Parser.RULE_statement = 119;
Dart2Parser.RULE_nonLabledStatment = 120;
Dart2Parser.RULE_expressionStatement = 121;
Dart2Parser.RULE_localVariableDeclaration = 122;
Dart2Parser.RULE_localFunctionDeclaration = 123;
Dart2Parser.RULE_ifStatement = 124;
Dart2Parser.RULE_forStatement = 125;
Dart2Parser.RULE_forLoopParts = 126;
Dart2Parser.RULE_forInitializerStatement = 127;
Dart2Parser.RULE_whileStatement = 128;
Dart2Parser.RULE_doStatement = 129;
Dart2Parser.RULE_switchStatement = 130;
Dart2Parser.RULE_switchCase = 131;
Dart2Parser.RULE_defaultCase = 132;
Dart2Parser.RULE_rethrowStatment = 133;
Dart2Parser.RULE_tryStatement = 134;
Dart2Parser.RULE_onPart = 135;
Dart2Parser.RULE_catchPart = 136;
Dart2Parser.RULE_finallyPart = 137;
Dart2Parser.RULE_returnStatement = 138;
Dart2Parser.RULE_label = 139;
Dart2Parser.RULE_breakStatement = 140;
Dart2Parser.RULE_continueStatement = 141;
Dart2Parser.RULE_yieldStatement = 142;
Dart2Parser.RULE_yieldEachStatement = 143;
Dart2Parser.RULE_assertStatement = 144;
Dart2Parser.RULE_assertion = 145;
Dart2Parser.RULE_topLevelDefinition = 146;
Dart2Parser.RULE_getOrSet = 147;
Dart2Parser.RULE_libraryDefinition = 148;
Dart2Parser.RULE_scriptTag = 149;
Dart2Parser.RULE_libraryName = 150;
Dart2Parser.RULE_importOrExport = 151;
Dart2Parser.RULE_dottedIdentifierList = 152;
Dart2Parser.RULE_libraryimport = 153;
Dart2Parser.RULE_importSpecification = 154;
Dart2Parser.RULE_combinator = 155;
Dart2Parser.RULE_identifierList = 156;
Dart2Parser.RULE_libraryExport = 157;
Dart2Parser.RULE_partDirective = 158;
Dart2Parser.RULE_partHeader = 159;
Dart2Parser.RULE_partDeclaration = 160;
Dart2Parser.RULE_uri = 161;
Dart2Parser.RULE_configurableUri = 162;
Dart2Parser.RULE_configurationUri = 163;
Dart2Parser.RULE_uriTest = 164;
Dart2Parser.RULE_dtype = 165;
Dart2Parser.RULE_typeName = 166;
Dart2Parser.RULE_typeArguments = 167;
Dart2Parser.RULE_typeList = 168;
Dart2Parser.RULE_typeAlias = 169;
Dart2Parser.RULE_typeAliasBody = 170;
Dart2Parser.RULE_functionTypeAlias = 171;
Dart2Parser.RULE_functionPrefix = 172;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_compilationUnit;
    }

	libraryDefinition() {
	    return this.getTypedRuleContext(LibraryDefinitionContext,0);
	};

	partDeclaration() {
	    return this.getTypedRuleContext(PartDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_variableDeclaration;
    }

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class DeclaredIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_declaredIdentifier;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	finalConstVarOrType() {
	    return this.getTypedRuleContext(FinalConstVarOrTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDeclaredIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDeclaredIdentifier(this);
		}
	}


}



class FinalConstVarOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_finalConstVarOrType;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	varOrType() {
	    return this.getTypedRuleContext(VarOrTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFinalConstVarOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFinalConstVarOrType(this);
		}
	}


}



class VarOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_varOrType;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterVarOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitVarOrType(this);
		}
	}


}



class InitializedVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_initializedVariableDeclaration;
    }

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	initializedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InitializedIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInitializedVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInitializedVariableDeclaration(this);
		}
	}


}



class InitializedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_initializedIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInitializedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInitializedIdentifier(this);
		}
	}


}



class InitializedIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_initializedIdentifierList;
    }

	initializedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InitializedIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInitializedIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInitializedIdentifierList(this);
		}
	}


}



class FunctionSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionSignature;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionSignature(this);
		}
	}


}



class FormalParameterPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_formalParameterPart;
    }

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFormalParameterPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFormalParameterPart(this);
		}
	}


}



class ReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_returnType;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitReturnType(this);
		}
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionBody(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_block;
    }

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBlock(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_formalParameterList;
    }

	normalFormalParameters() {
	    return this.getTypedRuleContext(NormalFormalParametersContext,0);
	};

	optionalFormalParameters() {
	    return this.getTypedRuleContext(OptionalFormalParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class NormalFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_normalFormalParameters;
    }

	normalFormalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NormalFormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(NormalFormalParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNormalFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNormalFormalParameters(this);
		}
	}


}



class OptionalFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_optionalFormalParameters;
    }

	optionalPositionalFormalParameters() {
	    return this.getTypedRuleContext(OptionalPositionalFormalParametersContext,0);
	};

	namedFormalParameters() {
	    return this.getTypedRuleContext(NamedFormalParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterOptionalFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitOptionalFormalParameters(this);
		}
	}


}



class OptionalPositionalFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_optionalPositionalFormalParameters;
    }

	defaultFormalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultFormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(DefaultFormalParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterOptionalPositionalFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitOptionalPositionalFormalParameters(this);
		}
	}


}



class NamedFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_namedFormalParameters;
    }

	defaultNamedParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultNamedParameterContext);
	    } else {
	        return this.getTypedRuleContext(DefaultNamedParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNamedFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNamedFormalParameters(this);
		}
	}


}



class NormalFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_normalFormalParameter;
    }

	functionFormalParameter() {
	    return this.getTypedRuleContext(FunctionFormalParameterContext,0);
	};

	fieldFormalParameter() {
	    return this.getTypedRuleContext(FieldFormalParameterContext,0);
	};

	simpleFormalParameter() {
	    return this.getTypedRuleContext(SimpleFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNormalFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNormalFormalParameter(this);
		}
	}


}



class FunctionFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionFormalParameter;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionFormalParameter(this);
		}
	}


}



class SimpleFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_simpleFormalParameter;
    }

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSimpleFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSimpleFormalParameter(this);
		}
	}


}



class FieldFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_fieldFormalParameter;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	finalConstVarOrType() {
	    return this.getTypedRuleContext(FinalConstVarOrTypeContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFieldFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFieldFormalParameter(this);
		}
	}


}



class DefaultFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_defaultFormalParameter;
    }

	normalFormalParameter() {
	    return this.getTypedRuleContext(NormalFormalParameterContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDefaultFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDefaultFormalParameter(this);
		}
	}


}



class DefaultNamedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_defaultNamedParameter;
    }

	normalFormalParameter() {
	    return this.getTypedRuleContext(NormalFormalParameterContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDefaultNamedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDefaultNamedParameter(this);
		}
	}


}



class ClassDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_classDefinition;
    }

	metadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MetadataContext);
	    } else {
	        return this.getTypedRuleContext(MetadataContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	superclass() {
	    return this.getTypedRuleContext(SuperclassContext,0);
	};

	mixins() {
	    return this.getTypedRuleContext(MixinsContext,0);
	};

	interfaces() {
	    return this.getTypedRuleContext(InterfacesContext,0);
	};

	classMemberDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassMemberDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ClassMemberDefinitionContext,i);
	    }
	};

	mixinApplicationClass() {
	    return this.getTypedRuleContext(MixinApplicationClassContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterClassDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitClassDefinition(this);
		}
	}


}



class MixinsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_mixins;
    }

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMixins(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMixins(this);
		}
	}


}



class ClassMemberDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_classMemberDefinition;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	methodSignature() {
	    return this.getTypedRuleContext(MethodSignatureContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterClassMemberDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitClassMemberDefinition(this);
		}
	}


}



class MethodSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_methodSignature;
    }

	constructorSignature() {
	    return this.getTypedRuleContext(ConstructorSignatureContext,0);
	};

	initializers() {
	    return this.getTypedRuleContext(InitializersContext,0);
	};

	factoryConstructorSignature() {
	    return this.getTypedRuleContext(FactoryConstructorSignatureContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	operatorSignature() {
	    return this.getTypedRuleContext(OperatorSignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMethodSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMethodSignature(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_declaration;
    }

	constantConstructorSignature() {
	    return this.getTypedRuleContext(ConstantConstructorSignatureContext,0);
	};

	redirection() {
	    return this.getTypedRuleContext(RedirectionContext,0);
	};

	initializers() {
	    return this.getTypedRuleContext(InitializersContext,0);
	};

	constructorSignature() {
	    return this.getTypedRuleContext(ConstructorSignatureContext,0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	operatorSignature() {
	    return this.getTypedRuleContext(OperatorSignatureContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	staticFinalDeclarationList() {
	    return this.getTypedRuleContext(StaticFinalDeclarationListContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	initializedIdentifierList() {
	    return this.getTypedRuleContext(InitializedIdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class StaticFinalDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_staticFinalDeclarationList;
    }

	staticFinalDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StaticFinalDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(StaticFinalDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStaticFinalDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStaticFinalDeclarationList(this);
		}
	}


}



class StaticFinalDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_staticFinalDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStaticFinalDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStaticFinalDeclaration(this);
		}
	}


}



class OperatorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_operatorSignature;
    }

	operator_() {
	    return this.getTypedRuleContext(Operator_Context,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterOperatorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitOperatorSignature(this);
		}
	}


}



class Operator_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_operator_;
    }

	binaryOperator() {
	    return this.getTypedRuleContext(BinaryOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterOperator_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitOperator_(this);
		}
	}


}



class BinaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_binaryOperator;
    }

	multiplicativeOperator() {
	    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
	};

	additiveOperator() {
	    return this.getTypedRuleContext(AdditiveOperatorContext,0);
	};

	shiftOperator() {
	    return this.getTypedRuleContext(ShiftOperatorContext,0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	bitwiseOperator() {
	    return this.getTypedRuleContext(BitwiseOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBinaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBinaryOperator(this);
		}
	}


}



class GetterSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_getterSignature;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterGetterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitGetterSignature(this);
		}
	}


}



class SetterSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_setterSignature;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSetterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSetterSignature(this);
		}
	}


}



class ConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_constructorSignature;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConstructorSignature(this);
		}
	}


}



class RedirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_redirection;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterRedirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitRedirection(this);
		}
	}


}



class InitializersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_initializers;
    }

	initializerListEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerListEntryContext);
	    } else {
	        return this.getTypedRuleContext(InitializerListEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInitializers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInitializers(this);
		}
	}


}



class InitializerListEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_initializerListEntry;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldInitializer() {
	    return this.getTypedRuleContext(FieldInitializerContext,0);
	};

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInitializerListEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInitializerListEntry(this);
		}
	}


}



class FieldInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_fieldInitializer;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	cascadeSection = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CascadeSectionContext);
	    } else {
	        return this.getTypedRuleContext(CascadeSectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFieldInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFieldInitializer(this);
		}
	}


}



class FactoryConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_factoryConstructorSignature;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFactoryConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFactoryConstructorSignature(this);
		}
	}


}



class RedirectingFactoryConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_redirectingFactoryConstructorSignature;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterRedirectingFactoryConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitRedirectingFactoryConstructorSignature(this);
		}
	}


}



class ConstantConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_constantConstructorSignature;
    }

	qualified() {
	    return this.getTypedRuleContext(QualifiedContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConstantConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConstantConstructorSignature(this);
		}
	}


}



class SuperclassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_superclass;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSuperclass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSuperclass(this);
		}
	}


}



class InterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_interfaces;
    }

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterInterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitInterfaces(this);
		}
	}


}



class MixinApplicationClassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_mixinApplicationClass;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	mixinApplication() {
	    return this.getTypedRuleContext(MixinApplicationContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMixinApplicationClass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMixinApplicationClass(this);
		}
	}


}



class MixinApplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_mixinApplication;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	mixins() {
	    return this.getTypedRuleContext(MixinsContext,0);
	};

	interfaces() {
	    return this.getTypedRuleContext(InterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMixinApplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMixinApplication(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_enumType;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enumEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumEntryContext);
	    } else {
	        return this.getTypedRuleContext(EnumEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitEnumType(this);
		}
	}


}



class EnumEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_enumEntry;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterEnumEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitEnumEntry(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeParameter;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeParameters;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeParameters(this);
		}
	}


}



class MetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_metadata;
    }

	qualified = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	arguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMetadata(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_expression;
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	cascadeSection = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CascadeSectionContext);
	    } else {
	        return this.getTypedRuleContext(CascadeSectionContext,i);
	    }
	};

	throwExpression() {
	    return this.getTypedRuleContext(ThrowExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitExpression(this);
		}
	}


}



class ExpressionWithoutCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_expressionWithoutCascade;
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	throwExpressionWithoutCascade() {
	    return this.getTypedRuleContext(ThrowExpressionWithoutCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterExpressionWithoutCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitExpressionWithoutCascade(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_primary;
    }

	thisExpression() {
	    return this.getTypedRuleContext(ThisExpressionContext,0);
	};

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	functionExpression() {
	    return this.getTypedRuleContext(FunctionExpressionContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nayaExpression() {
	    return this.getTypedRuleContext(NayaExpressionContext,0);
	};

	constObjectExpression() {
	    return this.getTypedRuleContext(ConstObjectExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPrimary(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_literal;
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	symbolLiteral() {
	    return this.getTypedRuleContext(SymbolLiteralContext,0);
	};

	mapLiteral() {
	    return this.getTypedRuleContext(MapLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLiteral(this);
		}
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_nullLiteral;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_numericLiteral;
    }

	NUMBER() {
	    return this.getToken(Dart2Parser.NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(Dart2Parser.HEX_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_booleanLiteral;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_stringLiteral;
    }

	MultiLineString = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Dart2Parser.MultiLineString);
	    } else {
	        return this.getToken(Dart2Parser.MultiLineString, i);
	    }
	};


	SingleLineString = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Dart2Parser.SingleLineString);
	    } else {
	        return this.getToken(Dart2Parser.SingleLineString, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class StringInterpolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_stringInterpolation;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStringInterpolation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStringInterpolation(this);
		}
	}


}



class SymbolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_symbolLiteral;
    }

	operator_() {
	    return this.getTypedRuleContext(Operator_Context,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSymbolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSymbolLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_listLiteral;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class MapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_mapLiteral;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	mapLiteralEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapLiteralEntryContext);
	    } else {
	        return this.getTypedRuleContext(MapLiteralEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMapLiteral(this);
		}
	}


}



class MapLiteralEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_mapLiteralEntry;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMapLiteralEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMapLiteralEntry(this);
		}
	}


}



class ThrowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_throwExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterThrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitThrowExpression(this);
		}
	}


}



class ThrowExpressionWithoutCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_throwExpressionWithoutCascade;
    }

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterThrowExpressionWithoutCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitThrowExpressionWithoutCascade(this);
		}
	}


}



class FunctionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionExpression;
    }

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionExpression(this);
		}
	}


}



class ThisExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_thisExpression;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitThisExpression(this);
		}
	}


}



class NayaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_nayaExpression;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNayaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNayaExpression(this);
		}
	}


}



class ConstObjectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_constObjectExpression;
    }

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConstObjectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConstObjectExpression(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_arguments;
    }

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitArguments(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_argumentList;
    }

	namedArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedArgumentContext);
	    } else {
	        return this.getTypedRuleContext(NamedArgumentContext,i);
	    }
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class NamedArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_namedArgument;
    }

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNamedArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNamedArgument(this);
		}
	}


}



class CascadeSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_cascadeSection;
    }

	cascadeSelector() {
	    return this.getTypedRuleContext(CascadeSelectorContext,0);
	};

	assignableSelector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignableSelectorContext);
	    } else {
	        return this.getTypedRuleContext(AssignableSelectorContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	argumentPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentPartContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCascadeSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCascadeSection(this);
		}
	}


}



class CascadeSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_cascadeSelector;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCascadeSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCascadeSelector(this);
		}
	}


}



class ArgumentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_argumentPart;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterArgumentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitArgumentPart(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_assignmentOperator;
    }

	compoundAssignmentOperator() {
	    return this.getTypedRuleContext(CompoundAssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class CompoundAssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_compoundAssignmentOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCompoundAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCompoundAssignmentOperator(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_conditionalExpression;
    }

	ifNullExpression() {
	    return this.getTypedRuleContext(IfNullExpressionContext,0);
	};

	expressionWithoutCascade = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionWithoutCascadeContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionWithoutCascadeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class IfNullExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_ifNullExpression;
    }

	logicalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIfNullExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIfNullExpression(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_logicalAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	equalityOperator() {
	    return this.getTypedRuleContext(EqualityOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class EqualityOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_equalityOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterEqualityOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitEqualityOperator(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_relationalExpression;
    }

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	typeTest() {
	    return this.getTypedRuleContext(TypeTestContext,0);
	};

	typeCast() {
	    return this.getTypedRuleContext(TypeCastContext,0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class RelationalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_relationalOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterRelationalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitRelationalOperator(this);
		}
	}


}



class BitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_bitwiseOrExpression;
    }

	bitwiseXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseXorExpressionContext,i);
	    }
	};

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}


}



class BitwiseXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_bitwiseXorExpression;
    }

	bitwiseAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseAndExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBitwiseXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBitwiseXorExpression(this);
		}
	}


}



class BitwiseAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_bitwiseAndExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}


}



class BitwiseOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_bitwiseOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBitwiseOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBitwiseOperator(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	shiftOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftOperatorContext);
	    } else {
	        return this.getTypedRuleContext(ShiftOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_shiftOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitShiftOperator(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	additiveOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveOperatorContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class AdditiveOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_additiveOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAdditiveOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAdditiveOperator(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_multiplicativeExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	multiplicativeOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeOperatorContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class MultiplicativeOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_multiplicativeOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMultiplicativeOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMultiplicativeOperator(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_unaryExpression;
    }

	prefixOperator() {
	    return this.getTypedRuleContext(PrefixOperatorContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	awaitExpression() {
	    return this.getTypedRuleContext(AwaitExpressionContext,0);
	};

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	minusOperator() {
	    return this.getTypedRuleContext(MinusOperatorContext,0);
	};

	tildeOperator() {
	    return this.getTypedRuleContext(TildeOperatorContext,0);
	};

	incrementOperator() {
	    return this.getTypedRuleContext(IncrementOperatorContext,0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class PrefixOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_prefixOperator;
    }

	minusOperator() {
	    return this.getTypedRuleContext(MinusOperatorContext,0);
	};

	negationOperator() {
	    return this.getTypedRuleContext(NegationOperatorContext,0);
	};

	tildeOperator() {
	    return this.getTypedRuleContext(TildeOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPrefixOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPrefixOperator(this);
		}
	}


}



class MinusOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_minusOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterMinusOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitMinusOperator(this);
		}
	}


}



class NegationOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_negationOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNegationOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNegationOperator(this);
		}
	}


}



class TildeOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_tildeOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTildeOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTildeOperator(this);
		}
	}


}



class AwaitExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_awaitExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAwaitExpression(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_postfixExpression;
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	postfixOperator() {
	    return this.getTypedRuleContext(PostfixOperatorContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class PostfixOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_postfixOperator;
    }

	incrementOperator() {
	    return this.getTypedRuleContext(IncrementOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPostfixOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPostfixOperator(this);
		}
	}


}



class SelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_selector;
    }

	assignableSelector() {
	    return this.getTypedRuleContext(AssignableSelectorContext,0);
	};

	argumentPart() {
	    return this.getTypedRuleContext(ArgumentPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSelector(this);
		}
	}


}



class IncrementOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_incrementOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIncrementOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIncrementOperator(this);
		}
	}


}



class AssignableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_assignableExpression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	assignableSelector() {
	    return this.getTypedRuleContext(AssignableSelectorContext,0);
	};

	argumentPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentPartContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentPartContext,i);
	    }
	};

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAssignableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAssignableExpression(this);
		}
	}


}



class UnconditionalAssignableSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_unconditionalAssignableSelector;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterUnconditionalAssignableSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitUnconditionalAssignableSelector(this);
		}
	}


}



class AssignableSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_assignableSelector;
    }

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAssignableSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAssignableSelector(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(Dart2Parser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class QualifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_qualified;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterQualified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitQualified(this);
		}
	}


}



class TypeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeTest;
    }

	isOperator() {
	    return this.getTypedRuleContext(IsOperatorContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeTest(this);
		}
	}


}



class IsOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_isOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIsOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIsOperator(this);
		}
	}


}



class TypeCastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeCast;
    }

	asOperator() {
	    return this.getTypedRuleContext(AsOperatorContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeCast(this);
		}
	}


}



class AsOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_asOperator;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAsOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAsOperator(this);
		}
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_statements;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStatements(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_statement;
    }

	nonLabledStatment() {
	    return this.getTypedRuleContext(NonLabledStatmentContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitStatement(this);
		}
	}


}



class NonLabledStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_nonLabledStatment;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	rethrowStatment() {
	    return this.getTypedRuleContext(RethrowStatmentContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	yieldEachStatement() {
	    return this.getTypedRuleContext(YieldEachStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	localFunctionDeclaration() {
	    return this.getTypedRuleContext(LocalFunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterNonLabledStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitNonLabledStatment(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_localVariableDeclaration;
    }

	initializedVariableDeclaration() {
	    return this.getTypedRuleContext(InitializedVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}


}



class LocalFunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_localFunctionDeclaration;
    }

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLocalFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLocalFunctionDeclaration(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_ifStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_forStatement;
    }

	forLoopParts() {
	    return this.getTypedRuleContext(ForLoopPartsContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForLoopPartsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_forLoopParts;
    }

	forInitializerStatement() {
	    return this.getTypedRuleContext(ForInitializerStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterForLoopParts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitForLoopParts(this);
		}
	}


}



class ForInitializerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_forInitializerStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterForInitializerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitForInitializerStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_whileStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_doStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_switchStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	switchCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchCaseContext);
	    } else {
	        return this.getTypedRuleContext(SwitchCaseContext,i);
	    }
	};

	defaultCase() {
	    return this.getTypedRuleContext(DefaultCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}



class SwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_switchCase;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitSwitchCase(this);
		}
	}


}



class DefaultCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_defaultCase;
    }

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDefaultCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDefaultCase(this);
		}
	}


}



class RethrowStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_rethrowStatment;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterRethrowStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitRethrowStatment(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_tryStatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	finallyPart() {
	    return this.getTypedRuleContext(FinallyPartContext,0);
	};

	onPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OnPartContext);
	    } else {
	        return this.getTypedRuleContext(OnPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class OnPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_onPart;
    }

	catchPart() {
	    return this.getTypedRuleContext(CatchPartContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterOnPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitOnPart(this);
		}
	}


}



class CatchPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_catchPart;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCatchPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCatchPart(this);
		}
	}


}



class FinallyPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_finallyPart;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFinallyPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFinallyPart(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_returnStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_label;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLabel(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_breakStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_continueStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_yieldStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitYieldStatement(this);
		}
	}


}



class YieldEachStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_yieldEachStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterYieldEachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitYieldEachStatement(this);
		}
	}


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_assertStatement;
    }

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAssertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAssertStatement(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_assertion;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitAssertion(this);
		}
	}


}



class TopLevelDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_topLevelDefinition;
    }

	classDefinition() {
	    return this.getTypedRuleContext(ClassDefinitionContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	typeAlias() {
	    return this.getTypedRuleContext(TypeAliasContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	staticFinalDeclarationList() {
	    return this.getTypedRuleContext(StaticFinalDeclarationListContext,0);
	};

	dtype() {
	    return this.getTypedRuleContext(DtypeContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTopLevelDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTopLevelDefinition(this);
		}
	}


}



class GetOrSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_getOrSet;
    }


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterGetOrSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitGetOrSet(this);
		}
	}


}



class LibraryDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_libraryDefinition;
    }

	scriptTag() {
	    return this.getTypedRuleContext(ScriptTagContext,0);
	};

	libraryName() {
	    return this.getTypedRuleContext(LibraryNameContext,0);
	};

	importOrExport = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportOrExportContext);
	    } else {
	        return this.getTypedRuleContext(ImportOrExportContext,i);
	    }
	};

	partDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(PartDirectiveContext,i);
	    }
	};

	topLevelDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopLevelDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(TopLevelDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLibraryDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLibraryDefinition(this);
		}
	}


}



class ScriptTagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_scriptTag;
    }

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Dart2Parser.NEWLINE);
	    } else {
	        return this.getToken(Dart2Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterScriptTag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitScriptTag(this);
		}
	}


}



class LibraryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_libraryName;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	dottedIdentifierList() {
	    return this.getTypedRuleContext(DottedIdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLibraryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLibraryName(this);
		}
	}


}



class ImportOrExportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_importOrExport;
    }

	libraryimport() {
	    return this.getTypedRuleContext(LibraryimportContext,0);
	};

	libraryExport() {
	    return this.getTypedRuleContext(LibraryExportContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterImportOrExport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitImportOrExport(this);
		}
	}


}



class DottedIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_dottedIdentifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDottedIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDottedIdentifierList(this);
		}
	}


}



class LibraryimportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_libraryimport;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	importSpecification() {
	    return this.getTypedRuleContext(ImportSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLibraryimport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLibraryimport(this);
		}
	}


}



class ImportSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_importSpecification;
    }

	configurableUri() {
	    return this.getTypedRuleContext(ConfigurableUriContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	combinator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CombinatorContext);
	    } else {
	        return this.getTypedRuleContext(CombinatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterImportSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitImportSpecification(this);
		}
	}


}



class CombinatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_combinator;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterCombinator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitCombinator(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class LibraryExportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_libraryExport;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	configurableUri() {
	    return this.getTypedRuleContext(ConfigurableUriContext,0);
	};

	combinator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CombinatorContext);
	    } else {
	        return this.getTypedRuleContext(CombinatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterLibraryExport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitLibraryExport(this);
		}
	}


}



class PartDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_partDirective;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	uri() {
	    return this.getTypedRuleContext(UriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPartDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPartDirective(this);
		}
	}


}



class PartHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_partHeader;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPartHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPartHeader(this);
		}
	}


}



class PartDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_partDeclaration;
    }

	partHeader() {
	    return this.getTypedRuleContext(PartHeaderContext,0);
	};

	EOF() {
	    return this.getToken(Dart2Parser.EOF, 0);
	};

	topLevelDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopLevelDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(TopLevelDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterPartDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitPartDeclaration(this);
		}
	}


}



class UriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_uri;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterUri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitUri(this);
		}
	}


}



class ConfigurableUriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_configurableUri;
    }

	uri() {
	    return this.getTypedRuleContext(UriContext,0);
	};

	configurationUri = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConfigurationUriContext);
	    } else {
	        return this.getTypedRuleContext(ConfigurationUriContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConfigurableUri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConfigurableUri(this);
		}
	}


}



class ConfigurationUriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_configurationUri;
    }

	uriTest() {
	    return this.getTypedRuleContext(UriTestContext,0);
	};

	uri() {
	    return this.getTypedRuleContext(UriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterConfigurationUri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitConfigurationUri(this);
		}
	}


}



class UriTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_uriTest;
    }

	dottedIdentifierList() {
	    return this.getTypedRuleContext(DottedIdentifierListContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterUriTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitUriTest(this);
		}
	}


}



class DtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_dtype;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterDtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitDtype(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeName;
    }

	qualified() {
	    return this.getTypedRuleContext(QualifiedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeName(this);
		}
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeArguments;
    }

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeArguments(this);
		}
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeList;
    }

	dtype = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DtypeContext);
	    } else {
	        return this.getTypedRuleContext(DtypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeList(this);
		}
	}


}



class TypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeAlias;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	typeAliasBody() {
	    return this.getTypedRuleContext(TypeAliasBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeAlias(this);
		}
	}


}



class TypeAliasBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_typeAliasBody;
    }

	functionTypeAlias() {
	    return this.getTypedRuleContext(FunctionTypeAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterTypeAliasBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitTypeAliasBody(this);
		}
	}


}



class FunctionTypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionTypeAlias;
    }

	functionPrefix() {
	    return this.getTypedRuleContext(FunctionPrefixContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionTypeAlias(this);
		}
	}


}



class FunctionPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Dart2Parser.RULE_functionPrefix;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.enterFunctionPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Dart2Listener ) {
	        listener.exitFunctionPrefix(this);
		}
	}


}




Dart2Parser.CompilationUnitContext = CompilationUnitContext; 
Dart2Parser.VariableDeclarationContext = VariableDeclarationContext; 
Dart2Parser.DeclaredIdentifierContext = DeclaredIdentifierContext; 
Dart2Parser.FinalConstVarOrTypeContext = FinalConstVarOrTypeContext; 
Dart2Parser.VarOrTypeContext = VarOrTypeContext; 
Dart2Parser.InitializedVariableDeclarationContext = InitializedVariableDeclarationContext; 
Dart2Parser.InitializedIdentifierContext = InitializedIdentifierContext; 
Dart2Parser.InitializedIdentifierListContext = InitializedIdentifierListContext; 
Dart2Parser.FunctionSignatureContext = FunctionSignatureContext; 
Dart2Parser.FormalParameterPartContext = FormalParameterPartContext; 
Dart2Parser.ReturnTypeContext = ReturnTypeContext; 
Dart2Parser.FunctionBodyContext = FunctionBodyContext; 
Dart2Parser.BlockContext = BlockContext; 
Dart2Parser.FormalParameterListContext = FormalParameterListContext; 
Dart2Parser.NormalFormalParametersContext = NormalFormalParametersContext; 
Dart2Parser.OptionalFormalParametersContext = OptionalFormalParametersContext; 
Dart2Parser.OptionalPositionalFormalParametersContext = OptionalPositionalFormalParametersContext; 
Dart2Parser.NamedFormalParametersContext = NamedFormalParametersContext; 
Dart2Parser.NormalFormalParameterContext = NormalFormalParameterContext; 
Dart2Parser.FunctionFormalParameterContext = FunctionFormalParameterContext; 
Dart2Parser.SimpleFormalParameterContext = SimpleFormalParameterContext; 
Dart2Parser.FieldFormalParameterContext = FieldFormalParameterContext; 
Dart2Parser.DefaultFormalParameterContext = DefaultFormalParameterContext; 
Dart2Parser.DefaultNamedParameterContext = DefaultNamedParameterContext; 
Dart2Parser.ClassDefinitionContext = ClassDefinitionContext; 
Dart2Parser.MixinsContext = MixinsContext; 
Dart2Parser.ClassMemberDefinitionContext = ClassMemberDefinitionContext; 
Dart2Parser.MethodSignatureContext = MethodSignatureContext; 
Dart2Parser.DeclarationContext = DeclarationContext; 
Dart2Parser.StaticFinalDeclarationListContext = StaticFinalDeclarationListContext; 
Dart2Parser.StaticFinalDeclarationContext = StaticFinalDeclarationContext; 
Dart2Parser.OperatorSignatureContext = OperatorSignatureContext; 
Dart2Parser.Operator_Context = Operator_Context; 
Dart2Parser.BinaryOperatorContext = BinaryOperatorContext; 
Dart2Parser.GetterSignatureContext = GetterSignatureContext; 
Dart2Parser.SetterSignatureContext = SetterSignatureContext; 
Dart2Parser.ConstructorSignatureContext = ConstructorSignatureContext; 
Dart2Parser.RedirectionContext = RedirectionContext; 
Dart2Parser.InitializersContext = InitializersContext; 
Dart2Parser.InitializerListEntryContext = InitializerListEntryContext; 
Dart2Parser.FieldInitializerContext = FieldInitializerContext; 
Dart2Parser.FactoryConstructorSignatureContext = FactoryConstructorSignatureContext; 
Dart2Parser.RedirectingFactoryConstructorSignatureContext = RedirectingFactoryConstructorSignatureContext; 
Dart2Parser.ConstantConstructorSignatureContext = ConstantConstructorSignatureContext; 
Dart2Parser.SuperclassContext = SuperclassContext; 
Dart2Parser.InterfacesContext = InterfacesContext; 
Dart2Parser.MixinApplicationClassContext = MixinApplicationClassContext; 
Dart2Parser.MixinApplicationContext = MixinApplicationContext; 
Dart2Parser.EnumTypeContext = EnumTypeContext; 
Dart2Parser.EnumEntryContext = EnumEntryContext; 
Dart2Parser.TypeParameterContext = TypeParameterContext; 
Dart2Parser.TypeParametersContext = TypeParametersContext; 
Dart2Parser.MetadataContext = MetadataContext; 
Dart2Parser.ExpressionContext = ExpressionContext; 
Dart2Parser.ExpressionWithoutCascadeContext = ExpressionWithoutCascadeContext; 
Dart2Parser.ExpressionListContext = ExpressionListContext; 
Dart2Parser.PrimaryContext = PrimaryContext; 
Dart2Parser.LiteralContext = LiteralContext; 
Dart2Parser.NullLiteralContext = NullLiteralContext; 
Dart2Parser.NumericLiteralContext = NumericLiteralContext; 
Dart2Parser.BooleanLiteralContext = BooleanLiteralContext; 
Dart2Parser.StringLiteralContext = StringLiteralContext; 
Dart2Parser.StringInterpolationContext = StringInterpolationContext; 
Dart2Parser.SymbolLiteralContext = SymbolLiteralContext; 
Dart2Parser.ListLiteralContext = ListLiteralContext; 
Dart2Parser.MapLiteralContext = MapLiteralContext; 
Dart2Parser.MapLiteralEntryContext = MapLiteralEntryContext; 
Dart2Parser.ThrowExpressionContext = ThrowExpressionContext; 
Dart2Parser.ThrowExpressionWithoutCascadeContext = ThrowExpressionWithoutCascadeContext; 
Dart2Parser.FunctionExpressionContext = FunctionExpressionContext; 
Dart2Parser.ThisExpressionContext = ThisExpressionContext; 
Dart2Parser.NayaExpressionContext = NayaExpressionContext; 
Dart2Parser.ConstObjectExpressionContext = ConstObjectExpressionContext; 
Dart2Parser.ArgumentsContext = ArgumentsContext; 
Dart2Parser.ArgumentListContext = ArgumentListContext; 
Dart2Parser.NamedArgumentContext = NamedArgumentContext; 
Dart2Parser.CascadeSectionContext = CascadeSectionContext; 
Dart2Parser.CascadeSelectorContext = CascadeSelectorContext; 
Dart2Parser.ArgumentPartContext = ArgumentPartContext; 
Dart2Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
Dart2Parser.CompoundAssignmentOperatorContext = CompoundAssignmentOperatorContext; 
Dart2Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
Dart2Parser.IfNullExpressionContext = IfNullExpressionContext; 
Dart2Parser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
Dart2Parser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
Dart2Parser.EqualityExpressionContext = EqualityExpressionContext; 
Dart2Parser.EqualityOperatorContext = EqualityOperatorContext; 
Dart2Parser.RelationalExpressionContext = RelationalExpressionContext; 
Dart2Parser.RelationalOperatorContext = RelationalOperatorContext; 
Dart2Parser.BitwiseOrExpressionContext = BitwiseOrExpressionContext; 
Dart2Parser.BitwiseXorExpressionContext = BitwiseXorExpressionContext; 
Dart2Parser.BitwiseAndExpressionContext = BitwiseAndExpressionContext; 
Dart2Parser.BitwiseOperatorContext = BitwiseOperatorContext; 
Dart2Parser.ShiftExpressionContext = ShiftExpressionContext; 
Dart2Parser.ShiftOperatorContext = ShiftOperatorContext; 
Dart2Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
Dart2Parser.AdditiveOperatorContext = AdditiveOperatorContext; 
Dart2Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
Dart2Parser.MultiplicativeOperatorContext = MultiplicativeOperatorContext; 
Dart2Parser.UnaryExpressionContext = UnaryExpressionContext; 
Dart2Parser.PrefixOperatorContext = PrefixOperatorContext; 
Dart2Parser.MinusOperatorContext = MinusOperatorContext; 
Dart2Parser.NegationOperatorContext = NegationOperatorContext; 
Dart2Parser.TildeOperatorContext = TildeOperatorContext; 
Dart2Parser.AwaitExpressionContext = AwaitExpressionContext; 
Dart2Parser.PostfixExpressionContext = PostfixExpressionContext; 
Dart2Parser.PostfixOperatorContext = PostfixOperatorContext; 
Dart2Parser.SelectorContext = SelectorContext; 
Dart2Parser.IncrementOperatorContext = IncrementOperatorContext; 
Dart2Parser.AssignableExpressionContext = AssignableExpressionContext; 
Dart2Parser.UnconditionalAssignableSelectorContext = UnconditionalAssignableSelectorContext; 
Dart2Parser.AssignableSelectorContext = AssignableSelectorContext; 
Dart2Parser.IdentifierContext = IdentifierContext; 
Dart2Parser.QualifiedContext = QualifiedContext; 
Dart2Parser.TypeTestContext = TypeTestContext; 
Dart2Parser.IsOperatorContext = IsOperatorContext; 
Dart2Parser.TypeCastContext = TypeCastContext; 
Dart2Parser.AsOperatorContext = AsOperatorContext; 
Dart2Parser.StatementsContext = StatementsContext; 
Dart2Parser.StatementContext = StatementContext; 
Dart2Parser.NonLabledStatmentContext = NonLabledStatmentContext; 
Dart2Parser.ExpressionStatementContext = ExpressionStatementContext; 
Dart2Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
Dart2Parser.LocalFunctionDeclarationContext = LocalFunctionDeclarationContext; 
Dart2Parser.IfStatementContext = IfStatementContext; 
Dart2Parser.ForStatementContext = ForStatementContext; 
Dart2Parser.ForLoopPartsContext = ForLoopPartsContext; 
Dart2Parser.ForInitializerStatementContext = ForInitializerStatementContext; 
Dart2Parser.WhileStatementContext = WhileStatementContext; 
Dart2Parser.DoStatementContext = DoStatementContext; 
Dart2Parser.SwitchStatementContext = SwitchStatementContext; 
Dart2Parser.SwitchCaseContext = SwitchCaseContext; 
Dart2Parser.DefaultCaseContext = DefaultCaseContext; 
Dart2Parser.RethrowStatmentContext = RethrowStatmentContext; 
Dart2Parser.TryStatementContext = TryStatementContext; 
Dart2Parser.OnPartContext = OnPartContext; 
Dart2Parser.CatchPartContext = CatchPartContext; 
Dart2Parser.FinallyPartContext = FinallyPartContext; 
Dart2Parser.ReturnStatementContext = ReturnStatementContext; 
Dart2Parser.LabelContext = LabelContext; 
Dart2Parser.BreakStatementContext = BreakStatementContext; 
Dart2Parser.ContinueStatementContext = ContinueStatementContext; 
Dart2Parser.YieldStatementContext = YieldStatementContext; 
Dart2Parser.YieldEachStatementContext = YieldEachStatementContext; 
Dart2Parser.AssertStatementContext = AssertStatementContext; 
Dart2Parser.AssertionContext = AssertionContext; 
Dart2Parser.TopLevelDefinitionContext = TopLevelDefinitionContext; 
Dart2Parser.GetOrSetContext = GetOrSetContext; 
Dart2Parser.LibraryDefinitionContext = LibraryDefinitionContext; 
Dart2Parser.ScriptTagContext = ScriptTagContext; 
Dart2Parser.LibraryNameContext = LibraryNameContext; 
Dart2Parser.ImportOrExportContext = ImportOrExportContext; 
Dart2Parser.DottedIdentifierListContext = DottedIdentifierListContext; 
Dart2Parser.LibraryimportContext = LibraryimportContext; 
Dart2Parser.ImportSpecificationContext = ImportSpecificationContext; 
Dart2Parser.CombinatorContext = CombinatorContext; 
Dart2Parser.IdentifierListContext = IdentifierListContext; 
Dart2Parser.LibraryExportContext = LibraryExportContext; 
Dart2Parser.PartDirectiveContext = PartDirectiveContext; 
Dart2Parser.PartHeaderContext = PartHeaderContext; 
Dart2Parser.PartDeclarationContext = PartDeclarationContext; 
Dart2Parser.UriContext = UriContext; 
Dart2Parser.ConfigurableUriContext = ConfigurableUriContext; 
Dart2Parser.ConfigurationUriContext = ConfigurationUriContext; 
Dart2Parser.UriTestContext = UriTestContext; 
Dart2Parser.DtypeContext = DtypeContext; 
Dart2Parser.TypeNameContext = TypeNameContext; 
Dart2Parser.TypeArgumentsContext = TypeArgumentsContext; 
Dart2Parser.TypeListContext = TypeListContext; 
Dart2Parser.TypeAliasContext = TypeAliasContext; 
Dart2Parser.TypeAliasBodyContext = TypeAliasBodyContext; 
Dart2Parser.FunctionTypeAliasContext = FunctionTypeAliasContext; 
Dart2Parser.FunctionPrefixContext = FunctionPrefixContext; 
