// Generated from ./webidl/WebIDL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import WebIDLListener from './WebIDLListener.js';
const serializedATN = [4,1,88,904,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,235,8,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,3,2,244,8,2,1,3,1,3,1,4,1,4,1,4,1,4,3,4,252,8,4,1,5,1,5,3,5,
256,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,272,
8,8,1,9,1,9,3,9,276,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
1,11,3,11,289,8,11,1,12,1,12,3,12,293,8,12,1,13,1,13,1,13,1,13,1,13,3,13,
300,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,313,
8,14,1,15,1,15,1,15,3,15,318,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
1,17,1,17,1,17,1,17,3,17,332,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,340,
8,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,
20,355,8,20,1,21,1,21,1,21,1,21,1,21,3,21,362,8,21,1,22,1,22,3,22,366,8,
22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,3,24,378,8,24,1,25,
1,25,1,26,1,26,1,27,1,27,3,27,386,8,27,1,28,1,28,1,28,1,29,1,29,1,29,3,29,
394,8,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,3,33,
408,8,33,1,34,1,34,1,35,1,35,3,35,414,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
1,36,3,36,423,8,36,1,37,1,37,3,37,427,8,37,1,38,1,38,1,38,1,39,1,39,1,39,
1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,3,42,445,8,42,1,43,1,43,
3,43,449,8,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,457,8,45,1,46,1,46,1,46,
1,46,1,46,3,46,464,8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
1,48,1,48,3,48,478,8,48,1,49,1,49,3,49,482,8,49,1,50,1,50,3,50,486,8,50,
1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,
53,502,8,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,511,8,55,1,56,1,56,1,
56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,3,57,523,8,57,1,58,1,58,1,58,1,58,
1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,539,8,59,1,60,1,60,
1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,
63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,3,65,
571,8,65,1,66,1,66,1,66,1,66,3,66,577,8,66,1,67,1,67,1,67,1,67,1,67,1,67,
1,67,1,67,1,68,1,68,1,68,1,68,3,68,591,8,68,1,69,1,69,1,69,1,70,1,70,1,70,
1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,606,8,70,1,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,72,1,72,1,72,3,72,618,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
1,74,1,74,1,74,1,75,1,75,1,75,3,75,633,8,75,1,76,1,76,1,76,3,76,638,8,76,
1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,
79,1,79,1,79,3,79,657,8,79,1,80,1,80,1,80,1,81,1,81,1,81,3,81,665,8,81,1,
82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,680,
8,83,1,84,1,84,1,84,1,84,1,84,3,84,687,8,84,1,85,1,85,1,85,1,85,1,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
1,85,3,85,725,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,734,8,86,1,87,
1,87,1,87,3,87,739,8,87,1,88,1,88,1,89,1,89,1,89,3,89,746,8,89,1,90,1,90,
1,90,3,90,751,8,90,1,91,1,91,3,91,755,8,91,1,92,1,92,1,93,1,93,1,93,1,93,
1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,3,95,773,8,95,1,96,1,96,
1,97,1,97,1,97,1,97,1,97,1,97,3,97,783,8,97,1,98,1,98,1,98,1,98,1,98,3,98,
790,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,799,8,99,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,846,8,100,1,101,1,101,3,101,
850,8,101,1,102,1,102,1,102,1,103,1,103,1,103,1,103,3,103,859,8,103,1,104,
1,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,1,107,
1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,109,
1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,
1,112,1,112,1,112,1,112,3,112,902,8,112,1,112,0,0,113,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,0,8,1,0,1,25,1,0,31,32,2,0,33,35,83,83,2,0,1,1,19,19,3,0,
6,6,9,9,21,21,1,0,58,59,1,0,63,65,1,0,69,79,935,0,226,1,0,0,0,2,234,1,0,
0,0,4,243,1,0,0,0,6,245,1,0,0,0,8,251,1,0,0,0,10,255,1,0,0,0,12,257,1,0,
0,0,14,264,1,0,0,0,16,271,1,0,0,0,18,275,1,0,0,0,20,277,1,0,0,0,22,288,1,
0,0,0,24,292,1,0,0,0,26,299,1,0,0,0,28,312,1,0,0,0,30,317,1,0,0,0,32,319,
1,0,0,0,34,331,1,0,0,0,36,339,1,0,0,0,38,341,1,0,0,0,40,354,1,0,0,0,42,361,
1,0,0,0,44,365,1,0,0,0,46,367,1,0,0,0,48,377,1,0,0,0,50,379,1,0,0,0,52,381,
1,0,0,0,54,385,1,0,0,0,56,387,1,0,0,0,58,393,1,0,0,0,60,395,1,0,0,0,62,397,
1,0,0,0,64,400,1,0,0,0,66,407,1,0,0,0,68,409,1,0,0,0,70,413,1,0,0,0,72,422,
1,0,0,0,74,426,1,0,0,0,76,428,1,0,0,0,78,431,1,0,0,0,80,434,1,0,0,0,82,436,
1,0,0,0,84,444,1,0,0,0,86,448,1,0,0,0,88,450,1,0,0,0,90,456,1,0,0,0,92,463,
1,0,0,0,94,465,1,0,0,0,96,477,1,0,0,0,98,481,1,0,0,0,100,485,1,0,0,0,102,
487,1,0,0,0,104,493,1,0,0,0,106,501,1,0,0,0,108,503,1,0,0,0,110,510,1,0,
0,0,112,512,1,0,0,0,114,522,1,0,0,0,116,524,1,0,0,0,118,538,1,0,0,0,120,
540,1,0,0,0,122,542,1,0,0,0,124,550,1,0,0,0,126,552,1,0,0,0,128,558,1,0,
0,0,130,570,1,0,0,0,132,576,1,0,0,0,134,578,1,0,0,0,136,590,1,0,0,0,138,
592,1,0,0,0,140,605,1,0,0,0,142,607,1,0,0,0,144,617,1,0,0,0,146,619,1,0,
0,0,148,626,1,0,0,0,150,632,1,0,0,0,152,637,1,0,0,0,154,639,1,0,0,0,156,
647,1,0,0,0,158,656,1,0,0,0,160,658,1,0,0,0,162,664,1,0,0,0,164,666,1,0,
0,0,166,679,1,0,0,0,168,686,1,0,0,0,170,724,1,0,0,0,172,733,1,0,0,0,174,
738,1,0,0,0,176,740,1,0,0,0,178,745,1,0,0,0,180,750,1,0,0,0,182,754,1,0,
0,0,184,756,1,0,0,0,186,758,1,0,0,0,188,763,1,0,0,0,190,772,1,0,0,0,192,
774,1,0,0,0,194,782,1,0,0,0,196,789,1,0,0,0,198,798,1,0,0,0,200,845,1,0,
0,0,202,849,1,0,0,0,204,851,1,0,0,0,206,858,1,0,0,0,208,860,1,0,0,0,210,
862,1,0,0,0,212,867,1,0,0,0,214,871,1,0,0,0,216,877,1,0,0,0,218,884,1,0,
0,0,220,888,1,0,0,0,222,894,1,0,0,0,224,901,1,0,0,0,226,227,3,2,1,0,227,
228,5,0,0,1,228,1,1,0,0,0,229,230,3,194,97,0,230,231,3,4,2,0,231,232,3,2,
1,0,232,235,1,0,0,0,233,235,1,0,0,0,234,229,1,0,0,0,234,233,1,0,0,0,235,
3,1,0,0,0,236,244,3,8,4,0,237,244,3,128,64,0,238,244,3,14,7,0,239,244,3,
134,67,0,240,244,3,146,73,0,241,244,3,156,78,0,242,244,3,38,19,0,243,236,
1,0,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,0,0,0,
243,241,1,0,0,0,243,242,1,0,0,0,244,5,1,0,0,0,245,246,7,0,0,0,246,7,1,0,
0,0,247,248,5,3,0,0,248,252,3,40,20,0,249,250,5,12,0,0,250,252,3,10,5,0,
251,247,1,0,0,0,251,249,1,0,0,0,252,9,1,0,0,0,253,256,3,12,6,0,254,256,3,
32,16,0,255,253,1,0,0,0,255,254,1,0,0,0,256,11,1,0,0,0,257,258,5,84,0,0,
258,259,3,30,15,0,259,260,5,26,0,0,260,261,3,22,11,0,261,262,5,27,0,0,262,
263,5,28,0,0,263,13,1,0,0,0,264,265,5,17,0,0,265,266,3,16,8,0,266,15,1,0,
0,0,267,268,5,12,0,0,268,272,3,18,9,0,269,272,3,142,71,0,270,272,3,128,64,
0,271,267,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,17,1,0,0,0,273,276,
3,20,10,0,274,276,3,32,16,0,275,273,1,0,0,0,275,274,1,0,0,0,276,19,1,0,0,
0,277,278,5,84,0,0,278,279,5,26,0,0,279,280,3,26,13,0,280,281,5,27,0,0,281,
282,5,28,0,0,282,21,1,0,0,0,283,284,3,194,97,0,284,285,3,24,12,0,285,286,
3,22,11,0,286,289,1,0,0,0,287,289,1,0,0,0,288,283,1,0,0,0,288,287,1,0,0,
0,289,23,1,0,0,0,290,293,3,28,14,0,291,293,3,102,51,0,292,290,1,0,0,0,292,
291,1,0,0,0,293,25,1,0,0,0,294,295,3,194,97,0,295,296,3,28,14,0,296,297,
3,26,13,0,297,300,1,0,0,0,298,300,1,0,0,0,299,294,1,0,0,0,299,298,1,0,0,
0,300,27,1,0,0,0,301,313,3,46,23,0,302,313,3,74,37,0,303,313,3,104,52,0,
304,313,3,108,54,0,305,313,3,112,56,0,306,313,3,116,58,0,307,313,3,56,28,
0,308,313,3,60,30,0,309,313,3,120,60,0,310,313,3,124,62,0,311,313,3,62,31,
0,312,301,1,0,0,0,312,302,1,0,0,0,312,303,1,0,0,0,312,304,1,0,0,0,312,305,
1,0,0,0,312,306,1,0,0,0,312,307,1,0,0,0,312,308,1,0,0,0,312,309,1,0,0,0,
312,310,1,0,0,0,312,311,1,0,0,0,313,29,1,0,0,0,314,315,5,29,0,0,315,318,
5,84,0,0,316,318,1,0,0,0,317,314,1,0,0,0,317,316,1,0,0,0,318,31,1,0,0,0,
319,320,5,15,0,0,320,321,5,84,0,0,321,322,5,26,0,0,322,323,3,34,17,0,323,
324,5,27,0,0,324,325,5,28,0,0,325,33,1,0,0,0,326,327,3,194,97,0,327,328,
3,36,18,0,328,329,3,34,17,0,329,332,1,0,0,0,330,332,1,0,0,0,331,326,1,0,
0,0,331,330,1,0,0,0,332,35,1,0,0,0,333,340,3,46,23,0,334,340,3,76,38,0,335,
340,3,104,52,0,336,337,3,70,35,0,337,338,3,64,32,0,338,340,1,0,0,0,339,333,
1,0,0,0,339,334,1,0,0,0,339,335,1,0,0,0,339,336,1,0,0,0,340,37,1,0,0,0,341,
342,5,84,0,0,342,343,5,10,0,0,343,344,5,84,0,0,344,345,5,28,0,0,345,39,1,
0,0,0,346,355,3,154,77,0,347,348,5,12,0,0,348,349,5,84,0,0,349,350,5,26,
0,0,350,351,3,42,21,0,351,352,5,27,0,0,352,353,5,28,0,0,353,355,1,0,0,0,
354,346,1,0,0,0,354,347,1,0,0,0,355,41,1,0,0,0,356,357,3,194,97,0,357,358,
3,44,22,0,358,359,3,42,21,0,359,362,1,0,0,0,360,362,1,0,0,0,361,356,1,0,
0,0,361,360,1,0,0,0,362,43,1,0,0,0,363,366,3,46,23,0,364,366,3,76,38,0,365,
363,1,0,0,0,365,364,1,0,0,0,366,45,1,0,0,0,367,368,5,4,0,0,368,369,3,54,
27,0,369,370,5,84,0,0,370,371,5,30,0,0,371,372,3,48,24,0,372,373,5,28,0,
0,373,47,1,0,0,0,374,378,3,50,25,0,375,378,3,52,26,0,376,378,5,82,0,0,377,
374,1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,49,1,0,0,0,379,380,7,1,0,
0,380,51,1,0,0,0,381,382,7,2,0,0,382,53,1,0,0,0,383,386,3,172,86,0,384,386,
5,84,0,0,385,383,1,0,0,0,385,384,1,0,0,0,386,55,1,0,0,0,387,388,5,18,0,0,
388,389,3,58,29,0,389,57,1,0,0,0,390,394,3,64,32,0,391,394,3,122,61,0,392,
394,3,126,63,0,393,390,1,0,0,0,393,391,1,0,0,0,393,392,1,0,0,0,394,59,1,
0,0,0,395,396,3,64,32,0,396,61,1,0,0,0,397,398,5,11,0,0,398,399,3,64,32,
0,399,63,1,0,0,0,400,401,5,2,0,0,401,402,3,160,80,0,402,403,3,66,33,0,403,
404,5,28,0,0,404,65,1,0,0,0,405,408,3,68,34,0,406,408,5,84,0,0,407,405,1,
0,0,0,407,406,1,0,0,0,408,67,1,0,0,0,409,410,7,3,0,0,410,69,1,0,0,0,411,
414,5,18,0,0,412,414,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,71,1,0,
0,0,415,423,3,48,24,0,416,423,5,85,0,0,417,418,5,36,0,0,418,423,5,37,0,0,
419,420,5,26,0,0,420,423,5,27,0,0,421,423,5,38,0,0,422,415,1,0,0,0,422,416,
1,0,0,0,422,417,1,0,0,0,422,419,1,0,0,0,422,421,1,0,0,0,423,73,1,0,0,0,424,
427,3,76,38,0,425,427,3,78,39,0,426,424,1,0,0,0,426,425,1,0,0,0,427,75,1,
0,0,0,428,429,3,158,79,0,429,430,3,82,41,0,430,77,1,0,0,0,431,432,3,80,40,
0,432,433,3,76,38,0,433,79,1,0,0,0,434,435,7,4,0,0,435,81,1,0,0,0,436,437,
3,84,42,0,437,438,5,39,0,0,438,439,3,90,45,0,439,440,5,40,0,0,440,441,5,
28,0,0,441,83,1,0,0,0,442,445,3,86,43,0,443,445,1,0,0,0,444,442,1,0,0,0,
444,443,1,0,0,0,445,85,1,0,0,0,446,449,3,88,44,0,447,449,5,84,0,0,448,446,
1,0,0,0,448,447,1,0,0,0,449,87,1,0,0,0,450,451,5,10,0,0,451,89,1,0,0,0,452,
453,3,94,47,0,453,454,3,92,46,0,454,457,1,0,0,0,455,457,1,0,0,0,456,452,
1,0,0,0,456,455,1,0,0,0,457,91,1,0,0,0,458,459,5,41,0,0,459,460,3,94,47,
0,460,461,3,92,46,0,461,464,1,0,0,0,462,464,1,0,0,0,463,458,1,0,0,0,463,
462,1,0,0,0,464,93,1,0,0,0,465,466,3,194,97,0,466,467,3,96,48,0,467,95,1,
0,0,0,468,469,5,42,0,0,469,470,3,160,80,0,470,471,3,98,49,0,471,472,3,144,
72,0,472,478,1,0,0,0,473,474,3,158,79,0,474,475,3,100,50,0,475,476,3,98,
49,0,476,478,1,0,0,0,477,468,1,0,0,0,477,473,1,0,0,0,478,97,1,0,0,0,479,
482,3,6,3,0,480,482,5,84,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,99,1,0,
0,0,483,486,5,43,0,0,484,486,1,0,0,0,485,483,1,0,0,0,485,484,1,0,0,0,486,
101,1,0,0,0,487,488,5,5,0,0,488,489,5,39,0,0,489,490,3,90,45,0,490,491,5,
40,0,0,491,492,5,28,0,0,492,103,1,0,0,0,493,494,5,23,0,0,494,495,3,106,53,
0,495,105,1,0,0,0,496,497,3,70,35,0,497,498,3,64,32,0,498,502,1,0,0,0,499,
502,3,76,38,0,500,502,5,28,0,0,501,496,1,0,0,0,501,499,1,0,0,0,501,500,1,
0,0,0,502,107,1,0,0,0,503,504,5,22,0,0,504,505,3,110,55,0,505,109,1,0,0,
0,506,507,3,70,35,0,507,508,3,64,32,0,508,511,1,0,0,0,509,511,3,76,38,0,
510,506,1,0,0,0,510,509,1,0,0,0,511,111,1,0,0,0,512,513,5,13,0,0,513,514,
5,44,0,0,514,515,3,160,80,0,515,516,3,114,57,0,516,517,5,45,0,0,517,518,
5,28,0,0,518,113,1,0,0,0,519,520,5,41,0,0,520,523,3,160,80,0,521,523,1,0,
0,0,522,519,1,0,0,0,522,521,1,0,0,0,523,115,1,0,0,0,524,525,5,1,0,0,525,
526,5,13,0,0,526,527,5,44,0,0,527,528,3,160,80,0,528,529,3,114,57,0,529,
530,5,45,0,0,530,531,3,118,59,0,531,532,5,28,0,0,532,117,1,0,0,0,533,534,
5,39,0,0,534,535,3,90,45,0,535,536,5,40,0,0,536,539,1,0,0,0,537,539,1,0,
0,0,538,533,1,0,0,0,538,537,1,0,0,0,539,119,1,0,0,0,540,541,3,122,61,0,541,
121,1,0,0,0,542,543,5,14,0,0,543,544,5,44,0,0,544,545,3,160,80,0,545,546,
5,41,0,0,546,547,3,160,80,0,547,548,5,45,0,0,548,549,5,28,0,0,549,123,1,
0,0,0,550,551,3,126,63,0,551,125,1,0,0,0,552,553,5,20,0,0,553,554,5,44,0,
0,554,555,3,160,80,0,555,556,5,45,0,0,556,557,5,28,0,0,557,127,1,0,0,0,558,
559,5,16,0,0,559,560,5,84,0,0,560,561,5,26,0,0,561,562,3,130,65,0,562,563,
5,27,0,0,563,564,5,28,0,0,564,129,1,0,0,0,565,566,3,194,97,0,566,567,3,132,
66,0,567,568,3,130,65,0,568,571,1,0,0,0,569,571,1,0,0,0,570,565,1,0,0,0,
570,569,1,0,0,0,571,131,1,0,0,0,572,577,3,76,38,0,573,574,5,18,0,0,574,577,
3,64,32,0,575,577,3,46,23,0,576,572,1,0,0,0,576,573,1,0,0,0,576,575,1,0,
0,0,577,133,1,0,0,0,578,579,5,7,0,0,579,580,5,84,0,0,580,581,3,30,15,0,581,
582,5,26,0,0,582,583,3,136,68,0,583,584,5,27,0,0,584,585,5,28,0,0,585,135,
1,0,0,0,586,587,3,138,69,0,587,588,3,136,68,0,588,591,1,0,0,0,589,591,1,
0,0,0,590,586,1,0,0,0,590,589,1,0,0,0,591,137,1,0,0,0,592,593,3,194,97,0,
593,594,3,140,70,0,594,139,1,0,0,0,595,596,5,19,0,0,596,597,3,160,80,0,597,
598,5,84,0,0,598,599,5,28,0,0,599,606,1,0,0,0,600,601,3,158,79,0,601,602,
5,84,0,0,602,603,3,144,72,0,603,604,5,28,0,0,604,606,1,0,0,0,605,595,1,0,
0,0,605,600,1,0,0,0,606,141,1,0,0,0,607,608,5,7,0,0,608,609,5,84,0,0,609,
610,5,26,0,0,610,611,3,136,68,0,611,612,5,27,0,0,612,613,5,28,0,0,613,143,
1,0,0,0,614,615,5,30,0,0,615,618,3,72,36,0,616,618,1,0,0,0,617,614,1,0,0,
0,617,616,1,0,0,0,618,145,1,0,0,0,619,620,5,8,0,0,620,621,5,84,0,0,621,622,
5,26,0,0,622,623,3,148,74,0,623,624,5,27,0,0,624,625,5,28,0,0,625,147,1,
0,0,0,626,627,5,85,0,0,627,628,3,150,75,0,628,149,1,0,0,0,629,630,5,41,0,
0,630,633,3,152,76,0,631,633,1,0,0,0,632,629,1,0,0,0,632,631,1,0,0,0,633,
151,1,0,0,0,634,635,5,85,0,0,635,638,3,150,75,0,636,638,1,0,0,0,637,634,
1,0,0,0,637,636,1,0,0,0,638,153,1,0,0,0,639,640,5,84,0,0,640,641,5,30,0,
0,641,642,3,158,79,0,642,643,5,39,0,0,643,644,3,90,45,0,644,645,5,40,0,0,
645,646,5,28,0,0,646,155,1,0,0,0,647,648,5,24,0,0,648,649,3,160,80,0,649,
650,5,84,0,0,650,651,5,28,0,0,651,157,1,0,0,0,652,657,3,162,81,0,653,654,
3,164,82,0,654,655,3,190,95,0,655,657,1,0,0,0,656,652,1,0,0,0,656,653,1,
0,0,0,657,159,1,0,0,0,658,659,3,194,97,0,659,660,3,158,79,0,660,161,1,0,
0,0,661,665,3,170,85,0,662,665,5,46,0,0,663,665,3,186,93,0,664,661,1,0,0,
0,664,662,1,0,0,0,664,663,1,0,0,0,665,163,1,0,0,0,666,667,5,39,0,0,667,668,
3,166,83,0,668,669,5,47,0,0,669,670,3,166,83,0,670,671,3,168,84,0,671,672,
5,40,0,0,672,165,1,0,0,0,673,674,3,194,97,0,674,675,3,170,85,0,675,680,1,
0,0,0,676,677,3,164,82,0,677,678,3,190,95,0,678,680,1,0,0,0,679,673,1,0,
0,0,679,676,1,0,0,0,680,167,1,0,0,0,681,682,5,47,0,0,682,683,3,166,83,0,
683,684,3,168,84,0,684,687,1,0,0,0,685,687,1,0,0,0,686,681,1,0,0,0,686,685,
1,0,0,0,687,169,1,0,0,0,688,689,3,172,86,0,689,690,3,190,95,0,690,725,1,
0,0,0,691,692,3,184,92,0,692,693,3,190,95,0,693,725,1,0,0,0,694,695,5,84,
0,0,695,725,3,190,95,0,696,697,5,48,0,0,697,698,5,44,0,0,698,699,3,160,80,
0,699,700,5,45,0,0,700,701,3,190,95,0,701,725,1,0,0,0,702,703,5,49,0,0,703,
725,3,190,95,0,704,705,5,50,0,0,705,725,3,190,95,0,706,707,3,192,96,0,707,
708,3,190,95,0,708,725,1,0,0,0,709,710,5,51,0,0,710,711,5,44,0,0,711,712,
3,160,80,0,712,713,5,45,0,0,713,714,3,190,95,0,714,725,1,0,0,0,715,716,5,
52,0,0,716,717,5,44,0,0,717,718,3,160,80,0,718,719,5,45,0,0,719,720,3,190,
95,0,720,725,1,0,0,0,721,722,3,188,94,0,722,723,3,190,95,0,723,725,1,0,0,
0,724,688,1,0,0,0,724,691,1,0,0,0,724,694,1,0,0,0,724,696,1,0,0,0,724,702,
1,0,0,0,724,704,1,0,0,0,724,706,1,0,0,0,724,709,1,0,0,0,724,715,1,0,0,0,
724,721,1,0,0,0,725,171,1,0,0,0,726,734,3,178,89,0,727,734,3,174,87,0,728,
734,5,53,0,0,729,734,5,54,0,0,730,734,5,55,0,0,731,734,5,56,0,0,732,734,
5,57,0,0,733,726,1,0,0,0,733,727,1,0,0,0,733,728,1,0,0,0,733,729,1,0,0,0,
733,730,1,0,0,0,733,731,1,0,0,0,733,732,1,0,0,0,734,173,1,0,0,0,735,736,
5,25,0,0,736,739,3,176,88,0,737,739,3,176,88,0,738,735,1,0,0,0,738,737,1,
0,0,0,739,175,1,0,0,0,740,741,7,5,0,0,741,177,1,0,0,0,742,743,5,60,0,0,743,
746,3,180,90,0,744,746,3,180,90,0,745,742,1,0,0,0,745,744,1,0,0,0,746,179,
1,0,0,0,747,751,5,61,0,0,748,749,5,62,0,0,749,751,3,182,91,0,750,747,1,0,
0,0,750,748,1,0,0,0,751,181,1,0,0,0,752,755,5,62,0,0,753,755,1,0,0,0,754,
752,1,0,0,0,754,753,1,0,0,0,755,183,1,0,0,0,756,757,7,6,0,0,757,185,1,0,
0,0,758,759,5,66,0,0,759,760,5,44,0,0,760,761,3,158,79,0,761,762,5,45,0,
0,762,187,1,0,0,0,763,764,5,67,0,0,764,765,5,44,0,0,765,766,3,184,92,0,766,
767,5,41,0,0,767,768,3,160,80,0,768,769,5,45,0,0,769,189,1,0,0,0,770,773,
5,68,0,0,771,773,1,0,0,0,772,770,1,0,0,0,772,771,1,0,0,0,773,191,1,0,0,0,
774,775,7,7,0,0,775,193,1,0,0,0,776,777,5,36,0,0,777,778,3,198,99,0,778,
779,3,196,98,0,779,780,5,37,0,0,780,783,1,0,0,0,781,783,1,0,0,0,782,776,
1,0,0,0,782,781,1,0,0,0,783,195,1,0,0,0,784,785,5,41,0,0,785,786,3,198,99,
0,786,787,3,196,98,0,787,790,1,0,0,0,788,790,1,0,0,0,789,784,1,0,0,0,789,
788,1,0,0,0,790,197,1,0,0,0,791,799,3,208,104,0,792,799,3,210,105,0,793,
799,3,216,108,0,794,799,3,212,106,0,795,799,3,214,107,0,796,799,3,218,109,
0,797,799,3,220,110,0,798,791,1,0,0,0,798,792,1,0,0,0,798,793,1,0,0,0,798,
794,1,0,0,0,798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,0,0,0,799,199,1,0,
0,0,800,846,5,82,0,0,801,846,5,83,0,0,802,846,5,84,0,0,803,846,5,85,0,0,
804,846,5,88,0,0,805,846,5,80,0,0,806,846,5,33,0,0,807,846,5,81,0,0,808,
846,5,43,0,0,809,846,5,29,0,0,810,846,5,28,0,0,811,846,5,44,0,0,812,846,
5,30,0,0,813,846,5,45,0,0,814,846,5,68,0,0,815,846,5,63,0,0,816,846,5,64,
0,0,817,846,5,51,0,0,818,846,5,34,0,0,819,846,5,35,0,0,820,846,5,52,0,0,
821,846,5,66,0,0,822,846,5,65,0,0,823,846,5,46,0,0,824,846,5,57,0,0,825,
846,5,54,0,0,826,846,5,55,0,0,827,846,5,59,0,0,828,846,5,32,0,0,829,846,
5,58,0,0,830,846,5,62,0,0,831,846,5,38,0,0,832,846,5,49,0,0,833,846,5,56,
0,0,834,846,5,47,0,0,835,846,5,42,0,0,836,846,5,67,0,0,837,846,5,48,0,0,
838,846,5,61,0,0,839,846,5,50,0,0,840,846,5,31,0,0,841,846,5,60,0,0,842,
846,5,53,0,0,843,846,3,6,3,0,844,846,3,192,96,0,845,800,1,0,0,0,845,801,
1,0,0,0,845,802,1,0,0,0,845,803,1,0,0,0,845,804,1,0,0,0,845,805,1,0,0,0,
845,806,1,0,0,0,845,807,1,0,0,0,845,808,1,0,0,0,845,809,1,0,0,0,845,810,
1,0,0,0,845,811,1,0,0,0,845,812,1,0,0,0,845,813,1,0,0,0,845,814,1,0,0,0,
845,815,1,0,0,0,845,816,1,0,0,0,845,817,1,0,0,0,845,818,1,0,0,0,845,819,
1,0,0,0,845,820,1,0,0,0,845,821,1,0,0,0,845,822,1,0,0,0,845,823,1,0,0,0,
845,824,1,0,0,0,845,825,1,0,0,0,845,826,1,0,0,0,845,827,1,0,0,0,845,828,
1,0,0,0,845,829,1,0,0,0,845,830,1,0,0,0,845,831,1,0,0,0,845,832,1,0,0,0,
845,833,1,0,0,0,845,834,1,0,0,0,845,835,1,0,0,0,845,836,1,0,0,0,845,837,
1,0,0,0,845,838,1,0,0,0,845,839,1,0,0,0,845,840,1,0,0,0,845,841,1,0,0,0,
845,842,1,0,0,0,845,843,1,0,0,0,845,844,1,0,0,0,846,201,1,0,0,0,847,850,
3,200,100,0,848,850,5,41,0,0,849,847,1,0,0,0,849,848,1,0,0,0,850,203,1,0,
0,0,851,852,5,84,0,0,852,853,3,206,103,0,853,205,1,0,0,0,854,855,5,41,0,
0,855,856,5,84,0,0,856,859,3,206,103,0,857,859,1,0,0,0,858,854,1,0,0,0,858,
857,1,0,0,0,859,207,1,0,0,0,860,861,5,84,0,0,861,209,1,0,0,0,862,863,5,84,
0,0,863,864,5,39,0,0,864,865,3,90,45,0,865,866,5,40,0,0,866,211,1,0,0,0,
867,868,5,84,0,0,868,869,5,30,0,0,869,870,5,84,0,0,870,213,1,0,0,0,871,872,
5,84,0,0,872,873,5,30,0,0,873,874,5,39,0,0,874,875,3,204,102,0,875,876,5,
40,0,0,876,215,1,0,0,0,877,878,5,84,0,0,878,879,5,30,0,0,879,880,5,84,0,
0,880,881,5,39,0,0,881,882,3,90,45,0,882,883,5,40,0,0,883,217,1,0,0,0,884,
885,5,84,0,0,885,886,5,30,0,0,886,887,5,85,0,0,887,219,1,0,0,0,888,889,5,
84,0,0,889,890,5,30,0,0,890,891,5,39,0,0,891,892,3,222,111,0,892,893,5,40,
0,0,893,221,1,0,0,0,894,895,5,85,0,0,895,896,3,224,112,0,896,223,1,0,0,0,
897,898,5,41,0,0,898,899,5,85,0,0,899,902,3,224,112,0,900,902,1,0,0,0,901,
897,1,0,0,0,901,900,1,0,0,0,902,225,1,0,0,0,59,234,243,251,255,271,275,288,
292,299,312,317,331,339,354,361,365,377,385,393,407,413,422,426,444,448,
456,463,477,481,485,501,510,522,538,570,576,590,605,617,632,637,656,664,
679,686,724,733,738,745,750,754,772,782,789,798,845,849,858,901];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class WebIDLParser extends antlr4.Parser {

    static grammarFileName = "WebIDL.g4";
    static literalNames = [ null, "'async'", "'attribute'", "'callback'", 
                            "'const'", "'constructor'", "'deleter'", "'dictionary'", 
                            "'enum'", "'getter'", "'includes'", "'inherit'", 
                            "'interface'", "'iterable'", "'maplike'", "'mixin'", 
                            "'namespace'", "'partial'", "'readonly'", "'required'", 
                            "'setlike'", "'setter'", "'static'", "'stringifier'", 
                            "'typedef'", "'unrestricted'", "'{'", "'}'", 
                            "';'", "':'", "'='", "'true'", "'false'", "'-Infinity'", 
                            "'Infinity'", "'NaN'", "'['", "']'", "'null'", 
                            "'('", "')'", "','", "'optional'", "'...'", 
                            "'<'", "'>'", "'any'", "'or'", "'sequence'", 
                            "'object'", "'symbol'", "'FrozenArray'", "'ObservableArray'", 
                            "'undefined'", "'boolean'", "'byte'", "'octet'", 
                            "'bigint'", "'float'", "'double'", "'unsigned'", 
                            "'short'", "'long'", "'ByteString'", "'DOMString'", 
                            "'USVString'", "'Promise'", "'record'", "'?'", 
                            "'ArrayBuffer'", "'DataView'", "'Int8Array'", 
                            "'Int16Array'", "'Int32Array'", "'Uint8Array'", 
                            "'Uint16Array'", "'Uint32Array'", "'Uint8ClampedArray'", 
                            "'Float32Array'", "'Float64Array'", "'-'", "'.'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "INTEGER_WEBIDL", "DECIMAL_WEBIDL", 
                             "IDENTIFIER_WEBIDL", "STRING_WEBIDL", "WHITESPACE_WEBIDL", 
                             "COMMENT_WEBIDL", "OTHER_WEBIDL" ];
    static ruleNames = [ "webIDL", "definitions", "definition", "argumentNameKeyword", 
                         "callbackOrInterfaceOrMixin", "interfaceOrMixin", 
                         "interfaceRest", "partial", "partialDefinition", 
                         "partialInterfaceOrPartialMixin", "partialInterfaceRest", 
                         "interfaceMembers", "interfaceMember", "partialInterfaceMembers", 
                         "partialInterfaceMember", "inheritance", "mixinRest", 
                         "mixinMembers", "mixinMember", "includesStatement", 
                         "callbackRestOrInterface", "callbackInterfaceMembers", 
                         "callbackInterfaceMember", "const_", "constValue", 
                         "booleanLiteral", "floatLiteral", "constType", 
                         "readonlyMember", "readonlyMemberRest", "readWriteAttribute", 
                         "inheritAttribute", "attributeRest", "attributeName", 
                         "attributeNameKeyword", "optionalReadOnly", "defaultValue", 
                         "operation", "regularOperation", "specialOperation", 
                         "special", "operationRest", "optionalOperationName", 
                         "operationName", "operationNameKeyword", "argumentList", 
                         "arguments", "argument", "argumentRest", "argumentName", 
                         "ellipsis", "constructor", "stringifier", "stringifierRest", 
                         "staticMember", "staticMemberRest", "iterable", 
                         "optionalType", "asyncIterable", "optionalArgumentList", 
                         "readWriteMaplike", "maplikeRest", "readWriteSetlike", 
                         "setlikeRest", "namespace_", "namespaceMembers", 
                         "namespaceMember", "dictionary", "dictionaryMembers", 
                         "dictionaryMember", "dictionaryMemberRest", "partialDictionary", 
                         "default_", "enum_", "enumValueList", "enumValueListComma", 
                         "enumValueListString", "callbackRest", "typedef_", 
                         "type_", "typeWithExtendedAttributes", "singleType", 
                         "unionType", "unionMemberType", "unionMemberTypes", 
                         "distinguishableType", "primitiveType", "unrestrictedFloatType", 
                         "floatType", "unsignedIntegerType", "integerType", 
                         "optionalLong", "stringType", "promiseType", "recordType", 
                         "null_", "bufferRelatedType", "extendedAttributeList", 
                         "extendedAttributes", "extendedAttribute", "other", 
                         "otherOrComma", "identifierList", "identifiers", 
                         "extendedAttributeNoArgs", "extendedAttributeArgList", 
                         "extendedAttributeIdent", "extendedAttributeIdentList", 
                         "extendedAttributeNamedArgList", "extendedAttributeString", 
                         "extendedAttributeStringList", "stringList", "strings" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = WebIDLParser.ruleNames;
        this.literalNames = WebIDLParser.literalNames;
        this.symbolicNames = WebIDLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	webIDL() {
	    let localctx = new WebIDLContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, WebIDLParser.RULE_webIDL);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 226;
	        this.definitions();
	        this.state = 227;
	        this.match(WebIDLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definitions() {
	    let localctx = new DefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, WebIDLParser.RULE_definitions);
	    try {
	        this.state = 234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__35:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 229;
	            this.extendedAttributeList();
	            this.state = 230;
	            this.definition();
	            this.state = 231;
	            this.definitions();
	            break;
	        case WebIDLParser.EOF:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definition() {
	    let localctx = new DefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, WebIDLParser.RULE_definition);
	    try {
	        this.state = 243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 236;
	            this.callbackOrInterfaceOrMixin();
	            break;
	        case WebIDLParser.T__15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 237;
	            this.namespace_();
	            break;
	        case WebIDLParser.T__16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 238;
	            this.partial();
	            break;
	        case WebIDLParser.T__6:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 239;
	            this.dictionary();
	            break;
	        case WebIDLParser.T__7:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 240;
	            this.enum_();
	            break;
	        case WebIDLParser.T__23:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 241;
	            this.typedef_();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 242;
	            this.includesStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentNameKeyword() {
	    let localctx = new ArgumentNameKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, WebIDLParser.RULE_argumentNameKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WebIDLParser.T__0) | (1 << WebIDLParser.T__1) | (1 << WebIDLParser.T__2) | (1 << WebIDLParser.T__3) | (1 << WebIDLParser.T__4) | (1 << WebIDLParser.T__5) | (1 << WebIDLParser.T__6) | (1 << WebIDLParser.T__7) | (1 << WebIDLParser.T__8) | (1 << WebIDLParser.T__9) | (1 << WebIDLParser.T__10) | (1 << WebIDLParser.T__11) | (1 << WebIDLParser.T__12) | (1 << WebIDLParser.T__13) | (1 << WebIDLParser.T__14) | (1 << WebIDLParser.T__15) | (1 << WebIDLParser.T__16) | (1 << WebIDLParser.T__17) | (1 << WebIDLParser.T__18) | (1 << WebIDLParser.T__19) | (1 << WebIDLParser.T__20) | (1 << WebIDLParser.T__21) | (1 << WebIDLParser.T__22) | (1 << WebIDLParser.T__23) | (1 << WebIDLParser.T__24))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callbackOrInterfaceOrMixin() {
	    let localctx = new CallbackOrInterfaceOrMixinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, WebIDLParser.RULE_callbackOrInterfaceOrMixin);
	    try {
	        this.state = 251;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 247;
	            this.match(WebIDLParser.T__2);
	            this.state = 248;
	            this.callbackRestOrInterface();
	            break;
	        case WebIDLParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 249;
	            this.match(WebIDLParser.T__11);
	            this.state = 250;
	            this.interfaceOrMixin();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceOrMixin() {
	    let localctx = new InterfaceOrMixinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, WebIDLParser.RULE_interfaceOrMixin);
	    try {
	        this.state = 255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 253;
	            this.interfaceRest();
	            break;
	        case WebIDLParser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 254;
	            this.mixinRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceRest() {
	    let localctx = new InterfaceRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, WebIDLParser.RULE_interfaceRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 258;
	        this.inheritance();
	        this.state = 259;
	        this.match(WebIDLParser.T__25);
	        this.state = 260;
	        this.interfaceMembers();
	        this.state = 261;
	        this.match(WebIDLParser.T__26);
	        this.state = 262;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partial() {
	    let localctx = new PartialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, WebIDLParser.RULE_partial);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.match(WebIDLParser.T__16);
	        this.state = 265;
	        this.partialDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialDefinition() {
	    let localctx = new PartialDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, WebIDLParser.RULE_partialDefinition);
	    try {
	        this.state = 271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 267;
	            this.match(WebIDLParser.T__11);
	            this.state = 268;
	            this.partialInterfaceOrPartialMixin();
	            break;
	        case WebIDLParser.T__6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 269;
	            this.partialDictionary();
	            break;
	        case WebIDLParser.T__15:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 270;
	            this.namespace_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialInterfaceOrPartialMixin() {
	    let localctx = new PartialInterfaceOrPartialMixinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, WebIDLParser.RULE_partialInterfaceOrPartialMixin);
	    try {
	        this.state = 275;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 273;
	            this.partialInterfaceRest();
	            break;
	        case WebIDLParser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 274;
	            this.mixinRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialInterfaceRest() {
	    let localctx = new PartialInterfaceRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, WebIDLParser.RULE_partialInterfaceRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 278;
	        this.match(WebIDLParser.T__25);
	        this.state = 279;
	        this.partialInterfaceMembers();
	        this.state = 280;
	        this.match(WebIDLParser.T__26);
	        this.state = 281;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMembers() {
	    let localctx = new InterfaceMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, WebIDLParser.RULE_interfaceMembers);
	    try {
	        this.state = 288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 283;
	            this.extendedAttributeList();
	            this.state = 284;
	            this.interfaceMember();
	            this.state = 285;
	            this.interfaceMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMember() {
	    let localctx = new InterfaceMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, WebIDLParser.RULE_interfaceMember);
	    try {
	        this.state = 292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 290;
	            this.partialInterfaceMember();
	            break;
	        case WebIDLParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 291;
	            this.constructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialInterfaceMembers() {
	    let localctx = new PartialInterfaceMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, WebIDLParser.RULE_partialInterfaceMembers);
	    try {
	        this.state = 299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 294;
	            this.extendedAttributeList();
	            this.state = 295;
	            this.partialInterfaceMember();
	            this.state = 296;
	            this.partialInterfaceMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialInterfaceMember() {
	    let localctx = new PartialInterfaceMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, WebIDLParser.RULE_partialInterfaceMember);
	    try {
	        this.state = 312;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 301;
	            this.const_();
	            break;
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 302;
	            this.operation();
	            break;
	        case WebIDLParser.T__22:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 303;
	            this.stringifier();
	            break;
	        case WebIDLParser.T__21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 304;
	            this.staticMember();
	            break;
	        case WebIDLParser.T__12:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 305;
	            this.iterable();
	            break;
	        case WebIDLParser.T__0:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 306;
	            this.asyncIterable();
	            break;
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 307;
	            this.readonlyMember();
	            break;
	        case WebIDLParser.T__1:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 308;
	            this.readWriteAttribute();
	            break;
	        case WebIDLParser.T__13:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 309;
	            this.readWriteMaplike();
	            break;
	        case WebIDLParser.T__19:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 310;
	            this.readWriteSetlike();
	            break;
	        case WebIDLParser.T__10:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 311;
	            this.inheritAttribute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritance() {
	    let localctx = new InheritanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, WebIDLParser.RULE_inheritance);
	    try {
	        this.state = 317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 314;
	            this.match(WebIDLParser.T__28);
	            this.state = 315;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        case WebIDLParser.T__25:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinRest() {
	    let localctx = new MixinRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, WebIDLParser.RULE_mixinRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(WebIDLParser.T__14);
	        this.state = 320;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 321;
	        this.match(WebIDLParser.T__25);
	        this.state = 322;
	        this.mixinMembers();
	        this.state = 323;
	        this.match(WebIDLParser.T__26);
	        this.state = 324;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinMembers() {
	    let localctx = new MixinMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, WebIDLParser.RULE_mixinMembers);
	    try {
	        this.state = 331;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 326;
	            this.extendedAttributeList();
	            this.state = 327;
	            this.mixinMember();
	            this.state = 328;
	            this.mixinMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinMember() {
	    let localctx = new MixinMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, WebIDLParser.RULE_mixinMember);
	    try {
	        this.state = 339;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 333;
	            this.const_();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 334;
	            this.regularOperation();
	            break;
	        case WebIDLParser.T__22:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 335;
	            this.stringifier();
	            break;
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 336;
	            this.optionalReadOnly();
	            this.state = 337;
	            this.attributeRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includesStatement() {
	    let localctx = new IncludesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, WebIDLParser.RULE_includesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 342;
	        this.match(WebIDLParser.T__9);
	        this.state = 343;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 344;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callbackRestOrInterface() {
	    let localctx = new CallbackRestOrInterfaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, WebIDLParser.RULE_callbackRestOrInterface);
	    try {
	        this.state = 354;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 346;
	            this.callbackRest();
	            break;
	        case WebIDLParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 347;
	            this.match(WebIDLParser.T__11);
	            this.state = 348;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            this.state = 349;
	            this.match(WebIDLParser.T__25);
	            this.state = 350;
	            this.callbackInterfaceMembers();
	            this.state = 351;
	            this.match(WebIDLParser.T__26);
	            this.state = 352;
	            this.match(WebIDLParser.T__27);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callbackInterfaceMembers() {
	    let localctx = new CallbackInterfaceMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, WebIDLParser.RULE_callbackInterfaceMembers);
	    try {
	        this.state = 361;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 356;
	            this.extendedAttributeList();
	            this.state = 357;
	            this.callbackInterfaceMember();
	            this.state = 358;
	            this.callbackInterfaceMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callbackInterfaceMember() {
	    let localctx = new CallbackInterfaceMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, WebIDLParser.RULE_callbackInterfaceMember);
	    try {
	        this.state = 365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 363;
	            this.const_();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 364;
	            this.regularOperation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_() {
	    let localctx = new Const_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, WebIDLParser.RULE_const_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.match(WebIDLParser.T__3);
	        this.state = 368;
	        this.constType();
	        this.state = 369;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 370;
	        this.match(WebIDLParser.T__29);
	        this.state = 371;
	        this.constValue();
	        this.state = 372;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constValue() {
	    let localctx = new ConstValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, WebIDLParser.RULE_constValue);
	    try {
	        this.state = 377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__30:
	        case WebIDLParser.T__31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 374;
	            this.booleanLiteral();
	            break;
	        case WebIDLParser.T__32:
	        case WebIDLParser.T__33:
	        case WebIDLParser.T__34:
	        case WebIDLParser.DECIMAL_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 375;
	            this.floatLiteral();
	            break;
	        case WebIDLParser.INTEGER_WEBIDL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 376;
	            this.match(WebIDLParser.INTEGER_WEBIDL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, WebIDLParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        _la = this._input.LA(1);
	        if(!(_la===WebIDLParser.T__30 || _la===WebIDLParser.T__31)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatLiteral() {
	    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, WebIDLParser.RULE_floatLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381;
	        _la = this._input.LA(1);
	        if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WebIDLParser.T__32 - 33)) | (1 << (WebIDLParser.T__33 - 33)) | (1 << (WebIDLParser.T__34 - 33)))) !== 0) || _la===WebIDLParser.DECIMAL_WEBIDL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constType() {
	    let localctx = new ConstTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, WebIDLParser.RULE_constType);
	    try {
	        this.state = 385;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 383;
	            this.primitiveType();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 384;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readonlyMember() {
	    let localctx = new ReadonlyMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, WebIDLParser.RULE_readonlyMember);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(WebIDLParser.T__17);
	        this.state = 388;
	        this.readonlyMemberRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readonlyMemberRest() {
	    let localctx = new ReadonlyMemberRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, WebIDLParser.RULE_readonlyMemberRest);
	    try {
	        this.state = 393;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 390;
	            this.attributeRest();
	            break;
	        case WebIDLParser.T__13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 391;
	            this.maplikeRest();
	            break;
	        case WebIDLParser.T__19:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 392;
	            this.setlikeRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readWriteAttribute() {
	    let localctx = new ReadWriteAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, WebIDLParser.RULE_readWriteAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.attributeRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritAttribute() {
	    let localctx = new InheritAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, WebIDLParser.RULE_inheritAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(WebIDLParser.T__10);
	        this.state = 398;
	        this.attributeRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeRest() {
	    let localctx = new AttributeRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, WebIDLParser.RULE_attributeRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 400;
	        this.match(WebIDLParser.T__1);
	        this.state = 401;
	        this.typeWithExtendedAttributes();
	        this.state = 402;
	        this.attributeName();
	        this.state = 403;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeName() {
	    let localctx = new AttributeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, WebIDLParser.RULE_attributeName);
	    try {
	        this.state = 407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.attributeNameKeyword();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeNameKeyword() {
	    let localctx = new AttributeNameKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, WebIDLParser.RULE_attributeNameKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        _la = this._input.LA(1);
	        if(!(_la===WebIDLParser.T__0 || _la===WebIDLParser.T__18)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalReadOnly() {
	    let localctx = new OptionalReadOnlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, WebIDLParser.RULE_optionalReadOnly);
	    try {
	        this.state = 413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 411;
	            this.match(WebIDLParser.T__17);
	            break;
	        case WebIDLParser.T__1:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, WebIDLParser.RULE_defaultValue);
	    try {
	        this.state = 422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__30:
	        case WebIDLParser.T__31:
	        case WebIDLParser.T__32:
	        case WebIDLParser.T__33:
	        case WebIDLParser.T__34:
	        case WebIDLParser.INTEGER_WEBIDL:
	        case WebIDLParser.DECIMAL_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 415;
	            this.constValue();
	            break;
	        case WebIDLParser.STRING_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 416;
	            this.match(WebIDLParser.STRING_WEBIDL);
	            break;
	        case WebIDLParser.T__35:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 417;
	            this.match(WebIDLParser.T__35);
	            this.state = 418;
	            this.match(WebIDLParser.T__36);
	            break;
	        case WebIDLParser.T__25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 419;
	            this.match(WebIDLParser.T__25);
	            this.state = 420;
	            this.match(WebIDLParser.T__26);
	            break;
	        case WebIDLParser.T__37:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 421;
	            this.match(WebIDLParser.T__37);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operation() {
	    let localctx = new OperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, WebIDLParser.RULE_operation);
	    try {
	        this.state = 426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 424;
	            this.regularOperation();
	            break;
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 425;
	            this.specialOperation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularOperation() {
	    let localctx = new RegularOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, WebIDLParser.RULE_regularOperation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 428;
	        this.type_();
	        this.state = 429;
	        this.operationRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialOperation() {
	    let localctx = new SpecialOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, WebIDLParser.RULE_specialOperation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.special();
	        this.state = 432;
	        this.regularOperation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	special() {
	    let localctx = new SpecialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, WebIDLParser.RULE_special);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WebIDLParser.T__5) | (1 << WebIDLParser.T__8) | (1 << WebIDLParser.T__20))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operationRest() {
	    let localctx = new OperationRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, WebIDLParser.RULE_operationRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.optionalOperationName();
	        this.state = 437;
	        this.match(WebIDLParser.T__38);
	        this.state = 438;
	        this.argumentList();
	        this.state = 439;
	        this.match(WebIDLParser.T__39);
	        this.state = 440;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOperationName() {
	    let localctx = new OptionalOperationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, WebIDLParser.RULE_optionalOperationName);
	    try {
	        this.state = 444;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__9:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 442;
	            this.operationName();
	            break;
	        case WebIDLParser.T__38:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operationName() {
	    let localctx = new OperationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, WebIDLParser.RULE_operationName);
	    try {
	        this.state = 448;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 446;
	            this.operationNameKeyword();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 447;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operationNameKeyword() {
	    let localctx = new OperationNameKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, WebIDLParser.RULE_operationNameKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(WebIDLParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, WebIDLParser.RULE_argumentList);
	    try {
	        this.state = 456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__41:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 452;
	            this.argument();
	            this.state = 453;
	            this.arguments();
	            break;
	        case WebIDLParser.T__39:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, WebIDLParser.RULE_arguments);
	    try {
	        this.state = 463;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 458;
	            this.match(WebIDLParser.T__40);
	            this.state = 459;
	            this.argument();
	            this.state = 460;
	            this.arguments();
	            break;
	        case WebIDLParser.T__39:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, WebIDLParser.RULE_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this.extendedAttributeList();
	        this.state = 466;
	        this.argumentRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentRest() {
	    let localctx = new ArgumentRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, WebIDLParser.RULE_argumentRest);
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 468;
	            this.match(WebIDLParser.T__41);
	            this.state = 469;
	            this.typeWithExtendedAttributes();
	            this.state = 470;
	            this.argumentName();
	            this.state = 471;
	            this.default_();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 473;
	            this.type_();
	            this.state = 474;
	            this.ellipsis();
	            this.state = 475;
	            this.argumentName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentName() {
	    let localctx = new ArgumentNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, WebIDLParser.RULE_argumentName);
	    try {
	        this.state = 481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 479;
	            this.argumentNameKeyword();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 480;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ellipsis() {
	    let localctx = new EllipsisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, WebIDLParser.RULE_ellipsis);
	    try {
	        this.state = 485;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this.match(WebIDLParser.T__42);
	            break;
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor() {
	    let localctx = new ConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, WebIDLParser.RULE_constructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(WebIDLParser.T__4);
	        this.state = 488;
	        this.match(WebIDLParser.T__38);
	        this.state = 489;
	        this.argumentList();
	        this.state = 490;
	        this.match(WebIDLParser.T__39);
	        this.state = 491;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringifier() {
	    let localctx = new StringifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, WebIDLParser.RULE_stringifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(WebIDLParser.T__22);
	        this.state = 494;
	        this.stringifierRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringifierRest() {
	    let localctx = new StringifierRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, WebIDLParser.RULE_stringifierRest);
	    try {
	        this.state = 501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 496;
	            this.optionalReadOnly();
	            this.state = 497;
	            this.attributeRest();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 499;
	            this.regularOperation();
	            break;
	        case WebIDLParser.T__27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 500;
	            this.match(WebIDLParser.T__27);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticMember() {
	    let localctx = new StaticMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, WebIDLParser.RULE_staticMember);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(WebIDLParser.T__21);
	        this.state = 504;
	        this.staticMemberRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticMemberRest() {
	    let localctx = new StaticMemberRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, WebIDLParser.RULE_staticMemberRest);
	    try {
	        this.state = 510;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 506;
	            this.optionalReadOnly();
	            this.state = 507;
	            this.attributeRest();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 509;
	            this.regularOperation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterable() {
	    let localctx = new IterableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, WebIDLParser.RULE_iterable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(WebIDLParser.T__12);
	        this.state = 513;
	        this.match(WebIDLParser.T__43);
	        this.state = 514;
	        this.typeWithExtendedAttributes();
	        this.state = 515;
	        this.optionalType();
	        this.state = 516;
	        this.match(WebIDLParser.T__44);
	        this.state = 517;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalType() {
	    let localctx = new OptionalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, WebIDLParser.RULE_optionalType);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 519;
	            this.match(WebIDLParser.T__40);
	            this.state = 520;
	            this.typeWithExtendedAttributes();
	            break;
	        case WebIDLParser.T__44:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asyncIterable() {
	    let localctx = new AsyncIterableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, WebIDLParser.RULE_asyncIterable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this.match(WebIDLParser.T__0);
	        this.state = 525;
	        this.match(WebIDLParser.T__12);
	        this.state = 526;
	        this.match(WebIDLParser.T__43);
	        this.state = 527;
	        this.typeWithExtendedAttributes();
	        this.state = 528;
	        this.optionalType();
	        this.state = 529;
	        this.match(WebIDLParser.T__44);
	        this.state = 530;
	        this.optionalArgumentList();
	        this.state = 531;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalArgumentList() {
	    let localctx = new OptionalArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, WebIDLParser.RULE_optionalArgumentList);
	    try {
	        this.state = 538;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__38:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 533;
	            this.match(WebIDLParser.T__38);
	            this.state = 534;
	            this.argumentList();
	            this.state = 535;
	            this.match(WebIDLParser.T__39);
	            break;
	        case WebIDLParser.T__27:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readWriteMaplike() {
	    let localctx = new ReadWriteMaplikeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, WebIDLParser.RULE_readWriteMaplike);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.maplikeRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maplikeRest() {
	    let localctx = new MaplikeRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, WebIDLParser.RULE_maplikeRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.match(WebIDLParser.T__13);
	        this.state = 543;
	        this.match(WebIDLParser.T__43);
	        this.state = 544;
	        this.typeWithExtendedAttributes();
	        this.state = 545;
	        this.match(WebIDLParser.T__40);
	        this.state = 546;
	        this.typeWithExtendedAttributes();
	        this.state = 547;
	        this.match(WebIDLParser.T__44);
	        this.state = 548;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readWriteSetlike() {
	    let localctx = new ReadWriteSetlikeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, WebIDLParser.RULE_readWriteSetlike);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.setlikeRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setlikeRest() {
	    let localctx = new SetlikeRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, WebIDLParser.RULE_setlikeRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(WebIDLParser.T__19);
	        this.state = 553;
	        this.match(WebIDLParser.T__43);
	        this.state = 554;
	        this.typeWithExtendedAttributes();
	        this.state = 555;
	        this.match(WebIDLParser.T__44);
	        this.state = 556;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_() {
	    let localctx = new Namespace_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, WebIDLParser.RULE_namespace_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.match(WebIDLParser.T__15);
	        this.state = 559;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 560;
	        this.match(WebIDLParser.T__25);
	        this.state = 561;
	        this.namespaceMembers();
	        this.state = 562;
	        this.match(WebIDLParser.T__26);
	        this.state = 563;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceMembers() {
	    let localctx = new NamespaceMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, WebIDLParser.RULE_namespaceMembers);
	    try {
	        this.state = 570;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.extendedAttributeList();
	            this.state = 566;
	            this.namespaceMember();
	            this.state = 567;
	            this.namespaceMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceMember() {
	    let localctx = new NamespaceMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, WebIDLParser.RULE_namespaceMember);
	    try {
	        this.state = 576;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 572;
	            this.regularOperation();
	            break;
	        case WebIDLParser.T__17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this.match(WebIDLParser.T__17);
	            this.state = 574;
	            this.attributeRest();
	            break;
	        case WebIDLParser.T__3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 575;
	            this.const_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary() {
	    let localctx = new DictionaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, WebIDLParser.RULE_dictionary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 578;
	        this.match(WebIDLParser.T__6);
	        this.state = 579;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 580;
	        this.inheritance();
	        this.state = 581;
	        this.match(WebIDLParser.T__25);
	        this.state = 582;
	        this.dictionaryMembers();
	        this.state = 583;
	        this.match(WebIDLParser.T__26);
	        this.state = 584;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryMembers() {
	    let localctx = new DictionaryMembersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, WebIDLParser.RULE_dictionaryMembers);
	    try {
	        this.state = 590;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 586;
	            this.dictionaryMember();
	            this.state = 587;
	            this.dictionaryMembers();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryMember() {
	    let localctx = new DictionaryMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, WebIDLParser.RULE_dictionaryMember);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.extendedAttributeList();
	        this.state = 593;
	        this.dictionaryMemberRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryMemberRest() {
	    let localctx = new DictionaryMemberRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, WebIDLParser.RULE_dictionaryMemberRest);
	    try {
	        this.state = 605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 595;
	            this.match(WebIDLParser.T__18);
	            this.state = 596;
	            this.typeWithExtendedAttributes();
	            this.state = 597;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            this.state = 598;
	            this.match(WebIDLParser.T__27);
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 600;
	            this.type_();
	            this.state = 601;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            this.state = 602;
	            this.default_();
	            this.state = 603;
	            this.match(WebIDLParser.T__27);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partialDictionary() {
	    let localctx = new PartialDictionaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, WebIDLParser.RULE_partialDictionary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(WebIDLParser.T__6);
	        this.state = 608;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 609;
	        this.match(WebIDLParser.T__25);
	        this.state = 610;
	        this.dictionaryMembers();
	        this.state = 611;
	        this.match(WebIDLParser.T__26);
	        this.state = 612;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_() {
	    let localctx = new Default_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, WebIDLParser.RULE_default_);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 614;
	            this.match(WebIDLParser.T__29);
	            this.state = 615;
	            this.defaultValue();
	            break;
	        case WebIDLParser.T__27:
	        case WebIDLParser.T__39:
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_() {
	    let localctx = new Enum_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, WebIDLParser.RULE_enum_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.match(WebIDLParser.T__7);
	        this.state = 620;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 621;
	        this.match(WebIDLParser.T__25);
	        this.state = 622;
	        this.enumValueList();
	        this.state = 623;
	        this.match(WebIDLParser.T__26);
	        this.state = 624;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValueList() {
	    let localctx = new EnumValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, WebIDLParser.RULE_enumValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.match(WebIDLParser.STRING_WEBIDL);
	        this.state = 627;
	        this.enumValueListComma();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValueListComma() {
	    let localctx = new EnumValueListCommaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, WebIDLParser.RULE_enumValueListComma);
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 629;
	            this.match(WebIDLParser.T__40);
	            this.state = 630;
	            this.enumValueListString();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValueListString() {
	    let localctx = new EnumValueListStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, WebIDLParser.RULE_enumValueListString);
	    try {
	        this.state = 637;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.STRING_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 634;
	            this.match(WebIDLParser.STRING_WEBIDL);
	            this.state = 635;
	            this.enumValueListComma();
	            break;
	        case WebIDLParser.T__26:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callbackRest() {
	    let localctx = new CallbackRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, WebIDLParser.RULE_callbackRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 640;
	        this.match(WebIDLParser.T__29);
	        this.state = 641;
	        this.type_();
	        this.state = 642;
	        this.match(WebIDLParser.T__38);
	        this.state = 643;
	        this.argumentList();
	        this.state = 644;
	        this.match(WebIDLParser.T__39);
	        this.state = 645;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedef_() {
	    let localctx = new Typedef_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, WebIDLParser.RULE_typedef_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(WebIDLParser.T__23);
	        this.state = 648;
	        this.typeWithExtendedAttributes();
	        this.state = 649;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 650;
	        this.match(WebIDLParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, WebIDLParser.RULE_type_);
	    try {
	        this.state = 656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 652;
	            this.singleType();
	            break;
	        case WebIDLParser.T__38:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 653;
	            this.unionType();
	            this.state = 654;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeWithExtendedAttributes() {
	    let localctx = new TypeWithExtendedAttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, WebIDLParser.RULE_typeWithExtendedAttributes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.extendedAttributeList();
	        this.state = 659;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleType() {
	    let localctx = new SingleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, WebIDLParser.RULE_singleType);
	    try {
	        this.state = 664;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 661;
	            this.distinguishableType();
	            break;
	        case WebIDLParser.T__45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 662;
	            this.match(WebIDLParser.T__45);
	            break;
	        case WebIDLParser.T__65:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 663;
	            this.promiseType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionType() {
	    let localctx = new UnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, WebIDLParser.RULE_unionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        this.match(WebIDLParser.T__38);
	        this.state = 667;
	        this.unionMemberType();
	        this.state = 668;
	        this.match(WebIDLParser.T__46);
	        this.state = 669;
	        this.unionMemberType();
	        this.state = 670;
	        this.unionMemberTypes();
	        this.state = 671;
	        this.match(WebIDLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionMemberType() {
	    let localctx = new UnionMemberTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, WebIDLParser.RULE_unionMemberType);
	    try {
	        this.state = 679;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__35:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 673;
	            this.extendedAttributeList();
	            this.state = 674;
	            this.distinguishableType();
	            break;
	        case WebIDLParser.T__38:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.unionType();
	            this.state = 677;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionMemberTypes() {
	    let localctx = new UnionMemberTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, WebIDLParser.RULE_unionMemberTypes);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 681;
	            this.match(WebIDLParser.T__46);
	            this.state = 682;
	            this.unionMemberType();
	            this.state = 683;
	            this.unionMemberTypes();
	            break;
	        case WebIDLParser.T__39:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinguishableType() {
	    let localctx = new DistinguishableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, WebIDLParser.RULE_distinguishableType);
	    try {
	        this.state = 724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.primitiveType();
	            this.state = 689;
	            this.null_();
	            break;
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 691;
	            this.stringType();
	            this.state = 692;
	            this.null_();
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 694;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            this.state = 695;
	            this.null_();
	            break;
	        case WebIDLParser.T__47:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 696;
	            this.match(WebIDLParser.T__47);
	            this.state = 697;
	            this.match(WebIDLParser.T__43);
	            this.state = 698;
	            this.typeWithExtendedAttributes();
	            this.state = 699;
	            this.match(WebIDLParser.T__44);
	            this.state = 700;
	            this.null_();
	            break;
	        case WebIDLParser.T__48:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 702;
	            this.match(WebIDLParser.T__48);
	            this.state = 703;
	            this.null_();
	            break;
	        case WebIDLParser.T__49:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 704;
	            this.match(WebIDLParser.T__49);
	            this.state = 705;
	            this.null_();
	            break;
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 706;
	            this.bufferRelatedType();
	            this.state = 707;
	            this.null_();
	            break;
	        case WebIDLParser.T__50:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 709;
	            this.match(WebIDLParser.T__50);
	            this.state = 710;
	            this.match(WebIDLParser.T__43);
	            this.state = 711;
	            this.typeWithExtendedAttributes();
	            this.state = 712;
	            this.match(WebIDLParser.T__44);
	            this.state = 713;
	            this.null_();
	            break;
	        case WebIDLParser.T__51:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 715;
	            this.match(WebIDLParser.T__51);
	            this.state = 716;
	            this.match(WebIDLParser.T__43);
	            this.state = 717;
	            this.typeWithExtendedAttributes();
	            this.state = 718;
	            this.match(WebIDLParser.T__44);
	            this.state = 719;
	            this.null_();
	            break;
	        case WebIDLParser.T__66:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 721;
	            this.recordType();
	            this.state = 722;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, WebIDLParser.RULE_primitiveType);
	    try {
	        this.state = 733;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 726;
	            this.unsignedIntegerType();
	            break;
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 727;
	            this.unrestrictedFloatType();
	            break;
	        case WebIDLParser.T__52:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 728;
	            this.match(WebIDLParser.T__52);
	            break;
	        case WebIDLParser.T__53:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 729;
	            this.match(WebIDLParser.T__53);
	            break;
	        case WebIDLParser.T__54:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 730;
	            this.match(WebIDLParser.T__54);
	            break;
	        case WebIDLParser.T__55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 731;
	            this.match(WebIDLParser.T__55);
	            break;
	        case WebIDLParser.T__56:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 732;
	            this.match(WebIDLParser.T__56);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unrestrictedFloatType() {
	    let localctx = new UnrestrictedFloatTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, WebIDLParser.RULE_unrestrictedFloatType);
	    try {
	        this.state = 738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 735;
	            this.match(WebIDLParser.T__24);
	            this.state = 736;
	            this.floatType();
	            break;
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.floatType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatType() {
	    let localctx = new FloatTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, WebIDLParser.RULE_floatType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        _la = this._input.LA(1);
	        if(!(_la===WebIDLParser.T__57 || _la===WebIDLParser.T__58)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedIntegerType() {
	    let localctx = new UnsignedIntegerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, WebIDLParser.RULE_unsignedIntegerType);
	    try {
	        this.state = 745;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            this.match(WebIDLParser.T__59);
	            this.state = 743;
	            this.integerType();
	            break;
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 744;
	            this.integerType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerType() {
	    let localctx = new IntegerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, WebIDLParser.RULE_integerType);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__60:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 747;
	            this.match(WebIDLParser.T__60);
	            break;
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 748;
	            this.match(WebIDLParser.T__61);
	            this.state = 749;
	            this.optionalLong();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalLong() {
	    let localctx = new OptionalLongContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, WebIDLParser.RULE_optionalLong);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.match(WebIDLParser.T__61);
	            break;
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__39:
	        case WebIDLParser.T__40:
	        case WebIDLParser.T__42:
	        case WebIDLParser.T__44:
	        case WebIDLParser.T__46:
	        case WebIDLParser.T__67:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringType() {
	    let localctx = new StringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, WebIDLParser.RULE_stringType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (WebIDLParser.T__62 - 63)) | (1 << (WebIDLParser.T__63 - 63)) | (1 << (WebIDLParser.T__64 - 63)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	promiseType() {
	    let localctx = new PromiseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, WebIDLParser.RULE_promiseType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this.match(WebIDLParser.T__65);
	        this.state = 759;
	        this.match(WebIDLParser.T__43);
	        this.state = 760;
	        this.type_();
	        this.state = 761;
	        this.match(WebIDLParser.T__44);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, WebIDLParser.RULE_recordType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(WebIDLParser.T__66);
	        this.state = 764;
	        this.match(WebIDLParser.T__43);
	        this.state = 765;
	        this.stringType();
	        this.state = 766;
	        this.match(WebIDLParser.T__40);
	        this.state = 767;
	        this.typeWithExtendedAttributes();
	        this.state = 768;
	        this.match(WebIDLParser.T__44);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_() {
	    let localctx = new Null_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, WebIDLParser.RULE_null_);
	    try {
	        this.state = 772;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.match(WebIDLParser.T__67);
	            break;
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__39:
	        case WebIDLParser.T__40:
	        case WebIDLParser.T__42:
	        case WebIDLParser.T__44:
	        case WebIDLParser.T__46:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bufferRelatedType() {
	    let localctx = new BufferRelatedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, WebIDLParser.RULE_bufferRelatedType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        _la = this._input.LA(1);
	        if(!(((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (WebIDLParser.T__68 - 69)) | (1 << (WebIDLParser.T__69 - 69)) | (1 << (WebIDLParser.T__70 - 69)) | (1 << (WebIDLParser.T__71 - 69)) | (1 << (WebIDLParser.T__72 - 69)) | (1 << (WebIDLParser.T__73 - 69)) | (1 << (WebIDLParser.T__74 - 69)) | (1 << (WebIDLParser.T__75 - 69)) | (1 << (WebIDLParser.T__76 - 69)) | (1 << (WebIDLParser.T__77 - 69)) | (1 << (WebIDLParser.T__78 - 69)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeList() {
	    let localctx = new ExtendedAttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, WebIDLParser.RULE_extendedAttributeList);
	    try {
	        this.state = 782;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 776;
	            this.match(WebIDLParser.T__35);
	            this.state = 777;
	            this.extendedAttribute();
	            this.state = 778;
	            this.extendedAttributes();
	            this.state = 779;
	            this.match(WebIDLParser.T__36);
	            break;
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__38:
	        case WebIDLParser.T__41:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributes() {
	    let localctx = new ExtendedAttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, WebIDLParser.RULE_extendedAttributes);
	    try {
	        this.state = 789;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 784;
	            this.match(WebIDLParser.T__40);
	            this.state = 785;
	            this.extendedAttribute();
	            this.state = 786;
	            this.extendedAttributes();
	            break;
	        case WebIDLParser.T__36:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttribute() {
	    let localctx = new ExtendedAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, WebIDLParser.RULE_extendedAttribute);
	    try {
	        this.state = 798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 791;
	            this.extendedAttributeNoArgs();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 792;
	            this.extendedAttributeArgList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 793;
	            this.extendedAttributeNamedArgList();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 794;
	            this.extendedAttributeIdent();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 795;
	            this.extendedAttributeIdentList();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 796;
	            this.extendedAttributeString();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 797;
	            this.extendedAttributeStringList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	other() {
	    let localctx = new OtherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, WebIDLParser.RULE_other);
	    try {
	        this.state = 845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.INTEGER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 800;
	            this.match(WebIDLParser.INTEGER_WEBIDL);
	            break;
	        case WebIDLParser.DECIMAL_WEBIDL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 801;
	            this.match(WebIDLParser.DECIMAL_WEBIDL);
	            break;
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 802;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            break;
	        case WebIDLParser.STRING_WEBIDL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 803;
	            this.match(WebIDLParser.STRING_WEBIDL);
	            break;
	        case WebIDLParser.OTHER_WEBIDL:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 804;
	            this.match(WebIDLParser.OTHER_WEBIDL);
	            break;
	        case WebIDLParser.T__79:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 805;
	            this.match(WebIDLParser.T__79);
	            break;
	        case WebIDLParser.T__32:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 806;
	            this.match(WebIDLParser.T__32);
	            break;
	        case WebIDLParser.T__80:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 807;
	            this.match(WebIDLParser.T__80);
	            break;
	        case WebIDLParser.T__42:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 808;
	            this.match(WebIDLParser.T__42);
	            break;
	        case WebIDLParser.T__28:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 809;
	            this.match(WebIDLParser.T__28);
	            break;
	        case WebIDLParser.T__27:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 810;
	            this.match(WebIDLParser.T__27);
	            break;
	        case WebIDLParser.T__43:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 811;
	            this.match(WebIDLParser.T__43);
	            break;
	        case WebIDLParser.T__29:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 812;
	            this.match(WebIDLParser.T__29);
	            break;
	        case WebIDLParser.T__44:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 813;
	            this.match(WebIDLParser.T__44);
	            break;
	        case WebIDLParser.T__67:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 814;
	            this.match(WebIDLParser.T__67);
	            break;
	        case WebIDLParser.T__62:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 815;
	            this.match(WebIDLParser.T__62);
	            break;
	        case WebIDLParser.T__63:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 816;
	            this.match(WebIDLParser.T__63);
	            break;
	        case WebIDLParser.T__50:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 817;
	            this.match(WebIDLParser.T__50);
	            break;
	        case WebIDLParser.T__33:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 818;
	            this.match(WebIDLParser.T__33);
	            break;
	        case WebIDLParser.T__34:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 819;
	            this.match(WebIDLParser.T__34);
	            break;
	        case WebIDLParser.T__51:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 820;
	            this.match(WebIDLParser.T__51);
	            break;
	        case WebIDLParser.T__65:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 821;
	            this.match(WebIDLParser.T__65);
	            break;
	        case WebIDLParser.T__64:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 822;
	            this.match(WebIDLParser.T__64);
	            break;
	        case WebIDLParser.T__45:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 823;
	            this.match(WebIDLParser.T__45);
	            break;
	        case WebIDLParser.T__56:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 824;
	            this.match(WebIDLParser.T__56);
	            break;
	        case WebIDLParser.T__53:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 825;
	            this.match(WebIDLParser.T__53);
	            break;
	        case WebIDLParser.T__54:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 826;
	            this.match(WebIDLParser.T__54);
	            break;
	        case WebIDLParser.T__58:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 827;
	            this.match(WebIDLParser.T__58);
	            break;
	        case WebIDLParser.T__31:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 828;
	            this.match(WebIDLParser.T__31);
	            break;
	        case WebIDLParser.T__57:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 829;
	            this.match(WebIDLParser.T__57);
	            break;
	        case WebIDLParser.T__61:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 830;
	            this.match(WebIDLParser.T__61);
	            break;
	        case WebIDLParser.T__37:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 831;
	            this.match(WebIDLParser.T__37);
	            break;
	        case WebIDLParser.T__48:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 832;
	            this.match(WebIDLParser.T__48);
	            break;
	        case WebIDLParser.T__55:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 833;
	            this.match(WebIDLParser.T__55);
	            break;
	        case WebIDLParser.T__46:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 834;
	            this.match(WebIDLParser.T__46);
	            break;
	        case WebIDLParser.T__41:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 835;
	            this.match(WebIDLParser.T__41);
	            break;
	        case WebIDLParser.T__66:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 836;
	            this.match(WebIDLParser.T__66);
	            break;
	        case WebIDLParser.T__47:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 837;
	            this.match(WebIDLParser.T__47);
	            break;
	        case WebIDLParser.T__60:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 838;
	            this.match(WebIDLParser.T__60);
	            break;
	        case WebIDLParser.T__49:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 839;
	            this.match(WebIDLParser.T__49);
	            break;
	        case WebIDLParser.T__30:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 840;
	            this.match(WebIDLParser.T__30);
	            break;
	        case WebIDLParser.T__59:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 841;
	            this.match(WebIDLParser.T__59);
	            break;
	        case WebIDLParser.T__52:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 842;
	            this.match(WebIDLParser.T__52);
	            break;
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 843;
	            this.argumentNameKeyword();
	            break;
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 844;
	            this.bufferRelatedType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherOrComma() {
	    let localctx = new OtherOrCommaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, WebIDLParser.RULE_otherOrComma);
	    try {
	        this.state = 849;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__0:
	        case WebIDLParser.T__1:
	        case WebIDLParser.T__2:
	        case WebIDLParser.T__3:
	        case WebIDLParser.T__4:
	        case WebIDLParser.T__5:
	        case WebIDLParser.T__6:
	        case WebIDLParser.T__7:
	        case WebIDLParser.T__8:
	        case WebIDLParser.T__9:
	        case WebIDLParser.T__10:
	        case WebIDLParser.T__11:
	        case WebIDLParser.T__12:
	        case WebIDLParser.T__13:
	        case WebIDLParser.T__14:
	        case WebIDLParser.T__15:
	        case WebIDLParser.T__16:
	        case WebIDLParser.T__17:
	        case WebIDLParser.T__18:
	        case WebIDLParser.T__19:
	        case WebIDLParser.T__20:
	        case WebIDLParser.T__21:
	        case WebIDLParser.T__22:
	        case WebIDLParser.T__23:
	        case WebIDLParser.T__24:
	        case WebIDLParser.T__27:
	        case WebIDLParser.T__28:
	        case WebIDLParser.T__29:
	        case WebIDLParser.T__30:
	        case WebIDLParser.T__31:
	        case WebIDLParser.T__32:
	        case WebIDLParser.T__33:
	        case WebIDLParser.T__34:
	        case WebIDLParser.T__37:
	        case WebIDLParser.T__41:
	        case WebIDLParser.T__42:
	        case WebIDLParser.T__43:
	        case WebIDLParser.T__44:
	        case WebIDLParser.T__45:
	        case WebIDLParser.T__46:
	        case WebIDLParser.T__47:
	        case WebIDLParser.T__48:
	        case WebIDLParser.T__49:
	        case WebIDLParser.T__50:
	        case WebIDLParser.T__51:
	        case WebIDLParser.T__52:
	        case WebIDLParser.T__53:
	        case WebIDLParser.T__54:
	        case WebIDLParser.T__55:
	        case WebIDLParser.T__56:
	        case WebIDLParser.T__57:
	        case WebIDLParser.T__58:
	        case WebIDLParser.T__59:
	        case WebIDLParser.T__60:
	        case WebIDLParser.T__61:
	        case WebIDLParser.T__62:
	        case WebIDLParser.T__63:
	        case WebIDLParser.T__64:
	        case WebIDLParser.T__65:
	        case WebIDLParser.T__66:
	        case WebIDLParser.T__67:
	        case WebIDLParser.T__68:
	        case WebIDLParser.T__69:
	        case WebIDLParser.T__70:
	        case WebIDLParser.T__71:
	        case WebIDLParser.T__72:
	        case WebIDLParser.T__73:
	        case WebIDLParser.T__74:
	        case WebIDLParser.T__75:
	        case WebIDLParser.T__76:
	        case WebIDLParser.T__77:
	        case WebIDLParser.T__78:
	        case WebIDLParser.T__79:
	        case WebIDLParser.T__80:
	        case WebIDLParser.INTEGER_WEBIDL:
	        case WebIDLParser.DECIMAL_WEBIDL:
	        case WebIDLParser.IDENTIFIER_WEBIDL:
	        case WebIDLParser.STRING_WEBIDL:
	        case WebIDLParser.OTHER_WEBIDL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.other();
	            break;
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.match(WebIDLParser.T__40);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, WebIDLParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 852;
	        this.identifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifiers() {
	    let localctx = new IdentifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, WebIDLParser.RULE_identifiers);
	    try {
	        this.state = 858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 854;
	            this.match(WebIDLParser.T__40);
	            this.state = 855;
	            this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	            this.state = 856;
	            this.identifiers();
	            break;
	        case WebIDLParser.T__39:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeNoArgs() {
	    let localctx = new ExtendedAttributeNoArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, WebIDLParser.RULE_extendedAttributeNoArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeArgList() {
	    let localctx = new ExtendedAttributeArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, WebIDLParser.RULE_extendedAttributeArgList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 863;
	        this.match(WebIDLParser.T__38);
	        this.state = 864;
	        this.argumentList();
	        this.state = 865;
	        this.match(WebIDLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeIdent() {
	    let localctx = new ExtendedAttributeIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, WebIDLParser.RULE_extendedAttributeIdent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 868;
	        this.match(WebIDLParser.T__29);
	        this.state = 869;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeIdentList() {
	    let localctx = new ExtendedAttributeIdentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, WebIDLParser.RULE_extendedAttributeIdentList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 872;
	        this.match(WebIDLParser.T__29);
	        this.state = 873;
	        this.match(WebIDLParser.T__38);
	        this.state = 874;
	        this.identifierList();
	        this.state = 875;
	        this.match(WebIDLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeNamedArgList() {
	    let localctx = new ExtendedAttributeNamedArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, WebIDLParser.RULE_extendedAttributeNamedArgList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 878;
	        this.match(WebIDLParser.T__29);
	        this.state = 879;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 880;
	        this.match(WebIDLParser.T__38);
	        this.state = 881;
	        this.argumentList();
	        this.state = 882;
	        this.match(WebIDLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeString() {
	    let localctx = new ExtendedAttributeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, WebIDLParser.RULE_extendedAttributeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 885;
	        this.match(WebIDLParser.T__29);
	        this.state = 886;
	        this.match(WebIDLParser.STRING_WEBIDL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedAttributeStringList() {
	    let localctx = new ExtendedAttributeStringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, WebIDLParser.RULE_extendedAttributeStringList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(WebIDLParser.IDENTIFIER_WEBIDL);
	        this.state = 889;
	        this.match(WebIDLParser.T__29);
	        this.state = 890;
	        this.match(WebIDLParser.T__38);
	        this.state = 891;
	        this.stringList();
	        this.state = 892;
	        this.match(WebIDLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringList() {
	    let localctx = new StringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, WebIDLParser.RULE_stringList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(WebIDLParser.STRING_WEBIDL);
	        this.state = 895;
	        this.strings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strings() {
	    let localctx = new StringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, WebIDLParser.RULE_strings);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case WebIDLParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 897;
	            this.match(WebIDLParser.T__40);
	            this.state = 898;
	            this.match(WebIDLParser.STRING_WEBIDL);
	            this.state = 899;
	            this.strings();
	            break;
	        case WebIDLParser.T__39:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

WebIDLParser.EOF = antlr4.Token.EOF;
WebIDLParser.T__0 = 1;
WebIDLParser.T__1 = 2;
WebIDLParser.T__2 = 3;
WebIDLParser.T__3 = 4;
WebIDLParser.T__4 = 5;
WebIDLParser.T__5 = 6;
WebIDLParser.T__6 = 7;
WebIDLParser.T__7 = 8;
WebIDLParser.T__8 = 9;
WebIDLParser.T__9 = 10;
WebIDLParser.T__10 = 11;
WebIDLParser.T__11 = 12;
WebIDLParser.T__12 = 13;
WebIDLParser.T__13 = 14;
WebIDLParser.T__14 = 15;
WebIDLParser.T__15 = 16;
WebIDLParser.T__16 = 17;
WebIDLParser.T__17 = 18;
WebIDLParser.T__18 = 19;
WebIDLParser.T__19 = 20;
WebIDLParser.T__20 = 21;
WebIDLParser.T__21 = 22;
WebIDLParser.T__22 = 23;
WebIDLParser.T__23 = 24;
WebIDLParser.T__24 = 25;
WebIDLParser.T__25 = 26;
WebIDLParser.T__26 = 27;
WebIDLParser.T__27 = 28;
WebIDLParser.T__28 = 29;
WebIDLParser.T__29 = 30;
WebIDLParser.T__30 = 31;
WebIDLParser.T__31 = 32;
WebIDLParser.T__32 = 33;
WebIDLParser.T__33 = 34;
WebIDLParser.T__34 = 35;
WebIDLParser.T__35 = 36;
WebIDLParser.T__36 = 37;
WebIDLParser.T__37 = 38;
WebIDLParser.T__38 = 39;
WebIDLParser.T__39 = 40;
WebIDLParser.T__40 = 41;
WebIDLParser.T__41 = 42;
WebIDLParser.T__42 = 43;
WebIDLParser.T__43 = 44;
WebIDLParser.T__44 = 45;
WebIDLParser.T__45 = 46;
WebIDLParser.T__46 = 47;
WebIDLParser.T__47 = 48;
WebIDLParser.T__48 = 49;
WebIDLParser.T__49 = 50;
WebIDLParser.T__50 = 51;
WebIDLParser.T__51 = 52;
WebIDLParser.T__52 = 53;
WebIDLParser.T__53 = 54;
WebIDLParser.T__54 = 55;
WebIDLParser.T__55 = 56;
WebIDLParser.T__56 = 57;
WebIDLParser.T__57 = 58;
WebIDLParser.T__58 = 59;
WebIDLParser.T__59 = 60;
WebIDLParser.T__60 = 61;
WebIDLParser.T__61 = 62;
WebIDLParser.T__62 = 63;
WebIDLParser.T__63 = 64;
WebIDLParser.T__64 = 65;
WebIDLParser.T__65 = 66;
WebIDLParser.T__66 = 67;
WebIDLParser.T__67 = 68;
WebIDLParser.T__68 = 69;
WebIDLParser.T__69 = 70;
WebIDLParser.T__70 = 71;
WebIDLParser.T__71 = 72;
WebIDLParser.T__72 = 73;
WebIDLParser.T__73 = 74;
WebIDLParser.T__74 = 75;
WebIDLParser.T__75 = 76;
WebIDLParser.T__76 = 77;
WebIDLParser.T__77 = 78;
WebIDLParser.T__78 = 79;
WebIDLParser.T__79 = 80;
WebIDLParser.T__80 = 81;
WebIDLParser.INTEGER_WEBIDL = 82;
WebIDLParser.DECIMAL_WEBIDL = 83;
WebIDLParser.IDENTIFIER_WEBIDL = 84;
WebIDLParser.STRING_WEBIDL = 85;
WebIDLParser.WHITESPACE_WEBIDL = 86;
WebIDLParser.COMMENT_WEBIDL = 87;
WebIDLParser.OTHER_WEBIDL = 88;

WebIDLParser.RULE_webIDL = 0;
WebIDLParser.RULE_definitions = 1;
WebIDLParser.RULE_definition = 2;
WebIDLParser.RULE_argumentNameKeyword = 3;
WebIDLParser.RULE_callbackOrInterfaceOrMixin = 4;
WebIDLParser.RULE_interfaceOrMixin = 5;
WebIDLParser.RULE_interfaceRest = 6;
WebIDLParser.RULE_partial = 7;
WebIDLParser.RULE_partialDefinition = 8;
WebIDLParser.RULE_partialInterfaceOrPartialMixin = 9;
WebIDLParser.RULE_partialInterfaceRest = 10;
WebIDLParser.RULE_interfaceMembers = 11;
WebIDLParser.RULE_interfaceMember = 12;
WebIDLParser.RULE_partialInterfaceMembers = 13;
WebIDLParser.RULE_partialInterfaceMember = 14;
WebIDLParser.RULE_inheritance = 15;
WebIDLParser.RULE_mixinRest = 16;
WebIDLParser.RULE_mixinMembers = 17;
WebIDLParser.RULE_mixinMember = 18;
WebIDLParser.RULE_includesStatement = 19;
WebIDLParser.RULE_callbackRestOrInterface = 20;
WebIDLParser.RULE_callbackInterfaceMembers = 21;
WebIDLParser.RULE_callbackInterfaceMember = 22;
WebIDLParser.RULE_const_ = 23;
WebIDLParser.RULE_constValue = 24;
WebIDLParser.RULE_booleanLiteral = 25;
WebIDLParser.RULE_floatLiteral = 26;
WebIDLParser.RULE_constType = 27;
WebIDLParser.RULE_readonlyMember = 28;
WebIDLParser.RULE_readonlyMemberRest = 29;
WebIDLParser.RULE_readWriteAttribute = 30;
WebIDLParser.RULE_inheritAttribute = 31;
WebIDLParser.RULE_attributeRest = 32;
WebIDLParser.RULE_attributeName = 33;
WebIDLParser.RULE_attributeNameKeyword = 34;
WebIDLParser.RULE_optionalReadOnly = 35;
WebIDLParser.RULE_defaultValue = 36;
WebIDLParser.RULE_operation = 37;
WebIDLParser.RULE_regularOperation = 38;
WebIDLParser.RULE_specialOperation = 39;
WebIDLParser.RULE_special = 40;
WebIDLParser.RULE_operationRest = 41;
WebIDLParser.RULE_optionalOperationName = 42;
WebIDLParser.RULE_operationName = 43;
WebIDLParser.RULE_operationNameKeyword = 44;
WebIDLParser.RULE_argumentList = 45;
WebIDLParser.RULE_arguments = 46;
WebIDLParser.RULE_argument = 47;
WebIDLParser.RULE_argumentRest = 48;
WebIDLParser.RULE_argumentName = 49;
WebIDLParser.RULE_ellipsis = 50;
WebIDLParser.RULE_constructor = 51;
WebIDLParser.RULE_stringifier = 52;
WebIDLParser.RULE_stringifierRest = 53;
WebIDLParser.RULE_staticMember = 54;
WebIDLParser.RULE_staticMemberRest = 55;
WebIDLParser.RULE_iterable = 56;
WebIDLParser.RULE_optionalType = 57;
WebIDLParser.RULE_asyncIterable = 58;
WebIDLParser.RULE_optionalArgumentList = 59;
WebIDLParser.RULE_readWriteMaplike = 60;
WebIDLParser.RULE_maplikeRest = 61;
WebIDLParser.RULE_readWriteSetlike = 62;
WebIDLParser.RULE_setlikeRest = 63;
WebIDLParser.RULE_namespace_ = 64;
WebIDLParser.RULE_namespaceMembers = 65;
WebIDLParser.RULE_namespaceMember = 66;
WebIDLParser.RULE_dictionary = 67;
WebIDLParser.RULE_dictionaryMembers = 68;
WebIDLParser.RULE_dictionaryMember = 69;
WebIDLParser.RULE_dictionaryMemberRest = 70;
WebIDLParser.RULE_partialDictionary = 71;
WebIDLParser.RULE_default_ = 72;
WebIDLParser.RULE_enum_ = 73;
WebIDLParser.RULE_enumValueList = 74;
WebIDLParser.RULE_enumValueListComma = 75;
WebIDLParser.RULE_enumValueListString = 76;
WebIDLParser.RULE_callbackRest = 77;
WebIDLParser.RULE_typedef_ = 78;
WebIDLParser.RULE_type_ = 79;
WebIDLParser.RULE_typeWithExtendedAttributes = 80;
WebIDLParser.RULE_singleType = 81;
WebIDLParser.RULE_unionType = 82;
WebIDLParser.RULE_unionMemberType = 83;
WebIDLParser.RULE_unionMemberTypes = 84;
WebIDLParser.RULE_distinguishableType = 85;
WebIDLParser.RULE_primitiveType = 86;
WebIDLParser.RULE_unrestrictedFloatType = 87;
WebIDLParser.RULE_floatType = 88;
WebIDLParser.RULE_unsignedIntegerType = 89;
WebIDLParser.RULE_integerType = 90;
WebIDLParser.RULE_optionalLong = 91;
WebIDLParser.RULE_stringType = 92;
WebIDLParser.RULE_promiseType = 93;
WebIDLParser.RULE_recordType = 94;
WebIDLParser.RULE_null_ = 95;
WebIDLParser.RULE_bufferRelatedType = 96;
WebIDLParser.RULE_extendedAttributeList = 97;
WebIDLParser.RULE_extendedAttributes = 98;
WebIDLParser.RULE_extendedAttribute = 99;
WebIDLParser.RULE_other = 100;
WebIDLParser.RULE_otherOrComma = 101;
WebIDLParser.RULE_identifierList = 102;
WebIDLParser.RULE_identifiers = 103;
WebIDLParser.RULE_extendedAttributeNoArgs = 104;
WebIDLParser.RULE_extendedAttributeArgList = 105;
WebIDLParser.RULE_extendedAttributeIdent = 106;
WebIDLParser.RULE_extendedAttributeIdentList = 107;
WebIDLParser.RULE_extendedAttributeNamedArgList = 108;
WebIDLParser.RULE_extendedAttributeString = 109;
WebIDLParser.RULE_extendedAttributeStringList = 110;
WebIDLParser.RULE_stringList = 111;
WebIDLParser.RULE_strings = 112;

class WebIDLContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_webIDL;
    }

	definitions() {
	    return this.getTypedRuleContext(DefinitionsContext,0);
	};

	EOF() {
	    return this.getToken(WebIDLParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterWebIDL(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitWebIDL(this);
		}
	}


}



class DefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_definitions;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	definition() {
	    return this.getTypedRuleContext(DefinitionContext,0);
	};

	definitions() {
	    return this.getTypedRuleContext(DefinitionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDefinitions(this);
		}
	}


}



class DefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_definition;
    }

	callbackOrInterfaceOrMixin() {
	    return this.getTypedRuleContext(CallbackOrInterfaceOrMixinContext,0);
	};

	namespace_() {
	    return this.getTypedRuleContext(Namespace_Context,0);
	};

	partial() {
	    return this.getTypedRuleContext(PartialContext,0);
	};

	dictionary() {
	    return this.getTypedRuleContext(DictionaryContext,0);
	};

	enum_() {
	    return this.getTypedRuleContext(Enum_Context,0);
	};

	typedef_() {
	    return this.getTypedRuleContext(Typedef_Context,0);
	};

	includesStatement() {
	    return this.getTypedRuleContext(IncludesStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDefinition(this);
		}
	}


}



class ArgumentNameKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_argumentNameKeyword;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArgumentNameKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArgumentNameKeyword(this);
		}
	}


}



class CallbackOrInterfaceOrMixinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_callbackOrInterfaceOrMixin;
    }

	callbackRestOrInterface() {
	    return this.getTypedRuleContext(CallbackRestOrInterfaceContext,0);
	};

	interfaceOrMixin() {
	    return this.getTypedRuleContext(InterfaceOrMixinContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterCallbackOrInterfaceOrMixin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitCallbackOrInterfaceOrMixin(this);
		}
	}


}



class InterfaceOrMixinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_interfaceOrMixin;
    }

	interfaceRest() {
	    return this.getTypedRuleContext(InterfaceRestContext,0);
	};

	mixinRest() {
	    return this.getTypedRuleContext(MixinRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInterfaceOrMixin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInterfaceOrMixin(this);
		}
	}


}



class InterfaceRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_interfaceRest;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	inheritance() {
	    return this.getTypedRuleContext(InheritanceContext,0);
	};

	interfaceMembers() {
	    return this.getTypedRuleContext(InterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInterfaceRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInterfaceRest(this);
		}
	}


}



class PartialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partial;
    }

	partialDefinition() {
	    return this.getTypedRuleContext(PartialDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartial(this);
		}
	}


}



class PartialDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialDefinition;
    }

	partialInterfaceOrPartialMixin() {
	    return this.getTypedRuleContext(PartialInterfaceOrPartialMixinContext,0);
	};

	partialDictionary() {
	    return this.getTypedRuleContext(PartialDictionaryContext,0);
	};

	namespace_() {
	    return this.getTypedRuleContext(Namespace_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialDefinition(this);
		}
	}


}



class PartialInterfaceOrPartialMixinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialInterfaceOrPartialMixin;
    }

	partialInterfaceRest() {
	    return this.getTypedRuleContext(PartialInterfaceRestContext,0);
	};

	mixinRest() {
	    return this.getTypedRuleContext(MixinRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialInterfaceOrPartialMixin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialInterfaceOrPartialMixin(this);
		}
	}


}



class PartialInterfaceRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialInterfaceRest;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	partialInterfaceMembers() {
	    return this.getTypedRuleContext(PartialInterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialInterfaceRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialInterfaceRest(this);
		}
	}


}



class InterfaceMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_interfaceMembers;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	interfaceMember() {
	    return this.getTypedRuleContext(InterfaceMemberContext,0);
	};

	interfaceMembers() {
	    return this.getTypedRuleContext(InterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInterfaceMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInterfaceMembers(this);
		}
	}


}



class InterfaceMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_interfaceMember;
    }

	partialInterfaceMember() {
	    return this.getTypedRuleContext(PartialInterfaceMemberContext,0);
	};

	constructor() {
	    return this.getTypedRuleContext(ConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInterfaceMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInterfaceMember(this);
		}
	}


}



class PartialInterfaceMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialInterfaceMembers;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	partialInterfaceMember() {
	    return this.getTypedRuleContext(PartialInterfaceMemberContext,0);
	};

	partialInterfaceMembers() {
	    return this.getTypedRuleContext(PartialInterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialInterfaceMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialInterfaceMembers(this);
		}
	}


}



class PartialInterfaceMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialInterfaceMember;
    }

	const_() {
	    return this.getTypedRuleContext(Const_Context,0);
	};

	operation() {
	    return this.getTypedRuleContext(OperationContext,0);
	};

	stringifier() {
	    return this.getTypedRuleContext(StringifierContext,0);
	};

	staticMember() {
	    return this.getTypedRuleContext(StaticMemberContext,0);
	};

	iterable() {
	    return this.getTypedRuleContext(IterableContext,0);
	};

	asyncIterable() {
	    return this.getTypedRuleContext(AsyncIterableContext,0);
	};

	readonlyMember() {
	    return this.getTypedRuleContext(ReadonlyMemberContext,0);
	};

	readWriteAttribute() {
	    return this.getTypedRuleContext(ReadWriteAttributeContext,0);
	};

	readWriteMaplike() {
	    return this.getTypedRuleContext(ReadWriteMaplikeContext,0);
	};

	readWriteSetlike() {
	    return this.getTypedRuleContext(ReadWriteSetlikeContext,0);
	};

	inheritAttribute() {
	    return this.getTypedRuleContext(InheritAttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialInterfaceMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialInterfaceMember(this);
		}
	}


}



class InheritanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_inheritance;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInheritance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInheritance(this);
		}
	}


}



class MixinRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_mixinRest;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	mixinMembers() {
	    return this.getTypedRuleContext(MixinMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterMixinRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitMixinRest(this);
		}
	}


}



class MixinMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_mixinMembers;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	mixinMember() {
	    return this.getTypedRuleContext(MixinMemberContext,0);
	};

	mixinMembers() {
	    return this.getTypedRuleContext(MixinMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterMixinMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitMixinMembers(this);
		}
	}


}



class MixinMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_mixinMember;
    }

	const_() {
	    return this.getTypedRuleContext(Const_Context,0);
	};

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	stringifier() {
	    return this.getTypedRuleContext(StringifierContext,0);
	};

	optionalReadOnly() {
	    return this.getTypedRuleContext(OptionalReadOnlyContext,0);
	};

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterMixinMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitMixinMember(this);
		}
	}


}



class IncludesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_includesStatement;
    }

	IDENTIFIER_WEBIDL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
	    } else {
	        return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterIncludesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitIncludesStatement(this);
		}
	}


}



class CallbackRestOrInterfaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_callbackRestOrInterface;
    }

	callbackRest() {
	    return this.getTypedRuleContext(CallbackRestContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	callbackInterfaceMembers() {
	    return this.getTypedRuleContext(CallbackInterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterCallbackRestOrInterface(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitCallbackRestOrInterface(this);
		}
	}


}



class CallbackInterfaceMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_callbackInterfaceMembers;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	callbackInterfaceMember() {
	    return this.getTypedRuleContext(CallbackInterfaceMemberContext,0);
	};

	callbackInterfaceMembers() {
	    return this.getTypedRuleContext(CallbackInterfaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterCallbackInterfaceMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitCallbackInterfaceMembers(this);
		}
	}


}



class CallbackInterfaceMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_callbackInterfaceMember;
    }

	const_() {
	    return this.getTypedRuleContext(Const_Context,0);
	};

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterCallbackInterfaceMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitCallbackInterfaceMember(this);
		}
	}


}



class Const_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_const_;
    }

	constType() {
	    return this.getTypedRuleContext(ConstTypeContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	constValue() {
	    return this.getTypedRuleContext(ConstValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterConst_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitConst_(this);
		}
	}


}



class ConstValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_constValue;
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	INTEGER_WEBIDL() {
	    return this.getToken(WebIDLParser.INTEGER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterConstValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitConstValue(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_booleanLiteral;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class FloatLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_floatLiteral;
    }

	DECIMAL_WEBIDL() {
	    return this.getToken(WebIDLParser.DECIMAL_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterFloatLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitFloatLiteral(this);
		}
	}


}



class ConstTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_constType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterConstType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitConstType(this);
		}
	}


}



class ReadonlyMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_readonlyMember;
    }

	readonlyMemberRest() {
	    return this.getTypedRuleContext(ReadonlyMemberRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterReadonlyMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitReadonlyMember(this);
		}
	}


}



class ReadonlyMemberRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_readonlyMemberRest;
    }

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	maplikeRest() {
	    return this.getTypedRuleContext(MaplikeRestContext,0);
	};

	setlikeRest() {
	    return this.getTypedRuleContext(SetlikeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterReadonlyMemberRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitReadonlyMemberRest(this);
		}
	}


}



class ReadWriteAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_readWriteAttribute;
    }

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterReadWriteAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitReadWriteAttribute(this);
		}
	}


}



class InheritAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_inheritAttribute;
    }

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterInheritAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitInheritAttribute(this);
		}
	}


}



class AttributeRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_attributeRest;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	attributeName() {
	    return this.getTypedRuleContext(AttributeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterAttributeRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitAttributeRest(this);
		}
	}


}



class AttributeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_attributeName;
    }

	attributeNameKeyword() {
	    return this.getTypedRuleContext(AttributeNameKeywordContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterAttributeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitAttributeName(this);
		}
	}


}



class AttributeNameKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_attributeNameKeyword;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterAttributeNameKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitAttributeNameKeyword(this);
		}
	}


}



class OptionalReadOnlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_optionalReadOnly;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOptionalReadOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOptionalReadOnly(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_defaultValue;
    }

	constValue() {
	    return this.getTypedRuleContext(ConstValueContext,0);
	};

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class OperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_operation;
    }

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	specialOperation() {
	    return this.getTypedRuleContext(SpecialOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOperation(this);
		}
	}


}



class RegularOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_regularOperation;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	operationRest() {
	    return this.getTypedRuleContext(OperationRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterRegularOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitRegularOperation(this);
		}
	}


}



class SpecialOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_specialOperation;
    }

	special() {
	    return this.getTypedRuleContext(SpecialContext,0);
	};

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterSpecialOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitSpecialOperation(this);
		}
	}


}



class SpecialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_special;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterSpecial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitSpecial(this);
		}
	}


}



class OperationRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_operationRest;
    }

	optionalOperationName() {
	    return this.getTypedRuleContext(OptionalOperationNameContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOperationRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOperationRest(this);
		}
	}


}



class OptionalOperationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_optionalOperationName;
    }

	operationName() {
	    return this.getTypedRuleContext(OperationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOptionalOperationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOptionalOperationName(this);
		}
	}


}



class OperationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_operationName;
    }

	operationNameKeyword() {
	    return this.getTypedRuleContext(OperationNameKeywordContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOperationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOperationName(this);
		}
	}


}



class OperationNameKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_operationNameKeyword;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOperationNameKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOperationNameKeyword(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_argumentList;
    }

	argument() {
	    return this.getTypedRuleContext(ArgumentContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_arguments;
    }

	argument() {
	    return this.getTypedRuleContext(ArgumentContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArguments(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_argument;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	argumentRest() {
	    return this.getTypedRuleContext(ArgumentRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArgument(this);
		}
	}


}



class ArgumentRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_argumentRest;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	argumentName() {
	    return this.getTypedRuleContext(ArgumentNameContext,0);
	};

	default_() {
	    return this.getTypedRuleContext(Default_Context,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ellipsis() {
	    return this.getTypedRuleContext(EllipsisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArgumentRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArgumentRest(this);
		}
	}


}



class ArgumentNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_argumentName;
    }

	argumentNameKeyword() {
	    return this.getTypedRuleContext(ArgumentNameKeywordContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterArgumentName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitArgumentName(this);
		}
	}


}



class EllipsisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_ellipsis;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterEllipsis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitEllipsis(this);
		}
	}


}



class ConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_constructor;
    }

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitConstructor(this);
		}
	}


}



class StringifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_stringifier;
    }

	stringifierRest() {
	    return this.getTypedRuleContext(StringifierRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStringifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStringifier(this);
		}
	}


}



class StringifierRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_stringifierRest;
    }

	optionalReadOnly() {
	    return this.getTypedRuleContext(OptionalReadOnlyContext,0);
	};

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStringifierRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStringifierRest(this);
		}
	}


}



class StaticMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_staticMember;
    }

	staticMemberRest() {
	    return this.getTypedRuleContext(StaticMemberRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStaticMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStaticMember(this);
		}
	}


}



class StaticMemberRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_staticMemberRest;
    }

	optionalReadOnly() {
	    return this.getTypedRuleContext(OptionalReadOnlyContext,0);
	};

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStaticMemberRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStaticMemberRest(this);
		}
	}


}



class IterableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_iterable;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	optionalType() {
	    return this.getTypedRuleContext(OptionalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterIterable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitIterable(this);
		}
	}


}



class OptionalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_optionalType;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOptionalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOptionalType(this);
		}
	}


}



class AsyncIterableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_asyncIterable;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	optionalType() {
	    return this.getTypedRuleContext(OptionalTypeContext,0);
	};

	optionalArgumentList() {
	    return this.getTypedRuleContext(OptionalArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterAsyncIterable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitAsyncIterable(this);
		}
	}


}



class OptionalArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_optionalArgumentList;
    }

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOptionalArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOptionalArgumentList(this);
		}
	}


}



class ReadWriteMaplikeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_readWriteMaplike;
    }

	maplikeRest() {
	    return this.getTypedRuleContext(MaplikeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterReadWriteMaplike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitReadWriteMaplike(this);
		}
	}


}



class MaplikeRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_maplikeRest;
    }

	typeWithExtendedAttributes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeWithExtendedAttributesContext);
	    } else {
	        return this.getTypedRuleContext(TypeWithExtendedAttributesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterMaplikeRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitMaplikeRest(this);
		}
	}


}



class ReadWriteSetlikeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_readWriteSetlike;
    }

	setlikeRest() {
	    return this.getTypedRuleContext(SetlikeRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterReadWriteSetlike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitReadWriteSetlike(this);
		}
	}


}



class SetlikeRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_setlikeRest;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterSetlikeRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitSetlikeRest(this);
		}
	}


}



class Namespace_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_namespace_;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	namespaceMembers() {
	    return this.getTypedRuleContext(NamespaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterNamespace_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitNamespace_(this);
		}
	}


}



class NamespaceMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_namespaceMembers;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	namespaceMember() {
	    return this.getTypedRuleContext(NamespaceMemberContext,0);
	};

	namespaceMembers() {
	    return this.getTypedRuleContext(NamespaceMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterNamespaceMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitNamespaceMembers(this);
		}
	}


}



class NamespaceMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_namespaceMember;
    }

	regularOperation() {
	    return this.getTypedRuleContext(RegularOperationContext,0);
	};

	attributeRest() {
	    return this.getTypedRuleContext(AttributeRestContext,0);
	};

	const_() {
	    return this.getTypedRuleContext(Const_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterNamespaceMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitNamespaceMember(this);
		}
	}


}



class DictionaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_dictionary;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	inheritance() {
	    return this.getTypedRuleContext(InheritanceContext,0);
	};

	dictionaryMembers() {
	    return this.getTypedRuleContext(DictionaryMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDictionary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDictionary(this);
		}
	}


}



class DictionaryMembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_dictionaryMembers;
    }

	dictionaryMember() {
	    return this.getTypedRuleContext(DictionaryMemberContext,0);
	};

	dictionaryMembers() {
	    return this.getTypedRuleContext(DictionaryMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDictionaryMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDictionaryMembers(this);
		}
	}


}



class DictionaryMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_dictionaryMember;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	dictionaryMemberRest() {
	    return this.getTypedRuleContext(DictionaryMemberRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDictionaryMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDictionaryMember(this);
		}
	}


}



class DictionaryMemberRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_dictionaryMemberRest;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	default_() {
	    return this.getTypedRuleContext(Default_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDictionaryMemberRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDictionaryMemberRest(this);
		}
	}


}



class PartialDictionaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_partialDictionary;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	dictionaryMembers() {
	    return this.getTypedRuleContext(DictionaryMembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPartialDictionary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPartialDictionary(this);
		}
	}


}



class Default_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_default_;
    }

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDefault_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDefault_(this);
		}
	}


}



class Enum_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_enum_;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enumValueList() {
	    return this.getTypedRuleContext(EnumValueListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterEnum_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitEnum_(this);
		}
	}


}



class EnumValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_enumValueList;
    }

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	enumValueListComma() {
	    return this.getTypedRuleContext(EnumValueListCommaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterEnumValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitEnumValueList(this);
		}
	}


}



class EnumValueListCommaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_enumValueListComma;
    }

	enumValueListString() {
	    return this.getTypedRuleContext(EnumValueListStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterEnumValueListComma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitEnumValueListComma(this);
		}
	}


}



class EnumValueListStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_enumValueListString;
    }

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	enumValueListComma() {
	    return this.getTypedRuleContext(EnumValueListCommaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterEnumValueListString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitEnumValueListString(this);
		}
	}


}



class CallbackRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_callbackRest;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterCallbackRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitCallbackRest(this);
		}
	}


}



class Typedef_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_typedef_;
    }

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterTypedef_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitTypedef_(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_type_;
    }

	singleType() {
	    return this.getTypedRuleContext(SingleTypeContext,0);
	};

	unionType() {
	    return this.getTypedRuleContext(UnionTypeContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(Null_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitType_(this);
		}
	}


}



class TypeWithExtendedAttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_typeWithExtendedAttributes;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterTypeWithExtendedAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitTypeWithExtendedAttributes(this);
		}
	}


}



class SingleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_singleType;
    }

	distinguishableType() {
	    return this.getTypedRuleContext(DistinguishableTypeContext,0);
	};

	promiseType() {
	    return this.getTypedRuleContext(PromiseTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterSingleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitSingleType(this);
		}
	}


}



class UnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_unionType;
    }

	unionMemberType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionMemberTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnionMemberTypeContext,i);
	    }
	};

	unionMemberTypes() {
	    return this.getTypedRuleContext(UnionMemberTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitUnionType(this);
		}
	}


}



class UnionMemberTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_unionMemberType;
    }

	extendedAttributeList() {
	    return this.getTypedRuleContext(ExtendedAttributeListContext,0);
	};

	distinguishableType() {
	    return this.getTypedRuleContext(DistinguishableTypeContext,0);
	};

	unionType() {
	    return this.getTypedRuleContext(UnionTypeContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(Null_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterUnionMemberType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitUnionMemberType(this);
		}
	}


}



class UnionMemberTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_unionMemberTypes;
    }

	unionMemberType() {
	    return this.getTypedRuleContext(UnionMemberTypeContext,0);
	};

	unionMemberTypes() {
	    return this.getTypedRuleContext(UnionMemberTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterUnionMemberTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitUnionMemberTypes(this);
		}
	}


}



class DistinguishableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_distinguishableType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(Null_Context,0);
	};

	stringType() {
	    return this.getTypedRuleContext(StringTypeContext,0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	bufferRelatedType() {
	    return this.getTypedRuleContext(BufferRelatedTypeContext,0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterDistinguishableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitDistinguishableType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_primitiveType;
    }

	unsignedIntegerType() {
	    return this.getTypedRuleContext(UnsignedIntegerTypeContext,0);
	};

	unrestrictedFloatType() {
	    return this.getTypedRuleContext(UnrestrictedFloatTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class UnrestrictedFloatTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_unrestrictedFloatType;
    }

	floatType() {
	    return this.getTypedRuleContext(FloatTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterUnrestrictedFloatType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitUnrestrictedFloatType(this);
		}
	}


}



class FloatTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_floatType;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterFloatType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitFloatType(this);
		}
	}


}



class UnsignedIntegerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_unsignedIntegerType;
    }

	integerType() {
	    return this.getTypedRuleContext(IntegerTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterUnsignedIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitUnsignedIntegerType(this);
		}
	}


}



class IntegerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_integerType;
    }

	optionalLong() {
	    return this.getTypedRuleContext(OptionalLongContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitIntegerType(this);
		}
	}


}



class OptionalLongContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_optionalLong;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOptionalLong(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOptionalLong(this);
		}
	}


}



class StringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_stringType;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStringType(this);
		}
	}


}



class PromiseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_promiseType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterPromiseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitPromiseType(this);
		}
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_recordType;
    }

	stringType() {
	    return this.getTypedRuleContext(StringTypeContext,0);
	};

	typeWithExtendedAttributes() {
	    return this.getTypedRuleContext(TypeWithExtendedAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterRecordType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitRecordType(this);
		}
	}


}



class Null_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_null_;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterNull_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitNull_(this);
		}
	}


}



class BufferRelatedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_bufferRelatedType;
    }


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterBufferRelatedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitBufferRelatedType(this);
		}
	}


}



class ExtendedAttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeList;
    }

	extendedAttribute() {
	    return this.getTypedRuleContext(ExtendedAttributeContext,0);
	};

	extendedAttributes() {
	    return this.getTypedRuleContext(ExtendedAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeList(this);
		}
	}


}



class ExtendedAttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributes;
    }

	extendedAttribute() {
	    return this.getTypedRuleContext(ExtendedAttributeContext,0);
	};

	extendedAttributes() {
	    return this.getTypedRuleContext(ExtendedAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributes(this);
		}
	}


}



class ExtendedAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttribute;
    }

	extendedAttributeNoArgs() {
	    return this.getTypedRuleContext(ExtendedAttributeNoArgsContext,0);
	};

	extendedAttributeArgList() {
	    return this.getTypedRuleContext(ExtendedAttributeArgListContext,0);
	};

	extendedAttributeNamedArgList() {
	    return this.getTypedRuleContext(ExtendedAttributeNamedArgListContext,0);
	};

	extendedAttributeIdent() {
	    return this.getTypedRuleContext(ExtendedAttributeIdentContext,0);
	};

	extendedAttributeIdentList() {
	    return this.getTypedRuleContext(ExtendedAttributeIdentListContext,0);
	};

	extendedAttributeString() {
	    return this.getTypedRuleContext(ExtendedAttributeStringContext,0);
	};

	extendedAttributeStringList() {
	    return this.getTypedRuleContext(ExtendedAttributeStringListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttribute(this);
		}
	}


}



class OtherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_other;
    }

	INTEGER_WEBIDL() {
	    return this.getToken(WebIDLParser.INTEGER_WEBIDL, 0);
	};

	DECIMAL_WEBIDL() {
	    return this.getToken(WebIDLParser.DECIMAL_WEBIDL, 0);
	};

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	OTHER_WEBIDL() {
	    return this.getToken(WebIDLParser.OTHER_WEBIDL, 0);
	};

	argumentNameKeyword() {
	    return this.getTypedRuleContext(ArgumentNameKeywordContext,0);
	};

	bufferRelatedType() {
	    return this.getTypedRuleContext(BufferRelatedTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOther(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOther(this);
		}
	}


}



class OtherOrCommaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_otherOrComma;
    }

	other() {
	    return this.getTypedRuleContext(OtherContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterOtherOrComma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitOtherOrComma(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_identifierList;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	identifiers() {
	    return this.getTypedRuleContext(IdentifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class IdentifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_identifiers;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	identifiers() {
	    return this.getTypedRuleContext(IdentifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterIdentifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitIdentifiers(this);
		}
	}


}



class ExtendedAttributeNoArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeNoArgs;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeNoArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeNoArgs(this);
		}
	}


}



class ExtendedAttributeArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeArgList;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeArgList(this);
		}
	}


}



class ExtendedAttributeIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeIdent;
    }

	IDENTIFIER_WEBIDL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
	    } else {
	        return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeIdent(this);
		}
	}


}



class ExtendedAttributeIdentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeIdentList;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeIdentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeIdentList(this);
		}
	}


}



class ExtendedAttributeNamedArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeNamedArgList;
    }

	IDENTIFIER_WEBIDL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WebIDLParser.IDENTIFIER_WEBIDL);
	    } else {
	        return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
	    }
	};


	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeNamedArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeNamedArgList(this);
		}
	}


}



class ExtendedAttributeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeString;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeString(this);
		}
	}


}



class ExtendedAttributeStringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_extendedAttributeStringList;
    }

	IDENTIFIER_WEBIDL() {
	    return this.getToken(WebIDLParser.IDENTIFIER_WEBIDL, 0);
	};

	stringList() {
	    return this.getTypedRuleContext(StringListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterExtendedAttributeStringList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitExtendedAttributeStringList(this);
		}
	}


}



class StringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_stringList;
    }

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStringList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStringList(this);
		}
	}


}



class StringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WebIDLParser.RULE_strings;
    }

	STRING_WEBIDL() {
	    return this.getToken(WebIDLParser.STRING_WEBIDL, 0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.enterStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WebIDLListener ) {
	        listener.exitStrings(this);
		}
	}


}




WebIDLParser.WebIDLContext = WebIDLContext; 
WebIDLParser.DefinitionsContext = DefinitionsContext; 
WebIDLParser.DefinitionContext = DefinitionContext; 
WebIDLParser.ArgumentNameKeywordContext = ArgumentNameKeywordContext; 
WebIDLParser.CallbackOrInterfaceOrMixinContext = CallbackOrInterfaceOrMixinContext; 
WebIDLParser.InterfaceOrMixinContext = InterfaceOrMixinContext; 
WebIDLParser.InterfaceRestContext = InterfaceRestContext; 
WebIDLParser.PartialContext = PartialContext; 
WebIDLParser.PartialDefinitionContext = PartialDefinitionContext; 
WebIDLParser.PartialInterfaceOrPartialMixinContext = PartialInterfaceOrPartialMixinContext; 
WebIDLParser.PartialInterfaceRestContext = PartialInterfaceRestContext; 
WebIDLParser.InterfaceMembersContext = InterfaceMembersContext; 
WebIDLParser.InterfaceMemberContext = InterfaceMemberContext; 
WebIDLParser.PartialInterfaceMembersContext = PartialInterfaceMembersContext; 
WebIDLParser.PartialInterfaceMemberContext = PartialInterfaceMemberContext; 
WebIDLParser.InheritanceContext = InheritanceContext; 
WebIDLParser.MixinRestContext = MixinRestContext; 
WebIDLParser.MixinMembersContext = MixinMembersContext; 
WebIDLParser.MixinMemberContext = MixinMemberContext; 
WebIDLParser.IncludesStatementContext = IncludesStatementContext; 
WebIDLParser.CallbackRestOrInterfaceContext = CallbackRestOrInterfaceContext; 
WebIDLParser.CallbackInterfaceMembersContext = CallbackInterfaceMembersContext; 
WebIDLParser.CallbackInterfaceMemberContext = CallbackInterfaceMemberContext; 
WebIDLParser.Const_Context = Const_Context; 
WebIDLParser.ConstValueContext = ConstValueContext; 
WebIDLParser.BooleanLiteralContext = BooleanLiteralContext; 
WebIDLParser.FloatLiteralContext = FloatLiteralContext; 
WebIDLParser.ConstTypeContext = ConstTypeContext; 
WebIDLParser.ReadonlyMemberContext = ReadonlyMemberContext; 
WebIDLParser.ReadonlyMemberRestContext = ReadonlyMemberRestContext; 
WebIDLParser.ReadWriteAttributeContext = ReadWriteAttributeContext; 
WebIDLParser.InheritAttributeContext = InheritAttributeContext; 
WebIDLParser.AttributeRestContext = AttributeRestContext; 
WebIDLParser.AttributeNameContext = AttributeNameContext; 
WebIDLParser.AttributeNameKeywordContext = AttributeNameKeywordContext; 
WebIDLParser.OptionalReadOnlyContext = OptionalReadOnlyContext; 
WebIDLParser.DefaultValueContext = DefaultValueContext; 
WebIDLParser.OperationContext = OperationContext; 
WebIDLParser.RegularOperationContext = RegularOperationContext; 
WebIDLParser.SpecialOperationContext = SpecialOperationContext; 
WebIDLParser.SpecialContext = SpecialContext; 
WebIDLParser.OperationRestContext = OperationRestContext; 
WebIDLParser.OptionalOperationNameContext = OptionalOperationNameContext; 
WebIDLParser.OperationNameContext = OperationNameContext; 
WebIDLParser.OperationNameKeywordContext = OperationNameKeywordContext; 
WebIDLParser.ArgumentListContext = ArgumentListContext; 
WebIDLParser.ArgumentsContext = ArgumentsContext; 
WebIDLParser.ArgumentContext = ArgumentContext; 
WebIDLParser.ArgumentRestContext = ArgumentRestContext; 
WebIDLParser.ArgumentNameContext = ArgumentNameContext; 
WebIDLParser.EllipsisContext = EllipsisContext; 
WebIDLParser.ConstructorContext = ConstructorContext; 
WebIDLParser.StringifierContext = StringifierContext; 
WebIDLParser.StringifierRestContext = StringifierRestContext; 
WebIDLParser.StaticMemberContext = StaticMemberContext; 
WebIDLParser.StaticMemberRestContext = StaticMemberRestContext; 
WebIDLParser.IterableContext = IterableContext; 
WebIDLParser.OptionalTypeContext = OptionalTypeContext; 
WebIDLParser.AsyncIterableContext = AsyncIterableContext; 
WebIDLParser.OptionalArgumentListContext = OptionalArgumentListContext; 
WebIDLParser.ReadWriteMaplikeContext = ReadWriteMaplikeContext; 
WebIDLParser.MaplikeRestContext = MaplikeRestContext; 
WebIDLParser.ReadWriteSetlikeContext = ReadWriteSetlikeContext; 
WebIDLParser.SetlikeRestContext = SetlikeRestContext; 
WebIDLParser.Namespace_Context = Namespace_Context; 
WebIDLParser.NamespaceMembersContext = NamespaceMembersContext; 
WebIDLParser.NamespaceMemberContext = NamespaceMemberContext; 
WebIDLParser.DictionaryContext = DictionaryContext; 
WebIDLParser.DictionaryMembersContext = DictionaryMembersContext; 
WebIDLParser.DictionaryMemberContext = DictionaryMemberContext; 
WebIDLParser.DictionaryMemberRestContext = DictionaryMemberRestContext; 
WebIDLParser.PartialDictionaryContext = PartialDictionaryContext; 
WebIDLParser.Default_Context = Default_Context; 
WebIDLParser.Enum_Context = Enum_Context; 
WebIDLParser.EnumValueListContext = EnumValueListContext; 
WebIDLParser.EnumValueListCommaContext = EnumValueListCommaContext; 
WebIDLParser.EnumValueListStringContext = EnumValueListStringContext; 
WebIDLParser.CallbackRestContext = CallbackRestContext; 
WebIDLParser.Typedef_Context = Typedef_Context; 
WebIDLParser.Type_Context = Type_Context; 
WebIDLParser.TypeWithExtendedAttributesContext = TypeWithExtendedAttributesContext; 
WebIDLParser.SingleTypeContext = SingleTypeContext; 
WebIDLParser.UnionTypeContext = UnionTypeContext; 
WebIDLParser.UnionMemberTypeContext = UnionMemberTypeContext; 
WebIDLParser.UnionMemberTypesContext = UnionMemberTypesContext; 
WebIDLParser.DistinguishableTypeContext = DistinguishableTypeContext; 
WebIDLParser.PrimitiveTypeContext = PrimitiveTypeContext; 
WebIDLParser.UnrestrictedFloatTypeContext = UnrestrictedFloatTypeContext; 
WebIDLParser.FloatTypeContext = FloatTypeContext; 
WebIDLParser.UnsignedIntegerTypeContext = UnsignedIntegerTypeContext; 
WebIDLParser.IntegerTypeContext = IntegerTypeContext; 
WebIDLParser.OptionalLongContext = OptionalLongContext; 
WebIDLParser.StringTypeContext = StringTypeContext; 
WebIDLParser.PromiseTypeContext = PromiseTypeContext; 
WebIDLParser.RecordTypeContext = RecordTypeContext; 
WebIDLParser.Null_Context = Null_Context; 
WebIDLParser.BufferRelatedTypeContext = BufferRelatedTypeContext; 
WebIDLParser.ExtendedAttributeListContext = ExtendedAttributeListContext; 
WebIDLParser.ExtendedAttributesContext = ExtendedAttributesContext; 
WebIDLParser.ExtendedAttributeContext = ExtendedAttributeContext; 
WebIDLParser.OtherContext = OtherContext; 
WebIDLParser.OtherOrCommaContext = OtherOrCommaContext; 
WebIDLParser.IdentifierListContext = IdentifierListContext; 
WebIDLParser.IdentifiersContext = IdentifiersContext; 
WebIDLParser.ExtendedAttributeNoArgsContext = ExtendedAttributeNoArgsContext; 
WebIDLParser.ExtendedAttributeArgListContext = ExtendedAttributeArgListContext; 
WebIDLParser.ExtendedAttributeIdentContext = ExtendedAttributeIdentContext; 
WebIDLParser.ExtendedAttributeIdentListContext = ExtendedAttributeIdentListContext; 
WebIDLParser.ExtendedAttributeNamedArgListContext = ExtendedAttributeNamedArgListContext; 
WebIDLParser.ExtendedAttributeStringContext = ExtendedAttributeStringContext; 
WebIDLParser.ExtendedAttributeStringListContext = ExtendedAttributeStringListContext; 
WebIDLParser.StringListContext = StringListContext; 
WebIDLParser.StringsContext = StringsContext; 
