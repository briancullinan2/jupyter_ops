// Generated from Resources/Parsers/pddl/Pddl.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import PddlListener from './PddlListener.js';
const serializedATN = [4,1,113,934,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,3,
0,143,8,0,1,1,1,1,1,1,1,1,3,1,149,8,1,1,1,3,1,152,8,1,1,1,3,1,155,8,1,1,
1,3,1,158,8,1,1,1,3,1,161,8,1,1,1,3,1,164,8,1,1,1,5,1,167,8,1,10,1,12,1,
170,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,4,3,182,8,3,11,3,12,3,183,
1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,5,5,194,8,5,10,5,12,5,197,9,5,1,5,4,5,200,
8,5,11,5,12,5,201,1,5,5,5,205,8,5,10,5,12,5,208,9,5,3,5,210,8,5,1,6,4,6,
213,8,6,11,6,12,6,214,1,6,1,6,1,6,1,7,1,7,1,7,4,7,223,8,7,11,7,12,7,224,
1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,4,10,240,8,10,11,
10,12,10,241,1,10,1,10,3,10,246,8,10,5,10,248,8,10,10,10,12,10,251,9,10,
1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
15,1,15,1,15,4,15,270,8,15,11,15,12,15,271,1,15,1,15,1,16,1,16,1,16,1,16,
1,16,1,17,1,17,1,18,5,18,284,8,18,10,18,12,18,287,9,18,1,18,4,18,290,8,18,
11,18,12,18,291,1,18,5,18,295,8,18,10,18,12,18,298,9,18,3,18,300,8,18,1,
19,4,19,303,8,19,11,19,12,19,304,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
1,21,1,21,1,21,3,21,318,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,336,8,24,3,24,338,8,24,1,24,1,24,
1,24,1,24,3,24,344,8,24,3,24,346,8,24,1,25,1,25,1,25,1,25,5,25,352,8,25,
10,25,12,25,355,9,25,1,25,1,25,1,25,1,25,5,25,361,8,25,10,25,12,25,364,9,
25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,3,25,395,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,406,8,
27,10,27,12,27,409,9,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,431,8,30,1,30,1,30,
1,30,1,30,3,30,437,8,30,3,30,439,8,30,1,31,1,31,1,31,1,31,5,31,445,8,31,
10,31,12,31,448,9,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,459,
8,31,1,32,1,32,1,32,1,32,3,32,465,8,32,1,32,1,32,1,32,3,32,470,8,32,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,484,8,33,1,34,
1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,509,8,37,1,38,1,38,1,39,1,39,
1,39,5,39,516,8,39,10,39,12,39,519,9,39,1,39,1,39,1,39,3,39,524,8,39,1,40,
1,40,1,40,5,40,529,8,40,10,40,12,40,532,9,40,1,40,1,40,3,40,536,8,40,1,41,
1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,
41,553,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
3,42,567,8,42,1,43,1,43,1,43,5,43,572,8,43,10,43,12,43,575,9,43,1,43,1,43,
3,43,579,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,4,47,590,8,47,
11,47,12,47,591,1,47,1,47,1,47,1,47,1,47,3,47,599,8,47,1,48,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,613,8,48,1,49,1,49,1,50,
1,50,3,50,619,8,50,1,51,1,51,1,51,5,51,624,8,51,10,51,12,51,627,9,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,651,8,51,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,671,
8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
54,686,8,54,1,54,1,54,1,54,1,54,3,54,692,8,54,1,55,1,55,1,55,1,55,1,55,3,
55,699,8,55,1,55,3,55,702,8,55,1,55,1,55,1,55,3,55,707,8,55,1,55,3,55,710,
8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,
58,1,58,1,59,1,59,1,59,5,59,730,8,59,10,59,12,59,733,9,59,1,59,1,59,1,60,
1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,750,8,60,
1,61,1,61,1,61,1,61,1,61,1,61,3,61,758,8,61,1,62,1,62,1,62,5,62,763,8,62,
10,62,12,62,766,9,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,
64,1,64,1,65,1,65,1,65,5,65,783,8,65,10,65,12,65,786,9,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,800,8,65,1,65,1,65,1,65,
1,65,3,65,806,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,
1,68,1,68,1,68,1,68,1,68,1,68,1,68,4,68,826,8,68,11,68,12,68,827,1,68,1,
68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,841,8,68,10,68,12,68,
844,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,854,8,68,1,69,1,69,
1,69,5,69,859,8,69,10,69,12,69,862,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,3,69,932,8,69,1,69,0,0,70,0,2,4,6,8,10,12,14,16,18,20,
22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
114,116,118,120,122,124,126,128,130,132,134,136,138,0,8,1,0,109,110,1,0,
30,31,2,0,7,7,35,37,1,0,38,42,1,0,43,47,1,0,40,42,1,0,55,56,2,0,35,35,37,
37,977,0,142,1,0,0,0,2,144,1,0,0,0,4,173,1,0,0,0,6,178,1,0,0,0,8,187,1,0,
0,0,10,209,1,0,0,0,12,212,1,0,0,0,14,229,1,0,0,0,16,231,1,0,0,0,18,233,1,
0,0,0,20,249,1,0,0,0,22,252,1,0,0,0,24,257,1,0,0,0,26,259,1,0,0,0,28,261,
1,0,0,0,30,266,1,0,0,0,32,275,1,0,0,0,34,280,1,0,0,0,36,299,1,0,0,0,38,302,
1,0,0,0,40,309,1,0,0,0,42,317,1,0,0,0,44,319,1,0,0,0,46,329,1,0,0,0,48,337,
1,0,0,0,50,394,1,0,0,0,52,396,1,0,0,0,54,402,1,0,0,0,56,412,1,0,0,0,58,414,
1,0,0,0,60,438,1,0,0,0,62,458,1,0,0,0,64,469,1,0,0,0,66,483,1,0,0,0,68,485,
1,0,0,0,70,487,1,0,0,0,72,489,1,0,0,0,74,508,1,0,0,0,76,510,1,0,0,0,78,523,
1,0,0,0,80,535,1,0,0,0,82,552,1,0,0,0,84,566,1,0,0,0,86,578,1,0,0,0,88,580,
1,0,0,0,90,582,1,0,0,0,92,584,1,0,0,0,94,598,1,0,0,0,96,612,1,0,0,0,98,614,
1,0,0,0,100,618,1,0,0,0,102,650,1,0,0,0,104,670,1,0,0,0,106,672,1,0,0,0,
108,691,1,0,0,0,110,693,1,0,0,0,112,711,1,0,0,0,114,716,1,0,0,0,116,721,
1,0,0,0,118,726,1,0,0,0,120,749,1,0,0,0,122,757,1,0,0,0,124,759,1,0,0,0,
126,769,1,0,0,0,128,774,1,0,0,0,130,805,1,0,0,0,132,807,1,0,0,0,134,813,
1,0,0,0,136,853,1,0,0,0,138,931,1,0,0,0,140,143,3,2,1,0,141,143,3,110,55,
0,142,140,1,0,0,0,142,141,1,0,0,0,143,1,1,0,0,0,144,145,5,1,0,0,145,146,
5,2,0,0,146,148,3,4,2,0,147,149,3,6,3,0,148,147,1,0,0,0,148,149,1,0,0,0,
149,151,1,0,0,0,150,152,3,8,4,0,151,150,1,0,0,0,151,152,1,0,0,0,152,154,
1,0,0,0,153,155,3,28,14,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,
0,156,158,3,30,15,0,157,156,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,
161,3,18,9,0,160,159,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,3,40,
20,0,163,162,1,0,0,0,163,164,1,0,0,0,164,168,1,0,0,0,165,167,3,42,21,0,166,
165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,
0,0,170,168,1,0,0,0,171,172,5,3,0,0,172,3,1,0,0,0,173,174,5,1,0,0,174,175,
5,4,0,0,175,176,5,109,0,0,176,177,5,3,0,0,177,5,1,0,0,0,178,179,5,1,0,0,
179,181,5,5,0,0,180,182,5,68,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,
1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,5,3,0,0,186,7,1,0,0,0,187,
188,5,1,0,0,188,189,5,6,0,0,189,190,3,10,5,0,190,191,5,3,0,0,191,9,1,0,0,
0,192,194,5,109,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
196,1,0,0,0,196,210,1,0,0,0,197,195,1,0,0,0,198,200,3,12,6,0,199,198,1,0,
0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,206,1,0,0,0,203,
205,5,109,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,
0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,209,195,1,0,0,0,209,199,1,0,0,0,210,
11,1,0,0,0,211,213,5,109,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,
0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,5,7,0,0,217,218,3,14,7,0,218,
13,1,0,0,0,219,220,5,1,0,0,220,222,5,8,0,0,221,223,3,16,8,0,222,221,1,0,
0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,
227,5,3,0,0,227,230,1,0,0,0,228,230,3,16,8,0,229,219,1,0,0,0,229,228,1,0,
0,0,230,15,1,0,0,0,231,232,5,109,0,0,232,17,1,0,0,0,233,234,5,1,0,0,234,
235,5,9,0,0,235,236,3,20,10,0,236,237,5,3,0,0,237,19,1,0,0,0,238,240,3,22,
11,0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
245,1,0,0,0,243,244,5,7,0,0,244,246,3,26,13,0,245,243,1,0,0,0,245,246,1,
0,0,0,246,248,1,0,0,0,247,239,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
250,1,0,0,0,250,21,1,0,0,0,251,249,1,0,0,0,252,253,5,1,0,0,253,254,3,24,
12,0,254,255,3,36,18,0,255,256,5,3,0,0,256,23,1,0,0,0,257,258,5,109,0,0,
258,25,1,0,0,0,259,260,5,10,0,0,260,27,1,0,0,0,261,262,5,1,0,0,262,263,5,
11,0,0,263,264,3,10,5,0,264,265,5,3,0,0,265,29,1,0,0,0,266,267,5,1,0,0,267,
269,5,12,0,0,268,270,3,32,16,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,
0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,5,3,0,0,274,31,1,0,0,0,275,
276,5,1,0,0,276,277,3,34,17,0,277,278,3,36,18,0,278,279,5,3,0,0,279,33,1,
0,0,0,280,281,5,109,0,0,281,35,1,0,0,0,282,284,5,110,0,0,283,282,1,0,0,0,
284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,300,1,0,0,0,287,285,
1,0,0,0,288,290,3,38,19,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,
0,291,292,1,0,0,0,292,296,1,0,0,0,293,295,5,110,0,0,294,293,1,0,0,0,295,
298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,300,1,0,0,0,298,296,1,0,
0,0,299,285,1,0,0,0,299,289,1,0,0,0,300,37,1,0,0,0,301,303,5,110,0,0,302,
301,1,0,0,0,303,304,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,
0,0,306,307,5,7,0,0,307,308,3,14,7,0,308,39,1,0,0,0,309,310,5,1,0,0,310,
311,5,13,0,0,311,312,3,138,69,0,312,313,5,3,0,0,313,41,1,0,0,0,314,318,3,
44,22,0,315,318,3,58,29,0,316,318,3,72,36,0,317,314,1,0,0,0,317,315,1,0,
0,0,317,316,1,0,0,0,318,43,1,0,0,0,319,320,5,1,0,0,320,321,5,14,0,0,321,
322,3,46,23,0,322,323,5,15,0,0,323,324,5,1,0,0,324,325,3,36,18,0,325,326,
5,3,0,0,326,327,3,48,24,0,327,328,5,3,0,0,328,45,1,0,0,0,329,330,5,109,0,
0,330,47,1,0,0,0,331,335,5,16,0,0,332,333,5,1,0,0,333,336,5,3,0,0,334,336,
3,50,25,0,335,332,1,0,0,0,335,334,1,0,0,0,336,338,1,0,0,0,337,331,1,0,0,
0,337,338,1,0,0,0,338,345,1,0,0,0,339,343,5,17,0,0,340,341,5,1,0,0,341,344,
5,3,0,0,342,344,3,80,40,0,343,340,1,0,0,0,343,342,1,0,0,0,344,346,1,0,0,
0,345,339,1,0,0,0,345,346,1,0,0,0,346,49,1,0,0,0,347,395,3,54,27,0,348,349,
5,1,0,0,349,353,5,18,0,0,350,352,3,50,25,0,351,350,1,0,0,0,352,355,1,0,0,
0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,395,
5,3,0,0,357,358,5,1,0,0,358,362,5,19,0,0,359,361,3,50,25,0,360,359,1,0,0,
0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,362,
1,0,0,0,365,395,5,3,0,0,366,367,5,1,0,0,367,368,5,20,0,0,368,369,3,50,25,
0,369,370,5,3,0,0,370,395,1,0,0,0,371,372,5,1,0,0,372,373,5,21,0,0,373,374,
3,50,25,0,374,375,3,50,25,0,375,376,5,3,0,0,376,395,1,0,0,0,377,378,5,1,
0,0,378,379,5,22,0,0,379,380,5,1,0,0,380,381,3,36,18,0,381,382,5,3,0,0,382,
383,3,50,25,0,383,384,5,3,0,0,384,395,1,0,0,0,385,386,5,1,0,0,386,387,5,
23,0,0,387,388,5,1,0,0,388,389,3,36,18,0,389,390,5,3,0,0,390,391,3,50,25,
0,391,392,5,3,0,0,392,395,1,0,0,0,393,395,3,52,26,0,394,347,1,0,0,0,394,
348,1,0,0,0,394,357,1,0,0,0,394,366,1,0,0,0,394,371,1,0,0,0,394,377,1,0,
0,0,394,385,1,0,0,0,394,393,1,0,0,0,395,51,1,0,0,0,396,397,5,1,0,0,397,398,
3,90,45,0,398,399,3,74,37,0,399,400,3,74,37,0,400,401,5,3,0,0,401,53,1,0,
0,0,402,403,5,1,0,0,403,407,3,34,17,0,404,406,3,56,28,0,405,404,1,0,0,0,
406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,407,
1,0,0,0,410,411,5,3,0,0,411,55,1,0,0,0,412,413,7,0,0,0,413,57,1,0,0,0,414,
415,5,1,0,0,415,416,5,24,0,0,416,417,3,46,23,0,417,418,5,15,0,0,418,419,
5,1,0,0,419,420,3,36,18,0,420,421,5,3,0,0,421,422,3,60,30,0,422,423,5,3,
0,0,423,59,1,0,0,0,424,425,5,25,0,0,425,439,3,94,47,0,426,430,5,26,0,0,427,
428,5,1,0,0,428,431,5,3,0,0,429,431,3,62,31,0,430,427,1,0,0,0,430,429,1,
0,0,0,431,439,1,0,0,0,432,436,5,17,0,0,433,434,5,1,0,0,434,437,5,3,0,0,435,
437,3,102,51,0,436,433,1,0,0,0,436,435,1,0,0,0,437,439,1,0,0,0,438,424,1,
0,0,0,438,426,1,0,0,0,438,432,1,0,0,0,439,61,1,0,0,0,440,459,3,64,32,0,441,
442,5,1,0,0,442,446,5,18,0,0,443,445,3,62,31,0,444,443,1,0,0,0,445,448,1,
0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,
459,5,3,0,0,450,451,5,1,0,0,451,452,5,23,0,0,452,453,5,1,0,0,453,454,3,36,
18,0,454,455,5,3,0,0,455,456,3,62,31,0,456,457,5,3,0,0,457,459,1,0,0,0,458,
440,1,0,0,0,458,441,1,0,0,0,458,450,1,0,0,0,459,63,1,0,0,0,460,470,3,66,
33,0,461,462,5,1,0,0,462,464,5,27,0,0,463,465,5,109,0,0,464,463,1,0,0,0,
464,465,1,0,0,0,465,466,1,0,0,0,466,467,3,66,33,0,467,468,5,3,0,0,468,470,
1,0,0,0,469,460,1,0,0,0,469,461,1,0,0,0,470,65,1,0,0,0,471,472,5,1,0,0,472,
473,5,28,0,0,473,474,3,68,34,0,474,475,3,50,25,0,475,476,5,3,0,0,476,484,
1,0,0,0,477,478,5,1,0,0,478,479,5,29,0,0,479,480,3,70,35,0,480,481,3,50,
25,0,481,482,5,3,0,0,482,484,1,0,0,0,483,471,1,0,0,0,483,477,1,0,0,0,484,
67,1,0,0,0,485,486,7,1,0,0,486,69,1,0,0,0,487,488,5,32,0,0,488,71,1,0,0,
0,489,490,5,1,0,0,490,491,5,33,0,0,491,492,3,36,18,0,492,493,3,50,25,0,493,
494,5,3,0,0,494,73,1,0,0,0,495,509,5,111,0,0,496,497,5,1,0,0,497,498,3,88,
44,0,498,499,3,74,37,0,499,500,3,76,38,0,500,501,5,3,0,0,501,509,1,0,0,0,
502,503,5,1,0,0,503,504,5,7,0,0,504,505,3,74,37,0,505,506,5,3,0,0,506,509,
1,0,0,0,507,509,3,78,39,0,508,495,1,0,0,0,508,496,1,0,0,0,508,502,1,0,0,
0,508,507,1,0,0,0,509,75,1,0,0,0,510,511,3,74,37,0,511,77,1,0,0,0,512,513,
5,1,0,0,513,517,3,24,12,0,514,516,3,56,28,0,515,514,1,0,0,0,516,519,1,0,
0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,
521,5,3,0,0,521,524,1,0,0,0,522,524,3,24,12,0,523,512,1,0,0,0,523,522,1,
0,0,0,524,79,1,0,0,0,525,526,5,1,0,0,526,530,5,18,0,0,527,529,3,82,41,0,
528,527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,
1,0,0,0,532,530,1,0,0,0,533,536,5,3,0,0,534,536,3,82,41,0,535,525,1,0,0,
0,535,534,1,0,0,0,536,81,1,0,0,0,537,538,5,1,0,0,538,539,5,23,0,0,539,540,
5,1,0,0,540,541,3,36,18,0,541,542,5,3,0,0,542,543,3,80,40,0,543,544,5,3,
0,0,544,553,1,0,0,0,545,546,5,1,0,0,546,547,5,34,0,0,547,548,3,50,25,0,548,
549,3,86,43,0,549,550,5,3,0,0,550,553,1,0,0,0,551,553,3,84,42,0,552,537,
1,0,0,0,552,545,1,0,0,0,552,551,1,0,0,0,553,83,1,0,0,0,554,555,5,1,0,0,555,
556,3,92,46,0,556,557,3,78,39,0,557,558,3,74,37,0,558,559,5,3,0,0,559,567,
1,0,0,0,560,561,5,1,0,0,561,562,5,20,0,0,562,563,3,54,27,0,563,564,5,3,0,
0,564,567,1,0,0,0,565,567,3,54,27,0,566,554,1,0,0,0,566,560,1,0,0,0,566,
565,1,0,0,0,567,85,1,0,0,0,568,569,5,1,0,0,569,573,5,18,0,0,570,572,3,84,
42,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,
576,1,0,0,0,575,573,1,0,0,0,576,579,5,3,0,0,577,579,3,84,42,0,578,568,1,
0,0,0,578,577,1,0,0,0,579,87,1,0,0,0,580,581,7,2,0,0,581,89,1,0,0,0,582,
583,7,3,0,0,583,91,1,0,0,0,584,585,7,4,0,0,585,93,1,0,0,0,586,587,5,1,0,
0,587,589,5,18,0,0,588,590,3,96,48,0,589,588,1,0,0,0,590,591,1,0,0,0,591,
589,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,5,3,0,0,594,599,1,0,
0,0,595,596,5,1,0,0,596,599,5,3,0,0,597,599,3,96,48,0,598,586,1,0,0,0,598,
595,1,0,0,0,598,597,1,0,0,0,599,95,1,0,0,0,600,601,5,1,0,0,601,602,3,98,
49,0,602,603,5,48,0,0,603,604,3,100,50,0,604,605,5,3,0,0,605,613,1,0,0,0,
606,607,5,1,0,0,607,608,5,28,0,0,608,609,3,68,34,0,609,610,3,96,48,0,610,
611,5,3,0,0,611,613,1,0,0,0,612,600,1,0,0,0,612,606,1,0,0,0,613,97,1,0,0,
0,614,615,7,5,0,0,615,99,1,0,0,0,616,619,5,111,0,0,617,619,3,74,37,0,618,
616,1,0,0,0,618,617,1,0,0,0,619,101,1,0,0,0,620,621,5,1,0,0,621,625,5,18,
0,0,622,624,3,102,51,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,
626,1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,651,5,3,0,0,629,651,3,104,
52,0,630,631,5,1,0,0,631,632,5,23,0,0,632,633,5,1,0,0,633,634,3,36,18,0,
634,635,5,3,0,0,635,636,3,102,51,0,636,637,5,3,0,0,637,651,1,0,0,0,638,639,
5,1,0,0,639,640,5,34,0,0,640,641,3,62,31,0,641,642,3,104,52,0,642,643,5,
3,0,0,643,651,1,0,0,0,644,645,5,1,0,0,645,646,3,92,46,0,646,647,3,78,39,
0,647,648,3,108,54,0,648,649,5,3,0,0,649,651,1,0,0,0,650,620,1,0,0,0,650,
629,1,0,0,0,650,630,1,0,0,0,650,638,1,0,0,0,650,644,1,0,0,0,651,103,1,0,
0,0,652,653,5,1,0,0,653,654,5,28,0,0,654,655,3,68,34,0,655,656,3,102,51,
0,656,657,5,3,0,0,657,671,1,0,0,0,658,659,5,1,0,0,659,660,5,28,0,0,660,661,
3,68,34,0,661,662,3,106,53,0,662,663,5,3,0,0,663,671,1,0,0,0,664,665,5,1,
0,0,665,666,3,92,46,0,666,667,3,78,39,0,667,668,3,74,37,0,668,669,5,3,0,
0,669,671,1,0,0,0,670,652,1,0,0,0,670,658,1,0,0,0,670,664,1,0,0,0,671,105,
1,0,0,0,672,673,5,1,0,0,673,674,3,92,46,0,674,675,3,78,39,0,675,676,3,108,
54,0,676,677,5,3,0,0,677,107,1,0,0,0,678,685,5,1,0,0,679,680,3,88,44,0,680,
681,3,108,54,0,681,682,3,108,54,0,682,686,1,0,0,0,683,684,5,7,0,0,684,686,
3,108,54,0,685,679,1,0,0,0,685,683,1,0,0,0,686,687,1,0,0,0,687,688,5,3,0,
0,688,692,1,0,0,0,689,692,5,48,0,0,690,692,3,74,37,0,691,678,1,0,0,0,691,
689,1,0,0,0,691,690,1,0,0,0,692,109,1,0,0,0,693,694,5,1,0,0,694,695,5,2,
0,0,695,696,3,112,56,0,696,698,3,114,57,0,697,699,3,6,3,0,698,697,1,0,0,
0,698,699,1,0,0,0,699,701,1,0,0,0,700,702,3,116,58,0,701,700,1,0,0,0,701,
702,1,0,0,0,702,703,1,0,0,0,703,704,3,118,59,0,704,706,3,126,63,0,705,707,
3,128,64,0,706,705,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,710,3,132,
66,0,709,708,1,0,0,0,709,710,1,0,0,0,710,111,1,0,0,0,711,712,5,1,0,0,712,
713,5,49,0,0,713,714,5,109,0,0,714,715,5,3,0,0,715,113,1,0,0,0,716,717,5,
1,0,0,717,718,5,50,0,0,718,719,5,109,0,0,719,720,5,3,0,0,720,115,1,0,0,0,
721,722,5,1,0,0,722,723,5,51,0,0,723,724,3,10,5,0,724,725,5,3,0,0,725,117,
1,0,0,0,726,727,5,1,0,0,727,731,5,52,0,0,728,730,3,120,60,0,729,728,1,0,
0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,
731,1,0,0,0,734,735,5,3,0,0,735,119,1,0,0,0,736,750,3,122,61,0,737,738,5,
1,0,0,738,739,5,40,0,0,739,740,3,78,39,0,740,741,5,111,0,0,741,742,5,3,0,
0,742,750,1,0,0,0,743,744,5,1,0,0,744,745,5,28,0,0,745,746,5,111,0,0,746,
747,3,122,61,0,747,748,5,3,0,0,748,750,1,0,0,0,749,736,1,0,0,0,749,737,1,
0,0,0,749,743,1,0,0,0,750,121,1,0,0,0,751,758,3,124,62,0,752,753,5,1,0,0,
753,754,5,20,0,0,754,755,3,124,62,0,755,756,5,3,0,0,756,758,1,0,0,0,757,
751,1,0,0,0,757,752,1,0,0,0,758,123,1,0,0,0,759,760,5,1,0,0,760,764,3,34,
17,0,761,763,5,109,0,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,
765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,5,3,0,0,768,125,1,0,
0,0,769,770,5,1,0,0,770,771,5,53,0,0,771,772,3,50,25,0,772,773,5,3,0,0,773,
127,1,0,0,0,774,775,5,1,0,0,775,776,5,13,0,0,776,777,3,130,65,0,777,778,
5,3,0,0,778,129,1,0,0,0,779,780,5,1,0,0,780,784,5,18,0,0,781,783,3,130,65,
0,782,781,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,787,
1,0,0,0,786,784,1,0,0,0,787,806,5,3,0,0,788,789,5,1,0,0,789,790,5,23,0,0,
790,791,5,1,0,0,791,792,3,36,18,0,792,793,5,3,0,0,793,794,3,130,65,0,794,
795,5,3,0,0,795,806,1,0,0,0,796,797,5,1,0,0,797,799,5,27,0,0,798,800,5,109,
0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,802,3,138,69,0,802,
803,5,3,0,0,803,806,1,0,0,0,804,806,3,138,69,0,805,779,1,0,0,0,805,788,1,
0,0,0,805,796,1,0,0,0,805,804,1,0,0,0,806,131,1,0,0,0,807,808,5,1,0,0,808,
809,5,54,0,0,809,810,3,134,67,0,810,811,3,136,68,0,811,812,5,3,0,0,812,133,
1,0,0,0,813,814,7,6,0,0,814,135,1,0,0,0,815,816,5,1,0,0,816,817,3,88,44,
0,817,818,3,136,68,0,818,819,3,136,68,0,819,820,5,3,0,0,820,854,1,0,0,0,
821,822,5,1,0,0,822,823,7,7,0,0,823,825,3,136,68,0,824,826,3,136,68,0,825,
824,1,0,0,0,826,827,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,829,1,0,
0,0,829,830,5,3,0,0,830,854,1,0,0,0,831,832,5,1,0,0,832,833,5,7,0,0,833,
834,3,136,68,0,834,835,5,3,0,0,835,854,1,0,0,0,836,854,5,111,0,0,837,838,
5,1,0,0,838,842,3,24,12,0,839,841,5,109,0,0,840,839,1,0,0,0,841,844,1,0,
0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,
846,5,3,0,0,846,854,1,0,0,0,847,854,3,24,12,0,848,854,5,57,0,0,849,850,5,
1,0,0,850,851,5,58,0,0,851,852,5,109,0,0,852,854,5,3,0,0,853,815,1,0,0,0,
853,821,1,0,0,0,853,831,1,0,0,0,853,836,1,0,0,0,853,837,1,0,0,0,853,847,
1,0,0,0,853,848,1,0,0,0,853,849,1,0,0,0,854,137,1,0,0,0,855,856,5,1,0,0,
856,860,5,18,0,0,857,859,3,138,69,0,858,857,1,0,0,0,859,862,1,0,0,0,860,
858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,932,5,3,
0,0,864,865,5,1,0,0,865,866,5,23,0,0,866,867,5,1,0,0,867,868,3,36,18,0,868,
869,5,3,0,0,869,870,3,138,69,0,870,871,5,3,0,0,871,932,1,0,0,0,872,873,5,
1,0,0,873,874,5,28,0,0,874,875,5,31,0,0,875,876,3,50,25,0,876,877,5,3,0,
0,877,932,1,0,0,0,878,879,5,1,0,0,879,880,5,59,0,0,880,881,3,50,25,0,881,
882,5,3,0,0,882,932,1,0,0,0,883,884,5,1,0,0,884,885,5,60,0,0,885,886,3,50,
25,0,886,887,5,3,0,0,887,932,1,0,0,0,888,889,5,1,0,0,889,890,5,61,0,0,890,
891,5,111,0,0,891,892,3,50,25,0,892,893,5,3,0,0,893,932,1,0,0,0,894,895,
5,1,0,0,895,896,5,62,0,0,896,897,3,50,25,0,897,898,5,3,0,0,898,932,1,0,0,
0,899,900,5,1,0,0,900,901,5,63,0,0,901,902,3,50,25,0,902,903,3,50,25,0,903,
904,5,3,0,0,904,932,1,0,0,0,905,906,5,1,0,0,906,907,5,64,0,0,907,908,3,50,
25,0,908,909,3,50,25,0,909,910,5,3,0,0,910,932,1,0,0,0,911,912,5,1,0,0,912,
913,5,65,0,0,913,914,5,111,0,0,914,915,3,50,25,0,915,916,3,50,25,0,916,917,
5,3,0,0,917,932,1,0,0,0,918,919,5,1,0,0,919,920,5,66,0,0,920,921,5,111,0,
0,921,922,5,111,0,0,922,923,3,50,25,0,923,924,5,3,0,0,924,932,1,0,0,0,925,
926,5,1,0,0,926,927,5,67,0,0,927,928,5,111,0,0,928,929,3,50,25,0,929,930,
5,3,0,0,930,932,1,0,0,0,931,855,1,0,0,0,931,864,1,0,0,0,931,872,1,0,0,0,
931,878,1,0,0,0,931,883,1,0,0,0,931,888,1,0,0,0,931,894,1,0,0,0,931,899,
1,0,0,0,931,905,1,0,0,0,931,911,1,0,0,0,931,918,1,0,0,0,931,925,1,0,0,0,
932,139,1,0,0,0,76,142,148,151,154,157,160,163,168,183,195,201,206,209,214,
224,229,241,245,249,271,285,291,296,299,304,317,335,337,343,345,353,362,
394,407,430,436,438,446,458,464,469,483,508,517,523,530,535,552,566,573,
578,591,598,612,618,625,650,670,685,691,698,701,706,709,731,749,757,764,
784,799,805,827,842,853,860,931];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class PddlParser extends antlr4.Parser {

    static grammarFileName = "Pddl.g4";
    static literalNames = [ null, "'('", "'define'", "')'", "'domain'", 
                            "':requirements'", "':types'", "'-'", "'either'", 
                            "':functions'", "'number'", "':constants'", 
                            "':predicates'", "':constraints'", "':action'", 
                            "':parameters'", "':precondition'", "':effect'", 
                            "'and'", "'or'", "'not'", "'imply'", "'exists'", 
                            "'forall'", "':durative-action'", "':duration'", 
                            "':condition'", "'preference'", "'at'", "'over'", 
                            "'start'", "'end'", "'all'", "':derived'", "'when'", 
                            "'*'", "'+'", "'/'", "'>'", "'<'", "'='", "'>='", 
                            "'<='", "'assign'", "'scale-up'", "'scale-down'", 
                            "'increase'", "'decrease'", "'?duration'", "'problem'", 
                            "':domain'", "':objects'", "':init'", "':goal'", 
                            "':metric'", "'minimize'", "'maximize'", "'total-time'", 
                            "'is-violated'", "'always'", "'sometime'", "'within'", 
                            "'at-most-once'", "'sometime-after'", "'sometime-before'", 
                            "'always-within'", "'hold-during'", "'hold-after'", 
                            null, "'DOMAIN'", "'DOMAIN_NAME'", "'REQUIREMENTS'", 
                            "'TYPES'", "'EITHER_TYPE'", "'CONSTANTS'", "'FUNCTIONS'", 
                            "'PREDICATES'", "'ACTION'", "'DURATIVE_ACTION'", 
                            "'PROBLEM'", "'PROBLEM_NAME'", "'PROBLEM_DOMAIN'", 
                            "'OBJECTS'", "'INIT'", "'FUNC_HEAD'", "'PRECONDITION'", 
                            "'EFFECT'", "'AND_GD'", "'OR_GD'", "'NOT_GD'", 
                            "'IMPLY_GD'", "'EXISTS_GD'", "'FORALL_GD'", 
                            "'COMPARISON_GD'", "'AND_EFFECT'", "'FORALL_EFFECT'", 
                            "'WHEN_EFFECT'", "'ASSIGN_EFFECT'", "'NOT_EFFECT'", 
                            "'PRED_HEAD'", "'GOAL'", "'BINARY_OP'", "'UNARY_MINUS'", 
                            "'INIT_EQ'", "'INIT_AT'", "'NOT_PRED_INIT'", 
                            "'PRED_INST'", "'PROBLEM_CONSTRAINT'", "'PROBLEM_METRIC'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, "REQUIRE_KEY", "DOMAIN", 
                             "DOMAIN_NAME", "REQUIREMENTS", "TYPES", "EITHER_TYPE", 
                             "CONSTANTS", "FUNCTIONS", "PREDICATES", "ACTION", 
                             "DURATIVE_ACTION", "PROBLEM", "PROBLEM_NAME", 
                             "PROBLEM_DOMAIN", "OBJECTS", "INIT", "FUNC_HEAD", 
                             "PRECONDITION", "EFFECT", "AND_GD", "OR_GD", 
                             "NOT_GD", "IMPLY_GD", "EXISTS_GD", "FORALL_GD", 
                             "COMPARISON_GD", "AND_EFFECT", "FORALL_EFFECT", 
                             "WHEN_EFFECT", "ASSIGN_EFFECT", "NOT_EFFECT", 
                             "PRED_HEAD", "GOAL", "BINARY_OP", "UNARY_MINUS", 
                             "INIT_EQ", "INIT_AT", "NOT_PRED_INIT", "PRED_INST", 
                             "PROBLEM_CONSTRAINT", "PROBLEM_METRIC", "NAME", 
                             "VARIABLE", "NUMBER", "LINE_COMMENT", "WHITESPACE" ];
    static ruleNames = [ "pddlDoc", "domain", "domainName", "requireDef", 
                         "typesDef", "typedNameList", "singleTypeNameList", 
                         "type_", "primType", "functionsDef", "functionList", 
                         "atomicFunctionSkeleton", "functionSymbol", "functionType", 
                         "constantsDef", "predicatesDef", "atomicFormulaSkeleton", 
                         "predicate", "typedVariableList", "singleTypeVarList", 
                         "constraints", "structureDef", "actionDef", "actionSymbol", 
                         "actionDefBody", "goalDesc", "fComp", "atomicTermFormula", 
                         "term", "durativeActionDef", "daDefBody", "daGD", 
                         "prefTimedGD", "timedGD", "timeSpecifier", "interval", 
                         "derivedDef", "fExp", "fExp2", "fHead", "effect", 
                         "cEffect", "pEffect", "condEffect", "binaryOp", 
                         "binaryComp", "assignOp", "durationConstraint", 
                         "simpleDurationConstraint", "durOp", "durValue", 
                         "daEffect", "timedEffect", "fAssignDA", "fExpDA", 
                         "problem", "problemDecl", "problemDomain", "objectDecl", 
                         "init_", "initEl", "nameLiteral", "atomicNameFormula", 
                         "goal", "probConstraints", "prefConGD", "metricSpec", 
                         "optimization", "metricFExp", "conGD" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PddlParser.ruleNames;
        this.literalNames = PddlParser.literalNames;
        this.symbolicNames = PddlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	pddlDoc() {
	    let localctx = new PddlDocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PddlParser.RULE_pddlDoc);
	    try {
	        this.state = 142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 140;
	            this.domain();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 141;
	            this.problem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domain() {
	    let localctx = new DomainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PddlParser.RULE_domain);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 144;
	        this.match(PddlParser.T__0);
	        this.state = 145;
	        this.match(PddlParser.T__1);
	        this.state = 146;
	        this.domainName();
	        this.state = 148;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 147;
	            this.requireDef();

	        }
	        this.state = 151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 150;
	            this.typesDef();

	        }
	        this.state = 154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 153;
	            this.constantsDef();

	        }
	        this.state = 157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        if(la_===1) {
	            this.state = 156;
	            this.predicatesDef();

	        }
	        this.state = 160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 159;
	            this.functionsDef();

	        }
	        this.state = 163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 162;
	            this.constraints();

	        }
	        this.state = 168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PddlParser.T__0) {
	            this.state = 165;
	            this.structureDef();
	            this.state = 170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 171;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainName() {
	    let localctx = new DomainNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PddlParser.RULE_domainName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this.match(PddlParser.T__0);
	        this.state = 174;
	        this.match(PddlParser.T__3);
	        this.state = 175;
	        this.match(PddlParser.NAME);
	        this.state = 176;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requireDef() {
	    let localctx = new RequireDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PddlParser.RULE_requireDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        this.match(PddlParser.T__0);
	        this.state = 179;
	        this.match(PddlParser.T__4);
	        this.state = 181; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 180;
	            this.match(PddlParser.REQUIRE_KEY);
	            this.state = 183; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===PddlParser.REQUIRE_KEY);
	        this.state = 185;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typesDef() {
	    let localctx = new TypesDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PddlParser.RULE_typesDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 187;
	        this.match(PddlParser.T__0);
	        this.state = 188;
	        this.match(PddlParser.T__5);
	        this.state = 189;
	        this.typedNameList();
	        this.state = 190;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedNameList() {
	    let localctx = new TypedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PddlParser.RULE_typedNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.NAME) {
	                this.state = 192;
	                this.match(PddlParser.NAME);
	                this.state = 197;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 199; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 198;
	            		this.singleTypeNameList();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 201; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.NAME) {
	                this.state = 203;
	                this.match(PddlParser.NAME);
	                this.state = 208;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeNameList() {
	    let localctx = new SingleTypeNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PddlParser.RULE_singleTypeNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 212; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 211;
	            this.match(PddlParser.NAME);
	            this.state = 214; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===PddlParser.NAME);
	        this.state = 216;
	        this.match(PddlParser.T__6);
	        this.state = 217;
	        localctx.t = this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PddlParser.RULE_type_);
	    var _la = 0; // Token type
	    try {
	        this.state = 229;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PddlParser.T__0:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 219;
	            this.match(PddlParser.T__0);
	            this.state = 220;
	            this.match(PddlParser.T__7);
	            this.state = 222; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 221;
	                this.primType();
	                this.state = 224; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===PddlParser.NAME);
	            this.state = 226;
	            this.match(PddlParser.T__2);
	            break;
	        case PddlParser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this.primType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primType() {
	    let localctx = new PrimTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PddlParser.RULE_primType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        this.match(PddlParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionsDef() {
	    let localctx = new FunctionsDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PddlParser.RULE_functionsDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this.match(PddlParser.T__0);
	        this.state = 234;
	        this.match(PddlParser.T__8);
	        this.state = 235;
	        this.functionList();
	        this.state = 236;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionList() {
	    let localctx = new FunctionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PddlParser.RULE_functionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PddlParser.T__0) {
	            this.state = 239; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 238;
	            		this.atomicFunctionSkeleton();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 241; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,16, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PddlParser.T__6) {
	                this.state = 243;
	                this.match(PddlParser.T__6);
	                this.state = 244;
	                this.functionType();
	            }

	            this.state = 251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicFunctionSkeleton() {
	    let localctx = new AtomicFunctionSkeletonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PddlParser.RULE_atomicFunctionSkeleton);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this.match(PddlParser.T__0);
	        this.state = 253;
	        this.functionSymbol();
	        this.state = 254;
	        this.typedVariableList();
	        this.state = 255;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSymbol() {
	    let localctx = new FunctionSymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PddlParser.RULE_functionSymbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(PddlParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PddlParser.RULE_functionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(PddlParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantsDef() {
	    let localctx = new ConstantsDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PddlParser.RULE_constantsDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(PddlParser.T__0);
	        this.state = 262;
	        this.match(PddlParser.T__10);
	        this.state = 263;
	        this.typedNameList();
	        this.state = 264;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicatesDef() {
	    let localctx = new PredicatesDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PddlParser.RULE_predicatesDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.match(PddlParser.T__0);
	        this.state = 267;
	        this.match(PddlParser.T__11);
	        this.state = 269; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 268;
	            this.atomicFormulaSkeleton();
	            this.state = 271; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===PddlParser.T__0);
	        this.state = 273;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicFormulaSkeleton() {
	    let localctx = new AtomicFormulaSkeletonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PddlParser.RULE_atomicFormulaSkeleton);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this.match(PddlParser.T__0);
	        this.state = 276;
	        this.predicate();
	        this.state = 277;
	        this.typedVariableList();
	        this.state = 278;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PddlParser.RULE_predicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.match(PddlParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedVariableList() {
	    let localctx = new TypedVariableListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PddlParser.RULE_typedVariableList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 299;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.VARIABLE) {
	                this.state = 282;
	                this.match(PddlParser.VARIABLE);
	                this.state = 287;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 289; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 288;
	            		this.singleTypeVarList();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 291; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,21, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.VARIABLE) {
	                this.state = 293;
	                this.match(PddlParser.VARIABLE);
	                this.state = 298;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeVarList() {
	    let localctx = new SingleTypeVarListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PddlParser.RULE_singleTypeVarList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 302; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 301;
	            this.match(PddlParser.VARIABLE);
	            this.state = 304; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===PddlParser.VARIABLE);
	        this.state = 306;
	        this.match(PddlParser.T__6);
	        this.state = 307;
	        localctx.t = this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraints() {
	    let localctx = new ConstraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PddlParser.RULE_constraints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(PddlParser.T__0);
	        this.state = 310;
	        this.match(PddlParser.T__12);
	        this.state = 311;
	        this.conGD();
	        this.state = 312;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structureDef() {
	    let localctx = new StructureDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PddlParser.RULE_structureDef);
	    try {
	        this.state = 317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 314;
	            this.actionDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 315;
	            this.durativeActionDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 316;
	            this.derivedDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionDef() {
	    let localctx = new ActionDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PddlParser.RULE_actionDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(PddlParser.T__0);
	        this.state = 320;
	        this.match(PddlParser.T__13);
	        this.state = 321;
	        this.actionSymbol();
	        this.state = 322;
	        this.match(PddlParser.T__14);
	        this.state = 323;
	        this.match(PddlParser.T__0);
	        this.state = 324;
	        this.typedVariableList();
	        this.state = 325;
	        this.match(PddlParser.T__2);
	        this.state = 326;
	        this.actionDefBody();
	        this.state = 327;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionSymbol() {
	    let localctx = new ActionSymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PddlParser.RULE_actionSymbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this.match(PddlParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionDefBody() {
	    let localctx = new ActionDefBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PddlParser.RULE_actionDefBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PddlParser.T__15) {
	            this.state = 331;
	            this.match(PddlParser.T__15);
	            this.state = 335;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 332;
	                this.match(PddlParser.T__0);
	                this.state = 333;
	                this.match(PddlParser.T__2);
	                break;

	            case 2:
	                this.state = 334;
	                this.goalDesc();
	                break;

	            }
	        }

	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PddlParser.T__16) {
	            this.state = 339;
	            this.match(PddlParser.T__16);
	            this.state = 343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 340;
	                this.match(PddlParser.T__0);
	                this.state = 341;
	                this.match(PddlParser.T__2);
	                break;

	            case 2:
	                this.state = 342;
	                this.effect();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goalDesc() {
	    let localctx = new GoalDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PddlParser.RULE_goalDesc);
	    var _la = 0; // Token type
	    try {
	        this.state = 394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 347;
	            this.atomicTermFormula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 348;
	            this.match(PddlParser.T__0);
	            this.state = 349;
	            this.match(PddlParser.T__17);
	            this.state = 353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 350;
	                this.goalDesc();
	                this.state = 355;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 356;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 357;
	            this.match(PddlParser.T__0);
	            this.state = 358;
	            this.match(PddlParser.T__18);
	            this.state = 362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 359;
	                this.goalDesc();
	                this.state = 364;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 365;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 366;
	            this.match(PddlParser.T__0);
	            this.state = 367;
	            this.match(PddlParser.T__19);
	            this.state = 368;
	            this.goalDesc();
	            this.state = 369;
	            this.match(PddlParser.T__2);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 371;
	            this.match(PddlParser.T__0);
	            this.state = 372;
	            this.match(PddlParser.T__20);
	            this.state = 373;
	            this.goalDesc();
	            this.state = 374;
	            this.goalDesc();
	            this.state = 375;
	            this.match(PddlParser.T__2);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 377;
	            this.match(PddlParser.T__0);
	            this.state = 378;
	            this.match(PddlParser.T__21);
	            this.state = 379;
	            this.match(PddlParser.T__0);
	            this.state = 380;
	            this.typedVariableList();
	            this.state = 381;
	            this.match(PddlParser.T__2);
	            this.state = 382;
	            this.goalDesc();
	            this.state = 383;
	            this.match(PddlParser.T__2);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 385;
	            this.match(PddlParser.T__0);
	            this.state = 386;
	            this.match(PddlParser.T__22);
	            this.state = 387;
	            this.match(PddlParser.T__0);
	            this.state = 388;
	            this.typedVariableList();
	            this.state = 389;
	            this.match(PddlParser.T__2);
	            this.state = 390;
	            this.goalDesc();
	            this.state = 391;
	            this.match(PddlParser.T__2);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 393;
	            this.fComp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fComp() {
	    let localctx = new FCompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PddlParser.RULE_fComp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.match(PddlParser.T__0);
	        this.state = 397;
	        this.binaryComp();
	        this.state = 398;
	        this.fExp();
	        this.state = 399;
	        this.fExp();
	        this.state = 400;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicTermFormula() {
	    let localctx = new AtomicTermFormulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PddlParser.RULE_atomicTermFormula);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.match(PddlParser.T__0);
	        this.state = 403;
	        this.predicate();
	        this.state = 407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PddlParser.NAME || _la===PddlParser.VARIABLE) {
	            this.state = 404;
	            this.term();
	            this.state = 409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 410;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PddlParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        _la = this._input.LA(1);
	        if(!(_la===PddlParser.NAME || _la===PddlParser.VARIABLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durativeActionDef() {
	    let localctx = new DurativeActionDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, PddlParser.RULE_durativeActionDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.match(PddlParser.T__0);
	        this.state = 415;
	        this.match(PddlParser.T__23);
	        this.state = 416;
	        this.actionSymbol();
	        this.state = 417;
	        this.match(PddlParser.T__14);
	        this.state = 418;
	        this.match(PddlParser.T__0);
	        this.state = 419;
	        this.typedVariableList();
	        this.state = 420;
	        this.match(PddlParser.T__2);
	        this.state = 421;
	        this.daDefBody();
	        this.state = 422;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	daDefBody() {
	    let localctx = new DaDefBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PddlParser.RULE_daDefBody);
	    try {
	        this.state = 438;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PddlParser.T__24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 424;
	            this.match(PddlParser.T__24);
	            this.state = 425;
	            this.durationConstraint();
	            break;
	        case PddlParser.T__25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 426;
	            this.match(PddlParser.T__25);
	            this.state = 430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 427;
	                this.match(PddlParser.T__0);
	                this.state = 428;
	                this.match(PddlParser.T__2);
	                break;

	            case 2:
	                this.state = 429;
	                this.daGD();
	                break;

	            }
	            break;
	        case PddlParser.T__16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 432;
	            this.match(PddlParser.T__16);
	            this.state = 436;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 433;
	                this.match(PddlParser.T__0);
	                this.state = 434;
	                this.match(PddlParser.T__2);
	                break;

	            case 2:
	                this.state = 435;
	                this.daEffect();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	daGD() {
	    let localctx = new DaGDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PddlParser.RULE_daGD);
	    var _la = 0; // Token type
	    try {
	        this.state = 458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 440;
	            this.prefTimedGD();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.match(PddlParser.T__0);
	            this.state = 442;
	            this.match(PddlParser.T__17);
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 443;
	                this.daGD();
	                this.state = 448;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 449;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 450;
	            this.match(PddlParser.T__0);
	            this.state = 451;
	            this.match(PddlParser.T__22);
	            this.state = 452;
	            this.match(PddlParser.T__0);
	            this.state = 453;
	            this.typedVariableList();
	            this.state = 454;
	            this.match(PddlParser.T__2);
	            this.state = 455;
	            this.daGD();
	            this.state = 456;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefTimedGD() {
	    let localctx = new PrefTimedGDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PddlParser.RULE_prefTimedGD);
	    var _la = 0; // Token type
	    try {
	        this.state = 469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 460;
	            this.timedGD();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 461;
	            this.match(PddlParser.T__0);
	            this.state = 462;
	            this.match(PddlParser.T__26);
	            this.state = 464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PddlParser.NAME) {
	                this.state = 463;
	                this.match(PddlParser.NAME);
	            }

	            this.state = 466;
	            this.timedGD();
	            this.state = 467;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timedGD() {
	    let localctx = new TimedGDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PddlParser.RULE_timedGD);
	    try {
	        this.state = 483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 471;
	            this.match(PddlParser.T__0);
	            this.state = 472;
	            this.match(PddlParser.T__27);
	            this.state = 473;
	            this.timeSpecifier();
	            this.state = 474;
	            this.goalDesc();
	            this.state = 475;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 477;
	            this.match(PddlParser.T__0);
	            this.state = 478;
	            this.match(PddlParser.T__28);
	            this.state = 479;
	            this.interval();
	            this.state = 480;
	            this.goalDesc();
	            this.state = 481;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeSpecifier() {
	    let localctx = new TimeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PddlParser.RULE_timeSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        _la = this._input.LA(1);
	        if(!(_la===PddlParser.T__29 || _la===PddlParser.T__30)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PddlParser.RULE_interval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(PddlParser.T__31);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derivedDef() {
	    let localctx = new DerivedDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PddlParser.RULE_derivedDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(PddlParser.T__0);
	        this.state = 490;
	        this.match(PddlParser.T__32);
	        this.state = 491;
	        this.typedVariableList();
	        this.state = 492;
	        this.goalDesc();
	        this.state = 493;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fExp() {
	    let localctx = new FExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, PddlParser.RULE_fExp);
	    try {
	        this.state = 508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 495;
	            this.match(PddlParser.NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 496;
	            this.match(PddlParser.T__0);
	            this.state = 497;
	            this.binaryOp();
	            this.state = 498;
	            this.fExp();
	            this.state = 499;
	            this.fExp2();
	            this.state = 500;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 502;
	            this.match(PddlParser.T__0);
	            this.state = 503;
	            this.match(PddlParser.T__6);
	            this.state = 504;
	            this.fExp();
	            this.state = 505;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 507;
	            this.fHead();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fExp2() {
	    let localctx = new FExp2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, PddlParser.RULE_fExp2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.fExp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fHead() {
	    let localctx = new FHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, PddlParser.RULE_fHead);
	    var _la = 0; // Token type
	    try {
	        this.state = 523;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PddlParser.T__0:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 512;
	            this.match(PddlParser.T__0);
	            this.state = 513;
	            this.functionSymbol();
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.NAME || _la===PddlParser.VARIABLE) {
	                this.state = 514;
	                this.term();
	                this.state = 519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 520;
	            this.match(PddlParser.T__2);
	            break;
	        case PddlParser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 522;
	            this.functionSymbol();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	effect() {
	    let localctx = new EffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, PddlParser.RULE_effect);
	    var _la = 0; // Token type
	    try {
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 525;
	            this.match(PddlParser.T__0);
	            this.state = 526;
	            this.match(PddlParser.T__17);
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 527;
	                this.cEffect();
	                this.state = 532;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 533;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 534;
	            this.cEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cEffect() {
	    let localctx = new CEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, PddlParser.RULE_cEffect);
	    try {
	        this.state = 552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this.match(PddlParser.T__0);
	            this.state = 538;
	            this.match(PddlParser.T__22);
	            this.state = 539;
	            this.match(PddlParser.T__0);
	            this.state = 540;
	            this.typedVariableList();
	            this.state = 541;
	            this.match(PddlParser.T__2);
	            this.state = 542;
	            this.effect();
	            this.state = 543;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 545;
	            this.match(PddlParser.T__0);
	            this.state = 546;
	            this.match(PddlParser.T__33);
	            this.state = 547;
	            this.goalDesc();
	            this.state = 548;
	            this.condEffect();
	            this.state = 549;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 551;
	            this.pEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pEffect() {
	    let localctx = new PEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, PddlParser.RULE_pEffect);
	    try {
	        this.state = 566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 554;
	            this.match(PddlParser.T__0);
	            this.state = 555;
	            this.assignOp();
	            this.state = 556;
	            this.fHead();
	            this.state = 557;
	            this.fExp();
	            this.state = 558;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 560;
	            this.match(PddlParser.T__0);
	            this.state = 561;
	            this.match(PddlParser.T__19);
	            this.state = 562;
	            this.atomicTermFormula();
	            this.state = 563;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 565;
	            this.atomicTermFormula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condEffect() {
	    let localctx = new CondEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, PddlParser.RULE_condEffect);
	    var _la = 0; // Token type
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 568;
	            this.match(PddlParser.T__0);
	            this.state = 569;
	            this.match(PddlParser.T__17);
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 570;
	                this.pEffect();
	                this.state = 575;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 576;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 577;
	            this.pEffect();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryOp() {
	    let localctx = new BinaryOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, PddlParser.RULE_binaryOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        _la = this._input.LA(1);
	        if(!(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (PddlParser.T__6 - 7)) | (1 << (PddlParser.T__34 - 7)) | (1 << (PddlParser.T__35 - 7)) | (1 << (PddlParser.T__36 - 7)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryComp() {
	    let localctx = new BinaryCompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, PddlParser.RULE_binaryComp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PddlParser.T__37 - 38)) | (1 << (PddlParser.T__38 - 38)) | (1 << (PddlParser.T__39 - 38)) | (1 << (PddlParser.T__40 - 38)) | (1 << (PddlParser.T__41 - 38)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignOp() {
	    let localctx = new AssignOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, PddlParser.RULE_assignOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        _la = this._input.LA(1);
	        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PddlParser.T__42 - 43)) | (1 << (PddlParser.T__43 - 43)) | (1 << (PddlParser.T__44 - 43)) | (1 << (PddlParser.T__45 - 43)) | (1 << (PddlParser.T__46 - 43)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationConstraint() {
	    let localctx = new DurationConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, PddlParser.RULE_durationConstraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 586;
	            this.match(PddlParser.T__0);
	            this.state = 587;
	            this.match(PddlParser.T__17);
	            this.state = 589; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 588;
	                this.simpleDurationConstraint();
	                this.state = 591; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===PddlParser.T__0);
	            this.state = 593;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            this.match(PddlParser.T__0);
	            this.state = 596;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 597;
	            this.simpleDurationConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDurationConstraint() {
	    let localctx = new SimpleDurationConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, PddlParser.RULE_simpleDurationConstraint);
	    try {
	        this.state = 612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 600;
	            this.match(PddlParser.T__0);
	            this.state = 601;
	            this.durOp();
	            this.state = 602;
	            this.match(PddlParser.T__47);
	            this.state = 603;
	            this.durValue();
	            this.state = 604;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 606;
	            this.match(PddlParser.T__0);
	            this.state = 607;
	            this.match(PddlParser.T__27);
	            this.state = 608;
	            this.timeSpecifier();
	            this.state = 609;
	            this.simpleDurationConstraint();
	            this.state = 610;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durOp() {
	    let localctx = new DurOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, PddlParser.RULE_durOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        _la = this._input.LA(1);
	        if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PddlParser.T__39 - 40)) | (1 << (PddlParser.T__40 - 40)) | (1 << (PddlParser.T__41 - 40)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durValue() {
	    let localctx = new DurValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, PddlParser.RULE_durValue);
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 616;
	            this.match(PddlParser.NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 617;
	            this.fExp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	daEffect() {
	    let localctx = new DaEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, PddlParser.RULE_daEffect);
	    var _la = 0; // Token type
	    try {
	        this.state = 650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 620;
	            this.match(PddlParser.T__0);
	            this.state = 621;
	            this.match(PddlParser.T__17);
	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 622;
	                this.daEffect();
	                this.state = 627;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 628;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 629;
	            this.timedEffect();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 630;
	            this.match(PddlParser.T__0);
	            this.state = 631;
	            this.match(PddlParser.T__22);
	            this.state = 632;
	            this.match(PddlParser.T__0);
	            this.state = 633;
	            this.typedVariableList();
	            this.state = 634;
	            this.match(PddlParser.T__2);
	            this.state = 635;
	            this.daEffect();
	            this.state = 636;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 638;
	            this.match(PddlParser.T__0);
	            this.state = 639;
	            this.match(PddlParser.T__33);
	            this.state = 640;
	            this.daGD();
	            this.state = 641;
	            this.timedEffect();
	            this.state = 642;
	            this.match(PddlParser.T__2);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 644;
	            this.match(PddlParser.T__0);
	            this.state = 645;
	            this.assignOp();
	            this.state = 646;
	            this.fHead();
	            this.state = 647;
	            this.fExpDA();
	            this.state = 648;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timedEffect() {
	    let localctx = new TimedEffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, PddlParser.RULE_timedEffect);
	    try {
	        this.state = 670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 652;
	            this.match(PddlParser.T__0);
	            this.state = 653;
	            this.match(PddlParser.T__27);
	            this.state = 654;
	            this.timeSpecifier();
	            this.state = 655;
	            this.daEffect();
	            this.state = 656;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.match(PddlParser.T__0);
	            this.state = 659;
	            this.match(PddlParser.T__27);
	            this.state = 660;
	            this.timeSpecifier();
	            this.state = 661;
	            this.fAssignDA();
	            this.state = 662;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 664;
	            this.match(PddlParser.T__0);
	            this.state = 665;
	            this.assignOp();
	            this.state = 666;
	            this.fHead();
	            this.state = 667;
	            this.fExp();
	            this.state = 668;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fAssignDA() {
	    let localctx = new FAssignDAContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, PddlParser.RULE_fAssignDA);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this.match(PddlParser.T__0);
	        this.state = 673;
	        this.assignOp();
	        this.state = 674;
	        this.fHead();
	        this.state = 675;
	        this.fExpDA();
	        this.state = 676;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fExpDA() {
	    let localctx = new FExpDAContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, PddlParser.RULE_fExpDA);
	    try {
	        this.state = 691;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            this.match(PddlParser.T__0);
	            this.state = 685;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 679;
	                this.binaryOp();
	                this.state = 680;
	                this.fExpDA();
	                this.state = 681;
	                this.fExpDA();
	                break;

	            case 2:
	                this.state = 683;
	                this.match(PddlParser.T__6);
	                this.state = 684;
	                this.fExpDA();
	                break;

	            }
	            this.state = 687;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 689;
	            this.match(PddlParser.T__47);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 690;
	            this.fExp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	problem() {
	    let localctx = new ProblemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, PddlParser.RULE_problem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.match(PddlParser.T__0);
	        this.state = 694;
	        this.match(PddlParser.T__1);
	        this.state = 695;
	        this.problemDecl();
	        this.state = 696;
	        this.problemDomain();
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 697;
	            this.requireDef();

	        }
	        this.state = 701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 700;
	            this.objectDecl();

	        }
	        this.state = 703;
	        this.init_();
	        this.state = 704;
	        this.goal();
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 705;
	            this.probConstraints();

	        }
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PddlParser.T__0) {
	            this.state = 708;
	            this.metricSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	problemDecl() {
	    let localctx = new ProblemDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, PddlParser.RULE_problemDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.match(PddlParser.T__0);
	        this.state = 712;
	        this.match(PddlParser.T__48);
	        this.state = 713;
	        this.match(PddlParser.NAME);
	        this.state = 714;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	problemDomain() {
	    let localctx = new ProblemDomainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, PddlParser.RULE_problemDomain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(PddlParser.T__0);
	        this.state = 717;
	        this.match(PddlParser.T__49);
	        this.state = 718;
	        this.match(PddlParser.NAME);
	        this.state = 719;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectDecl() {
	    let localctx = new ObjectDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, PddlParser.RULE_objectDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.match(PddlParser.T__0);
	        this.state = 722;
	        this.match(PddlParser.T__50);
	        this.state = 723;
	        this.typedNameList();
	        this.state = 724;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	init_() {
	    let localctx = new Init_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, PddlParser.RULE_init_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this.match(PddlParser.T__0);
	        this.state = 727;
	        this.match(PddlParser.T__51);
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PddlParser.T__0) {
	            this.state = 728;
	            this.initEl();
	            this.state = 733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 734;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initEl() {
	    let localctx = new InitElContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, PddlParser.RULE_initEl);
	    try {
	        this.state = 749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 736;
	            this.nameLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.match(PddlParser.T__0);
	            this.state = 738;
	            this.match(PddlParser.T__39);
	            this.state = 739;
	            this.fHead();
	            this.state = 740;
	            this.match(PddlParser.NUMBER);
	            this.state = 741;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 743;
	            this.match(PddlParser.T__0);
	            this.state = 744;
	            this.match(PddlParser.T__27);
	            this.state = 745;
	            this.match(PddlParser.NUMBER);
	            this.state = 746;
	            this.nameLiteral();
	            this.state = 747;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameLiteral() {
	    let localctx = new NameLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, PddlParser.RULE_nameLiteral);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 751;
	            this.atomicNameFormula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.match(PddlParser.T__0);
	            this.state = 753;
	            this.match(PddlParser.T__19);
	            this.state = 754;
	            this.atomicNameFormula();
	            this.state = 755;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicNameFormula() {
	    let localctx = new AtomicNameFormulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, PddlParser.RULE_atomicNameFormula);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(PddlParser.T__0);
	        this.state = 760;
	        this.predicate();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PddlParser.NAME) {
	            this.state = 761;
	            this.match(PddlParser.NAME);
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 767;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, PddlParser.RULE_goal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this.match(PddlParser.T__0);
	        this.state = 770;
	        this.match(PddlParser.T__52);
	        this.state = 771;
	        this.goalDesc();
	        this.state = 772;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	probConstraints() {
	    let localctx = new ProbConstraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, PddlParser.RULE_probConstraints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(PddlParser.T__0);
	        this.state = 775;
	        this.match(PddlParser.T__12);
	        this.state = 776;
	        this.prefConGD();
	        this.state = 777;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefConGD() {
	    let localctx = new PrefConGDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, PddlParser.RULE_prefConGD);
	    var _la = 0; // Token type
	    try {
	        this.state = 805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 779;
	            this.match(PddlParser.T__0);
	            this.state = 780;
	            this.match(PddlParser.T__17);
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 781;
	                this.prefConGD();
	                this.state = 786;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 787;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 788;
	            this.match(PddlParser.T__0);
	            this.state = 789;
	            this.match(PddlParser.T__22);
	            this.state = 790;
	            this.match(PddlParser.T__0);
	            this.state = 791;
	            this.typedVariableList();
	            this.state = 792;
	            this.match(PddlParser.T__2);
	            this.state = 793;
	            this.prefConGD();
	            this.state = 794;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 796;
	            this.match(PddlParser.T__0);
	            this.state = 797;
	            this.match(PddlParser.T__26);
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PddlParser.NAME) {
	                this.state = 798;
	                this.match(PddlParser.NAME);
	            }

	            this.state = 801;
	            this.conGD();
	            this.state = 802;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 804;
	            this.conGD();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metricSpec() {
	    let localctx = new MetricSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, PddlParser.RULE_metricSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(PddlParser.T__0);
	        this.state = 808;
	        this.match(PddlParser.T__53);
	        this.state = 809;
	        this.optimization();
	        this.state = 810;
	        this.metricFExp();
	        this.state = 811;
	        this.match(PddlParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimization() {
	    let localctx = new OptimizationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, PddlParser.RULE_optimization);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        _la = this._input.LA(1);
	        if(!(_la===PddlParser.T__54 || _la===PddlParser.T__55)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metricFExp() {
	    let localctx = new MetricFExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, PddlParser.RULE_metricFExp);
	    var _la = 0; // Token type
	    try {
	        this.state = 853;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 815;
	            this.match(PddlParser.T__0);
	            this.state = 816;
	            this.binaryOp();
	            this.state = 817;
	            this.metricFExp();
	            this.state = 818;
	            this.metricFExp();
	            this.state = 819;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 821;
	            this.match(PddlParser.T__0);
	            this.state = 822;
	            _la = this._input.LA(1);
	            if(!(_la===PddlParser.T__34 || _la===PddlParser.T__36)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 823;
	            this.metricFExp();
	            this.state = 825; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 824;
	                this.metricFExp();
	                this.state = 827; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===PddlParser.T__0 || _la===PddlParser.T__56 || _la===PddlParser.NAME || _la===PddlParser.NUMBER);
	            this.state = 829;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 831;
	            this.match(PddlParser.T__0);
	            this.state = 832;
	            this.match(PddlParser.T__6);
	            this.state = 833;
	            this.metricFExp();
	            this.state = 834;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 836;
	            this.match(PddlParser.NUMBER);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 837;
	            this.match(PddlParser.T__0);
	            this.state = 838;
	            this.functionSymbol();
	            this.state = 842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.NAME) {
	                this.state = 839;
	                this.match(PddlParser.NAME);
	                this.state = 844;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 845;
	            this.match(PddlParser.T__2);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 847;
	            this.functionSymbol();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 848;
	            this.match(PddlParser.T__56);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 849;
	            this.match(PddlParser.T__0);
	            this.state = 850;
	            this.match(PddlParser.T__57);
	            this.state = 851;
	            this.match(PddlParser.NAME);
	            this.state = 852;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conGD() {
	    let localctx = new ConGDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, PddlParser.RULE_conGD);
	    var _la = 0; // Token type
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.match(PddlParser.T__0);
	            this.state = 856;
	            this.match(PddlParser.T__17);
	            this.state = 860;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PddlParser.T__0) {
	                this.state = 857;
	                this.conGD();
	                this.state = 862;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 863;
	            this.match(PddlParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 864;
	            this.match(PddlParser.T__0);
	            this.state = 865;
	            this.match(PddlParser.T__22);
	            this.state = 866;
	            this.match(PddlParser.T__0);
	            this.state = 867;
	            this.typedVariableList();
	            this.state = 868;
	            this.match(PddlParser.T__2);
	            this.state = 869;
	            this.conGD();
	            this.state = 870;
	            this.match(PddlParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 872;
	            this.match(PddlParser.T__0);
	            this.state = 873;
	            this.match(PddlParser.T__27);
	            this.state = 874;
	            this.match(PddlParser.T__30);
	            this.state = 875;
	            this.goalDesc();
	            this.state = 876;
	            this.match(PddlParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 878;
	            this.match(PddlParser.T__0);
	            this.state = 879;
	            this.match(PddlParser.T__58);
	            this.state = 880;
	            this.goalDesc();
	            this.state = 881;
	            this.match(PddlParser.T__2);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 883;
	            this.match(PddlParser.T__0);
	            this.state = 884;
	            this.match(PddlParser.T__59);
	            this.state = 885;
	            this.goalDesc();
	            this.state = 886;
	            this.match(PddlParser.T__2);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 888;
	            this.match(PddlParser.T__0);
	            this.state = 889;
	            this.match(PddlParser.T__60);
	            this.state = 890;
	            this.match(PddlParser.NUMBER);
	            this.state = 891;
	            this.goalDesc();
	            this.state = 892;
	            this.match(PddlParser.T__2);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 894;
	            this.match(PddlParser.T__0);
	            this.state = 895;
	            this.match(PddlParser.T__61);
	            this.state = 896;
	            this.goalDesc();
	            this.state = 897;
	            this.match(PddlParser.T__2);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 899;
	            this.match(PddlParser.T__0);
	            this.state = 900;
	            this.match(PddlParser.T__62);
	            this.state = 901;
	            this.goalDesc();
	            this.state = 902;
	            this.goalDesc();
	            this.state = 903;
	            this.match(PddlParser.T__2);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 905;
	            this.match(PddlParser.T__0);
	            this.state = 906;
	            this.match(PddlParser.T__63);
	            this.state = 907;
	            this.goalDesc();
	            this.state = 908;
	            this.goalDesc();
	            this.state = 909;
	            this.match(PddlParser.T__2);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 911;
	            this.match(PddlParser.T__0);
	            this.state = 912;
	            this.match(PddlParser.T__64);
	            this.state = 913;
	            this.match(PddlParser.NUMBER);
	            this.state = 914;
	            this.goalDesc();
	            this.state = 915;
	            this.goalDesc();
	            this.state = 916;
	            this.match(PddlParser.T__2);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 918;
	            this.match(PddlParser.T__0);
	            this.state = 919;
	            this.match(PddlParser.T__65);
	            this.state = 920;
	            this.match(PddlParser.NUMBER);
	            this.state = 921;
	            this.match(PddlParser.NUMBER);
	            this.state = 922;
	            this.goalDesc();
	            this.state = 923;
	            this.match(PddlParser.T__2);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 925;
	            this.match(PddlParser.T__0);
	            this.state = 926;
	            this.match(PddlParser.T__66);
	            this.state = 927;
	            this.match(PddlParser.NUMBER);
	            this.state = 928;
	            this.goalDesc();
	            this.state = 929;
	            this.match(PddlParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PddlParser.EOF = antlr4.Token.EOF;
PddlParser.T__0 = 1;
PddlParser.T__1 = 2;
PddlParser.T__2 = 3;
PddlParser.T__3 = 4;
PddlParser.T__4 = 5;
PddlParser.T__5 = 6;
PddlParser.T__6 = 7;
PddlParser.T__7 = 8;
PddlParser.T__8 = 9;
PddlParser.T__9 = 10;
PddlParser.T__10 = 11;
PddlParser.T__11 = 12;
PddlParser.T__12 = 13;
PddlParser.T__13 = 14;
PddlParser.T__14 = 15;
PddlParser.T__15 = 16;
PddlParser.T__16 = 17;
PddlParser.T__17 = 18;
PddlParser.T__18 = 19;
PddlParser.T__19 = 20;
PddlParser.T__20 = 21;
PddlParser.T__21 = 22;
PddlParser.T__22 = 23;
PddlParser.T__23 = 24;
PddlParser.T__24 = 25;
PddlParser.T__25 = 26;
PddlParser.T__26 = 27;
PddlParser.T__27 = 28;
PddlParser.T__28 = 29;
PddlParser.T__29 = 30;
PddlParser.T__30 = 31;
PddlParser.T__31 = 32;
PddlParser.T__32 = 33;
PddlParser.T__33 = 34;
PddlParser.T__34 = 35;
PddlParser.T__35 = 36;
PddlParser.T__36 = 37;
PddlParser.T__37 = 38;
PddlParser.T__38 = 39;
PddlParser.T__39 = 40;
PddlParser.T__40 = 41;
PddlParser.T__41 = 42;
PddlParser.T__42 = 43;
PddlParser.T__43 = 44;
PddlParser.T__44 = 45;
PddlParser.T__45 = 46;
PddlParser.T__46 = 47;
PddlParser.T__47 = 48;
PddlParser.T__48 = 49;
PddlParser.T__49 = 50;
PddlParser.T__50 = 51;
PddlParser.T__51 = 52;
PddlParser.T__52 = 53;
PddlParser.T__53 = 54;
PddlParser.T__54 = 55;
PddlParser.T__55 = 56;
PddlParser.T__56 = 57;
PddlParser.T__57 = 58;
PddlParser.T__58 = 59;
PddlParser.T__59 = 60;
PddlParser.T__60 = 61;
PddlParser.T__61 = 62;
PddlParser.T__62 = 63;
PddlParser.T__63 = 64;
PddlParser.T__64 = 65;
PddlParser.T__65 = 66;
PddlParser.T__66 = 67;
PddlParser.REQUIRE_KEY = 68;
PddlParser.DOMAIN = 69;
PddlParser.DOMAIN_NAME = 70;
PddlParser.REQUIREMENTS = 71;
PddlParser.TYPES = 72;
PddlParser.EITHER_TYPE = 73;
PddlParser.CONSTANTS = 74;
PddlParser.FUNCTIONS = 75;
PddlParser.PREDICATES = 76;
PddlParser.ACTION = 77;
PddlParser.DURATIVE_ACTION = 78;
PddlParser.PROBLEM = 79;
PddlParser.PROBLEM_NAME = 80;
PddlParser.PROBLEM_DOMAIN = 81;
PddlParser.OBJECTS = 82;
PddlParser.INIT = 83;
PddlParser.FUNC_HEAD = 84;
PddlParser.PRECONDITION = 85;
PddlParser.EFFECT = 86;
PddlParser.AND_GD = 87;
PddlParser.OR_GD = 88;
PddlParser.NOT_GD = 89;
PddlParser.IMPLY_GD = 90;
PddlParser.EXISTS_GD = 91;
PddlParser.FORALL_GD = 92;
PddlParser.COMPARISON_GD = 93;
PddlParser.AND_EFFECT = 94;
PddlParser.FORALL_EFFECT = 95;
PddlParser.WHEN_EFFECT = 96;
PddlParser.ASSIGN_EFFECT = 97;
PddlParser.NOT_EFFECT = 98;
PddlParser.PRED_HEAD = 99;
PddlParser.GOAL = 100;
PddlParser.BINARY_OP = 101;
PddlParser.UNARY_MINUS = 102;
PddlParser.INIT_EQ = 103;
PddlParser.INIT_AT = 104;
PddlParser.NOT_PRED_INIT = 105;
PddlParser.PRED_INST = 106;
PddlParser.PROBLEM_CONSTRAINT = 107;
PddlParser.PROBLEM_METRIC = 108;
PddlParser.NAME = 109;
PddlParser.VARIABLE = 110;
PddlParser.NUMBER = 111;
PddlParser.LINE_COMMENT = 112;
PddlParser.WHITESPACE = 113;

PddlParser.RULE_pddlDoc = 0;
PddlParser.RULE_domain = 1;
PddlParser.RULE_domainName = 2;
PddlParser.RULE_requireDef = 3;
PddlParser.RULE_typesDef = 4;
PddlParser.RULE_typedNameList = 5;
PddlParser.RULE_singleTypeNameList = 6;
PddlParser.RULE_type_ = 7;
PddlParser.RULE_primType = 8;
PddlParser.RULE_functionsDef = 9;
PddlParser.RULE_functionList = 10;
PddlParser.RULE_atomicFunctionSkeleton = 11;
PddlParser.RULE_functionSymbol = 12;
PddlParser.RULE_functionType = 13;
PddlParser.RULE_constantsDef = 14;
PddlParser.RULE_predicatesDef = 15;
PddlParser.RULE_atomicFormulaSkeleton = 16;
PddlParser.RULE_predicate = 17;
PddlParser.RULE_typedVariableList = 18;
PddlParser.RULE_singleTypeVarList = 19;
PddlParser.RULE_constraints = 20;
PddlParser.RULE_structureDef = 21;
PddlParser.RULE_actionDef = 22;
PddlParser.RULE_actionSymbol = 23;
PddlParser.RULE_actionDefBody = 24;
PddlParser.RULE_goalDesc = 25;
PddlParser.RULE_fComp = 26;
PddlParser.RULE_atomicTermFormula = 27;
PddlParser.RULE_term = 28;
PddlParser.RULE_durativeActionDef = 29;
PddlParser.RULE_daDefBody = 30;
PddlParser.RULE_daGD = 31;
PddlParser.RULE_prefTimedGD = 32;
PddlParser.RULE_timedGD = 33;
PddlParser.RULE_timeSpecifier = 34;
PddlParser.RULE_interval = 35;
PddlParser.RULE_derivedDef = 36;
PddlParser.RULE_fExp = 37;
PddlParser.RULE_fExp2 = 38;
PddlParser.RULE_fHead = 39;
PddlParser.RULE_effect = 40;
PddlParser.RULE_cEffect = 41;
PddlParser.RULE_pEffect = 42;
PddlParser.RULE_condEffect = 43;
PddlParser.RULE_binaryOp = 44;
PddlParser.RULE_binaryComp = 45;
PddlParser.RULE_assignOp = 46;
PddlParser.RULE_durationConstraint = 47;
PddlParser.RULE_simpleDurationConstraint = 48;
PddlParser.RULE_durOp = 49;
PddlParser.RULE_durValue = 50;
PddlParser.RULE_daEffect = 51;
PddlParser.RULE_timedEffect = 52;
PddlParser.RULE_fAssignDA = 53;
PddlParser.RULE_fExpDA = 54;
PddlParser.RULE_problem = 55;
PddlParser.RULE_problemDecl = 56;
PddlParser.RULE_problemDomain = 57;
PddlParser.RULE_objectDecl = 58;
PddlParser.RULE_init_ = 59;
PddlParser.RULE_initEl = 60;
PddlParser.RULE_nameLiteral = 61;
PddlParser.RULE_atomicNameFormula = 62;
PddlParser.RULE_goal = 63;
PddlParser.RULE_probConstraints = 64;
PddlParser.RULE_prefConGD = 65;
PddlParser.RULE_metricSpec = 66;
PddlParser.RULE_optimization = 67;
PddlParser.RULE_metricFExp = 68;
PddlParser.RULE_conGD = 69;

class PddlDocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_pddlDoc;
    }

	domain() {
	    return this.getTypedRuleContext(DomainContext,0);
	};

	problem() {
	    return this.getTypedRuleContext(ProblemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPddlDoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPddlDoc(this);
		}
	}


}



class DomainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_domain;
    }

	domainName() {
	    return this.getTypedRuleContext(DomainNameContext,0);
	};

	requireDef() {
	    return this.getTypedRuleContext(RequireDefContext,0);
	};

	typesDef() {
	    return this.getTypedRuleContext(TypesDefContext,0);
	};

	constantsDef() {
	    return this.getTypedRuleContext(ConstantsDefContext,0);
	};

	predicatesDef() {
	    return this.getTypedRuleContext(PredicatesDefContext,0);
	};

	functionsDef() {
	    return this.getTypedRuleContext(FunctionsDefContext,0);
	};

	constraints() {
	    return this.getTypedRuleContext(ConstraintsContext,0);
	};

	structureDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructureDefContext);
	    } else {
	        return this.getTypedRuleContext(StructureDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDomain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDomain(this);
		}
	}


}



class DomainNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_domainName;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDomainName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDomainName(this);
		}
	}


}



class RequireDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_requireDef;
    }

	REQUIRE_KEY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.REQUIRE_KEY);
	    } else {
	        return this.getToken(PddlParser.REQUIRE_KEY, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterRequireDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitRequireDef(this);
		}
	}


}



class TypesDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_typesDef;
    }

	typedNameList() {
	    return this.getTypedRuleContext(TypedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTypesDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTypesDef(this);
		}
	}


}



class TypedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_typedNameList;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.NAME);
	    } else {
	        return this.getToken(PddlParser.NAME, i);
	    }
	};


	singleTypeNameList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleTypeNameListContext);
	    } else {
	        return this.getTypedRuleContext(SingleTypeNameListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTypedNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTypedNameList(this);
		}
	}


}



class SingleTypeNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_singleTypeNameList;
        this.t = null; // Type_Context
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.NAME);
	    } else {
	        return this.getToken(PddlParser.NAME, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterSingleTypeNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitSingleTypeNameList(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_type_;
    }

	primType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimTypeContext);
	    } else {
	        return this.getTypedRuleContext(PrimTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitType_(this);
		}
	}


}



class PrimTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_primType;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPrimType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPrimType(this);
		}
	}


}



class FunctionsDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_functionsDef;
    }

	functionList() {
	    return this.getTypedRuleContext(FunctionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFunctionsDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFunctionsDef(this);
		}
	}


}



class FunctionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_functionList;
    }

	atomicFunctionSkeleton = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomicFunctionSkeletonContext);
	    } else {
	        return this.getTypedRuleContext(AtomicFunctionSkeletonContext,i);
	    }
	};

	functionType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionTypeContext);
	    } else {
	        return this.getTypedRuleContext(FunctionTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFunctionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFunctionList(this);
		}
	}


}



class AtomicFunctionSkeletonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_atomicFunctionSkeleton;
    }

	functionSymbol() {
	    return this.getTypedRuleContext(FunctionSymbolContext,0);
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterAtomicFunctionSkeleton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitAtomicFunctionSkeleton(this);
		}
	}


}



class FunctionSymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_functionSymbol;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFunctionSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFunctionSymbol(this);
		}
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_functionType;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFunctionType(this);
		}
	}


}



class ConstantsDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_constantsDef;
    }

	typedNameList() {
	    return this.getTypedRuleContext(TypedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterConstantsDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitConstantsDef(this);
		}
	}


}



class PredicatesDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_predicatesDef;
    }

	atomicFormulaSkeleton = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomicFormulaSkeletonContext);
	    } else {
	        return this.getTypedRuleContext(AtomicFormulaSkeletonContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPredicatesDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPredicatesDef(this);
		}
	}


}



class AtomicFormulaSkeletonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_atomicFormulaSkeleton;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterAtomicFormulaSkeleton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitAtomicFormulaSkeleton(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_predicate;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class TypedVariableListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_typedVariableList;
    }

	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.VARIABLE);
	    } else {
	        return this.getToken(PddlParser.VARIABLE, i);
	    }
	};


	singleTypeVarList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleTypeVarListContext);
	    } else {
	        return this.getTypedRuleContext(SingleTypeVarListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTypedVariableList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTypedVariableList(this);
		}
	}


}



class SingleTypeVarListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_singleTypeVarList;
        this.t = null; // Type_Context
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.VARIABLE);
	    } else {
	        return this.getToken(PddlParser.VARIABLE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterSingleTypeVarList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitSingleTypeVarList(this);
		}
	}


}



class ConstraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_constraints;
    }

	conGD() {
	    return this.getTypedRuleContext(ConGDContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterConstraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitConstraints(this);
		}
	}


}



class StructureDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_structureDef;
    }

	actionDef() {
	    return this.getTypedRuleContext(ActionDefContext,0);
	};

	durativeActionDef() {
	    return this.getTypedRuleContext(DurativeActionDefContext,0);
	};

	derivedDef() {
	    return this.getTypedRuleContext(DerivedDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterStructureDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitStructureDef(this);
		}
	}


}



class ActionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_actionDef;
    }

	actionSymbol() {
	    return this.getTypedRuleContext(ActionSymbolContext,0);
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	actionDefBody() {
	    return this.getTypedRuleContext(ActionDefBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterActionDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitActionDef(this);
		}
	}


}



class ActionSymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_actionSymbol;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterActionSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitActionSymbol(this);
		}
	}


}



class ActionDefBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_actionDefBody;
    }

	goalDesc() {
	    return this.getTypedRuleContext(GoalDescContext,0);
	};

	effect() {
	    return this.getTypedRuleContext(EffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterActionDefBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitActionDefBody(this);
		}
	}


}



class GoalDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_goalDesc;
    }

	atomicTermFormula() {
	    return this.getTypedRuleContext(AtomicTermFormulaContext,0);
	};

	goalDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GoalDescContext);
	    } else {
	        return this.getTypedRuleContext(GoalDescContext,i);
	    }
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	fComp() {
	    return this.getTypedRuleContext(FCompContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterGoalDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitGoalDesc(this);
		}
	}


}



class FCompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fComp;
    }

	binaryComp() {
	    return this.getTypedRuleContext(BinaryCompContext,0);
	};

	fExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FExpContext);
	    } else {
	        return this.getTypedRuleContext(FExpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFComp(this);
		}
	}


}



class AtomicTermFormulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_atomicTermFormula;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterAtomicTermFormula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitAtomicTermFormula(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_term;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	VARIABLE() {
	    return this.getToken(PddlParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTerm(this);
		}
	}


}



class DurativeActionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_durativeActionDef;
    }

	actionSymbol() {
	    return this.getTypedRuleContext(ActionSymbolContext,0);
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	daDefBody() {
	    return this.getTypedRuleContext(DaDefBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDurativeActionDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDurativeActionDef(this);
		}
	}


}



class DaDefBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_daDefBody;
    }

	durationConstraint() {
	    return this.getTypedRuleContext(DurationConstraintContext,0);
	};

	daGD() {
	    return this.getTypedRuleContext(DaGDContext,0);
	};

	daEffect() {
	    return this.getTypedRuleContext(DaEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDaDefBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDaDefBody(this);
		}
	}


}



class DaGDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_daGD;
    }

	prefTimedGD() {
	    return this.getTypedRuleContext(PrefTimedGDContext,0);
	};

	daGD = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DaGDContext);
	    } else {
	        return this.getTypedRuleContext(DaGDContext,i);
	    }
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDaGD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDaGD(this);
		}
	}


}



class PrefTimedGDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_prefTimedGD;
    }

	timedGD() {
	    return this.getTypedRuleContext(TimedGDContext,0);
	};

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPrefTimedGD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPrefTimedGD(this);
		}
	}


}



class TimedGDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_timedGD;
    }

	timeSpecifier() {
	    return this.getTypedRuleContext(TimeSpecifierContext,0);
	};

	goalDesc() {
	    return this.getTypedRuleContext(GoalDescContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTimedGD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTimedGD(this);
		}
	}


}



class TimeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_timeSpecifier;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTimeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTimeSpecifier(this);
		}
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_interval;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitInterval(this);
		}
	}


}



class DerivedDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_derivedDef;
    }

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	goalDesc() {
	    return this.getTypedRuleContext(GoalDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDerivedDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDerivedDef(this);
		}
	}


}



class FExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fExp;
    }

	NUMBER() {
	    return this.getToken(PddlParser.NUMBER, 0);
	};

	binaryOp() {
	    return this.getTypedRuleContext(BinaryOpContext,0);
	};

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	fExp2() {
	    return this.getTypedRuleContext(FExp2Context,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFExp(this);
		}
	}


}



class FExp2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fExp2;
    }

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFExp2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFExp2(this);
		}
	}


}



class FHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fHead;
    }

	functionSymbol() {
	    return this.getTypedRuleContext(FunctionSymbolContext,0);
	};

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFHead(this);
		}
	}


}



class EffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_effect;
    }

	cEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CEffectContext);
	    } else {
	        return this.getTypedRuleContext(CEffectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitEffect(this);
		}
	}


}



class CEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_cEffect;
    }

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	effect() {
	    return this.getTypedRuleContext(EffectContext,0);
	};

	goalDesc() {
	    return this.getTypedRuleContext(GoalDescContext,0);
	};

	condEffect() {
	    return this.getTypedRuleContext(CondEffectContext,0);
	};

	pEffect() {
	    return this.getTypedRuleContext(PEffectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterCEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitCEffect(this);
		}
	}


}



class PEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_pEffect;
    }

	assignOp() {
	    return this.getTypedRuleContext(AssignOpContext,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	atomicTermFormula() {
	    return this.getTypedRuleContext(AtomicTermFormulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPEffect(this);
		}
	}


}



class CondEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_condEffect;
    }

	pEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PEffectContext);
	    } else {
	        return this.getTypedRuleContext(PEffectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterCondEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitCondEffect(this);
		}
	}


}



class BinaryOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_binaryOp;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterBinaryOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitBinaryOp(this);
		}
	}


}



class BinaryCompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_binaryComp;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterBinaryComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitBinaryComp(this);
		}
	}


}



class AssignOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_assignOp;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterAssignOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitAssignOp(this);
		}
	}


}



class DurationConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_durationConstraint;
    }

	simpleDurationConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDurationConstraintContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDurationConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDurationConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDurationConstraint(this);
		}
	}


}



class SimpleDurationConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_simpleDurationConstraint;
    }

	durOp() {
	    return this.getTypedRuleContext(DurOpContext,0);
	};

	durValue() {
	    return this.getTypedRuleContext(DurValueContext,0);
	};

	timeSpecifier() {
	    return this.getTypedRuleContext(TimeSpecifierContext,0);
	};

	simpleDurationConstraint() {
	    return this.getTypedRuleContext(SimpleDurationConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterSimpleDurationConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitSimpleDurationConstraint(this);
		}
	}


}



class DurOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_durOp;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDurOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDurOp(this);
		}
	}


}



class DurValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_durValue;
    }

	NUMBER() {
	    return this.getToken(PddlParser.NUMBER, 0);
	};

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDurValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDurValue(this);
		}
	}


}



class DaEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_daEffect;
    }

	daEffect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DaEffectContext);
	    } else {
	        return this.getTypedRuleContext(DaEffectContext,i);
	    }
	};

	timedEffect() {
	    return this.getTypedRuleContext(TimedEffectContext,0);
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	daGD() {
	    return this.getTypedRuleContext(DaGDContext,0);
	};

	assignOp() {
	    return this.getTypedRuleContext(AssignOpContext,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	fExpDA() {
	    return this.getTypedRuleContext(FExpDAContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterDaEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitDaEffect(this);
		}
	}


}



class TimedEffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_timedEffect;
    }

	timeSpecifier() {
	    return this.getTypedRuleContext(TimeSpecifierContext,0);
	};

	daEffect() {
	    return this.getTypedRuleContext(DaEffectContext,0);
	};

	fAssignDA() {
	    return this.getTypedRuleContext(FAssignDAContext,0);
	};

	assignOp() {
	    return this.getTypedRuleContext(AssignOpContext,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterTimedEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitTimedEffect(this);
		}
	}


}



class FAssignDAContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fAssignDA;
    }

	assignOp() {
	    return this.getTypedRuleContext(AssignOpContext,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	fExpDA() {
	    return this.getTypedRuleContext(FExpDAContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFAssignDA(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFAssignDA(this);
		}
	}


}



class FExpDAContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_fExpDA;
    }

	binaryOp() {
	    return this.getTypedRuleContext(BinaryOpContext,0);
	};

	fExpDA = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FExpDAContext);
	    } else {
	        return this.getTypedRuleContext(FExpDAContext,i);
	    }
	};

	fExp() {
	    return this.getTypedRuleContext(FExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterFExpDA(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitFExpDA(this);
		}
	}


}



class ProblemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_problem;
    }

	problemDecl() {
	    return this.getTypedRuleContext(ProblemDeclContext,0);
	};

	problemDomain() {
	    return this.getTypedRuleContext(ProblemDomainContext,0);
	};

	init_() {
	    return this.getTypedRuleContext(Init_Context,0);
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	requireDef() {
	    return this.getTypedRuleContext(RequireDefContext,0);
	};

	objectDecl() {
	    return this.getTypedRuleContext(ObjectDeclContext,0);
	};

	probConstraints() {
	    return this.getTypedRuleContext(ProbConstraintsContext,0);
	};

	metricSpec() {
	    return this.getTypedRuleContext(MetricSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterProblem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitProblem(this);
		}
	}


}



class ProblemDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_problemDecl;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterProblemDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitProblemDecl(this);
		}
	}


}



class ProblemDomainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_problemDomain;
    }

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterProblemDomain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitProblemDomain(this);
		}
	}


}



class ObjectDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_objectDecl;
    }

	typedNameList() {
	    return this.getTypedRuleContext(TypedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterObjectDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitObjectDecl(this);
		}
	}


}



class Init_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_init_;
    }

	initEl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitElContext);
	    } else {
	        return this.getTypedRuleContext(InitElContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterInit_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitInit_(this);
		}
	}


}



class InitElContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_initEl;
    }

	nameLiteral() {
	    return this.getTypedRuleContext(NameLiteralContext,0);
	};

	fHead() {
	    return this.getTypedRuleContext(FHeadContext,0);
	};

	NUMBER() {
	    return this.getToken(PddlParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterInitEl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitInitEl(this);
		}
	}


}



class NameLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_nameLiteral;
    }

	atomicNameFormula() {
	    return this.getTypedRuleContext(AtomicNameFormulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterNameLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitNameLiteral(this);
		}
	}


}



class AtomicNameFormulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_atomicNameFormula;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.NAME);
	    } else {
	        return this.getToken(PddlParser.NAME, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterAtomicNameFormula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitAtomicNameFormula(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_goal;
    }

	goalDesc() {
	    return this.getTypedRuleContext(GoalDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitGoal(this);
		}
	}


}



class ProbConstraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_probConstraints;
    }

	prefConGD() {
	    return this.getTypedRuleContext(PrefConGDContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterProbConstraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitProbConstraints(this);
		}
	}


}



class PrefConGDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_prefConGD;
    }

	prefConGD = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrefConGDContext);
	    } else {
	        return this.getTypedRuleContext(PrefConGDContext,i);
	    }
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	conGD() {
	    return this.getTypedRuleContext(ConGDContext,0);
	};

	NAME() {
	    return this.getToken(PddlParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterPrefConGD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitPrefConGD(this);
		}
	}


}



class MetricSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_metricSpec;
    }

	optimization() {
	    return this.getTypedRuleContext(OptimizationContext,0);
	};

	metricFExp() {
	    return this.getTypedRuleContext(MetricFExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterMetricSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitMetricSpec(this);
		}
	}


}



class OptimizationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_optimization;
    }


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterOptimization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitOptimization(this);
		}
	}


}



class MetricFExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_metricFExp;
    }

	binaryOp() {
	    return this.getTypedRuleContext(BinaryOpContext,0);
	};

	metricFExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MetricFExpContext);
	    } else {
	        return this.getTypedRuleContext(MetricFExpContext,i);
	    }
	};

	NUMBER() {
	    return this.getToken(PddlParser.NUMBER, 0);
	};

	functionSymbol() {
	    return this.getTypedRuleContext(FunctionSymbolContext,0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.NAME);
	    } else {
	        return this.getToken(PddlParser.NAME, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterMetricFExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitMetricFExp(this);
		}
	}


}



class ConGDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PddlParser.RULE_conGD;
    }

	conGD = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConGDContext);
	    } else {
	        return this.getTypedRuleContext(ConGDContext,i);
	    }
	};

	typedVariableList() {
	    return this.getTypedRuleContext(TypedVariableListContext,0);
	};

	goalDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GoalDescContext);
	    } else {
	        return this.getTypedRuleContext(GoalDescContext,i);
	    }
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PddlParser.NUMBER);
	    } else {
	        return this.getToken(PddlParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.enterConGD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PddlListener ) {
	        listener.exitConGD(this);
		}
	}


}




PddlParser.PddlDocContext = PddlDocContext; 
PddlParser.DomainContext = DomainContext; 
PddlParser.DomainNameContext = DomainNameContext; 
PddlParser.RequireDefContext = RequireDefContext; 
PddlParser.TypesDefContext = TypesDefContext; 
PddlParser.TypedNameListContext = TypedNameListContext; 
PddlParser.SingleTypeNameListContext = SingleTypeNameListContext; 
PddlParser.Type_Context = Type_Context; 
PddlParser.PrimTypeContext = PrimTypeContext; 
PddlParser.FunctionsDefContext = FunctionsDefContext; 
PddlParser.FunctionListContext = FunctionListContext; 
PddlParser.AtomicFunctionSkeletonContext = AtomicFunctionSkeletonContext; 
PddlParser.FunctionSymbolContext = FunctionSymbolContext; 
PddlParser.FunctionTypeContext = FunctionTypeContext; 
PddlParser.ConstantsDefContext = ConstantsDefContext; 
PddlParser.PredicatesDefContext = PredicatesDefContext; 
PddlParser.AtomicFormulaSkeletonContext = AtomicFormulaSkeletonContext; 
PddlParser.PredicateContext = PredicateContext; 
PddlParser.TypedVariableListContext = TypedVariableListContext; 
PddlParser.SingleTypeVarListContext = SingleTypeVarListContext; 
PddlParser.ConstraintsContext = ConstraintsContext; 
PddlParser.StructureDefContext = StructureDefContext; 
PddlParser.ActionDefContext = ActionDefContext; 
PddlParser.ActionSymbolContext = ActionSymbolContext; 
PddlParser.ActionDefBodyContext = ActionDefBodyContext; 
PddlParser.GoalDescContext = GoalDescContext; 
PddlParser.FCompContext = FCompContext; 
PddlParser.AtomicTermFormulaContext = AtomicTermFormulaContext; 
PddlParser.TermContext = TermContext; 
PddlParser.DurativeActionDefContext = DurativeActionDefContext; 
PddlParser.DaDefBodyContext = DaDefBodyContext; 
PddlParser.DaGDContext = DaGDContext; 
PddlParser.PrefTimedGDContext = PrefTimedGDContext; 
PddlParser.TimedGDContext = TimedGDContext; 
PddlParser.TimeSpecifierContext = TimeSpecifierContext; 
PddlParser.IntervalContext = IntervalContext; 
PddlParser.DerivedDefContext = DerivedDefContext; 
PddlParser.FExpContext = FExpContext; 
PddlParser.FExp2Context = FExp2Context; 
PddlParser.FHeadContext = FHeadContext; 
PddlParser.EffectContext = EffectContext; 
PddlParser.CEffectContext = CEffectContext; 
PddlParser.PEffectContext = PEffectContext; 
PddlParser.CondEffectContext = CondEffectContext; 
PddlParser.BinaryOpContext = BinaryOpContext; 
PddlParser.BinaryCompContext = BinaryCompContext; 
PddlParser.AssignOpContext = AssignOpContext; 
PddlParser.DurationConstraintContext = DurationConstraintContext; 
PddlParser.SimpleDurationConstraintContext = SimpleDurationConstraintContext; 
PddlParser.DurOpContext = DurOpContext; 
PddlParser.DurValueContext = DurValueContext; 
PddlParser.DaEffectContext = DaEffectContext; 
PddlParser.TimedEffectContext = TimedEffectContext; 
PddlParser.FAssignDAContext = FAssignDAContext; 
PddlParser.FExpDAContext = FExpDAContext; 
PddlParser.ProblemContext = ProblemContext; 
PddlParser.ProblemDeclContext = ProblemDeclContext; 
PddlParser.ProblemDomainContext = ProblemDomainContext; 
PddlParser.ObjectDeclContext = ObjectDeclContext; 
PddlParser.Init_Context = Init_Context; 
PddlParser.InitElContext = InitElContext; 
PddlParser.NameLiteralContext = NameLiteralContext; 
PddlParser.AtomicNameFormulaContext = AtomicNameFormulaContext; 
PddlParser.GoalContext = GoalContext; 
PddlParser.ProbConstraintsContext = ProbConstraintsContext; 
PddlParser.PrefConGDContext = PrefConGDContext; 
PddlParser.MetricSpecContext = MetricSpecContext; 
PddlParser.OptimizationContext = OptimizationContext; 
PddlParser.MetricFExpContext = MetricFExpContext; 
PddlParser.ConGDContext = ConGDContext; 
