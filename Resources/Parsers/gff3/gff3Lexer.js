// Generated from ./gff3/gff3.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,7,72,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
1,4,5,4,48,8,4,10,4,12,4,51,9,4,1,4,1,4,1,5,3,5,56,8,5,1,5,1,5,1,6,1,6,1,
6,4,6,63,8,6,11,6,12,6,64,1,7,1,7,1,8,1,8,1,9,1,9,1,49,0,10,1,1,3,2,5,3,
7,4,9,5,11,6,13,7,15,0,17,0,19,0,1,0,3,2,0,65,90,97,122,1,0,48,57,7,0,32,
33,36,37,42,46,58,58,63,64,94,95,124,124,73,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,21,1,0,0,0,3,
23,1,0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,9,45,1,0,0,0,11,55,1,0,0,0,13,62,1,
0,0,0,15,66,1,0,0,0,17,68,1,0,0,0,19,70,1,0,0,0,21,22,5,9,0,0,22,2,1,0,0,
0,23,24,5,59,0,0,24,4,1,0,0,0,25,26,5,61,0,0,26,6,1,0,0,0,27,28,5,35,0,0,
28,29,5,35,0,0,29,30,5,103,0,0,30,31,5,102,0,0,31,32,5,102,0,0,32,33,5,45,
0,0,33,34,5,118,0,0,34,35,5,101,0,0,35,36,5,114,0,0,36,37,5,115,0,0,37,38,
5,105,0,0,38,39,5,111,0,0,39,40,5,110,0,0,40,41,5,32,0,0,41,42,5,51,0,0,
42,43,1,0,0,0,43,44,3,11,5,0,44,8,1,0,0,0,45,49,5,35,0,0,46,48,9,0,0,0,47,
46,1,0,0,0,48,51,1,0,0,0,49,50,1,0,0,0,49,47,1,0,0,0,50,52,1,0,0,0,51,49,
1,0,0,0,52,53,3,11,5,0,53,10,1,0,0,0,54,56,5,13,0,0,55,54,1,0,0,0,55,56,
1,0,0,0,56,57,1,0,0,0,57,58,5,10,0,0,58,12,1,0,0,0,59,63,3,15,7,0,60,63,
3,19,9,0,61,63,3,17,8,0,62,59,1,0,0,0,62,60,1,0,0,0,62,61,1,0,0,0,63,64,
1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,14,1,0,0,0,66,67,7,0,0,0,67,16,1,
0,0,0,68,69,7,1,0,0,69,18,1,0,0,0,70,71,7,2,0,0,71,20,1,0,0,0,5,0,49,55,
62,64,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class gff3Lexer extends antlr4.Lexer {

    static grammarFileName = "gff3.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\t'", "';'", "'='" ];
	static symbolicNames = [ null, null, null, null, "HEADER", "COMMENTLINE", 
                          "EOL", "TEXT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "HEADER", "COMMENTLINE", "EOL", 
                      "TEXT", "CHAR", "DIGIT", "SYMBOL" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

gff3Lexer.EOF = antlr4.Token.EOF;
gff3Lexer.T__0 = 1;
gff3Lexer.T__1 = 2;
gff3Lexer.T__2 = 3;
gff3Lexer.HEADER = 4;
gff3Lexer.COMMENTLINE = 5;
gff3Lexer.EOL = 6;
gff3Lexer.TEXT = 7;



