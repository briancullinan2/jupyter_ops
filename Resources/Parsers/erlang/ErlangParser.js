// Generated from Resources/Parsers/erlang/Erlang.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ErlangListener from './ErlangListener.js';
const serializedATN = [4,1,73,1203,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,1,0,4,0,246,8,0,11,0,12,
0,247,1,0,1,0,1,1,1,1,3,1,254,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
8,1,8,1,8,3,8,286,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,296,8,9,1,10,1,
10,1,10,1,10,1,10,3,10,303,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
3,11,313,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,3,13,332,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
5,15,341,8,15,10,15,12,15,344,9,15,1,16,1,16,1,16,3,16,349,8,16,1,17,1,17,
1,17,5,17,354,8,17,10,17,12,17,357,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,3,18,368,8,18,1,19,1,19,1,19,5,19,373,8,19,10,19,12,19,376,
9,19,1,20,1,20,1,20,3,20,381,8,20,1,20,1,20,1,21,1,21,1,21,3,21,388,8,21,
1,22,1,22,1,22,3,22,393,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,402,
8,23,10,23,12,23,405,9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,414,8,
24,10,24,12,24,417,9,24,1,25,3,25,420,8,25,1,25,1,25,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
26,500,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,508,8,27,1,28,1,28,3,28,512,
8,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,5,29,521,8,29,10,29,12,29,524,9,
29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,5,31,533,8,31,10,31,12,31,536,9,31,
1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
33,1,33,1,33,1,33,1,33,1,33,3,33,558,8,33,1,34,1,34,1,34,1,34,1,35,1,35,
1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
36,1,36,1,36,1,36,1,36,3,36,585,8,36,1,37,1,37,1,37,5,37,590,8,37,10,37,
12,37,593,9,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,3,40,604,8,40,
1,41,1,41,1,41,1,42,1,42,1,42,3,42,612,8,42,1,43,1,43,1,43,5,43,617,8,43,
10,43,12,43,620,9,43,1,44,1,44,1,44,5,44,625,8,44,10,44,12,44,628,9,44,1,
45,1,45,1,45,5,45,633,8,45,10,45,12,45,636,9,45,1,46,1,46,1,46,1,46,3,46,
642,8,46,1,47,1,47,1,47,1,47,5,47,648,8,47,10,47,12,47,651,9,47,1,48,1,48,
1,48,1,48,5,48,657,8,48,10,48,12,48,660,9,48,1,49,1,49,1,49,1,49,5,49,666,
8,49,10,49,12,49,669,9,49,1,50,1,50,1,50,1,50,3,50,675,8,50,1,51,1,51,3,
51,679,8,51,1,52,1,52,1,52,3,52,684,8,52,1,53,1,53,1,53,3,53,689,8,53,1,
54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,3,54,711,8,54,1,55,1,55,1,55,3,55,716,8,55,1,56,
1,56,1,56,1,56,3,56,722,8,56,1,57,1,57,1,57,1,57,3,57,728,8,57,1,58,1,58,
1,58,1,58,1,58,1,58,1,58,5,58,737,8,58,10,58,12,58,740,9,58,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,5,59,749,8,59,10,59,12,59,752,9,59,1,60,1,60,1,60,
1,60,3,60,758,8,60,1,61,1,61,3,61,762,8,61,1,62,1,62,3,62,766,8,62,1,63,
1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,779,8,64,1,65,1,65,
3,65,783,8,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,791,8,65,10,65,12,65,794,
9,65,1,66,1,66,1,66,1,66,1,66,3,66,801,8,66,1,67,1,67,1,67,1,67,1,67,1,67,
3,67,809,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,820,8,68,
1,69,1,69,1,69,1,69,1,69,1,69,3,69,828,8,69,1,70,1,70,1,70,5,70,833,8,70,
10,70,12,70,836,9,70,1,71,1,71,1,71,1,71,1,72,3,72,843,8,72,1,72,1,72,1,
73,1,73,3,73,849,8,73,1,74,1,74,3,74,853,8,74,1,75,1,75,1,75,5,75,858,8,
75,10,75,12,75,861,9,75,1,76,1,76,1,76,3,76,866,8,76,1,77,1,77,1,78,1,78,
1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,5,80,885,
8,80,10,80,12,80,888,9,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,
81,899,8,81,1,82,1,82,3,82,903,8,82,1,82,1,82,1,83,1,83,3,83,909,8,83,1,
83,1,83,1,83,1,83,1,83,1,83,5,83,917,8,83,10,83,12,83,920,9,83,1,84,1,84,
1,84,1,84,5,84,926,8,84,10,84,12,84,929,9,84,3,84,931,8,84,1,84,1,84,1,85,
1,85,3,85,937,8,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,89,
1,89,3,89,951,8,89,1,89,1,89,1,89,1,89,1,89,3,89,958,8,89,1,89,1,89,1,89,
1,89,1,89,1,89,3,89,966,8,89,5,89,968,8,89,10,89,12,89,971,9,89,1,90,1,90,
3,90,975,8,90,1,90,1,90,1,91,1,91,1,91,5,91,982,8,91,10,91,12,91,985,9,91,
1,92,1,92,3,92,989,8,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,
1,95,1,95,1,95,5,95,1004,8,95,10,95,12,95,1007,9,95,1,96,1,96,1,96,1,97,
1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,5,98,1021,8,98,10,98,12,98,1024,
9,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1047,8,100,1,
101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,
101,1,101,1,101,1,101,3,101,1065,8,101,1,102,1,102,3,102,1069,8,102,1,103,
1,103,3,103,1073,8,103,1,104,1,104,1,104,5,104,1078,8,104,10,104,12,104,
1081,9,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1092,
8,105,1,106,1,106,1,106,1,106,3,106,1098,8,106,1,106,1,106,1,107,1,107,1,
107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,
107,1116,8,107,1,108,1,108,1,108,5,108,1121,8,108,10,108,12,108,1124,9,108,
1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1133,8,109,1,109,1,109,1,
109,1,109,1,109,3,109,1140,8,109,1,110,1,110,3,110,1144,8,110,1,111,1,111,
3,111,1148,8,111,1,111,1,111,1,112,1,112,3,112,1154,8,112,1,112,1,112,1,
113,1,113,1,113,5,113,1161,8,113,10,113,12,113,1164,9,113,1,114,1,114,1,
114,5,114,1169,8,114,10,114,12,114,1172,9,114,1,115,1,115,1,115,5,115,1177,
8,115,10,115,12,115,1180,9,115,1,116,1,116,1,116,1,116,1,116,4,116,1187,
8,116,11,116,12,116,1188,3,116,1191,8,116,1,117,1,117,1,118,1,118,1,119,
1,119,1,120,1,120,1,121,1,121,1,121,0,7,46,48,116,118,130,166,178,122,0,
2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,0,7,
1,0,20,21,1,0,26,27,2,0,2,2,42,44,3,0,24,24,32,32,45,48,3,0,2,2,42,42,49,
54,1,0,55,56,1,0,57,64,1229,0,245,1,0,0,0,2,253,1,0,0,0,4,257,1,0,0,0,6,
259,1,0,0,0,8,261,1,0,0,0,10,263,1,0,0,0,12,265,1,0,0,0,14,267,1,0,0,0,16,
285,1,0,0,0,18,295,1,0,0,0,20,302,1,0,0,0,22,312,1,0,0,0,24,314,1,0,0,0,
26,331,1,0,0,0,28,333,1,0,0,0,30,337,1,0,0,0,32,345,1,0,0,0,34,350,1,0,0,
0,36,367,1,0,0,0,38,369,1,0,0,0,40,380,1,0,0,0,42,384,1,0,0,0,44,389,1,0,
0,0,46,394,1,0,0,0,48,406,1,0,0,0,50,419,1,0,0,0,52,499,1,0,0,0,54,507,1,
0,0,0,56,509,1,0,0,0,58,517,1,0,0,0,60,525,1,0,0,0,62,529,1,0,0,0,64,537,
1,0,0,0,66,557,1,0,0,0,68,559,1,0,0,0,70,563,1,0,0,0,72,584,1,0,0,0,74,586,
1,0,0,0,76,594,1,0,0,0,78,599,1,0,0,0,80,603,1,0,0,0,82,605,1,0,0,0,84,611,
1,0,0,0,86,613,1,0,0,0,88,621,1,0,0,0,90,629,1,0,0,0,92,637,1,0,0,0,94,643,
1,0,0,0,96,652,1,0,0,0,98,661,1,0,0,0,100,674,1,0,0,0,102,678,1,0,0,0,104,
683,1,0,0,0,106,685,1,0,0,0,108,710,1,0,0,0,110,712,1,0,0,0,112,717,1,0,
0,0,114,723,1,0,0,0,116,729,1,0,0,0,118,741,1,0,0,0,120,757,1,0,0,0,122,
761,1,0,0,0,124,765,1,0,0,0,126,767,1,0,0,0,128,778,1,0,0,0,130,780,1,0,
0,0,132,795,1,0,0,0,134,808,1,0,0,0,136,819,1,0,0,0,138,827,1,0,0,0,140,
829,1,0,0,0,142,837,1,0,0,0,144,842,1,0,0,0,146,848,1,0,0,0,148,852,1,0,
0,0,150,854,1,0,0,0,152,862,1,0,0,0,154,867,1,0,0,0,156,869,1,0,0,0,158,
875,1,0,0,0,160,881,1,0,0,0,162,898,1,0,0,0,164,900,1,0,0,0,166,906,1,0,
0,0,168,921,1,0,0,0,170,936,1,0,0,0,172,938,1,0,0,0,174,942,1,0,0,0,176,
946,1,0,0,0,178,948,1,0,0,0,180,972,1,0,0,0,182,978,1,0,0,0,184,988,1,0,
0,0,186,993,1,0,0,0,188,996,1,0,0,0,190,1000,1,0,0,0,192,1008,1,0,0,0,194,
1011,1,0,0,0,196,1017,1,0,0,0,198,1025,1,0,0,0,200,1046,1,0,0,0,202,1064,
1,0,0,0,204,1068,1,0,0,0,206,1072,1,0,0,0,208,1074,1,0,0,0,210,1091,1,0,
0,0,212,1093,1,0,0,0,214,1115,1,0,0,0,216,1117,1,0,0,0,218,1139,1,0,0,0,
220,1143,1,0,0,0,222,1145,1,0,0,0,224,1151,1,0,0,0,226,1157,1,0,0,0,228,
1165,1,0,0,0,230,1173,1,0,0,0,232,1190,1,0,0,0,234,1192,1,0,0,0,236,1194,
1,0,0,0,238,1196,1,0,0,0,240,1198,1,0,0,0,242,1200,1,0,0,0,244,246,3,2,1,
0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,249,
1,0,0,0,249,250,5,0,0,1,250,1,1,0,0,0,251,254,3,16,8,0,252,254,3,74,37,0,
253,251,1,0,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,256,5,1,0,0,256,3,1,
0,0,0,257,258,5,65,0,0,258,5,1,0,0,0,259,260,5,66,0,0,260,7,1,0,0,0,261,
262,5,67,0,0,262,9,1,0,0,0,263,264,5,68,0,0,264,11,1,0,0,0,265,266,5,69,
0,0,266,13,1,0,0,0,267,268,5,70,0,0,268,15,1,0,0,0,269,270,5,2,0,0,270,271,
3,4,2,0,271,272,3,72,36,0,272,286,1,0,0,0,273,274,5,2,0,0,274,275,3,4,2,
0,275,276,3,22,11,0,276,286,1,0,0,0,277,278,5,2,0,0,278,279,3,4,2,0,279,
280,5,3,0,0,280,281,3,22,11,0,281,282,5,4,0,0,282,286,1,0,0,0,283,284,5,
71,0,0,284,286,3,18,9,0,285,269,1,0,0,0,285,273,1,0,0,0,285,277,1,0,0,0,
285,283,1,0,0,0,286,17,1,0,0,0,287,288,3,20,10,0,288,289,3,30,15,0,289,296,
1,0,0,0,290,291,5,3,0,0,291,292,3,20,10,0,292,293,3,30,15,0,293,294,5,4,
0,0,294,296,1,0,0,0,295,287,1,0,0,0,295,290,1,0,0,0,296,19,1,0,0,0,297,303,
3,4,2,0,298,299,3,4,2,0,299,300,5,5,0,0,300,301,3,4,2,0,301,303,1,0,0,0,
302,297,1,0,0,0,302,298,1,0,0,0,303,21,1,0,0,0,304,305,3,84,42,0,305,306,
5,6,0,0,306,307,3,24,12,0,307,313,1,0,0,0,308,309,3,84,42,0,309,310,5,7,
0,0,310,311,3,40,20,0,311,313,1,0,0,0,312,304,1,0,0,0,312,308,1,0,0,0,313,
23,1,0,0,0,314,315,5,8,0,0,315,316,3,26,13,0,316,317,5,9,0,0,317,25,1,0,
0,0,318,332,3,28,14,0,319,320,3,28,14,0,320,321,5,6,0,0,321,322,3,26,13,
0,322,332,1,0,0,0,323,324,3,84,42,0,324,325,5,6,0,0,325,326,3,26,13,0,326,
332,1,0,0,0,327,328,3,28,14,0,328,329,5,6,0,0,329,330,3,226,113,0,330,332,
1,0,0,0,331,318,1,0,0,0,331,319,1,0,0,0,331,323,1,0,0,0,331,327,1,0,0,0,
332,27,1,0,0,0,333,334,3,84,42,0,334,335,5,7,0,0,335,336,3,40,20,0,336,29,
1,0,0,0,337,342,3,32,16,0,338,339,5,10,0,0,339,341,3,32,16,0,340,338,1,0,
0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,31,1,0,0,0,344,342,
1,0,0,0,345,348,3,56,28,0,346,347,5,11,0,0,347,349,3,34,17,0,348,346,1,0,
0,0,348,349,1,0,0,0,349,33,1,0,0,0,350,355,3,36,18,0,351,352,5,6,0,0,352,
354,3,36,18,0,353,351,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,
0,0,0,356,35,1,0,0,0,357,355,1,0,0,0,358,359,3,4,2,0,359,360,5,3,0,0,360,
361,3,38,19,0,361,362,5,4,0,0,362,368,1,0,0,0,363,364,3,6,3,0,364,365,5,
7,0,0,365,366,3,40,20,0,366,368,1,0,0,0,367,358,1,0,0,0,367,363,1,0,0,0,
368,37,1,0,0,0,369,374,3,40,20,0,370,371,5,6,0,0,371,373,3,40,20,0,372,370,
1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,39,1,0,0,0,376,
374,1,0,0,0,377,378,3,6,3,0,378,379,5,7,0,0,379,381,1,0,0,0,380,377,1,0,
0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,3,42,21,0,383,41,1,0,0,0,384,
387,3,44,22,0,385,386,5,12,0,0,386,388,3,42,21,0,387,385,1,0,0,0,387,388,
1,0,0,0,388,43,1,0,0,0,389,392,3,46,23,0,390,391,5,13,0,0,391,393,3,46,23,
0,392,390,1,0,0,0,392,393,1,0,0,0,393,45,1,0,0,0,394,395,6,23,-1,0,395,396,
3,48,24,0,396,403,1,0,0,0,397,398,10,2,0,0,398,399,3,238,119,0,399,400,3,
48,24,0,400,402,1,0,0,0,401,397,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,
403,404,1,0,0,0,404,47,1,0,0,0,405,403,1,0,0,0,406,407,6,24,-1,0,407,408,
3,50,25,0,408,415,1,0,0,0,409,410,10,2,0,0,410,411,3,236,118,0,411,412,3,
50,25,0,412,414,1,0,0,0,413,409,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,
415,416,1,0,0,0,416,49,1,0,0,0,417,415,1,0,0,0,418,420,3,234,117,0,419,418,
1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,3,52,26,0,422,51,1,0,0,0,
423,424,5,3,0,0,424,425,3,40,20,0,425,426,5,4,0,0,426,500,1,0,0,0,427,500,
3,6,3,0,428,500,3,4,2,0,429,430,3,4,2,0,430,431,5,3,0,0,431,432,5,4,0,0,
432,500,1,0,0,0,433,434,3,4,2,0,434,435,5,3,0,0,435,436,3,38,19,0,436,437,
5,4,0,0,437,500,1,0,0,0,438,439,3,4,2,0,439,440,5,5,0,0,440,441,3,4,2,0,
441,442,5,3,0,0,442,443,5,4,0,0,443,500,1,0,0,0,444,445,3,4,2,0,445,446,
5,5,0,0,446,447,3,4,2,0,447,448,5,3,0,0,448,449,3,38,19,0,449,450,5,4,0,
0,450,500,1,0,0,0,451,452,5,14,0,0,452,500,5,15,0,0,453,454,5,14,0,0,454,
455,3,40,20,0,455,456,5,15,0,0,456,500,1,0,0,0,457,458,5,14,0,0,458,459,
3,40,20,0,459,460,5,6,0,0,460,461,5,16,0,0,461,462,5,15,0,0,462,500,1,0,
0,0,463,464,5,17,0,0,464,465,5,8,0,0,465,500,5,9,0,0,466,467,5,17,0,0,467,
468,5,8,0,0,468,469,3,58,29,0,469,470,5,9,0,0,470,500,1,0,0,0,471,472,5,
8,0,0,472,500,5,9,0,0,473,474,5,8,0,0,474,475,3,38,19,0,475,476,5,9,0,0,
476,500,1,0,0,0,477,478,5,17,0,0,478,479,3,4,2,0,479,480,5,8,0,0,480,481,
5,9,0,0,481,500,1,0,0,0,482,483,5,17,0,0,483,484,3,4,2,0,484,485,5,8,0,0,
485,486,3,62,31,0,486,487,5,9,0,0,487,500,1,0,0,0,488,500,3,66,33,0,489,
500,3,10,5,0,490,500,3,12,6,0,491,492,5,18,0,0,492,493,5,3,0,0,493,500,5,
4,0,0,494,495,5,18,0,0,495,496,5,3,0,0,496,497,3,54,27,0,497,498,5,4,0,0,
498,500,1,0,0,0,499,423,1,0,0,0,499,427,1,0,0,0,499,428,1,0,0,0,499,429,
1,0,0,0,499,433,1,0,0,0,499,438,1,0,0,0,499,444,1,0,0,0,499,451,1,0,0,0,
499,453,1,0,0,0,499,457,1,0,0,0,499,463,1,0,0,0,499,466,1,0,0,0,499,471,
1,0,0,0,499,473,1,0,0,0,499,477,1,0,0,0,499,482,1,0,0,0,499,488,1,0,0,0,
499,489,1,0,0,0,499,490,1,0,0,0,499,491,1,0,0,0,499,494,1,0,0,0,500,53,1,
0,0,0,501,502,5,3,0,0,502,503,5,16,0,0,503,504,5,4,0,0,504,505,5,19,0,0,
505,508,3,40,20,0,506,508,3,56,28,0,507,501,1,0,0,0,507,506,1,0,0,0,508,
55,1,0,0,0,509,511,5,3,0,0,510,512,3,38,19,0,511,510,1,0,0,0,511,512,1,0,
0,0,512,513,1,0,0,0,513,514,5,4,0,0,514,515,5,19,0,0,515,516,3,40,20,0,516,
57,1,0,0,0,517,522,3,60,30,0,518,519,5,6,0,0,519,521,3,60,30,0,520,518,1,
0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,59,1,0,0,0,524,
522,1,0,0,0,525,526,3,40,20,0,526,527,7,0,0,0,527,528,3,40,20,0,528,61,1,
0,0,0,529,534,3,64,32,0,530,531,5,6,0,0,531,533,3,64,32,0,532,530,1,0,0,
0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,63,1,0,0,0,536,534,
1,0,0,0,537,538,3,4,2,0,538,539,5,7,0,0,539,540,3,40,20,0,540,65,1,0,0,0,
541,542,5,22,0,0,542,558,5,23,0,0,543,544,5,22,0,0,544,545,3,68,34,0,545,
546,5,23,0,0,546,558,1,0,0,0,547,548,5,22,0,0,548,549,3,70,35,0,549,550,
5,23,0,0,550,558,1,0,0,0,551,552,5,22,0,0,552,553,3,68,34,0,553,554,5,6,
0,0,554,555,3,70,35,0,555,556,5,23,0,0,556,558,1,0,0,0,557,541,1,0,0,0,557,
543,1,0,0,0,557,547,1,0,0,0,557,551,1,0,0,0,558,67,1,0,0,0,559,560,3,6,3,
0,560,561,5,5,0,0,561,562,3,52,26,0,562,69,1,0,0,0,563,564,3,6,3,0,564,565,
5,5,0,0,565,566,3,6,3,0,566,567,5,24,0,0,567,568,3,52,26,0,568,71,1,0,0,
0,569,585,3,84,42,0,570,571,5,3,0,0,571,572,3,84,42,0,572,573,5,4,0,0,573,
585,1,0,0,0,574,575,3,84,42,0,575,576,5,6,0,0,576,577,3,226,113,0,577,585,
1,0,0,0,578,579,5,3,0,0,579,580,3,84,42,0,580,581,5,6,0,0,581,582,3,226,
113,0,582,583,5,4,0,0,583,585,1,0,0,0,584,569,1,0,0,0,584,570,1,0,0,0,584,
574,1,0,0,0,584,578,1,0,0,0,585,73,1,0,0,0,586,591,3,76,38,0,587,588,5,10,
0,0,588,590,3,76,38,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
592,1,0,0,0,592,75,1,0,0,0,593,591,1,0,0,0,594,595,3,4,2,0,595,596,3,78,
39,0,596,597,3,80,40,0,597,598,3,82,41,0,598,77,1,0,0,0,599,600,3,224,112,
0,600,79,1,0,0,0,601,602,5,11,0,0,602,604,3,230,115,0,603,601,1,0,0,0,603,
604,1,0,0,0,604,81,1,0,0,0,605,606,5,19,0,0,606,607,3,226,113,0,607,83,1,
0,0,0,608,609,5,25,0,0,609,612,3,84,42,0,610,612,3,86,43,0,611,608,1,0,0,
0,611,610,1,0,0,0,612,85,1,0,0,0,613,618,3,88,44,0,614,615,7,1,0,0,615,617,
3,88,44,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,
0,619,87,1,0,0,0,620,618,1,0,0,0,621,626,3,90,45,0,622,623,5,28,0,0,623,
625,3,90,45,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,
0,0,0,627,89,1,0,0,0,628,626,1,0,0,0,629,634,3,92,46,0,630,631,5,29,0,0,
631,633,3,92,46,0,632,630,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,
1,0,0,0,635,91,1,0,0,0,636,634,1,0,0,0,637,641,3,94,47,0,638,639,3,242,121,
0,639,640,3,94,47,0,640,642,1,0,0,0,641,638,1,0,0,0,641,642,1,0,0,0,642,
93,1,0,0,0,643,649,3,96,48,0,644,645,3,240,120,0,645,646,3,96,48,0,646,648,
1,0,0,0,647,644,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,
650,95,1,0,0,0,651,649,1,0,0,0,652,658,3,98,49,0,653,654,3,238,119,0,654,
655,3,98,49,0,655,657,1,0,0,0,656,653,1,0,0,0,657,660,1,0,0,0,658,656,1,
0,0,0,658,659,1,0,0,0,659,97,1,0,0,0,660,658,1,0,0,0,661,667,3,100,50,0,
662,663,3,236,118,0,663,664,3,100,50,0,664,666,1,0,0,0,665,662,1,0,0,0,666,
669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,99,1,0,0,0,669,667,1,0,0,
0,670,671,3,234,117,0,671,672,3,100,50,0,672,675,1,0,0,0,673,675,3,102,51,
0,674,670,1,0,0,0,674,673,1,0,0,0,675,101,1,0,0,0,676,679,3,166,83,0,677,
679,3,104,52,0,678,676,1,0,0,0,678,677,1,0,0,0,679,103,1,0,0,0,680,684,3,
186,93,0,681,684,3,178,89,0,682,684,3,106,53,0,683,680,1,0,0,0,683,681,1,
0,0,0,683,682,1,0,0,0,684,105,1,0,0,0,685,688,3,108,54,0,686,687,5,5,0,0,
687,689,3,108,54,0,688,686,1,0,0,0,688,689,1,0,0,0,689,107,1,0,0,0,690,711,
3,6,3,0,691,711,3,232,116,0,692,711,3,134,67,0,693,711,3,138,69,0,694,711,
3,156,78,0,695,711,3,158,79,0,696,711,3,164,82,0,697,698,5,3,0,0,698,699,
3,84,42,0,699,700,5,4,0,0,700,711,1,0,0,0,701,702,5,30,0,0,702,703,3,226,
113,0,703,704,5,31,0,0,704,711,1,0,0,0,705,711,3,188,94,0,706,711,3,194,
97,0,707,711,3,200,100,0,708,711,3,202,101,0,709,711,3,212,106,0,710,690,
1,0,0,0,710,691,1,0,0,0,710,692,1,0,0,0,710,693,1,0,0,0,710,694,1,0,0,0,
710,695,1,0,0,0,710,696,1,0,0,0,710,697,1,0,0,0,710,701,1,0,0,0,710,705,
1,0,0,0,710,706,1,0,0,0,710,707,1,0,0,0,710,708,1,0,0,0,710,709,1,0,0,0,
711,109,1,0,0,0,712,715,3,112,56,0,713,714,5,26,0,0,714,716,3,110,55,0,715,
713,1,0,0,0,715,716,1,0,0,0,716,111,1,0,0,0,717,721,3,114,57,0,718,719,3,
242,121,0,719,720,3,114,57,0,720,722,1,0,0,0,721,718,1,0,0,0,721,722,1,0,
0,0,722,113,1,0,0,0,723,727,3,116,58,0,724,725,3,240,120,0,725,726,3,114,
57,0,726,728,1,0,0,0,727,724,1,0,0,0,727,728,1,0,0,0,728,115,1,0,0,0,729,
730,6,58,-1,0,730,731,3,118,59,0,731,738,1,0,0,0,732,733,10,2,0,0,733,734,
3,238,119,0,734,735,3,118,59,0,735,737,1,0,0,0,736,732,1,0,0,0,737,740,1,
0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,117,1,0,0,0,740,738,1,0,0,0,741,
742,6,59,-1,0,742,743,3,120,60,0,743,750,1,0,0,0,744,745,10,2,0,0,745,746,
3,236,118,0,746,747,3,120,60,0,747,749,1,0,0,0,748,744,1,0,0,0,749,752,1,
0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,119,1,0,0,0,752,750,1,0,0,0,753,
754,3,234,117,0,754,755,3,120,60,0,755,758,1,0,0,0,756,758,3,122,61,0,757,
753,1,0,0,0,757,756,1,0,0,0,758,121,1,0,0,0,759,762,3,130,65,0,760,762,3,
124,62,0,761,759,1,0,0,0,761,760,1,0,0,0,762,123,1,0,0,0,763,766,3,132,66,
0,764,766,3,126,63,0,765,763,1,0,0,0,765,764,1,0,0,0,766,125,1,0,0,0,767,
768,3,128,64,0,768,127,1,0,0,0,769,779,3,6,3,0,770,779,3,232,116,0,771,779,
3,134,67,0,772,779,3,138,69,0,773,779,3,164,82,0,774,775,5,3,0,0,775,776,
3,110,55,0,776,777,5,4,0,0,777,779,1,0,0,0,778,769,1,0,0,0,778,770,1,0,0,
0,778,771,1,0,0,0,778,772,1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,779,129,
1,0,0,0,780,782,6,65,-1,0,781,783,3,128,64,0,782,781,1,0,0,0,782,783,1,0,
0,0,783,784,1,0,0,0,784,785,5,17,0,0,785,786,3,168,84,0,786,792,1,0,0,0,
787,788,10,1,0,0,788,789,5,17,0,0,789,791,3,168,84,0,790,787,1,0,0,0,791,
794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,131,1,0,0,0,794,792,1,0,
0,0,795,796,5,17,0,0,796,800,3,4,2,0,797,798,5,1,0,0,798,801,3,4,2,0,799,
801,3,180,90,0,800,797,1,0,0,0,800,799,1,0,0,0,801,133,1,0,0,0,802,803,5,
14,0,0,803,809,5,15,0,0,804,805,5,14,0,0,805,806,3,84,42,0,806,807,3,136,
68,0,807,809,1,0,0,0,808,802,1,0,0,0,808,804,1,0,0,0,809,135,1,0,0,0,810,
820,5,15,0,0,811,812,5,12,0,0,812,813,3,84,42,0,813,814,5,15,0,0,814,820,
1,0,0,0,815,816,5,6,0,0,816,817,3,84,42,0,817,818,3,136,68,0,818,820,1,0,
0,0,819,810,1,0,0,0,819,811,1,0,0,0,819,815,1,0,0,0,820,137,1,0,0,0,821,
822,5,22,0,0,822,828,5,23,0,0,823,824,5,22,0,0,824,825,3,140,70,0,825,826,
5,23,0,0,826,828,1,0,0,0,827,821,1,0,0,0,827,823,1,0,0,0,828,139,1,0,0,0,
829,834,3,142,71,0,830,831,5,6,0,0,831,833,3,142,71,0,832,830,1,0,0,0,833,
836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,141,1,0,0,0,836,834,1,0,
0,0,837,838,3,144,72,0,838,839,3,146,73,0,839,840,3,148,74,0,840,143,1,0,
0,0,841,843,3,234,117,0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,
844,845,3,108,54,0,845,145,1,0,0,0,846,847,5,5,0,0,847,849,3,154,77,0,848,
846,1,0,0,0,848,849,1,0,0,0,849,147,1,0,0,0,850,851,5,32,0,0,851,853,3,150,
75,0,852,850,1,0,0,0,852,853,1,0,0,0,853,149,1,0,0,0,854,859,3,152,76,0,
855,856,5,2,0,0,856,858,3,152,76,0,857,855,1,0,0,0,858,861,1,0,0,0,859,857,
1,0,0,0,859,860,1,0,0,0,860,151,1,0,0,0,861,859,1,0,0,0,862,865,3,4,2,0,
863,864,5,5,0,0,864,866,3,10,5,0,865,863,1,0,0,0,865,866,1,0,0,0,866,153,
1,0,0,0,867,868,3,108,54,0,868,155,1,0,0,0,869,870,5,14,0,0,870,871,3,84,
42,0,871,872,5,33,0,0,872,873,3,160,80,0,873,874,5,15,0,0,874,157,1,0,0,
0,875,876,5,22,0,0,876,877,3,108,54,0,877,878,5,33,0,0,878,879,3,160,80,
0,879,880,5,23,0,0,880,159,1,0,0,0,881,886,3,162,81,0,882,883,5,6,0,0,883,
885,3,162,81,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,
0,0,0,887,161,1,0,0,0,888,886,1,0,0,0,889,899,3,84,42,0,890,891,3,84,42,
0,891,892,5,34,0,0,892,893,3,84,42,0,893,899,1,0,0,0,894,895,3,138,69,0,
895,896,5,35,0,0,896,897,3,84,42,0,897,899,1,0,0,0,898,889,1,0,0,0,898,890,
1,0,0,0,898,894,1,0,0,0,899,163,1,0,0,0,900,902,5,8,0,0,901,903,3,226,113,
0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,9,0,0,905,165,
1,0,0,0,906,908,6,83,-1,0,907,909,3,108,54,0,908,907,1,0,0,0,908,909,1,0,
0,0,909,910,1,0,0,0,910,911,5,17,0,0,911,912,3,168,84,0,912,918,1,0,0,0,
913,914,10,1,0,0,914,915,5,17,0,0,915,917,3,168,84,0,916,913,1,0,0,0,917,
920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,167,1,0,0,0,920,918,1,0,
0,0,921,930,5,8,0,0,922,927,3,170,85,0,923,924,5,6,0,0,924,926,3,170,85,
0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,931,
1,0,0,0,929,927,1,0,0,0,930,922,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,
932,933,5,9,0,0,933,169,1,0,0,0,934,937,3,172,86,0,935,937,3,174,87,0,936,
934,1,0,0,0,936,935,1,0,0,0,937,171,1,0,0,0,938,939,3,176,88,0,939,940,5,
20,0,0,940,941,3,84,42,0,941,173,1,0,0,0,942,943,3,176,88,0,943,944,5,21,
0,0,944,945,3,84,42,0,945,175,1,0,0,0,946,947,3,84,42,0,947,177,1,0,0,0,
948,950,6,89,-1,0,949,951,3,108,54,0,950,949,1,0,0,0,950,951,1,0,0,0,951,
952,1,0,0,0,952,953,5,17,0,0,953,957,3,4,2,0,954,955,5,1,0,0,955,958,3,4,
2,0,956,958,3,180,90,0,957,954,1,0,0,0,957,956,1,0,0,0,958,969,1,0,0,0,959,
960,10,1,0,0,960,961,5,17,0,0,961,965,3,4,2,0,962,963,5,1,0,0,963,966,3,
4,2,0,964,966,3,180,90,0,965,962,1,0,0,0,965,964,1,0,0,0,966,968,1,0,0,0,
967,959,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,179,
1,0,0,0,971,969,1,0,0,0,972,974,5,8,0,0,973,975,3,182,91,0,974,973,1,0,0,
0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,5,9,0,0,977,181,1,0,0,0,978,983,
3,184,92,0,979,980,5,6,0,0,980,982,3,184,92,0,981,979,1,0,0,0,982,985,1,
0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,183,1,0,0,0,985,983,1,0,0,0,986,
989,3,6,3,0,987,989,3,4,2,0,988,986,1,0,0,0,988,987,1,0,0,0,989,990,1,0,
0,0,990,991,5,26,0,0,991,992,3,84,42,0,992,185,1,0,0,0,993,994,3,106,53,
0,994,995,3,222,111,0,995,187,1,0,0,0,996,997,5,36,0,0,997,998,3,190,95,
0,998,999,5,31,0,0,999,189,1,0,0,0,1000,1005,3,192,96,0,1001,1002,5,10,0,
0,1002,1004,3,192,96,0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,
0,0,1005,1006,1,0,0,0,1006,191,1,0,0,0,1007,1005,1,0,0,0,1008,1009,3,230,
115,0,1009,1010,3,82,41,0,1010,193,1,0,0,0,1011,1012,5,37,0,0,1012,1013,
3,84,42,0,1013,1014,5,38,0,0,1014,1015,3,196,98,0,1015,1016,5,31,0,0,1016,
195,1,0,0,0,1017,1022,3,198,99,0,1018,1019,5,10,0,0,1019,1021,3,198,99,0,
1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,
1023,197,1,0,0,0,1024,1022,1,0,0,0,1025,1026,3,84,42,0,1026,1027,3,80,40,
0,1027,1028,3,82,41,0,1028,199,1,0,0,0,1029,1030,5,39,0,0,1030,1031,3,196,
98,0,1031,1032,5,31,0,0,1032,1047,1,0,0,0,1033,1034,5,39,0,0,1034,1035,5,
40,0,0,1035,1036,3,84,42,0,1036,1037,3,82,41,0,1037,1038,5,31,0,0,1038,1047,
1,0,0,0,1039,1040,5,39,0,0,1040,1041,3,196,98,0,1041,1042,5,40,0,0,1042,
1043,3,84,42,0,1043,1044,3,82,41,0,1044,1045,5,31,0,0,1045,1047,1,0,0,0,
1046,1029,1,0,0,0,1046,1033,1,0,0,0,1046,1039,1,0,0,0,1047,201,1,0,0,0,1048,
1049,5,18,0,0,1049,1050,3,4,2,0,1050,1051,5,32,0,0,1051,1052,3,10,5,0,1052,
1065,1,0,0,0,1053,1054,5,18,0,0,1054,1055,3,204,102,0,1055,1056,5,5,0,0,
1056,1057,3,204,102,0,1057,1058,5,32,0,0,1058,1059,3,206,103,0,1059,1065,
1,0,0,0,1060,1061,5,18,0,0,1061,1062,3,208,104,0,1062,1063,5,31,0,0,1063,
1065,1,0,0,0,1064,1048,1,0,0,0,1064,1053,1,0,0,0,1064,1060,1,0,0,0,1065,
203,1,0,0,0,1066,1069,3,4,2,0,1067,1069,3,6,3,0,1068,1066,1,0,0,0,1068,1067,
1,0,0,0,1069,205,1,0,0,0,1070,1073,3,10,5,0,1071,1073,3,6,3,0,1072,1070,
1,0,0,0,1072,1071,1,0,0,0,1073,207,1,0,0,0,1074,1079,3,210,105,0,1075,1076,
5,10,0,0,1076,1078,3,210,105,0,1077,1075,1,0,0,0,1078,1081,1,0,0,0,1079,
1077,1,0,0,0,1079,1080,1,0,0,0,1080,209,1,0,0,0,1081,1079,1,0,0,0,1082,1083,
3,224,112,0,1083,1084,3,80,40,0,1084,1085,3,82,41,0,1085,1092,1,0,0,0,1086,
1087,3,6,3,0,1087,1088,3,224,112,0,1088,1089,3,80,40,0,1089,1090,3,82,41,
0,1090,1092,1,0,0,0,1091,1082,1,0,0,0,1091,1086,1,0,0,0,1092,211,1,0,0,0,
1093,1094,5,41,0,0,1094,1097,3,226,113,0,1095,1096,5,38,0,0,1096,1098,3,
196,98,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,
3,214,107,0,1100,213,1,0,0,0,1101,1102,5,25,0,0,1102,1103,3,216,108,0,1103,
1104,5,31,0,0,1104,1116,1,0,0,0,1105,1106,5,25,0,0,1106,1107,3,216,108,0,
1107,1108,5,40,0,0,1108,1109,3,226,113,0,1109,1110,5,31,0,0,1110,1116,1,
0,0,0,1111,1112,5,40,0,0,1112,1113,3,226,113,0,1113,1114,5,31,0,0,1114,1116,
1,0,0,0,1115,1101,1,0,0,0,1115,1105,1,0,0,0,1115,1111,1,0,0,0,1116,215,1,
0,0,0,1117,1122,3,218,109,0,1118,1119,5,10,0,0,1119,1121,3,218,109,0,1120,
1118,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,
217,1,0,0,0,1124,1122,1,0,0,0,1125,1126,3,84,42,0,1126,1127,3,80,40,0,1127,
1128,3,82,41,0,1128,1140,1,0,0,0,1129,1130,3,204,102,0,1130,1131,5,5,0,0,
1131,1133,1,0,0,0,1132,1129,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,
1134,1135,3,110,55,0,1135,1136,3,220,110,0,1136,1137,3,80,40,0,1137,1138,
3,82,41,0,1138,1140,1,0,0,0,1139,1125,1,0,0,0,1139,1132,1,0,0,0,1140,219,
1,0,0,0,1141,1142,5,5,0,0,1142,1144,3,6,3,0,1143,1141,1,0,0,0,1143,1144,
1,0,0,0,1144,221,1,0,0,0,1145,1147,5,3,0,0,1146,1148,3,226,113,0,1147,1146,
1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1150,5,4,0,0,1150,223,1,
0,0,0,1151,1153,5,3,0,0,1152,1154,3,228,114,0,1153,1152,1,0,0,0,1153,1154,
1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,4,0,0,1156,225,1,0,0,0,1157,1162,3,
84,42,0,1158,1159,5,6,0,0,1159,1161,3,84,42,0,1160,1158,1,0,0,0,1161,1164,
1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,227,1,0,0,0,1164,1162,1,
0,0,0,1165,1170,3,110,55,0,1166,1167,5,6,0,0,1167,1169,3,110,55,0,1168,1166,
1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,229,1,
0,0,0,1172,1170,1,0,0,0,1173,1178,3,226,113,0,1174,1175,5,10,0,0,1175,1177,
3,226,113,0,1176,1174,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1178,1179,
1,0,0,0,1179,231,1,0,0,0,1180,1178,1,0,0,0,1181,1191,3,12,6,0,1182,1191,
3,10,5,0,1183,1191,3,8,4,0,1184,1191,3,4,2,0,1185,1187,3,14,7,0,1186,1185,
1,0,0,0,1187,1188,1,0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,1191,
1,0,0,0,1190,1181,1,0,0,0,1190,1182,1,0,0,0,1190,1183,1,0,0,0,1190,1184,
1,0,0,0,1190,1186,1,0,0,0,1191,233,1,0,0,0,1192,1193,7,2,0,0,1193,235,1,
0,0,0,1194,1195,7,3,0,0,1195,237,1,0,0,0,1196,1197,7,4,0,0,1197,239,1,0,
0,0,1198,1199,7,5,0,0,1199,241,1,0,0,0,1200,1201,7,6,0,0,1201,243,1,0,0,
0,97,247,253,285,295,302,312,331,342,348,355,367,374,380,387,392,403,415,
419,499,507,511,522,534,557,584,591,603,611,618,626,634,641,649,658,667,
674,678,683,688,710,715,721,727,738,750,757,761,765,778,782,792,800,808,
819,827,834,842,848,852,859,865,886,898,902,908,918,927,930,936,950,957,
965,969,974,983,988,1005,1022,1046,1064,1068,1072,1079,1091,1097,1115,1122,
1132,1139,1143,1147,1153,1162,1170,1178,1188,1190];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ErlangParser extends antlr4.Parser {

    static grammarFileName = "Erlang.g4";
    static literalNames = [ null, "'.'", "'-'", "'('", "')'", "':'", "','", 
                            "'::'", "'{'", "'}'", "';'", "'when'", "'|'", 
                            "'..'", "'['", "']'", "'...'", "'#'", "'fun'", 
                            "'->'", "'=>'", "':='", "'<<'", "'>>'", "'*'", 
                            "'catch'", "'='", "'!'", "'orelse'", "'andalso'", 
                            "'begin'", "'end'", "'/'", "'||'", "'<-'", "'<='", 
                            "'if'", "'case'", "'of'", "'receive'", "'after'", 
                            "'try'", "'+'", "'bnot'", "'not'", "'div'", 
                            "'rem'", "'band'", "'and'", "'bor'", "'bxor'", 
                            "'bsl'", "'bsr'", "'or'", "'xor'", "'++'", "'--'", 
                            "'=='", "'/='", "'=<'", "'<'", "'>='", "'>'", 
                            "'=:='", "'=/='" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "TokAtom", "TokVar", "TokFloat", "TokInteger", 
                             "TokChar", "TokString", "AttrName", "Comment", 
                             "WS" ];
    static ruleNames = [ "forms", "form", "tokAtom", "tokVar", "tokFloat", 
                         "tokInteger", "tokChar", "tokString", "attribute", 
                         "typeSpec", "specFun", "typedAttrVal", "typedRecordFields", 
                         "typedExprs", "typedExpr", "typeSigs", "typeSig", 
                         "typeGuards", "typeGuard", "topTypes", "topType", 
                         "topType100", "type200", "type300", "type400", 
                         "type500", "type_", "funType100", "funType", "mapPairTypes", 
                         "mapPairType", "fieldTypes", "fieldType", "binaryType", 
                         "binBaseType", "binUnitType", "attrVal", "function_", 
                         "functionClause", "clauseArgs", "clauseGuard", 
                         "clauseBody", "expr", "expr100", "expr150", "expr160", 
                         "expr200", "expr300", "expr400", "expr500", "expr600", 
                         "expr650", "expr700", "expr800", "exprMax", "patExpr", 
                         "patExpr200", "patExpr300", "patExpr400", "patExpr500", 
                         "patExpr600", "patExpr650", "patExpr700", "patExpr800", 
                         "patExprMax", "mapPatExpr", "recordPatExpr", "list_", 
                         "tail", "binary", "binElements", "binElement", 
                         "bitExpr", "optBitSizeExpr", "optBitTypeList", 
                         "bitTypeList", "bitType", "bitSizeExpr", "listComprehension", 
                         "binaryComprehension", "lcExprs", "lcExpr", "tuple_", 
                         "mapExpr", "mapTuple", "mapField", "mapFieldAssoc", 
                         "mapFieldExact", "mapKey", "recordExpr", "recordTuple", 
                         "recordFields", "recordField", "functionCall", 
                         "ifExpr", "ifClauses", "ifClause", "caseExpr", 
                         "crClauses", "crClause", "receiveExpr", "funExpr", 
                         "atomOrVar", "integerOrVar", "funClauses", "funClause", 
                         "tryExpr", "tryCatch", "tryClauses", "tryClause", 
                         "tryOptStackTrace", "argumentList", "patArgumentList", 
                         "exprs", "patExprs", "guard_", "atomic", "prefixOp", 
                         "multOp", "addOp", "listOp", "compOp" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ErlangParser.ruleNames;
        this.literalNames = ErlangParser.literalNames;
        this.symbolicNames = ErlangParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 23:
    	    		return this.type300_sempred(localctx, predIndex);
    	case 24:
    	    		return this.type400_sempred(localctx, predIndex);
    	case 58:
    	    		return this.patExpr400_sempred(localctx, predIndex);
    	case 59:
    	    		return this.patExpr500_sempred(localctx, predIndex);
    	case 65:
    	    		return this.mapPatExpr_sempred(localctx, predIndex);
    	case 83:
    	    		return this.mapExpr_sempred(localctx, predIndex);
    	case 89:
    	    		return this.recordExpr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    type300_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    type400_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    patExpr400_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    patExpr500_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mapPatExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mapExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    recordExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	forms() {
	    let localctx = new FormsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ErlangParser.RULE_forms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 244;
	            this.form();
	            this.state = 247; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ErlangParser.T__1 || _la===ErlangParser.TokAtom || _la===ErlangParser.AttrName);
	        this.state = 249;
	        this.match(ErlangParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	form() {
	    let localctx = new FormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ErlangParser.RULE_form);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 253;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__1:
	        case ErlangParser.AttrName:
	            this.state = 251;
	            this.attribute();
	            break;
	        case ErlangParser.TokAtom:
	            this.state = 252;
	            this.function_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 255;
	        this.match(ErlangParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokAtom() {
	    let localctx = new TokAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ErlangParser.RULE_tokAtom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(ErlangParser.TokAtom);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokVar() {
	    let localctx = new TokVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ErlangParser.RULE_tokVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(ErlangParser.TokVar);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokFloat() {
	    let localctx = new TokFloatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ErlangParser.RULE_tokFloat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(ErlangParser.TokFloat);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokInteger() {
	    let localctx = new TokIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ErlangParser.RULE_tokInteger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(ErlangParser.TokInteger);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokChar() {
	    let localctx = new TokCharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ErlangParser.RULE_tokChar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this.match(ErlangParser.TokChar);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokString() {
	    let localctx = new TokStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ErlangParser.RULE_tokString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.match(ErlangParser.TokString);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ErlangParser.RULE_attribute);
	    try {
	        this.state = 285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 269;
	            this.match(ErlangParser.T__1);
	            this.state = 270;
	            this.tokAtom();
	            this.state = 271;
	            this.attrVal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.match(ErlangParser.T__1);
	            this.state = 274;
	            this.tokAtom();
	            this.state = 275;
	            this.typedAttrVal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 277;
	            this.match(ErlangParser.T__1);
	            this.state = 278;
	            this.tokAtom();
	            this.state = 279;
	            this.match(ErlangParser.T__2);
	            this.state = 280;
	            this.typedAttrVal();
	            this.state = 281;
	            this.match(ErlangParser.T__3);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 283;
	            this.match(ErlangParser.AttrName);
	            this.state = 284;
	            this.typeSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec() {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ErlangParser.RULE_typeSpec);
	    try {
	        this.state = 295;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokAtom:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 287;
	            this.specFun();
	            this.state = 288;
	            this.typeSigs();
	            break;
	        case ErlangParser.T__2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 290;
	            this.match(ErlangParser.T__2);
	            this.state = 291;
	            this.specFun();
	            this.state = 292;
	            this.typeSigs();
	            this.state = 293;
	            this.match(ErlangParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specFun() {
	    let localctx = new SpecFunContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ErlangParser.RULE_specFun);
	    try {
	        this.state = 302;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 297;
	            this.tokAtom();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 298;
	            this.tokAtom();
	            this.state = 299;
	            this.match(ErlangParser.T__4);
	            this.state = 300;
	            this.tokAtom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedAttrVal() {
	    let localctx = new TypedAttrValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ErlangParser.RULE_typedAttrVal);
	    try {
	        this.state = 312;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 304;
	            this.expr();
	            this.state = 305;
	            this.match(ErlangParser.T__5);
	            this.state = 306;
	            this.typedRecordFields();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 308;
	            this.expr();
	            this.state = 309;
	            this.match(ErlangParser.T__6);
	            this.state = 310;
	            this.topType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedRecordFields() {
	    let localctx = new TypedRecordFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ErlangParser.RULE_typedRecordFields);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 314;
	        this.match(ErlangParser.T__7);
	        this.state = 315;
	        this.typedExprs();
	        this.state = 316;
	        this.match(ErlangParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedExprs() {
	    let localctx = new TypedExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ErlangParser.RULE_typedExprs);
	    try {
	        this.state = 331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 318;
	            this.typedExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 319;
	            this.typedExpr();
	            this.state = 320;
	            this.match(ErlangParser.T__5);
	            this.state = 321;
	            this.typedExprs();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 323;
	            this.expr();
	            this.state = 324;
	            this.match(ErlangParser.T__5);
	            this.state = 325;
	            this.typedExprs();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 327;
	            this.typedExpr();
	            this.state = 328;
	            this.match(ErlangParser.T__5);
	            this.state = 329;
	            this.exprs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedExpr() {
	    let localctx = new TypedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ErlangParser.RULE_typedExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.expr();
	        this.state = 334;
	        this.match(ErlangParser.T__6);
	        this.state = 335;
	        this.topType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSigs() {
	    let localctx = new TypeSigsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ErlangParser.RULE_typeSigs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.typeSig();
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 338;
	            this.match(ErlangParser.T__9);
	            this.state = 339;
	            this.typeSig();
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSig() {
	    let localctx = new TypeSigContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ErlangParser.RULE_typeSig);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.funType();
	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__10) {
	            this.state = 346;
	            this.match(ErlangParser.T__10);
	            this.state = 347;
	            this.typeGuards();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeGuards() {
	    let localctx = new TypeGuardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ErlangParser.RULE_typeGuards);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.typeGuard();
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 351;
	            this.match(ErlangParser.T__5);
	            this.state = 352;
	            this.typeGuard();
	            this.state = 357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeGuard() {
	    let localctx = new TypeGuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ErlangParser.RULE_typeGuard);
	    try {
	        this.state = 367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokAtom:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 358;
	            this.tokAtom();
	            this.state = 359;
	            this.match(ErlangParser.T__2);
	            this.state = 360;
	            this.topTypes();
	            this.state = 361;
	            this.match(ErlangParser.T__3);
	            break;
	        case ErlangParser.TokVar:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 363;
	            this.tokVar();
	            this.state = 364;
	            this.match(ErlangParser.T__6);
	            this.state = 365;
	            this.topType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topTypes() {
	    let localctx = new TopTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ErlangParser.RULE_topTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 369;
	        this.topType();
	        this.state = 374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 370;
	            this.match(ErlangParser.T__5);
	            this.state = 371;
	            this.topType();
	            this.state = 376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topType() {
	    let localctx = new TopTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ErlangParser.RULE_topType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 380;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 377;
	            this.tokVar();
	            this.state = 378;
	            this.match(ErlangParser.T__6);

	        }
	        this.state = 382;
	        this.topType100();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topType100() {
	    let localctx = new TopType100Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ErlangParser.RULE_topType100);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this.type200();
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__11) {
	            this.state = 385;
	            this.match(ErlangParser.T__11);
	            this.state = 386;
	            this.topType100();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type200() {
	    let localctx = new Type200Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ErlangParser.RULE_type200);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this.type300(0);
	        this.state = 392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__12) {
	            this.state = 390;
	            this.match(ErlangParser.T__12);
	            this.state = 391;
	            this.type300(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	type300(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Type300Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 46;
	    this.enterRecursionRule(localctx, 46, ErlangParser.RULE_type300, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.type400(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 403;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Type300Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_type300);
	                this.state = 397;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 398;
	                this.addOp();
	                this.state = 399;
	                this.type400(0); 
	            }
	            this.state = 405;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	type400(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Type400Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, ErlangParser.RULE_type400, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this.type500();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 415;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Type400Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_type400);
	                this.state = 409;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 410;
	                this.multOp();
	                this.state = 411;
	                this.type500(); 
	            }
	            this.state = 417;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	type500() {
	    let localctx = new Type500Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ErlangParser.RULE_type500);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__1 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__42 - 42)) | (1 << (ErlangParser.T__43 - 42)))) !== 0)) {
	            this.state = 418;
	            this.prefixOp();
	        }

	        this.state = 421;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ErlangParser.RULE_type_);
	    try {
	        this.state = 499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 423;
	            this.match(ErlangParser.T__2);
	            this.state = 424;
	            this.topType();
	            this.state = 425;
	            this.match(ErlangParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 427;
	            this.tokVar();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 428;
	            this.tokAtom();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 429;
	            this.tokAtom();
	            this.state = 430;
	            this.match(ErlangParser.T__2);
	            this.state = 431;
	            this.match(ErlangParser.T__3);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 433;
	            this.tokAtom();
	            this.state = 434;
	            this.match(ErlangParser.T__2);
	            this.state = 435;
	            this.topTypes();
	            this.state = 436;
	            this.match(ErlangParser.T__3);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 438;
	            this.tokAtom();
	            this.state = 439;
	            this.match(ErlangParser.T__4);
	            this.state = 440;
	            this.tokAtom();
	            this.state = 441;
	            this.match(ErlangParser.T__2);
	            this.state = 442;
	            this.match(ErlangParser.T__3);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 444;
	            this.tokAtom();
	            this.state = 445;
	            this.match(ErlangParser.T__4);
	            this.state = 446;
	            this.tokAtom();
	            this.state = 447;
	            this.match(ErlangParser.T__2);
	            this.state = 448;
	            this.topTypes();
	            this.state = 449;
	            this.match(ErlangParser.T__3);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 451;
	            this.match(ErlangParser.T__13);
	            this.state = 452;
	            this.match(ErlangParser.T__14);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 453;
	            this.match(ErlangParser.T__13);
	            this.state = 454;
	            this.topType();
	            this.state = 455;
	            this.match(ErlangParser.T__14);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 457;
	            this.match(ErlangParser.T__13);
	            this.state = 458;
	            this.topType();
	            this.state = 459;
	            this.match(ErlangParser.T__5);
	            this.state = 460;
	            this.match(ErlangParser.T__15);
	            this.state = 461;
	            this.match(ErlangParser.T__14);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 463;
	            this.match(ErlangParser.T__16);
	            this.state = 464;
	            this.match(ErlangParser.T__7);
	            this.state = 465;
	            this.match(ErlangParser.T__8);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 466;
	            this.match(ErlangParser.T__16);
	            this.state = 467;
	            this.match(ErlangParser.T__7);
	            this.state = 468;
	            this.mapPairTypes();
	            this.state = 469;
	            this.match(ErlangParser.T__8);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 471;
	            this.match(ErlangParser.T__7);
	            this.state = 472;
	            this.match(ErlangParser.T__8);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 473;
	            this.match(ErlangParser.T__7);
	            this.state = 474;
	            this.topTypes();
	            this.state = 475;
	            this.match(ErlangParser.T__8);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 477;
	            this.match(ErlangParser.T__16);
	            this.state = 478;
	            this.tokAtom();
	            this.state = 479;
	            this.match(ErlangParser.T__7);
	            this.state = 480;
	            this.match(ErlangParser.T__8);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 482;
	            this.match(ErlangParser.T__16);
	            this.state = 483;
	            this.tokAtom();
	            this.state = 484;
	            this.match(ErlangParser.T__7);
	            this.state = 485;
	            this.fieldTypes();
	            this.state = 486;
	            this.match(ErlangParser.T__8);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 488;
	            this.binaryType();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 489;
	            this.tokInteger();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 490;
	            this.tokChar();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 491;
	            this.match(ErlangParser.T__17);
	            this.state = 492;
	            this.match(ErlangParser.T__2);
	            this.state = 493;
	            this.match(ErlangParser.T__3);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 494;
	            this.match(ErlangParser.T__17);
	            this.state = 495;
	            this.match(ErlangParser.T__2);
	            this.state = 496;
	            this.funType100();
	            this.state = 497;
	            this.match(ErlangParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funType100() {
	    let localctx = new FunType100Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ErlangParser.RULE_funType100);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this.match(ErlangParser.T__2);
	            this.state = 502;
	            this.match(ErlangParser.T__15);
	            this.state = 503;
	            this.match(ErlangParser.T__3);
	            this.state = 504;
	            this.match(ErlangParser.T__18);
	            this.state = 505;
	            this.topType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.funType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funType() {
	    let localctx = new FunTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ErlangParser.RULE_funType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(ErlangParser.T__2);
	        this.state = 511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__42 - 42)) | (1 << (ErlangParser.T__43 - 42)) | (1 << (ErlangParser.TokAtom - 42)) | (1 << (ErlangParser.TokVar - 42)) | (1 << (ErlangParser.TokInteger - 42)) | (1 << (ErlangParser.TokChar - 42)))) !== 0)) {
	            this.state = 510;
	            this.topTypes();
	        }

	        this.state = 513;
	        this.match(ErlangParser.T__3);
	        this.state = 514;
	        this.match(ErlangParser.T__18);
	        this.state = 515;
	        this.topType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapPairTypes() {
	    let localctx = new MapPairTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ErlangParser.RULE_mapPairTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.mapPairType();
	        this.state = 522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 518;
	            this.match(ErlangParser.T__5);
	            this.state = 519;
	            this.mapPairType();
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapPairType() {
	    let localctx = new MapPairTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ErlangParser.RULE_mapPairType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this.topType();
	        this.state = 526;
	        _la = this._input.LA(1);
	        if(!(_la===ErlangParser.T__19 || _la===ErlangParser.T__20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 527;
	        this.topType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypes() {
	    let localctx = new FieldTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ErlangParser.RULE_fieldTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.fieldType();
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 530;
	            this.match(ErlangParser.T__5);
	            this.state = 531;
	            this.fieldType();
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ErlangParser.RULE_fieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this.tokAtom();
	        this.state = 538;
	        this.match(ErlangParser.T__6);
	        this.state = 539;
	        this.topType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryType() {
	    let localctx = new BinaryTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ErlangParser.RULE_binaryType);
	    try {
	        this.state = 557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 541;
	            this.match(ErlangParser.T__21);
	            this.state = 542;
	            this.match(ErlangParser.T__22);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 543;
	            this.match(ErlangParser.T__21);
	            this.state = 544;
	            this.binBaseType();
	            this.state = 545;
	            this.match(ErlangParser.T__22);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 547;
	            this.match(ErlangParser.T__21);
	            this.state = 548;
	            this.binUnitType();
	            this.state = 549;
	            this.match(ErlangParser.T__22);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 551;
	            this.match(ErlangParser.T__21);
	            this.state = 552;
	            this.binBaseType();
	            this.state = 553;
	            this.match(ErlangParser.T__5);
	            this.state = 554;
	            this.binUnitType();
	            this.state = 555;
	            this.match(ErlangParser.T__22);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binBaseType() {
	    let localctx = new BinBaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ErlangParser.RULE_binBaseType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.tokVar();
	        this.state = 560;
	        this.match(ErlangParser.T__4);
	        this.state = 561;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binUnitType() {
	    let localctx = new BinUnitTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ErlangParser.RULE_binUnitType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.tokVar();
	        this.state = 564;
	        this.match(ErlangParser.T__4);
	        this.state = 565;
	        this.tokVar();
	        this.state = 566;
	        this.match(ErlangParser.T__23);
	        this.state = 567;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attrVal() {
	    let localctx = new AttrValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ErlangParser.RULE_attrVal);
	    try {
	        this.state = 584;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 569;
	            this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 570;
	            this.match(ErlangParser.T__2);
	            this.state = 571;
	            this.expr();
	            this.state = 572;
	            this.match(ErlangParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 574;
	            this.expr();
	            this.state = 575;
	            this.match(ErlangParser.T__5);
	            this.state = 576;
	            this.exprs();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 578;
	            this.match(ErlangParser.T__2);
	            this.state = 579;
	            this.expr();
	            this.state = 580;
	            this.match(ErlangParser.T__5);
	            this.state = 581;
	            this.exprs();
	            this.state = 582;
	            this.match(ErlangParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ErlangParser.RULE_function_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.functionClause();
	        this.state = 591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 587;
	            this.match(ErlangParser.T__9);
	            this.state = 588;
	            this.functionClause();
	            this.state = 593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionClause() {
	    let localctx = new FunctionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ErlangParser.RULE_functionClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 594;
	        this.tokAtom();
	        this.state = 595;
	        this.clauseArgs();
	        this.state = 596;
	        this.clauseGuard();
	        this.state = 597;
	        this.clauseBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clauseArgs() {
	    let localctx = new ClauseArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ErlangParser.RULE_clauseArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.patArgumentList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clauseGuard() {
	    let localctx = new ClauseGuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ErlangParser.RULE_clauseGuard);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__10) {
	            this.state = 601;
	            this.match(ErlangParser.T__10);
	            this.state = 602;
	            this.guard_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clauseBody() {
	    let localctx = new ClauseBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ErlangParser.RULE_clauseBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.match(ErlangParser.T__18);
	        this.state = 606;
	        this.exprs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ErlangParser.RULE_expr);
	    try {
	        this.state = 611;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 608;
	            this.match(ErlangParser.T__24);
	            this.state = 609;
	            this.expr();
	            break;
	        case ErlangParser.T__1:
	        case ErlangParser.T__2:
	        case ErlangParser.T__7:
	        case ErlangParser.T__13:
	        case ErlangParser.T__16:
	        case ErlangParser.T__17:
	        case ErlangParser.T__21:
	        case ErlangParser.T__29:
	        case ErlangParser.T__35:
	        case ErlangParser.T__36:
	        case ErlangParser.T__38:
	        case ErlangParser.T__40:
	        case ErlangParser.T__41:
	        case ErlangParser.T__42:
	        case ErlangParser.T__43:
	        case ErlangParser.TokAtom:
	        case ErlangParser.TokVar:
	        case ErlangParser.TokFloat:
	        case ErlangParser.TokInteger:
	        case ErlangParser.TokChar:
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 610;
	            this.expr100();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr100() {
	    let localctx = new Expr100Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ErlangParser.RULE_expr100);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.expr150();
	        this.state = 618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__25 || _la===ErlangParser.T__26) {
	            this.state = 614;
	            _la = this._input.LA(1);
	            if(!(_la===ErlangParser.T__25 || _la===ErlangParser.T__26)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 615;
	            this.expr150();
	            this.state = 620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr150() {
	    let localctx = new Expr150Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ErlangParser.RULE_expr150);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.expr160();
	        this.state = 626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__27) {
	            this.state = 622;
	            this.match(ErlangParser.T__27);
	            this.state = 623;
	            this.expr160();
	            this.state = 628;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr160() {
	    let localctx = new Expr160Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ErlangParser.RULE_expr160);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.expr200();
	        this.state = 634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__28) {
	            this.state = 630;
	            this.match(ErlangParser.T__28);
	            this.state = 631;
	            this.expr200();
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr200() {
	    let localctx = new Expr200Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ErlangParser.RULE_expr200);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.expr300();
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) !== 0)) {
	            this.state = 638;
	            this.compOp();
	            this.state = 639;
	            this.expr300();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr300() {
	    let localctx = new Expr300Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ErlangParser.RULE_expr300);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.expr400();
	        this.state = 649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__54 || _la===ErlangParser.T__55) {
	            this.state = 644;
	            this.listOp();
	            this.state = 645;
	            this.expr400();
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr400() {
	    let localctx = new Expr400Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ErlangParser.RULE_expr400);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.expr500();
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__1 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__48 - 42)) | (1 << (ErlangParser.T__49 - 42)) | (1 << (ErlangParser.T__50 - 42)) | (1 << (ErlangParser.T__51 - 42)) | (1 << (ErlangParser.T__52 - 42)) | (1 << (ErlangParser.T__53 - 42)))) !== 0)) {
	            this.state = 653;
	            this.addOp();
	            this.state = 654;
	            this.expr500();
	            this.state = 660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr500() {
	    let localctx = new Expr500Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ErlangParser.RULE_expr500);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.expr600();
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ErlangParser.T__23 - 24)) | (1 << (ErlangParser.T__31 - 24)) | (1 << (ErlangParser.T__44 - 24)) | (1 << (ErlangParser.T__45 - 24)) | (1 << (ErlangParser.T__46 - 24)) | (1 << (ErlangParser.T__47 - 24)))) !== 0)) {
	            this.state = 662;
	            this.multOp();
	            this.state = 663;
	            this.expr600();
	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr600() {
	    let localctx = new Expr600Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ErlangParser.RULE_expr600);
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__1:
	        case ErlangParser.T__41:
	        case ErlangParser.T__42:
	        case ErlangParser.T__43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.prefixOp();
	            this.state = 671;
	            this.expr600();
	            break;
	        case ErlangParser.T__2:
	        case ErlangParser.T__7:
	        case ErlangParser.T__13:
	        case ErlangParser.T__16:
	        case ErlangParser.T__17:
	        case ErlangParser.T__21:
	        case ErlangParser.T__29:
	        case ErlangParser.T__35:
	        case ErlangParser.T__36:
	        case ErlangParser.T__38:
	        case ErlangParser.T__40:
	        case ErlangParser.TokAtom:
	        case ErlangParser.TokVar:
	        case ErlangParser.TokFloat:
	        case ErlangParser.TokInteger:
	        case ErlangParser.TokChar:
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 673;
	            this.expr650();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr650() {
	    let localctx = new Expr650Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ErlangParser.RULE_expr650);
	    try {
	        this.state = 678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 676;
	            this.mapExpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 677;
	            this.expr700();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr700() {
	    let localctx = new Expr700Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ErlangParser.RULE_expr700);
	    try {
	        this.state = 683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.functionCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 681;
	            this.recordExpr(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 682;
	            this.expr800();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr800() {
	    let localctx = new Expr800Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ErlangParser.RULE_expr800);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.exprMax();
	        this.state = 688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__4) {
	            this.state = 686;
	            this.match(ErlangParser.T__4);
	            this.state = 687;
	            this.exprMax();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprMax() {
	    let localctx = new ExprMaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ErlangParser.RULE_exprMax);
	    try {
	        this.state = 710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 690;
	            this.tokVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 691;
	            this.atomic();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 692;
	            this.list_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 693;
	            this.binary();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 694;
	            this.listComprehension();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 695;
	            this.binaryComprehension();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 696;
	            this.tuple_();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 697;
	            this.match(ErlangParser.T__2);
	            this.state = 698;
	            this.expr();
	            this.state = 699;
	            this.match(ErlangParser.T__3);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 701;
	            this.match(ErlangParser.T__29);
	            this.state = 702;
	            this.exprs();
	            this.state = 703;
	            this.match(ErlangParser.T__30);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 705;
	            this.ifExpr();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 706;
	            this.caseExpr();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 707;
	            this.receiveExpr();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 708;
	            this.funExpr();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 709;
	            this.tryExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr() {
	    let localctx = new PatExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ErlangParser.RULE_patExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.patExpr200();
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__25) {
	            this.state = 713;
	            this.match(ErlangParser.T__25);
	            this.state = 714;
	            this.patExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr200() {
	    let localctx = new PatExpr200Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ErlangParser.RULE_patExpr200);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.patExpr300();
	        this.state = 721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) !== 0)) {
	            this.state = 718;
	            this.compOp();
	            this.state = 719;
	            this.patExpr300();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr300() {
	    let localctx = new PatExpr300Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ErlangParser.RULE_patExpr300);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this.patExpr400(0);
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__54 || _la===ErlangParser.T__55) {
	            this.state = 724;
	            this.listOp();
	            this.state = 725;
	            this.patExpr300();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	patExpr400(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PatExpr400Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 116;
	    this.enterRecursionRule(localctx, 116, ErlangParser.RULE_patExpr400, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.patExpr500(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 738;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PatExpr400Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_patExpr400);
	                this.state = 732;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 733;
	                this.addOp();
	                this.state = 734;
	                this.patExpr500(0); 
	            }
	            this.state = 740;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	patExpr500(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PatExpr500Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 118;
	    this.enterRecursionRule(localctx, 118, ErlangParser.RULE_patExpr500, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.patExpr600();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 750;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PatExpr500Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_patExpr500);
	                this.state = 744;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 745;
	                this.multOp();
	                this.state = 746;
	                this.patExpr600(); 
	            }
	            this.state = 752;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	patExpr600() {
	    let localctx = new PatExpr600Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ErlangParser.RULE_patExpr600);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__1:
	        case ErlangParser.T__41:
	        case ErlangParser.T__42:
	        case ErlangParser.T__43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 753;
	            this.prefixOp();
	            this.state = 754;
	            this.patExpr600();
	            break;
	        case ErlangParser.T__2:
	        case ErlangParser.T__7:
	        case ErlangParser.T__13:
	        case ErlangParser.T__16:
	        case ErlangParser.T__21:
	        case ErlangParser.TokAtom:
	        case ErlangParser.TokVar:
	        case ErlangParser.TokFloat:
	        case ErlangParser.TokInteger:
	        case ErlangParser.TokChar:
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 756;
	            this.patExpr650();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr650() {
	    let localctx = new PatExpr650Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ErlangParser.RULE_patExpr650);
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 759;
	            this.mapPatExpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 760;
	            this.patExpr700();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr700() {
	    let localctx = new PatExpr700Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ErlangParser.RULE_patExpr700);
	    try {
	        this.state = 765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 763;
	            this.recordPatExpr();
	            break;
	        case ErlangParser.T__2:
	        case ErlangParser.T__7:
	        case ErlangParser.T__13:
	        case ErlangParser.T__21:
	        case ErlangParser.TokAtom:
	        case ErlangParser.TokVar:
	        case ErlangParser.TokFloat:
	        case ErlangParser.TokInteger:
	        case ErlangParser.TokChar:
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 764;
	            this.patExpr800();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExpr800() {
	    let localctx = new PatExpr800Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ErlangParser.RULE_patExpr800);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.patExprMax();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExprMax() {
	    let localctx = new PatExprMaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ErlangParser.RULE_patExprMax);
	    try {
	        this.state = 778;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokVar:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 769;
	            this.tokVar();
	            break;
	        case ErlangParser.TokAtom:
	        case ErlangParser.TokFloat:
	        case ErlangParser.TokInteger:
	        case ErlangParser.TokChar:
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 770;
	            this.atomic();
	            break;
	        case ErlangParser.T__13:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 771;
	            this.list_();
	            break;
	        case ErlangParser.T__21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 772;
	            this.binary();
	            break;
	        case ErlangParser.T__7:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 773;
	            this.tuple_();
	            break;
	        case ErlangParser.T__2:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 774;
	            this.match(ErlangParser.T__2);
	            this.state = 775;
	            this.patExpr();
	            this.state = 776;
	            this.match(ErlangParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	mapPatExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MapPatExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, ErlangParser.RULE_mapPatExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__21))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) !== 0)) {
	            this.state = 781;
	            this.patExprMax();
	        }

	        this.state = 784;
	        this.match(ErlangParser.T__16);
	        this.state = 785;
	        this.mapTuple();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 792;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MapPatExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_mapPatExpr);
	                this.state = 787;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 788;
	                this.match(ErlangParser.T__16);
	                this.state = 789;
	                this.mapTuple(); 
	            }
	            this.state = 794;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	recordPatExpr() {
	    let localctx = new RecordPatExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ErlangParser.RULE_recordPatExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(ErlangParser.T__16);
	        this.state = 796;
	        this.tokAtom();
	        this.state = 800;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__0:
	            this.state = 797;
	            this.match(ErlangParser.T__0);
	            this.state = 798;
	            this.tokAtom();
	            break;
	        case ErlangParser.T__7:
	            this.state = 799;
	            this.recordTuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_() {
	    let localctx = new List_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ErlangParser.RULE_list_);
	    try {
	        this.state = 808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 802;
	            this.match(ErlangParser.T__13);
	            this.state = 803;
	            this.match(ErlangParser.T__14);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 804;
	            this.match(ErlangParser.T__13);
	            this.state = 805;
	            this.expr();
	            this.state = 806;
	            this.tail();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tail() {
	    let localctx = new TailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ErlangParser.RULE_tail);
	    try {
	        this.state = 819;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 810;
	            this.match(ErlangParser.T__14);
	            break;
	        case ErlangParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 811;
	            this.match(ErlangParser.T__11);
	            this.state = 812;
	            this.expr();
	            this.state = 813;
	            this.match(ErlangParser.T__14);
	            break;
	        case ErlangParser.T__5:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 815;
	            this.match(ErlangParser.T__5);
	            this.state = 816;
	            this.expr();
	            this.state = 817;
	            this.tail();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary() {
	    let localctx = new BinaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ErlangParser.RULE_binary);
	    try {
	        this.state = 827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 821;
	            this.match(ErlangParser.T__21);
	            this.state = 822;
	            this.match(ErlangParser.T__22);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 823;
	            this.match(ErlangParser.T__21);
	            this.state = 824;
	            this.binElements();
	            this.state = 825;
	            this.match(ErlangParser.T__22);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binElements() {
	    let localctx = new BinElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ErlangParser.RULE_binElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 829;
	        this.binElement();
	        this.state = 834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 830;
	            this.match(ErlangParser.T__5);
	            this.state = 831;
	            this.binElement();
	            this.state = 836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binElement() {
	    let localctx = new BinElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ErlangParser.RULE_binElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.bitExpr();
	        this.state = 838;
	        this.optBitSizeExpr();
	        this.state = 839;
	        this.optBitTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitExpr() {
	    let localctx = new BitExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ErlangParser.RULE_bitExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__1 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__42 - 42)) | (1 << (ErlangParser.T__43 - 42)))) !== 0)) {
	            this.state = 841;
	            this.prefixOp();
	        }

	        this.state = 844;
	        this.exprMax();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optBitSizeExpr() {
	    let localctx = new OptBitSizeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ErlangParser.RULE_optBitSizeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__4) {
	            this.state = 846;
	            this.match(ErlangParser.T__4);
	            this.state = 847;
	            this.bitSizeExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optBitTypeList() {
	    let localctx = new OptBitTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ErlangParser.RULE_optBitTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__31) {
	            this.state = 850;
	            this.match(ErlangParser.T__31);
	            this.state = 851;
	            this.bitTypeList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitTypeList() {
	    let localctx = new BitTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ErlangParser.RULE_bitTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.bitType();
	        this.state = 859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__1) {
	            this.state = 855;
	            this.match(ErlangParser.T__1);
	            this.state = 856;
	            this.bitType();
	            this.state = 861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitType() {
	    let localctx = new BitTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ErlangParser.RULE_bitType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.tokAtom();
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__4) {
	            this.state = 863;
	            this.match(ErlangParser.T__4);
	            this.state = 864;
	            this.tokInteger();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitSizeExpr() {
	    let localctx = new BitSizeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ErlangParser.RULE_bitSizeExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.exprMax();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listComprehension() {
	    let localctx = new ListComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ErlangParser.RULE_listComprehension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 869;
	        this.match(ErlangParser.T__13);
	        this.state = 870;
	        this.expr();
	        this.state = 871;
	        this.match(ErlangParser.T__32);
	        this.state = 872;
	        this.lcExprs();
	        this.state = 873;
	        this.match(ErlangParser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryComprehension() {
	    let localctx = new BinaryComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, ErlangParser.RULE_binaryComprehension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this.match(ErlangParser.T__21);
	        this.state = 876;
	        this.exprMax();
	        this.state = 877;
	        this.match(ErlangParser.T__32);
	        this.state = 878;
	        this.lcExprs();
	        this.state = 879;
	        this.match(ErlangParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lcExprs() {
	    let localctx = new LcExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, ErlangParser.RULE_lcExprs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.lcExpr();
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 882;
	            this.match(ErlangParser.T__5);
	            this.state = 883;
	            this.lcExpr();
	            this.state = 888;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lcExpr() {
	    let localctx = new LcExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, ErlangParser.RULE_lcExpr);
	    try {
	        this.state = 898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 889;
	            this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 890;
	            this.expr();
	            this.state = 891;
	            this.match(ErlangParser.T__33);
	            this.state = 892;
	            this.expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 894;
	            this.binary();
	            this.state = 895;
	            this.match(ErlangParser.T__34);
	            this.state = 896;
	            this.expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_() {
	    let localctx = new Tuple_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, ErlangParser.RULE_tuple_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this.match(ErlangParser.T__7);
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ErlangParser.T__35 - 36)) | (1 << (ErlangParser.T__36 - 36)) | (1 << (ErlangParser.T__38 - 36)) | (1 << (ErlangParser.T__40 - 36)) | (1 << (ErlangParser.T__41 - 36)) | (1 << (ErlangParser.T__42 - 36)) | (1 << (ErlangParser.T__43 - 36)) | (1 << (ErlangParser.TokAtom - 36)) | (1 << (ErlangParser.TokVar - 36)) | (1 << (ErlangParser.TokFloat - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ErlangParser.TokInteger - 68)) | (1 << (ErlangParser.TokChar - 68)) | (1 << (ErlangParser.TokString - 68)))) !== 0)) {
	            this.state = 901;
	            this.exprs();
	        }

	        this.state = 904;
	        this.match(ErlangParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	mapExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MapExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 166;
	    this.enterRecursionRule(localctx, 166, ErlangParser.RULE_mapExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__29))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ErlangParser.T__35 - 36)) | (1 << (ErlangParser.T__36 - 36)) | (1 << (ErlangParser.T__38 - 36)) | (1 << (ErlangParser.T__40 - 36)) | (1 << (ErlangParser.TokAtom - 36)) | (1 << (ErlangParser.TokVar - 36)) | (1 << (ErlangParser.TokFloat - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ErlangParser.TokInteger - 68)) | (1 << (ErlangParser.TokChar - 68)) | (1 << (ErlangParser.TokString - 68)))) !== 0)) {
	            this.state = 907;
	            this.exprMax();
	        }

	        this.state = 910;
	        this.match(ErlangParser.T__16);
	        this.state = 911;
	        this.mapTuple();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 918;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MapExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_mapExpr);
	                this.state = 913;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 914;
	                this.match(ErlangParser.T__16);
	                this.state = 915;
	                this.mapTuple(); 
	            }
	            this.state = 920;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	mapTuple() {
	    let localctx = new MapTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, ErlangParser.RULE_mapTuple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 921;
	        this.match(ErlangParser.T__7);
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ErlangParser.T__35 - 36)) | (1 << (ErlangParser.T__36 - 36)) | (1 << (ErlangParser.T__38 - 36)) | (1 << (ErlangParser.T__40 - 36)) | (1 << (ErlangParser.T__41 - 36)) | (1 << (ErlangParser.T__42 - 36)) | (1 << (ErlangParser.T__43 - 36)) | (1 << (ErlangParser.TokAtom - 36)) | (1 << (ErlangParser.TokVar - 36)) | (1 << (ErlangParser.TokFloat - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ErlangParser.TokInteger - 68)) | (1 << (ErlangParser.TokChar - 68)) | (1 << (ErlangParser.TokString - 68)))) !== 0)) {
	            this.state = 922;
	            this.mapField();
	            this.state = 927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ErlangParser.T__5) {
	                this.state = 923;
	                this.match(ErlangParser.T__5);
	                this.state = 924;
	                this.mapField();
	                this.state = 929;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 932;
	        this.match(ErlangParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapField() {
	    let localctx = new MapFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, ErlangParser.RULE_mapField);
	    try {
	        this.state = 936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 934;
	            this.mapFieldAssoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 935;
	            this.mapFieldExact();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapFieldAssoc() {
	    let localctx = new MapFieldAssocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, ErlangParser.RULE_mapFieldAssoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this.mapKey();
	        this.state = 939;
	        this.match(ErlangParser.T__19);
	        this.state = 940;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapFieldExact() {
	    let localctx = new MapFieldExactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, ErlangParser.RULE_mapFieldExact);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 942;
	        this.mapKey();
	        this.state = 943;
	        this.match(ErlangParser.T__20);
	        this.state = 944;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapKey() {
	    let localctx = new MapKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, ErlangParser.RULE_mapKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	recordExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RecordExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 178;
	    this.enterRecursionRule(localctx, 178, ErlangParser.RULE_recordExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__29))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ErlangParser.T__35 - 36)) | (1 << (ErlangParser.T__36 - 36)) | (1 << (ErlangParser.T__38 - 36)) | (1 << (ErlangParser.T__40 - 36)) | (1 << (ErlangParser.TokAtom - 36)) | (1 << (ErlangParser.TokVar - 36)) | (1 << (ErlangParser.TokFloat - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ErlangParser.TokInteger - 68)) | (1 << (ErlangParser.TokChar - 68)) | (1 << (ErlangParser.TokString - 68)))) !== 0)) {
	            this.state = 949;
	            this.exprMax();
	        }

	        this.state = 952;
	        this.match(ErlangParser.T__16);
	        this.state = 953;
	        this.tokAtom();
	        this.state = 957;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__0:
	            this.state = 954;
	            this.match(ErlangParser.T__0);
	            this.state = 955;
	            this.tokAtom();
	            break;
	        case ErlangParser.T__7:
	            this.state = 956;
	            this.recordTuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 969;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new RecordExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_recordExpr);
	                this.state = 959;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 960;
	                this.match(ErlangParser.T__16);
	                this.state = 961;
	                this.tokAtom();
	                this.state = 965;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case ErlangParser.T__0:
	                    this.state = 962;
	                    this.match(ErlangParser.T__0);
	                    this.state = 963;
	                    this.tokAtom();
	                    break;
	                case ErlangParser.T__7:
	                    this.state = 964;
	                    this.recordTuple();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 971;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	recordTuple() {
	    let localctx = new RecordTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, ErlangParser.RULE_recordTuple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(ErlangParser.T__7);
	        this.state = 974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.TokAtom || _la===ErlangParser.TokVar) {
	            this.state = 973;
	            this.recordFields();
	        }

	        this.state = 976;
	        this.match(ErlangParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordFields() {
	    let localctx = new RecordFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, ErlangParser.RULE_recordFields);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.recordField();
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 979;
	            this.match(ErlangParser.T__5);
	            this.state = 980;
	            this.recordField();
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordField() {
	    let localctx = new RecordFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, ErlangParser.RULE_recordField);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokVar:
	            this.state = 986;
	            this.tokVar();
	            break;
	        case ErlangParser.TokAtom:
	            this.state = 987;
	            this.tokAtom();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 990;
	        this.match(ErlangParser.T__25);
	        this.state = 991;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, ErlangParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.expr800();
	        this.state = 994;
	        this.argumentList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, ErlangParser.RULE_ifExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 996;
	        this.match(ErlangParser.T__35);
	        this.state = 997;
	        this.ifClauses();
	        this.state = 998;
	        this.match(ErlangParser.T__30);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifClauses() {
	    let localctx = new IfClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, ErlangParser.RULE_ifClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.ifClause();
	        this.state = 1005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 1001;
	            this.match(ErlangParser.T__9);
	            this.state = 1002;
	            this.ifClause();
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifClause() {
	    let localctx = new IfClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, ErlangParser.RULE_ifClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        this.guard_();
	        this.state = 1009;
	        this.clauseBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpr() {
	    let localctx = new CaseExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, ErlangParser.RULE_caseExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        this.match(ErlangParser.T__36);
	        this.state = 1012;
	        this.expr();
	        this.state = 1013;
	        this.match(ErlangParser.T__37);
	        this.state = 1014;
	        this.crClauses();
	        this.state = 1015;
	        this.match(ErlangParser.T__30);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crClauses() {
	    let localctx = new CrClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, ErlangParser.RULE_crClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.crClause();
	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 1018;
	            this.match(ErlangParser.T__9);
	            this.state = 1019;
	            this.crClause();
	            this.state = 1024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crClause() {
	    let localctx = new CrClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, ErlangParser.RULE_crClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025;
	        this.expr();
	        this.state = 1026;
	        this.clauseGuard();
	        this.state = 1027;
	        this.clauseBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveExpr() {
	    let localctx = new ReceiveExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, ErlangParser.RULE_receiveExpr);
	    try {
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1029;
	            this.match(ErlangParser.T__38);
	            this.state = 1030;
	            this.crClauses();
	            this.state = 1031;
	            this.match(ErlangParser.T__30);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1033;
	            this.match(ErlangParser.T__38);
	            this.state = 1034;
	            this.match(ErlangParser.T__39);
	            this.state = 1035;
	            this.expr();
	            this.state = 1036;
	            this.clauseBody();
	            this.state = 1037;
	            this.match(ErlangParser.T__30);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1039;
	            this.match(ErlangParser.T__38);
	            this.state = 1040;
	            this.crClauses();
	            this.state = 1041;
	            this.match(ErlangParser.T__39);
	            this.state = 1042;
	            this.expr();
	            this.state = 1043;
	            this.clauseBody();
	            this.state = 1044;
	            this.match(ErlangParser.T__30);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funExpr() {
	    let localctx = new FunExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, ErlangParser.RULE_funExpr);
	    try {
	        this.state = 1064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1048;
	            this.match(ErlangParser.T__17);
	            this.state = 1049;
	            this.tokAtom();
	            this.state = 1050;
	            this.match(ErlangParser.T__31);
	            this.state = 1051;
	            this.tokInteger();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1053;
	            this.match(ErlangParser.T__17);
	            this.state = 1054;
	            this.atomOrVar();
	            this.state = 1055;
	            this.match(ErlangParser.T__4);
	            this.state = 1056;
	            this.atomOrVar();
	            this.state = 1057;
	            this.match(ErlangParser.T__31);
	            this.state = 1058;
	            this.integerOrVar();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1060;
	            this.match(ErlangParser.T__17);
	            this.state = 1061;
	            this.funClauses();
	            this.state = 1062;
	            this.match(ErlangParser.T__30);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomOrVar() {
	    let localctx = new AtomOrVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, ErlangParser.RULE_atomOrVar);
	    try {
	        this.state = 1068;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokAtom:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1066;
	            this.tokAtom();
	            break;
	        case ErlangParser.TokVar:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1067;
	            this.tokVar();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerOrVar() {
	    let localctx = new IntegerOrVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, ErlangParser.RULE_integerOrVar);
	    try {
	        this.state = 1072;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokInteger:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1070;
	            this.tokInteger();
	            break;
	        case ErlangParser.TokVar:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.tokVar();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funClauses() {
	    let localctx = new FunClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, ErlangParser.RULE_funClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074;
	        this.funClause();
	        this.state = 1079;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 1075;
	            this.match(ErlangParser.T__9);
	            this.state = 1076;
	            this.funClause();
	            this.state = 1081;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funClause() {
	    let localctx = new FunClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, ErlangParser.RULE_funClause);
	    try {
	        this.state = 1091;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.T__2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1082;
	            this.patArgumentList();
	            this.state = 1083;
	            this.clauseGuard();
	            this.state = 1084;
	            this.clauseBody();
	            break;
	        case ErlangParser.TokVar:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1086;
	            this.tokVar();
	            this.state = 1087;
	            this.patArgumentList();
	            this.state = 1088;
	            this.clauseGuard();
	            this.state = 1089;
	            this.clauseBody();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryExpr() {
	    let localctx = new TryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, ErlangParser.RULE_tryExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.match(ErlangParser.T__40);
	        this.state = 1094;
	        this.exprs();
	        this.state = 1097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__37) {
	            this.state = 1095;
	            this.match(ErlangParser.T__37);
	            this.state = 1096;
	            this.crClauses();
	        }

	        this.state = 1099;
	        this.tryCatch();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryCatch() {
	    let localctx = new TryCatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, ErlangParser.RULE_tryCatch);
	    try {
	        this.state = 1115;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1101;
	            this.match(ErlangParser.T__24);
	            this.state = 1102;
	            this.tryClauses();
	            this.state = 1103;
	            this.match(ErlangParser.T__30);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1105;
	            this.match(ErlangParser.T__24);
	            this.state = 1106;
	            this.tryClauses();
	            this.state = 1107;
	            this.match(ErlangParser.T__39);
	            this.state = 1108;
	            this.exprs();
	            this.state = 1109;
	            this.match(ErlangParser.T__30);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1111;
	            this.match(ErlangParser.T__39);
	            this.state = 1112;
	            this.exprs();
	            this.state = 1113;
	            this.match(ErlangParser.T__30);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryClauses() {
	    let localctx = new TryClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, ErlangParser.RULE_tryClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.tryClause();
	        this.state = 1122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 1118;
	            this.match(ErlangParser.T__9);
	            this.state = 1119;
	            this.tryClause();
	            this.state = 1124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryClause() {
	    let localctx = new TryClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, ErlangParser.RULE_tryClause);
	    try {
	        this.state = 1139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1125;
	            this.expr();
	            this.state = 1126;
	            this.clauseGuard();
	            this.state = 1127;
	            this.clauseBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	            if(la_===1) {
	                this.state = 1129;
	                this.atomOrVar();
	                this.state = 1130;
	                this.match(ErlangParser.T__4);

	            }
	            this.state = 1134;
	            this.patExpr();
	            this.state = 1135;
	            this.tryOptStackTrace();
	            this.state = 1136;
	            this.clauseGuard();
	            this.state = 1137;
	            this.clauseBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryOptStackTrace() {
	    let localctx = new TryOptStackTraceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, ErlangParser.RULE_tryOptStackTrace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ErlangParser.T__4) {
	            this.state = 1141;
	            this.match(ErlangParser.T__4);
	            this.state = 1142;
	            this.tokVar();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, ErlangParser.RULE_argumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(ErlangParser.T__2);
	        this.state = 1147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ErlangParser.T__35 - 36)) | (1 << (ErlangParser.T__36 - 36)) | (1 << (ErlangParser.T__38 - 36)) | (1 << (ErlangParser.T__40 - 36)) | (1 << (ErlangParser.T__41 - 36)) | (1 << (ErlangParser.T__42 - 36)) | (1 << (ErlangParser.T__43 - 36)) | (1 << (ErlangParser.TokAtom - 36)) | (1 << (ErlangParser.TokVar - 36)) | (1 << (ErlangParser.TokFloat - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ErlangParser.TokInteger - 68)) | (1 << (ErlangParser.TokChar - 68)) | (1 << (ErlangParser.TokString - 68)))) !== 0)) {
	            this.state = 1146;
	            this.exprs();
	        }

	        this.state = 1149;
	        this.match(ErlangParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patArgumentList() {
	    let localctx = new PatArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, ErlangParser.RULE_patArgumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this.match(ErlangParser.T__2);
	        this.state = 1153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__21))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__42 - 42)) | (1 << (ErlangParser.T__43 - 42)) | (1 << (ErlangParser.TokAtom - 42)) | (1 << (ErlangParser.TokVar - 42)) | (1 << (ErlangParser.TokFloat - 42)) | (1 << (ErlangParser.TokInteger - 42)) | (1 << (ErlangParser.TokChar - 42)) | (1 << (ErlangParser.TokString - 42)))) !== 0)) {
	            this.state = 1152;
	            this.patExprs();
	        }

	        this.state = 1155;
	        this.match(ErlangParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprs() {
	    let localctx = new ExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, ErlangParser.RULE_exprs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.expr();
	        this.state = 1162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 1158;
	            this.match(ErlangParser.T__5);
	            this.state = 1159;
	            this.expr();
	            this.state = 1164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patExprs() {
	    let localctx = new PatExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, ErlangParser.RULE_patExprs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.patExpr();
	        this.state = 1170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__5) {
	            this.state = 1166;
	            this.match(ErlangParser.T__5);
	            this.state = 1167;
	            this.patExpr();
	            this.state = 1172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard_() {
	    let localctx = new Guard_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, ErlangParser.RULE_guard_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173;
	        this.exprs();
	        this.state = 1178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ErlangParser.T__9) {
	            this.state = 1174;
	            this.match(ErlangParser.T__9);
	            this.state = 1175;
	            this.exprs();
	            this.state = 1180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic() {
	    let localctx = new AtomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, ErlangParser.RULE_atomic);
	    try {
	        this.state = 1190;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ErlangParser.TokChar:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1181;
	            this.tokChar();
	            break;
	        case ErlangParser.TokInteger:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1182;
	            this.tokInteger();
	            break;
	        case ErlangParser.TokFloat:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1183;
	            this.tokFloat();
	            break;
	        case ErlangParser.TokAtom:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1184;
	            this.tokAtom();
	            break;
	        case ErlangParser.TokString:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1186; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1185;
	            		this.tokString();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1188; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,95, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixOp() {
	    let localctx = new PrefixOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, ErlangParser.RULE_prefixOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        _la = this._input.LA(1);
	        if(!(_la===ErlangParser.T__1 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__42 - 42)) | (1 << (ErlangParser.T__43 - 42)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multOp() {
	    let localctx = new MultOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, ErlangParser.RULE_multOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194;
	        _la = this._input.LA(1);
	        if(!(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ErlangParser.T__23 - 24)) | (1 << (ErlangParser.T__31 - 24)) | (1 << (ErlangParser.T__44 - 24)) | (1 << (ErlangParser.T__45 - 24)) | (1 << (ErlangParser.T__46 - 24)) | (1 << (ErlangParser.T__47 - 24)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addOp() {
	    let localctx = new AddOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, ErlangParser.RULE_addOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1196;
	        _la = this._input.LA(1);
	        if(!(_la===ErlangParser.T__1 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ErlangParser.T__41 - 42)) | (1 << (ErlangParser.T__48 - 42)) | (1 << (ErlangParser.T__49 - 42)) | (1 << (ErlangParser.T__50 - 42)) | (1 << (ErlangParser.T__51 - 42)) | (1 << (ErlangParser.T__52 - 42)) | (1 << (ErlangParser.T__53 - 42)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listOp() {
	    let localctx = new ListOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, ErlangParser.RULE_listOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1198;
	        _la = this._input.LA(1);
	        if(!(_la===ErlangParser.T__54 || _la===ErlangParser.T__55)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOp() {
	    let localctx = new CompOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, ErlangParser.RULE_compOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1200;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ErlangParser.EOF = antlr4.Token.EOF;
ErlangParser.T__0 = 1;
ErlangParser.T__1 = 2;
ErlangParser.T__2 = 3;
ErlangParser.T__3 = 4;
ErlangParser.T__4 = 5;
ErlangParser.T__5 = 6;
ErlangParser.T__6 = 7;
ErlangParser.T__7 = 8;
ErlangParser.T__8 = 9;
ErlangParser.T__9 = 10;
ErlangParser.T__10 = 11;
ErlangParser.T__11 = 12;
ErlangParser.T__12 = 13;
ErlangParser.T__13 = 14;
ErlangParser.T__14 = 15;
ErlangParser.T__15 = 16;
ErlangParser.T__16 = 17;
ErlangParser.T__17 = 18;
ErlangParser.T__18 = 19;
ErlangParser.T__19 = 20;
ErlangParser.T__20 = 21;
ErlangParser.T__21 = 22;
ErlangParser.T__22 = 23;
ErlangParser.T__23 = 24;
ErlangParser.T__24 = 25;
ErlangParser.T__25 = 26;
ErlangParser.T__26 = 27;
ErlangParser.T__27 = 28;
ErlangParser.T__28 = 29;
ErlangParser.T__29 = 30;
ErlangParser.T__30 = 31;
ErlangParser.T__31 = 32;
ErlangParser.T__32 = 33;
ErlangParser.T__33 = 34;
ErlangParser.T__34 = 35;
ErlangParser.T__35 = 36;
ErlangParser.T__36 = 37;
ErlangParser.T__37 = 38;
ErlangParser.T__38 = 39;
ErlangParser.T__39 = 40;
ErlangParser.T__40 = 41;
ErlangParser.T__41 = 42;
ErlangParser.T__42 = 43;
ErlangParser.T__43 = 44;
ErlangParser.T__44 = 45;
ErlangParser.T__45 = 46;
ErlangParser.T__46 = 47;
ErlangParser.T__47 = 48;
ErlangParser.T__48 = 49;
ErlangParser.T__49 = 50;
ErlangParser.T__50 = 51;
ErlangParser.T__51 = 52;
ErlangParser.T__52 = 53;
ErlangParser.T__53 = 54;
ErlangParser.T__54 = 55;
ErlangParser.T__55 = 56;
ErlangParser.T__56 = 57;
ErlangParser.T__57 = 58;
ErlangParser.T__58 = 59;
ErlangParser.T__59 = 60;
ErlangParser.T__60 = 61;
ErlangParser.T__61 = 62;
ErlangParser.T__62 = 63;
ErlangParser.T__63 = 64;
ErlangParser.TokAtom = 65;
ErlangParser.TokVar = 66;
ErlangParser.TokFloat = 67;
ErlangParser.TokInteger = 68;
ErlangParser.TokChar = 69;
ErlangParser.TokString = 70;
ErlangParser.AttrName = 71;
ErlangParser.Comment = 72;
ErlangParser.WS = 73;

ErlangParser.RULE_forms = 0;
ErlangParser.RULE_form = 1;
ErlangParser.RULE_tokAtom = 2;
ErlangParser.RULE_tokVar = 3;
ErlangParser.RULE_tokFloat = 4;
ErlangParser.RULE_tokInteger = 5;
ErlangParser.RULE_tokChar = 6;
ErlangParser.RULE_tokString = 7;
ErlangParser.RULE_attribute = 8;
ErlangParser.RULE_typeSpec = 9;
ErlangParser.RULE_specFun = 10;
ErlangParser.RULE_typedAttrVal = 11;
ErlangParser.RULE_typedRecordFields = 12;
ErlangParser.RULE_typedExprs = 13;
ErlangParser.RULE_typedExpr = 14;
ErlangParser.RULE_typeSigs = 15;
ErlangParser.RULE_typeSig = 16;
ErlangParser.RULE_typeGuards = 17;
ErlangParser.RULE_typeGuard = 18;
ErlangParser.RULE_topTypes = 19;
ErlangParser.RULE_topType = 20;
ErlangParser.RULE_topType100 = 21;
ErlangParser.RULE_type200 = 22;
ErlangParser.RULE_type300 = 23;
ErlangParser.RULE_type400 = 24;
ErlangParser.RULE_type500 = 25;
ErlangParser.RULE_type_ = 26;
ErlangParser.RULE_funType100 = 27;
ErlangParser.RULE_funType = 28;
ErlangParser.RULE_mapPairTypes = 29;
ErlangParser.RULE_mapPairType = 30;
ErlangParser.RULE_fieldTypes = 31;
ErlangParser.RULE_fieldType = 32;
ErlangParser.RULE_binaryType = 33;
ErlangParser.RULE_binBaseType = 34;
ErlangParser.RULE_binUnitType = 35;
ErlangParser.RULE_attrVal = 36;
ErlangParser.RULE_function_ = 37;
ErlangParser.RULE_functionClause = 38;
ErlangParser.RULE_clauseArgs = 39;
ErlangParser.RULE_clauseGuard = 40;
ErlangParser.RULE_clauseBody = 41;
ErlangParser.RULE_expr = 42;
ErlangParser.RULE_expr100 = 43;
ErlangParser.RULE_expr150 = 44;
ErlangParser.RULE_expr160 = 45;
ErlangParser.RULE_expr200 = 46;
ErlangParser.RULE_expr300 = 47;
ErlangParser.RULE_expr400 = 48;
ErlangParser.RULE_expr500 = 49;
ErlangParser.RULE_expr600 = 50;
ErlangParser.RULE_expr650 = 51;
ErlangParser.RULE_expr700 = 52;
ErlangParser.RULE_expr800 = 53;
ErlangParser.RULE_exprMax = 54;
ErlangParser.RULE_patExpr = 55;
ErlangParser.RULE_patExpr200 = 56;
ErlangParser.RULE_patExpr300 = 57;
ErlangParser.RULE_patExpr400 = 58;
ErlangParser.RULE_patExpr500 = 59;
ErlangParser.RULE_patExpr600 = 60;
ErlangParser.RULE_patExpr650 = 61;
ErlangParser.RULE_patExpr700 = 62;
ErlangParser.RULE_patExpr800 = 63;
ErlangParser.RULE_patExprMax = 64;
ErlangParser.RULE_mapPatExpr = 65;
ErlangParser.RULE_recordPatExpr = 66;
ErlangParser.RULE_list_ = 67;
ErlangParser.RULE_tail = 68;
ErlangParser.RULE_binary = 69;
ErlangParser.RULE_binElements = 70;
ErlangParser.RULE_binElement = 71;
ErlangParser.RULE_bitExpr = 72;
ErlangParser.RULE_optBitSizeExpr = 73;
ErlangParser.RULE_optBitTypeList = 74;
ErlangParser.RULE_bitTypeList = 75;
ErlangParser.RULE_bitType = 76;
ErlangParser.RULE_bitSizeExpr = 77;
ErlangParser.RULE_listComprehension = 78;
ErlangParser.RULE_binaryComprehension = 79;
ErlangParser.RULE_lcExprs = 80;
ErlangParser.RULE_lcExpr = 81;
ErlangParser.RULE_tuple_ = 82;
ErlangParser.RULE_mapExpr = 83;
ErlangParser.RULE_mapTuple = 84;
ErlangParser.RULE_mapField = 85;
ErlangParser.RULE_mapFieldAssoc = 86;
ErlangParser.RULE_mapFieldExact = 87;
ErlangParser.RULE_mapKey = 88;
ErlangParser.RULE_recordExpr = 89;
ErlangParser.RULE_recordTuple = 90;
ErlangParser.RULE_recordFields = 91;
ErlangParser.RULE_recordField = 92;
ErlangParser.RULE_functionCall = 93;
ErlangParser.RULE_ifExpr = 94;
ErlangParser.RULE_ifClauses = 95;
ErlangParser.RULE_ifClause = 96;
ErlangParser.RULE_caseExpr = 97;
ErlangParser.RULE_crClauses = 98;
ErlangParser.RULE_crClause = 99;
ErlangParser.RULE_receiveExpr = 100;
ErlangParser.RULE_funExpr = 101;
ErlangParser.RULE_atomOrVar = 102;
ErlangParser.RULE_integerOrVar = 103;
ErlangParser.RULE_funClauses = 104;
ErlangParser.RULE_funClause = 105;
ErlangParser.RULE_tryExpr = 106;
ErlangParser.RULE_tryCatch = 107;
ErlangParser.RULE_tryClauses = 108;
ErlangParser.RULE_tryClause = 109;
ErlangParser.RULE_tryOptStackTrace = 110;
ErlangParser.RULE_argumentList = 111;
ErlangParser.RULE_patArgumentList = 112;
ErlangParser.RULE_exprs = 113;
ErlangParser.RULE_patExprs = 114;
ErlangParser.RULE_guard_ = 115;
ErlangParser.RULE_atomic = 116;
ErlangParser.RULE_prefixOp = 117;
ErlangParser.RULE_multOp = 118;
ErlangParser.RULE_addOp = 119;
ErlangParser.RULE_listOp = 120;
ErlangParser.RULE_compOp = 121;

class FormsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_forms;
    }

	EOF() {
	    return this.getToken(ErlangParser.EOF, 0);
	};

	form = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormContext);
	    } else {
	        return this.getTypedRuleContext(FormContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterForms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitForms(this);
		}
	}


}



class FormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_form;
    }

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitForm(this);
		}
	}


}



class TokAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokAtom;
    }

	TokAtom() {
	    return this.getToken(ErlangParser.TokAtom, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokAtom(this);
		}
	}


}



class TokVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokVar;
    }

	TokVar() {
	    return this.getToken(ErlangParser.TokVar, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokVar(this);
		}
	}


}



class TokFloatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokFloat;
    }

	TokFloat() {
	    return this.getToken(ErlangParser.TokFloat, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokFloat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokFloat(this);
		}
	}


}



class TokIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokInteger;
    }

	TokInteger() {
	    return this.getToken(ErlangParser.TokInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokInteger(this);
		}
	}


}



class TokCharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokChar;
    }

	TokChar() {
	    return this.getToken(ErlangParser.TokChar, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokChar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokChar(this);
		}
	}


}



class TokStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tokString;
    }

	TokString() {
	    return this.getToken(ErlangParser.TokString, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTokString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTokString(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_attribute;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	attrVal() {
	    return this.getTypedRuleContext(AttrValContext,0);
	};

	typedAttrVal() {
	    return this.getTypedRuleContext(TypedAttrValContext,0);
	};

	AttrName() {
	    return this.getToken(ErlangParser.AttrName, 0);
	};

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typeSpec;
    }

	specFun() {
	    return this.getTypedRuleContext(SpecFunContext,0);
	};

	typeSigs() {
	    return this.getTypedRuleContext(TypeSigsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypeSpec(this);
		}
	}


}



class SpecFunContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_specFun;
    }

	tokAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokAtomContext);
	    } else {
	        return this.getTypedRuleContext(TokAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterSpecFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitSpecFun(this);
		}
	}


}



class TypedAttrValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typedAttrVal;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	typedRecordFields() {
	    return this.getTypedRuleContext(TypedRecordFieldsContext,0);
	};

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypedAttrVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypedAttrVal(this);
		}
	}


}



class TypedRecordFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typedRecordFields;
    }

	typedExprs() {
	    return this.getTypedRuleContext(TypedExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypedRecordFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypedRecordFields(this);
		}
	}


}



class TypedExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typedExprs;
    }

	typedExpr() {
	    return this.getTypedRuleContext(TypedExprContext,0);
	};

	typedExprs() {
	    return this.getTypedRuleContext(TypedExprsContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypedExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypedExprs(this);
		}
	}


}



class TypedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typedExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypedExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypedExpr(this);
		}
	}


}



class TypeSigsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typeSigs;
    }

	typeSig = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSigContext);
	    } else {
	        return this.getTypedRuleContext(TypeSigContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypeSigs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypeSigs(this);
		}
	}


}



class TypeSigContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typeSig;
    }

	funType() {
	    return this.getTypedRuleContext(FunTypeContext,0);
	};

	typeGuards() {
	    return this.getTypedRuleContext(TypeGuardsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypeSig(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypeSig(this);
		}
	}


}



class TypeGuardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typeGuards;
    }

	typeGuard = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeGuardContext);
	    } else {
	        return this.getTypedRuleContext(TypeGuardContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypeGuards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypeGuards(this);
		}
	}


}



class TypeGuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_typeGuard;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	topTypes() {
	    return this.getTypedRuleContext(TopTypesContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTypeGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTypeGuard(this);
		}
	}


}



class TopTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_topTypes;
    }

	topType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopTypeContext);
	    } else {
	        return this.getTypedRuleContext(TopTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTopTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTopTypes(this);
		}
	}


}



class TopTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_topType;
    }

	topType100() {
	    return this.getTypedRuleContext(TopType100Context,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTopType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTopType(this);
		}
	}


}



class TopType100Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_topType100;
    }

	type200() {
	    return this.getTypedRuleContext(Type200Context,0);
	};

	topType100() {
	    return this.getTypedRuleContext(TopType100Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTopType100(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTopType100(this);
		}
	}


}



class Type200Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_type200;
    }

	type300 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type300Context);
	    } else {
	        return this.getTypedRuleContext(Type300Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterType200(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitType200(this);
		}
	}


}



class Type300Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_type300;
    }

	type400() {
	    return this.getTypedRuleContext(Type400Context,0);
	};

	type300() {
	    return this.getTypedRuleContext(Type300Context,0);
	};

	addOp() {
	    return this.getTypedRuleContext(AddOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterType300(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitType300(this);
		}
	}


}



class Type400Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_type400;
    }

	type500() {
	    return this.getTypedRuleContext(Type500Context,0);
	};

	type400() {
	    return this.getTypedRuleContext(Type400Context,0);
	};

	multOp() {
	    return this.getTypedRuleContext(MultOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterType400(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitType400(this);
		}
	}


}



class Type500Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_type500;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	prefixOp() {
	    return this.getTypedRuleContext(PrefixOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterType500(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitType500(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_type_;
    }

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	tokAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokAtomContext);
	    } else {
	        return this.getTypedRuleContext(TokAtomContext,i);
	    }
	};

	topTypes() {
	    return this.getTypedRuleContext(TopTypesContext,0);
	};

	mapPairTypes() {
	    return this.getTypedRuleContext(MapPairTypesContext,0);
	};

	fieldTypes() {
	    return this.getTypedRuleContext(FieldTypesContext,0);
	};

	binaryType() {
	    return this.getTypedRuleContext(BinaryTypeContext,0);
	};

	tokInteger() {
	    return this.getTypedRuleContext(TokIntegerContext,0);
	};

	tokChar() {
	    return this.getTypedRuleContext(TokCharContext,0);
	};

	funType100() {
	    return this.getTypedRuleContext(FunType100Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitType_(this);
		}
	}


}



class FunType100Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_funType100;
    }

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	funType() {
	    return this.getTypedRuleContext(FunTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunType100(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunType100(this);
		}
	}


}



class FunTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_funType;
    }

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	topTypes() {
	    return this.getTypedRuleContext(TopTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunType(this);
		}
	}


}



class MapPairTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapPairTypes;
    }

	mapPairType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapPairTypeContext);
	    } else {
	        return this.getTypedRuleContext(MapPairTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapPairTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapPairTypes(this);
		}
	}


}



class MapPairTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapPairType;
    }

	topType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopTypeContext);
	    } else {
	        return this.getTypedRuleContext(TopTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapPairType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapPairType(this);
		}
	}


}



class FieldTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_fieldTypes;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFieldTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFieldTypes(this);
		}
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_fieldType;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	topType() {
	    return this.getTypedRuleContext(TopTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFieldType(this);
		}
	}


}



class BinaryTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binaryType;
    }

	binBaseType() {
	    return this.getTypedRuleContext(BinBaseTypeContext,0);
	};

	binUnitType() {
	    return this.getTypedRuleContext(BinUnitTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinaryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinaryType(this);
		}
	}


}



class BinBaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binBaseType;
    }

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinBaseType(this);
		}
	}


}



class BinUnitTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binUnitType;
    }

	tokVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokVarContext);
	    } else {
	        return this.getTypedRuleContext(TokVarContext,i);
	    }
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinUnitType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinUnitType(this);
		}
	}


}



class AttrValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_attrVal;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterAttrVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitAttrVal(this);
		}
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_function_;
    }

	functionClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionClauseContext);
	    } else {
	        return this.getTypedRuleContext(FunctionClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunction_(this);
		}
	}


}



class FunctionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_functionClause;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	clauseArgs() {
	    return this.getTypedRuleContext(ClauseArgsContext,0);
	};

	clauseGuard() {
	    return this.getTypedRuleContext(ClauseGuardContext,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunctionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunctionClause(this);
		}
	}


}



class ClauseArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_clauseArgs;
    }

	patArgumentList() {
	    return this.getTypedRuleContext(PatArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterClauseArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitClauseArgs(this);
		}
	}


}



class ClauseGuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_clauseGuard;
    }

	guard_() {
	    return this.getTypedRuleContext(Guard_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterClauseGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitClauseGuard(this);
		}
	}


}



class ClauseBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_clauseBody;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterClauseBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitClauseBody(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	expr100() {
	    return this.getTypedRuleContext(Expr100Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Expr100Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr100;
    }

	expr150 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr150Context);
	    } else {
	        return this.getTypedRuleContext(Expr150Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr100(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr100(this);
		}
	}


}



class Expr150Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr150;
    }

	expr160 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr160Context);
	    } else {
	        return this.getTypedRuleContext(Expr160Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr150(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr150(this);
		}
	}


}



class Expr160Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr160;
    }

	expr200 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr200Context);
	    } else {
	        return this.getTypedRuleContext(Expr200Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr160(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr160(this);
		}
	}


}



class Expr200Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr200;
    }

	expr300 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr300Context);
	    } else {
	        return this.getTypedRuleContext(Expr300Context,i);
	    }
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr200(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr200(this);
		}
	}


}



class Expr300Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr300;
    }

	expr400 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr400Context);
	    } else {
	        return this.getTypedRuleContext(Expr400Context,i);
	    }
	};

	listOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListOpContext);
	    } else {
	        return this.getTypedRuleContext(ListOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr300(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr300(this);
		}
	}


}



class Expr400Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr400;
    }

	expr500 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr500Context);
	    } else {
	        return this.getTypedRuleContext(Expr500Context,i);
	    }
	};

	addOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddOpContext);
	    } else {
	        return this.getTypedRuleContext(AddOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr400(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr400(this);
		}
	}


}



class Expr500Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr500;
    }

	expr600 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr600Context);
	    } else {
	        return this.getTypedRuleContext(Expr600Context,i);
	    }
	};

	multOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultOpContext);
	    } else {
	        return this.getTypedRuleContext(MultOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr500(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr500(this);
		}
	}


}



class Expr600Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr600;
    }

	prefixOp() {
	    return this.getTypedRuleContext(PrefixOpContext,0);
	};

	expr600() {
	    return this.getTypedRuleContext(Expr600Context,0);
	};

	expr650() {
	    return this.getTypedRuleContext(Expr650Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr600(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr600(this);
		}
	}


}



class Expr650Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr650;
    }

	mapExpr() {
	    return this.getTypedRuleContext(MapExprContext,0);
	};

	expr700() {
	    return this.getTypedRuleContext(Expr700Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr650(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr650(this);
		}
	}


}



class Expr700Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr700;
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	recordExpr() {
	    return this.getTypedRuleContext(RecordExprContext,0);
	};

	expr800() {
	    return this.getTypedRuleContext(Expr800Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr700(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr700(this);
		}
	}


}



class Expr800Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_expr800;
    }

	exprMax = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprMaxContext);
	    } else {
	        return this.getTypedRuleContext(ExprMaxContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExpr800(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExpr800(this);
		}
	}


}



class ExprMaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_exprMax;
    }

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	atomic() {
	    return this.getTypedRuleContext(AtomicContext,0);
	};

	list_() {
	    return this.getTypedRuleContext(List_Context,0);
	};

	binary() {
	    return this.getTypedRuleContext(BinaryContext,0);
	};

	listComprehension() {
	    return this.getTypedRuleContext(ListComprehensionContext,0);
	};

	binaryComprehension() {
	    return this.getTypedRuleContext(BinaryComprehensionContext,0);
	};

	tuple_() {
	    return this.getTypedRuleContext(Tuple_Context,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	caseExpr() {
	    return this.getTypedRuleContext(CaseExprContext,0);
	};

	receiveExpr() {
	    return this.getTypedRuleContext(ReceiveExprContext,0);
	};

	funExpr() {
	    return this.getTypedRuleContext(FunExprContext,0);
	};

	tryExpr() {
	    return this.getTypedRuleContext(TryExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExprMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExprMax(this);
		}
	}


}



class PatExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr;
    }

	patExpr200() {
	    return this.getTypedRuleContext(PatExpr200Context,0);
	};

	patExpr() {
	    return this.getTypedRuleContext(PatExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr(this);
		}
	}


}



class PatExpr200Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr200;
    }

	patExpr300 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatExpr300Context);
	    } else {
	        return this.getTypedRuleContext(PatExpr300Context,i);
	    }
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr200(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr200(this);
		}
	}


}



class PatExpr300Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr300;
    }

	patExpr400() {
	    return this.getTypedRuleContext(PatExpr400Context,0);
	};

	listOp() {
	    return this.getTypedRuleContext(ListOpContext,0);
	};

	patExpr300() {
	    return this.getTypedRuleContext(PatExpr300Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr300(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr300(this);
		}
	}


}



class PatExpr400Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr400;
    }

	patExpr500() {
	    return this.getTypedRuleContext(PatExpr500Context,0);
	};

	patExpr400() {
	    return this.getTypedRuleContext(PatExpr400Context,0);
	};

	addOp() {
	    return this.getTypedRuleContext(AddOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr400(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr400(this);
		}
	}


}



class PatExpr500Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr500;
    }

	patExpr600() {
	    return this.getTypedRuleContext(PatExpr600Context,0);
	};

	patExpr500() {
	    return this.getTypedRuleContext(PatExpr500Context,0);
	};

	multOp() {
	    return this.getTypedRuleContext(MultOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr500(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr500(this);
		}
	}


}



class PatExpr600Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr600;
    }

	prefixOp() {
	    return this.getTypedRuleContext(PrefixOpContext,0);
	};

	patExpr600() {
	    return this.getTypedRuleContext(PatExpr600Context,0);
	};

	patExpr650() {
	    return this.getTypedRuleContext(PatExpr650Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr600(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr600(this);
		}
	}


}



class PatExpr650Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr650;
    }

	mapPatExpr() {
	    return this.getTypedRuleContext(MapPatExprContext,0);
	};

	patExpr700() {
	    return this.getTypedRuleContext(PatExpr700Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr650(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr650(this);
		}
	}


}



class PatExpr700Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr700;
    }

	recordPatExpr() {
	    return this.getTypedRuleContext(RecordPatExprContext,0);
	};

	patExpr800() {
	    return this.getTypedRuleContext(PatExpr800Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr700(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr700(this);
		}
	}


}



class PatExpr800Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExpr800;
    }

	patExprMax() {
	    return this.getTypedRuleContext(PatExprMaxContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExpr800(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExpr800(this);
		}
	}


}



class PatExprMaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExprMax;
    }

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	atomic() {
	    return this.getTypedRuleContext(AtomicContext,0);
	};

	list_() {
	    return this.getTypedRuleContext(List_Context,0);
	};

	binary() {
	    return this.getTypedRuleContext(BinaryContext,0);
	};

	tuple_() {
	    return this.getTypedRuleContext(Tuple_Context,0);
	};

	patExpr() {
	    return this.getTypedRuleContext(PatExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExprMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExprMax(this);
		}
	}


}



class MapPatExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapPatExpr;
    }

	mapTuple() {
	    return this.getTypedRuleContext(MapTupleContext,0);
	};

	patExprMax() {
	    return this.getTypedRuleContext(PatExprMaxContext,0);
	};

	mapPatExpr() {
	    return this.getTypedRuleContext(MapPatExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapPatExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapPatExpr(this);
		}
	}


}



class RecordPatExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_recordPatExpr;
    }

	tokAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokAtomContext);
	    } else {
	        return this.getTypedRuleContext(TokAtomContext,i);
	    }
	};

	recordTuple() {
	    return this.getTypedRuleContext(RecordTupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterRecordPatExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitRecordPatExpr(this);
		}
	}


}



class List_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_list_;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	tail() {
	    return this.getTypedRuleContext(TailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterList_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitList_(this);
		}
	}


}



class TailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tail;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	tail() {
	    return this.getTypedRuleContext(TailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTail(this);
		}
	}


}



class BinaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binary;
    }

	binElements() {
	    return this.getTypedRuleContext(BinElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinary(this);
		}
	}


}



class BinElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binElements;
    }

	binElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BinElementContext);
	    } else {
	        return this.getTypedRuleContext(BinElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinElements(this);
		}
	}


}



class BinElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binElement;
    }

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	optBitSizeExpr() {
	    return this.getTypedRuleContext(OptBitSizeExprContext,0);
	};

	optBitTypeList() {
	    return this.getTypedRuleContext(OptBitTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinElement(this);
		}
	}


}



class BitExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_bitExpr;
    }

	exprMax() {
	    return this.getTypedRuleContext(ExprMaxContext,0);
	};

	prefixOp() {
	    return this.getTypedRuleContext(PrefixOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBitExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBitExpr(this);
		}
	}


}



class OptBitSizeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_optBitSizeExpr;
    }

	bitSizeExpr() {
	    return this.getTypedRuleContext(BitSizeExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterOptBitSizeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitOptBitSizeExpr(this);
		}
	}


}



class OptBitTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_optBitTypeList;
    }

	bitTypeList() {
	    return this.getTypedRuleContext(BitTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterOptBitTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitOptBitTypeList(this);
		}
	}


}



class BitTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_bitTypeList;
    }

	bitType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitTypeContext);
	    } else {
	        return this.getTypedRuleContext(BitTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBitTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBitTypeList(this);
		}
	}


}



class BitTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_bitType;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	tokInteger() {
	    return this.getTypedRuleContext(TokIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBitType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBitType(this);
		}
	}


}



class BitSizeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_bitSizeExpr;
    }

	exprMax() {
	    return this.getTypedRuleContext(ExprMaxContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBitSizeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBitSizeExpr(this);
		}
	}


}



class ListComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_listComprehension;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	lcExprs() {
	    return this.getTypedRuleContext(LcExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterListComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitListComprehension(this);
		}
	}


}



class BinaryComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_binaryComprehension;
    }

	exprMax() {
	    return this.getTypedRuleContext(ExprMaxContext,0);
	};

	lcExprs() {
	    return this.getTypedRuleContext(LcExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterBinaryComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitBinaryComprehension(this);
		}
	}


}



class LcExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_lcExprs;
    }

	lcExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LcExprContext);
	    } else {
	        return this.getTypedRuleContext(LcExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterLcExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitLcExprs(this);
		}
	}


}



class LcExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_lcExpr;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	binary() {
	    return this.getTypedRuleContext(BinaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterLcExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitLcExpr(this);
		}
	}


}



class Tuple_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tuple_;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTuple_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTuple_(this);
		}
	}


}



class MapExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapExpr;
    }

	mapTuple() {
	    return this.getTypedRuleContext(MapTupleContext,0);
	};

	exprMax() {
	    return this.getTypedRuleContext(ExprMaxContext,0);
	};

	mapExpr() {
	    return this.getTypedRuleContext(MapExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapExpr(this);
		}
	}


}



class MapTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapTuple;
    }

	mapField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapFieldContext);
	    } else {
	        return this.getTypedRuleContext(MapFieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapTuple(this);
		}
	}


}



class MapFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapField;
    }

	mapFieldAssoc() {
	    return this.getTypedRuleContext(MapFieldAssocContext,0);
	};

	mapFieldExact() {
	    return this.getTypedRuleContext(MapFieldExactContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapField(this);
		}
	}


}



class MapFieldAssocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapFieldAssoc;
    }

	mapKey() {
	    return this.getTypedRuleContext(MapKeyContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapFieldAssoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapFieldAssoc(this);
		}
	}


}



class MapFieldExactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapFieldExact;
    }

	mapKey() {
	    return this.getTypedRuleContext(MapKeyContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapFieldExact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapFieldExact(this);
		}
	}


}



class MapKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_mapKey;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMapKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMapKey(this);
		}
	}


}



class RecordExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_recordExpr;
    }

	tokAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokAtomContext);
	    } else {
	        return this.getTypedRuleContext(TokAtomContext,i);
	    }
	};

	recordTuple() {
	    return this.getTypedRuleContext(RecordTupleContext,0);
	};

	exprMax() {
	    return this.getTypedRuleContext(ExprMaxContext,0);
	};

	recordExpr() {
	    return this.getTypedRuleContext(RecordExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterRecordExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitRecordExpr(this);
		}
	}


}



class RecordTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_recordTuple;
    }

	recordFields() {
	    return this.getTypedRuleContext(RecordFieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterRecordTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitRecordTuple(this);
		}
	}


}



class RecordFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_recordFields;
    }

	recordField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordFieldContext);
	    } else {
	        return this.getTypedRuleContext(RecordFieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterRecordFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitRecordFields(this);
		}
	}


}



class RecordFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_recordField;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterRecordField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitRecordField(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_functionCall;
    }

	expr800() {
	    return this.getTypedRuleContext(Expr800Context,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class IfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_ifExpr;
    }

	ifClauses() {
	    return this.getTypedRuleContext(IfClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitIfExpr(this);
		}
	}


}



class IfClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_ifClauses;
    }

	ifClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfClauseContext);
	    } else {
	        return this.getTypedRuleContext(IfClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterIfClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitIfClauses(this);
		}
	}


}



class IfClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_ifClause;
    }

	guard_() {
	    return this.getTypedRuleContext(Guard_Context,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterIfClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitIfClause(this);
		}
	}


}



class CaseExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_caseExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	crClauses() {
	    return this.getTypedRuleContext(CrClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterCaseExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitCaseExpr(this);
		}
	}


}



class CrClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_crClauses;
    }

	crClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CrClauseContext);
	    } else {
	        return this.getTypedRuleContext(CrClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterCrClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitCrClauses(this);
		}
	}


}



class CrClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_crClause;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	clauseGuard() {
	    return this.getTypedRuleContext(ClauseGuardContext,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterCrClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitCrClause(this);
		}
	}


}



class ReceiveExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_receiveExpr;
    }

	crClauses() {
	    return this.getTypedRuleContext(CrClausesContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterReceiveExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitReceiveExpr(this);
		}
	}


}



class FunExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_funExpr;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	tokInteger() {
	    return this.getTypedRuleContext(TokIntegerContext,0);
	};

	atomOrVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomOrVarContext);
	    } else {
	        return this.getTypedRuleContext(AtomOrVarContext,i);
	    }
	};

	integerOrVar() {
	    return this.getTypedRuleContext(IntegerOrVarContext,0);
	};

	funClauses() {
	    return this.getTypedRuleContext(FunClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunExpr(this);
		}
	}


}



class AtomOrVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_atomOrVar;
    }

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterAtomOrVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitAtomOrVar(this);
		}
	}


}



class IntegerOrVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_integerOrVar;
    }

	tokInteger() {
	    return this.getTypedRuleContext(TokIntegerContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterIntegerOrVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitIntegerOrVar(this);
		}
	}


}



class FunClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_funClauses;
    }

	funClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunClauseContext);
	    } else {
	        return this.getTypedRuleContext(FunClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunClauses(this);
		}
	}


}



class FunClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_funClause;
    }

	patArgumentList() {
	    return this.getTypedRuleContext(PatArgumentListContext,0);
	};

	clauseGuard() {
	    return this.getTypedRuleContext(ClauseGuardContext,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterFunClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitFunClause(this);
		}
	}


}



class TryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tryExpr;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	tryCatch() {
	    return this.getTypedRuleContext(TryCatchContext,0);
	};

	crClauses() {
	    return this.getTypedRuleContext(CrClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTryExpr(this);
		}
	}


}



class TryCatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tryCatch;
    }

	tryClauses() {
	    return this.getTypedRuleContext(TryClausesContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTryCatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTryCatch(this);
		}
	}


}



class TryClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tryClauses;
    }

	tryClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TryClauseContext);
	    } else {
	        return this.getTypedRuleContext(TryClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTryClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTryClauses(this);
		}
	}


}



class TryClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tryClause;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	clauseGuard() {
	    return this.getTypedRuleContext(ClauseGuardContext,0);
	};

	clauseBody() {
	    return this.getTypedRuleContext(ClauseBodyContext,0);
	};

	patExpr() {
	    return this.getTypedRuleContext(PatExprContext,0);
	};

	tryOptStackTrace() {
	    return this.getTypedRuleContext(TryOptStackTraceContext,0);
	};

	atomOrVar() {
	    return this.getTypedRuleContext(AtomOrVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTryClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTryClause(this);
		}
	}


}



class TryOptStackTraceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_tryOptStackTrace;
    }

	tokVar() {
	    return this.getTypedRuleContext(TokVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterTryOptStackTrace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitTryOptStackTrace(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_argumentList;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class PatArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patArgumentList;
    }

	patExprs() {
	    return this.getTypedRuleContext(PatExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatArgumentList(this);
		}
	}


}



class ExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_exprs;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitExprs(this);
		}
	}


}



class PatExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_patExprs;
    }

	patExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatExprContext);
	    } else {
	        return this.getTypedRuleContext(PatExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPatExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPatExprs(this);
		}
	}


}



class Guard_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_guard_;
    }

	exprs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprsContext);
	    } else {
	        return this.getTypedRuleContext(ExprsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterGuard_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitGuard_(this);
		}
	}


}



class AtomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_atomic;
    }

	tokChar() {
	    return this.getTypedRuleContext(TokCharContext,0);
	};

	tokInteger() {
	    return this.getTypedRuleContext(TokIntegerContext,0);
	};

	tokFloat() {
	    return this.getTypedRuleContext(TokFloatContext,0);
	};

	tokAtom() {
	    return this.getTypedRuleContext(TokAtomContext,0);
	};

	tokString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokStringContext);
	    } else {
	        return this.getTypedRuleContext(TokStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterAtomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitAtomic(this);
		}
	}


}



class PrefixOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_prefixOp;
    }


	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterPrefixOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitPrefixOp(this);
		}
	}


}



class MultOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_multOp;
    }


	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterMultOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitMultOp(this);
		}
	}


}



class AddOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_addOp;
    }


	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterAddOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitAddOp(this);
		}
	}


}



class ListOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_listOp;
    }


	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterListOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitListOp(this);
		}
	}


}



class CompOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ErlangParser.RULE_compOp;
    }


	enterRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.enterCompOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ErlangListener ) {
	        listener.exitCompOp(this);
		}
	}


}




ErlangParser.FormsContext = FormsContext; 
ErlangParser.FormContext = FormContext; 
ErlangParser.TokAtomContext = TokAtomContext; 
ErlangParser.TokVarContext = TokVarContext; 
ErlangParser.TokFloatContext = TokFloatContext; 
ErlangParser.TokIntegerContext = TokIntegerContext; 
ErlangParser.TokCharContext = TokCharContext; 
ErlangParser.TokStringContext = TokStringContext; 
ErlangParser.AttributeContext = AttributeContext; 
ErlangParser.TypeSpecContext = TypeSpecContext; 
ErlangParser.SpecFunContext = SpecFunContext; 
ErlangParser.TypedAttrValContext = TypedAttrValContext; 
ErlangParser.TypedRecordFieldsContext = TypedRecordFieldsContext; 
ErlangParser.TypedExprsContext = TypedExprsContext; 
ErlangParser.TypedExprContext = TypedExprContext; 
ErlangParser.TypeSigsContext = TypeSigsContext; 
ErlangParser.TypeSigContext = TypeSigContext; 
ErlangParser.TypeGuardsContext = TypeGuardsContext; 
ErlangParser.TypeGuardContext = TypeGuardContext; 
ErlangParser.TopTypesContext = TopTypesContext; 
ErlangParser.TopTypeContext = TopTypeContext; 
ErlangParser.TopType100Context = TopType100Context; 
ErlangParser.Type200Context = Type200Context; 
ErlangParser.Type300Context = Type300Context; 
ErlangParser.Type400Context = Type400Context; 
ErlangParser.Type500Context = Type500Context; 
ErlangParser.Type_Context = Type_Context; 
ErlangParser.FunType100Context = FunType100Context; 
ErlangParser.FunTypeContext = FunTypeContext; 
ErlangParser.MapPairTypesContext = MapPairTypesContext; 
ErlangParser.MapPairTypeContext = MapPairTypeContext; 
ErlangParser.FieldTypesContext = FieldTypesContext; 
ErlangParser.FieldTypeContext = FieldTypeContext; 
ErlangParser.BinaryTypeContext = BinaryTypeContext; 
ErlangParser.BinBaseTypeContext = BinBaseTypeContext; 
ErlangParser.BinUnitTypeContext = BinUnitTypeContext; 
ErlangParser.AttrValContext = AttrValContext; 
ErlangParser.Function_Context = Function_Context; 
ErlangParser.FunctionClauseContext = FunctionClauseContext; 
ErlangParser.ClauseArgsContext = ClauseArgsContext; 
ErlangParser.ClauseGuardContext = ClauseGuardContext; 
ErlangParser.ClauseBodyContext = ClauseBodyContext; 
ErlangParser.ExprContext = ExprContext; 
ErlangParser.Expr100Context = Expr100Context; 
ErlangParser.Expr150Context = Expr150Context; 
ErlangParser.Expr160Context = Expr160Context; 
ErlangParser.Expr200Context = Expr200Context; 
ErlangParser.Expr300Context = Expr300Context; 
ErlangParser.Expr400Context = Expr400Context; 
ErlangParser.Expr500Context = Expr500Context; 
ErlangParser.Expr600Context = Expr600Context; 
ErlangParser.Expr650Context = Expr650Context; 
ErlangParser.Expr700Context = Expr700Context; 
ErlangParser.Expr800Context = Expr800Context; 
ErlangParser.ExprMaxContext = ExprMaxContext; 
ErlangParser.PatExprContext = PatExprContext; 
ErlangParser.PatExpr200Context = PatExpr200Context; 
ErlangParser.PatExpr300Context = PatExpr300Context; 
ErlangParser.PatExpr400Context = PatExpr400Context; 
ErlangParser.PatExpr500Context = PatExpr500Context; 
ErlangParser.PatExpr600Context = PatExpr600Context; 
ErlangParser.PatExpr650Context = PatExpr650Context; 
ErlangParser.PatExpr700Context = PatExpr700Context; 
ErlangParser.PatExpr800Context = PatExpr800Context; 
ErlangParser.PatExprMaxContext = PatExprMaxContext; 
ErlangParser.MapPatExprContext = MapPatExprContext; 
ErlangParser.RecordPatExprContext = RecordPatExprContext; 
ErlangParser.List_Context = List_Context; 
ErlangParser.TailContext = TailContext; 
ErlangParser.BinaryContext = BinaryContext; 
ErlangParser.BinElementsContext = BinElementsContext; 
ErlangParser.BinElementContext = BinElementContext; 
ErlangParser.BitExprContext = BitExprContext; 
ErlangParser.OptBitSizeExprContext = OptBitSizeExprContext; 
ErlangParser.OptBitTypeListContext = OptBitTypeListContext; 
ErlangParser.BitTypeListContext = BitTypeListContext; 
ErlangParser.BitTypeContext = BitTypeContext; 
ErlangParser.BitSizeExprContext = BitSizeExprContext; 
ErlangParser.ListComprehensionContext = ListComprehensionContext; 
ErlangParser.BinaryComprehensionContext = BinaryComprehensionContext; 
ErlangParser.LcExprsContext = LcExprsContext; 
ErlangParser.LcExprContext = LcExprContext; 
ErlangParser.Tuple_Context = Tuple_Context; 
ErlangParser.MapExprContext = MapExprContext; 
ErlangParser.MapTupleContext = MapTupleContext; 
ErlangParser.MapFieldContext = MapFieldContext; 
ErlangParser.MapFieldAssocContext = MapFieldAssocContext; 
ErlangParser.MapFieldExactContext = MapFieldExactContext; 
ErlangParser.MapKeyContext = MapKeyContext; 
ErlangParser.RecordExprContext = RecordExprContext; 
ErlangParser.RecordTupleContext = RecordTupleContext; 
ErlangParser.RecordFieldsContext = RecordFieldsContext; 
ErlangParser.RecordFieldContext = RecordFieldContext; 
ErlangParser.FunctionCallContext = FunctionCallContext; 
ErlangParser.IfExprContext = IfExprContext; 
ErlangParser.IfClausesContext = IfClausesContext; 
ErlangParser.IfClauseContext = IfClauseContext; 
ErlangParser.CaseExprContext = CaseExprContext; 
ErlangParser.CrClausesContext = CrClausesContext; 
ErlangParser.CrClauseContext = CrClauseContext; 
ErlangParser.ReceiveExprContext = ReceiveExprContext; 
ErlangParser.FunExprContext = FunExprContext; 
ErlangParser.AtomOrVarContext = AtomOrVarContext; 
ErlangParser.IntegerOrVarContext = IntegerOrVarContext; 
ErlangParser.FunClausesContext = FunClausesContext; 
ErlangParser.FunClauseContext = FunClauseContext; 
ErlangParser.TryExprContext = TryExprContext; 
ErlangParser.TryCatchContext = TryCatchContext; 
ErlangParser.TryClausesContext = TryClausesContext; 
ErlangParser.TryClauseContext = TryClauseContext; 
ErlangParser.TryOptStackTraceContext = TryOptStackTraceContext; 
ErlangParser.ArgumentListContext = ArgumentListContext; 
ErlangParser.PatArgumentListContext = PatArgumentListContext; 
ErlangParser.ExprsContext = ExprsContext; 
ErlangParser.PatExprsContext = PatExprsContext; 
ErlangParser.Guard_Context = Guard_Context; 
ErlangParser.AtomicContext = AtomicContext; 
ErlangParser.PrefixOpContext = PrefixOpContext; 
ErlangParser.MultOpContext = MultOpContext; 
ErlangParser.AddOpContext = AddOpContext; 
ErlangParser.ListOpContext = ListOpContext; 
ErlangParser.CompOpContext = CompOpContext; 
