// Generated from Resources/Parsers/restructuredtext/ReStructuredText.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,178,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,
72,8,1,1,1,1,1,1,1,1,1,3,1,78,8,1,1,1,1,1,1,1,1,1,4,1,84,8,1,11,1,12,1,85,
1,2,1,2,1,2,5,2,91,8,2,10,2,12,2,94,9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
3,3,104,8,3,1,4,4,4,107,8,4,11,4,12,4,108,1,5,4,5,112,8,5,11,5,12,5,113,
1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,156,8,23,1,23,1,23,1,23,
1,23,3,23,162,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,3,28,173,
8,28,1,28,1,28,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,3,2,0,65,90,97,
122,1,0,48,57,2,0,9,9,32,32,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,71,
1,0,0,0,5,87,1,0,0,0,7,103,1,0,0,0,9,106,1,0,0,0,11,111,1,0,0,0,13,115,1,
0,0,0,15,118,1,0,0,0,17,120,1,0,0,0,19,122,1,0,0,0,21,124,1,0,0,0,23,126,
1,0,0,0,25,128,1,0,0,0,27,130,1,0,0,0,29,132,1,0,0,0,31,134,1,0,0,0,33,136,
1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,0,39,142,1,0,0,0,41,144,1,0,0,0,43,146,
1,0,0,0,45,148,1,0,0,0,47,161,1,0,0,0,49,163,1,0,0,0,51,165,1,0,0,0,53,167,
1,0,0,0,55,169,1,0,0,0,57,172,1,0,0,0,59,176,1,0,0,0,61,62,5,58,0,0,62,63,
5,100,0,0,63,64,5,111,0,0,64,65,5,99,0,0,65,66,5,58,0,0,66,2,1,0,0,0,67,
72,3,43,21,0,68,72,3,39,19,0,69,72,3,41,20,0,70,72,3,27,13,0,71,67,1,0,0,
0,71,68,1,0,0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,77,1,0,0,0,73,78,3,43,21,
0,74,78,3,39,19,0,75,78,3,41,20,0,76,78,3,27,13,0,77,73,1,0,0,0,77,74,1,
0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,83,1,0,0,0,79,84,3,43,21,0,80,84,3,
39,19,0,81,84,3,41,20,0,82,84,3,27,13,0,83,79,1,0,0,0,83,80,1,0,0,0,83,81,
1,0,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,4,1,0,
0,0,87,88,3,37,18,0,88,92,3,57,28,0,89,91,3,57,28,0,90,89,1,0,0,0,91,94,
1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,3,
37,18,0,96,97,3,37,18,0,97,6,1,0,0,0,98,99,3,11,5,0,99,100,3,53,26,0,100,
104,1,0,0,0,101,102,5,120,0,0,102,104,3,53,26,0,103,98,1,0,0,0,103,101,1,
0,0,0,104,8,1,0,0,0,105,107,7,0,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,
106,1,0,0,0,108,109,1,0,0,0,109,10,1,0,0,0,110,112,7,1,0,0,111,110,1,0,0,
0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,12,1,0,0,0,115,116,
3,37,18,0,116,117,3,37,18,0,117,14,1,0,0,0,118,119,5,91,0,0,119,16,1,0,0,
0,120,121,5,93,0,0,121,18,1,0,0,0,122,123,5,40,0,0,123,20,1,0,0,0,124,125,
5,41,0,0,125,22,1,0,0,0,126,127,5,60,0,0,127,24,1,0,0,0,128,129,5,62,0,0,
129,26,1,0,0,0,130,131,5,94,0,0,131,28,1,0,0,0,132,133,5,34,0,0,133,30,1,
0,0,0,134,135,5,39,0,0,135,32,1,0,0,0,136,137,5,46,0,0,137,34,1,0,0,0,138,
139,5,59,0,0,139,36,1,0,0,0,140,141,5,58,0,0,141,38,1,0,0,0,142,143,5,61,
0,0,143,40,1,0,0,0,144,145,5,43,0,0,145,42,1,0,0,0,146,147,5,45,0,0,147,
44,1,0,0,0,148,149,5,124,0,0,149,46,1,0,0,0,150,151,5,46,0,0,151,152,5,46,
0,0,152,153,5,32,0,0,153,155,1,0,0,0,154,156,3,57,28,0,155,154,1,0,0,0,155,
156,1,0,0,0,156,162,1,0,0,0,157,158,5,46,0,0,158,159,5,46,0,0,159,160,1,
0,0,0,160,162,3,57,28,0,161,150,1,0,0,0,161,157,1,0,0,0,162,48,1,0,0,0,163,
164,5,95,0,0,164,50,1,0,0,0,165,166,5,96,0,0,166,52,1,0,0,0,167,168,5,42,
0,0,168,54,1,0,0,0,169,170,7,2,0,0,170,56,1,0,0,0,171,173,5,13,0,0,172,171,
1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,10,0,0,175,58,1,0,0,0,
176,177,9,0,0,0,177,60,1,0,0,0,12,0,71,77,83,85,92,103,108,113,155,161,172,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ReStructuredTextLexer extends antlr4.Lexer {

    static grammarFileName = "ReStructuredText.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "':doc:'", null, null, null, null, null, 
                         null, "'['", "']'", "'('", "')'", "'<'", "'>'", 
                         "'^'", "'\"'", "'''", "'.'", "';'", "':'", "'='", 
                         "'+'", "'-'", "'|'", null, "'_'", "'`'", "'*'" ];
	static symbolicNames = [ null, null, "SectionSeparator", "Literal", "TimeStar", 
                          "Alphabet", "Numbers", "Quote", "SquareLeft", 
                          "SquareRight", "RoundLeft", "RoundRight", "AngleLeft", 
                          "AngleRight", "Hat", "QuotationDouble", "QuotationSingle", 
                          "Dot", "SemiColon", "Colon", "Equal", "Plus", 
                          "Minus", "Block", "Comment", "UnderScore", "BackTick", 
                          "Star", "Space", "LineBreak", "Any" ];
	static ruleNames = [ "T__0", "SectionSeparator", "Literal", "TimeStar", 
                      "Alphabet", "Numbers", "Quote", "SquareLeft", "SquareRight", 
                      "RoundLeft", "RoundRight", "AngleLeft", "AngleRight", 
                      "Hat", "QuotationDouble", "QuotationSingle", "Dot", 
                      "SemiColon", "Colon", "Equal", "Plus", "Minus", "Block", 
                      "Comment", "UnderScore", "BackTick", "Star", "Space", 
                      "LineBreak", "Any" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

ReStructuredTextLexer.EOF = antlr4.Token.EOF;
ReStructuredTextLexer.T__0 = 1;
ReStructuredTextLexer.SectionSeparator = 2;
ReStructuredTextLexer.Literal = 3;
ReStructuredTextLexer.TimeStar = 4;
ReStructuredTextLexer.Alphabet = 5;
ReStructuredTextLexer.Numbers = 6;
ReStructuredTextLexer.Quote = 7;
ReStructuredTextLexer.SquareLeft = 8;
ReStructuredTextLexer.SquareRight = 9;
ReStructuredTextLexer.RoundLeft = 10;
ReStructuredTextLexer.RoundRight = 11;
ReStructuredTextLexer.AngleLeft = 12;
ReStructuredTextLexer.AngleRight = 13;
ReStructuredTextLexer.Hat = 14;
ReStructuredTextLexer.QuotationDouble = 15;
ReStructuredTextLexer.QuotationSingle = 16;
ReStructuredTextLexer.Dot = 17;
ReStructuredTextLexer.SemiColon = 18;
ReStructuredTextLexer.Colon = 19;
ReStructuredTextLexer.Equal = 20;
ReStructuredTextLexer.Plus = 21;
ReStructuredTextLexer.Minus = 22;
ReStructuredTextLexer.Block = 23;
ReStructuredTextLexer.Comment = 24;
ReStructuredTextLexer.UnderScore = 25;
ReStructuredTextLexer.BackTick = 26;
ReStructuredTextLexer.Star = 27;
ReStructuredTextLexer.Space = 28;
ReStructuredTextLexer.LineBreak = 29;
ReStructuredTextLexer.Any = 30;



