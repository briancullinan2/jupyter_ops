// Generated from Resources/Parsers/restructuredtext/ReStructuredText.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ReStructuredTextListener from './ReStructuredTextListener.js';
const serializedATN = [4,1,30,808,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,1,0,1,0,4,0,121,8,0,11,0,12,0,122,1,0,1,0,1,1,1,
1,3,1,129,8,1,1,2,1,2,1,2,1,2,1,2,3,2,136,8,2,1,3,5,3,139,8,3,10,3,12,3,
142,9,3,1,3,1,3,5,3,146,8,3,10,3,12,3,149,9,3,1,3,1,3,3,3,153,8,3,3,3,155,
8,3,1,4,1,4,1,4,1,5,1,5,1,5,5,5,163,8,5,10,5,12,5,166,9,5,1,6,4,6,169,8,
6,11,6,12,6,170,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,4,9,182,8,9,11,9,12,
9,183,1,10,1,10,1,11,1,11,3,11,190,8,11,1,11,1,11,3,11,194,8,11,1,11,1,11,
5,11,198,8,11,10,11,12,11,201,9,11,1,11,5,11,204,8,11,10,11,12,11,207,9,
11,1,12,1,12,1,12,1,12,1,12,4,12,214,8,12,11,12,12,12,215,1,12,3,12,219,
8,12,1,12,1,12,3,12,223,8,12,1,13,1,13,1,13,3,13,228,8,13,1,13,5,13,231,
8,13,10,13,12,13,234,9,13,1,14,1,14,1,14,3,14,239,8,14,1,14,5,14,242,8,14,
10,14,12,14,245,9,14,1,14,1,14,1,14,1,14,3,14,251,8,14,1,14,4,14,254,8,14,
11,14,12,14,255,3,14,258,8,14,1,15,1,15,1,15,1,15,5,15,264,8,15,10,15,12,
15,267,9,15,1,15,3,15,270,8,15,1,16,1,16,5,16,274,8,16,10,16,12,16,277,9,
16,1,16,1,16,5,16,281,8,16,10,16,12,16,284,9,16,1,16,4,16,287,8,16,11,16,
12,16,288,3,16,291,8,16,1,17,1,17,5,17,295,8,17,10,17,12,17,298,9,17,1,17,
1,17,4,17,302,8,17,11,17,12,17,303,1,17,1,17,5,17,308,8,17,10,17,12,17,311,
9,17,1,18,1,18,1,19,1,19,1,19,4,19,318,8,19,11,19,12,19,319,1,19,1,19,5,
19,324,8,19,10,19,12,19,327,9,19,3,19,329,8,19,1,20,1,20,5,20,333,8,20,10,
20,12,20,336,9,20,1,21,3,21,339,8,21,1,21,1,21,5,21,343,8,21,10,21,12,21,
346,9,21,1,22,1,22,3,22,350,8,22,1,23,1,23,1,23,3,23,355,8,23,3,23,357,8,
23,1,24,1,24,1,24,1,24,3,24,363,8,24,1,24,1,24,1,24,1,24,3,24,369,8,24,1,
25,1,25,3,25,373,8,25,1,25,4,25,376,8,25,11,25,12,25,377,1,25,5,25,381,8,
25,10,25,12,25,384,9,25,1,25,4,25,387,8,25,11,25,12,25,388,3,25,391,8,25,
1,25,3,25,394,8,25,1,26,1,26,3,26,398,8,26,1,26,5,26,401,8,26,10,26,12,26,
404,9,26,1,26,1,26,1,26,3,26,409,8,26,1,26,4,26,412,8,26,11,26,12,26,413,
1,26,1,26,3,26,418,8,26,1,27,1,27,1,27,1,27,3,27,424,8,27,1,27,1,27,1,27,
3,27,429,8,27,1,27,1,27,4,27,433,8,27,11,27,12,27,434,1,27,1,27,1,27,5,27,
440,8,27,10,27,12,27,443,9,27,3,27,445,8,27,1,28,1,28,5,28,449,8,28,10,28,
12,28,452,9,28,1,29,4,29,455,8,29,11,29,12,29,456,1,30,1,30,1,30,1,30,1,
30,1,30,1,30,1,30,3,30,467,8,30,1,31,4,31,470,8,31,11,31,12,31,471,1,31,
5,31,475,8,31,10,31,12,31,478,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,515,
8,32,1,33,4,33,518,8,33,11,33,12,33,519,1,33,5,33,523,8,33,10,33,12,33,526,
9,33,1,34,1,34,1,34,1,34,4,34,532,8,34,11,34,12,34,533,1,34,3,34,537,8,34,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,
35,553,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,563,8,36,1,37,1,
37,3,37,567,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,590,8,39,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,3,40,599,8,40,1,41,4,41,602,8,41,11,41,12,41,603,
1,41,1,41,4,41,608,8,41,11,41,12,41,609,1,41,1,41,1,41,1,41,5,41,616,8,41,
10,41,12,41,619,9,41,1,41,1,41,1,41,5,41,624,8,41,10,41,12,41,627,9,41,1,
41,5,41,630,8,41,10,41,12,41,633,9,41,1,41,1,41,1,41,4,41,638,8,41,11,41,
12,41,639,1,41,1,41,1,41,5,41,645,8,41,10,41,12,41,648,9,41,1,41,1,41,1,
41,4,41,653,8,41,11,41,12,41,654,1,41,4,41,658,8,41,11,41,12,41,659,1,41,
1,41,4,41,664,8,41,11,41,12,41,665,1,41,1,41,3,41,670,8,41,1,42,5,42,673,
8,42,10,42,12,42,676,9,42,1,42,5,42,679,8,42,10,42,12,42,682,9,42,1,42,5,
42,685,8,42,10,42,12,42,688,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,3,45,
697,8,45,1,45,1,45,3,45,701,8,45,1,46,1,46,5,46,705,8,46,10,46,12,46,708,
9,46,1,46,1,46,4,46,712,8,46,11,46,12,46,713,1,46,1,46,1,46,1,46,4,46,720,
8,46,11,46,12,46,721,1,46,1,46,3,46,726,8,46,1,47,4,47,729,8,47,11,47,12,
47,730,1,48,1,48,1,49,1,49,1,49,3,49,738,8,49,1,50,4,50,741,8,50,11,50,12,
50,742,1,50,1,50,1,51,1,51,4,51,749,8,51,11,51,12,51,750,1,51,1,51,1,51,
1,51,1,52,1,52,4,52,759,8,52,11,52,12,52,760,1,53,1,53,4,53,765,8,53,11,
53,12,53,766,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,4,54,
780,8,54,11,54,12,54,781,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
54,1,54,3,54,795,8,54,1,55,4,55,798,8,55,11,55,12,55,799,1,56,1,56,1,57,
1,57,1,58,1,58,1,58,8,122,243,344,362,377,382,388,402,0,59,0,2,4,6,8,10,
12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,0,12,1,0,29,29,1,0,21,22,2,0,21,22,27,27,1,0,27,
29,1,0,27,28,3,0,17,17,27,27,29,29,2,0,2,2,27,29,2,0,27,27,29,29,2,0,26,
26,28,29,2,0,26,26,29,29,3,0,12,13,26,27,29,29,2,0,14,14,20,22,921,0,120,
1,0,0,0,2,128,1,0,0,0,4,135,1,0,0,0,6,140,1,0,0,0,8,156,1,0,0,0,10,164,1,
0,0,0,12,168,1,0,0,0,14,172,1,0,0,0,16,174,1,0,0,0,18,181,1,0,0,0,20,185,
1,0,0,0,22,189,1,0,0,0,24,222,1,0,0,0,26,224,1,0,0,0,28,257,1,0,0,0,30,269,
1,0,0,0,32,271,1,0,0,0,34,292,1,0,0,0,36,312,1,0,0,0,38,314,1,0,0,0,40,330,
1,0,0,0,42,338,1,0,0,0,44,349,1,0,0,0,46,351,1,0,0,0,48,368,1,0,0,0,50,393,
1,0,0,0,52,417,1,0,0,0,54,444,1,0,0,0,56,446,1,0,0,0,58,454,1,0,0,0,60,466,
1,0,0,0,62,469,1,0,0,0,64,514,1,0,0,0,66,517,1,0,0,0,68,536,1,0,0,0,70,552,
1,0,0,0,72,562,1,0,0,0,74,566,1,0,0,0,76,568,1,0,0,0,78,589,1,0,0,0,80,598,
1,0,0,0,82,669,1,0,0,0,84,674,1,0,0,0,86,689,1,0,0,0,88,691,1,0,0,0,90,696,
1,0,0,0,92,725,1,0,0,0,94,728,1,0,0,0,96,732,1,0,0,0,98,737,1,0,0,0,100,
740,1,0,0,0,102,746,1,0,0,0,104,756,1,0,0,0,106,762,1,0,0,0,108,794,1,0,
0,0,110,797,1,0,0,0,112,801,1,0,0,0,114,803,1,0,0,0,116,805,1,0,0,0,118,
121,3,2,1,0,119,121,3,56,28,0,120,118,1,0,0,0,120,119,1,0,0,0,121,122,1,
0,0,0,122,123,1,0,0,0,122,120,1,0,0,0,123,124,1,0,0,0,124,125,5,0,0,1,125,
1,1,0,0,0,126,129,3,22,11,0,127,129,3,4,2,0,128,126,1,0,0,0,128,127,1,0,
0,0,129,3,1,0,0,0,130,136,3,30,15,0,131,136,3,38,19,0,132,136,3,20,10,0,
133,136,3,26,13,0,134,136,3,6,3,0,135,130,1,0,0,0,135,131,1,0,0,0,135,132,
1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,5,1,0,0,0,137,139,5,28,0,0,138,
137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,
0,0,142,140,1,0,0,0,143,147,5,24,0,0,144,146,5,28,0,0,145,144,1,0,0,0,146,
149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,154,1,0,0,0,149,147,1,0,
0,0,150,152,3,14,7,0,151,153,3,8,4,0,152,151,1,0,0,0,152,153,1,0,0,0,153,
155,1,0,0,0,154,150,1,0,0,0,154,155,1,0,0,0,155,7,1,0,0,0,156,157,3,12,6,
0,157,158,3,10,5,0,158,9,1,0,0,0,159,160,3,56,28,0,160,161,3,12,6,0,161,
163,1,0,0,0,162,159,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,
0,0,165,11,1,0,0,0,166,164,1,0,0,0,167,169,3,16,8,0,168,167,1,0,0,0,169,
170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,13,1,0,0,0,172,173,3,18,
9,0,173,15,1,0,0,0,174,175,5,29,0,0,175,176,5,28,0,0,176,177,5,28,0,0,177,
178,5,28,0,0,178,179,3,14,7,0,179,17,1,0,0,0,180,182,8,0,0,0,181,180,1,0,
0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,19,1,0,0,0,185,186,
3,44,22,0,186,21,1,0,0,0,187,188,5,29,0,0,188,190,5,2,0,0,189,187,1,0,0,
0,189,190,1,0,0,0,190,191,1,0,0,0,191,193,3,24,12,0,192,194,5,29,0,0,193,
192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,199,5,2,0,0,196,198,5,29,
0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
205,1,0,0,0,201,199,1,0,0,0,202,204,3,4,2,0,203,202,1,0,0,0,204,207,1,0,
0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,23,1,0,0,0,207,205,1,0,0,0,208,209,
5,29,0,0,209,223,3,68,34,0,210,211,5,29,0,0,211,213,3,54,27,0,212,214,5,
28,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
218,1,0,0,0,217,219,3,40,20,0,218,217,1,0,0,0,218,219,1,0,0,0,219,223,1,
0,0,0,220,223,3,50,25,0,221,223,3,52,26,0,222,208,1,0,0,0,222,210,1,0,0,
0,222,220,1,0,0,0,222,221,1,0,0,0,223,25,1,0,0,0,224,225,5,29,0,0,225,227,
3,28,14,0,226,228,5,29,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,232,1,0,0,
0,229,231,3,28,14,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
233,1,0,0,0,233,27,1,0,0,0,234,232,1,0,0,0,235,236,5,23,0,0,236,238,5,28,
0,0,237,239,3,58,29,0,238,237,1,0,0,0,238,239,1,0,0,0,239,243,1,0,0,0,240,
242,3,74,37,0,241,240,1,0,0,0,242,245,1,0,0,0,243,244,1,0,0,0,243,241,1,
0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,258,3,82,41,0,247,248,5,23,0,0,
248,250,5,28,0,0,249,251,3,58,29,0,250,249,1,0,0,0,250,251,1,0,0,0,251,253,
1,0,0,0,252,254,3,74,37,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,
0,255,256,1,0,0,0,256,258,1,0,0,0,257,235,1,0,0,0,257,247,1,0,0,0,258,29,
1,0,0,0,259,270,3,32,16,0,260,270,3,34,17,0,261,265,5,29,0,0,262,264,5,28,
0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
268,1,0,0,0,267,265,1,0,0,0,268,270,7,1,0,0,269,259,1,0,0,0,269,260,1,0,
0,0,269,261,1,0,0,0,270,31,1,0,0,0,271,275,5,29,0,0,272,274,5,28,0,0,273,
272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,
0,0,277,275,1,0,0,0,278,282,3,36,18,0,279,281,5,28,0,0,280,279,1,0,0,0,281,
284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,290,1,0,0,0,284,282,1,0,
0,0,285,287,3,20,10,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,
289,1,0,0,0,289,291,1,0,0,0,290,286,1,0,0,0,290,291,1,0,0,0,291,33,1,0,0,
0,292,296,5,29,0,0,293,295,5,28,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,
294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,301,3,36,
18,0,300,302,5,28,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,
304,1,0,0,0,304,305,1,0,0,0,305,309,3,40,20,0,306,308,3,20,10,0,307,306,
1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,35,1,0,0,0,311,
309,1,0,0,0,312,313,7,2,0,0,313,37,1,0,0,0,314,315,5,29,0,0,315,317,3,54,
27,0,316,318,5,28,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,
320,1,0,0,0,320,328,1,0,0,0,321,325,3,40,20,0,322,324,3,20,10,0,323,322,
1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,
327,325,1,0,0,0,328,321,1,0,0,0,328,329,1,0,0,0,329,39,1,0,0,0,330,334,3,
42,21,0,331,333,3,44,22,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,
0,334,335,1,0,0,0,335,41,1,0,0,0,336,334,1,0,0,0,337,339,3,58,29,0,338,337,
1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,344,3,60,30,0,341,343,3,74,37,
0,342,341,1,0,0,0,343,346,1,0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,43,
1,0,0,0,346,344,1,0,0,0,347,350,3,48,24,0,348,350,3,46,23,0,349,347,1,0,
0,0,349,348,1,0,0,0,350,45,1,0,0,0,351,356,3,50,25,0,352,357,3,48,24,0,353,
355,3,46,23,0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,352,1,
0,0,0,356,354,1,0,0,0,357,47,1,0,0,0,358,369,3,52,26,0,359,360,3,52,26,0,
360,362,3,42,21,0,361,363,3,46,23,0,362,363,1,0,0,0,362,361,1,0,0,0,363,
369,1,0,0,0,364,365,3,52,26,0,365,366,3,42,21,0,366,367,3,48,24,0,367,369,
1,0,0,0,368,358,1,0,0,0,368,359,1,0,0,0,368,364,1,0,0,0,369,49,1,0,0,0,370,
372,5,29,0,0,371,373,3,58,29,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,1,
0,0,0,374,376,3,60,30,0,375,374,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,
377,375,1,0,0,0,378,390,1,0,0,0,379,381,3,74,37,0,380,379,1,0,0,0,381,384,
1,0,0,0,382,383,1,0,0,0,382,380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,
385,387,3,72,36,0,386,385,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,388,386,
1,0,0,0,389,391,1,0,0,0,390,382,1,0,0,0,390,391,1,0,0,0,391,394,1,0,0,0,
392,394,3,54,27,0,393,370,1,0,0,0,393,392,1,0,0,0,394,51,1,0,0,0,395,397,
5,29,0,0,396,398,3,58,29,0,397,396,1,0,0,0,397,398,1,0,0,0,398,402,1,0,0,
0,399,401,3,60,30,0,400,399,1,0,0,0,401,404,1,0,0,0,402,403,1,0,0,0,402,
400,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,418,3,82,41,0,406,408,5,
29,0,0,407,409,3,58,29,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,
410,412,3,80,40,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,
1,0,0,0,414,415,1,0,0,0,415,416,3,82,41,0,416,418,1,0,0,0,417,395,1,0,0,
0,417,406,1,0,0,0,418,53,1,0,0,0,419,420,5,6,0,0,420,445,5,17,0,0,421,423,
5,29,0,0,422,424,3,58,29,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,
0,425,445,5,6,0,0,426,428,5,29,0,0,427,429,3,58,29,0,428,427,1,0,0,0,428,
429,1,0,0,0,429,430,1,0,0,0,430,432,5,2,0,0,431,433,5,28,0,0,432,431,1,0,
0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,
437,5,2,0,0,437,441,1,0,0,0,438,440,5,28,0,0,439,438,1,0,0,0,440,443,1,0,
0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,444,
419,1,0,0,0,444,421,1,0,0,0,444,426,1,0,0,0,445,55,1,0,0,0,446,450,5,29,
0,0,447,449,5,28,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,
451,1,0,0,0,451,57,1,0,0,0,452,450,1,0,0,0,453,455,5,28,0,0,454,453,1,0,
0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,59,1,0,0,0,458,467,
3,100,50,0,459,467,3,102,51,0,460,467,3,104,52,0,461,467,3,106,53,0,462,
467,3,108,54,0,463,467,3,90,45,0,464,467,3,76,38,0,465,467,3,62,31,0,466,
458,1,0,0,0,466,459,1,0,0,0,466,460,1,0,0,0,466,461,1,0,0,0,466,462,1,0,
0,0,466,463,1,0,0,0,466,464,1,0,0,0,466,465,1,0,0,0,467,61,1,0,0,0,468,470,
3,64,32,0,469,468,1,0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,
0,472,476,1,0,0,0,473,475,3,80,40,0,474,473,1,0,0,0,475,478,1,0,0,0,476,
474,1,0,0,0,476,477,1,0,0,0,477,63,1,0,0,0,478,476,1,0,0,0,479,480,5,22,
0,0,480,515,8,3,0,0,481,482,5,21,0,0,482,515,8,4,0,0,483,484,5,6,0,0,484,
485,5,17,0,0,485,515,8,3,0,0,486,487,5,6,0,0,487,515,8,5,0,0,488,489,5,5,
0,0,489,515,5,17,0,0,490,491,5,23,0,0,491,515,8,4,0,0,492,493,5,25,0,0,493,
515,8,4,0,0,494,495,5,5,0,0,495,515,8,5,0,0,496,515,5,5,0,0,497,498,3,116,
58,0,498,499,3,116,58,0,499,515,1,0,0,0,500,515,5,4,0,0,501,515,5,8,0,0,
502,515,5,9,0,0,503,515,5,10,0,0,504,515,5,11,0,0,505,515,5,18,0,0,506,515,
5,19,0,0,507,515,5,15,0,0,508,515,5,16,0,0,509,515,5,17,0,0,510,515,5,25,
0,0,511,515,5,12,0,0,512,515,5,13,0,0,513,515,5,30,0,0,514,479,1,0,0,0,514,
481,1,0,0,0,514,483,1,0,0,0,514,486,1,0,0,0,514,488,1,0,0,0,514,490,1,0,
0,0,514,492,1,0,0,0,514,494,1,0,0,0,514,496,1,0,0,0,514,497,1,0,0,0,514,
500,1,0,0,0,514,501,1,0,0,0,514,502,1,0,0,0,514,503,1,0,0,0,514,504,1,0,
0,0,514,505,1,0,0,0,514,506,1,0,0,0,514,507,1,0,0,0,514,508,1,0,0,0,514,
509,1,0,0,0,514,510,1,0,0,0,514,511,1,0,0,0,514,512,1,0,0,0,514,513,1,0,
0,0,515,65,1,0,0,0,516,518,3,68,34,0,517,516,1,0,0,0,518,519,1,0,0,0,519,
517,1,0,0,0,519,520,1,0,0,0,520,524,1,0,0,0,521,523,3,80,40,0,522,521,1,
0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,67,1,0,0,0,526,
524,1,0,0,0,527,537,3,70,35,0,528,537,3,64,32,0,529,531,3,78,39,0,530,532,
3,78,39,0,531,530,1,0,0,0,532,533,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,
0,534,537,1,0,0,0,535,537,5,28,0,0,536,527,1,0,0,0,536,528,1,0,0,0,536,529,
1,0,0,0,536,535,1,0,0,0,537,69,1,0,0,0,538,539,5,10,0,0,539,540,5,27,0,0,
540,553,5,11,0,0,541,542,5,8,0,0,542,543,5,27,0,0,543,553,5,9,0,0,544,545,
5,16,0,0,545,546,5,27,0,0,546,553,5,16,0,0,547,548,5,16,0,0,548,549,5,15,
0,0,549,550,5,27,0,0,550,551,5,15,0,0,551,553,5,16,0,0,552,538,1,0,0,0,552,
541,1,0,0,0,552,544,1,0,0,0,552,547,1,0,0,0,553,71,1,0,0,0,554,563,3,100,
50,0,555,563,3,102,51,0,556,563,3,104,52,0,557,563,3,106,53,0,558,563,3,
108,54,0,559,563,3,90,45,0,560,563,3,76,38,0,561,563,3,66,33,0,562,554,1,
0,0,0,562,555,1,0,0,0,562,556,1,0,0,0,562,557,1,0,0,0,562,558,1,0,0,0,562,
559,1,0,0,0,562,560,1,0,0,0,562,561,1,0,0,0,563,73,1,0,0,0,564,567,3,82,
41,0,565,567,3,72,36,0,566,564,1,0,0,0,566,565,1,0,0,0,567,75,1,0,0,0,568,
569,5,13,0,0,569,570,5,28,0,0,570,571,3,42,21,0,571,77,1,0,0,0,572,590,5,
18,0,0,573,590,5,6,0,0,574,590,5,5,0,0,575,590,5,28,0,0,576,590,5,8,0,0,
577,590,5,9,0,0,578,590,5,10,0,0,579,590,5,11,0,0,580,590,5,19,0,0,581,590,
3,116,58,0,582,590,5,12,0,0,583,590,5,13,0,0,584,590,5,15,0,0,585,590,5,
17,0,0,586,587,5,27,0,0,587,590,5,28,0,0,588,590,5,30,0,0,589,572,1,0,0,
0,589,573,1,0,0,0,589,574,1,0,0,0,589,575,1,0,0,0,589,576,1,0,0,0,589,577,
1,0,0,0,589,578,1,0,0,0,589,579,1,0,0,0,589,580,1,0,0,0,589,581,1,0,0,0,
589,582,1,0,0,0,589,583,1,0,0,0,589,584,1,0,0,0,589,585,1,0,0,0,589,586,
1,0,0,0,589,588,1,0,0,0,590,79,1,0,0,0,591,599,3,78,39,0,592,599,3,70,35,
0,593,599,5,23,0,0,594,599,5,3,0,0,595,599,5,24,0,0,596,599,5,17,0,0,597,
599,5,7,0,0,598,591,1,0,0,0,598,592,1,0,0,0,598,593,1,0,0,0,598,594,1,0,
0,0,598,595,1,0,0,0,598,596,1,0,0,0,598,597,1,0,0,0,599,81,1,0,0,0,600,602,
5,27,0,0,601,600,1,0,0,0,602,603,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,
604,605,1,0,0,0,605,670,5,29,0,0,606,608,5,27,0,0,607,606,1,0,0,0,608,609,
1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,3,86,43,
0,612,625,3,84,42,0,613,617,5,29,0,0,614,616,5,27,0,0,615,614,1,0,0,0,616,
619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,
0,0,620,621,3,86,43,0,621,622,3,84,42,0,622,624,1,0,0,0,623,613,1,0,0,0,
624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,631,1,0,0,0,627,625,
1,0,0,0,628,630,5,27,0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,
631,632,1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,635,5,29,0,0,635,670,
1,0,0,0,636,638,5,27,0,0,637,636,1,0,0,0,638,639,1,0,0,0,639,637,1,0,0,0,
639,640,1,0,0,0,640,641,1,0,0,0,641,642,3,86,43,0,642,646,3,84,42,0,643,
645,5,27,0,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,
0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,29,0,0,650,670,1,0,0,0,651,
653,5,27,0,0,652,651,1,0,0,0,653,654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,
0,0,655,657,1,0,0,0,656,658,5,28,0,0,657,656,1,0,0,0,658,659,1,0,0,0,659,
657,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,663,3,84,42,0,662,664,5,
27,0,0,663,662,1,0,0,0,664,665,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,
667,1,0,0,0,667,668,5,29,0,0,668,670,1,0,0,0,669,601,1,0,0,0,669,607,1,0,
0,0,669,637,1,0,0,0,669,652,1,0,0,0,670,83,1,0,0,0,671,673,3,88,44,0,672,
671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,686,1,0,
0,0,676,674,1,0,0,0,677,679,5,27,0,0,678,677,1,0,0,0,679,682,1,0,0,0,680,
678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,680,1,0,0,0,683,685,3,88,
44,0,684,680,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,
85,1,0,0,0,688,686,1,0,0,0,689,690,8,6,0,0,690,87,1,0,0,0,691,692,8,7,0,
0,692,89,1,0,0,0,693,694,5,19,0,0,694,695,5,5,0,0,695,697,5,19,0,0,696,693,
1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,3,92,46,0,699,701,5,25,0,
0,700,699,1,0,0,0,700,701,1,0,0,0,701,91,1,0,0,0,702,706,5,26,0,0,703,705,
5,26,0,0,704,703,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,
707,709,1,0,0,0,708,706,1,0,0,0,709,711,3,94,47,0,710,712,5,26,0,0,711,710,
1,0,0,0,712,713,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,726,1,0,0,0,
715,716,5,26,0,0,716,717,3,96,48,0,717,719,3,94,47,0,718,720,5,26,0,0,719,
718,1,0,0,0,720,721,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,726,1,0,
0,0,723,724,5,26,0,0,724,726,5,26,0,0,725,702,1,0,0,0,725,715,1,0,0,0,725,
723,1,0,0,0,726,93,1,0,0,0,727,729,3,98,49,0,728,727,1,0,0,0,729,730,1,0,
0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,95,1,0,0,0,732,733,8,8,0,0,733,97,
1,0,0,0,734,738,8,9,0,0,735,736,5,26,0,0,736,738,8,9,0,0,737,734,1,0,0,0,
737,735,1,0,0,0,738,99,1,0,0,0,739,741,5,30,0,0,740,739,1,0,0,0,741,742,
1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,5,25,0,0,
745,101,1,0,0,0,746,748,5,25,0,0,747,749,3,114,57,0,748,747,1,0,0,0,749,
750,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,753,5,19,
0,0,753,754,5,28,0,0,754,755,3,110,55,0,755,103,1,0,0,0,756,758,5,25,0,0,
757,759,5,30,0,0,758,757,1,0,0,0,759,760,1,0,0,0,760,758,1,0,0,0,760,761,
1,0,0,0,761,105,1,0,0,0,762,764,5,26,0,0,763,765,3,114,57,0,764,763,1,0,
0,0,765,766,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,
769,5,28,0,0,769,770,5,12,0,0,770,771,3,110,55,0,771,772,5,13,0,0,772,773,
5,26,0,0,773,774,5,25,0,0,774,775,5,28,0,0,775,107,1,0,0,0,776,777,5,1,0,
0,777,779,5,26,0,0,778,780,3,114,57,0,779,778,1,0,0,0,780,781,1,0,0,0,781,
779,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,784,5,28,0,0,784,785,5,12,
0,0,785,786,3,110,55,0,786,787,5,13,0,0,787,788,5,26,0,0,788,795,1,0,0,0,
789,790,5,1,0,0,790,791,5,26,0,0,791,792,3,110,55,0,792,793,5,26,0,0,793,
795,1,0,0,0,794,776,1,0,0,0,794,789,1,0,0,0,795,109,1,0,0,0,796,798,3,112,
56,0,797,796,1,0,0,0,798,799,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,
111,1,0,0,0,801,802,8,9,0,0,802,113,1,0,0,0,803,804,8,10,0,0,804,115,1,0,
0,0,805,806,7,11,0,0,806,117,1,0,0,0,105,120,122,128,135,140,147,152,154,
164,170,183,189,193,199,205,215,218,222,227,232,238,243,250,255,257,265,
269,275,282,288,290,296,303,309,319,325,328,334,338,344,349,354,356,362,
368,372,377,382,388,390,393,397,402,408,413,417,423,428,434,441,444,450,
456,466,471,476,514,519,524,533,536,552,562,566,589,598,603,609,617,625,
631,639,646,654,659,665,669,674,680,686,696,700,706,713,721,725,730,737,
742,750,760,766,781,794,799];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ReStructuredTextParser extends antlr4.Parser {

    static grammarFileName = "ReStructuredText.g4";
    static literalNames = [ null, "':doc:'", null, null, null, null, null, 
                            null, "'['", "']'", "'('", "')'", "'<'", "'>'", 
                            "'^'", "'\"'", "'''", "'.'", "';'", "':'", "'='", 
                            "'+'", "'-'", "'|'", null, "'_'", "'`'", "'*'" ];
    static symbolicNames = [ null, null, "SectionSeparator", "Literal", 
                             "TimeStar", "Alphabet", "Numbers", "Quote", 
                             "SquareLeft", "SquareRight", "RoundLeft", "RoundRight", 
                             "AngleLeft", "AngleRight", "Hat", "QuotationDouble", 
                             "QuotationSingle", "Dot", "SemiColon", "Colon", 
                             "Equal", "Plus", "Minus", "Block", "Comment", 
                             "UnderScore", "BackTick", "Star", "Space", 
                             "LineBreak", "Any" ];
    static ruleNames = [ "parse", "element", "sectionElement", "comment", 
                         "commentParagraphs", "commentRest", "commentParagraph", 
                         "commentLineNoBreak", "commentLine", "commentLineAtoms", 
                         "paragraph", "section", "title", "lineBlock", "lineBlockLine", 
                         "listItemBullet", "bulletCrossLine", "bulletSimple", 
                         "bullet", "listItemEnumerated", "paragraphNoBreak", 
                         "lineNoBreak", "lines", "linesNormal", "linesStar", 
                         "lineNormal", "lineStar", "lineSpecial", "empty_line", 
                         "indentation", "spanLineStartNoStar", "textLineStart", 
                         "lineStart_fragment", "text", "textStart", "forcedText", 
                         "spanNoStar", "span", "quotedLiteral", "text_fragment_start", 
                         "text_fragment", "starText", "starAtoms", "starNoSpace", 
                         "starAtom", "backTickText", "body", "backTickAtoms", 
                         "backTickNoSpace", "backTickAtom", "reference", 
                         "referenceIn", "hyperlinkTarget", "hyperlink", 
                         "hyperlinkDoc", "url", "urlAtom", "hyperlinkAtom", 
                         "separator" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ReStructuredTextParser.ruleNames;
        this.literalNames = ReStructuredTextParser.literalNames;
        this.symbolicNames = ReStructuredTextParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ReStructuredTextParser.RULE_parse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 120; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 120;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 118;
	        		    this.element();
	        		    break;

	        		case 2:
	        		    this.state = 119;
	        		    this.empty_line();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 122; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 124;
	        this.match(ReStructuredTextParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ReStructuredTextParser.RULE_element);
	    try {
	        this.state = 128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 126;
	            this.section();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 127;
	            this.sectionElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sectionElement() {
	    let localctx = new SectionElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ReStructuredTextParser.RULE_sectionElement);
	    try {
	        this.state = 135;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 130;
	            this.listItemBullet();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 131;
	            this.listItemEnumerated();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 132;
	            this.paragraph();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 133;
	            this.lineBlock();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 134;
	            this.comment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ReStructuredTextParser.RULE_comment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ReStructuredTextParser.Space) {
	            this.state = 137;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 143;
	        this.match(ReStructuredTextParser.Comment);
	        this.state = 147;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 144;
	                this.match(ReStructuredTextParser.Space); 
	            }
	            this.state = 149;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 150;
	            this.commentLineNoBreak();
	            this.state = 152;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            if(la_===1) {
	                this.state = 151;
	                this.commentParagraphs();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentParagraphs() {
	    let localctx = new CommentParagraphsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ReStructuredTextParser.RULE_commentParagraphs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 156;
	        localctx.main = this.commentParagraph();
	        this.state = 157;
	        this.commentRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentRest() {
	    let localctx = new CommentRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ReStructuredTextParser.RULE_commentRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 164;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 159;
	                this.empty_line();
	                this.state = 160;
	                this.commentParagraph(); 
	            }
	            this.state = 166;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentParagraph() {
	    let localctx = new CommentParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ReStructuredTextParser.RULE_commentParagraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 167;
	        		this.commentLine();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 170; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,9, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentLineNoBreak() {
	    let localctx = new CommentLineNoBreakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ReStructuredTextParser.RULE_commentLineNoBreak);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 172;
	        this.commentLineAtoms();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentLine() {
	    let localctx = new CommentLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ReStructuredTextParser.RULE_commentLine);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 175;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 176;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 177;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 178;
	        this.commentLineNoBreak();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentLineAtoms() {
	    let localctx = new CommentLineAtomsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ReStructuredTextParser.RULE_commentLineAtoms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 181; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 180;
	        		_la = this._input.LA(1);
	        		if(_la<=0 || _la===ReStructuredTextParser.LineBreak) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 183; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraph() {
	    let localctx = new ParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ReStructuredTextParser.RULE_paragraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 185;
	        this.lines();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	section() {
	    let localctx = new SectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ReStructuredTextParser.RULE_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 187;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 188;
	            localctx.overline = this.match(ReStructuredTextParser.SectionSeparator);

	        }
	        this.state = 191;
	        this.title();
	        this.state = 193;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ReStructuredTextParser.LineBreak) {
	            this.state = 192;
	            this.match(ReStructuredTextParser.LineBreak);
	        }

	        this.state = 195;
	        this.match(ReStructuredTextParser.SectionSeparator);
	        this.state = 199;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 196;
	                this.match(ReStructuredTextParser.LineBreak); 
	            }
	            this.state = 201;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
	        }

	        this.state = 205;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 202;
	                this.sectionElement(); 
	            }
	            this.state = 207;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	title() {
	    let localctx = new TitleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ReStructuredTextParser.RULE_title);
	    var _la = 0; // Token type
	    try {
	        this.state = 222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 208;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 209;
	            this.textStart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 211;
	            this.lineSpecial();
	            this.state = 213; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 212;
	            		this.match(ReStructuredTextParser.Space);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 215; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,15, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.T__0) | (1 << ReStructuredTextParser.TimeStar) | (1 << ReStructuredTextParser.Alphabet) | (1 << ReStructuredTextParser.Numbers) | (1 << ReStructuredTextParser.SquareLeft) | (1 << ReStructuredTextParser.SquareRight) | (1 << ReStructuredTextParser.RoundLeft) | (1 << ReStructuredTextParser.RoundRight) | (1 << ReStructuredTextParser.AngleLeft) | (1 << ReStructuredTextParser.AngleRight) | (1 << ReStructuredTextParser.Hat) | (1 << ReStructuredTextParser.QuotationDouble) | (1 << ReStructuredTextParser.QuotationSingle) | (1 << ReStructuredTextParser.Dot) | (1 << ReStructuredTextParser.SemiColon) | (1 << ReStructuredTextParser.Colon) | (1 << ReStructuredTextParser.Equal) | (1 << ReStructuredTextParser.Plus) | (1 << ReStructuredTextParser.Minus) | (1 << ReStructuredTextParser.Block) | (1 << ReStructuredTextParser.UnderScore) | (1 << ReStructuredTextParser.BackTick) | (1 << ReStructuredTextParser.Space) | (1 << ReStructuredTextParser.Any))) !== 0)) {
	                this.state = 217;
	                this.paragraphNoBreak();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 220;
	            this.lineNormal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 221;
	            this.lineStar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineBlock() {
	    let localctx = new LineBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ReStructuredTextParser.RULE_lineBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 225;
	        this.lineBlockLine();
	        this.state = 227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 226;
	            this.match(ReStructuredTextParser.LineBreak);

	        }
	        this.state = 232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ReStructuredTextParser.Block) {
	            this.state = 229;
	            this.lineBlockLine();
	            this.state = 234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineBlockLine() {
	    let localctx = new LineBlockLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ReStructuredTextParser.RULE_lineBlockLine);
	    try {
	        this.state = 257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 235;
	            this.match(ReStructuredTextParser.Block);
	            this.state = 236;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 238;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 237;
	                this.indentation();

	            }
	            this.state = 243;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 240;
	                    this.span(); 
	                }
	                this.state = 245;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	            }

	            this.state = 246;
	            this.starText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 247;
	            this.match(ReStructuredTextParser.Block);
	            this.state = 248;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 250;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 249;
	                this.indentation();

	            }
	            this.state = 253; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 252;
	            		this.span();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 255; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,23, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listItemBullet() {
	    let localctx = new ListItemBulletContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ReStructuredTextParser.RULE_listItemBullet);
	    var _la = 0; // Token type
	    try {
	        this.state = 269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 259;
	            this.bulletCrossLine();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 260;
	            this.bulletSimple();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 261;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ReStructuredTextParser.Space) {
	                this.state = 262;
	                this.match(ReStructuredTextParser.Space);
	                this.state = 267;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 268;
	            localctx.special = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===ReStructuredTextParser.Plus || _la===ReStructuredTextParser.Minus)) {
	                localctx.special = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulletCrossLine() {
	    let localctx = new BulletCrossLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ReStructuredTextParser.RULE_bulletCrossLine);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ReStructuredTextParser.Space) {
	            this.state = 272;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 278;
	        this.bullet();
	        this.state = 282;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 279;
	                this.match(ReStructuredTextParser.Space); 
	            }
	            this.state = 284;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	        this.state = 290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 286; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 285;
	            		this.paragraph();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 288; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bulletSimple() {
	    let localctx = new BulletSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ReStructuredTextParser.RULE_bulletSimple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 292;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ReStructuredTextParser.Space) {
	            this.state = 293;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 299;
	        this.bullet();
	        this.state = 301; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 300;
	        		this.match(ReStructuredTextParser.Space);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 303; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,32, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 305;
	        this.paragraphNoBreak();
	        this.state = 309;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 306;
	                this.paragraph(); 
	            }
	            this.state = 311;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bullet() {
	    let localctx = new BulletContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ReStructuredTextParser.RULE_bullet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Plus) | (1 << ReStructuredTextParser.Minus) | (1 << ReStructuredTextParser.Star))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listItemEnumerated() {
	    let localctx = new ListItemEnumeratedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ReStructuredTextParser.RULE_listItemEnumerated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 314;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 315;
	        localctx.enumerated = this.lineSpecial();
	        this.state = 317; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 316;
	        		this.match(ReStructuredTextParser.Space);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 319; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,34, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 321;
	            this.paragraphNoBreak();
	            this.state = 325;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 322;
	                    this.paragraph(); 
	                }
	                this.state = 327;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraphNoBreak() {
	    let localctx = new ParagraphNoBreakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ReStructuredTextParser.RULE_paragraphNoBreak);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.lineNoBreak();
	        this.state = 334;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 331;
	                this.lines(); 
	            }
	            this.state = 336;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineNoBreak() {
	    let localctx = new LineNoBreakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ReStructuredTextParser.RULE_lineNoBreak);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ReStructuredTextParser.Space) {
	            this.state = 337;
	            this.indentation();
	        }

	        this.state = 340;
	        this.spanLineStartNoStar();
	        this.state = 344;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 341;
	                this.span(); 
	            }
	            this.state = 346;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lines() {
	    let localctx = new LinesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ReStructuredTextParser.RULE_lines);
	    try {
	        this.state = 349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 347;
	            this.linesStar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 348;
	            this.linesNormal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linesNormal() {
	    let localctx = new LinesNormalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ReStructuredTextParser.RULE_linesNormal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this.lineNormal();
	        this.state = 356;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 352;
	            this.linesStar();
	            break;

	        case 2:
	            this.state = 354;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	            if(la_===1) {
	                this.state = 353;
	                this.linesNormal();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linesStar() {
	    let localctx = new LinesStarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ReStructuredTextParser.RULE_linesStar);
	    try {
	        this.state = 368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 358;
	            this.lineStar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 359;
	            this.lineStar();
	            this.state = 360;
	            this.lineNoBreak();
	            this.state = 362;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1+1) {
	                this.state = 361;
	                this.linesNormal();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 364;
	            this.lineStar();
	            this.state = 365;
	            this.lineNoBreak();
	            this.state = 366;
	            this.linesStar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineNormal() {
	    let localctx = new LineNormalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ReStructuredTextParser.RULE_lineNormal);
	    var _la = 0; // Token type
	    try {
	        this.state = 393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 370;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ReStructuredTextParser.Space) {
	                this.state = 371;
	                this.indentation();
	            }

	            this.state = 375; 
	            this._errHandler.sync(this);
	            var _alt = 1+1;
	            do {
	            	switch (_alt) {
	            	case 1+1:
	            		this.state = 374;
	            		this.spanLineStartNoStar();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 377; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,46, this._ctx);
	            } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 390;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	            if(la_===1) {
	                this.state = 382;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1+1) {
	                        this.state = 379;
	                        this.span(); 
	                    }
	                    this.state = 384;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	                }

	                this.state = 386; 
	                this._errHandler.sync(this);
	                var _alt = 1+1;
	                do {
	                	switch (_alt) {
	                	case 1+1:
	                		this.state = 385;
	                		this.spanNoStar();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 388; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,48, this._ctx);
	                } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 392;
	            this.lineSpecial();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineStar() {
	    let localctx = new LineStarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ReStructuredTextParser.RULE_lineStar);
	    var _la = 0; // Token type
	    try {
	        this.state = 417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 395;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ReStructuredTextParser.Space) {
	                this.state = 396;
	                this.indentation();
	            }

	            this.state = 402;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 399;
	                    this.spanLineStartNoStar(); 
	                }
	                this.state = 404;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	            }

	            this.state = 405;
	            this.starText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 408;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	            if(la_===1) {
	                this.state = 407;
	                this.indentation();

	            }
	            this.state = 411; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 410;
	            		this.text_fragment();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 413; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,54, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 415;
	            this.starText();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineSpecial() {
	    let localctx = new LineSpecialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ReStructuredTextParser.RULE_lineSpecial);
	    var _la = 0; // Token type
	    try {
	        this.state = 444;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 419;
	            this.match(ReStructuredTextParser.Numbers);
	            this.state = 420;
	            this.match(ReStructuredTextParser.Dot);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ReStructuredTextParser.Space) {
	                this.state = 422;
	                this.indentation();
	            }

	            this.state = 425;
	            this.match(ReStructuredTextParser.Numbers);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 426;
	            this.match(ReStructuredTextParser.LineBreak);
	            this.state = 428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ReStructuredTextParser.Space) {
	                this.state = 427;
	                this.indentation();
	            }

	            this.state = 430;
	            this.match(ReStructuredTextParser.SectionSeparator);

	            this.state = 432; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 431;
	                this.match(ReStructuredTextParser.Space);
	                this.state = 434; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Space);
	            this.state = 436;
	            this.match(ReStructuredTextParser.SectionSeparator);
	            this.state = 441;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 438;
	                    this.match(ReStructuredTextParser.Space); 
	                }
	                this.state = 443;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	empty_line() {
	    let localctx = new Empty_lineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ReStructuredTextParser.RULE_empty_line);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this.match(ReStructuredTextParser.LineBreak);
	        this.state = 450;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 447;
	                this.match(ReStructuredTextParser.Space); 
	            }
	            this.state = 452;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indentation() {
	    let localctx = new IndentationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ReStructuredTextParser.RULE_indentation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 454; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 453;
	        		this.match(ReStructuredTextParser.Space);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 456; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,62, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spanLineStartNoStar() {
	    let localctx = new SpanLineStartNoStarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ReStructuredTextParser.RULE_spanLineStartNoStar);
	    try {
	        this.state = 466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 458;
	            this.reference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 459;
	            this.referenceIn();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 460;
	            this.hyperlinkTarget();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 461;
	            this.hyperlink();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 462;
	            this.hyperlinkDoc();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 463;
	            this.backTickText();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 464;
	            this.quotedLiteral();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 465;
	            this.textLineStart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textLineStart() {
	    let localctx = new TextLineStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ReStructuredTextParser.RULE_textLineStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 468;
	        		this.lineStart_fragment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 471; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,64, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 476;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 473;
	                this.text_fragment(); 
	            }
	            this.state = 478;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineStart_fragment() {
	    let localctx = new LineStart_fragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ReStructuredTextParser.RULE_lineStart_fragment);
	    var _la = 0; // Token type
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 479;
	            this.match(ReStructuredTextParser.Minus);
	            this.state = 480;
	            _la = this._input.LA(1);
	            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.Space) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 481;
	            this.match(ReStructuredTextParser.Plus);
	            this.state = 482;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===ReStructuredTextParser.Star || _la===ReStructuredTextParser.Space) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 483;
	            this.match(ReStructuredTextParser.Numbers);
	            this.state = 484;
	            this.match(ReStructuredTextParser.Dot);
	            this.state = 485;
	            _la = this._input.LA(1);
	            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.Space) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 486;
	            this.match(ReStructuredTextParser.Numbers);
	            this.state = 487;
	            _la = this._input.LA(1);
	            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Dot) | (1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 488;
	            this.match(ReStructuredTextParser.Alphabet);
	            this.state = 489;
	            this.match(ReStructuredTextParser.Dot);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 490;
	            this.match(ReStructuredTextParser.Block);
	            this.state = 491;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===ReStructuredTextParser.Star || _la===ReStructuredTextParser.Space) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 492;
	            this.match(ReStructuredTextParser.UnderScore);
	            this.state = 493;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===ReStructuredTextParser.Star || _la===ReStructuredTextParser.Space) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 494;
	            this.match(ReStructuredTextParser.Alphabet);
	            this.state = 495;
	            _la = this._input.LA(1);
	            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Dot) | (1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 496;
	            this.match(ReStructuredTextParser.Alphabet);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 497;
	            this.separator();
	            this.state = 498;
	            this.separator();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 500;
	            this.match(ReStructuredTextParser.TimeStar);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 501;
	            this.match(ReStructuredTextParser.SquareLeft);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 502;
	            this.match(ReStructuredTextParser.SquareRight);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 503;
	            this.match(ReStructuredTextParser.RoundLeft);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 504;
	            this.match(ReStructuredTextParser.RoundRight);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 505;
	            this.match(ReStructuredTextParser.SemiColon);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 506;
	            this.match(ReStructuredTextParser.Colon);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 507;
	            this.match(ReStructuredTextParser.QuotationDouble);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 508;
	            this.match(ReStructuredTextParser.QuotationSingle);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 509;
	            this.match(ReStructuredTextParser.Dot);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 510;
	            this.match(ReStructuredTextParser.UnderScore);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 511;
	            this.match(ReStructuredTextParser.AngleLeft);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 512;
	            this.match(ReStructuredTextParser.AngleRight);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 513;
	            this.match(ReStructuredTextParser.Any);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text() {
	    let localctx = new TextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ReStructuredTextParser.RULE_text);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 516;
	        		this.textStart();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 519; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 524;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 521;
	                this.text_fragment(); 
	            }
	            this.state = 526;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStart() {
	    let localctx = new TextStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ReStructuredTextParser.RULE_textStart);
	    try {
	        this.state = 536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 527;
	            this.forcedText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 528;
	            this.lineStart_fragment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 529;
	            this.text_fragment_start();
	            this.state = 531; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 530;
	            		this.text_fragment_start();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 533; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,69, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 535;
	            this.match(ReStructuredTextParser.Space);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forcedText() {
	    let localctx = new ForcedTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ReStructuredTextParser.RULE_forcedText);
	    try {
	        this.state = 552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 538;
	            this.match(ReStructuredTextParser.RoundLeft);
	            this.state = 539;
	            this.match(ReStructuredTextParser.Star);
	            this.state = 540;
	            this.match(ReStructuredTextParser.RoundRight);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this.match(ReStructuredTextParser.SquareLeft);
	            this.state = 542;
	            this.match(ReStructuredTextParser.Star);
	            this.state = 543;
	            this.match(ReStructuredTextParser.SquareRight);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 544;
	            this.match(ReStructuredTextParser.QuotationSingle);
	            this.state = 545;
	            this.match(ReStructuredTextParser.Star);
	            this.state = 546;
	            this.match(ReStructuredTextParser.QuotationSingle);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 547;
	            this.match(ReStructuredTextParser.QuotationSingle);
	            this.state = 548;
	            this.match(ReStructuredTextParser.QuotationDouble);
	            this.state = 549;
	            this.match(ReStructuredTextParser.Star);
	            this.state = 550;
	            this.match(ReStructuredTextParser.QuotationDouble);
	            this.state = 551;
	            this.match(ReStructuredTextParser.QuotationSingle);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spanNoStar() {
	    let localctx = new SpanNoStarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ReStructuredTextParser.RULE_spanNoStar);
	    try {
	        this.state = 562;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 554;
	            this.reference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 555;
	            this.referenceIn();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 556;
	            this.hyperlinkTarget();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 557;
	            this.hyperlink();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 558;
	            this.hyperlinkDoc();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 559;
	            this.backTickText();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 560;
	            this.quotedLiteral();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 561;
	            this.text();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	span() {
	    let localctx = new SpanContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ReStructuredTextParser.RULE_span);
	    try {
	        this.state = 566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 564;
	            this.starText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.spanNoStar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotedLiteral() {
	    let localctx = new QuotedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ReStructuredTextParser.RULE_quotedLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this.match(ReStructuredTextParser.AngleRight);
	        this.state = 569;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 570;
	        this.lineNoBreak();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text_fragment_start() {
	    let localctx = new Text_fragment_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ReStructuredTextParser.RULE_text_fragment_start);
	    try {
	        this.state = 589;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ReStructuredTextParser.SemiColon:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 572;
	            this.match(ReStructuredTextParser.SemiColon);
	            break;
	        case ReStructuredTextParser.Numbers:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this.match(ReStructuredTextParser.Numbers);
	            break;
	        case ReStructuredTextParser.Alphabet:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 574;
	            this.match(ReStructuredTextParser.Alphabet);
	            break;
	        case ReStructuredTextParser.Space:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 575;
	            this.match(ReStructuredTextParser.Space);
	            break;
	        case ReStructuredTextParser.SquareLeft:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 576;
	            this.match(ReStructuredTextParser.SquareLeft);
	            break;
	        case ReStructuredTextParser.SquareRight:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 577;
	            this.match(ReStructuredTextParser.SquareRight);
	            break;
	        case ReStructuredTextParser.RoundLeft:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 578;
	            this.match(ReStructuredTextParser.RoundLeft);
	            break;
	        case ReStructuredTextParser.RoundRight:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 579;
	            this.match(ReStructuredTextParser.RoundRight);
	            break;
	        case ReStructuredTextParser.Colon:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 580;
	            this.match(ReStructuredTextParser.Colon);
	            break;
	        case ReStructuredTextParser.Hat:
	        case ReStructuredTextParser.Equal:
	        case ReStructuredTextParser.Plus:
	        case ReStructuredTextParser.Minus:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 581;
	            this.separator();
	            break;
	        case ReStructuredTextParser.AngleLeft:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 582;
	            this.match(ReStructuredTextParser.AngleLeft);
	            break;
	        case ReStructuredTextParser.AngleRight:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 583;
	            this.match(ReStructuredTextParser.AngleRight);
	            break;
	        case ReStructuredTextParser.QuotationDouble:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 584;
	            this.match(ReStructuredTextParser.QuotationDouble);
	            break;
	        case ReStructuredTextParser.Dot:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 585;
	            this.match(ReStructuredTextParser.Dot);
	            break;
	        case ReStructuredTextParser.Star:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 586;
	            this.match(ReStructuredTextParser.Star);
	            this.state = 587;
	            this.match(ReStructuredTextParser.Space);
	            break;
	        case ReStructuredTextParser.Any:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 588;
	            this.match(ReStructuredTextParser.Any);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text_fragment() {
	    let localctx = new Text_fragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ReStructuredTextParser.RULE_text_fragment);
	    try {
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 591;
	            this.text_fragment_start();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 592;
	            this.forcedText();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 593;
	            this.match(ReStructuredTextParser.Block);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 594;
	            this.match(ReStructuredTextParser.Literal);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 595;
	            this.match(ReStructuredTextParser.Comment);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 596;
	            this.match(ReStructuredTextParser.Dot);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 597;
	            this.match(ReStructuredTextParser.Quote);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starText() {
	    let localctx = new StarTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ReStructuredTextParser.RULE_starText);
	    var _la = 0; // Token type
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 601; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 600;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 603; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Star);
	            this.state = 605;
	            this.match(ReStructuredTextParser.LineBreak);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 607; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 606;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 609; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Star);
	            this.state = 611;
	            this.starNoSpace();
	            this.state = 612;
	            this.starAtoms();
	            this.state = 625;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 613;
	                    this.match(ReStructuredTextParser.LineBreak);
	                    this.state = 617;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===ReStructuredTextParser.Star) {
	                        this.state = 614;
	                        this.match(ReStructuredTextParser.Star);
	                        this.state = 619;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 620;
	                    this.starNoSpace();
	                    this.state = 621;
	                    this.starAtoms(); 
	                }
	                this.state = 627;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	            }

	            this.state = 631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ReStructuredTextParser.Star) {
	                this.state = 628;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 633;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 634;
	            this.match(ReStructuredTextParser.LineBreak);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 637; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 636;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 639; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Star);
	            this.state = 641;
	            this.starNoSpace();
	            this.state = 642;
	            this.starAtoms();
	            this.state = 646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ReStructuredTextParser.Star) {
	                this.state = 643;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 648;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 649;
	            this.match(ReStructuredTextParser.LineBreak);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 652; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 651;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 654; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Star);
	            this.state = 657; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 656;
	            		this.match(ReStructuredTextParser.Space);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 659; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,84, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 661;
	            this.starAtoms();
	            this.state = 663; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 662;
	                this.match(ReStructuredTextParser.Star);
	                this.state = 665; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ReStructuredTextParser.Star);
	            this.state = 667;
	            this.match(ReStructuredTextParser.LineBreak);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starAtoms() {
	    let localctx = new StarAtomsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ReStructuredTextParser.RULE_starAtoms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 671;
	                this.starAtom(); 
	            }
	            this.state = 676;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	        this.state = 686;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 680;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ReStructuredTextParser.Star) {
	                    this.state = 677;
	                    this.match(ReStructuredTextParser.Star);
	                    this.state = 682;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 683;
	                this.starAtom(); 
	            }
	            this.state = 688;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starNoSpace() {
	    let localctx = new StarNoSpaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ReStructuredTextParser.RULE_starNoSpace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        _la = this._input.LA(1);
	        if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.SectionSeparator) | (1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.Space) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starAtom() {
	    let localctx = new StarAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ReStructuredTextParser.RULE_starAtom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        _la = this._input.LA(1);
	        if(_la<=0 || _la===ReStructuredTextParser.Star || _la===ReStructuredTextParser.LineBreak) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backTickText() {
	    let localctx = new BackTickTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ReStructuredTextParser.RULE_backTickText);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ReStructuredTextParser.Colon) {
	            this.state = 693;
	            this.match(ReStructuredTextParser.Colon);
	            this.state = 694;
	            localctx.titled = this.match(ReStructuredTextParser.Alphabet);
	            this.state = 695;
	            this.match(ReStructuredTextParser.Colon);
	        }

	        this.state = 698;
	        this.body();
	        this.state = 700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        if(la_===1) {
	            this.state = 699;
	            this.match(ReStructuredTextParser.UnderScore);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ReStructuredTextParser.RULE_body);
	    try {
	        this.state = 725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 702;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 706;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 703;
	                    this.match(ReStructuredTextParser.BackTick); 
	                }
	                this.state = 708;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	            }

	            this.state = 709;
	            this.backTickAtoms();
	            this.state = 711; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 710;
	            		this.match(ReStructuredTextParser.BackTick);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 713; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,93, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 715;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 716;
	            this.backTickNoSpace();
	            this.state = 717;
	            this.backTickAtoms();
	            this.state = 719; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 718;
	            		this.match(ReStructuredTextParser.BackTick);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 721; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,94, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 723;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 724;
	            this.match(ReStructuredTextParser.BackTick);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backTickAtoms() {
	    let localctx = new BackTickAtomsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ReStructuredTextParser.RULE_backTickAtoms);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 727;
	        		this.backTickAtom();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 730; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,96, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backTickNoSpace() {
	    let localctx = new BackTickNoSpaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ReStructuredTextParser.RULE_backTickNoSpace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        _la = this._input.LA(1);
	        if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.BackTick) | (1 << ReStructuredTextParser.Space) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backTickAtom() {
	    let localctx = new BackTickAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ReStructuredTextParser.RULE_backTickAtom);
	    var _la = 0; // Token type
	    try {
	        this.state = 737;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ReStructuredTextParser.T__0:
	        case ReStructuredTextParser.SectionSeparator:
	        case ReStructuredTextParser.Literal:
	        case ReStructuredTextParser.TimeStar:
	        case ReStructuredTextParser.Alphabet:
	        case ReStructuredTextParser.Numbers:
	        case ReStructuredTextParser.Quote:
	        case ReStructuredTextParser.SquareLeft:
	        case ReStructuredTextParser.SquareRight:
	        case ReStructuredTextParser.RoundLeft:
	        case ReStructuredTextParser.RoundRight:
	        case ReStructuredTextParser.AngleLeft:
	        case ReStructuredTextParser.AngleRight:
	        case ReStructuredTextParser.Hat:
	        case ReStructuredTextParser.QuotationDouble:
	        case ReStructuredTextParser.QuotationSingle:
	        case ReStructuredTextParser.Dot:
	        case ReStructuredTextParser.SemiColon:
	        case ReStructuredTextParser.Colon:
	        case ReStructuredTextParser.Equal:
	        case ReStructuredTextParser.Plus:
	        case ReStructuredTextParser.Minus:
	        case ReStructuredTextParser.Block:
	        case ReStructuredTextParser.Comment:
	        case ReStructuredTextParser.UnderScore:
	        case ReStructuredTextParser.Star:
	        case ReStructuredTextParser.Space:
	        case ReStructuredTextParser.Any:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===ReStructuredTextParser.BackTick || _la===ReStructuredTextParser.LineBreak) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case ReStructuredTextParser.BackTick:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 735;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 736;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===ReStructuredTextParser.BackTick || _la===ReStructuredTextParser.LineBreak) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reference() {
	    let localctx = new ReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ReStructuredTextParser.RULE_reference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 739;
	            this.match(ReStructuredTextParser.Any);
	            this.state = 742; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ReStructuredTextParser.Any);
	        this.state = 744;
	        this.match(ReStructuredTextParser.UnderScore);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceIn() {
	    let localctx = new ReferenceInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ReStructuredTextParser.RULE_referenceIn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this.match(ReStructuredTextParser.UnderScore);
	        this.state = 748; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 747;
	        		this.hyperlinkAtom();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 750; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,99, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 752;
	        this.match(ReStructuredTextParser.Colon);
	        this.state = 753;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 754;
	        this.url();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hyperlinkTarget() {
	    let localctx = new HyperlinkTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ReStructuredTextParser.RULE_hyperlinkTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        this.match(ReStructuredTextParser.UnderScore);
	        this.state = 758; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 757;
	        		this.match(ReStructuredTextParser.Any);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 760; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,100, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hyperlink() {
	    let localctx = new HyperlinkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ReStructuredTextParser.RULE_hyperlink);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(ReStructuredTextParser.BackTick);
	        this.state = 764; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 763;
	        		this.hyperlinkAtom();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 766; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,101, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 768;
	        this.match(ReStructuredTextParser.Space);
	        this.state = 769;
	        this.match(ReStructuredTextParser.AngleLeft);
	        this.state = 770;
	        this.url();
	        this.state = 771;
	        this.match(ReStructuredTextParser.AngleRight);
	        this.state = 772;
	        this.match(ReStructuredTextParser.BackTick);
	        this.state = 773;
	        this.match(ReStructuredTextParser.UnderScore);
	        this.state = 774;
	        this.match(ReStructuredTextParser.Space);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hyperlinkDoc() {
	    let localctx = new HyperlinkDocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ReStructuredTextParser.RULE_hyperlinkDoc);
	    try {
	        this.state = 794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 776;
	            this.match(ReStructuredTextParser.T__0);
	            this.state = 777;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 779; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 778;
	            		this.hyperlinkAtom();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 781; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,102, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 783;
	            this.match(ReStructuredTextParser.Space);
	            this.state = 784;
	            this.match(ReStructuredTextParser.AngleLeft);
	            this.state = 785;
	            this.url();
	            this.state = 786;
	            this.match(ReStructuredTextParser.AngleRight);
	            this.state = 787;
	            this.match(ReStructuredTextParser.BackTick);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 789;
	            this.match(ReStructuredTextParser.T__0);
	            this.state = 790;
	            this.match(ReStructuredTextParser.BackTick);
	            this.state = 791;
	            this.url();
	            this.state = 792;
	            this.match(ReStructuredTextParser.BackTick);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	url() {
	    let localctx = new UrlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ReStructuredTextParser.RULE_url);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 796;
	        		this.urlAtom();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 799; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,104, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	urlAtom() {
	    let localctx = new UrlAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ReStructuredTextParser.RULE_urlAtom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        _la = this._input.LA(1);
	        if(_la<=0 || _la===ReStructuredTextParser.BackTick || _la===ReStructuredTextParser.LineBreak) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hyperlinkAtom() {
	    let localctx = new HyperlinkAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ReStructuredTextParser.RULE_hyperlinkAtom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        _la = this._input.LA(1);
	        if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.AngleLeft) | (1 << ReStructuredTextParser.AngleRight) | (1 << ReStructuredTextParser.BackTick) | (1 << ReStructuredTextParser.Star) | (1 << ReStructuredTextParser.LineBreak))) !== 0)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	separator() {
	    let localctx = new SeparatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ReStructuredTextParser.RULE_separator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 805;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ReStructuredTextParser.Hat) | (1 << ReStructuredTextParser.Equal) | (1 << ReStructuredTextParser.Plus) | (1 << ReStructuredTextParser.Minus))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ReStructuredTextParser.EOF = antlr4.Token.EOF;
ReStructuredTextParser.T__0 = 1;
ReStructuredTextParser.SectionSeparator = 2;
ReStructuredTextParser.Literal = 3;
ReStructuredTextParser.TimeStar = 4;
ReStructuredTextParser.Alphabet = 5;
ReStructuredTextParser.Numbers = 6;
ReStructuredTextParser.Quote = 7;
ReStructuredTextParser.SquareLeft = 8;
ReStructuredTextParser.SquareRight = 9;
ReStructuredTextParser.RoundLeft = 10;
ReStructuredTextParser.RoundRight = 11;
ReStructuredTextParser.AngleLeft = 12;
ReStructuredTextParser.AngleRight = 13;
ReStructuredTextParser.Hat = 14;
ReStructuredTextParser.QuotationDouble = 15;
ReStructuredTextParser.QuotationSingle = 16;
ReStructuredTextParser.Dot = 17;
ReStructuredTextParser.SemiColon = 18;
ReStructuredTextParser.Colon = 19;
ReStructuredTextParser.Equal = 20;
ReStructuredTextParser.Plus = 21;
ReStructuredTextParser.Minus = 22;
ReStructuredTextParser.Block = 23;
ReStructuredTextParser.Comment = 24;
ReStructuredTextParser.UnderScore = 25;
ReStructuredTextParser.BackTick = 26;
ReStructuredTextParser.Star = 27;
ReStructuredTextParser.Space = 28;
ReStructuredTextParser.LineBreak = 29;
ReStructuredTextParser.Any = 30;

ReStructuredTextParser.RULE_parse = 0;
ReStructuredTextParser.RULE_element = 1;
ReStructuredTextParser.RULE_sectionElement = 2;
ReStructuredTextParser.RULE_comment = 3;
ReStructuredTextParser.RULE_commentParagraphs = 4;
ReStructuredTextParser.RULE_commentRest = 5;
ReStructuredTextParser.RULE_commentParagraph = 6;
ReStructuredTextParser.RULE_commentLineNoBreak = 7;
ReStructuredTextParser.RULE_commentLine = 8;
ReStructuredTextParser.RULE_commentLineAtoms = 9;
ReStructuredTextParser.RULE_paragraph = 10;
ReStructuredTextParser.RULE_section = 11;
ReStructuredTextParser.RULE_title = 12;
ReStructuredTextParser.RULE_lineBlock = 13;
ReStructuredTextParser.RULE_lineBlockLine = 14;
ReStructuredTextParser.RULE_listItemBullet = 15;
ReStructuredTextParser.RULE_bulletCrossLine = 16;
ReStructuredTextParser.RULE_bulletSimple = 17;
ReStructuredTextParser.RULE_bullet = 18;
ReStructuredTextParser.RULE_listItemEnumerated = 19;
ReStructuredTextParser.RULE_paragraphNoBreak = 20;
ReStructuredTextParser.RULE_lineNoBreak = 21;
ReStructuredTextParser.RULE_lines = 22;
ReStructuredTextParser.RULE_linesNormal = 23;
ReStructuredTextParser.RULE_linesStar = 24;
ReStructuredTextParser.RULE_lineNormal = 25;
ReStructuredTextParser.RULE_lineStar = 26;
ReStructuredTextParser.RULE_lineSpecial = 27;
ReStructuredTextParser.RULE_empty_line = 28;
ReStructuredTextParser.RULE_indentation = 29;
ReStructuredTextParser.RULE_spanLineStartNoStar = 30;
ReStructuredTextParser.RULE_textLineStart = 31;
ReStructuredTextParser.RULE_lineStart_fragment = 32;
ReStructuredTextParser.RULE_text = 33;
ReStructuredTextParser.RULE_textStart = 34;
ReStructuredTextParser.RULE_forcedText = 35;
ReStructuredTextParser.RULE_spanNoStar = 36;
ReStructuredTextParser.RULE_span = 37;
ReStructuredTextParser.RULE_quotedLiteral = 38;
ReStructuredTextParser.RULE_text_fragment_start = 39;
ReStructuredTextParser.RULE_text_fragment = 40;
ReStructuredTextParser.RULE_starText = 41;
ReStructuredTextParser.RULE_starAtoms = 42;
ReStructuredTextParser.RULE_starNoSpace = 43;
ReStructuredTextParser.RULE_starAtom = 44;
ReStructuredTextParser.RULE_backTickText = 45;
ReStructuredTextParser.RULE_body = 46;
ReStructuredTextParser.RULE_backTickAtoms = 47;
ReStructuredTextParser.RULE_backTickNoSpace = 48;
ReStructuredTextParser.RULE_backTickAtom = 49;
ReStructuredTextParser.RULE_reference = 50;
ReStructuredTextParser.RULE_referenceIn = 51;
ReStructuredTextParser.RULE_hyperlinkTarget = 52;
ReStructuredTextParser.RULE_hyperlink = 53;
ReStructuredTextParser.RULE_hyperlinkDoc = 54;
ReStructuredTextParser.RULE_url = 55;
ReStructuredTextParser.RULE_urlAtom = 56;
ReStructuredTextParser.RULE_hyperlinkAtom = 57;
ReStructuredTextParser.RULE_separator = 58;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(ReStructuredTextParser.EOF, 0);
	};

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	empty_line = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Empty_lineContext);
	    } else {
	        return this.getTypedRuleContext(Empty_lineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitParse(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_element;
    }

	section() {
	    return this.getTypedRuleContext(SectionContext,0);
	};

	sectionElement() {
	    return this.getTypedRuleContext(SectionElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitElement(this);
		}
	}


}



class SectionElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_sectionElement;
    }

	listItemBullet() {
	    return this.getTypedRuleContext(ListItemBulletContext,0);
	};

	listItemEnumerated() {
	    return this.getTypedRuleContext(ListItemEnumeratedContext,0);
	};

	paragraph() {
	    return this.getTypedRuleContext(ParagraphContext,0);
	};

	lineBlock() {
	    return this.getTypedRuleContext(LineBlockContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSectionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSectionElement(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_comment;
    }

	Comment() {
	    return this.getToken(ReStructuredTextParser.Comment, 0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	commentLineNoBreak() {
	    return this.getTypedRuleContext(CommentLineNoBreakContext,0);
	};

	commentParagraphs() {
	    return this.getTypedRuleContext(CommentParagraphsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitComment(this);
		}
	}


}



class CommentParagraphsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentParagraphs;
        this.main = null; // CommentParagraphContext
    }

	commentRest() {
	    return this.getTypedRuleContext(CommentRestContext,0);
	};

	commentParagraph() {
	    return this.getTypedRuleContext(CommentParagraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentParagraphs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentParagraphs(this);
		}
	}


}



class CommentRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentRest;
    }

	empty_line = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Empty_lineContext);
	    } else {
	        return this.getTypedRuleContext(Empty_lineContext,i);
	    }
	};

	commentParagraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentParagraphContext);
	    } else {
	        return this.getTypedRuleContext(CommentParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentRest(this);
		}
	}


}



class CommentParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentParagraph;
    }

	commentLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentLineContext);
	    } else {
	        return this.getTypedRuleContext(CommentLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentParagraph(this);
		}
	}


}



class CommentLineNoBreakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentLineNoBreak;
    }

	commentLineAtoms() {
	    return this.getTypedRuleContext(CommentLineAtomsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentLineNoBreak(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentLineNoBreak(this);
		}
	}


}



class CommentLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentLine;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	commentLineNoBreak() {
	    return this.getTypedRuleContext(CommentLineNoBreakContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentLine(this);
		}
	}


}



class CommentLineAtomsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_commentLineAtoms;
    }

	LineBreak = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.LineBreak);
	    } else {
	        return this.getToken(ReStructuredTextParser.LineBreak, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterCommentLineAtoms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitCommentLineAtoms(this);
		}
	}


}



class ParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_paragraph;
    }

	lines() {
	    return this.getTypedRuleContext(LinesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitParagraph(this);
		}
	}


}



class SectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_section;
        this.overline = null; // Token
    }

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	SectionSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.SectionSeparator);
	    } else {
	        return this.getToken(ReStructuredTextParser.SectionSeparator, i);
	    }
	};


	LineBreak = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.LineBreak);
	    } else {
	        return this.getToken(ReStructuredTextParser.LineBreak, i);
	    }
	};


	sectionElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SectionElementContext);
	    } else {
	        return this.getTypedRuleContext(SectionElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSection(this);
		}
	}


}



class TitleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_title;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	textStart() {
	    return this.getTypedRuleContext(TextStartContext,0);
	};

	lineSpecial() {
	    return this.getTypedRuleContext(LineSpecialContext,0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	paragraphNoBreak() {
	    return this.getTypedRuleContext(ParagraphNoBreakContext,0);
	};

	lineNormal() {
	    return this.getTypedRuleContext(LineNormalContext,0);
	};

	lineStar() {
	    return this.getTypedRuleContext(LineStarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterTitle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitTitle(this);
		}
	}


}



class LineBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineBlock;
    }

	LineBreak = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.LineBreak);
	    } else {
	        return this.getToken(ReStructuredTextParser.LineBreak, i);
	    }
	};


	lineBlockLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LineBlockLineContext);
	    } else {
	        return this.getTypedRuleContext(LineBlockLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineBlock(this);
		}
	}


}



class LineBlockLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineBlockLine;
    }

	Block() {
	    return this.getToken(ReStructuredTextParser.Block, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	starText() {
	    return this.getTypedRuleContext(StarTextContext,0);
	};

	indentation() {
	    return this.getTypedRuleContext(IndentationContext,0);
	};

	span = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanContext);
	    } else {
	        return this.getTypedRuleContext(SpanContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineBlockLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineBlockLine(this);
		}
	}


}



class ListItemBulletContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_listItemBullet;
        this.special = null; // Token
    }

	bulletCrossLine() {
	    return this.getTypedRuleContext(BulletCrossLineContext,0);
	};

	bulletSimple() {
	    return this.getTypedRuleContext(BulletSimpleContext,0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Minus() {
	    return this.getToken(ReStructuredTextParser.Minus, 0);
	};

	Plus() {
	    return this.getToken(ReStructuredTextParser.Plus, 0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterListItemBullet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitListItemBullet(this);
		}
	}


}



class BulletCrossLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_bulletCrossLine;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	bullet() {
	    return this.getTypedRuleContext(BulletContext,0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBulletCrossLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBulletCrossLine(this);
		}
	}


}



class BulletSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_bulletSimple;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	bullet() {
	    return this.getTypedRuleContext(BulletContext,0);
	};

	paragraphNoBreak() {
	    return this.getTypedRuleContext(ParagraphNoBreakContext,0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBulletSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBulletSimple(this);
		}
	}


}



class BulletContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_bullet;
    }

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	Minus() {
	    return this.getToken(ReStructuredTextParser.Minus, 0);
	};

	Plus() {
	    return this.getToken(ReStructuredTextParser.Plus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBullet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBullet(this);
		}
	}


}



class ListItemEnumeratedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_listItemEnumerated;
        this.enumerated = null; // LineSpecialContext
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	lineSpecial() {
	    return this.getTypedRuleContext(LineSpecialContext,0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	paragraphNoBreak() {
	    return this.getTypedRuleContext(ParagraphNoBreakContext,0);
	};

	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterListItemEnumerated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitListItemEnumerated(this);
		}
	}


}



class ParagraphNoBreakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_paragraphNoBreak;
    }

	lineNoBreak() {
	    return this.getTypedRuleContext(LineNoBreakContext,0);
	};

	lines = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinesContext);
	    } else {
	        return this.getTypedRuleContext(LinesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterParagraphNoBreak(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitParagraphNoBreak(this);
		}
	}


}



class LineNoBreakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineNoBreak;
    }

	spanLineStartNoStar() {
	    return this.getTypedRuleContext(SpanLineStartNoStarContext,0);
	};

	indentation() {
	    return this.getTypedRuleContext(IndentationContext,0);
	};

	span = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanContext);
	    } else {
	        return this.getTypedRuleContext(SpanContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineNoBreak(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineNoBreak(this);
		}
	}


}



class LinesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lines;
    }

	linesStar() {
	    return this.getTypedRuleContext(LinesStarContext,0);
	};

	linesNormal() {
	    return this.getTypedRuleContext(LinesNormalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLines(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLines(this);
		}
	}


}



class LinesNormalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_linesNormal;
    }

	lineNormal() {
	    return this.getTypedRuleContext(LineNormalContext,0);
	};

	linesStar() {
	    return this.getTypedRuleContext(LinesStarContext,0);
	};

	linesNormal() {
	    return this.getTypedRuleContext(LinesNormalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLinesNormal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLinesNormal(this);
		}
	}


}



class LinesStarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_linesStar;
    }

	lineStar() {
	    return this.getTypedRuleContext(LineStarContext,0);
	};

	lineNoBreak() {
	    return this.getTypedRuleContext(LineNoBreakContext,0);
	};

	linesNormal() {
	    return this.getTypedRuleContext(LinesNormalContext,0);
	};

	linesStar() {
	    return this.getTypedRuleContext(LinesStarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLinesStar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLinesStar(this);
		}
	}


}



class LineNormalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineNormal;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	indentation() {
	    return this.getTypedRuleContext(IndentationContext,0);
	};

	spanLineStartNoStar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanLineStartNoStarContext);
	    } else {
	        return this.getTypedRuleContext(SpanLineStartNoStarContext,i);
	    }
	};

	span = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanContext);
	    } else {
	        return this.getTypedRuleContext(SpanContext,i);
	    }
	};

	spanNoStar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanNoStarContext);
	    } else {
	        return this.getTypedRuleContext(SpanNoStarContext,i);
	    }
	};

	lineSpecial() {
	    return this.getTypedRuleContext(LineSpecialContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineNormal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineNormal(this);
		}
	}


}



class LineStarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineStar;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	starText() {
	    return this.getTypedRuleContext(StarTextContext,0);
	};

	indentation() {
	    return this.getTypedRuleContext(IndentationContext,0);
	};

	spanLineStartNoStar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpanLineStartNoStarContext);
	    } else {
	        return this.getTypedRuleContext(SpanLineStartNoStarContext,i);
	    }
	};

	text_fragment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Text_fragmentContext);
	    } else {
	        return this.getTypedRuleContext(Text_fragmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineStar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineStar(this);
		}
	}


}



class LineSpecialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineSpecial;
    }

	Numbers() {
	    return this.getToken(ReStructuredTextParser.Numbers, 0);
	};

	Dot() {
	    return this.getToken(ReStructuredTextParser.Dot, 0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	indentation() {
	    return this.getTypedRuleContext(IndentationContext,0);
	};

	SectionSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.SectionSeparator);
	    } else {
	        return this.getToken(ReStructuredTextParser.SectionSeparator, i);
	    }
	};


	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineSpecial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineSpecial(this);
		}
	}


}



class Empty_lineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_empty_line;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterEmpty_line(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitEmpty_line(this);
		}
	}


}



class IndentationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_indentation;
    }

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterIndentation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitIndentation(this);
		}
	}


}



class SpanLineStartNoStarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_spanLineStartNoStar;
    }

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	referenceIn() {
	    return this.getTypedRuleContext(ReferenceInContext,0);
	};

	hyperlinkTarget() {
	    return this.getTypedRuleContext(HyperlinkTargetContext,0);
	};

	hyperlink() {
	    return this.getTypedRuleContext(HyperlinkContext,0);
	};

	hyperlinkDoc() {
	    return this.getTypedRuleContext(HyperlinkDocContext,0);
	};

	backTickText() {
	    return this.getTypedRuleContext(BackTickTextContext,0);
	};

	quotedLiteral() {
	    return this.getTypedRuleContext(QuotedLiteralContext,0);
	};

	textLineStart() {
	    return this.getTypedRuleContext(TextLineStartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSpanLineStartNoStar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSpanLineStartNoStar(this);
		}
	}


}



class TextLineStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_textLineStart;
    }

	lineStart_fragment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LineStart_fragmentContext);
	    } else {
	        return this.getTypedRuleContext(LineStart_fragmentContext,i);
	    }
	};

	text_fragment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Text_fragmentContext);
	    } else {
	        return this.getTypedRuleContext(Text_fragmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterTextLineStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitTextLineStart(this);
		}
	}


}



class LineStart_fragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_lineStart_fragment;
    }

	Minus() {
	    return this.getToken(ReStructuredTextParser.Minus, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	Plus() {
	    return this.getToken(ReStructuredTextParser.Plus, 0);
	};

	Numbers() {
	    return this.getToken(ReStructuredTextParser.Numbers, 0);
	};

	Dot() {
	    return this.getToken(ReStructuredTextParser.Dot, 0);
	};

	Alphabet() {
	    return this.getToken(ReStructuredTextParser.Alphabet, 0);
	};

	Block() {
	    return this.getToken(ReStructuredTextParser.Block, 0);
	};

	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	separator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SeparatorContext);
	    } else {
	        return this.getTypedRuleContext(SeparatorContext,i);
	    }
	};

	TimeStar() {
	    return this.getToken(ReStructuredTextParser.TimeStar, 0);
	};

	SquareLeft() {
	    return this.getToken(ReStructuredTextParser.SquareLeft, 0);
	};

	SquareRight() {
	    return this.getToken(ReStructuredTextParser.SquareRight, 0);
	};

	RoundLeft() {
	    return this.getToken(ReStructuredTextParser.RoundLeft, 0);
	};

	RoundRight() {
	    return this.getToken(ReStructuredTextParser.RoundRight, 0);
	};

	SemiColon() {
	    return this.getToken(ReStructuredTextParser.SemiColon, 0);
	};

	Colon() {
	    return this.getToken(ReStructuredTextParser.Colon, 0);
	};

	QuotationDouble() {
	    return this.getToken(ReStructuredTextParser.QuotationDouble, 0);
	};

	QuotationSingle() {
	    return this.getToken(ReStructuredTextParser.QuotationSingle, 0);
	};

	AngleLeft() {
	    return this.getToken(ReStructuredTextParser.AngleLeft, 0);
	};

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	Any() {
	    return this.getToken(ReStructuredTextParser.Any, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterLineStart_fragment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitLineStart_fragment(this);
		}
	}


}



class TextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_text;
    }

	textStart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStartContext);
	    } else {
	        return this.getTypedRuleContext(TextStartContext,i);
	    }
	};

	text_fragment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Text_fragmentContext);
	    } else {
	        return this.getTypedRuleContext(Text_fragmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitText(this);
		}
	}


}



class TextStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_textStart;
    }

	forcedText() {
	    return this.getTypedRuleContext(ForcedTextContext,0);
	};

	lineStart_fragment() {
	    return this.getTypedRuleContext(LineStart_fragmentContext,0);
	};

	text_fragment_start = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Text_fragment_startContext);
	    } else {
	        return this.getTypedRuleContext(Text_fragment_startContext,i);
	    }
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterTextStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitTextStart(this);
		}
	}


}



class ForcedTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_forcedText;
    }

	RoundLeft() {
	    return this.getToken(ReStructuredTextParser.RoundLeft, 0);
	};

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	RoundRight() {
	    return this.getToken(ReStructuredTextParser.RoundRight, 0);
	};

	SquareLeft() {
	    return this.getToken(ReStructuredTextParser.SquareLeft, 0);
	};

	SquareRight() {
	    return this.getToken(ReStructuredTextParser.SquareRight, 0);
	};

	QuotationSingle = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.QuotationSingle);
	    } else {
	        return this.getToken(ReStructuredTextParser.QuotationSingle, i);
	    }
	};


	QuotationDouble = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.QuotationDouble);
	    } else {
	        return this.getToken(ReStructuredTextParser.QuotationDouble, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterForcedText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitForcedText(this);
		}
	}


}



class SpanNoStarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_spanNoStar;
    }

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	referenceIn() {
	    return this.getTypedRuleContext(ReferenceInContext,0);
	};

	hyperlinkTarget() {
	    return this.getTypedRuleContext(HyperlinkTargetContext,0);
	};

	hyperlink() {
	    return this.getTypedRuleContext(HyperlinkContext,0);
	};

	hyperlinkDoc() {
	    return this.getTypedRuleContext(HyperlinkDocContext,0);
	};

	backTickText() {
	    return this.getTypedRuleContext(BackTickTextContext,0);
	};

	quotedLiteral() {
	    return this.getTypedRuleContext(QuotedLiteralContext,0);
	};

	text() {
	    return this.getTypedRuleContext(TextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSpanNoStar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSpanNoStar(this);
		}
	}


}



class SpanContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_span;
    }

	starText() {
	    return this.getTypedRuleContext(StarTextContext,0);
	};

	spanNoStar() {
	    return this.getTypedRuleContext(SpanNoStarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSpan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSpan(this);
		}
	}


}



class QuotedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_quotedLiteral;
    }

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	lineNoBreak() {
	    return this.getTypedRuleContext(LineNoBreakContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterQuotedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitQuotedLiteral(this);
		}
	}


}



class Text_fragment_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_text_fragment_start;
    }

	SemiColon() {
	    return this.getToken(ReStructuredTextParser.SemiColon, 0);
	};

	Numbers() {
	    return this.getToken(ReStructuredTextParser.Numbers, 0);
	};

	Alphabet() {
	    return this.getToken(ReStructuredTextParser.Alphabet, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	SquareLeft() {
	    return this.getToken(ReStructuredTextParser.SquareLeft, 0);
	};

	SquareRight() {
	    return this.getToken(ReStructuredTextParser.SquareRight, 0);
	};

	RoundLeft() {
	    return this.getToken(ReStructuredTextParser.RoundLeft, 0);
	};

	RoundRight() {
	    return this.getToken(ReStructuredTextParser.RoundRight, 0);
	};

	Colon() {
	    return this.getToken(ReStructuredTextParser.Colon, 0);
	};

	separator() {
	    return this.getTypedRuleContext(SeparatorContext,0);
	};

	AngleLeft() {
	    return this.getToken(ReStructuredTextParser.AngleLeft, 0);
	};

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	QuotationDouble() {
	    return this.getToken(ReStructuredTextParser.QuotationDouble, 0);
	};

	Dot() {
	    return this.getToken(ReStructuredTextParser.Dot, 0);
	};

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	Any() {
	    return this.getToken(ReStructuredTextParser.Any, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterText_fragment_start(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitText_fragment_start(this);
		}
	}


}



class Text_fragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_text_fragment;
    }

	text_fragment_start() {
	    return this.getTypedRuleContext(Text_fragment_startContext,0);
	};

	forcedText() {
	    return this.getTypedRuleContext(ForcedTextContext,0);
	};

	Block() {
	    return this.getToken(ReStructuredTextParser.Block, 0);
	};

	Literal() {
	    return this.getToken(ReStructuredTextParser.Literal, 0);
	};

	Comment() {
	    return this.getToken(ReStructuredTextParser.Comment, 0);
	};

	Dot() {
	    return this.getToken(ReStructuredTextParser.Dot, 0);
	};

	Quote() {
	    return this.getToken(ReStructuredTextParser.Quote, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterText_fragment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitText_fragment(this);
		}
	}


}



class StarTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_starText;
    }

	LineBreak = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.LineBreak);
	    } else {
	        return this.getToken(ReStructuredTextParser.LineBreak, i);
	    }
	};


	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Star);
	    } else {
	        return this.getToken(ReStructuredTextParser.Star, i);
	    }
	};


	starNoSpace = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StarNoSpaceContext);
	    } else {
	        return this.getTypedRuleContext(StarNoSpaceContext,i);
	    }
	};

	starAtoms = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StarAtomsContext);
	    } else {
	        return this.getTypedRuleContext(StarAtomsContext,i);
	    }
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterStarText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitStarText(this);
		}
	}


}



class StarAtomsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_starAtoms;
    }

	starAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StarAtomContext);
	    } else {
	        return this.getTypedRuleContext(StarAtomContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Star);
	    } else {
	        return this.getToken(ReStructuredTextParser.Star, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterStarAtoms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitStarAtoms(this);
		}
	}


}



class StarNoSpaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_starNoSpace;
    }

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	SectionSeparator() {
	    return this.getToken(ReStructuredTextParser.SectionSeparator, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterStarNoSpace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitStarNoSpace(this);
		}
	}


}



class StarAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_starAtom;
    }

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterStarAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitStarAtom(this);
		}
	}


}



class BackTickTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_backTickText;
        this.titled = null; // Token
    }

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Colon);
	    } else {
	        return this.getToken(ReStructuredTextParser.Colon, i);
	    }
	};


	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	Alphabet() {
	    return this.getToken(ReStructuredTextParser.Alphabet, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBackTickText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBackTickText(this);
		}
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_body;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.BackTick);
	    } else {
	        return this.getToken(ReStructuredTextParser.BackTick, i);
	    }
	};


	backTickAtoms() {
	    return this.getTypedRuleContext(BackTickAtomsContext,0);
	};

	backTickNoSpace() {
	    return this.getTypedRuleContext(BackTickNoSpaceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBody(this);
		}
	}


}



class BackTickAtomsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_backTickAtoms;
    }

	backTickAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BackTickAtomContext);
	    } else {
	        return this.getTypedRuleContext(BackTickAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBackTickAtoms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBackTickAtoms(this);
		}
	}


}



class BackTickNoSpaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_backTickNoSpace;
    }

	BackTick() {
	    return this.getToken(ReStructuredTextParser.BackTick, 0);
	};

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBackTickNoSpace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBackTickNoSpace(this);
		}
	}


}



class BackTickAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_backTickAtom;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.BackTick);
	    } else {
	        return this.getToken(ReStructuredTextParser.BackTick, i);
	    }
	};


	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterBackTickAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitBackTickAtom(this);
		}
	}


}



class ReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_reference;
    }

	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	Any = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Any);
	    } else {
	        return this.getToken(ReStructuredTextParser.Any, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitReference(this);
		}
	}


}



class ReferenceInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_referenceIn;
    }

	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	Colon() {
	    return this.getToken(ReStructuredTextParser.Colon, 0);
	};

	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	url() {
	    return this.getTypedRuleContext(UrlContext,0);
	};

	hyperlinkAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HyperlinkAtomContext);
	    } else {
	        return this.getTypedRuleContext(HyperlinkAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterReferenceIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitReferenceIn(this);
		}
	}


}



class HyperlinkTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_hyperlinkTarget;
    }

	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	Any = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Any);
	    } else {
	        return this.getToken(ReStructuredTextParser.Any, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterHyperlinkTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitHyperlinkTarget(this);
		}
	}


}



class HyperlinkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_hyperlink;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.BackTick);
	    } else {
	        return this.getToken(ReStructuredTextParser.BackTick, i);
	    }
	};


	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.Space);
	    } else {
	        return this.getToken(ReStructuredTextParser.Space, i);
	    }
	};


	AngleLeft() {
	    return this.getToken(ReStructuredTextParser.AngleLeft, 0);
	};

	url() {
	    return this.getTypedRuleContext(UrlContext,0);
	};

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	UnderScore() {
	    return this.getToken(ReStructuredTextParser.UnderScore, 0);
	};

	hyperlinkAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HyperlinkAtomContext);
	    } else {
	        return this.getTypedRuleContext(HyperlinkAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterHyperlink(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitHyperlink(this);
		}
	}


}



class HyperlinkDocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_hyperlinkDoc;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ReStructuredTextParser.BackTick);
	    } else {
	        return this.getToken(ReStructuredTextParser.BackTick, i);
	    }
	};


	Space() {
	    return this.getToken(ReStructuredTextParser.Space, 0);
	};

	AngleLeft() {
	    return this.getToken(ReStructuredTextParser.AngleLeft, 0);
	};

	url() {
	    return this.getTypedRuleContext(UrlContext,0);
	};

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	hyperlinkAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HyperlinkAtomContext);
	    } else {
	        return this.getTypedRuleContext(HyperlinkAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterHyperlinkDoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitHyperlinkDoc(this);
		}
	}


}



class UrlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_url;
    }

	urlAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UrlAtomContext);
	    } else {
	        return this.getTypedRuleContext(UrlAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterUrl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitUrl(this);
		}
	}


}



class UrlAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_urlAtom;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	BackTick() {
	    return this.getToken(ReStructuredTextParser.BackTick, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterUrlAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitUrlAtom(this);
		}
	}


}



class HyperlinkAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_hyperlinkAtom;
    }

	LineBreak() {
	    return this.getToken(ReStructuredTextParser.LineBreak, 0);
	};

	AngleLeft() {
	    return this.getToken(ReStructuredTextParser.AngleLeft, 0);
	};

	AngleRight() {
	    return this.getToken(ReStructuredTextParser.AngleRight, 0);
	};

	BackTick() {
	    return this.getToken(ReStructuredTextParser.BackTick, 0);
	};

	Star() {
	    return this.getToken(ReStructuredTextParser.Star, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterHyperlinkAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitHyperlinkAtom(this);
		}
	}


}



class SeparatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ReStructuredTextParser.RULE_separator;
    }

	Minus() {
	    return this.getToken(ReStructuredTextParser.Minus, 0);
	};

	Equal() {
	    return this.getToken(ReStructuredTextParser.Equal, 0);
	};

	Plus() {
	    return this.getToken(ReStructuredTextParser.Plus, 0);
	};

	Hat() {
	    return this.getToken(ReStructuredTextParser.Hat, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.enterSeparator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ReStructuredTextListener ) {
	        listener.exitSeparator(this);
		}
	}


}




ReStructuredTextParser.ParseContext = ParseContext; 
ReStructuredTextParser.ElementContext = ElementContext; 
ReStructuredTextParser.SectionElementContext = SectionElementContext; 
ReStructuredTextParser.CommentContext = CommentContext; 
ReStructuredTextParser.CommentParagraphsContext = CommentParagraphsContext; 
ReStructuredTextParser.CommentRestContext = CommentRestContext; 
ReStructuredTextParser.CommentParagraphContext = CommentParagraphContext; 
ReStructuredTextParser.CommentLineNoBreakContext = CommentLineNoBreakContext; 
ReStructuredTextParser.CommentLineContext = CommentLineContext; 
ReStructuredTextParser.CommentLineAtomsContext = CommentLineAtomsContext; 
ReStructuredTextParser.ParagraphContext = ParagraphContext; 
ReStructuredTextParser.SectionContext = SectionContext; 
ReStructuredTextParser.TitleContext = TitleContext; 
ReStructuredTextParser.LineBlockContext = LineBlockContext; 
ReStructuredTextParser.LineBlockLineContext = LineBlockLineContext; 
ReStructuredTextParser.ListItemBulletContext = ListItemBulletContext; 
ReStructuredTextParser.BulletCrossLineContext = BulletCrossLineContext; 
ReStructuredTextParser.BulletSimpleContext = BulletSimpleContext; 
ReStructuredTextParser.BulletContext = BulletContext; 
ReStructuredTextParser.ListItemEnumeratedContext = ListItemEnumeratedContext; 
ReStructuredTextParser.ParagraphNoBreakContext = ParagraphNoBreakContext; 
ReStructuredTextParser.LineNoBreakContext = LineNoBreakContext; 
ReStructuredTextParser.LinesContext = LinesContext; 
ReStructuredTextParser.LinesNormalContext = LinesNormalContext; 
ReStructuredTextParser.LinesStarContext = LinesStarContext; 
ReStructuredTextParser.LineNormalContext = LineNormalContext; 
ReStructuredTextParser.LineStarContext = LineStarContext; 
ReStructuredTextParser.LineSpecialContext = LineSpecialContext; 
ReStructuredTextParser.Empty_lineContext = Empty_lineContext; 
ReStructuredTextParser.IndentationContext = IndentationContext; 
ReStructuredTextParser.SpanLineStartNoStarContext = SpanLineStartNoStarContext; 
ReStructuredTextParser.TextLineStartContext = TextLineStartContext; 
ReStructuredTextParser.LineStart_fragmentContext = LineStart_fragmentContext; 
ReStructuredTextParser.TextContext = TextContext; 
ReStructuredTextParser.TextStartContext = TextStartContext; 
ReStructuredTextParser.ForcedTextContext = ForcedTextContext; 
ReStructuredTextParser.SpanNoStarContext = SpanNoStarContext; 
ReStructuredTextParser.SpanContext = SpanContext; 
ReStructuredTextParser.QuotedLiteralContext = QuotedLiteralContext; 
ReStructuredTextParser.Text_fragment_startContext = Text_fragment_startContext; 
ReStructuredTextParser.Text_fragmentContext = Text_fragmentContext; 
ReStructuredTextParser.StarTextContext = StarTextContext; 
ReStructuredTextParser.StarAtomsContext = StarAtomsContext; 
ReStructuredTextParser.StarNoSpaceContext = StarNoSpaceContext; 
ReStructuredTextParser.StarAtomContext = StarAtomContext; 
ReStructuredTextParser.BackTickTextContext = BackTickTextContext; 
ReStructuredTextParser.BodyContext = BodyContext; 
ReStructuredTextParser.BackTickAtomsContext = BackTickAtomsContext; 
ReStructuredTextParser.BackTickNoSpaceContext = BackTickNoSpaceContext; 
ReStructuredTextParser.BackTickAtomContext = BackTickAtomContext; 
ReStructuredTextParser.ReferenceContext = ReferenceContext; 
ReStructuredTextParser.ReferenceInContext = ReferenceInContext; 
ReStructuredTextParser.HyperlinkTargetContext = HyperlinkTargetContext; 
ReStructuredTextParser.HyperlinkContext = HyperlinkContext; 
ReStructuredTextParser.HyperlinkDocContext = HyperlinkDocContext; 
ReStructuredTextParser.UrlContext = UrlContext; 
ReStructuredTextParser.UrlAtomContext = UrlAtomContext; 
ReStructuredTextParser.HyperlinkAtomContext = HyperlinkAtomContext; 
ReStructuredTextParser.SeparatorContext = SeparatorContext; 
