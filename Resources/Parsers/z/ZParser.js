// Generated from ./z/ZParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ZParserListener from './ZParserListener.js';
const serializedATN = [4,1,154,1099,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,5,0,94,8,0,10,0,12,0,97,9,0,1,
0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,106,8,1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,
9,1,1,1,1,1,1,1,1,1,1,1,5,1,120,8,1,10,1,12,1,123,9,1,3,1,125,8,1,1,2,1,
2,1,2,1,2,1,2,3,2,132,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,143,8,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,154,8,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,3,2,166,8,2,1,2,1,2,1,2,1,2,1,2,3,2,173,8,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,5,2,197,8,2,10,2,12,2,200,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,221,8,2,1,3,1,3,1,3,1,3,1,3,
5,3,228,8,3,10,3,12,3,231,9,3,1,4,1,4,1,4,1,4,1,4,3,4,238,8,4,1,5,1,5,1,
5,5,5,243,8,5,10,5,12,5,246,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,274,
8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,5,6,294,8,6,10,6,12,6,297,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,5,7,329,8,7,10,7,12,7,332,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,354,8,7,1,7,1,7,1,7,
1,7,3,7,360,8,7,1,7,3,7,363,8,7,1,7,1,7,1,7,3,7,368,8,7,1,7,1,7,1,7,1,7,
3,7,374,8,7,1,7,3,7,377,8,7,1,7,1,7,1,7,5,7,382,8,7,10,7,12,7,385,9,7,1,
7,1,7,1,7,1,7,3,7,391,8,7,1,7,1,7,1,7,1,7,1,7,3,7,398,8,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,419,8,
7,10,7,12,7,422,9,7,3,7,424,8,7,1,7,1,7,1,7,1,7,1,7,4,7,431,8,7,11,7,12,
7,432,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,446,8,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,479,8,7,1,7,1,7,1,7,1,7,3,
7,485,8,7,1,7,3,7,488,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,499,8,
7,10,7,12,7,502,9,7,1,7,1,7,1,7,1,7,1,7,4,7,509,8,7,11,7,12,7,510,1,7,1,
7,1,7,1,7,1,7,3,7,518,8,7,1,7,1,7,1,7,1,7,3,7,524,8,7,1,7,3,7,527,8,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,541,8,7,10,7,12,7,544,
9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,554,8,7,10,7,12,7,557,9,7,1,8,3,
8,560,8,8,1,8,3,8,563,8,8,1,8,3,8,566,8,8,1,8,1,8,3,8,570,8,8,1,8,1,8,3,
8,574,8,8,3,8,576,8,8,1,8,3,8,579,8,8,1,9,1,9,1,9,5,9,584,8,9,10,9,12,9,
587,9,9,1,10,1,10,1,10,1,10,3,10,593,8,10,1,11,1,11,1,11,5,11,598,8,11,10,
11,12,11,601,9,11,1,11,1,11,1,11,1,11,1,11,3,11,608,8,11,1,12,1,12,1,12,
1,12,1,12,1,12,3,12,616,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,625,
8,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,3,16,635,8,16,1,17,1,17,1,17,
1,17,3,17,641,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,
1,20,1,20,1,20,1,21,1,21,3,21,659,8,21,1,22,1,22,1,22,1,22,1,22,3,22,666,
8,22,1,23,1,23,1,23,1,23,3,23,672,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,5,24,683,8,24,10,24,12,24,686,9,24,1,24,1,24,1,24,1,24,3,24,692,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,700,8,24,10,24,12,24,703,9,24,1,
24,1,24,1,24,1,24,3,24,709,8,24,1,24,3,24,712,8,24,1,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,5,25,724,8,25,10,25,12,25,727,9,25,1,25,1,25,
1,25,1,25,3,25,733,8,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,741,8,25,10,25,
12,25,744,9,25,1,25,1,25,1,25,1,25,3,25,750,8,25,3,25,752,8,25,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,766,8,26,10,26,12,
26,769,9,26,1,26,1,26,1,26,1,26,3,26,775,8,26,1,26,1,26,1,26,1,26,1,26,1,
26,1,26,5,26,784,8,26,10,26,12,26,787,9,26,1,26,1,26,1,26,1,26,3,26,793,
8,26,1,26,3,26,796,8,26,1,27,1,27,1,27,1,27,1,27,5,27,803,8,27,10,27,12,
27,806,9,27,1,27,1,27,1,27,1,27,3,27,812,8,27,1,27,1,27,1,27,1,27,1,27,5,
27,819,8,27,10,27,12,27,822,9,27,1,27,1,27,1,27,1,27,3,27,828,8,27,3,27,
830,8,27,1,28,1,28,1,28,1,28,3,28,836,8,28,1,29,1,29,1,29,1,29,1,29,5,29,
843,8,29,10,29,12,29,846,9,29,1,29,1,29,1,29,3,29,851,8,29,1,30,1,30,1,30,
1,30,1,30,1,30,5,30,859,8,30,10,30,12,30,862,9,30,1,30,1,30,3,30,866,8,30,
1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,875,8,31,10,31,12,31,878,9,31,1,
31,1,31,1,31,3,31,883,8,31,1,32,1,32,1,32,5,32,888,8,32,10,32,12,32,891,
9,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,900,8,33,1,34,1,34,1,34,1,34,
3,34,906,8,34,1,34,1,34,1,34,1,34,3,34,912,8,34,1,34,3,34,915,8,34,1,34,
3,34,918,8,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,926,8,35,1,35,1,35,1,35,
1,35,3,35,932,8,35,1,35,3,35,935,8,35,3,35,937,8,35,1,36,1,36,1,36,1,36,
4,36,943,8,36,11,36,12,36,944,1,36,1,36,1,36,4,36,950,8,36,11,36,12,36,951,
1,36,1,36,1,36,1,36,3,36,958,8,36,1,36,1,36,1,36,1,36,3,36,964,8,36,1,36,
3,36,967,8,36,1,36,1,36,1,36,1,36,1,36,3,36,974,8,36,1,36,1,36,1,36,1,36,
3,36,980,8,36,1,36,3,36,983,8,36,1,36,1,36,3,36,987,8,36,1,37,1,37,3,37,
991,8,37,1,37,1,37,1,37,1,37,3,37,997,8,37,1,37,3,37,1000,8,37,1,38,1,38,
1,38,1,38,3,38,1006,8,38,1,39,1,39,1,39,1,39,3,39,1012,8,39,1,39,1,39,1,
39,1,39,3,39,1018,8,39,1,39,3,39,1021,8,39,1,39,3,39,1024,8,39,1,40,1,40,
1,40,1,40,1,40,1,40,3,40,1032,8,40,1,40,1,40,1,40,1,40,3,40,1038,8,40,1,
40,3,40,1041,8,40,3,40,1043,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
1052,8,41,1,41,1,41,1,41,1,41,3,41,1058,8,41,1,41,3,41,1061,8,41,1,41,1,
41,3,41,1065,8,41,1,42,1,42,3,42,1069,8,42,1,42,1,42,1,42,1,42,3,42,1075,
8,42,1,42,3,42,1078,8,42,1,43,1,43,1,43,1,43,3,43,1084,8,43,1,43,4,43,1087,
8,43,11,43,12,43,1088,1,44,1,44,1,44,5,44,1094,8,44,10,44,12,44,1097,9,44,
1,44,0,2,12,14,45,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,0,6,2,0,20,20,46,46,2,0,27,27,33,33,1,0,151,152,2,0,148,148,150,150,2,
0,144,144,146,146,3,0,49,49,60,60,137,137,1276,0,95,1,0,0,0,2,124,1,0,0,
0,4,220,1,0,0,0,6,222,1,0,0,0,8,232,1,0,0,0,10,239,1,0,0,0,12,273,1,0,0,
0,14,445,1,0,0,0,16,559,1,0,0,0,18,580,1,0,0,0,20,588,1,0,0,0,22,607,1,0,
0,0,24,615,1,0,0,0,26,624,1,0,0,0,28,626,1,0,0,0,30,628,1,0,0,0,32,634,1,
0,0,0,34,636,1,0,0,0,36,644,1,0,0,0,38,648,1,0,0,0,40,652,1,0,0,0,42,658,
1,0,0,0,44,665,1,0,0,0,46,671,1,0,0,0,48,711,1,0,0,0,50,751,1,0,0,0,52,795,
1,0,0,0,54,829,1,0,0,0,56,835,1,0,0,0,58,850,1,0,0,0,60,865,1,0,0,0,62,882,
1,0,0,0,64,884,1,0,0,0,66,899,1,0,0,0,68,917,1,0,0,0,70,936,1,0,0,0,72,986,
1,0,0,0,74,988,1,0,0,0,76,1005,1,0,0,0,78,1023,1,0,0,0,80,1042,1,0,0,0,82,
1064,1,0,0,0,84,1066,1,0,0,0,86,1086,1,0,0,0,88,1090,1,0,0,0,90,94,5,4,0,
0,91,94,3,2,1,0,92,94,3,4,2,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,
94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,
99,5,0,0,1,99,1,1,0,0,0,100,101,5,1,0,0,101,102,5,34,0,0,102,103,5,68,0,
0,103,105,5,30,0,0,104,106,3,10,5,0,105,104,1,0,0,0,105,106,1,0,0,0,106,
107,1,0,0,0,107,111,5,18,0,0,108,110,3,4,2,0,109,108,1,0,0,0,110,113,1,0,
0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,125,1,0,0,0,113,111,1,0,0,0,114,
115,5,1,0,0,115,116,5,34,0,0,116,117,5,68,0,0,117,121,5,18,0,0,118,120,3,
4,2,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,
125,1,0,0,0,123,121,1,0,0,0,124,100,1,0,0,0,124,114,1,0,0,0,125,3,1,0,0,
0,126,127,5,1,0,0,127,128,5,9,0,0,128,129,3,10,5,0,129,131,5,10,0,0,130,
132,5,20,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,5,18,
0,0,134,221,1,0,0,0,135,136,5,3,0,0,136,137,3,16,8,0,137,138,5,18,0,0,138,
221,1,0,0,0,139,140,5,2,0,0,140,142,5,68,0,0,141,143,5,20,0,0,142,141,1,
0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,3,16,8,0,145,146,5,18,0,0,
146,221,1,0,0,0,147,148,5,3,0,0,148,149,5,17,0,0,149,150,5,9,0,0,150,151,
3,10,5,0,151,153,5,10,0,0,152,154,5,20,0,0,153,152,1,0,0,0,153,154,1,0,0,
0,154,155,1,0,0,0,155,156,3,16,8,0,156,157,5,18,0,0,157,221,1,0,0,0,158,
159,5,2,0,0,159,160,5,17,0,0,160,161,5,68,0,0,161,162,5,9,0,0,162,163,3,
10,5,0,163,165,5,10,0,0,164,166,5,20,0,0,165,164,1,0,0,0,165,166,1,0,0,0,
166,167,1,0,0,0,167,168,3,16,8,0,168,169,5,18,0,0,169,221,1,0,0,0,170,172,
5,1,0,0,171,173,5,20,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,
174,175,3,20,10,0,175,176,5,18,0,0,176,221,1,0,0,0,177,178,5,1,0,0,178,179,
3,42,21,0,179,180,5,9,0,0,180,181,3,10,5,0,181,182,5,10,0,0,182,183,5,38,
0,0,183,184,3,14,7,0,184,185,5,18,0,0,185,221,1,0,0,0,186,187,5,1,0,0,187,
188,3,56,28,0,188,189,5,38,0,0,189,190,3,14,7,0,190,191,5,18,0,0,191,221,
1,0,0,0,192,193,5,1,0,0,193,198,3,6,3,0,194,195,5,42,0,0,195,197,3,6,3,0,
196,194,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,
1,0,0,0,200,198,1,0,0,0,201,202,5,18,0,0,202,221,1,0,0,0,203,204,5,1,0,0,
204,205,5,50,0,0,205,206,3,12,6,0,206,207,5,18,0,0,207,221,1,0,0,0,208,209,
5,1,0,0,209,210,5,9,0,0,210,211,3,10,5,0,211,212,5,10,0,0,212,213,5,50,0,
0,213,214,3,12,6,0,214,215,5,18,0,0,215,221,1,0,0,0,216,217,5,1,0,0,217,
218,3,24,12,0,218,219,5,18,0,0,219,221,1,0,0,0,220,126,1,0,0,0,220,135,1,
0,0,0,220,139,1,0,0,0,220,147,1,0,0,0,220,158,1,0,0,0,220,170,1,0,0,0,220,
177,1,0,0,0,220,186,1,0,0,0,220,192,1,0,0,0,220,203,1,0,0,0,220,208,1,0,
0,0,220,216,1,0,0,0,221,5,1,0,0,0,222,223,5,68,0,0,223,224,5,40,0,0,224,
229,3,8,4,0,225,226,5,41,0,0,226,228,3,8,4,0,227,225,1,0,0,0,228,231,1,0,
0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,7,1,0,0,0,231,229,1,0,0,0,232,237,
3,42,21,0,233,234,5,15,0,0,234,235,3,14,7,0,235,236,5,16,0,0,236,238,1,0,
0,0,237,233,1,0,0,0,237,238,1,0,0,0,238,9,1,0,0,0,239,244,5,68,0,0,240,241,
5,39,0,0,241,243,5,68,0,0,242,240,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,
0,244,245,1,0,0,0,245,11,1,0,0,0,246,244,1,0,0,0,247,248,6,6,-1,0,248,249,
5,51,0,0,249,250,3,16,8,0,250,251,5,52,0,0,251,252,3,12,6,13,252,274,1,0,
0,0,253,254,5,53,0,0,254,255,3,16,8,0,255,256,5,52,0,0,256,257,3,12,6,12,
257,274,1,0,0,0,258,259,5,54,0,0,259,260,3,16,8,0,260,261,5,52,0,0,261,262,
3,12,6,11,262,274,1,0,0,0,263,264,5,59,0,0,264,274,3,12,6,6,265,274,3,66,
33,0,266,274,3,14,7,0,267,274,5,36,0,0,268,274,5,23,0,0,269,270,5,7,0,0,
270,271,3,12,6,0,271,272,5,8,0,0,272,274,1,0,0,0,273,247,1,0,0,0,273,253,
1,0,0,0,273,258,1,0,0,0,273,263,1,0,0,0,273,265,1,0,0,0,273,266,1,0,0,0,
273,267,1,0,0,0,273,268,1,0,0,0,273,269,1,0,0,0,274,295,1,0,0,0,275,276,
10,15,0,0,276,277,5,20,0,0,277,294,3,12,6,16,278,279,10,14,0,0,279,280,5,
46,0,0,280,294,3,12,6,15,281,282,10,10,0,0,282,283,5,55,0,0,283,294,3,12,
6,11,284,285,10,9,0,0,285,286,5,56,0,0,286,294,3,12,6,10,287,288,10,8,0,
0,288,289,5,57,0,0,289,294,3,12,6,9,290,291,10,7,0,0,291,292,5,58,0,0,292,
294,3,12,6,8,293,275,1,0,0,0,293,278,1,0,0,0,293,281,1,0,0,0,293,284,1,0,
0,0,293,287,1,0,0,0,293,290,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
296,1,0,0,0,296,13,1,0,0,0,297,295,1,0,0,0,298,299,6,7,-1,0,299,300,5,51,
0,0,300,301,3,16,8,0,301,302,5,52,0,0,302,303,3,14,7,44,303,446,1,0,0,0,
304,305,5,53,0,0,305,306,3,16,8,0,306,307,5,52,0,0,307,308,3,14,7,43,308,
446,1,0,0,0,309,310,5,54,0,0,310,311,3,16,8,0,311,312,5,52,0,0,312,313,3,
14,7,42,313,446,1,0,0,0,314,315,5,64,0,0,315,316,3,16,8,0,316,317,5,52,0,
0,317,318,3,14,7,41,318,446,1,0,0,0,319,320,5,65,0,0,320,321,3,16,8,0,321,
322,5,52,0,0,322,323,3,14,7,40,323,446,1,0,0,0,324,325,5,28,0,0,325,330,
3,20,10,0,326,327,5,46,0,0,327,329,3,20,10,0,328,326,1,0,0,0,329,332,1,0,
0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,
334,5,52,0,0,334,335,3,14,7,39,335,446,1,0,0,0,336,337,5,59,0,0,337,446,
3,14,7,34,338,339,5,26,0,0,339,340,3,12,6,0,340,341,5,35,0,0,341,342,3,14,
7,0,342,343,5,22,0,0,343,344,3,14,7,33,344,446,1,0,0,0,345,346,5,31,0,0,
346,446,3,14,7,28,347,348,5,29,0,0,348,446,3,14,7,26,349,350,5,134,0,0,350,
446,3,14,7,25,351,353,5,140,0,0,352,354,3,86,43,0,353,352,1,0,0,0,353,354,
1,0,0,0,354,362,1,0,0,0,355,356,3,14,7,0,356,357,5,148,0,0,357,363,1,0,0,
0,358,360,3,88,44,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,
363,5,150,0,0,362,355,1,0,0,0,362,359,1,0,0,0,363,364,1,0,0,0,364,446,3,
14,7,24,365,367,5,140,0,0,366,368,3,86,43,0,367,366,1,0,0,0,367,368,1,0,
0,0,368,376,1,0,0,0,369,370,3,14,7,0,370,371,5,144,0,0,371,377,1,0,0,0,372,
374,3,88,44,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,
146,0,0,376,369,1,0,0,0,376,373,1,0,0,0,377,446,1,0,0,0,378,379,5,63,0,0,
379,383,3,14,7,0,380,382,5,6,0,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,
1,0,0,0,383,384,1,0,0,0,384,446,1,0,0,0,385,383,1,0,0,0,386,446,3,44,22,
0,387,388,3,44,22,0,388,390,5,9,0,0,389,391,3,88,44,0,390,389,1,0,0,0,390,
391,1,0,0,0,391,392,1,0,0,0,392,393,5,10,0,0,393,446,1,0,0,0,394,446,5,5,
0,0,395,397,5,11,0,0,396,398,3,88,44,0,397,396,1,0,0,0,397,398,1,0,0,0,398,
399,1,0,0,0,399,446,5,12,0,0,400,401,5,11,0,0,401,402,3,16,8,0,402,403,5,
52,0,0,403,404,3,14,7,0,404,405,5,12,0,0,405,446,1,0,0,0,406,407,5,11,0,
0,407,408,3,16,8,0,408,409,5,12,0,0,409,446,1,0,0,0,410,411,5,9,0,0,411,
412,3,16,8,0,412,413,5,10,0,0,413,446,1,0,0,0,414,423,5,13,0,0,415,420,3,
20,10,0,416,417,5,39,0,0,417,419,3,20,10,0,418,416,1,0,0,0,419,422,1,0,0,
0,420,418,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,423,415,
1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,446,5,14,0,0,426,427,5,7,0,0,
427,430,3,14,7,0,428,429,5,39,0,0,429,431,3,14,7,0,430,428,1,0,0,0,431,432,
1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,5,8,0,0,
435,446,1,0,0,0,436,437,5,7,0,0,437,438,5,65,0,0,438,439,3,16,8,0,439,440,
5,8,0,0,440,446,1,0,0,0,441,442,5,7,0,0,442,443,3,14,7,0,443,444,5,8,0,0,
444,446,1,0,0,0,445,298,1,0,0,0,445,304,1,0,0,0,445,309,1,0,0,0,445,314,
1,0,0,0,445,319,1,0,0,0,445,324,1,0,0,0,445,336,1,0,0,0,445,338,1,0,0,0,
445,345,1,0,0,0,445,347,1,0,0,0,445,349,1,0,0,0,445,351,1,0,0,0,445,365,
1,0,0,0,445,378,1,0,0,0,445,386,1,0,0,0,445,387,1,0,0,0,445,394,1,0,0,0,
445,395,1,0,0,0,445,400,1,0,0,0,445,406,1,0,0,0,445,410,1,0,0,0,445,414,
1,0,0,0,445,426,1,0,0,0,445,436,1,0,0,0,445,441,1,0,0,0,446,555,1,0,0,0,
447,448,10,38,0,0,448,449,5,55,0,0,449,554,3,14,7,39,450,451,10,37,0,0,451,
452,5,56,0,0,452,554,3,14,7,38,453,454,10,36,0,0,454,455,5,57,0,0,455,554,
3,14,7,37,456,457,10,35,0,0,457,458,5,58,0,0,458,554,3,14,7,36,459,460,10,
32,0,0,460,461,5,66,0,0,461,554,3,14,7,33,462,463,10,31,0,0,463,464,5,67,
0,0,464,554,3,14,7,32,465,466,10,29,0,0,466,467,5,61,0,0,467,554,3,14,7,
30,468,469,10,21,0,0,469,470,4,7,14,0,470,471,5,138,0,0,471,554,3,14,7,22,
472,473,10,20,0,0,473,474,5,138,0,0,474,554,3,14,7,20,475,476,10,19,0,0,
476,478,5,142,0,0,477,479,3,86,43,0,478,477,1,0,0,0,478,479,1,0,0,0,479,
487,1,0,0,0,480,481,3,14,7,0,481,482,5,148,0,0,482,488,1,0,0,0,483,485,3,
88,44,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,5,150,0,
0,487,480,1,0,0,0,487,484,1,0,0,0,488,489,1,0,0,0,489,554,3,14,7,20,490,
491,10,17,0,0,491,554,3,14,7,18,492,493,10,30,0,0,493,494,5,43,0,0,494,495,
5,7,0,0,495,500,3,42,21,0,496,497,5,39,0,0,497,499,3,42,21,0,498,496,1,0,
0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,
500,1,0,0,0,503,504,5,8,0,0,504,554,1,0,0,0,505,508,10,27,0,0,506,507,5,
62,0,0,507,509,3,14,7,0,508,506,1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,
510,511,1,0,0,0,511,554,1,0,0,0,512,513,10,23,0,0,513,554,5,136,0,0,514,
515,10,22,0,0,515,517,5,142,0,0,516,518,3,86,43,0,517,516,1,0,0,0,517,518,
1,0,0,0,518,526,1,0,0,0,519,520,3,14,7,0,520,521,5,144,0,0,521,527,1,0,0,
0,522,524,3,88,44,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,
527,5,146,0,0,526,519,1,0,0,0,526,523,1,0,0,0,527,554,1,0,0,0,528,529,10,
16,0,0,529,554,5,6,0,0,530,531,10,15,0,0,531,532,5,9,0,0,532,533,3,42,21,
0,533,534,5,44,0,0,534,542,3,42,21,0,535,536,5,39,0,0,536,537,3,42,21,0,
537,538,5,44,0,0,538,539,3,42,21,0,539,541,1,0,0,0,540,535,1,0,0,0,541,544,
1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,
545,546,5,10,0,0,546,554,1,0,0,0,547,548,10,14,0,0,548,549,5,45,0,0,549,
554,3,44,22,0,550,551,10,13,0,0,551,552,5,45,0,0,552,554,5,5,0,0,553,447,
1,0,0,0,553,450,1,0,0,0,553,453,1,0,0,0,553,456,1,0,0,0,553,459,1,0,0,0,
553,462,1,0,0,0,553,465,1,0,0,0,553,468,1,0,0,0,553,472,1,0,0,0,553,475,
1,0,0,0,553,490,1,0,0,0,553,492,1,0,0,0,553,505,1,0,0,0,553,512,1,0,0,0,
553,514,1,0,0,0,553,528,1,0,0,0,553,530,1,0,0,0,553,547,1,0,0,0,553,550,
1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,15,1,0,0,0,557,
555,1,0,0,0,558,560,5,20,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,562,1,0,
0,0,561,563,3,18,9,0,562,561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,
566,5,20,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,575,1,0,0,0,567,569,5,41,
0,0,568,570,5,20,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,
573,3,12,6,0,572,574,5,20,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,576,1,
0,0,0,575,567,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,5,20,0,0,578,
577,1,0,0,0,578,579,1,0,0,0,579,17,1,0,0,0,580,585,3,22,11,0,581,582,7,0,
0,0,582,584,3,22,11,0,583,581,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,
586,1,0,0,0,586,19,1,0,0,0,587,585,1,0,0,0,588,589,3,42,21,0,589,590,5,38,
0,0,590,592,3,14,7,0,591,593,5,20,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,
21,1,0,0,0,594,599,3,42,21,0,595,596,5,39,0,0,596,598,3,42,21,0,597,595,
1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,
601,599,1,0,0,0,602,603,5,37,0,0,603,604,3,14,7,0,604,608,1,0,0,0,605,608,
3,20,10,0,606,608,3,14,7,0,607,594,1,0,0,0,607,605,1,0,0,0,607,606,1,0,0,
0,608,23,1,0,0,0,609,610,5,32,0,0,610,616,3,32,16,0,611,612,5,24,0,0,612,
616,3,26,13,0,613,614,5,25,0,0,614,616,3,26,13,0,615,609,1,0,0,0,615,611,
1,0,0,0,615,613,1,0,0,0,616,25,1,0,0,0,617,625,3,34,17,0,618,625,3,36,18,
0,619,620,3,28,14,0,620,621,3,30,15,0,621,622,3,38,19,0,622,625,1,0,0,0,
623,625,3,40,20,0,624,617,1,0,0,0,624,618,1,0,0,0,624,619,1,0,0,0,624,623,
1,0,0,0,625,27,1,0,0,0,626,627,5,5,0,0,627,29,1,0,0,0,628,629,7,1,0,0,629,
31,1,0,0,0,630,635,3,34,17,0,631,635,3,36,18,0,632,635,3,38,19,0,633,635,
3,40,20,0,634,630,1,0,0,0,634,631,1,0,0,0,634,632,1,0,0,0,634,633,1,0,0,
0,635,33,1,0,0,0,636,640,5,7,0,0,637,641,3,48,24,0,638,639,5,29,0,0,639,
641,5,47,0,0,640,637,1,0,0,0,640,638,1,0,0,0,641,642,1,0,0,0,642,643,5,8,
0,0,643,35,1,0,0,0,644,645,5,7,0,0,645,646,3,50,25,0,646,647,5,8,0,0,647,
37,1,0,0,0,648,649,5,7,0,0,649,650,3,52,26,0,650,651,5,8,0,0,651,39,1,0,
0,0,652,653,5,7,0,0,653,654,3,54,27,0,654,655,5,8,0,0,655,41,1,0,0,0,656,
659,5,68,0,0,657,659,3,46,23,0,658,656,1,0,0,0,658,657,1,0,0,0,659,43,1,
0,0,0,660,666,5,68,0,0,661,662,5,7,0,0,662,663,3,46,23,0,663,664,5,8,0,0,
664,666,1,0,0,0,665,660,1,0,0,0,665,661,1,0,0,0,666,45,1,0,0,0,667,672,3,
48,24,0,668,672,3,50,25,0,669,672,3,52,26,0,670,672,3,54,27,0,671,667,1,
0,0,0,671,668,1,0,0,0,671,669,1,0,0,0,671,670,1,0,0,0,672,47,1,0,0,0,673,
674,5,134,0,0,674,712,5,47,0,0,675,676,5,133,0,0,676,712,5,47,0,0,677,684,
5,140,0,0,678,679,5,47,0,0,679,683,5,151,0,0,680,681,5,48,0,0,681,683,5,
152,0,0,682,678,1,0,0,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,
684,685,1,0,0,0,685,691,1,0,0,0,686,684,1,0,0,0,687,688,5,47,0,0,688,692,
5,148,0,0,689,690,5,48,0,0,690,692,5,150,0,0,691,687,1,0,0,0,691,689,1,0,
0,0,692,693,1,0,0,0,693,712,5,47,0,0,694,701,5,139,0,0,695,696,5,47,0,0,
696,700,5,151,0,0,697,698,5,48,0,0,698,700,5,152,0,0,699,695,1,0,0,0,699,
697,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,708,1,0,
0,0,703,701,1,0,0,0,704,705,5,47,0,0,705,709,5,147,0,0,706,707,5,48,0,0,
707,709,5,149,0,0,708,704,1,0,0,0,708,706,1,0,0,0,709,710,1,0,0,0,710,712,
5,47,0,0,711,673,1,0,0,0,711,675,1,0,0,0,711,677,1,0,0,0,711,694,1,0,0,0,
712,49,1,0,0,0,713,714,5,47,0,0,714,752,5,136,0,0,715,716,5,47,0,0,716,752,
5,135,0,0,717,718,5,47,0,0,718,725,5,142,0,0,719,720,5,47,0,0,720,724,5,
151,0,0,721,722,5,48,0,0,722,724,5,152,0,0,723,719,1,0,0,0,723,721,1,0,0,
0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,732,1,0,0,0,727,725,
1,0,0,0,728,729,5,47,0,0,729,733,5,144,0,0,730,731,5,48,0,0,731,733,5,146,
0,0,732,728,1,0,0,0,732,730,1,0,0,0,733,752,1,0,0,0,734,735,5,47,0,0,735,
742,5,141,0,0,736,737,5,47,0,0,737,741,5,151,0,0,738,739,5,48,0,0,739,741,
5,152,0,0,740,736,1,0,0,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,
0,742,743,1,0,0,0,743,749,1,0,0,0,744,742,1,0,0,0,745,746,5,47,0,0,746,750,
5,143,0,0,747,748,5,48,0,0,748,750,5,145,0,0,749,745,1,0,0,0,749,747,1,0,
0,0,750,752,1,0,0,0,751,713,1,0,0,0,751,715,1,0,0,0,751,717,1,0,0,0,751,
734,1,0,0,0,752,51,1,0,0,0,753,754,5,47,0,0,754,755,5,138,0,0,755,796,5,
47,0,0,756,757,5,47,0,0,757,758,5,137,0,0,758,796,5,47,0,0,759,760,5,47,
0,0,760,767,5,142,0,0,761,762,5,47,0,0,762,766,5,151,0,0,763,764,5,48,0,
0,764,766,5,152,0,0,765,761,1,0,0,0,765,763,1,0,0,0,766,769,1,0,0,0,767,
765,1,0,0,0,767,768,1,0,0,0,768,774,1,0,0,0,769,767,1,0,0,0,770,771,5,47,
0,0,771,775,5,148,0,0,772,773,5,48,0,0,773,775,5,150,0,0,774,770,1,0,0,0,
774,772,1,0,0,0,775,776,1,0,0,0,776,796,5,47,0,0,777,778,5,47,0,0,778,785,
5,141,0,0,779,780,5,47,0,0,780,784,5,151,0,0,781,782,5,48,0,0,782,784,5,
152,0,0,783,779,1,0,0,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,
785,786,1,0,0,0,786,792,1,0,0,0,787,785,1,0,0,0,788,789,5,47,0,0,789,793,
5,147,0,0,790,791,5,48,0,0,791,793,5,149,0,0,792,788,1,0,0,0,792,790,1,0,
0,0,793,794,1,0,0,0,794,796,5,47,0,0,795,753,1,0,0,0,795,756,1,0,0,0,795,
759,1,0,0,0,795,777,1,0,0,0,796,53,1,0,0,0,797,804,5,140,0,0,798,799,5,47,
0,0,799,803,5,151,0,0,800,801,5,48,0,0,801,803,5,152,0,0,802,798,1,0,0,0,
802,800,1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,811,
1,0,0,0,806,804,1,0,0,0,807,808,5,47,0,0,808,812,5,144,0,0,809,810,5,48,
0,0,810,812,5,146,0,0,811,807,1,0,0,0,811,809,1,0,0,0,812,830,1,0,0,0,813,
820,5,139,0,0,814,815,5,47,0,0,815,819,5,151,0,0,816,817,5,48,0,0,817,819,
5,152,0,0,818,814,1,0,0,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,
0,820,821,1,0,0,0,821,827,1,0,0,0,822,820,1,0,0,0,823,824,5,47,0,0,824,828,
5,143,0,0,825,826,5,48,0,0,826,828,5,145,0,0,827,823,1,0,0,0,827,825,1,0,
0,0,828,830,1,0,0,0,829,797,1,0,0,0,829,813,1,0,0,0,830,55,1,0,0,0,831,836,
3,58,29,0,832,836,3,60,30,0,833,836,3,62,31,0,834,836,3,64,32,0,835,831,
1,0,0,0,835,832,1,0,0,0,835,833,1,0,0,0,835,834,1,0,0,0,836,57,1,0,0,0,837,
838,5,134,0,0,838,851,5,68,0,0,839,844,5,140,0,0,840,841,5,68,0,0,841,843,
7,2,0,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,
845,847,1,0,0,0,846,844,1,0,0,0,847,848,5,68,0,0,848,849,7,3,0,0,849,851,
5,68,0,0,850,837,1,0,0,0,850,839,1,0,0,0,851,59,1,0,0,0,852,853,5,68,0,0,
853,866,5,136,0,0,854,855,5,68,0,0,855,860,5,142,0,0,856,857,5,68,0,0,857,
859,7,2,0,0,858,856,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,
0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,864,5,68,0,0,864,866,7,4,0,0,865,
852,1,0,0,0,865,854,1,0,0,0,866,61,1,0,0,0,867,868,5,68,0,0,868,869,5,138,
0,0,869,883,5,68,0,0,870,871,5,68,0,0,871,876,5,142,0,0,872,873,5,68,0,0,
873,875,7,2,0,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,
1,0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,880,5,68,0,0,880,881,7,3,0,0,
881,883,5,68,0,0,882,867,1,0,0,0,882,870,1,0,0,0,883,63,1,0,0,0,884,889,
5,140,0,0,885,886,5,68,0,0,886,888,7,2,0,0,887,885,1,0,0,0,888,891,1,0,0,
0,889,887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,889,1,0,0,0,892,893,
5,68,0,0,893,894,7,4,0,0,894,65,1,0,0,0,895,900,3,68,34,0,896,900,3,70,35,
0,897,900,3,72,36,0,898,900,3,74,37,0,899,895,1,0,0,0,899,896,1,0,0,0,899,
897,1,0,0,0,899,898,1,0,0,0,900,67,1,0,0,0,901,902,5,133,0,0,902,918,3,14,
7,0,903,905,5,139,0,0,904,906,3,86,43,0,905,904,1,0,0,0,905,906,1,0,0,0,
906,914,1,0,0,0,907,908,3,14,7,0,908,909,5,147,0,0,909,915,1,0,0,0,910,912,
3,88,44,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,915,5,149,
0,0,914,907,1,0,0,0,914,911,1,0,0,0,915,916,1,0,0,0,916,918,3,14,7,0,917,
901,1,0,0,0,917,903,1,0,0,0,918,69,1,0,0,0,919,920,3,14,7,0,920,921,5,135,
0,0,921,937,1,0,0,0,922,923,3,14,7,0,923,925,5,141,0,0,924,926,3,86,43,0,
925,924,1,0,0,0,925,926,1,0,0,0,926,934,1,0,0,0,927,928,3,14,7,0,928,929,
5,143,0,0,929,935,1,0,0,0,930,932,3,88,44,0,931,930,1,0,0,0,931,932,1,0,
0,0,932,933,1,0,0,0,933,935,5,145,0,0,934,927,1,0,0,0,934,931,1,0,0,0,935,
937,1,0,0,0,936,919,1,0,0,0,936,922,1,0,0,0,937,71,1,0,0,0,938,939,3,14,
7,0,939,942,4,36,26,0,940,941,7,5,0,0,941,943,3,14,7,0,942,940,1,0,0,0,943,
944,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,987,1,0,0,0,946,949,3,14,
7,0,947,948,7,5,0,0,948,950,3,14,7,0,949,947,1,0,0,0,950,951,1,0,0,0,951,
949,1,0,0,0,951,952,1,0,0,0,952,987,1,0,0,0,953,954,3,14,7,0,954,955,4,36,
27,0,955,957,5,141,0,0,956,958,3,86,43,0,957,956,1,0,0,0,957,958,1,0,0,0,
958,966,1,0,0,0,959,960,3,14,7,0,960,961,5,147,0,0,961,967,1,0,0,0,962,964,
3,88,44,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,967,5,149,
0,0,966,959,1,0,0,0,966,963,1,0,0,0,967,968,1,0,0,0,968,969,3,14,7,0,969,
987,1,0,0,0,970,971,3,14,7,0,971,973,5,141,0,0,972,974,3,86,43,0,973,972,
1,0,0,0,973,974,1,0,0,0,974,982,1,0,0,0,975,976,3,14,7,0,976,977,5,147,0,
0,977,983,1,0,0,0,978,980,3,88,44,0,979,978,1,0,0,0,979,980,1,0,0,0,980,
981,1,0,0,0,981,983,5,149,0,0,982,975,1,0,0,0,982,979,1,0,0,0,983,984,1,
0,0,0,984,985,3,14,7,0,985,987,1,0,0,0,986,938,1,0,0,0,986,946,1,0,0,0,986,
953,1,0,0,0,986,970,1,0,0,0,987,73,1,0,0,0,988,990,5,139,0,0,989,991,3,86,
43,0,990,989,1,0,0,0,990,991,1,0,0,0,991,999,1,0,0,0,992,993,3,14,7,0,993,
994,5,143,0,0,994,1000,1,0,0,0,995,997,3,88,44,0,996,995,1,0,0,0,996,997,
1,0,0,0,997,998,1,0,0,0,998,1000,5,145,0,0,999,992,1,0,0,0,999,996,1,0,0,
0,1000,75,1,0,0,0,1001,1006,3,78,39,0,1002,1006,3,80,40,0,1003,1006,3,82,
41,0,1004,1006,3,84,42,0,1005,1001,1,0,0,0,1005,1002,1,0,0,0,1005,1003,1,
0,0,0,1005,1004,1,0,0,0,1006,77,1,0,0,0,1007,1008,5,134,0,0,1008,1024,3,
14,7,0,1009,1011,5,140,0,0,1010,1012,3,86,43,0,1011,1010,1,0,0,0,1011,1012,
1,0,0,0,1012,1020,1,0,0,0,1013,1014,3,14,7,0,1014,1015,5,148,0,0,1015,1021,
1,0,0,0,1016,1018,3,88,44,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,
1,0,0,0,1019,1021,5,150,0,0,1020,1013,1,0,0,0,1020,1017,1,0,0,0,1021,1022,
1,0,0,0,1022,1024,3,14,7,0,1023,1007,1,0,0,0,1023,1009,1,0,0,0,1024,79,1,
0,0,0,1025,1026,3,14,7,0,1026,1027,5,136,0,0,1027,1043,1,0,0,0,1028,1029,
3,14,7,0,1029,1031,5,142,0,0,1030,1032,3,86,43,0,1031,1030,1,0,0,0,1031,
1032,1,0,0,0,1032,1040,1,0,0,0,1033,1034,3,14,7,0,1034,1035,5,144,0,0,1035,
1041,1,0,0,0,1036,1038,3,88,44,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
1039,1,0,0,0,1039,1041,5,146,0,0,1040,1033,1,0,0,0,1040,1037,1,0,0,0,1041,
1043,1,0,0,0,1042,1025,1,0,0,0,1042,1028,1,0,0,0,1043,81,1,0,0,0,1044,1045,
3,14,7,0,1045,1046,5,138,0,0,1046,1047,3,14,7,0,1047,1065,1,0,0,0,1048,1049,
3,14,7,0,1049,1051,5,142,0,0,1050,1052,3,86,43,0,1051,1050,1,0,0,0,1051,
1052,1,0,0,0,1052,1060,1,0,0,0,1053,1054,3,14,7,0,1054,1055,5,148,0,0,1055,
1061,1,0,0,0,1056,1058,3,88,44,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,
1059,1,0,0,0,1059,1061,5,150,0,0,1060,1053,1,0,0,0,1060,1057,1,0,0,0,1061,
1062,1,0,0,0,1062,1063,3,14,7,0,1063,1065,1,0,0,0,1064,1044,1,0,0,0,1064,
1048,1,0,0,0,1065,83,1,0,0,0,1066,1068,5,140,0,0,1067,1069,3,86,43,0,1068,
1067,1,0,0,0,1068,1069,1,0,0,0,1069,1077,1,0,0,0,1070,1071,3,14,7,0,1071,
1072,5,144,0,0,1072,1078,1,0,0,0,1073,1075,3,88,44,0,1074,1073,1,0,0,0,1074,
1075,1,0,0,0,1075,1076,1,0,0,0,1076,1078,5,146,0,0,1077,1070,1,0,0,0,1077,
1074,1,0,0,0,1078,85,1,0,0,0,1079,1080,3,14,7,0,1080,1081,5,151,0,0,1081,
1087,1,0,0,0,1082,1084,3,88,44,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,
1085,1,0,0,0,1085,1087,5,152,0,0,1086,1079,1,0,0,0,1086,1083,1,0,0,0,1087,
1088,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,87,1,0,0,0,1090,1095,
3,14,7,0,1091,1092,5,39,0,0,1092,1094,3,14,7,0,1093,1091,1,0,0,0,1094,1097,
1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,89,1,0,0,0,1097,1095,1,
0,0,0,139,93,95,105,111,121,124,131,142,153,165,172,198,220,229,237,244,
273,293,295,330,353,359,362,367,373,376,383,390,397,420,423,432,445,478,
484,487,500,510,517,523,526,542,553,555,559,562,565,569,573,575,578,585,
592,599,607,615,624,634,640,658,665,671,682,684,691,699,701,708,711,723,
725,732,740,742,749,751,765,767,774,783,785,792,795,802,804,811,818,820,
827,829,835,844,850,860,865,876,882,889,899,905,911,914,917,925,931,934,
936,944,951,957,963,966,973,979,982,986,990,996,999,1005,1011,1017,1020,
1023,1031,1037,1040,1042,1051,1057,1060,1064,1068,1074,1077,1083,1086,1088,
1095];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class ZParser extends antlr4.Parser {

    static grammarFileName = "ZParser.g4";
    static literalNames = [ null, "'\\u2500'", "'\\u250C'", "'\\u2577'", 
                            null, null, null, "'\\u0028'", "'\\u0029'", 
                            "'\\u005B'", "'\\u005D'", "'\\u007B'", "'\\u007D'", 
                            "'\\u2989'", "'\\u298A'", "'\\u27EA'", "'\\u27EB'", 
                            "'\\u2550'", "'\\u2514'", null, null, null, 
                            "'else'", "'false'", "'function'", "'generic'", 
                            "'if'", "'leftassoc'", "'let'", "'\\u2119'", 
                            "'parents'", "'pre'", "'relation'", "'rightassoc'", 
                            "'section'", "'then'", "'true'", "':'", "'=='", 
                            "','", "'::='", "'|'", "'\\u0026'", "'\\u005C'", 
                            "'/'", "'.'", "';'", "'_'", "',,'", "'='", null, 
                            "'\\u2200'", "'\\u2981'", "'\\u2203'", null, 
                            "'\\u21D4'", "'\\u21D2'", "'\\u2228'", "'\\u2227'", 
                            "'\\u00AC'", "'\\u2208'", "'\\u2A21'", "'\\u00D7'", 
                            "'\\u03B8'", "'\\u03BB'", "'\\u03BC'", "'\\u2A1F'", 
                            "'\\u2A20'", null, null, "'\\u0394'", "'\\u039E'", 
                            "'\\uD835\\uDD38'", "'\\u2115'", "'\\u2032'", 
                            "'\\u0021'", "'\\u003F'", "'\\u2197'", "'\\u2199'", 
                            "'\\u2198'", "'\\u2196'", "'\\u22A2'", "'\\u29F9'", 
                            "'\\u002B'", null, "'\\u2194'", "'\\u2192'", 
                            "'\\u2260'", "'\\u2209'", "'\\u2205'", "'\\u2286'", 
                            "'\\u2282'", "'\\u222A'", "'\\u2229'", "'\\u2216'", 
                            "'\\u2296'", "'\\u22C3'", "'\\u22C2'", "'\\uD835\\uDD3D'", 
                            "'\\u21A6'", "'\\u2A3E'", "'\\u2218'", "'\\u25C1'", 
                            "'\\u25B7'", "'\\u2A64'", "'\\u2A65'", "'\\u223C'", 
                            "'\\u2987'", "'\\u2988'", "'\\u2295'", "'\\u21F8'", 
                            "'\\u2914'", "'\\u21A3'", "'\\u2900'", "'\\u21A0'", 
                            "'\\u2916'", "'\\u21FB'", "'\\u2915'", "'\\u2124'", 
                            "'\\u002D'", "'\\u2212'", "'\\u2264'", "'\\u003C'", 
                            "'\\u2265'", "'\\u003E'", "'\\u002A'", "'\\u0023'", 
                            "'\\u2040'", "'\\u21BF'", "'\\u21BE'", "'\\u27E8'", 
                            "'\\u27E9'", null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'\\u2028'" ];
    static symbolicNames = [ null, "ZED", "SCH", "AX", "TEXT", "NUMERAL", 
                             "STROKE", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
                             "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
                             "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
                             "LEFT_BINDING_BRACKET", "RIGHT_BINDING_BRACKET", 
                             "LEFT_DOUBLE_ANGLE_BRACKET", "RIGHT_DOUBLE_ANGLE_BRACKET", 
                             "GEN", "END", "WS", "NL", "IGNORE_NL", "ELSE", 
                             "FALSE", "FUNCTION", "GENERIC", "IF", "LEFTASSOC", 
                             "LET", "POWERSET", "PARENTS", "PRE_KEY", "RELATION", 
                             "RIGHTASSOC", "SECTION", "THEN", "TRUE", "COLON", 
                             "DEFINE_EQUAL", "COMMA", "FREE_EQUALS", "VERTICAL_LINE", 
                             "AMPERSAND", "REVERSE_SOLIDUS", "SOLIDUS", 
                             "FULL_STOP", "SEMICOLON", "ARGUMENT", "LIST", 
                             "EQUALS_SIGN", "CONJECTURE", "FOR_ALL", "SPOT", 
                             "THERE_EXISTS", "UNIQUE_EXISTS", "LEFT_RIGHT_DOUBLE_ARROW", 
                             "RIGHTWARDS_DOUBLE_ARROW", "LOGICAL_OR", "LOGICAL_AND", 
                             "NOT_SIGN", "ELEMENT_OF", "SCHEMA_PROJECTION", 
                             "MULTIPLICATION_SIGN", "GREEK_SMALL_LETTER_THETA", 
                             "GREEK_SMALL_LETTER_LAMBDA", "GREEK_SMALL_LETTER_MU", 
                             "SCHEMA_COMPOSITION", "SCHEMA_PIPING", "NAME", 
                             "WORDPART", "GREEK_CAPITAL_LETTER_DELTA", "GREEK_CAPITAL_LETTER_XI", 
                             "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A", "DOUBLE_STRUCK_CAPITAL_N", 
                             "MODIFIER_LETTER_PRIME", "EXCLAMATION_MARK", 
                             "QUESTION_MARK", "NORTH_EAST_ARROW", "SOUTH_WEST_ARROW", 
                             "SOUTH_EAST_ARROW", "NORTH_WEST_ARROW", "RIGHT_TACK", 
                             "BIG_REVERSE_SOLIDUS", "PLUS_SIGN", "MATHEMATICAL_TOOLKIT_SYMBOLS", 
                             "LEFT_RIGHT_ARROW", "RIGHTWARDS_ARROW", "NOT_EQUAL_TO", 
                             "NOT_AN_ELEMENT_OF", "EMPTY_SET", "SUBSET_OF_OR_EQUAL_TO", 
                             "SUBSET_OF", "UNION", "INTERSECTION", "SET_MINUS", 
                             "CIRCLED_MINUS", "N_ARY_UNION", "N_ARY_INTERSECTION", 
                             "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F", "RIGHTWARDS_ARROW_FROM_BAR", 
                             "RELATIONAL_COMPOSITION", "RING_OPERATOR", 
                             "WHITE_LEFT_POINTING_TRIANGLE", "WHITE_RIGHT_POINTING_TRIANGLE", 
                             "DOMAIN_ANTIRESTRICTION", "RANGE_ANTIRESTRICTION", 
                             "TILDE_OPERATOR", "LEFT_IMAGE_BRACKET", "RIGHT_IMAGE_BRACKET", 
                             "CIRCLED_PLUS", "RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE", 
                             "RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE", 
                             "RIGHTWARDS_ARROW_WITH_TAIL", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE", 
                             "RIGHTWARDS_TWO_HEADED_ARROW", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL", 
                             "RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE", 
                             "RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE", 
                             "DOUBLE_STRUCK_CAPITAL_Z", "HYPHEN_MINUS", 
                             "MINUS_SIGN", "LESS_THAN_OR_EQUAL_TO", "LESS_THAN_SIGN", 
                             "GREATER_THAN_OR_EQUAL_TO", "GREATER_THAN_SIGN", 
                             "ASTERISK", "NUMBER_SIGN", "CHARACTER_TIE", 
                             "UPWARDS_HARPOON_WITH_BARB_LEFTWARDS", "UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS", 
                             "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
                             "ID", "PREP", "PRE", "POSTP", "POST", "IP", 
                             "I", "LP", "L", "ELP", "EL", "ERP", "ER", "SRP", 
                             "SR", "EREP", "ERE", "SREP", "SRE", "ES", "SS", 
                             "UNKNOWN", "NLCHAR" ];
    static ruleNames = [ "specification", "section", "paragraph", "freetype", 
                         "branch", "formals", "predicate", "expression", 
                         "schemaText", "declPart", "declNameExpression", 
                         "declaration", "operatorTemplate", "categoryTemplate", 
                         "prec", "assoc", "template_", "prefixTemplate", 
                         "postfixTemplate", "infixTemplate", "nofixTemplate", 
                         "declName", "refName", "opName", "prefixName", 
                         "postfixName", "infixName", "nofixName", "genName", 
                         "prefixGenName", "postfixGenName", "infixGenName", 
                         "nofixGenName", "relation", "prefixRel", "postfixRel", 
                         "infixRel", "nofixRel", "application", "prefixApp", 
                         "postfixApp", "infixApp", "nofixApp", "expSep", 
                         "expressionList" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ZParser.ruleNames;
        this.literalNames = ZParser.literalNames;
        this.symbolicNames = ZParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 6:
    	    		return this.predicate_sempred(localctx, predIndex);
    	case 7:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 36:
    	    		return this.infixRel_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    predicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 15);
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 10);
    		case 3:
    			return this.precpred(this._ctx, 9);
    		case 4:
    			return this.precpred(this._ctx, 8);
    		case 5:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 38);
    		case 7:
    			return this.precpred(this._ctx, 37);
    		case 8:
    			return this.precpred(this._ctx, 36);
    		case 9:
    			return this.precpred(this._ctx, 35);
    		case 10:
    			return this.precpred(this._ctx, 32);
    		case 11:
    			return this.precpred(this._ctx, 31);
    		case 12:
    			return this.precpred(this._ctx, 29);
    		case 13:
    			return this.precpred(this._ctx, 21);
    		case 14:
    			return ZSupport.isLeftAssociative(_input);
    		case 15:
    			return this.precpred(this._ctx, 20);
    		case 16:
    			return this.precpred(this._ctx, 19);
    		case 17:
    			return this.precpred(this._ctx, 17);
    		case 18:
    			return this.precpred(this._ctx, 30);
    		case 19:
    			return this.precpred(this._ctx, 27);
    		case 20:
    			return this.precpred(this._ctx, 23);
    		case 21:
    			return this.precpred(this._ctx, 22);
    		case 22:
    			return this.precpred(this._ctx, 16);
    		case 23:
    			return this.precpred(this._ctx, 15);
    		case 24:
    			return this.precpred(this._ctx, 14);
    		case 25:
    			return this.precpred(this._ctx, 13);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    infixRel_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 26:
    			return ZSupport.isLeftAssociative(_input);
    		case 27:
    			return ZSupport.isLeftAssociative(_input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	specification() {
	    let localctx = new SpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ZParser.RULE_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 95;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.ZED) | (1 << ZParser.SCH) | (1 << ZParser.AX) | (1 << ZParser.TEXT))) !== 0)) {
	            this.state = 93;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 90;
	                this.match(ZParser.TEXT);
	                break;

	            case 2:
	                this.state = 91;
	                this.section();
	                break;

	            case 3:
	                this.state = 92;
	                this.paragraph();
	                break;

	            }
	            this.state = 97;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 98;
	        this.match(ZParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	section() {
	    let localctx = new SectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ZParser.RULE_section);
	    var _la = 0; // Token type
	    try {
	        this.state = 124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InheritingSectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 100;
	            this.match(ZParser.ZED);
	            this.state = 101;
	            this.match(ZParser.SECTION);
	            this.state = 102;
	            this.match(ZParser.NAME);
	            this.state = 103;
	            this.match(ZParser.PARENTS);
	            this.state = 105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ZParser.NAME) {
	                this.state = 104;
	                this.formals();
	            }

	            this.state = 107;
	            this.match(ZParser.END);
	            this.state = 111;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 108;
	                    this.paragraph(); 
	                }
	                this.state = 113;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new BaseSectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 114;
	            this.match(ZParser.ZED);
	            this.state = 115;
	            this.match(ZParser.SECTION);
	            this.state = 116;
	            this.match(ZParser.NAME);
	            this.state = 117;
	            this.match(ZParser.END);
	            this.state = 121;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 118;
	                    this.paragraph(); 
	                }
	                this.state = 123;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraph() {
	    let localctx = new ParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ZParser.RULE_paragraph);
	    var _la = 0; // Token type
	    try {
	        this.state = 220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GivenTypesParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 126;
	            this.match(ZParser.ZED);
	            this.state = 127;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 128;
	            this.formals();
	            this.state = 129;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            this.state = 131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ZParser.NL) {
	                this.state = 130;
	                this.match(ZParser.NL);
	            }

	            this.state = 133;
	            this.match(ZParser.END);
	            break;

	        case 2:
	            localctx = new AxiomaticDescriptionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 135;
	            this.match(ZParser.AX);
	            this.state = 136;
	            this.schemaText();
	            this.state = 137;
	            this.match(ZParser.END);
	            break;

	        case 3:
	            localctx = new SchemaDefinitionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 139;
	            this.match(ZParser.SCH);
	            this.state = 140;
	            this.match(ZParser.NAME);
	            this.state = 142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 141;
	                this.match(ZParser.NL);

	            }
	            this.state = 144;
	            this.schemaText();
	            this.state = 145;
	            this.match(ZParser.END);
	            break;

	        case 4:
	            localctx = new GenericAxiomaticDescriptionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 147;
	            this.match(ZParser.AX);
	            this.state = 148;
	            this.match(ZParser.GEN);
	            this.state = 149;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 150;
	            this.formals();
	            this.state = 151;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            this.state = 153;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	            if(la_===1) {
	                this.state = 152;
	                this.match(ZParser.NL);

	            }
	            this.state = 155;
	            this.schemaText();
	            this.state = 156;
	            this.match(ZParser.END);
	            break;

	        case 5:
	            localctx = new GenericSchemaDefinitionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 158;
	            this.match(ZParser.SCH);
	            this.state = 159;
	            this.match(ZParser.GEN);
	            this.state = 160;
	            this.match(ZParser.NAME);
	            this.state = 161;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 162;
	            this.formals();
	            this.state = 163;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            this.state = 165;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            if(la_===1) {
	                this.state = 164;
	                this.match(ZParser.NL);

	            }
	            this.state = 167;
	            this.schemaText();
	            this.state = 168;
	            this.match(ZParser.END);
	            break;

	        case 6:
	            localctx = new HorizontalDefinitionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 170;
	            this.match(ZParser.ZED);
	            this.state = 172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ZParser.NL) {
	                this.state = 171;
	                this.match(ZParser.NL);
	            }

	            this.state = 174;
	            this.declNameExpression();
	            this.state = 175;
	            this.match(ZParser.END);
	            break;

	        case 7:
	            localctx = new GenericHorizontalDefinitionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 177;
	            this.match(ZParser.ZED);
	            this.state = 178;
	            this.declName();
	            this.state = 179;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 180;
	            this.formals();
	            this.state = 181;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            this.state = 182;
	            this.match(ZParser.DEFINE_EQUAL);
	            this.state = 183;
	            this.expression(0);
	            this.state = 184;
	            this.match(ZParser.END);
	            break;

	        case 8:
	            localctx = new GenericOperatorDefinitionParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 186;
	            this.match(ZParser.ZED);
	            this.state = 187;
	            this.genName();
	            this.state = 188;
	            this.match(ZParser.DEFINE_EQUAL);
	            this.state = 189;
	            this.expression(0);
	            this.state = 190;
	            this.match(ZParser.END);
	            break;

	        case 9:
	            localctx = new FreeTypesParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 192;
	            this.match(ZParser.ZED);
	            this.state = 193;
	            this.freetype();
	            this.state = 198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ZParser.AMPERSAND) {
	                this.state = 194;
	                this.match(ZParser.AMPERSAND);
	                this.state = 195;
	                this.freetype();
	                this.state = 200;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 201;
	            this.match(ZParser.END);
	            break;

	        case 10:
	            localctx = new ConjectureParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 203;
	            this.match(ZParser.ZED);
	            this.state = 204;
	            this.match(ZParser.CONJECTURE);
	            this.state = 205;
	            this.predicate(0);
	            this.state = 206;
	            this.match(ZParser.END);
	            break;

	        case 11:
	            localctx = new GenericConjectureParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 208;
	            this.match(ZParser.ZED);
	            this.state = 209;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 210;
	            this.formals();
	            this.state = 211;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            this.state = 212;
	            this.match(ZParser.CONJECTURE);
	            this.state = 213;
	            this.predicate(0);
	            this.state = 214;
	            this.match(ZParser.END);
	            break;

	        case 12:
	            localctx = new OperatorTemplateParagraphContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 216;
	            this.match(ZParser.ZED);
	            this.state = 217;
	            this.operatorTemplate();
	            this.state = 218;
	            this.match(ZParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freetype() {
	    let localctx = new FreetypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ZParser.RULE_freetype);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this.match(ZParser.NAME);
	        this.state = 223;
	        this.match(ZParser.FREE_EQUALS);
	        this.state = 224;
	        this.branch();
	        this.state = 229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZParser.VERTICAL_LINE) {
	            this.state = 225;
	            this.match(ZParser.VERTICAL_LINE);
	            this.state = 226;
	            this.branch();
	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	branch() {
	    let localctx = new BranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ZParser.RULE_branch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        this.declName();
	        this.state = 237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZParser.LEFT_DOUBLE_ANGLE_BRACKET) {
	            this.state = 233;
	            this.match(ZParser.LEFT_DOUBLE_ANGLE_BRACKET);
	            this.state = 234;
	            this.expression(0);
	            this.state = 235;
	            this.match(ZParser.RIGHT_DOUBLE_ANGLE_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formals() {
	    let localctx = new FormalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ZParser.RULE_formals);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.match(ZParser.NAME);
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZParser.COMMA) {
	            this.state = 240;
	            this.match(ZParser.COMMA);
	            this.state = 241;
	            this.match(ZParser.NAME);
	            this.state = 246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	predicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 12;
	    this.enterRecursionRule(localctx, 12, ZParser.RULE_predicate, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UniversalQuantificationPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 248;
	            this.match(ZParser.FOR_ALL);
	            this.state = 249;
	            this.schemaText();
	            this.state = 250;
	            this.match(ZParser.SPOT);
	            this.state = 251;
	            this.predicate(13);
	            break;

	        case 2:
	            localctx = new ExistentialQuantificationPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 253;
	            this.match(ZParser.THERE_EXISTS);
	            this.state = 254;
	            this.schemaText();
	            this.state = 255;
	            this.match(ZParser.SPOT);
	            this.state = 256;
	            this.predicate(12);
	            break;

	        case 3:
	            localctx = new UniqueExistentialQuantificationPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 258;
	            this.match(ZParser.UNIQUE_EXISTS);
	            this.state = 259;
	            this.schemaText();
	            this.state = 260;
	            this.match(ZParser.SPOT);
	            this.state = 261;
	            this.predicate(11);
	            break;

	        case 4:
	            localctx = new NegationPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 263;
	            this.match(ZParser.NOT_SIGN);
	            this.state = 264;
	            this.predicate(6);
	            break;

	        case 5:
	            localctx = new RelationOperatorApplicationPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 265;
	            this.relation();
	            break;

	        case 6:
	            localctx = new SchemaPredicatePredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 266;
	            this.expression(0);
	            break;

	        case 7:
	            localctx = new TruthPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 267;
	            this.match(ZParser.TRUE);
	            break;

	        case 8:
	            localctx = new FalsityPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 268;
	            this.match(ZParser.FALSE);
	            break;

	        case 9:
	            localctx = new ParenthesizedPredicateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 269;
	            this.match(ZParser.LEFT_PARENTHESIS);
	            this.state = 270;
	            this.predicate(0);
	            this.state = 271;
	            this.match(ZParser.RIGHT_PARENTHESIS);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 295;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 293;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new NewlineConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 275;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 276;
	                    this.match(ZParser.NL);
	                    this.state = 277;
	                    this.predicate(16);
	                    break;

	                case 2:
	                    localctx = new SemicolonConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 278;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 279;
	                    this.match(ZParser.SEMICOLON);
	                    this.state = 280;
	                    this.predicate(15);
	                    break;

	                case 3:
	                    localctx = new EquivalencePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 281;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 282;
	                    this.match(ZParser.LEFT_RIGHT_DOUBLE_ARROW);
	                    this.state = 283;
	                    this.predicate(11);
	                    break;

	                case 4:
	                    localctx = new ImplicationPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 284;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 285;
	                    this.match(ZParser.RIGHTWARDS_DOUBLE_ARROW);
	                    this.state = 286;
	                    this.predicate(10);
	                    break;

	                case 5:
	                    localctx = new DisjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 287;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 288;
	                    this.match(ZParser.LOGICAL_OR);
	                    this.state = 289;
	                    this.predicate(9);
	                    break;

	                case 6:
	                    localctx = new ConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
	                    this.state = 290;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 291;
	                    this.match(ZParser.LOGICAL_AND);
	                    this.state = 292;
	                    this.predicate(8);
	                    break;

	                } 
	            }
	            this.state = 297;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 14;
	    this.enterRecursionRule(localctx, 14, ZParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SchemaUniversalQuantificationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 299;
	            this.match(ZParser.FOR_ALL);
	            this.state = 300;
	            this.schemaText();
	            this.state = 301;
	            this.match(ZParser.SPOT);
	            this.state = 302;
	            this.expression(44);
	            break;

	        case 2:
	            localctx = new SchemaExistentialQuantificationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 304;
	            this.match(ZParser.THERE_EXISTS);
	            this.state = 305;
	            this.schemaText();
	            this.state = 306;
	            this.match(ZParser.SPOT);
	            this.state = 307;
	            this.expression(43);
	            break;

	        case 3:
	            localctx = new SchemaUniqueExistentialQuantificationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 309;
	            this.match(ZParser.UNIQUE_EXISTS);
	            this.state = 310;
	            this.schemaText();
	            this.state = 311;
	            this.match(ZParser.SPOT);
	            this.state = 312;
	            this.expression(42);
	            break;

	        case 4:
	            localctx = new FunctionConstructionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 314;
	            this.match(ZParser.GREEK_SMALL_LETTER_LAMBDA);
	            this.state = 315;
	            this.schemaText();
	            this.state = 316;
	            this.match(ZParser.SPOT);
	            this.state = 317;
	            this.expression(41);
	            break;

	        case 5:
	            localctx = new DefiniteDescriptionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 319;
	            this.match(ZParser.GREEK_SMALL_LETTER_MU);
	            this.state = 320;
	            this.schemaText();
	            this.state = 321;
	            this.match(ZParser.SPOT);
	            this.state = 322;
	            this.expression(40);
	            break;

	        case 6:
	            localctx = new SubstitutionExpressionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 324;
	            this.match(ZParser.LET);
	            this.state = 325;
	            this.declNameExpression();
	            this.state = 330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ZParser.SEMICOLON) {
	                this.state = 326;
	                this.match(ZParser.SEMICOLON);
	                this.state = 327;
	                this.declNameExpression();
	                this.state = 332;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 333;
	            this.match(ZParser.SPOT);
	            this.state = 334;
	            this.expression(39);
	            break;

	        case 7:
	            localctx = new SchemaNegationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 336;
	            this.match(ZParser.NOT_SIGN);
	            this.state = 337;
	            this.expression(34);
	            break;

	        case 8:
	            localctx = new ConditionalExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 338;
	            this.match(ZParser.IF);
	            this.state = 339;
	            this.predicate(0);
	            this.state = 340;
	            this.match(ZParser.THEN);
	            this.state = 341;
	            this.expression(0);
	            this.state = 342;
	            this.match(ZParser.ELSE);
	            this.state = 343;
	            this.expression(33);
	            break;

	        case 9:
	            localctx = new SchemaPreconditionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 345;
	            this.match(ZParser.PRE_KEY);
	            this.state = 346;
	            this.expression(28);
	            break;

	        case 10:
	            localctx = new PowersetExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 347;
	            this.match(ZParser.POWERSET);
	            this.state = 348;
	            this.expression(26);
	            break;

	        case 11:
	            localctx = new PrefixApplicationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 349;
	            this.match(ZParser.PRE);
	            this.state = 350;
	            this.expression(25);
	            break;

	        case 12:
	            localctx = new GenericPrefixApplicationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 351;
	            this.match(ZParser.L);
	            this.state = 353;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 352;
	                this.expSep();

	            }
	            this.state = 362;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 355;
	                this.expression(0);
	                this.state = 356;
	                this.match(ZParser.ERE);
	                break;

	            case 2:
	                this.state = 359;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 358;
	                    this.expressionList();
	                }

	                this.state = 361;
	                this.match(ZParser.SRE);
	                break;

	            }
	            this.state = 364;
	            this.expression(24);
	            break;

	        case 13:
	            localctx = new NofixApplicationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 365;
	            this.match(ZParser.L);
	            this.state = 367;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 366;
	                this.expSep();

	            }
	            this.state = 376;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 369;
	                this.expression(0);
	                this.state = 370;
	                this.match(ZParser.ER);
	                break;

	            case 2:
	                this.state = 373;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 372;
	                    this.expressionList();
	                }

	                this.state = 375;
	                this.match(ZParser.SR);
	                break;

	            }
	            break;

	        case 14:
	            localctx = new BindingConstructionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 378;
	            this.match(ZParser.GREEK_SMALL_LETTER_THETA);
	            this.state = 379;
	            this.expression(0);
	            this.state = 383;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 380;
	                    this.match(ZParser.STROKE); 
	                }
	                this.state = 385;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	            }

	            break;

	        case 15:
	            localctx = new ReferenceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 386;
	            this.refName();
	            break;

	        case 16:
	            localctx = new GenericInstantiationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 387;
	            this.refName();
	            this.state = 388;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                this.state = 389;
	                this.expressionList();
	            }

	            this.state = 392;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            break;

	        case 17:
	            localctx = new NumberLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 394;
	            this.match(ZParser.NUMERAL);
	            break;

	        case 18:
	            localctx = new SetExtensionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 395;
	            this.match(ZParser.LEFT_CURLY_BRACKET);
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                this.state = 396;
	                this.expressionList();
	            }

	            this.state = 399;
	            this.match(ZParser.RIGHT_CURLY_BRACKET);
	            break;

	        case 19:
	            localctx = new SetComprehensionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 400;
	            this.match(ZParser.LEFT_CURLY_BRACKET);
	            this.state = 401;
	            this.schemaText();
	            this.state = 402;
	            this.match(ZParser.SPOT);
	            this.state = 403;
	            this.expression(0);
	            this.state = 404;
	            this.match(ZParser.RIGHT_CURLY_BRACKET);
	            break;

	        case 20:
	            localctx = new CharacteristicSetComprehensionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 406;
	            this.match(ZParser.LEFT_CURLY_BRACKET);
	            this.state = 407;
	            this.schemaText();
	            this.state = 408;
	            this.match(ZParser.RIGHT_CURLY_BRACKET);
	            break;

	        case 21:
	            localctx = new SchemaConstructionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 410;
	            this.match(ZParser.LEFT_SQUARE_BRACKET);
	            this.state = 411;
	            this.schemaText();
	            this.state = 412;
	            this.match(ZParser.RIGHT_SQUARE_BRACKET);
	            break;

	        case 22:
	            localctx = new BindingExtensionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 414;
	            this.match(ZParser.LEFT_BINDING_BRACKET);
	            this.state = 423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ZParser.ARGUMENT || _la===ZParser.NAME || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (ZParser.PREP - 133)) | (1 << (ZParser.PRE - 133)) | (1 << (ZParser.LP - 133)) | (1 << (ZParser.L - 133)))) !== 0)) {
	                this.state = 415;
	                this.declNameExpression();
	                this.state = 420;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ZParser.COMMA) {
	                    this.state = 416;
	                    this.match(ZParser.COMMA);
	                    this.state = 417;
	                    this.declNameExpression();
	                    this.state = 422;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 425;
	            this.match(ZParser.RIGHT_BINDING_BRACKET);
	            break;

	        case 23:
	            localctx = new TupleExtensionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 426;
	            this.match(ZParser.LEFT_PARENTHESIS);
	            this.state = 427;
	            this.expression(0);
	            this.state = 430; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 428;
	                this.match(ZParser.COMMA);
	                this.state = 429;
	                this.expression(0);
	                this.state = 432; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ZParser.COMMA);
	            this.state = 434;
	            this.match(ZParser.RIGHT_PARENTHESIS);
	            break;

	        case 24:
	            localctx = new CharacteristicDefiniteDescriptionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 436;
	            this.match(ZParser.LEFT_PARENTHESIS);
	            this.state = 437;
	            this.match(ZParser.GREEK_SMALL_LETTER_MU);
	            this.state = 438;
	            this.schemaText();
	            this.state = 439;
	            this.match(ZParser.RIGHT_PARENTHESIS);
	            break;

	        case 25:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 441;
	            this.match(ZParser.LEFT_PARENTHESIS);
	            this.state = 442;
	            this.expression(0);
	            this.state = 443;
	            this.match(ZParser.RIGHT_PARENTHESIS);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 555;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 553;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SchemaEquivalenceExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 447;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 448;
	                    this.match(ZParser.LEFT_RIGHT_DOUBLE_ARROW);
	                    this.state = 449;
	                    this.expression(39);
	                    break;

	                case 2:
	                    localctx = new SchemaImplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 450;
	                    if (!( this.precpred(this._ctx, 37))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
	                    }
	                    this.state = 451;
	                    this.match(ZParser.RIGHTWARDS_DOUBLE_ARROW);
	                    this.state = 452;
	                    this.expression(38);
	                    break;

	                case 3:
	                    localctx = new SchemaDisjunctionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 453;
	                    if (!( this.precpred(this._ctx, 36))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
	                    }
	                    this.state = 454;
	                    this.match(ZParser.LOGICAL_OR);
	                    this.state = 455;
	                    this.expression(37);
	                    break;

	                case 4:
	                    localctx = new SchemaConjunctionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 456;
	                    if (!( this.precpred(this._ctx, 35))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
	                    }
	                    this.state = 457;
	                    this.match(ZParser.LOGICAL_AND);
	                    this.state = 458;
	                    this.expression(36);
	                    break;

	                case 5:
	                    localctx = new SchemaCompositionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 459;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 460;
	                    this.match(ZParser.SCHEMA_COMPOSITION);
	                    this.state = 461;
	                    this.expression(33);
	                    break;

	                case 6:
	                    localctx = new SchemaPipingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 462;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 463;
	                    this.match(ZParser.SCHEMA_PIPING);
	                    this.state = 464;
	                    this.expression(32);
	                    break;

	                case 7:
	                    localctx = new SchemaProjectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 465;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 466;
	                    this.match(ZParser.SCHEMA_PROJECTION);
	                    this.state = 467;
	                    this.expression(30);
	                    break;

	                case 8:
	                    localctx = new InfixLeftApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 468;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 469;
	                    if (!( ZSupport.isLeftAssociative(_input))) {
	                        throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
	                    }
	                    this.state = 470;
	                    this.match(ZParser.I);
	                    this.state = 471;
	                    this.expression(22);
	                    break;

	                case 9:
	                    localctx = new InfixRightApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 472;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 473;
	                    this.match(ZParser.I);
	                    this.state = 474;
	                    this.expression(20);
	                    break;

	                case 10:
	                    localctx = new GenericInfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 475;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 476;
	                    this.match(ZParser.EL);
	                    this.state = 478;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	                    if(la_===1) {
	                        this.state = 477;
	                        this.expSep();

	                    }
	                    this.state = 487;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 480;
	                        this.expression(0);
	                        this.state = 481;
	                        this.match(ZParser.ERE);
	                        break;

	                    case 2:
	                        this.state = 484;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                            this.state = 483;
	                            this.expressionList();
	                        }

	                        this.state = 486;
	                        this.match(ZParser.SRE);
	                        break;

	                    }
	                    this.state = 489;
	                    this.expression(20);
	                    break;

	                case 11:
	                    localctx = new ApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 490;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 491;
	                    this.expression(18);
	                    break;

	                case 12:
	                    localctx = new SchemaHidingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 492;
	                    if (!( this.precpred(this._ctx, 30))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
	                    }
	                    this.state = 493;
	                    this.match(ZParser.REVERSE_SOLIDUS);
	                    this.state = 494;
	                    this.match(ZParser.LEFT_PARENTHESIS);
	                    this.state = 495;
	                    this.declName();
	                    this.state = 500;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===ZParser.COMMA) {
	                        this.state = 496;
	                        this.match(ZParser.COMMA);
	                        this.state = 497;
	                        this.declName();
	                        this.state = 502;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 503;
	                    this.match(ZParser.RIGHT_PARENTHESIS);
	                    break;

	                case 13:
	                    localctx = new CartesianProductExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 505;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 508; 
	                    this._errHandler.sync(this);
	                    var _alt = 1;
	                    do {
	                    	switch (_alt) {
	                    	case 1:
	                    		this.state = 506;
	                    		this.match(ZParser.MULTIPLICATION_SIGN);
	                    		this.state = 507;
	                    		this.expression(0);
	                    		break;
	                    	default:
	                    		throw new antlr4.error.NoViableAltException(this);
	                    	}
	                    	this.state = 510; 
	                    	this._errHandler.sync(this);
	                    	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
	                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                    break;

	                case 14:
	                    localctx = new PostfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 512;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 513;
	                    this.match(ZParser.POST);
	                    break;

	                case 15:
	                    localctx = new GenericPostfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 514;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 515;
	                    this.match(ZParser.EL);
	                    this.state = 517;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	                    if(la_===1) {
	                        this.state = 516;
	                        this.expSep();

	                    }
	                    this.state = 526;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 519;
	                        this.expression(0);
	                        this.state = 520;
	                        this.match(ZParser.ER);
	                        break;

	                    case 2:
	                        this.state = 523;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                            this.state = 522;
	                            this.expressionList();
	                        }

	                        this.state = 525;
	                        this.match(ZParser.SR);
	                        break;

	                    }
	                    break;

	                case 16:
	                    localctx = new SchemaDecorationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 528;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 529;
	                    this.match(ZParser.STROKE);
	                    break;

	                case 17:
	                    localctx = new SchemaRenamingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 530;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 531;
	                    this.match(ZParser.LEFT_SQUARE_BRACKET);
	                    this.state = 532;
	                    this.declName();
	                    this.state = 533;
	                    this.match(ZParser.SOLIDUS);
	                    this.state = 534;
	                    this.declName();
	                    this.state = 542;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===ZParser.COMMA) {
	                        this.state = 535;
	                        this.match(ZParser.COMMA);
	                        this.state = 536;
	                        this.declName();
	                        this.state = 537;
	                        this.match(ZParser.SOLIDUS);
	                        this.state = 538;
	                        this.declName();
	                        this.state = 544;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 545;
	                    this.match(ZParser.RIGHT_SQUARE_BRACKET);
	                    break;

	                case 18:
	                    localctx = new BindingSelectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 547;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 548;
	                    this.match(ZParser.FULL_STOP);
	                    this.state = 549;
	                    this.refName();
	                    break;

	                case 19:
	                    localctx = new TupleSelectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
	                    this.state = 550;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 551;
	                    this.match(ZParser.FULL_STOP);
	                    this.state = 552;
	                    this.match(ZParser.NUMERAL);
	                    break;

	                } 
	            }
	            this.state = 557;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	schemaText() {
	    let localctx = new SchemaTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ZParser.RULE_schemaText);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 558;
	            this.match(ZParser.NL);

	        }
	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (ZParser.ARGUMENT - 47)) | (1 << (ZParser.FOR_ALL - 47)) | (1 << (ZParser.THERE_EXISTS - 47)) | (1 << (ZParser.UNIQUE_EXISTS - 47)) | (1 << (ZParser.NOT_SIGN - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 47)) | (1 << (ZParser.NAME - 47)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (ZParser.PREP - 133)) | (1 << (ZParser.PRE - 133)) | (1 << (ZParser.LP - 133)) | (1 << (ZParser.L - 133)))) !== 0)) {
	            this.state = 561;
	            this.declPart();
	        }

	        this.state = 565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 564;
	            this.match(ZParser.NL);

	        }
	        this.state = 575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZParser.VERTICAL_LINE) {
	            this.state = 567;
	            this.match(ZParser.VERTICAL_LINE);
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ZParser.NL) {
	                this.state = 568;
	                this.match(ZParser.NL);
	            }

	            this.state = 571;
	            this.predicate(0);
	            this.state = 573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 572;
	                this.match(ZParser.NL);

	            }
	        }

	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ZParser.NL) {
	            this.state = 577;
	            this.match(ZParser.NL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declPart() {
	    let localctx = new DeclPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ZParser.RULE_declPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.declaration();
	        this.state = 585;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 581;
	                _la = this._input.LA(1);
	                if(!(_la===ZParser.NL || _la===ZParser.SEMICOLON)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 582;
	                this.declaration(); 
	            }
	            this.state = 587;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declNameExpression() {
	    let localctx = new DeclNameExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ZParser.RULE_declNameExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.declName();
	        this.state = 589;
	        this.match(ZParser.DEFINE_EQUAL);
	        this.state = 590;
	        this.expression(0);
	        this.state = 592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 591;
	            this.match(ZParser.NL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ZParser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            this.declName();
	            this.state = 599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ZParser.COMMA) {
	                this.state = 595;
	                this.match(ZParser.COMMA);
	                this.state = 596;
	                this.declName();
	                this.state = 601;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 602;
	            this.match(ZParser.COLON);
	            this.state = 603;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 605;
	            this.declNameExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 606;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorTemplate() {
	    let localctx = new OperatorTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ZParser.RULE_operatorTemplate);
	    try {
	        this.state = 615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.RELATION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 609;
	            this.match(ZParser.RELATION);
	            this.state = 610;
	            this.template_();
	            break;
	        case ZParser.FUNCTION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 611;
	            this.match(ZParser.FUNCTION);
	            this.state = 612;
	            this.categoryTemplate();
	            break;
	        case ZParser.GENERIC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 613;
	            this.match(ZParser.GENERIC);
	            this.state = 614;
	            this.categoryTemplate();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	categoryTemplate() {
	    let localctx = new CategoryTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ZParser.RULE_categoryTemplate);
	    try {
	        this.state = 624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 617;
	            this.prefixTemplate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 618;
	            this.postfixTemplate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 619;
	            this.prec();
	            this.state = 620;
	            this.assoc();
	            this.state = 621;
	            this.infixTemplate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 623;
	            this.nofixTemplate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prec() {
	    let localctx = new PrecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ZParser.RULE_prec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.match(ZParser.NUMERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assoc() {
	    let localctx = new AssocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ZParser.RULE_assoc);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        _la = this._input.LA(1);
	        if(!(_la===ZParser.LEFTASSOC || _la===ZParser.RIGHTASSOC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	template_() {
	    let localctx = new Template_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ZParser.RULE_template_);
	    try {
	        this.state = 634;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            this.prefixTemplate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 631;
	            this.postfixTemplate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 632;
	            this.infixTemplate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 633;
	            this.nofixTemplate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixTemplate() {
	    let localctx = new PrefixTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ZParser.RULE_prefixTemplate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.match(ZParser.LEFT_PARENTHESIS);
	        this.state = 640;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.PREP:
	        case ZParser.PRE:
	        case ZParser.LP:
	        case ZParser.L:
	            this.state = 637;
	            this.prefixName();
	            break;
	        case ZParser.POWERSET:
	            this.state = 638;
	            this.match(ZParser.POWERSET);
	            this.state = 639;
	            this.match(ZParser.ARGUMENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 642;
	        this.match(ZParser.RIGHT_PARENTHESIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixTemplate() {
	    let localctx = new PostfixTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ZParser.RULE_postfixTemplate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(ZParser.LEFT_PARENTHESIS);
	        this.state = 645;
	        this.postfixName();
	        this.state = 646;
	        this.match(ZParser.RIGHT_PARENTHESIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixTemplate() {
	    let localctx = new InfixTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ZParser.RULE_infixTemplate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(ZParser.LEFT_PARENTHESIS);
	        this.state = 649;
	        this.infixName();
	        this.state = 650;
	        this.match(ZParser.RIGHT_PARENTHESIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nofixTemplate() {
	    let localctx = new NofixTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ZParser.RULE_nofixTemplate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.match(ZParser.LEFT_PARENTHESIS);
	        this.state = 653;
	        this.nofixName();
	        this.state = 654;
	        this.match(ZParser.RIGHT_PARENTHESIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declName() {
	    let localctx = new DeclNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ZParser.RULE_declName);
	    try {
	        this.state = 658;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 656;
	            this.match(ZParser.NAME);
	            break;
	        case ZParser.ARGUMENT:
	        case ZParser.PREP:
	        case ZParser.PRE:
	        case ZParser.LP:
	        case ZParser.L:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 657;
	            this.opName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refName() {
	    let localctx = new RefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ZParser.RULE_refName);
	    try {
	        this.state = 665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 660;
	            this.match(ZParser.NAME);
	            break;
	        case ZParser.LEFT_PARENTHESIS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 661;
	            this.match(ZParser.LEFT_PARENTHESIS);
	            this.state = 662;
	            this.opName();
	            this.state = 663;
	            this.match(ZParser.RIGHT_PARENTHESIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opName() {
	    let localctx = new OpNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ZParser.RULE_opName);
	    try {
	        this.state = 671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.prefixName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.postfixName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 669;
	            this.infixName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 670;
	            this.nofixName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixName() {
	    let localctx = new PrefixNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ZParser.RULE_prefixName);
	    try {
	        this.state = 711;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.PRE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 673;
	            this.match(ZParser.PRE);
	            this.state = 674;
	            this.match(ZParser.ARGUMENT);
	            break;
	        case ZParser.PREP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 675;
	            this.match(ZParser.PREP);
	            this.state = 676;
	            this.match(ZParser.ARGUMENT);
	            break;
	        case ZParser.L:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 677;
	            this.match(ZParser.L);
	            this.state = 684;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 682;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 678;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 679;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 680;
	                        this.match(ZParser.LIST);
	                        this.state = 681;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 686;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }

	            this.state = 691;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 687;
	                this.match(ZParser.ARGUMENT);
	                this.state = 688;
	                this.match(ZParser.ERE);
	                break;
	            case ZParser.LIST:
	                this.state = 689;
	                this.match(ZParser.LIST);
	                this.state = 690;
	                this.match(ZParser.SRE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 693;
	            this.match(ZParser.ARGUMENT);
	            break;
	        case ZParser.LP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 694;
	            this.match(ZParser.LP);
	            this.state = 701;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 699;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 695;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 696;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 697;
	                        this.match(ZParser.LIST);
	                        this.state = 698;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 703;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	            }

	            this.state = 708;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 704;
	                this.match(ZParser.ARGUMENT);
	                this.state = 705;
	                this.match(ZParser.EREP);
	                break;
	            case ZParser.LIST:
	                this.state = 706;
	                this.match(ZParser.LIST);
	                this.state = 707;
	                this.match(ZParser.SREP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 710;
	            this.match(ZParser.ARGUMENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixName() {
	    let localctx = new PostfixNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ZParser.RULE_postfixName);
	    try {
	        this.state = 751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 713;
	            this.match(ZParser.ARGUMENT);
	            this.state = 714;
	            this.match(ZParser.POST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 715;
	            this.match(ZParser.ARGUMENT);
	            this.state = 716;
	            this.match(ZParser.POSTP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 717;
	            this.match(ZParser.ARGUMENT);
	            this.state = 718;
	            this.match(ZParser.EL);
	            this.state = 725;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 723;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 719;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 720;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 721;
	                        this.match(ZParser.LIST);
	                        this.state = 722;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 727;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	            }

	            this.state = 732;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 728;
	                this.match(ZParser.ARGUMENT);
	                this.state = 729;
	                this.match(ZParser.ER);
	                break;
	            case ZParser.LIST:
	                this.state = 730;
	                this.match(ZParser.LIST);
	                this.state = 731;
	                this.match(ZParser.SR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 734;
	            this.match(ZParser.ARGUMENT);
	            this.state = 735;
	            this.match(ZParser.ELP);
	            this.state = 742;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 740;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 736;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 737;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 738;
	                        this.match(ZParser.LIST);
	                        this.state = 739;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 744;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	            }

	            this.state = 749;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 745;
	                this.match(ZParser.ARGUMENT);
	                this.state = 746;
	                this.match(ZParser.ERP);
	                break;
	            case ZParser.LIST:
	                this.state = 747;
	                this.match(ZParser.LIST);
	                this.state = 748;
	                this.match(ZParser.SRP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixName() {
	    let localctx = new InfixNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ZParser.RULE_infixName);
	    try {
	        this.state = 795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 753;
	            this.match(ZParser.ARGUMENT);
	            this.state = 754;
	            this.match(ZParser.I);
	            this.state = 755;
	            this.match(ZParser.ARGUMENT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 756;
	            this.match(ZParser.ARGUMENT);
	            this.state = 757;
	            this.match(ZParser.IP);
	            this.state = 758;
	            this.match(ZParser.ARGUMENT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 759;
	            this.match(ZParser.ARGUMENT);
	            this.state = 760;
	            this.match(ZParser.EL);
	            this.state = 767;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 765;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 761;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 762;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 763;
	                        this.match(ZParser.LIST);
	                        this.state = 764;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 769;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	            }

	            this.state = 774;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 770;
	                this.match(ZParser.ARGUMENT);
	                this.state = 771;
	                this.match(ZParser.ERE);
	                break;
	            case ZParser.LIST:
	                this.state = 772;
	                this.match(ZParser.LIST);
	                this.state = 773;
	                this.match(ZParser.SRE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 776;
	            this.match(ZParser.ARGUMENT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 777;
	            this.match(ZParser.ARGUMENT);
	            this.state = 778;
	            this.match(ZParser.ELP);
	            this.state = 785;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 783;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 779;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 780;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 781;
	                        this.match(ZParser.LIST);
	                        this.state = 782;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 787;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	            }

	            this.state = 792;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 788;
	                this.match(ZParser.ARGUMENT);
	                this.state = 789;
	                this.match(ZParser.EREP);
	                break;
	            case ZParser.LIST:
	                this.state = 790;
	                this.match(ZParser.LIST);
	                this.state = 791;
	                this.match(ZParser.SREP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 794;
	            this.match(ZParser.ARGUMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nofixName() {
	    let localctx = new NofixNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ZParser.RULE_nofixName);
	    try {
	        this.state = 829;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.L:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 797;
	            this.match(ZParser.L);
	            this.state = 804;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 802;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 798;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 799;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 800;
	                        this.match(ZParser.LIST);
	                        this.state = 801;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 806;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	            }

	            this.state = 811;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 807;
	                this.match(ZParser.ARGUMENT);
	                this.state = 808;
	                this.match(ZParser.ER);
	                break;
	            case ZParser.LIST:
	                this.state = 809;
	                this.match(ZParser.LIST);
	                this.state = 810;
	                this.match(ZParser.SR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case ZParser.LP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 813;
	            this.match(ZParser.LP);
	            this.state = 820;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 818;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ZParser.ARGUMENT:
	                        this.state = 814;
	                        this.match(ZParser.ARGUMENT);
	                        this.state = 815;
	                        this.match(ZParser.ES);
	                        break;
	                    case ZParser.LIST:
	                        this.state = 816;
	                        this.match(ZParser.LIST);
	                        this.state = 817;
	                        this.match(ZParser.SS);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 822;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	            }

	            this.state = 827;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ZParser.ARGUMENT:
	                this.state = 823;
	                this.match(ZParser.ARGUMENT);
	                this.state = 824;
	                this.match(ZParser.ERP);
	                break;
	            case ZParser.LIST:
	                this.state = 825;
	                this.match(ZParser.LIST);
	                this.state = 826;
	                this.match(ZParser.SRP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genName() {
	    let localctx = new GenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ZParser.RULE_genName);
	    try {
	        this.state = 835;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 831;
	            this.prefixGenName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 832;
	            this.postfixGenName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 833;
	            this.infixGenName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 834;
	            this.nofixGenName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixGenName() {
	    let localctx = new PrefixGenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ZParser.RULE_prefixGenName);
	    var _la = 0; // Token type
	    try {
	        this.state = 850;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.PRE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 837;
	            this.match(ZParser.PRE);
	            this.state = 838;
	            this.match(ZParser.NAME);
	            break;
	        case ZParser.L:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 839;
	            this.match(ZParser.L);
	            this.state = 844;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 840;
	                    this.match(ZParser.NAME);
	                    this.state = 841;
	                    _la = this._input.LA(1);
	                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 846;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	            }

	            this.state = 847;
	            this.match(ZParser.NAME);
	            this.state = 848;
	            _la = this._input.LA(1);
	            if(!(_la===ZParser.ERE || _la===ZParser.SRE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 849;
	            this.match(ZParser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixGenName() {
	    let localctx = new PostfixGenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ZParser.RULE_postfixGenName);
	    var _la = 0; // Token type
	    try {
	        this.state = 865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 852;
	            this.match(ZParser.NAME);
	            this.state = 853;
	            this.match(ZParser.POST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 854;
	            this.match(ZParser.NAME);
	            this.state = 855;
	            this.match(ZParser.EL);
	            this.state = 860;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 856;
	                    this.match(ZParser.NAME);
	                    this.state = 857;
	                    _la = this._input.LA(1);
	                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 862;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	            }

	            this.state = 863;
	            this.match(ZParser.NAME);
	            this.state = 864;
	            _la = this._input.LA(1);
	            if(!(_la===ZParser.ER || _la===ZParser.SR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixGenName() {
	    let localctx = new InfixGenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ZParser.RULE_infixGenName);
	    var _la = 0; // Token type
	    try {
	        this.state = 882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 867;
	            this.match(ZParser.NAME);
	            this.state = 868;
	            this.match(ZParser.I);
	            this.state = 869;
	            this.match(ZParser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 870;
	            this.match(ZParser.NAME);
	            this.state = 871;
	            this.match(ZParser.EL);
	            this.state = 876;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 872;
	                    this.match(ZParser.NAME);
	                    this.state = 873;
	                    _la = this._input.LA(1);
	                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 878;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	            }

	            this.state = 879;
	            this.match(ZParser.NAME);
	            this.state = 880;
	            _la = this._input.LA(1);
	            if(!(_la===ZParser.ERE || _la===ZParser.SRE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 881;
	            this.match(ZParser.NAME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nofixGenName() {
	    let localctx = new NofixGenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ZParser.RULE_nofixGenName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.match(ZParser.L);
	        this.state = 889;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 885;
	                this.match(ZParser.NAME);
	                this.state = 886;
	                _la = this._input.LA(1);
	                if(!(_la===ZParser.ES || _la===ZParser.SS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 891;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
	        }

	        this.state = 892;
	        this.match(ZParser.NAME);
	        this.state = 893;
	        _la = this._input.LA(1);
	        if(!(_la===ZParser.ER || _la===ZParser.SR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ZParser.RULE_relation);
	    try {
	        this.state = 899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.prefixRel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 896;
	            this.postfixRel();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 897;
	            this.infixRel();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 898;
	            this.nofixRel();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixRel() {
	    let localctx = new PrefixRelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ZParser.RULE_prefixRel);
	    var _la = 0; // Token type
	    try {
	        this.state = 917;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.PREP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 901;
	            this.match(ZParser.PREP);
	            this.state = 902;
	            this.expression(0);
	            break;
	        case ZParser.LP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 903;
	            this.match(ZParser.LP);
	            this.state = 905;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	            if(la_===1) {
	                this.state = 904;
	                this.expSep();

	            }
	            this.state = 914;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 907;
	                this.expression(0);
	                this.state = 908;
	                this.match(ZParser.EREP);
	                break;

	            case 2:
	                this.state = 911;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 910;
	                    this.expressionList();
	                }

	                this.state = 913;
	                this.match(ZParser.SREP);
	                break;

	            }
	            this.state = 916;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixRel() {
	    let localctx = new PostfixRelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ZParser.RULE_postfixRel);
	    var _la = 0; // Token type
	    try {
	        this.state = 936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            this.expression(0);
	            this.state = 920;
	            this.match(ZParser.POSTP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.expression(0);
	            this.state = 923;
	            this.match(ZParser.ELP);
	            this.state = 925;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	            if(la_===1) {
	                this.state = 924;
	                this.expSep();

	            }
	            this.state = 934;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 927;
	                this.expression(0);
	                this.state = 928;
	                this.match(ZParser.ERP);
	                break;

	            case 2:
	                this.state = 931;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 930;
	                    this.expressionList();
	                }

	                this.state = 933;
	                this.match(ZParser.SRP);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixRel() {
	    let localctx = new InfixRelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ZParser.RULE_infixRel);
	    var _la = 0; // Token type
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 938;
	            this.expression(0);
	            this.state = 939;
	            if (!( ZSupport.isLeftAssociative(_input))) {
	                throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
	            }
	            this.state = 942; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 940;
	            		_la = this._input.LA(1);
	            		if(!(_la===ZParser.EQUALS_SIGN || _la===ZParser.ELEMENT_OF || _la===ZParser.IP)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		this.state = 941;
	            		this.expression(0);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 944; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,107, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 946;
	            this.expression(0);
	            this.state = 949; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 947;
	            		_la = this._input.LA(1);
	            		if(!(_la===ZParser.EQUALS_SIGN || _la===ZParser.ELEMENT_OF || _la===ZParser.IP)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		this.state = 948;
	            		this.expression(0);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 951; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,108, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 953;
	            this.expression(0);
	            this.state = 954;
	            if (!( ZSupport.isLeftAssociative(_input))) {
	                throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
	            }
	            this.state = 955;
	            this.match(ZParser.ELP);
	            this.state = 957;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            if(la_===1) {
	                this.state = 956;
	                this.expSep();

	            }
	            this.state = 966;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 959;
	                this.expression(0);
	                this.state = 960;
	                this.match(ZParser.EREP);
	                break;

	            case 2:
	                this.state = 963;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 962;
	                    this.expressionList();
	                }

	                this.state = 965;
	                this.match(ZParser.SREP);
	                break;

	            }
	            this.state = 968;
	            this.expression(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 970;
	            this.expression(0);
	            this.state = 971;
	            this.match(ZParser.ELP);
	            this.state = 973;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 972;
	                this.expSep();

	            }
	            this.state = 982;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 975;
	                this.expression(0);
	                this.state = 976;
	                this.match(ZParser.EREP);
	                break;

	            case 2:
	                this.state = 979;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 978;
	                    this.expressionList();
	                }

	                this.state = 981;
	                this.match(ZParser.SREP);
	                break;

	            }
	            this.state = 984;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nofixRel() {
	    let localctx = new NofixRelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ZParser.RULE_nofixRel);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this.match(ZParser.LP);
	        this.state = 990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 989;
	            this.expSep();

	        }
	        this.state = 999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 992;
	            this.expression(0);
	            this.state = 993;
	            this.match(ZParser.ERP);
	            break;

	        case 2:
	            this.state = 996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                this.state = 995;
	                this.expressionList();
	            }

	            this.state = 998;
	            this.match(ZParser.SRP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	application() {
	    let localctx = new ApplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ZParser.RULE_application);
	    try {
	        this.state = 1005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1001;
	            this.prefixApp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1002;
	            this.postfixApp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1003;
	            this.infixApp();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1004;
	            this.nofixApp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixApp() {
	    let localctx = new PrefixAppContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ZParser.RULE_prefixApp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1023;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ZParser.PRE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1007;
	            this.match(ZParser.PRE);
	            this.state = 1008;
	            this.expression(0);
	            break;
	        case ZParser.L:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1009;
	            this.match(ZParser.L);
	            this.state = 1011;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            if(la_===1) {
	                this.state = 1010;
	                this.expSep();

	            }
	            this.state = 1020;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1013;
	                this.expression(0);
	                this.state = 1014;
	                this.match(ZParser.ERE);
	                break;

	            case 2:
	                this.state = 1017;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 1016;
	                    this.expressionList();
	                }

	                this.state = 1019;
	                this.match(ZParser.SRE);
	                break;

	            }
	            this.state = 1022;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixApp() {
	    let localctx = new PostfixAppContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ZParser.RULE_postfixApp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1025;
	            this.expression(0);
	            this.state = 1026;
	            this.match(ZParser.POST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1028;
	            this.expression(0);
	            this.state = 1029;
	            this.match(ZParser.EL);
	            this.state = 1031;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            if(la_===1) {
	                this.state = 1030;
	                this.expSep();

	            }
	            this.state = 1040;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1033;
	                this.expression(0);
	                this.state = 1034;
	                this.match(ZParser.ER);
	                break;

	            case 2:
	                this.state = 1037;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 1036;
	                    this.expressionList();
	                }

	                this.state = 1039;
	                this.match(ZParser.SR);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infixApp() {
	    let localctx = new InfixAppContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ZParser.RULE_infixApp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1044;
	            this.expression(0);
	            this.state = 1045;
	            this.match(ZParser.I);
	            this.state = 1046;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1048;
	            this.expression(0);
	            this.state = 1049;
	            this.match(ZParser.EL);
	            this.state = 1051;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            if(la_===1) {
	                this.state = 1050;
	                this.expSep();

	            }
	            this.state = 1060;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1053;
	                this.expression(0);
	                this.state = 1054;
	                this.match(ZParser.ERE);
	                break;

	            case 2:
	                this.state = 1057;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                    this.state = 1056;
	                    this.expressionList();
	                }

	                this.state = 1059;
	                this.match(ZParser.SRE);
	                break;

	            }
	            this.state = 1062;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nofixApp() {
	    let localctx = new NofixAppContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ZParser.RULE_nofixApp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1066;
	        this.match(ZParser.L);
	        this.state = 1068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        if(la_===1) {
	            this.state = 1067;
	            this.expSep();

	        }
	        this.state = 1077;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1070;
	            this.expression(0);
	            this.state = 1071;
	            this.match(ZParser.ER);
	            break;

	        case 2:
	            this.state = 1074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	                this.state = 1073;
	                this.expressionList();
	            }

	            this.state = 1076;
	            this.match(ZParser.SR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expSep() {
	    let localctx = new ExpSepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ZParser.RULE_expSep);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1086;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 1079;
	        		    this.expression(0);
	        		    this.state = 1080;
	        		    this.match(ZParser.ES);
	        		    break;

	        		case 2:
	        		    this.state = 1083;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
	        		        this.state = 1082;
	        		        this.expressionList();
	        		    }

	        		    this.state = 1085;
	        		    this.match(ZParser.SS);
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1088; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,137, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ZParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.expression(0);
	        this.state = 1095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ZParser.COMMA) {
	            this.state = 1091;
	            this.match(ZParser.COMMA);
	            this.state = 1092;
	            this.expression(0);
	            this.state = 1097;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ZParser.EOF = antlr4.Token.EOF;
ZParser.ZED = 1;
ZParser.SCH = 2;
ZParser.AX = 3;
ZParser.TEXT = 4;
ZParser.NUMERAL = 5;
ZParser.STROKE = 6;
ZParser.LEFT_PARENTHESIS = 7;
ZParser.RIGHT_PARENTHESIS = 8;
ZParser.LEFT_SQUARE_BRACKET = 9;
ZParser.RIGHT_SQUARE_BRACKET = 10;
ZParser.LEFT_CURLY_BRACKET = 11;
ZParser.RIGHT_CURLY_BRACKET = 12;
ZParser.LEFT_BINDING_BRACKET = 13;
ZParser.RIGHT_BINDING_BRACKET = 14;
ZParser.LEFT_DOUBLE_ANGLE_BRACKET = 15;
ZParser.RIGHT_DOUBLE_ANGLE_BRACKET = 16;
ZParser.GEN = 17;
ZParser.END = 18;
ZParser.WS = 19;
ZParser.NL = 20;
ZParser.IGNORE_NL = 21;
ZParser.ELSE = 22;
ZParser.FALSE = 23;
ZParser.FUNCTION = 24;
ZParser.GENERIC = 25;
ZParser.IF = 26;
ZParser.LEFTASSOC = 27;
ZParser.LET = 28;
ZParser.POWERSET = 29;
ZParser.PARENTS = 30;
ZParser.PRE_KEY = 31;
ZParser.RELATION = 32;
ZParser.RIGHTASSOC = 33;
ZParser.SECTION = 34;
ZParser.THEN = 35;
ZParser.TRUE = 36;
ZParser.COLON = 37;
ZParser.DEFINE_EQUAL = 38;
ZParser.COMMA = 39;
ZParser.FREE_EQUALS = 40;
ZParser.VERTICAL_LINE = 41;
ZParser.AMPERSAND = 42;
ZParser.REVERSE_SOLIDUS = 43;
ZParser.SOLIDUS = 44;
ZParser.FULL_STOP = 45;
ZParser.SEMICOLON = 46;
ZParser.ARGUMENT = 47;
ZParser.LIST = 48;
ZParser.EQUALS_SIGN = 49;
ZParser.CONJECTURE = 50;
ZParser.FOR_ALL = 51;
ZParser.SPOT = 52;
ZParser.THERE_EXISTS = 53;
ZParser.UNIQUE_EXISTS = 54;
ZParser.LEFT_RIGHT_DOUBLE_ARROW = 55;
ZParser.RIGHTWARDS_DOUBLE_ARROW = 56;
ZParser.LOGICAL_OR = 57;
ZParser.LOGICAL_AND = 58;
ZParser.NOT_SIGN = 59;
ZParser.ELEMENT_OF = 60;
ZParser.SCHEMA_PROJECTION = 61;
ZParser.MULTIPLICATION_SIGN = 62;
ZParser.GREEK_SMALL_LETTER_THETA = 63;
ZParser.GREEK_SMALL_LETTER_LAMBDA = 64;
ZParser.GREEK_SMALL_LETTER_MU = 65;
ZParser.SCHEMA_COMPOSITION = 66;
ZParser.SCHEMA_PIPING = 67;
ZParser.NAME = 68;
ZParser.WORDPART = 69;
ZParser.GREEK_CAPITAL_LETTER_DELTA = 70;
ZParser.GREEK_CAPITAL_LETTER_XI = 71;
ZParser.MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A = 72;
ZParser.DOUBLE_STRUCK_CAPITAL_N = 73;
ZParser.MODIFIER_LETTER_PRIME = 74;
ZParser.EXCLAMATION_MARK = 75;
ZParser.QUESTION_MARK = 76;
ZParser.NORTH_EAST_ARROW = 77;
ZParser.SOUTH_WEST_ARROW = 78;
ZParser.SOUTH_EAST_ARROW = 79;
ZParser.NORTH_WEST_ARROW = 80;
ZParser.RIGHT_TACK = 81;
ZParser.BIG_REVERSE_SOLIDUS = 82;
ZParser.PLUS_SIGN = 83;
ZParser.MATHEMATICAL_TOOLKIT_SYMBOLS = 84;
ZParser.LEFT_RIGHT_ARROW = 85;
ZParser.RIGHTWARDS_ARROW = 86;
ZParser.NOT_EQUAL_TO = 87;
ZParser.NOT_AN_ELEMENT_OF = 88;
ZParser.EMPTY_SET = 89;
ZParser.SUBSET_OF_OR_EQUAL_TO = 90;
ZParser.SUBSET_OF = 91;
ZParser.UNION = 92;
ZParser.INTERSECTION = 93;
ZParser.SET_MINUS = 94;
ZParser.CIRCLED_MINUS = 95;
ZParser.N_ARY_UNION = 96;
ZParser.N_ARY_INTERSECTION = 97;
ZParser.MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F = 98;
ZParser.RIGHTWARDS_ARROW_FROM_BAR = 99;
ZParser.RELATIONAL_COMPOSITION = 100;
ZParser.RING_OPERATOR = 101;
ZParser.WHITE_LEFT_POINTING_TRIANGLE = 102;
ZParser.WHITE_RIGHT_POINTING_TRIANGLE = 103;
ZParser.DOMAIN_ANTIRESTRICTION = 104;
ZParser.RANGE_ANTIRESTRICTION = 105;
ZParser.TILDE_OPERATOR = 106;
ZParser.LEFT_IMAGE_BRACKET = 107;
ZParser.RIGHT_IMAGE_BRACKET = 108;
ZParser.CIRCLED_PLUS = 109;
ZParser.RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE = 110;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE = 111;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL = 112;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE = 113;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW = 114;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL = 115;
ZParser.RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE = 116;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE = 117;
ZParser.DOUBLE_STRUCK_CAPITAL_Z = 118;
ZParser.HYPHEN_MINUS = 119;
ZParser.MINUS_SIGN = 120;
ZParser.LESS_THAN_OR_EQUAL_TO = 121;
ZParser.LESS_THAN_SIGN = 122;
ZParser.GREATER_THAN_OR_EQUAL_TO = 123;
ZParser.GREATER_THAN_SIGN = 124;
ZParser.ASTERISK = 125;
ZParser.NUMBER_SIGN = 126;
ZParser.CHARACTER_TIE = 127;
ZParser.UPWARDS_HARPOON_WITH_BARB_LEFTWARDS = 128;
ZParser.UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS = 129;
ZParser.LEFT_ANGLE_BRACKET = 130;
ZParser.RIGHT_ANGLE_BRACKET = 131;
ZParser.ID = 132;
ZParser.PREP = 133;
ZParser.PRE = 134;
ZParser.POSTP = 135;
ZParser.POST = 136;
ZParser.IP = 137;
ZParser.I = 138;
ZParser.LP = 139;
ZParser.L = 140;
ZParser.ELP = 141;
ZParser.EL = 142;
ZParser.ERP = 143;
ZParser.ER = 144;
ZParser.SRP = 145;
ZParser.SR = 146;
ZParser.EREP = 147;
ZParser.ERE = 148;
ZParser.SREP = 149;
ZParser.SRE = 150;
ZParser.ES = 151;
ZParser.SS = 152;
ZParser.UNKNOWN = 153;
ZParser.NLCHAR = 154;

ZParser.RULE_specification = 0;
ZParser.RULE_section = 1;
ZParser.RULE_paragraph = 2;
ZParser.RULE_freetype = 3;
ZParser.RULE_branch = 4;
ZParser.RULE_formals = 5;
ZParser.RULE_predicate = 6;
ZParser.RULE_expression = 7;
ZParser.RULE_schemaText = 8;
ZParser.RULE_declPart = 9;
ZParser.RULE_declNameExpression = 10;
ZParser.RULE_declaration = 11;
ZParser.RULE_operatorTemplate = 12;
ZParser.RULE_categoryTemplate = 13;
ZParser.RULE_prec = 14;
ZParser.RULE_assoc = 15;
ZParser.RULE_template_ = 16;
ZParser.RULE_prefixTemplate = 17;
ZParser.RULE_postfixTemplate = 18;
ZParser.RULE_infixTemplate = 19;
ZParser.RULE_nofixTemplate = 20;
ZParser.RULE_declName = 21;
ZParser.RULE_refName = 22;
ZParser.RULE_opName = 23;
ZParser.RULE_prefixName = 24;
ZParser.RULE_postfixName = 25;
ZParser.RULE_infixName = 26;
ZParser.RULE_nofixName = 27;
ZParser.RULE_genName = 28;
ZParser.RULE_prefixGenName = 29;
ZParser.RULE_postfixGenName = 30;
ZParser.RULE_infixGenName = 31;
ZParser.RULE_nofixGenName = 32;
ZParser.RULE_relation = 33;
ZParser.RULE_prefixRel = 34;
ZParser.RULE_postfixRel = 35;
ZParser.RULE_infixRel = 36;
ZParser.RULE_nofixRel = 37;
ZParser.RULE_application = 38;
ZParser.RULE_prefixApp = 39;
ZParser.RULE_postfixApp = 40;
ZParser.RULE_infixApp = 41;
ZParser.RULE_nofixApp = 42;
ZParser.RULE_expSep = 43;
ZParser.RULE_expressionList = 44;

class SpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_specification;
    }

	EOF() {
	    return this.getToken(ZParser.EOF, 0);
	};

	TEXT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.TEXT);
	    } else {
	        return this.getToken(ZParser.TEXT, i);
	    }
	};


	section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SectionContext);
	    } else {
	        return this.getTypedRuleContext(SectionContext,i);
	    }
	};

	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSpecification(this);
		}
	}


}



class SectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_section;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BaseSectionContext extends SectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	SECTION() {
	    return this.getToken(ZParser.SECTION, 0);
	};

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterBaseSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitBaseSection(this);
		}
	}


}

ZParser.BaseSectionContext = BaseSectionContext;

class InheritingSectionContext extends SectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	SECTION() {
	    return this.getToken(ZParser.SECTION, 0);
	};

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	PARENTS() {
	    return this.getToken(ZParser.PARENTS, 0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInheritingSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInheritingSection(this);
		}
	}


}

ZParser.InheritingSectionContext = InheritingSectionContext;

class ParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_paragraph;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConjectureParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	CONJECTURE() {
	    return this.getToken(ZParser.CONJECTURE, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterConjectureParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitConjectureParagraph(this);
		}
	}


}

ZParser.ConjectureParagraphContext = ConjectureParagraphContext;

class GenericHorizontalDefinitionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	declName() {
	    return this.getTypedRuleContext(DeclNameContext,0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	DEFINE_EQUAL() {
	    return this.getToken(ZParser.DEFINE_EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericHorizontalDefinitionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericHorizontalDefinitionParagraph(this);
		}
	}


}

ZParser.GenericHorizontalDefinitionParagraphContext = GenericHorizontalDefinitionParagraphContext;

class HorizontalDefinitionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	declNameExpression() {
	    return this.getTypedRuleContext(DeclNameExpressionContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterHorizontalDefinitionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitHorizontalDefinitionParagraph(this);
		}
	}


}

ZParser.HorizontalDefinitionParagraphContext = HorizontalDefinitionParagraphContext;

class GenericSchemaDefinitionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SCH() {
	    return this.getToken(ZParser.SCH, 0);
	};

	GEN() {
	    return this.getToken(ZParser.GEN, 0);
	};

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericSchemaDefinitionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericSchemaDefinitionParagraph(this);
		}
	}


}

ZParser.GenericSchemaDefinitionParagraphContext = GenericSchemaDefinitionParagraphContext;

class GenericOperatorDefinitionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	genName() {
	    return this.getTypedRuleContext(GenNameContext,0);
	};

	DEFINE_EQUAL() {
	    return this.getToken(ZParser.DEFINE_EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericOperatorDefinitionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericOperatorDefinitionParagraph(this);
		}
	}


}

ZParser.GenericOperatorDefinitionParagraphContext = GenericOperatorDefinitionParagraphContext;

class GenericAxiomaticDescriptionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AX() {
	    return this.getToken(ZParser.AX, 0);
	};

	GEN() {
	    return this.getToken(ZParser.GEN, 0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericAxiomaticDescriptionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericAxiomaticDescriptionParagraph(this);
		}
	}


}

ZParser.GenericAxiomaticDescriptionParagraphContext = GenericAxiomaticDescriptionParagraphContext;

class OperatorTemplateParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	operatorTemplate() {
	    return this.getTypedRuleContext(OperatorTemplateContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterOperatorTemplateParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitOperatorTemplateParagraph(this);
		}
	}


}

ZParser.OperatorTemplateParagraphContext = OperatorTemplateParagraphContext;

class GenericConjectureParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	CONJECTURE() {
	    return this.getToken(ZParser.CONJECTURE, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericConjectureParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericConjectureParagraph(this);
		}
	}


}

ZParser.GenericConjectureParagraphContext = GenericConjectureParagraphContext;

class GivenTypesParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	formals() {
	    return this.getTypedRuleContext(FormalsContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGivenTypesParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGivenTypesParagraph(this);
		}
	}


}

ZParser.GivenTypesParagraphContext = GivenTypesParagraphContext;

class SchemaDefinitionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SCH() {
	    return this.getToken(ZParser.SCH, 0);
	};

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaDefinitionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaDefinitionParagraph(this);
		}
	}


}

ZParser.SchemaDefinitionParagraphContext = SchemaDefinitionParagraphContext;

class FreeTypesParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ZED() {
	    return this.getToken(ZParser.ZED, 0);
	};

	freetype = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FreetypeContext);
	    } else {
	        return this.getTypedRuleContext(FreetypeContext,i);
	    }
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.AMPERSAND);
	    } else {
	        return this.getToken(ZParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterFreeTypesParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitFreeTypesParagraph(this);
		}
	}


}

ZParser.FreeTypesParagraphContext = FreeTypesParagraphContext;

class AxiomaticDescriptionParagraphContext extends ParagraphContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AX() {
	    return this.getToken(ZParser.AX, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	END() {
	    return this.getToken(ZParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterAxiomaticDescriptionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitAxiomaticDescriptionParagraph(this);
		}
	}


}

ZParser.AxiomaticDescriptionParagraphContext = AxiomaticDescriptionParagraphContext;

class FreetypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_freetype;
    }

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	FREE_EQUALS() {
	    return this.getToken(ZParser.FREE_EQUALS, 0);
	};

	branch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BranchContext);
	    } else {
	        return this.getTypedRuleContext(BranchContext,i);
	    }
	};

	VERTICAL_LINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.VERTICAL_LINE);
	    } else {
	        return this.getToken(ZParser.VERTICAL_LINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterFreetype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitFreetype(this);
		}
	}


}



class BranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_branch;
    }

	declName() {
	    return this.getTypedRuleContext(DeclNameContext,0);
	};

	LEFT_DOUBLE_ANGLE_BRACKET() {
	    return this.getToken(ZParser.LEFT_DOUBLE_ANGLE_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_DOUBLE_ANGLE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_DOUBLE_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitBranch(this);
		}
	}


}



class FormalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_formals;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NAME);
	    } else {
	        return this.getToken(ZParser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterFormals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitFormals(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_predicate;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExistentialQuantificationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THERE_EXISTS() {
	    return this.getToken(ZParser.THERE_EXISTS, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterExistentialQuantificationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitExistentialQuantificationPredicate(this);
		}
	}


}

ZParser.ExistentialQuantificationPredicateContext = ExistentialQuantificationPredicateContext;

class ConjunctionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LOGICAL_AND() {
	    return this.getToken(ZParser.LOGICAL_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterConjunctionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitConjunctionPredicate(this);
		}
	}


}

ZParser.ConjunctionPredicateContext = ConjunctionPredicateContext;

class EquivalencePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LEFT_RIGHT_DOUBLE_ARROW() {
	    return this.getToken(ZParser.LEFT_RIGHT_DOUBLE_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterEquivalencePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitEquivalencePredicate(this);
		}
	}


}

ZParser.EquivalencePredicateContext = EquivalencePredicateContext;

class NewlineConjunctionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNewlineConjunctionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNewlineConjunctionPredicate(this);
		}
	}


}

ZParser.NewlineConjunctionPredicateContext = NewlineConjunctionPredicateContext;

class ImplicationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	RIGHTWARDS_DOUBLE_ARROW() {
	    return this.getToken(ZParser.RIGHTWARDS_DOUBLE_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterImplicationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitImplicationPredicate(this);
		}
	}


}

ZParser.ImplicationPredicateContext = ImplicationPredicateContext;

class RelationOperatorApplicationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterRelationOperatorApplicationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitRelationOperatorApplicationPredicate(this);
		}
	}


}

ZParser.RelationOperatorApplicationPredicateContext = RelationOperatorApplicationPredicateContext;

class UniversalQuantificationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR_ALL() {
	    return this.getToken(ZParser.FOR_ALL, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterUniversalQuantificationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitUniversalQuantificationPredicate(this);
		}
	}


}

ZParser.UniversalQuantificationPredicateContext = UniversalQuantificationPredicateContext;

class TruthPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUE() {
	    return this.getToken(ZParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterTruthPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitTruthPredicate(this);
		}
	}


}

ZParser.TruthPredicateContext = TruthPredicateContext;

class FalsityPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FALSE() {
	    return this.getToken(ZParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterFalsityPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitFalsityPredicate(this);
		}
	}


}

ZParser.FalsityPredicateContext = FalsityPredicateContext;

class ParenthesizedPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterParenthesizedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitParenthesizedPredicate(this);
		}
	}


}

ZParser.ParenthesizedPredicateContext = ParenthesizedPredicateContext;

class DisjunctionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LOGICAL_OR() {
	    return this.getToken(ZParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDisjunctionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDisjunctionPredicate(this);
		}
	}


}

ZParser.DisjunctionPredicateContext = DisjunctionPredicateContext;

class SemicolonConjunctionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	SEMICOLON() {
	    return this.getToken(ZParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSemicolonConjunctionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSemicolonConjunctionPredicate(this);
		}
	}


}

ZParser.SemicolonConjunctionPredicateContext = SemicolonConjunctionPredicateContext;

class SchemaPredicatePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaPredicatePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaPredicatePredicate(this);
		}
	}


}

ZParser.SchemaPredicatePredicateContext = SchemaPredicatePredicateContext;

class UniqueExistentialQuantificationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNIQUE_EXISTS() {
	    return this.getToken(ZParser.UNIQUE_EXISTS, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterUniqueExistentialQuantificationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitUniqueExistentialQuantificationPredicate(this);
		}
	}


}

ZParser.UniqueExistentialQuantificationPredicateContext = UniqueExistentialQuantificationPredicateContext;

class NegationPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT_SIGN() {
	    return this.getToken(ZParser.NOT_SIGN, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNegationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNegationPredicate(this);
		}
	}


}

ZParser.NegationPredicateContext = NegationPredicateContext;

class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SetComprehensionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_CURLY_BRACKET() {
	    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_CURLY_BRACKET() {
	    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSetComprehensionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSetComprehensionExpression(this);
		}
	}


}

ZParser.SetComprehensionExpressionContext = SetComprehensionExpressionContext;

class SchemaEquivalenceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LEFT_RIGHT_DOUBLE_ARROW() {
	    return this.getToken(ZParser.LEFT_RIGHT_DOUBLE_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaEquivalenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaEquivalenceExpression(this);
		}
	}


}

ZParser.SchemaEquivalenceExpressionContext = SchemaEquivalenceExpressionContext;

class NofixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixApplicationExpression(this);
		}
	}


}

ZParser.NofixApplicationExpressionContext = NofixApplicationExpressionContext;

class SchemaConstructionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaConstructionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaConstructionExpression(this);
		}
	}


}

ZParser.SchemaConstructionExpressionContext = SchemaConstructionExpressionContext;

class GenericPostfixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericPostfixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericPostfixApplicationExpression(this);
		}
	}


}

ZParser.GenericPostfixApplicationExpressionContext = GenericPostfixApplicationExpressionContext;

class GenericPrefixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericPrefixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericPrefixApplicationExpression(this);
		}
	}


}

ZParser.GenericPrefixApplicationExpressionContext = GenericPrefixApplicationExpressionContext;

class CharacteristicDefiniteDescriptionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	GREEK_SMALL_LETTER_MU() {
	    return this.getToken(ZParser.GREEK_SMALL_LETTER_MU, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterCharacteristicDefiniteDescriptionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitCharacteristicDefiniteDescriptionExpression(this);
		}
	}


}

ZParser.CharacteristicDefiniteDescriptionExpressionContext = CharacteristicDefiniteDescriptionExpressionContext;

class SchemaUniversalQuantificationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR_ALL() {
	    return this.getToken(ZParser.FOR_ALL, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaUniversalQuantificationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaUniversalQuantificationExpression(this);
		}
	}


}

ZParser.SchemaUniversalQuantificationExpressionContext = SchemaUniversalQuantificationExpressionContext;

class SetExtensionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_CURLY_BRACKET() {
	    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
	};

	RIGHT_CURLY_BRACKET() {
	    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSetExtensionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSetExtensionExpression(this);
		}
	}


}

ZParser.SetExtensionExpressionContext = SetExtensionExpressionContext;

class FunctionConstructionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GREEK_SMALL_LETTER_LAMBDA() {
	    return this.getToken(ZParser.GREEK_SMALL_LETTER_LAMBDA, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterFunctionConstructionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitFunctionConstructionExpression(this);
		}
	}


}

ZParser.FunctionConstructionExpressionContext = FunctionConstructionExpressionContext;

class SchemaNegationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT_SIGN() {
	    return this.getToken(ZParser.NOT_SIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaNegationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaNegationExpression(this);
		}
	}


}

ZParser.SchemaNegationExpressionContext = SchemaNegationExpressionContext;

class TupleExtensionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterTupleExtensionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitTupleExtensionExpression(this);
		}
	}


}

ZParser.TupleExtensionExpressionContext = TupleExtensionExpressionContext;

class SchemaCompositionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SCHEMA_COMPOSITION() {
	    return this.getToken(ZParser.SCHEMA_COMPOSITION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaCompositionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaCompositionExpression(this);
		}
	}


}

ZParser.SchemaCompositionExpressionContext = SchemaCompositionExpressionContext;

class PowersetExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	POWERSET() {
	    return this.getToken(ZParser.POWERSET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPowersetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPowersetExpression(this);
		}
	}


}

ZParser.PowersetExpressionContext = PowersetExpressionContext;

class SchemaDisjunctionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LOGICAL_OR() {
	    return this.getToken(ZParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaDisjunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaDisjunctionExpression(this);
		}
	}


}

ZParser.SchemaDisjunctionExpressionContext = SchemaDisjunctionExpressionContext;

class SubstitutionExpressionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LET() {
	    return this.getToken(ZParser.LET, 0);
	};

	declNameExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclNameExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DeclNameExpressionContext,i);
	    }
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SEMICOLON);
	    } else {
	        return this.getToken(ZParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSubstitutionExpressionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSubstitutionExpressionExpression(this);
		}
	}


}

ZParser.SubstitutionExpressionExpressionContext = SubstitutionExpressionExpressionContext;

class SchemaHidingExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	REVERSE_SOLIDUS() {
	    return this.getToken(ZParser.REVERSE_SOLIDUS, 0);
	};

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	declName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclNameContext);
	    } else {
	        return this.getTypedRuleContext(DeclNameContext,i);
	    }
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaHidingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaHidingExpression(this);
		}
	}


}

ZParser.SchemaHidingExpressionContext = SchemaHidingExpressionContext;

class PostfixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	POST() {
	    return this.getToken(ZParser.POST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixApplicationExpression(this);
		}
	}


}

ZParser.PostfixApplicationExpressionContext = PostfixApplicationExpressionContext;

class CartesianProductExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	MULTIPLICATION_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.MULTIPLICATION_SIGN);
	    } else {
	        return this.getToken(ZParser.MULTIPLICATION_SIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterCartesianProductExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitCartesianProductExpression(this);
		}
	}


}

ZParser.CartesianProductExpressionContext = CartesianProductExpressionContext;

class BindingSelectionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FULL_STOP() {
	    return this.getToken(ZParser.FULL_STOP, 0);
	};

	refName() {
	    return this.getTypedRuleContext(RefNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterBindingSelectionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitBindingSelectionExpression(this);
		}
	}


}

ZParser.BindingSelectionExpressionContext = BindingSelectionExpressionContext;

class GenericInstantiationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	refName() {
	    return this.getTypedRuleContext(RefNameContext,0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericInstantiationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericInstantiationExpression(this);
		}
	}


}

ZParser.GenericInstantiationExpressionContext = GenericInstantiationExpressionContext;

class SchemaExistentialQuantificationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THERE_EXISTS() {
	    return this.getToken(ZParser.THERE_EXISTS, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaExistentialQuantificationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaExistentialQuantificationExpression(this);
		}
	}


}

ZParser.SchemaExistentialQuantificationExpressionContext = SchemaExistentialQuantificationExpressionContext;

class NumberLiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NUMERAL() {
	    return this.getToken(ZParser.NUMERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNumberLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNumberLiteralExpression(this);
		}
	}


}

ZParser.NumberLiteralExpressionContext = NumberLiteralExpressionContext;

class ParenthesizedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}

ZParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class InfixLeftApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	I() {
	    return this.getToken(ZParser.I, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixLeftApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixLeftApplicationExpression(this);
		}
	}


}

ZParser.InfixLeftApplicationExpressionContext = InfixLeftApplicationExpressionContext;

class ApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitApplicationExpression(this);
		}
	}


}

ZParser.ApplicationExpressionContext = ApplicationExpressionContext;

class SchemaRenamingExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
	};

	declName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclNameContext);
	    } else {
	        return this.getTypedRuleContext(DeclNameContext,i);
	    }
	};

	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SOLIDUS);
	    } else {
	        return this.getToken(ZParser.SOLIDUS, i);
	    }
	};


	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaRenamingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaRenamingExpression(this);
		}
	}


}

ZParser.SchemaRenamingExpressionContext = SchemaRenamingExpressionContext;

class SchemaConjunctionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LOGICAL_AND() {
	    return this.getToken(ZParser.LOGICAL_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaConjunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaConjunctionExpression(this);
		}
	}


}

ZParser.SchemaConjunctionExpressionContext = SchemaConjunctionExpressionContext;

class ConditionalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(ZParser.IF, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	THEN() {
	    return this.getToken(ZParser.THEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(ZParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}

ZParser.ConditionalExpressionContext = ConditionalExpressionContext;

class SchemaProjectionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SCHEMA_PROJECTION() {
	    return this.getToken(ZParser.SCHEMA_PROJECTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaProjectionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaProjectionExpression(this);
		}
	}


}

ZParser.SchemaProjectionExpressionContext = SchemaProjectionExpressionContext;

class InfixRightApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	I() {
	    return this.getToken(ZParser.I, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixRightApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixRightApplicationExpression(this);
		}
	}


}

ZParser.InfixRightApplicationExpressionContext = InfixRightApplicationExpressionContext;

class CharacteristicSetComprehensionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_CURLY_BRACKET() {
	    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	RIGHT_CURLY_BRACKET() {
	    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterCharacteristicSetComprehensionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitCharacteristicSetComprehensionExpression(this);
		}
	}


}

ZParser.CharacteristicSetComprehensionExpressionContext = CharacteristicSetComprehensionExpressionContext;

class SchemaPreconditionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PRE_KEY() {
	    return this.getToken(ZParser.PRE_KEY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaPreconditionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaPreconditionExpression(this);
		}
	}


}

ZParser.SchemaPreconditionExpressionContext = SchemaPreconditionExpressionContext;

class PrefixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PRE() {
	    return this.getToken(ZParser.PRE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixApplicationExpression(this);
		}
	}


}

ZParser.PrefixApplicationExpressionContext = PrefixApplicationExpressionContext;

class BindingConstructionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GREEK_SMALL_LETTER_THETA() {
	    return this.getToken(ZParser.GREEK_SMALL_LETTER_THETA, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STROKE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.STROKE);
	    } else {
	        return this.getToken(ZParser.STROKE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterBindingConstructionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitBindingConstructionExpression(this);
		}
	}


}

ZParser.BindingConstructionExpressionContext = BindingConstructionExpressionContext;

class SchemaPipingExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SCHEMA_PIPING() {
	    return this.getToken(ZParser.SCHEMA_PIPING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaPipingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaPipingExpression(this);
		}
	}


}

ZParser.SchemaPipingExpressionContext = SchemaPipingExpressionContext;

class SchemaImplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RIGHTWARDS_DOUBLE_ARROW() {
	    return this.getToken(ZParser.RIGHTWARDS_DOUBLE_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaImplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaImplicationExpression(this);
		}
	}


}

ZParser.SchemaImplicationExpressionContext = SchemaImplicationExpressionContext;

class BindingExtensionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_BINDING_BRACKET() {
	    return this.getToken(ZParser.LEFT_BINDING_BRACKET, 0);
	};

	RIGHT_BINDING_BRACKET() {
	    return this.getToken(ZParser.RIGHT_BINDING_BRACKET, 0);
	};

	declNameExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclNameExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DeclNameExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterBindingExtensionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitBindingExtensionExpression(this);
		}
	}


}

ZParser.BindingExtensionExpressionContext = BindingExtensionExpressionContext;

class SchemaDecorationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STROKE() {
	    return this.getToken(ZParser.STROKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaDecorationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaDecorationExpression(this);
		}
	}


}

ZParser.SchemaDecorationExpressionContext = SchemaDecorationExpressionContext;

class SchemaUniqueExistentialQuantificationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNIQUE_EXISTS() {
	    return this.getToken(ZParser.UNIQUE_EXISTS, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaUniqueExistentialQuantificationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaUniqueExistentialQuantificationExpression(this);
		}
	}


}

ZParser.SchemaUniqueExistentialQuantificationExpressionContext = SchemaUniqueExistentialQuantificationExpressionContext;

class DefiniteDescriptionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GREEK_SMALL_LETTER_MU() {
	    return this.getToken(ZParser.GREEK_SMALL_LETTER_MU, 0);
	};

	schemaText() {
	    return this.getTypedRuleContext(SchemaTextContext,0);
	};

	SPOT() {
	    return this.getToken(ZParser.SPOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDefiniteDescriptionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDefiniteDescriptionExpression(this);
		}
	}


}

ZParser.DefiniteDescriptionExpressionContext = DefiniteDescriptionExpressionContext;

class ReferenceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	refName() {
	    return this.getTypedRuleContext(RefNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitReferenceExpression(this);
		}
	}


}

ZParser.ReferenceExpressionContext = ReferenceExpressionContext;

class GenericInfixApplicationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenericInfixApplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenericInfixApplicationExpression(this);
		}
	}


}

ZParser.GenericInfixApplicationExpressionContext = GenericInfixApplicationExpressionContext;

class TupleSelectionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FULL_STOP() {
	    return this.getToken(ZParser.FULL_STOP, 0);
	};

	NUMERAL() {
	    return this.getToken(ZParser.NUMERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterTupleSelectionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitTupleSelectionExpression(this);
		}
	}


}

ZParser.TupleSelectionExpressionContext = TupleSelectionExpressionContext;

class SchemaTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_schemaText;
    }

	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NL);
	    } else {
	        return this.getToken(ZParser.NL, i);
	    }
	};


	declPart() {
	    return this.getTypedRuleContext(DeclPartContext,0);
	};

	VERTICAL_LINE() {
	    return this.getToken(ZParser.VERTICAL_LINE, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterSchemaText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitSchemaText(this);
		}
	}


}



class DeclPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_declPart;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SEMICOLON);
	    } else {
	        return this.getToken(ZParser.SEMICOLON, i);
	    }
	};


	NL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NL);
	    } else {
	        return this.getToken(ZParser.NL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDeclPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDeclPart(this);
		}
	}


}



class DeclNameExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_declNameExpression;
    }

	declName() {
	    return this.getTypedRuleContext(DeclNameContext,0);
	};

	DEFINE_EQUAL() {
	    return this.getToken(ZParser.DEFINE_EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NL() {
	    return this.getToken(ZParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDeclNameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDeclNameExpression(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_declaration;
    }

	declName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclNameContext);
	    } else {
	        return this.getTypedRuleContext(DeclNameContext,i);
	    }
	};

	COLON() {
	    return this.getToken(ZParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	declNameExpression() {
	    return this.getTypedRuleContext(DeclNameExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class OperatorTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_operatorTemplate;
    }

	RELATION() {
	    return this.getToken(ZParser.RELATION, 0);
	};

	template_() {
	    return this.getTypedRuleContext(Template_Context,0);
	};

	FUNCTION() {
	    return this.getToken(ZParser.FUNCTION, 0);
	};

	categoryTemplate() {
	    return this.getTypedRuleContext(CategoryTemplateContext,0);
	};

	GENERIC() {
	    return this.getToken(ZParser.GENERIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterOperatorTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitOperatorTemplate(this);
		}
	}


}



class CategoryTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_categoryTemplate;
    }

	prefixTemplate() {
	    return this.getTypedRuleContext(PrefixTemplateContext,0);
	};

	postfixTemplate() {
	    return this.getTypedRuleContext(PostfixTemplateContext,0);
	};

	prec() {
	    return this.getTypedRuleContext(PrecContext,0);
	};

	assoc() {
	    return this.getTypedRuleContext(AssocContext,0);
	};

	infixTemplate() {
	    return this.getTypedRuleContext(InfixTemplateContext,0);
	};

	nofixTemplate() {
	    return this.getTypedRuleContext(NofixTemplateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterCategoryTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitCategoryTemplate(this);
		}
	}


}



class PrecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prec;
    }

	NUMERAL() {
	    return this.getToken(ZParser.NUMERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrec(this);
		}
	}


}



class AssocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_assoc;
    }

	LEFTASSOC() {
	    return this.getToken(ZParser.LEFTASSOC, 0);
	};

	RIGHTASSOC() {
	    return this.getToken(ZParser.RIGHTASSOC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterAssoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitAssoc(this);
		}
	}


}



class Template_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_template_;
    }

	prefixTemplate() {
	    return this.getTypedRuleContext(PrefixTemplateContext,0);
	};

	postfixTemplate() {
	    return this.getTypedRuleContext(PostfixTemplateContext,0);
	};

	infixTemplate() {
	    return this.getTypedRuleContext(InfixTemplateContext,0);
	};

	nofixTemplate() {
	    return this.getTypedRuleContext(NofixTemplateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterTemplate_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitTemplate_(this);
		}
	}


}



class PrefixTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prefixTemplate;
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	prefixName() {
	    return this.getTypedRuleContext(PrefixNameContext,0);
	};

	POWERSET() {
	    return this.getToken(ZParser.POWERSET, 0);
	};

	ARGUMENT() {
	    return this.getToken(ZParser.ARGUMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixTemplate(this);
		}
	}


}



class PostfixTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_postfixTemplate;
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	postfixName() {
	    return this.getTypedRuleContext(PostfixNameContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixTemplate(this);
		}
	}


}



class InfixTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_infixTemplate;
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	infixName() {
	    return this.getTypedRuleContext(InfixNameContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixTemplate(this);
		}
	}


}



class NofixTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_nofixTemplate;
    }

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	nofixName() {
	    return this.getTypedRuleContext(NofixNameContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixTemplate(this);
		}
	}


}



class DeclNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_declName;
    }

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	opName() {
	    return this.getTypedRuleContext(OpNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterDeclName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitDeclName(this);
		}
	}


}



class RefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_refName;
    }

	NAME() {
	    return this.getToken(ZParser.NAME, 0);
	};

	LEFT_PARENTHESIS() {
	    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
	};

	opName() {
	    return this.getTypedRuleContext(OpNameContext,0);
	};

	RIGHT_PARENTHESIS() {
	    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterRefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitRefName(this);
		}
	}


}



class OpNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_opName;
    }

	prefixName() {
	    return this.getTypedRuleContext(PrefixNameContext,0);
	};

	postfixName() {
	    return this.getTypedRuleContext(PostfixNameContext,0);
	};

	infixName() {
	    return this.getTypedRuleContext(InfixNameContext,0);
	};

	nofixName() {
	    return this.getTypedRuleContext(NofixNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterOpName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitOpName(this);
		}
	}


}



class PrefixNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prefixName;
    }

	PRE() {
	    return this.getToken(ZParser.PRE, 0);
	};

	ARGUMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ARGUMENT);
	    } else {
	        return this.getToken(ZParser.ARGUMENT, i);
	    }
	};


	PREP() {
	    return this.getToken(ZParser.PREP, 0);
	};

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	LIST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.LIST);
	    } else {
	        return this.getToken(ZParser.LIST, i);
	    }
	};


	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	LP() {
	    return this.getToken(ZParser.LP, 0);
	};

	EREP() {
	    return this.getToken(ZParser.EREP, 0);
	};

	SREP() {
	    return this.getToken(ZParser.SREP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixName(this);
		}
	}


}



class PostfixNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_postfixName;
    }

	ARGUMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ARGUMENT);
	    } else {
	        return this.getToken(ZParser.ARGUMENT, i);
	    }
	};


	POST() {
	    return this.getToken(ZParser.POST, 0);
	};

	POSTP() {
	    return this.getToken(ZParser.POSTP, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	LIST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.LIST);
	    } else {
	        return this.getToken(ZParser.LIST, i);
	    }
	};


	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	ELP() {
	    return this.getToken(ZParser.ELP, 0);
	};

	ERP() {
	    return this.getToken(ZParser.ERP, 0);
	};

	SRP() {
	    return this.getToken(ZParser.SRP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixName(this);
		}
	}


}



class InfixNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_infixName;
    }

	ARGUMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ARGUMENT);
	    } else {
	        return this.getToken(ZParser.ARGUMENT, i);
	    }
	};


	I() {
	    return this.getToken(ZParser.I, 0);
	};

	IP() {
	    return this.getToken(ZParser.IP, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	LIST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.LIST);
	    } else {
	        return this.getToken(ZParser.LIST, i);
	    }
	};


	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	ELP() {
	    return this.getToken(ZParser.ELP, 0);
	};

	EREP() {
	    return this.getToken(ZParser.EREP, 0);
	};

	SREP() {
	    return this.getToken(ZParser.SREP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixName(this);
		}
	}


}



class NofixNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_nofixName;
    }

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	ARGUMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ARGUMENT);
	    } else {
	        return this.getToken(ZParser.ARGUMENT, i);
	    }
	};


	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	LIST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.LIST);
	    } else {
	        return this.getToken(ZParser.LIST, i);
	    }
	};


	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	LP() {
	    return this.getToken(ZParser.LP, 0);
	};

	ERP() {
	    return this.getToken(ZParser.ERP, 0);
	};

	SRP() {
	    return this.getToken(ZParser.SRP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixName(this);
		}
	}


}



class GenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_genName;
    }

	prefixGenName() {
	    return this.getTypedRuleContext(PrefixGenNameContext,0);
	};

	postfixGenName() {
	    return this.getTypedRuleContext(PostfixGenNameContext,0);
	};

	infixGenName() {
	    return this.getTypedRuleContext(InfixGenNameContext,0);
	};

	nofixGenName() {
	    return this.getTypedRuleContext(NofixGenNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterGenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitGenName(this);
		}
	}


}



class PrefixGenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prefixGenName;
    }

	PRE() {
	    return this.getToken(ZParser.PRE, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NAME);
	    } else {
	        return this.getToken(ZParser.NAME, i);
	    }
	};


	L() {
	    return this.getToken(ZParser.L, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixGenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixGenName(this);
		}
	}


}



class PostfixGenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_postfixGenName;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NAME);
	    } else {
	        return this.getToken(ZParser.NAME, i);
	    }
	};


	POST() {
	    return this.getToken(ZParser.POST, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixGenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixGenName(this);
		}
	}


}



class InfixGenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_infixGenName;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NAME);
	    } else {
	        return this.getToken(ZParser.NAME, i);
	    }
	};


	I() {
	    return this.getToken(ZParser.I, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixGenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixGenName(this);
		}
	}


}



class NofixGenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_nofixGenName;
    }

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.NAME);
	    } else {
	        return this.getToken(ZParser.NAME, i);
	    }
	};


	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixGenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixGenName(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_relation;
    }

	prefixRel() {
	    return this.getTypedRuleContext(PrefixRelContext,0);
	};

	postfixRel() {
	    return this.getTypedRuleContext(PostfixRelContext,0);
	};

	infixRel() {
	    return this.getTypedRuleContext(InfixRelContext,0);
	};

	nofixRel() {
	    return this.getTypedRuleContext(NofixRelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitRelation(this);
		}
	}


}



class PrefixRelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prefixRel;
    }

	PREP() {
	    return this.getToken(ZParser.PREP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LP() {
	    return this.getToken(ZParser.LP, 0);
	};

	EREP() {
	    return this.getToken(ZParser.EREP, 0);
	};

	SREP() {
	    return this.getToken(ZParser.SREP, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixRel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixRel(this);
		}
	}


}



class PostfixRelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_postfixRel;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	POSTP() {
	    return this.getToken(ZParser.POSTP, 0);
	};

	ELP() {
	    return this.getToken(ZParser.ELP, 0);
	};

	ERP() {
	    return this.getToken(ZParser.ERP, 0);
	};

	SRP() {
	    return this.getToken(ZParser.SRP, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixRel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixRel(this);
		}
	}


}



class InfixRelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_infixRel;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ELEMENT_OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ELEMENT_OF);
	    } else {
	        return this.getToken(ZParser.ELEMENT_OF, i);
	    }
	};


	EQUALS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.EQUALS_SIGN);
	    } else {
	        return this.getToken(ZParser.EQUALS_SIGN, i);
	    }
	};


	IP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.IP);
	    } else {
	        return this.getToken(ZParser.IP, i);
	    }
	};


	ELP() {
	    return this.getToken(ZParser.ELP, 0);
	};

	EREP() {
	    return this.getToken(ZParser.EREP, 0);
	};

	SREP() {
	    return this.getToken(ZParser.SREP, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixRel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixRel(this);
		}
	}


}



class NofixRelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_nofixRel;
    }

	LP() {
	    return this.getToken(ZParser.LP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ERP() {
	    return this.getToken(ZParser.ERP, 0);
	};

	SRP() {
	    return this.getToken(ZParser.SRP, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixRel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixRel(this);
		}
	}


}



class ApplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_application;
    }

	prefixApp() {
	    return this.getTypedRuleContext(PrefixAppContext,0);
	};

	postfixApp() {
	    return this.getTypedRuleContext(PostfixAppContext,0);
	};

	infixApp() {
	    return this.getTypedRuleContext(InfixAppContext,0);
	};

	nofixApp() {
	    return this.getTypedRuleContext(NofixAppContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterApplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitApplication(this);
		}
	}


}



class PrefixAppContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_prefixApp;
    }

	PRE() {
	    return this.getToken(ZParser.PRE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPrefixApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPrefixApp(this);
		}
	}


}



class PostfixAppContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_postfixApp;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	POST() {
	    return this.getToken(ZParser.POST, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterPostfixApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitPostfixApp(this);
		}
	}


}



class InfixAppContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_infixApp;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	I() {
	    return this.getToken(ZParser.I, 0);
	};

	EL() {
	    return this.getToken(ZParser.EL, 0);
	};

	ERE() {
	    return this.getToken(ZParser.ERE, 0);
	};

	SRE() {
	    return this.getToken(ZParser.SRE, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterInfixApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitInfixApp(this);
		}
	}


}



class NofixAppContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_nofixApp;
    }

	L() {
	    return this.getToken(ZParser.L, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ER() {
	    return this.getToken(ZParser.ER, 0);
	};

	SR() {
	    return this.getToken(ZParser.SR, 0);
	};

	expSep() {
	    return this.getTypedRuleContext(ExpSepContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterNofixApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitNofixApp(this);
		}
	}


}



class ExpSepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_expSep;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.ES);
	    } else {
	        return this.getToken(ZParser.ES, i);
	    }
	};


	SS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.SS);
	    } else {
	        return this.getToken(ZParser.SS, i);
	    }
	};


	expressionList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionListContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterExpSep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitExpSep(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ZParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ZParser.COMMA);
	    } else {
	        return this.getToken(ZParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ZParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}




ZParser.SpecificationContext = SpecificationContext; 
ZParser.SectionContext = SectionContext; 
ZParser.ParagraphContext = ParagraphContext; 
ZParser.FreetypeContext = FreetypeContext; 
ZParser.BranchContext = BranchContext; 
ZParser.FormalsContext = FormalsContext; 
ZParser.PredicateContext = PredicateContext; 
ZParser.ExpressionContext = ExpressionContext; 
ZParser.SchemaTextContext = SchemaTextContext; 
ZParser.DeclPartContext = DeclPartContext; 
ZParser.DeclNameExpressionContext = DeclNameExpressionContext; 
ZParser.DeclarationContext = DeclarationContext; 
ZParser.OperatorTemplateContext = OperatorTemplateContext; 
ZParser.CategoryTemplateContext = CategoryTemplateContext; 
ZParser.PrecContext = PrecContext; 
ZParser.AssocContext = AssocContext; 
ZParser.Template_Context = Template_Context; 
ZParser.PrefixTemplateContext = PrefixTemplateContext; 
ZParser.PostfixTemplateContext = PostfixTemplateContext; 
ZParser.InfixTemplateContext = InfixTemplateContext; 
ZParser.NofixTemplateContext = NofixTemplateContext; 
ZParser.DeclNameContext = DeclNameContext; 
ZParser.RefNameContext = RefNameContext; 
ZParser.OpNameContext = OpNameContext; 
ZParser.PrefixNameContext = PrefixNameContext; 
ZParser.PostfixNameContext = PostfixNameContext; 
ZParser.InfixNameContext = InfixNameContext; 
ZParser.NofixNameContext = NofixNameContext; 
ZParser.GenNameContext = GenNameContext; 
ZParser.PrefixGenNameContext = PrefixGenNameContext; 
ZParser.PostfixGenNameContext = PostfixGenNameContext; 
ZParser.InfixGenNameContext = InfixGenNameContext; 
ZParser.NofixGenNameContext = NofixGenNameContext; 
ZParser.RelationContext = RelationContext; 
ZParser.PrefixRelContext = PrefixRelContext; 
ZParser.PostfixRelContext = PostfixRelContext; 
ZParser.InfixRelContext = InfixRelContext; 
ZParser.NofixRelContext = NofixRelContext; 
ZParser.ApplicationContext = ApplicationContext; 
ZParser.PrefixAppContext = PrefixAppContext; 
ZParser.PostfixAppContext = PostfixAppContext; 
ZParser.InfixAppContext = InfixAppContext; 
ZParser.NofixAppContext = NofixAppContext; 
ZParser.ExpSepContext = ExpSepContext; 
ZParser.ExpressionListContext = ExpressionListContext; 
