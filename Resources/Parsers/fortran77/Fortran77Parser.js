// Generated from Resources/Parsers/fortran77/Fortran77Parser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Fortran77ParserListener from './Fortran77ParserListener.js';
const serializedATN = [4,1,121,1750,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,1,0,4,0,390,8,0,11,0,12,
0,391,1,1,5,1,395,8,1,10,1,12,1,398,9,1,1,1,1,1,5,1,402,8,1,10,1,12,1,405,
9,1,4,1,407,8,1,11,1,12,1,408,1,1,5,1,412,8,1,10,1,12,1,415,9,1,1,2,1,2,
1,2,1,2,3,2,421,8,2,1,3,3,3,424,8,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
1,6,1,6,1,7,1,7,1,7,1,7,3,7,441,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,461,8,8,1,9,1,9,1,9,1,9,1,10,1,10,
1,10,1,10,1,10,1,10,3,10,473,8,10,1,11,3,11,476,8,11,1,11,1,11,1,11,1,11,
3,11,482,8,11,1,11,1,11,3,11,486,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
3,13,495,8,13,1,13,3,13,498,8,13,1,13,3,13,501,8,13,1,14,1,14,1,14,5,14,
506,8,14,10,14,12,14,509,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,3,15,524,8,15,1,16,5,16,527,8,16,10,16,12,16,530,
9,16,1,16,1,16,5,16,534,8,16,10,16,12,16,537,9,16,4,16,539,8,16,11,16,12,
16,540,1,16,1,16,1,17,3,17,546,8,17,1,17,1,17,1,17,1,18,3,18,552,8,18,1,
18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,567,
8,21,10,21,12,21,570,9,21,1,22,1,22,1,22,5,22,575,8,22,10,22,12,22,578,9,
22,1,23,1,23,1,23,1,23,3,23,584,8,23,3,23,586,8,23,1,23,3,23,589,8,23,1,
24,1,24,1,24,1,24,5,24,595,8,24,10,24,12,24,598,9,24,1,25,1,25,1,25,1,25,
5,25,604,8,25,10,25,12,25,607,9,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,
27,5,27,617,8,27,10,27,12,27,620,9,27,1,27,3,27,623,8,27,1,28,1,28,1,28,
1,28,3,28,629,8,28,1,29,1,29,3,29,633,8,29,1,30,1,30,1,30,5,30,638,8,30,
10,30,12,30,641,9,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,652,
8,32,1,33,1,33,1,33,5,33,657,8,33,10,33,12,33,660,9,33,1,34,1,34,3,34,664,
8,34,1,35,1,35,1,35,5,35,669,8,35,10,35,12,35,672,9,35,1,36,1,36,3,36,676,
8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,685,8,38,3,38,687,8,38,1,38,
1,38,1,38,1,38,1,38,1,38,1,38,3,38,696,8,38,1,39,1,39,3,39,700,8,39,1,40,
1,40,1,40,1,41,1,41,1,41,1,41,5,41,709,8,41,10,41,12,41,712,9,41,1,42,1,
42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,723,8,43,1,44,1,44,1,44,1,44,
1,44,1,45,1,45,1,45,5,45,733,8,45,10,45,12,45,736,9,45,1,46,1,46,1,47,1,
47,1,48,1,48,1,48,3,48,745,8,48,1,49,1,49,1,49,5,49,750,8,49,10,49,12,49,
753,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
767,8,50,1,51,1,51,3,51,771,8,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
1,54,1,54,1,54,5,54,784,8,54,10,54,12,54,787,9,54,1,55,1,55,1,55,1,55,1,
56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,803,8,58,10,58,12,58,
806,9,58,3,58,808,8,58,1,59,1,59,1,59,1,59,3,59,814,8,59,1,60,1,60,1,60,
3,60,819,8,60,1,60,5,60,822,8,60,10,60,12,60,825,9,60,1,61,1,61,3,61,829,
8,61,1,62,1,62,3,62,833,8,62,1,62,1,62,3,62,837,8,62,1,63,1,63,1,63,1,64,
1,64,1,64,5,64,845,8,64,10,64,12,64,848,9,64,1,64,1,64,1,65,1,65,1,65,5,
65,855,8,65,10,65,12,65,858,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,875,8,67,1,68,1,68,1,68,3,68,880,
8,68,1,69,1,69,3,69,884,8,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,892,8,70,
1,71,1,71,1,72,1,72,1,72,1,72,3,72,900,8,72,1,72,1,72,1,73,1,73,1,74,1,74,
1,74,5,74,909,8,74,10,74,12,74,912,9,74,1,75,1,75,3,75,916,8,75,1,75,1,75,
1,75,1,75,3,75,922,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,931,8,76,
1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,79,1,79,5,79,943,8,79,10,79,12,
79,946,9,79,1,79,3,79,949,8,79,1,79,1,79,1,80,1,80,3,80,955,8,80,1,80,5,
80,958,8,80,10,80,12,80,961,9,80,1,80,1,80,5,80,965,8,80,10,80,12,80,968,
9,80,4,80,970,8,80,11,80,12,80,971,1,81,1,81,1,81,3,81,977,8,81,1,81,1,81,
1,81,1,81,1,81,3,81,984,8,81,1,81,4,81,987,8,81,11,81,12,81,988,1,82,1,82,
3,82,993,8,82,1,82,5,82,996,8,82,10,82,12,82,999,9,82,1,82,1,82,5,82,1003,
8,82,10,82,12,82,1006,9,82,4,82,1008,8,82,11,82,12,82,1009,1,83,1,83,1,83,
3,83,1015,8,83,1,84,1,84,1,84,3,84,1020,8,84,1,85,1,85,1,85,1,85,1,85,1,
85,1,85,3,85,1029,8,85,1,86,1,86,3,86,1033,8,86,1,86,1,86,3,86,1037,8,86,
1,86,1,86,3,86,1041,8,86,1,86,1,86,1,87,4,87,1046,8,87,11,87,12,87,1047,
1,88,1,88,3,88,1052,8,88,1,88,1,88,3,88,1056,8,88,1,88,1,88,1,89,1,89,1,
89,3,89,1063,8,89,1,90,5,90,1066,8,90,10,90,12,90,1069,9,90,1,90,1,90,1,
91,1,91,3,91,1075,8,91,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1085,
8,93,1,93,4,93,1088,8,93,11,93,12,93,1089,3,93,1092,8,93,1,94,1,94,1,94,
1,94,4,94,1098,8,94,11,94,12,94,1099,3,94,1102,8,94,1,95,1,95,1,95,1,95,
4,95,1108,8,95,11,95,12,95,1109,3,95,1112,8,95,1,96,1,96,1,96,1,96,1,97,
1,97,1,97,5,97,1121,8,97,10,97,12,97,1124,9,97,1,98,1,98,1,98,1,98,3,98,
1130,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1155,8,99,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
1,100,1,100,1,100,3,100,1173,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,
101,1,101,1,101,3,101,1184,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,3,102,1196,8,102,1,102,1,102,1,103,1,103,1,103,1,103,1,
103,5,103,1205,8,103,10,103,12,103,1208,9,103,1,103,1,103,1,104,1,104,1,
104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,
104,1,104,3,104,1228,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
1249,8,104,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,
110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,
116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,
122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,126,1,126,1,127,1,127,1,
128,1,128,1,128,1,128,1,128,5,128,1302,8,128,10,128,12,128,1305,9,128,1,
128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,
129,1,129,1,129,1,129,3,129,1323,8,129,1,130,1,130,1,130,1,130,1,130,5,130,
1330,8,130,10,130,12,130,1333,9,130,1,130,1,130,1,131,1,131,1,131,1,131,
1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1361,8,131,1,131,1,
131,1,131,1,131,3,131,1367,8,131,1,132,1,132,1,132,1,133,1,133,1,133,1,134,
1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,5,135,1385,8,135,10,
135,12,135,1388,9,135,1,135,1,135,3,135,1392,8,135,1,136,1,136,1,136,1,136,
1,136,1,136,1,136,1,136,1,136,1,136,3,136,1404,8,136,1,137,1,137,3,137,1408,
8,137,1,138,1,138,1,138,3,138,1413,8,138,1,139,1,139,1,139,1,139,1,139,1,
140,1,140,1,140,3,140,1423,8,140,3,140,1425,8,140,1,140,1,140,3,140,1429,
8,140,1,140,1,140,1,140,1,140,3,140,1435,8,140,3,140,1437,8,140,5,140,1439,
8,140,10,140,12,140,1442,9,140,1,141,1,141,1,142,1,142,1,142,1,142,1,142,
3,142,1451,8,142,1,142,1,142,3,142,1455,8,142,1,142,3,142,1458,8,142,3,142,
1460,8,142,1,143,1,143,1,143,1,143,1,143,3,143,1467,8,143,1,144,1,144,1,
144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,
147,1,147,3,147,1485,8,147,1,147,3,147,1488,8,147,1,148,1,148,1,148,5,148,
1493,8,148,10,148,12,148,1496,9,148,1,149,1,149,1,149,3,149,1501,8,149,1,
150,1,150,3,150,1505,8,150,1,151,1,151,1,151,3,151,1510,8,151,1,152,1,152,
1,152,1,152,5,152,1516,8,152,10,152,12,152,1519,9,152,1,153,1,153,1,153,
5,153,1524,8,153,10,153,12,153,1527,9,153,1,154,1,154,1,154,5,154,1532,8,
154,10,154,12,154,1535,9,154,1,155,1,155,1,155,5,155,1540,8,155,10,155,12,
155,1543,9,155,1,156,1,156,1,156,3,156,1548,8,156,1,157,1,157,1,157,3,157,
1553,8,157,1,158,1,158,1,158,5,158,1558,8,158,10,158,12,158,1561,9,158,1,
159,1,159,1,159,5,159,1566,8,159,10,159,12,159,1569,9,159,1,160,5,160,1572,
8,160,10,160,12,160,1575,9,160,1,160,1,160,1,161,1,161,1,161,5,161,1582,
8,161,10,161,12,161,1585,9,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
1,162,3,162,1595,8,162,1,163,1,163,1,163,5,163,1600,8,163,10,163,12,163,
1603,9,163,1,164,1,164,1,164,5,164,1608,8,164,10,164,12,164,1611,9,164,1,
165,1,165,1,165,5,165,1616,8,165,10,165,12,165,1619,9,165,1,166,5,166,1622,
8,166,10,166,12,166,1625,9,166,1,166,1,166,1,167,1,167,1,167,3,167,1632,
8,167,1,168,1,168,1,168,1,168,1,168,1,168,3,168,1640,8,168,1,169,1,169,1,
170,1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,
176,1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,179,1,179,1,179,5,
179,1668,8,179,10,179,12,179,1671,9,179,1,179,1,179,1,180,1,180,1,180,1,
180,5,180,1679,8,180,10,180,12,180,1682,9,180,3,180,1684,8,180,1,180,1,180,
1,181,1,181,1,181,3,181,1691,8,181,3,181,1693,8,181,1,182,1,182,1,182,3,
182,1698,8,182,3,182,1700,8,182,1,183,1,183,3,183,1704,8,183,1,183,1,183,
3,183,1708,8,183,1,183,1,183,1,184,1,184,1,185,1,185,1,186,1,186,1,187,1,
187,1,188,3,188,1721,8,188,1,188,1,188,1,188,3,188,1726,8,188,1,189,1,189,
3,189,1730,8,189,1,190,1,190,3,190,1734,8,190,1,190,1,190,1,190,3,190,1739,
8,190,1,190,1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,193,0,0,194,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
0,13,2,0,8,8,115,115,1,0,114,115,1,0,20,21,2,0,97,97,114,114,2,0,97,97,112,
112,3,0,68,68,72,72,76,76,1,0,74,75,4,0,95,95,97,97,112,112,115,115,1,0,
81,82,1,0,85,90,2,0,76,76,117,117,1,0,113,114,1,0,91,92,1807,0,389,1,0,0,
0,2,396,1,0,0,0,4,420,1,0,0,0,6,423,1,0,0,0,8,427,1,0,0,0,10,430,1,0,0,0,
12,433,1,0,0,0,14,440,1,0,0,0,16,460,1,0,0,0,18,462,1,0,0,0,20,466,1,0,0,
0,22,475,1,0,0,0,24,487,1,0,0,0,26,490,1,0,0,0,28,502,1,0,0,0,30,523,1,0,
0,0,32,528,1,0,0,0,34,545,1,0,0,0,36,551,1,0,0,0,38,555,1,0,0,0,40,558,1,
0,0,0,42,563,1,0,0,0,44,571,1,0,0,0,46,588,1,0,0,0,48,590,1,0,0,0,50,599,
1,0,0,0,52,610,1,0,0,0,54,612,1,0,0,0,56,624,1,0,0,0,58,632,1,0,0,0,60,634,
1,0,0,0,62,642,1,0,0,0,64,651,1,0,0,0,66,653,1,0,0,0,68,663,1,0,0,0,70,665,
1,0,0,0,72,673,1,0,0,0,74,677,1,0,0,0,76,695,1,0,0,0,78,699,1,0,0,0,80,701,
1,0,0,0,82,704,1,0,0,0,84,713,1,0,0,0,86,719,1,0,0,0,88,724,1,0,0,0,90,729,
1,0,0,0,92,737,1,0,0,0,94,739,1,0,0,0,96,741,1,0,0,0,98,746,1,0,0,0,100,
766,1,0,0,0,102,768,1,0,0,0,104,772,1,0,0,0,106,775,1,0,0,0,108,780,1,0,
0,0,110,788,1,0,0,0,112,792,1,0,0,0,114,795,1,0,0,0,116,798,1,0,0,0,118,
813,1,0,0,0,120,815,1,0,0,0,122,828,1,0,0,0,124,832,1,0,0,0,126,838,1,0,
0,0,128,841,1,0,0,0,130,851,1,0,0,0,132,861,1,0,0,0,134,867,1,0,0,0,136,
879,1,0,0,0,138,883,1,0,0,0,140,885,1,0,0,0,142,893,1,0,0,0,144,895,1,0,
0,0,146,903,1,0,0,0,148,905,1,0,0,0,150,913,1,0,0,0,152,923,1,0,0,0,154,
932,1,0,0,0,156,938,1,0,0,0,158,940,1,0,0,0,160,952,1,0,0,0,162,976,1,0,
0,0,164,990,1,0,0,0,166,1014,1,0,0,0,168,1016,1,0,0,0,170,1021,1,0,0,0,172,
1030,1,0,0,0,174,1045,1,0,0,0,176,1049,1,0,0,0,178,1062,1,0,0,0,180,1067,
1,0,0,0,182,1072,1,0,0,0,184,1076,1,0,0,0,186,1079,1,0,0,0,188,1093,1,0,
0,0,190,1103,1,0,0,0,192,1113,1,0,0,0,194,1117,1,0,0,0,196,1125,1,0,0,0,
198,1154,1,0,0,0,200,1172,1,0,0,0,202,1183,1,0,0,0,204,1185,1,0,0,0,206,
1199,1,0,0,0,208,1248,1,0,0,0,210,1250,1,0,0,0,212,1252,1,0,0,0,214,1254,
1,0,0,0,216,1256,1,0,0,0,218,1258,1,0,0,0,220,1260,1,0,0,0,222,1262,1,0,
0,0,224,1264,1,0,0,0,226,1266,1,0,0,0,228,1268,1,0,0,0,230,1270,1,0,0,0,
232,1272,1,0,0,0,234,1274,1,0,0,0,236,1276,1,0,0,0,238,1278,1,0,0,0,240,
1280,1,0,0,0,242,1282,1,0,0,0,244,1284,1,0,0,0,246,1286,1,0,0,0,248,1288,
1,0,0,0,250,1290,1,0,0,0,252,1292,1,0,0,0,254,1294,1,0,0,0,256,1296,1,0,
0,0,258,1322,1,0,0,0,260,1324,1,0,0,0,262,1366,1,0,0,0,264,1368,1,0,0,0,
266,1371,1,0,0,0,268,1374,1,0,0,0,270,1391,1,0,0,0,272,1403,1,0,0,0,274,
1407,1,0,0,0,276,1412,1,0,0,0,278,1414,1,0,0,0,280,1424,1,0,0,0,282,1443,
1,0,0,0,284,1459,1,0,0,0,286,1466,1,0,0,0,288,1468,1,0,0,0,290,1473,1,0,
0,0,292,1478,1,0,0,0,294,1481,1,0,0,0,296,1489,1,0,0,0,298,1500,1,0,0,0,
300,1502,1,0,0,0,302,1506,1,0,0,0,304,1511,1,0,0,0,306,1520,1,0,0,0,308,
1528,1,0,0,0,310,1536,1,0,0,0,312,1547,1,0,0,0,314,1549,1,0,0,0,316,1554,
1,0,0,0,318,1562,1,0,0,0,320,1573,1,0,0,0,322,1578,1,0,0,0,324,1594,1,0,
0,0,326,1596,1,0,0,0,328,1604,1,0,0,0,330,1612,1,0,0,0,332,1623,1,0,0,0,
334,1628,1,0,0,0,336,1639,1,0,0,0,338,1641,1,0,0,0,340,1643,1,0,0,0,342,
1645,1,0,0,0,344,1647,1,0,0,0,346,1649,1,0,0,0,348,1651,1,0,0,0,350,1653,
1,0,0,0,352,1655,1,0,0,0,354,1658,1,0,0,0,356,1660,1,0,0,0,358,1662,1,0,
0,0,360,1674,1,0,0,0,362,1687,1,0,0,0,364,1694,1,0,0,0,366,1701,1,0,0,0,
368,1711,1,0,0,0,370,1713,1,0,0,0,372,1715,1,0,0,0,374,1717,1,0,0,0,376,
1725,1,0,0,0,378,1729,1,0,0,0,380,1731,1,0,0,0,382,1743,1,0,0,0,384,1745,
1,0,0,0,386,1747,1,0,0,0,388,390,5,116,0,0,389,388,1,0,0,0,390,391,1,0,0,
0,391,389,1,0,0,0,391,392,1,0,0,0,392,1,1,0,0,0,393,395,3,0,0,0,394,393,
1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,406,1,0,0,0,
398,396,1,0,0,0,399,403,3,4,2,0,400,402,3,0,0,0,401,400,1,0,0,0,402,405,
1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,
406,399,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,413,
1,0,0,0,410,412,5,119,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,
0,413,414,1,0,0,0,414,3,1,0,0,0,415,413,1,0,0,0,416,421,3,8,4,0,417,421,
3,6,3,0,418,421,3,10,5,0,419,421,3,12,6,0,420,416,1,0,0,0,420,417,1,0,0,
0,420,418,1,0,0,0,420,419,1,0,0,0,421,5,1,0,0,0,422,424,3,18,9,0,423,422,
1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,32,16,0,426,7,1,0,0,0,
427,428,3,22,11,0,428,429,3,32,16,0,429,9,1,0,0,0,430,431,3,26,13,0,431,
432,3,32,16,0,432,11,1,0,0,0,433,434,3,24,12,0,434,435,3,32,16,0,435,13,
1,0,0,0,436,441,3,38,19,0,437,441,3,48,24,0,438,441,3,114,57,0,439,441,3,
116,58,0,440,436,1,0,0,0,440,437,1,0,0,0,440,438,1,0,0,0,440,439,1,0,0,0,
441,15,1,0,0,0,442,461,3,192,96,0,443,461,3,140,70,0,444,461,3,152,76,0,
445,461,3,168,84,0,446,461,3,180,90,0,447,461,3,182,91,0,448,461,3,184,92,
0,449,461,3,188,94,0,450,461,3,186,93,0,451,461,3,190,95,0,452,461,3,268,
134,0,453,461,3,264,132,0,454,461,3,206,103,0,455,461,3,256,128,0,456,461,
3,266,133,0,457,461,3,260,130,0,458,461,3,292,146,0,459,461,3,300,150,0,
460,442,1,0,0,0,460,443,1,0,0,0,460,444,1,0,0,0,460,445,1,0,0,0,460,446,
1,0,0,0,460,447,1,0,0,0,460,448,1,0,0,0,460,449,1,0,0,0,460,450,1,0,0,0,
460,451,1,0,0,0,460,452,1,0,0,0,460,453,1,0,0,0,460,454,1,0,0,0,460,455,
1,0,0,0,460,456,1,0,0,0,460,457,1,0,0,0,460,458,1,0,0,0,460,459,1,0,0,0,
461,17,1,0,0,0,462,463,5,1,0,0,463,464,5,115,0,0,464,465,5,119,0,0,465,19,
1,0,0,0,466,467,5,2,0,0,467,472,5,115,0,0,468,469,5,70,0,0,469,470,3,28,
14,0,470,471,5,71,0,0,471,473,1,0,0,0,472,468,1,0,0,0,472,473,1,0,0,0,473,
21,1,0,0,0,474,476,3,78,39,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,
0,0,477,478,5,3,0,0,478,479,5,115,0,0,479,481,5,70,0,0,480,482,3,28,14,0,
481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,485,5,71,0,0,484,486,
5,119,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,23,1,0,0,0,487,488,5,4,0,0,
488,489,5,115,0,0,489,25,1,0,0,0,490,491,5,5,0,0,491,497,5,115,0,0,492,494,
5,70,0,0,493,495,3,28,14,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,
0,496,498,5,71,0,0,497,492,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,0,499,501,
5,119,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,27,1,0,0,0,502,507,3,384,192,
0,503,504,5,69,0,0,504,506,3,384,192,0,505,503,1,0,0,0,506,509,1,0,0,0,507,
505,1,0,0,0,507,508,1,0,0,0,508,29,1,0,0,0,509,507,1,0,0,0,510,524,3,20,
10,0,511,524,3,86,43,0,512,524,3,106,53,0,513,524,3,64,32,0,514,524,3,54,
27,0,515,524,3,82,41,0,516,524,3,112,56,0,517,524,3,14,7,0,518,524,3,120,
60,0,519,520,3,288,144,0,520,521,3,288,144,0,521,524,1,0,0,0,522,524,3,16,
8,0,523,510,1,0,0,0,523,511,1,0,0,0,523,512,1,0,0,0,523,513,1,0,0,0,523,
514,1,0,0,0,523,515,1,0,0,0,523,516,1,0,0,0,523,517,1,0,0,0,523,518,1,0,
0,0,523,519,1,0,0,0,523,522,1,0,0,0,524,31,1,0,0,0,525,527,3,0,0,0,526,525,
1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,538,1,0,0,0,
530,528,1,0,0,0,531,535,3,34,17,0,532,534,3,0,0,0,533,532,1,0,0,0,534,537,
1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,
538,531,1,0,0,0,539,540,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,542,
1,0,0,0,542,543,3,36,18,0,543,33,1,0,0,0,544,546,5,48,0,0,545,544,1,0,0,
0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,30,15,0,548,549,5,119,0,0,549,
35,1,0,0,0,550,552,5,48,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,
0,0,553,554,5,6,0,0,554,37,1,0,0,0,555,556,5,7,0,0,556,557,3,42,21,0,557,
39,1,0,0,0,558,559,7,0,0,0,559,560,5,70,0,0,560,561,3,44,22,0,561,562,5,
71,0,0,562,41,1,0,0,0,563,568,3,40,20,0,564,565,5,69,0,0,565,567,3,40,20,
0,566,564,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,43,
1,0,0,0,570,568,1,0,0,0,571,576,3,46,23,0,572,573,5,69,0,0,573,575,3,46,
23,0,574,572,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,
45,1,0,0,0,578,576,1,0,0,0,579,585,3,328,164,0,580,583,5,72,0,0,581,584,
3,328,164,0,582,584,5,117,0,0,583,581,1,0,0,0,583,582,1,0,0,0,584,586,1,
0,0,0,585,580,1,0,0,0,585,586,1,0,0,0,586,589,1,0,0,0,587,589,5,117,0,0,
588,579,1,0,0,0,588,587,1,0,0,0,589,47,1,0,0,0,590,591,5,9,0,0,591,596,3,
50,25,0,592,593,5,69,0,0,593,595,3,50,25,0,594,592,1,0,0,0,595,598,1,0,0,
0,596,594,1,0,0,0,596,597,1,0,0,0,597,49,1,0,0,0,598,596,1,0,0,0,599,600,
5,70,0,0,600,605,3,52,26,0,601,602,5,69,0,0,602,604,3,52,26,0,603,601,1,
0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,
605,1,0,0,0,608,609,5,71,0,0,609,51,1,0,0,0,610,611,3,362,181,0,611,53,1,
0,0,0,612,622,5,10,0,0,613,618,3,62,31,0,614,615,5,69,0,0,615,617,3,62,31,
0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,623,
1,0,0,0,620,618,1,0,0,0,621,623,3,60,30,0,622,613,1,0,0,0,622,621,1,0,0,
0,623,55,1,0,0,0,624,628,5,76,0,0,625,626,5,115,0,0,626,629,5,76,0,0,627,
629,5,76,0,0,628,625,1,0,0,0,628,627,1,0,0,0,629,57,1,0,0,0,630,633,5,115,
0,0,631,633,3,40,20,0,632,630,1,0,0,0,632,631,1,0,0,0,633,59,1,0,0,0,634,
639,3,58,29,0,635,636,5,69,0,0,636,638,3,58,29,0,637,635,1,0,0,0,638,641,
1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,61,1,0,0,0,641,639,1,0,0,0,642,
643,3,56,28,0,643,644,3,60,30,0,644,63,1,0,0,0,645,646,3,76,38,0,646,647,
3,66,33,0,647,652,1,0,0,0,648,649,3,102,51,0,649,650,3,70,35,0,650,652,1,
0,0,0,651,645,1,0,0,0,651,648,1,0,0,0,652,65,1,0,0,0,653,658,3,68,34,0,654,
655,5,69,0,0,655,657,3,68,34,0,656,654,1,0,0,0,657,660,1,0,0,0,658,656,1,
0,0,0,658,659,1,0,0,0,659,67,1,0,0,0,660,658,1,0,0,0,661,664,5,115,0,0,662,
664,3,40,20,0,663,661,1,0,0,0,663,662,1,0,0,0,664,69,1,0,0,0,665,670,3,72,
36,0,666,667,5,69,0,0,667,669,3,72,36,0,668,666,1,0,0,0,669,672,1,0,0,0,
670,668,1,0,0,0,670,671,1,0,0,0,671,71,1,0,0,0,672,670,1,0,0,0,673,675,3,
68,34,0,674,676,3,74,37,0,675,674,1,0,0,0,675,676,1,0,0,0,676,73,1,0,0,0,
677,678,5,117,0,0,678,679,3,100,50,0,679,75,1,0,0,0,680,696,5,8,0,0,681,
686,5,108,0,0,682,684,5,117,0,0,683,685,5,114,0,0,684,683,1,0,0,0,684,685,
1,0,0,0,685,687,1,0,0,0,686,682,1,0,0,0,686,687,1,0,0,0,687,696,1,0,0,0,
688,689,5,45,0,0,689,696,5,108,0,0,690,691,5,45,0,0,691,696,5,109,0,0,692,
696,5,110,0,0,693,696,5,111,0,0,694,696,5,14,0,0,695,680,1,0,0,0,695,681,
1,0,0,0,695,688,1,0,0,0,695,690,1,0,0,0,695,692,1,0,0,0,695,693,1,0,0,0,
695,694,1,0,0,0,696,77,1,0,0,0,697,700,3,76,38,0,698,700,3,102,51,0,699,
697,1,0,0,0,699,698,1,0,0,0,700,79,1,0,0,0,701,702,5,117,0,0,702,703,5,114,
0,0,703,81,1,0,0,0,704,705,5,11,0,0,705,710,3,84,42,0,706,707,5,69,0,0,707,
709,3,84,42,0,708,706,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,1,
0,0,0,711,83,1,0,0,0,712,710,1,0,0,0,713,714,5,70,0,0,714,715,5,115,0,0,
715,716,5,69,0,0,716,717,5,115,0,0,717,718,5,71,0,0,718,85,1,0,0,0,719,722,
5,12,0,0,720,723,3,92,46,0,721,723,3,90,45,0,722,720,1,0,0,0,722,721,1,0,
0,0,723,87,1,0,0,0,724,725,3,78,39,0,725,726,5,70,0,0,726,727,3,98,49,0,
727,728,5,71,0,0,728,89,1,0,0,0,729,734,3,88,44,0,730,731,5,69,0,0,731,733,
3,88,44,0,732,730,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,
0,735,91,1,0,0,0,736,734,1,0,0,0,737,738,5,13,0,0,738,93,1,0,0,0,739,740,
5,115,0,0,740,95,1,0,0,0,741,744,3,94,47,0,742,743,5,74,0,0,743,745,3,94,
47,0,744,742,1,0,0,0,744,745,1,0,0,0,745,97,1,0,0,0,746,751,3,96,48,0,747,
748,5,69,0,0,748,750,3,96,48,0,749,747,1,0,0,0,750,753,1,0,0,0,751,749,1,
0,0,0,751,752,1,0,0,0,752,99,1,0,0,0,753,751,1,0,0,0,754,755,5,70,0,0,755,
756,5,117,0,0,756,757,5,71,0,0,757,758,1,0,0,0,758,759,5,70,0,0,759,760,
5,117,0,0,760,767,5,71,0,0,761,767,5,114,0,0,762,763,5,70,0,0,763,764,3,
348,174,0,764,765,5,71,0,0,765,767,1,0,0,0,766,754,1,0,0,0,766,761,1,0,0,
0,766,762,1,0,0,0,767,101,1,0,0,0,768,770,3,350,175,0,769,771,3,104,52,0,
770,769,1,0,0,0,770,771,1,0,0,0,771,103,1,0,0,0,772,773,5,117,0,0,773,774,
3,100,50,0,774,105,1,0,0,0,775,776,5,15,0,0,776,777,5,70,0,0,777,778,3,108,
54,0,778,779,5,71,0,0,779,107,1,0,0,0,780,785,3,110,55,0,781,782,5,69,0,
0,782,784,3,110,55,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,
786,1,0,0,0,786,109,1,0,0,0,787,785,1,0,0,0,788,789,5,115,0,0,789,790,5,
73,0,0,790,791,3,338,169,0,791,111,1,0,0,0,792,793,5,16,0,0,793,794,3,28,
14,0,794,113,1,0,0,0,795,796,5,17,0,0,796,797,3,28,14,0,797,115,1,0,0,0,
798,807,5,18,0,0,799,804,3,118,59,0,800,801,5,69,0,0,801,803,3,118,59,0,
802,800,1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,808,
1,0,0,0,806,804,1,0,0,0,807,799,1,0,0,0,807,808,1,0,0,0,808,117,1,0,0,0,
809,814,5,115,0,0,810,811,5,76,0,0,811,812,5,115,0,0,812,814,5,76,0,0,813,
809,1,0,0,0,813,810,1,0,0,0,814,119,1,0,0,0,815,816,5,19,0,0,816,823,3,126,
63,0,817,819,5,69,0,0,818,817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,
822,3,126,63,0,821,818,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,824,1,
0,0,0,824,121,1,0,0,0,825,823,1,0,0,0,826,829,3,362,181,0,827,829,3,132,
66,0,828,826,1,0,0,0,828,827,1,0,0,0,829,123,1,0,0,0,830,831,7,1,0,0,831,
833,5,117,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,836,1,0,0,0,834,837,3,
376,188,0,835,837,5,115,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,125,1,0,
0,0,838,839,3,128,64,0,839,840,3,130,65,0,840,127,1,0,0,0,841,846,3,122,
61,0,842,843,5,69,0,0,843,845,3,122,61,0,844,842,1,0,0,0,845,848,1,0,0,0,
846,844,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,846,1,0,0,0,849,850,
5,76,0,0,850,129,1,0,0,0,851,856,3,124,62,0,852,853,5,69,0,0,853,855,3,124,
62,0,854,852,1,0,0,0,855,858,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,
859,1,0,0,0,858,856,1,0,0,0,859,860,5,76,0,0,860,131,1,0,0,0,861,862,5,70,
0,0,862,863,3,136,68,0,863,864,5,69,0,0,864,865,3,134,67,0,865,866,5,71,
0,0,866,133,1,0,0,0,867,868,5,115,0,0,868,869,5,73,0,0,869,870,3,348,174,
0,870,871,5,69,0,0,871,874,3,348,174,0,872,873,5,69,0,0,873,875,3,348,174,
0,874,872,1,0,0,0,874,875,1,0,0,0,875,135,1,0,0,0,876,880,3,138,69,0,877,
878,5,69,0,0,878,880,3,136,68,0,879,876,1,0,0,0,879,877,1,0,0,0,880,137,
1,0,0,0,881,884,3,362,181,0,882,884,3,132,66,0,883,881,1,0,0,0,883,882,1,
0,0,0,884,139,1,0,0,0,885,886,7,2,0,0,886,887,3,386,193,0,887,891,1,0,0,
0,888,892,3,142,71,0,889,892,3,144,72,0,890,892,3,150,75,0,891,888,1,0,0,
0,891,889,1,0,0,0,891,890,1,0,0,0,892,141,1,0,0,0,893,894,3,146,73,0,894,
143,1,0,0,0,895,896,5,70,0,0,896,897,3,148,74,0,897,899,5,71,0,0,898,900,
5,69,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,902,3,342,171,
0,902,145,1,0,0,0,903,904,5,114,0,0,904,147,1,0,0,0,905,910,3,146,73,0,906,
907,5,69,0,0,907,909,3,146,73,0,908,906,1,0,0,0,909,912,1,0,0,0,910,908,
1,0,0,0,910,911,1,0,0,0,911,149,1,0,0,0,912,910,1,0,0,0,913,921,5,115,0,
0,914,916,5,69,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,
5,70,0,0,918,919,3,148,74,0,919,920,5,71,0,0,920,922,1,0,0,0,921,915,1,0,
0,0,921,922,1,0,0,0,922,151,1,0,0,0,923,924,5,22,0,0,924,925,5,70,0,0,925,
926,3,354,177,0,926,930,5,71,0,0,927,931,3,158,79,0,928,931,3,156,78,0,929,
931,3,154,77,0,930,927,1,0,0,0,930,928,1,0,0,0,930,929,1,0,0,0,931,153,1,
0,0,0,932,933,3,146,73,0,933,934,5,69,0,0,934,935,3,146,73,0,935,936,5,69,
0,0,936,937,3,146,73,0,937,155,1,0,0,0,938,939,3,16,8,0,939,157,1,0,0,0,
940,944,3,160,80,0,941,943,3,162,81,0,942,941,1,0,0,0,943,946,1,0,0,0,944,
942,1,0,0,0,944,945,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,947,949,3,164,
82,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,3,166,83,0,
951,159,1,0,0,0,952,954,5,23,0,0,953,955,5,119,0,0,954,953,1,0,0,0,954,955,
1,0,0,0,955,959,1,0,0,0,956,958,3,0,0,0,957,956,1,0,0,0,958,961,1,0,0,0,
959,957,1,0,0,0,959,960,1,0,0,0,960,969,1,0,0,0,961,959,1,0,0,0,962,966,
3,34,17,0,963,965,3,0,0,0,964,963,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,
0,966,967,1,0,0,0,967,970,1,0,0,0,968,966,1,0,0,0,969,962,1,0,0,0,970,971,
1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,161,1,0,0,0,973,977,5,26,0,0,
974,975,5,24,0,0,975,977,5,22,0,0,976,973,1,0,0,0,976,974,1,0,0,0,977,978,
1,0,0,0,978,979,5,70,0,0,979,980,3,354,177,0,980,981,5,71,0,0,981,983,5,
23,0,0,982,984,5,119,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,
985,987,3,34,17,0,986,985,1,0,0,0,987,988,1,0,0,0,988,986,1,0,0,0,988,989,
1,0,0,0,989,163,1,0,0,0,990,992,5,24,0,0,991,993,5,119,0,0,992,991,1,0,0,
0,992,993,1,0,0,0,993,997,1,0,0,0,994,996,3,0,0,0,995,994,1,0,0,0,996,999,
1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,1007,1,0,0,0,999,997,1,0,0,0,
1000,1004,3,34,17,0,1001,1003,3,0,0,0,1002,1001,1,0,0,0,1003,1006,1,0,0,
0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,
0,1007,1000,1,0,0,0,1008,1009,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,0,0,
0,1010,165,1,0,0,0,1011,1015,5,25,0,0,1012,1013,5,6,0,0,1013,1015,5,22,0,
0,1014,1011,1,0,0,0,1014,1012,1,0,0,0,1015,167,1,0,0,0,1016,1019,5,27,0,
0,1017,1020,3,172,86,0,1018,1020,3,176,88,0,1019,1017,1,0,0,0,1019,1018,
1,0,0,0,1020,169,1,0,0,0,1021,1022,3,368,184,0,1022,1023,5,73,0,0,1023,1024,
3,344,172,0,1024,1025,5,69,0,0,1025,1028,3,344,172,0,1026,1027,5,69,0,0,
1027,1029,3,344,172,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,171,1,0,0,
0,1030,1032,3,146,73,0,1031,1033,5,69,0,0,1032,1031,1,0,0,0,1032,1033,1,
0,0,0,1033,1034,1,0,0,0,1034,1036,3,170,85,0,1035,1037,5,119,0,0,1036,1035,
1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1040,3,174,87,0,1039,1041,
5,119,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1043,
3,180,90,0,1043,173,1,0,0,0,1044,1046,3,34,17,0,1045,1044,1,0,0,0,1046,1047,
1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,175,1,0,0,0,1049,1051,3,
170,85,0,1050,1052,5,119,0,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1053,
1,0,0,0,1053,1055,3,174,87,0,1054,1056,5,119,0,0,1055,1054,1,0,0,0,1055,
1056,1,0,0,0,1056,1057,1,0,0,0,1057,1058,3,178,89,0,1058,177,1,0,0,0,1059,
1063,5,30,0,0,1060,1061,5,6,0,0,1061,1063,5,27,0,0,1062,1059,1,0,0,0,1062,
1060,1,0,0,0,1063,179,1,0,0,0,1064,1066,3,146,73,0,1065,1064,1,0,0,0,1066,
1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,0,0,1069,
1067,1,0,0,0,1070,1071,5,28,0,0,1071,181,1,0,0,0,1072,1074,5,29,0,0,1073,
1075,7,3,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,183,1,0,0,0,1076,1077,
5,31,0,0,1077,1078,7,3,0,0,1078,185,1,0,0,0,1079,1080,5,32,0,0,1080,1081,
5,70,0,0,1081,1082,3,194,97,0,1082,1091,5,71,0,0,1083,1085,5,69,0,0,1084,
1083,1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1088,3,200,100,0,1087,
1084,1,0,0,0,1088,1089,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
1092,1,0,0,0,1091,1087,1,0,0,0,1091,1092,1,0,0,0,1092,187,1,0,0,0,1093,1094,
5,33,0,0,1094,1101,3,276,138,0,1095,1096,5,69,0,0,1096,1098,3,200,100,0,
1097,1095,1,0,0,0,1098,1099,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,
1100,1102,1,0,0,0,1101,1097,1,0,0,0,1101,1102,1,0,0,0,1102,189,1,0,0,0,1103,
1104,5,34,0,0,1104,1111,3,276,138,0,1105,1106,5,69,0,0,1106,1108,3,200,100,
0,1107,1105,1,0,0,0,1108,1109,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,
0,1110,1112,1,0,0,0,1111,1107,1,0,0,0,1111,1112,1,0,0,0,1112,191,1,0,0,0,
1113,1114,3,362,181,0,1114,1115,5,73,0,0,1115,1116,3,302,151,0,1116,193,
1,0,0,0,1117,1122,3,198,99,0,1118,1119,5,69,0,0,1119,1121,3,198,99,0,1120,
1118,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,
195,1,0,0,0,1124,1122,1,0,0,0,1125,1126,3,218,109,0,1126,1129,5,73,0,0,1127,
1130,3,146,73,0,1128,1130,5,115,0,0,1129,1127,1,0,0,0,1129,1128,1,0,0,0,
1130,197,1,0,0,0,1131,1155,3,274,137,0,1132,1155,7,4,0,0,1133,1134,3,210,
105,0,1134,1135,5,73,0,0,1135,1136,3,276,138,0,1136,1155,1,0,0,0,1137,1138,
3,212,106,0,1138,1139,5,73,0,0,1139,1140,3,274,137,0,1140,1155,1,0,0,0,1141,
1142,3,214,107,0,1142,1143,5,73,0,0,1143,1144,3,342,171,0,1144,1155,1,0,
0,0,1145,1146,3,216,108,0,1146,1147,5,73,0,0,1147,1148,3,146,73,0,1148,1155,
1,0,0,0,1149,1155,3,196,98,0,1150,1151,3,220,110,0,1151,1152,5,73,0,0,1152,
1153,3,362,181,0,1153,1155,1,0,0,0,1154,1131,1,0,0,0,1154,1132,1,0,0,0,1154,
1133,1,0,0,0,1154,1137,1,0,0,0,1154,1141,1,0,0,0,1154,1145,1,0,0,0,1154,
1149,1,0,0,0,1154,1150,1,0,0,0,1155,199,1,0,0,0,1156,1157,3,202,101,0,1157,
1158,5,69,0,0,1158,1159,5,115,0,0,1159,1160,5,73,0,0,1160,1161,1,0,0,0,1161,
1162,3,202,101,0,1162,1173,1,0,0,0,1163,1164,3,202,101,0,1164,1165,5,69,
0,0,1165,1166,3,202,101,0,1166,1167,1,0,0,0,1167,1168,3,202,101,0,1168,1169,
5,69,0,0,1169,1170,3,200,100,0,1170,1173,1,0,0,0,1171,1173,3,202,101,0,1172,
1156,1,0,0,0,1172,1163,1,0,0,0,1172,1171,1,0,0,0,1173,201,1,0,0,0,1174,1175,
5,70,0,0,1175,1176,3,200,100,0,1176,1177,5,69,0,0,1177,1178,5,115,0,0,1178,
1179,5,73,0,0,1179,1180,1,0,0,0,1180,1181,3,204,102,0,1181,1184,1,0,0,0,
1182,1184,3,302,151,0,1183,1174,1,0,0,0,1183,1182,1,0,0,0,1184,203,1,0,0,
0,1185,1186,5,70,0,0,1186,1187,3,200,100,0,1187,1188,5,69,0,0,1188,1189,
5,115,0,0,1189,1190,5,73,0,0,1190,1191,3,344,172,0,1191,1192,5,69,0,0,1192,
1195,3,344,172,0,1193,1194,5,69,0,0,1194,1196,3,344,172,0,1195,1193,1,0,
0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1198,5,71,0,0,1198,205,1,0,
0,0,1199,1200,5,35,0,0,1200,1201,5,70,0,0,1201,1206,3,208,104,0,1202,1203,
5,69,0,0,1203,1205,3,208,104,0,1204,1202,1,0,0,0,1205,1208,1,0,0,0,1206,
1204,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,1208,1206,1,0,0,0,1209,
1210,5,71,0,0,1210,207,1,0,0,0,1211,1249,3,274,137,0,1212,1213,3,212,106,
0,1213,1214,5,73,0,0,1214,1215,3,274,137,0,1215,1249,1,0,0,0,1216,1249,3,
196,98,0,1217,1218,3,222,111,0,1218,1219,5,73,0,0,1219,1220,3,350,175,0,
1220,1249,1,0,0,0,1221,1222,3,224,112,0,1222,1223,5,73,0,0,1223,1224,3,350,
175,0,1224,1249,1,0,0,0,1225,1228,3,226,113,0,1226,1228,3,228,114,0,1227,
1225,1,0,0,0,1227,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,73,0,0,1230,
1231,3,350,175,0,1231,1249,1,0,0,0,1232,1233,3,230,115,0,1233,1234,5,73,
0,0,1234,1235,3,350,175,0,1235,1249,1,0,0,0,1236,1237,3,232,116,0,1237,1238,
5,73,0,0,1238,1239,3,342,171,0,1239,1249,1,0,0,0,1240,1241,3,234,117,0,1241,
1242,5,73,0,0,1242,1243,3,350,175,0,1243,1249,1,0,0,0,1244,1245,3,220,110,
0,1245,1246,5,73,0,0,1246,1247,3,362,181,0,1247,1249,1,0,0,0,1248,1211,1,
0,0,0,1248,1212,1,0,0,0,1248,1216,1,0,0,0,1248,1217,1,0,0,0,1248,1221,1,
0,0,0,1248,1227,1,0,0,0,1248,1232,1,0,0,0,1248,1236,1,0,0,0,1248,1240,1,
0,0,0,1248,1244,1,0,0,0,1249,209,1,0,0,0,1250,1251,5,36,0,0,1251,211,1,0,
0,0,1252,1253,5,37,0,0,1253,213,1,0,0,0,1254,1255,5,115,0,0,1255,215,1,0,
0,0,1256,1257,5,6,0,0,1257,217,1,0,0,0,1258,1259,5,38,0,0,1259,219,1,0,0,
0,1260,1261,5,46,0,0,1261,221,1,0,0,0,1262,1263,5,49,0,0,1263,223,1,0,0,
0,1264,1265,5,50,0,0,1265,225,1,0,0,0,1266,1267,5,51,0,0,1267,227,1,0,0,
0,1268,1269,5,52,0,0,1269,229,1,0,0,0,1270,1271,5,53,0,0,1271,231,1,0,0,
0,1272,1273,5,54,0,0,1273,233,1,0,0,0,1274,1275,5,55,0,0,1275,235,1,0,0,
0,1276,1277,5,56,0,0,1277,237,1,0,0,0,1278,1279,5,57,0,0,1279,239,1,0,0,
0,1280,1281,5,58,0,0,1281,241,1,0,0,0,1282,1283,5,59,0,0,1283,243,1,0,0,
0,1284,1285,5,115,0,0,1285,245,1,0,0,0,1286,1287,5,47,0,0,1287,247,1,0,0,
0,1288,1289,5,115,0,0,1289,249,1,0,0,0,1290,1291,5,61,0,0,1291,251,1,0,0,
0,1292,1293,5,62,0,0,1293,253,1,0,0,0,1294,1295,5,63,0,0,1295,255,1,0,0,
0,1296,1297,5,44,0,0,1297,1298,5,70,0,0,1298,1303,3,258,129,0,1299,1300,
5,69,0,0,1300,1302,3,258,129,0,1301,1299,1,0,0,0,1302,1305,1,0,0,0,1303,
1301,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,1303,1,0,0,0,1306,
1307,5,71,0,0,1307,257,1,0,0,0,1308,1323,3,274,137,0,1309,1310,3,212,106,
0,1310,1311,5,73,0,0,1311,1312,3,274,137,0,1312,1323,1,0,0,0,1313,1323,3,
196,98,0,1314,1315,3,224,112,0,1315,1316,5,73,0,0,1316,1317,3,350,175,0,
1317,1323,1,0,0,0,1318,1319,3,220,110,0,1319,1320,5,73,0,0,1320,1321,3,362,
181,0,1321,1323,1,0,0,0,1322,1308,1,0,0,0,1322,1309,1,0,0,0,1322,1313,1,
0,0,0,1322,1314,1,0,0,0,1322,1318,1,0,0,0,1323,259,1,0,0,0,1324,1325,5,64,
0,0,1325,1326,5,70,0,0,1326,1331,3,262,131,0,1327,1328,5,69,0,0,1328,1330,
3,262,131,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,
1,0,0,0,1332,1334,1,0,0,0,1333,1331,1,0,0,0,1334,1335,5,71,0,0,1335,261,
1,0,0,0,1336,1337,3,212,106,0,1337,1338,5,73,0,0,1338,1339,3,274,137,0,1339,
1367,1,0,0,0,1340,1341,3,222,111,0,1341,1342,5,73,0,0,1342,1343,3,350,175,
0,1343,1367,1,0,0,0,1344,1367,3,196,98,0,1345,1361,3,220,110,0,1346,1361,
3,236,118,0,1347,1361,3,238,119,0,1348,1361,3,240,120,0,1349,1361,3,242,
121,0,1350,1361,3,244,122,0,1351,1361,3,226,113,0,1352,1361,3,246,123,0,
1353,1361,3,248,124,0,1354,1361,3,230,115,0,1355,1361,3,250,125,0,1356,1361,
3,252,126,0,1357,1361,3,232,116,0,1358,1361,3,254,127,0,1359,1361,3,234,
117,0,1360,1345,1,0,0,0,1360,1346,1,0,0,0,1360,1347,1,0,0,0,1360,1348,1,
0,0,0,1360,1349,1,0,0,0,1360,1350,1,0,0,0,1360,1351,1,0,0,0,1360,1352,1,
0,0,0,1360,1353,1,0,0,0,1360,1354,1,0,0,0,1360,1355,1,0,0,0,1360,1356,1,
0,0,0,1360,1357,1,0,0,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,1362,1,
0,0,0,1362,1363,5,73,0,0,1363,1364,3,362,181,0,1364,1367,1,0,0,0,1365,1367,
3,274,137,0,1366,1336,1,0,0,0,1366,1340,1,0,0,0,1366,1344,1,0,0,0,1366,1360,
1,0,0,0,1366,1365,1,0,0,0,1367,263,1,0,0,0,1368,1369,5,65,0,0,1369,1370,
3,270,135,0,1370,265,1,0,0,0,1371,1372,5,66,0,0,1372,1373,3,270,135,0,1373,
267,1,0,0,0,1374,1375,5,67,0,0,1375,1376,3,270,135,0,1376,269,1,0,0,0,1377,
1378,3,274,137,0,1378,1379,3,274,137,0,1379,1392,1,0,0,0,1380,1381,5,70,
0,0,1381,1386,3,272,136,0,1382,1383,5,69,0,0,1383,1385,3,272,136,0,1384,
1382,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,
1389,1,0,0,0,1388,1386,1,0,0,0,1389,1390,5,71,0,0,1390,1392,1,0,0,0,1391,
1377,1,0,0,0,1391,1380,1,0,0,0,1392,271,1,0,0,0,1393,1404,3,274,137,0,1394,
1395,3,212,106,0,1395,1396,5,73,0,0,1396,1397,3,274,137,0,1397,1404,1,0,
0,0,1398,1404,3,196,98,0,1399,1400,3,220,110,0,1400,1401,5,73,0,0,1401,1402,
3,362,181,0,1402,1404,1,0,0,0,1403,1393,1,0,0,0,1403,1394,1,0,0,0,1403,1398,
1,0,0,0,1403,1399,1,0,0,0,1404,273,1,0,0,0,1405,1408,3,326,163,0,1406,1408,
5,117,0,0,1407,1405,1,0,0,0,1407,1406,1,0,0,0,1408,275,1,0,0,0,1409,1413,
7,4,0,0,1410,1413,3,326,163,0,1411,1413,5,117,0,0,1412,1409,1,0,0,0,1412,
1410,1,0,0,0,1412,1411,1,0,0,0,1413,277,1,0,0,0,1414,1415,5,40,0,0,1415,
1416,5,70,0,0,1416,1417,3,280,140,0,1417,1418,5,71,0,0,1418,279,1,0,0,0,
1419,1425,3,284,142,0,1420,1422,3,282,141,0,1421,1423,3,284,142,0,1422,1421,
1,0,0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1419,1,0,0,0,1424,1420,
1,0,0,0,1425,1440,1,0,0,0,1426,1428,3,282,141,0,1427,1429,3,284,142,0,1428,
1427,1,0,0,0,1428,1429,1,0,0,0,1429,1439,1,0,0,0,1430,1436,5,69,0,0,1431,
1437,3,284,142,0,1432,1434,3,282,141,0,1433,1435,3,284,142,0,1434,1433,1,
0,0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,0,1436,1431,1,0,0,0,1436,1432,1,
0,0,0,1437,1439,1,0,0,0,1438,1426,1,0,0,0,1438,1430,1,0,0,0,1439,1442,1,
0,0,0,1440,1438,1,0,0,0,1440,1441,1,0,0,0,1441,281,1,0,0,0,1442,1440,1,0,
0,0,1443,1444,7,5,0,0,1444,283,1,0,0,0,1445,1460,5,93,0,0,1446,1460,3,286,
143,0,1447,1448,5,114,0,0,1448,1460,3,286,143,0,1449,1451,7,6,0,0,1450,1449,
1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1457,5,94,0,0,1453,1455,
5,114,0,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,
3,286,143,0,1457,1454,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,1445,
1,0,0,0,1459,1446,1,0,0,0,1459,1447,1,0,0,0,1459,1450,1,0,0,0,1460,285,1,
0,0,0,1461,1467,7,7,0,0,1462,1463,5,70,0,0,1463,1464,3,280,140,0,1464,1465,
5,71,0,0,1465,1467,1,0,0,0,1466,1461,1,0,0,0,1466,1462,1,0,0,0,1467,287,
1,0,0,0,1468,1469,5,41,0,0,1469,1470,3,290,145,0,1470,1471,5,73,0,0,1471,
1472,3,302,151,0,1472,289,1,0,0,0,1473,1474,5,115,0,0,1474,1475,5,70,0,0,
1475,1476,3,28,14,0,1476,1477,5,71,0,0,1477,291,1,0,0,0,1478,1479,5,42,0,
0,1479,1480,3,294,147,0,1480,293,1,0,0,0,1481,1487,5,115,0,0,1482,1484,5,
70,0,0,1483,1485,3,296,148,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,
1,0,0,0,1486,1488,5,71,0,0,1487,1482,1,0,0,0,1487,1488,1,0,0,0,1488,295,
1,0,0,0,1489,1494,3,298,149,0,1490,1491,5,69,0,0,1491,1493,3,298,149,0,1492,
1490,1,0,0,0,1493,1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,
297,1,0,0,0,1496,1494,1,0,0,0,1497,1501,3,302,151,0,1498,1499,5,117,0,0,
1499,1501,3,146,73,0,1500,1497,1,0,0,0,1500,1498,1,0,0,0,1501,299,1,0,0,
0,1502,1504,5,43,0,0,1503,1505,3,342,171,0,1504,1503,1,0,0,0,1504,1505,1,
0,0,0,1505,301,1,0,0,0,1506,1509,3,304,152,0,1507,1508,5,72,0,0,1508,1510,
3,304,152,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,303,1,0,0,0,1511,1517,
3,306,153,0,1512,1513,3,352,176,0,1513,1514,3,306,153,0,1514,1516,1,0,0,
0,1515,1512,1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,
0,1518,305,1,0,0,0,1519,1517,1,0,0,0,1520,1525,3,308,154,0,1521,1522,7,8,
0,0,1522,1524,3,308,154,0,1523,1521,1,0,0,0,1524,1527,1,0,0,0,1525,1523,
1,0,0,0,1525,1526,1,0,0,0,1526,307,1,0,0,0,1527,1525,1,0,0,0,1528,1533,3,
310,155,0,1529,1530,5,80,0,0,1530,1532,3,310,155,0,1531,1529,1,0,0,0,1532,
1535,1,0,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,309,1,0,0,0,1535,1533,
1,0,0,0,1536,1541,3,312,156,0,1537,1538,5,79,0,0,1538,1540,3,312,156,0,1539,
1537,1,0,0,0,1540,1543,1,0,0,0,1541,1539,1,0,0,0,1541,1542,1,0,0,0,1542,
311,1,0,0,0,1543,1541,1,0,0,0,1544,1545,5,78,0,0,1545,1548,3,312,156,0,1546,
1548,3,314,157,0,1547,1544,1,0,0,0,1547,1546,1,0,0,0,1548,313,1,0,0,0,1549,
1552,3,316,158,0,1550,1551,7,9,0,0,1551,1553,3,316,158,0,1552,1550,1,0,0,
0,1552,1553,1,0,0,0,1553,315,1,0,0,0,1554,1559,3,318,159,0,1555,1556,7,6,
0,0,1556,1558,3,318,159,0,1557,1555,1,0,0,0,1558,1561,1,0,0,0,1559,1557,
1,0,0,0,1559,1560,1,0,0,0,1560,317,1,0,0,0,1561,1559,1,0,0,0,1562,1567,3,
320,160,0,1563,1564,7,10,0,0,1564,1566,3,320,160,0,1565,1563,1,0,0,0,1566,
1569,1,0,0,0,1567,1565,1,0,0,0,1567,1568,1,0,0,0,1568,319,1,0,0,0,1569,1567,
1,0,0,0,1570,1572,7,6,0,0,1571,1570,1,0,0,0,1572,1575,1,0,0,0,1573,1571,
1,0,0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1573,1,0,0,0,1576,1577,
3,322,161,0,1577,321,1,0,0,0,1578,1583,3,324,162,0,1579,1580,5,77,0,0,1580,
1582,3,324,162,0,1581,1579,1,0,0,0,1582,1585,1,0,0,0,1583,1581,1,0,0,0,1583,
1584,1,0,0,0,1584,323,1,0,0,0,1585,1583,1,0,0,0,1586,1595,3,378,189,0,1587,
1595,7,4,0,0,1588,1595,3,382,191,0,1589,1595,3,362,181,0,1590,1591,5,70,
0,0,1591,1592,3,302,151,0,1592,1593,5,71,0,0,1593,1595,1,0,0,0,1594,1586,
1,0,0,0,1594,1587,1,0,0,0,1594,1588,1,0,0,0,1594,1589,1,0,0,0,1594,1590,
1,0,0,0,1595,325,1,0,0,0,1596,1601,3,330,165,0,1597,1598,7,6,0,0,1598,1600,
3,330,165,0,1599,1597,1,0,0,0,1600,1603,1,0,0,0,1601,1599,1,0,0,0,1601,1602,
1,0,0,0,1602,327,1,0,0,0,1603,1601,1,0,0,0,1604,1609,3,330,165,0,1605,1606,
7,6,0,0,1606,1608,3,330,165,0,1607,1605,1,0,0,0,1608,1611,1,0,0,0,1609,1607,
1,0,0,0,1609,1610,1,0,0,0,1610,329,1,0,0,0,1611,1609,1,0,0,0,1612,1617,3,
332,166,0,1613,1614,7,10,0,0,1614,1616,3,332,166,0,1615,1613,1,0,0,0,1616,
1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,331,1,0,0,0,1619,1617,
1,0,0,0,1620,1622,7,6,0,0,1621,1620,1,0,0,0,1622,1625,1,0,0,0,1623,1621,
1,0,0,0,1623,1624,1,0,0,0,1624,1626,1,0,0,0,1625,1623,1,0,0,0,1626,1627,
3,334,167,0,1627,333,1,0,0,0,1628,1631,3,336,168,0,1629,1630,5,77,0,0,1630,
1632,3,334,167,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,335,1,0,0,0,1633,
1640,5,114,0,0,1634,1640,3,364,182,0,1635,1636,5,70,0,0,1636,1637,3,328,
164,0,1637,1638,5,71,0,0,1638,1640,1,0,0,0,1639,1633,1,0,0,0,1639,1634,1,
0,0,0,1639,1635,1,0,0,0,1640,337,1,0,0,0,1641,1642,3,302,151,0,1642,339,
1,0,0,0,1643,1644,3,302,151,0,1644,341,1,0,0,0,1645,1646,3,326,163,0,1646,
343,1,0,0,0,1647,1648,3,302,151,0,1648,345,1,0,0,0,1649,1650,3,302,151,0,
1650,347,1,0,0,0,1651,1652,3,302,151,0,1652,349,1,0,0,0,1653,1654,3,302,
151,0,1654,351,1,0,0,0,1655,1656,5,76,0,0,1656,1657,5,76,0,0,1657,353,1,
0,0,0,1658,1659,3,302,151,0,1659,355,1,0,0,0,1660,1661,3,302,151,0,1661,
357,1,0,0,0,1662,1663,5,115,0,0,1663,1664,5,70,0,0,1664,1669,3,342,171,0,
1665,1666,5,69,0,0,1666,1668,3,342,171,0,1667,1665,1,0,0,0,1668,1671,1,0,
0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1669,1,0,
0,0,1672,1673,5,71,0,0,1673,359,1,0,0,0,1674,1683,5,70,0,0,1675,1680,3,302,
151,0,1676,1677,5,69,0,0,1677,1679,3,302,151,0,1678,1676,1,0,0,0,1679,1682,
1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1684,1,0,0,0,1682,1680,
1,0,0,0,1683,1675,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1686,
5,71,0,0,1686,361,1,0,0,0,1687,1692,7,0,0,0,1688,1690,3,360,180,0,1689,1691,
3,366,183,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1693,1,0,0,0,1692,1688,
1,0,0,0,1692,1693,1,0,0,0,1693,363,1,0,0,0,1694,1699,5,115,0,0,1695,1697,
3,360,180,0,1696,1698,3,366,183,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,
1700,1,0,0,0,1699,1695,1,0,0,0,1699,1700,1,0,0,0,1700,365,1,0,0,0,1701,1703,
5,70,0,0,1702,1704,3,304,152,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,
1705,1,0,0,0,1705,1707,5,72,0,0,1706,1708,3,304,152,0,1707,1706,1,0,0,0,
1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,1710,5,71,0,0,1710,367,1,0,0,0,
1711,1712,5,115,0,0,1712,369,1,0,0,0,1713,1714,5,115,0,0,1714,371,1,0,0,
0,1715,1716,5,115,0,0,1716,373,1,0,0,0,1717,1718,5,115,0,0,1718,375,1,0,
0,0,1719,1721,7,6,0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,
0,0,1722,1726,3,378,189,0,1723,1726,7,4,0,0,1724,1726,3,382,191,0,1725,1720,
1,0,0,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,377,1,0,0,0,1727,1730,7,
11,0,0,1728,1730,3,380,190,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,379,
1,0,0,0,1731,1733,5,70,0,0,1732,1734,7,6,0,0,1733,1732,1,0,0,0,1733,1734,
1,0,0,0,1734,1735,1,0,0,0,1735,1736,7,11,0,0,1736,1738,5,69,0,0,1737,1739,
7,6,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,1741,
7,11,0,0,1741,1742,5,71,0,0,1742,381,1,0,0,0,1743,1744,7,12,0,0,1744,383,
1,0,0,0,1745,1746,7,0,0,0,1746,385,1,0,0,0,1747,1748,5,115,0,0,1748,387,
1,0,0,0,171,391,396,403,408,413,420,423,440,460,472,475,481,485,494,497,
500,507,523,528,535,540,545,551,568,576,583,585,588,596,605,618,622,628,
632,639,651,658,663,670,675,684,686,695,699,710,722,734,744,751,766,770,
785,804,807,813,818,823,828,832,836,846,856,874,879,883,891,899,910,915,
921,930,944,948,954,959,966,971,976,983,988,992,997,1004,1009,1014,1019,
1028,1032,1036,1040,1047,1051,1055,1062,1067,1074,1084,1089,1091,1099,1101,
1109,1111,1122,1129,1154,1172,1183,1195,1206,1227,1248,1303,1322,1331,1360,
1366,1386,1391,1403,1407,1412,1422,1424,1428,1434,1436,1438,1440,1450,1454,
1457,1459,1466,1484,1487,1494,1500,1504,1509,1517,1525,1533,1541,1547,1552,
1559,1567,1573,1583,1594,1601,1609,1617,1623,1631,1639,1669,1680,1683,1690,
1692,1697,1699,1703,1707,1720,1725,1729,1733,1738];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class Fortran77Parser extends antlr4.Parser {

    static grammarFileName = "Fortran77Parser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'$'", "','", "'('", 
                            "')'", "':'", "'='", "'-'", "'+'", "'/'", "'**'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'XCON'", 
                            "'PCON'", "'FCON'", "'CCON'", "'HOLLERITH'", 
                            "'CONCATOP'", "'CTRLDIRECT'", "'CTRLREC'", "'TO'", 
                            "'SUBPROGRAMBLOCK'", "'DOBLOCK'", "'AIF'", "'THENBLOCK'", 
                            "'ELSEBLOCK'", "'CODEROOT'" ];
    static symbolicNames = [ null, "PROGRAM", "ENTRY", "FUNCTION", "BLOCK", 
                             "SUBROUTINE", "END", "DIMENSION", "REAL", "EQUIVALENCE", 
                             "COMMON", "POINTER", "IMPLICIT", "NONE", "CHARACTER", 
                             "PARAMETER", "EXTERNAL", "INTRINSIC", "SAVE", 
                             "DATA", "GO", "GOTO", "IF", "THEN", "ELSE", 
                             "ENDIF", "ELSEIF", "DO", "CONTINUE", "STOP", 
                             "ENDDO", "PAUSE", "WRITE", "READ", "PRINT", 
                             "OPEN", "FMT", "UNIT", "ERR", "IOSTAT", "FORMAT", 
                             "LET", "CALL", "RETURN", "CLOSE", "DOUBLE", 
                             "IOSTART", "SEQUENTIAL", "LABEL", "FILE", "STATUS", 
                             "ACCESS", "POSITION", "FORM", "RECL", "BLANK", 
                             "EXIST", "OPENED", "NUMBER", "NAMED", "NAME_", 
                             "FORMATTED", "UNFORMATTED", "NEXTREC", "INQUIRE", 
                             "BACKSPACE", "ENDFILE", "REWIND", "DOLLAR", 
                             "COMMA", "LPAREN", "RPAREN", "COLON", "ASSIGN", 
                             "MINUS", "PLUS", "DIV", "POWER", "LNOT", "LAND", 
                             "LOR", "EQV", "NEQV", "XOR", "EOR", "LT", "LE", 
                             "GT", "GE", "NE", "EQ", "TRUE", "FALSE", "XCON", 
                             "PCON", "FCON", "CCON", "HOLLERITH", "CONCATOP", 
                             "CTRLDIRECT", "CTRLREC", "TO", "SUBPROGRAMBLOCK", 
                             "DOBLOCK", "AIF", "THENBLOCK", "ELSEBLOCK", 
                             "CODEROOT", "COMPLEX", "PRECISION", "INTEGER", 
                             "LOGICAL", "SCON", "RCON", "ICON", "NAME", 
                             "COMMENT", "STAR", "STRINGLITERAL", "EOL", 
                             "LINECONT", "WS" ];
    static ruleNames = [ "commentStatement", "program", "executableUnit", 
                         "mainProgram", "functionSubprogram", "subroutineSubprogram", 
                         "blockdataSubprogram", "otherSpecificationStatement", 
                         "executableStatement", "programStatement", "entryStatement", 
                         "functionStatement", "blockdataStatement", "subroutineStatement", 
                         "namelist", "statement", "subprogramBody", "wholeStatement", 
                         "endStatement", "dimensionStatement", "arrayDeclarator", 
                         "arrayDeclarators", "arrayDeclaratorExtents", "arrayDeclaratorExtent", 
                         "equivalenceStatement", "equivEntityGroup", "equivEntity", 
                         "commonStatement", "commonName", "commonItem", 
                         "commonItems", "commonBlock", "typeStatement", 
                         "typeStatementNameList", "typeStatementName", "typeStatementNameCharList", 
                         "typeStatementNameChar", "typeStatementLenSpec", 
                         "typename_", "type_", "typenameLen", "pointerStatement", 
                         "pointerDecl", "implicitStatement", "implicitSpec", 
                         "implicitSpecs", "implicitNone", "implicitLetter", 
                         "implicitRange", "implicitLetters", "lenSpecification", 
                         "characterWithLen", "cwlLen", "parameterStatement", 
                         "paramlist", "paramassign", "externalStatement", 
                         "intrinsicStatement", "saveStatement", "saveEntity", 
                         "dataStatement", "dataStatementItem", "dataStatementMultiple", 
                         "dataStatementEntity", "dse1", "dse2", "dataImpliedDo", 
                         "dataImpliedDoRange", "dataImpliedDoList", "dataImpliedDoListWhat", 
                         "gotoStatement", "unconditionalGoto", "computedGoto", 
                         "lblRef", "labelList", "assignedGoto", "ifStatement", 
                         "arithmeticIfStatement", "logicalIfStatement", 
                         "blockIfStatement", "firstIfBlock", "elseIfStatement", 
                         "elseStatement", "endIfStatement", "doStatement", 
                         "doVarArgs", "doWithLabel", "doBody", "doWithEndDo", 
                         "enddoStatement", "continueStatement", "stopStatement", 
                         "pauseStatement", "writeStatement", "readStatement", 
                         "printStatement", "assignmentStatement", "controlInfoList", 
                         "controlErrSpec", "controlInfoListItem", "ioList", 
                         "ioListItem", "ioImpliedDoList", "openStatement", 
                         "openControl", "controlFmt", "controlUnit", "controlRec", 
                         "controlEnd", "controlErr", "controlIostat", "controlFile", 
                         "controlStatus", "controlAccess", "controlPosition", 
                         "controlForm", "controlRecl", "controlBlank", "controlExist", 
                         "controlOpened", "controlNumber", "controlNamed", 
                         "controlName", "controlSequential", "controlDirect", 
                         "controlFormatted", "controlUnformatted", "controlNextrec", 
                         "closeStatement", "closeControl", "inquireStatement", 
                         "inquireControl", "backspaceStatement", "endfileStatement", 
                         "rewindStatement", "berFinish", "berFinishItem", 
                         "unitIdentifier", "formatIdentifier", "formatStatement", 
                         "fmtSpec", "formatsep", "formatedit", "editElement", 
                         "statementFunctionStatement", "sfArgs", "callStatement", 
                         "subroutineCall", "callArgumentList", "callArgument", 
                         "returnStatement", "expression", "ncExpr", "lexpr0", 
                         "lexpr1", "lexpr2", "lexpr3", "lexpr4", "aexpr0", 
                         "aexpr1", "aexpr2", "aexpr3", "aexpr4", "iexpr", 
                         "iexprCode", "iexpr1", "iexpr2", "iexpr3", "iexpr4", 
                         "constantExpr", "arithmeticExpression", "integerExpr", 
                         "intRealDpExpr", "arithmeticConstExpr", "intConstantExpr", 
                         "characterExpression", "concatOp", "logicalExpression", 
                         "logicalConstExpr", "arrayElementName", "subscripts", 
                         "varRef", "varRefCode", "substringApp", "variableName", 
                         "arrayName", "subroutineName", "functionName", 
                         "constant", "unsignedArithmeticConstant", "complexConstant", 
                         "logicalConstant", "identifier", "to" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Fortran77Parser.ruleNames;
        this.literalNames = Fortran77Parser.literalNames;
        this.symbolicNames = Fortran77Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	commentStatement() {
	    let localctx = new CommentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Fortran77Parser.RULE_commentStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 388;
	        		this.match(Fortran77Parser.COMMENT);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 391; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,0, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Fortran77Parser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 393;
	                this.commentStatement(); 
	            }
	            this.state = 398;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 406; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 399;
	            this.executableUnit();
	            this.state = 403;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 400;
	                    this.commentStatement(); 
	                }
	                this.state = 405;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	            }

	            this.state = 408; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Fortran77Parser.PROGRAM) | (1 << Fortran77Parser.ENTRY) | (1 << Fortran77Parser.FUNCTION) | (1 << Fortran77Parser.BLOCK) | (1 << Fortran77Parser.SUBROUTINE) | (1 << Fortran77Parser.DIMENSION) | (1 << Fortran77Parser.REAL) | (1 << Fortran77Parser.EQUIVALENCE) | (1 << Fortran77Parser.COMMON) | (1 << Fortran77Parser.POINTER) | (1 << Fortran77Parser.IMPLICIT) | (1 << Fortran77Parser.CHARACTER) | (1 << Fortran77Parser.PARAMETER) | (1 << Fortran77Parser.EXTERNAL) | (1 << Fortran77Parser.INTRINSIC) | (1 << Fortran77Parser.SAVE) | (1 << Fortran77Parser.DATA) | (1 << Fortran77Parser.GO) | (1 << Fortran77Parser.GOTO) | (1 << Fortran77Parser.IF) | (1 << Fortran77Parser.DO) | (1 << Fortran77Parser.CONTINUE) | (1 << Fortran77Parser.STOP) | (1 << Fortran77Parser.PAUSE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Fortran77Parser.WRITE - 32)) | (1 << (Fortran77Parser.READ - 32)) | (1 << (Fortran77Parser.PRINT - 32)) | (1 << (Fortran77Parser.OPEN - 32)) | (1 << (Fortran77Parser.LET - 32)) | (1 << (Fortran77Parser.CALL - 32)) | (1 << (Fortran77Parser.RETURN - 32)) | (1 << (Fortran77Parser.CLOSE - 32)) | (1 << (Fortran77Parser.DOUBLE - 32)) | (1 << (Fortran77Parser.LABEL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Fortran77Parser.INQUIRE - 64)) | (1 << (Fortran77Parser.BACKSPACE - 64)) | (1 << (Fortran77Parser.ENDFILE - 64)) | (1 << (Fortran77Parser.REWIND - 64)) | (1 << (Fortran77Parser.LPAREN - 64)) | (1 << (Fortran77Parser.MINUS - 64)) | (1 << (Fortran77Parser.PLUS - 64)) | (1 << (Fortran77Parser.LNOT - 64)) | (1 << (Fortran77Parser.TRUE - 64)) | (1 << (Fortran77Parser.FALSE - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Fortran77Parser.HOLLERITH - 97)) | (1 << (Fortran77Parser.COMPLEX - 97)) | (1 << (Fortran77Parser.INTEGER - 97)) | (1 << (Fortran77Parser.LOGICAL - 97)) | (1 << (Fortran77Parser.SCON - 97)) | (1 << (Fortran77Parser.RCON - 97)) | (1 << (Fortran77Parser.ICON - 97)) | (1 << (Fortran77Parser.NAME - 97)) | (1 << (Fortran77Parser.COMMENT - 97)))) !== 0));
	        this.state = 413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.EOL) {
	            this.state = 410;
	            this.match(Fortran77Parser.EOL);
	            this.state = 415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executableUnit() {
	    let localctx = new ExecutableUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Fortran77Parser.RULE_executableUnit);
	    try {
	        this.state = 420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 416;
	            this.functionSubprogram();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 417;
	            this.mainProgram();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 418;
	            this.subroutineSubprogram();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 419;
	            this.blockdataSubprogram();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainProgram() {
	    let localctx = new MainProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Fortran77Parser.RULE_mainProgram);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.PROGRAM) {
	            this.state = 422;
	            this.programStatement();
	        }

	        this.state = 425;
	        this.subprogramBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSubprogram() {
	    let localctx = new FunctionSubprogramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Fortran77Parser.RULE_functionSubprogram);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.functionStatement();
	        this.state = 428;
	        this.subprogramBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subroutineSubprogram() {
	    let localctx = new SubroutineSubprogramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Fortran77Parser.RULE_subroutineSubprogram);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this.subroutineStatement();
	        this.state = 431;
	        this.subprogramBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockdataSubprogram() {
	    let localctx = new BlockdataSubprogramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Fortran77Parser.RULE_blockdataSubprogram);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.blockdataStatement();
	        this.state = 434;
	        this.subprogramBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherSpecificationStatement() {
	    let localctx = new OtherSpecificationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Fortran77Parser.RULE_otherSpecificationStatement);
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.DIMENSION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 436;
	            this.dimensionStatement();
	            break;
	        case Fortran77Parser.EQUIVALENCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 437;
	            this.equivalenceStatement();
	            break;
	        case Fortran77Parser.INTRINSIC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 438;
	            this.intrinsicStatement();
	            break;
	        case Fortran77Parser.SAVE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 439;
	            this.saveStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executableStatement() {
	    let localctx = new ExecutableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Fortran77Parser.RULE_executableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.NAME:
	            this.state = 442;
	            this.assignmentStatement();
	            break;
	        case Fortran77Parser.GO:
	        case Fortran77Parser.GOTO:
	            this.state = 443;
	            this.gotoStatement();
	            break;
	        case Fortran77Parser.IF:
	            this.state = 444;
	            this.ifStatement();
	            break;
	        case Fortran77Parser.DO:
	            this.state = 445;
	            this.doStatement();
	            break;
	        case Fortran77Parser.CONTINUE:
	        case Fortran77Parser.ICON:
	            this.state = 446;
	            this.continueStatement();
	            break;
	        case Fortran77Parser.STOP:
	            this.state = 447;
	            this.stopStatement();
	            break;
	        case Fortran77Parser.PAUSE:
	            this.state = 448;
	            this.pauseStatement();
	            break;
	        case Fortran77Parser.READ:
	            this.state = 449;
	            this.readStatement();
	            break;
	        case Fortran77Parser.WRITE:
	            this.state = 450;
	            this.writeStatement();
	            break;
	        case Fortran77Parser.PRINT:
	            this.state = 451;
	            this.printStatement();
	            break;
	        case Fortran77Parser.REWIND:
	            this.state = 452;
	            this.rewindStatement();
	            break;
	        case Fortran77Parser.BACKSPACE:
	            this.state = 453;
	            this.backspaceStatement();
	            break;
	        case Fortran77Parser.OPEN:
	            this.state = 454;
	            this.openStatement();
	            break;
	        case Fortran77Parser.CLOSE:
	            this.state = 455;
	            this.closeStatement();
	            break;
	        case Fortran77Parser.ENDFILE:
	            this.state = 456;
	            this.endfileStatement();
	            break;
	        case Fortran77Parser.INQUIRE:
	            this.state = 457;
	            this.inquireStatement();
	            break;
	        case Fortran77Parser.CALL:
	            this.state = 458;
	            this.callStatement();
	            break;
	        case Fortran77Parser.RETURN:
	            this.state = 459;
	            this.returnStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programStatement() {
	    let localctx = new ProgramStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Fortran77Parser.RULE_programStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(Fortran77Parser.PROGRAM);
	        this.state = 463;
	        this.match(Fortran77Parser.NAME);
	        this.state = 464;
	        this.match(Fortran77Parser.EOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entryStatement() {
	    let localctx = new EntryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Fortran77Parser.RULE_entryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.match(Fortran77Parser.ENTRY);
	        this.state = 467;
	        this.match(Fortran77Parser.NAME);
	        this.state = 472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.LPAREN) {
	            this.state = 468;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 469;
	            this.namelist();
	            this.state = 470;
	            this.match(Fortran77Parser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionStatement() {
	    let localctx = new FunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Fortran77Parser.RULE_functionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || _la===Fortran77Parser.CHARACTER || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (Fortran77Parser.DOUBLE - 45)) | (1 << (Fortran77Parser.LPAREN - 45)) | (1 << (Fortran77Parser.MINUS - 45)) | (1 << (Fortran77Parser.PLUS - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (Fortran77Parser.LNOT - 78)) | (1 << (Fortran77Parser.TRUE - 78)) | (1 << (Fortran77Parser.FALSE - 78)) | (1 << (Fortran77Parser.HOLLERITH - 78)) | (1 << (Fortran77Parser.COMPLEX - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (Fortran77Parser.INTEGER - 110)) | (1 << (Fortran77Parser.LOGICAL - 110)) | (1 << (Fortran77Parser.SCON - 110)) | (1 << (Fortran77Parser.RCON - 110)) | (1 << (Fortran77Parser.ICON - 110)) | (1 << (Fortran77Parser.NAME - 110)))) !== 0)) {
	            this.state = 474;
	            this.type_();
	        }

	        this.state = 477;
	        this.match(Fortran77Parser.FUNCTION);
	        this.state = 478;
	        this.match(Fortran77Parser.NAME);
	        this.state = 479;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || _la===Fortran77Parser.NAME) {
	            this.state = 480;
	            this.namelist();
	        }

	        this.state = 483;
	        this.match(Fortran77Parser.RPAREN);
	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 484;
	            this.match(Fortran77Parser.EOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockdataStatement() {
	    let localctx = new BlockdataStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Fortran77Parser.RULE_blockdataStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(Fortran77Parser.BLOCK);
	        this.state = 488;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subroutineStatement() {
	    let localctx = new SubroutineStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Fortran77Parser.RULE_subroutineStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.match(Fortran77Parser.SUBROUTINE);
	        this.state = 491;
	        this.match(Fortran77Parser.NAME);
	        this.state = 497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 492;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.REAL || _la===Fortran77Parser.NAME) {
	                this.state = 493;
	                this.namelist();
	            }

	            this.state = 496;
	            this.match(Fortran77Parser.RPAREN);

	        }
	        this.state = 500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 499;
	            this.match(Fortran77Parser.EOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namelist() {
	    let localctx = new NamelistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Fortran77Parser.RULE_namelist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.identifier();
	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 503;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 504;
	            this.identifier();
	            this.state = 509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Fortran77Parser.RULE_statement);
	    try {
	        this.state = 523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 510;
	            this.entryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 511;
	            this.implicitStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 512;
	            this.parameterStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 513;
	            this.typeStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 514;
	            this.commonStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 515;
	            this.pointerStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 516;
	            this.externalStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 517;
	            this.otherSpecificationStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 518;
	            this.dataStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 519;
	            this.statementFunctionStatement();
	            this.state = 520;
	            this.statementFunctionStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 522;
	            this.executableStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subprogramBody() {
	    let localctx = new SubprogramBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Fortran77Parser.RULE_subprogramBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMENT) {
	            this.state = 525;
	            this.commentStatement();
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 538; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 531;
	        		this.wholeStatement();
	        		this.state = 535;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(_la===Fortran77Parser.COMMENT) {
	        		    this.state = 532;
	        		    this.commentStatement();
	        		    this.state = 537;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 540; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,20, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 542;
	        this.endStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wholeStatement() {
	    let localctx = new WholeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Fortran77Parser.RULE_wholeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.LABEL) {
	            this.state = 544;
	            this.match(Fortran77Parser.LABEL);
	        }

	        this.state = 547;
	        this.statement();
	        this.state = 548;
	        this.match(Fortran77Parser.EOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endStatement() {
	    let localctx = new EndStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Fortran77Parser.RULE_endStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.LABEL) {
	            this.state = 550;
	            this.match(Fortran77Parser.LABEL);
	        }

	        this.state = 553;
	        this.match(Fortran77Parser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimensionStatement() {
	    let localctx = new DimensionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Fortran77Parser.RULE_dimensionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this.match(Fortran77Parser.DIMENSION);
	        this.state = 556;
	        this.arrayDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayDeclarator() {
	    let localctx = new ArrayDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Fortran77Parser.RULE_arrayDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.REAL || _la===Fortran77Parser.NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 559;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 560;
	        this.arrayDeclaratorExtents();
	        this.state = 561;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayDeclarators() {
	    let localctx = new ArrayDeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Fortran77Parser.RULE_arrayDeclarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.arrayDeclarator();
	        this.state = 568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 564;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 565;
	            this.arrayDeclarator();
	            this.state = 570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayDeclaratorExtents() {
	    let localctx = new ArrayDeclaratorExtentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Fortran77Parser.RULE_arrayDeclaratorExtents);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this.arrayDeclaratorExtent();
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 572;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 573;
	            this.arrayDeclaratorExtent();
	            this.state = 578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayDeclaratorExtent() {
	    let localctx = new ArrayDeclaratorExtentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Fortran77Parser.RULE_arrayDeclaratorExtent);
	    var _la = 0; // Token type
	    try {
	        this.state = 588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this.iexprCode();
	            this.state = 585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.COLON) {
	                this.state = 580;
	                this.match(Fortran77Parser.COLON);
	                this.state = 583;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Fortran77Parser.LPAREN:
	                case Fortran77Parser.MINUS:
	                case Fortran77Parser.PLUS:
	                case Fortran77Parser.ICON:
	                case Fortran77Parser.NAME:
	                    this.state = 581;
	                    this.iexprCode();
	                    break;
	                case Fortran77Parser.STAR:
	                    this.state = 582;
	                    this.match(Fortran77Parser.STAR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 587;
	            this.match(Fortran77Parser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equivalenceStatement() {
	    let localctx = new EquivalenceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Fortran77Parser.RULE_equivalenceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.match(Fortran77Parser.EQUIVALENCE);
	        this.state = 591;
	        this.equivEntityGroup();
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 592;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 593;
	            this.equivEntityGroup();
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equivEntityGroup() {
	    let localctx = new EquivEntityGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Fortran77Parser.RULE_equivEntityGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 600;
	        this.equivEntity();
	        this.state = 605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 601;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 602;
	            this.equivEntity();
	            this.state = 607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 608;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equivEntity() {
	    let localctx = new EquivEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Fortran77Parser.RULE_equivEntity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this.varRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonStatement() {
	    let localctx = new CommonStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Fortran77Parser.RULE_commonStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(Fortran77Parser.COMMON);
	        this.state = 622;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.DIV:
	            this.state = 613;
	            this.commonBlock();
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMA) {
	                this.state = 614;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 615;
	                this.commonBlock();
	                this.state = 620;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.NAME:
	            this.state = 621;
	            this.commonItems();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonName() {
	    let localctx = new CommonNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Fortran77Parser.RULE_commonName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(Fortran77Parser.DIV);
	        this.state = 628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.NAME:
	            this.state = 625;
	            this.match(Fortran77Parser.NAME);
	            this.state = 626;
	            this.match(Fortran77Parser.DIV);
	            break;
	        case Fortran77Parser.DIV:
	            this.state = 627;
	            this.match(Fortran77Parser.DIV);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonItem() {
	    let localctx = new CommonItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Fortran77Parser.RULE_commonItem);
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            this.match(Fortran77Parser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 631;
	            this.arrayDeclarator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonItems() {
	    let localctx = new CommonItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Fortran77Parser.RULE_commonItems);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.commonItem();
	        this.state = 639;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 635;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 636;
	                this.commonItem(); 
	            }
	            this.state = 641;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonBlock() {
	    let localctx = new CommonBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Fortran77Parser.RULE_commonBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.commonName();
	        this.state = 643;
	        this.commonItems();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatement() {
	    let localctx = new TypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Fortran77Parser.RULE_typeStatement);
	    try {
	        this.state = 651;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 645;
	            this.typename_();
	            this.state = 646;
	            this.typeStatementNameList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 648;
	            this.characterWithLen();
	            this.state = 649;
	            this.typeStatementNameCharList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatementNameList() {
	    let localctx = new TypeStatementNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Fortran77Parser.RULE_typeStatementNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.typeStatementName();
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 654;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 655;
	            this.typeStatementName();
	            this.state = 660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatementName() {
	    let localctx = new TypeStatementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Fortran77Parser.RULE_typeStatementName);
	    try {
	        this.state = 663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 661;
	            this.match(Fortran77Parser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 662;
	            this.arrayDeclarator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatementNameCharList() {
	    let localctx = new TypeStatementNameCharListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Fortran77Parser.RULE_typeStatementNameCharList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.typeStatementNameChar();
	        this.state = 670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 666;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 667;
	            this.typeStatementNameChar();
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatementNameChar() {
	    let localctx = new TypeStatementNameCharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Fortran77Parser.RULE_typeStatementNameChar);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.typeStatementName();
	        this.state = 675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.STAR) {
	            this.state = 674;
	            this.typeStatementLenSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStatementLenSpec() {
	    let localctx = new TypeStatementLenSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Fortran77Parser.RULE_typeStatementLenSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(Fortran77Parser.STAR);
	        this.state = 678;
	        this.lenSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typename_() {
	    let localctx = new Typename_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Fortran77Parser.RULE_typename_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 680;
	            this.match(Fortran77Parser.REAL);
	            break;

	        case 2:
	            this.state = 681;
	            this.match(Fortran77Parser.COMPLEX);
	            this.state = 686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.STAR) {
	                this.state = 682;
	                this.match(Fortran77Parser.STAR);
	                this.state = 684;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Fortran77Parser.ICON) {
	                    this.state = 683;
	                    this.match(Fortran77Parser.ICON);
	                }

	            }

	            break;

	        case 3:
	            this.state = 688;
	            this.match(Fortran77Parser.DOUBLE);
	            this.state = 689;
	            this.match(Fortran77Parser.COMPLEX);
	            break;

	        case 4:
	            this.state = 690;
	            this.match(Fortran77Parser.DOUBLE);
	            this.state = 691;
	            this.match(Fortran77Parser.PRECISION);
	            break;

	        case 5:
	            this.state = 692;
	            this.match(Fortran77Parser.INTEGER);
	            break;

	        case 6:
	            this.state = 693;
	            this.match(Fortran77Parser.LOGICAL);
	            break;

	        case 7:
	            this.state = 694;
	            this.match(Fortran77Parser.CHARACTER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Fortran77Parser.RULE_type_);
	    try {
	        this.state = 699;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 697;
	            this.typename_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 698;
	            this.characterWithLen();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typenameLen() {
	    let localctx = new TypenameLenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Fortran77Parser.RULE_typenameLen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.match(Fortran77Parser.STAR);
	        this.state = 702;
	        this.match(Fortran77Parser.ICON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerStatement() {
	    let localctx = new PointerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Fortran77Parser.RULE_pointerStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.match(Fortran77Parser.POINTER);
	        this.state = 705;
	        this.pointerDecl();
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 706;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 707;
	            this.pointerDecl();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerDecl() {
	    let localctx = new PointerDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Fortran77Parser.RULE_pointerDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 714;
	        this.match(Fortran77Parser.NAME);
	        this.state = 715;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 716;
	        this.match(Fortran77Parser.NAME);
	        this.state = 717;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitStatement() {
	    let localctx = new ImplicitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Fortran77Parser.RULE_implicitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this.match(Fortran77Parser.IMPLICIT);
	        this.state = 722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.NONE:
	            this.state = 720;
	            this.implicitNone();
	            break;
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.CHARACTER:
	        case Fortran77Parser.DOUBLE:
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.LNOT:
	        case Fortran77Parser.TRUE:
	        case Fortran77Parser.FALSE:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.COMPLEX:
	        case Fortran77Parser.INTEGER:
	        case Fortran77Parser.LOGICAL:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.state = 721;
	            this.implicitSpecs();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitSpec() {
	    let localctx = new ImplicitSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Fortran77Parser.RULE_implicitSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.type_();
	        this.state = 725;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 726;
	        this.implicitLetters();
	        this.state = 727;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitSpecs() {
	    let localctx = new ImplicitSpecsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Fortran77Parser.RULE_implicitSpecs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.implicitSpec();
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 730;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 731;
	            this.implicitSpec();
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitNone() {
	    let localctx = new ImplicitNoneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Fortran77Parser.RULE_implicitNone);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.match(Fortran77Parser.NONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitLetter() {
	    let localctx = new ImplicitLetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Fortran77Parser.RULE_implicitLetter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitRange() {
	    let localctx = new ImplicitRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Fortran77Parser.RULE_implicitRange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.implicitLetter();
	        this.state = 744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.MINUS) {
	            this.state = 742;
	            this.match(Fortran77Parser.MINUS);
	            this.state = 743;
	            this.implicitLetter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicitLetters() {
	    let localctx = new ImplicitLettersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Fortran77Parser.RULE_implicitLetters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this.implicitRange();
	        this.state = 751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 747;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 748;
	            this.implicitRange();
	            this.state = 753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lenSpecification() {
	    let localctx = new LenSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Fortran77Parser.RULE_lenSpecification);
	    try {
	        this.state = 766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 754;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 755;
	            this.match(Fortran77Parser.STAR);
	            this.state = 756;
	            this.match(Fortran77Parser.RPAREN);
	            this.state = 758;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 759;
	            this.match(Fortran77Parser.STAR);
	            this.state = 760;
	            this.match(Fortran77Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 761;
	            this.match(Fortran77Parser.ICON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 762;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 763;
	            this.intConstantExpr();
	            this.state = 764;
	            this.match(Fortran77Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterWithLen() {
	    let localctx = new CharacterWithLenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Fortran77Parser.RULE_characterWithLen);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.characterExpression();
	        this.state = 770;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.STAR) {
	            this.state = 769;
	            this.cwlLen();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cwlLen() {
	    let localctx = new CwlLenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Fortran77Parser.RULE_cwlLen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this.match(Fortran77Parser.STAR);
	        this.state = 773;
	        this.lenSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterStatement() {
	    let localctx = new ParameterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Fortran77Parser.RULE_parameterStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.match(Fortran77Parser.PARAMETER);
	        this.state = 776;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 777;
	        this.paramlist();
	        this.state = 778;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramlist() {
	    let localctx = new ParamlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Fortran77Parser.RULE_paramlist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.paramassign();
	        this.state = 785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 781;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 782;
	            this.paramassign();
	            this.state = 787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramassign() {
	    let localctx = new ParamassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Fortran77Parser.RULE_paramassign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.match(Fortran77Parser.NAME);
	        this.state = 789;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 790;
	        this.constantExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalStatement() {
	    let localctx = new ExternalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Fortran77Parser.RULE_externalStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 792;
	        this.match(Fortran77Parser.EXTERNAL);
	        this.state = 793;
	        this.namelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intrinsicStatement() {
	    let localctx = new IntrinsicStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Fortran77Parser.RULE_intrinsicStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(Fortran77Parser.INTRINSIC);
	        this.state = 796;
	        this.namelist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	saveStatement() {
	    let localctx = new SaveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Fortran77Parser.RULE_saveStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(Fortran77Parser.SAVE);
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.DIV || _la===Fortran77Parser.NAME) {
	            this.state = 799;
	            this.saveEntity();
	            this.state = 804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMA) {
	                this.state = 800;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 801;
	                this.saveEntity();
	                this.state = 806;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	saveEntity() {
	    let localctx = new SaveEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Fortran77Parser.RULE_saveEntity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.NAME:
	            this.state = 809;
	            this.match(Fortran77Parser.NAME);
	            break;
	        case Fortran77Parser.DIV:
	            this.state = 810;
	            this.match(Fortran77Parser.DIV);
	            this.state = 811;
	            this.match(Fortran77Parser.NAME);
	            this.state = 812;
	            this.match(Fortran77Parser.DIV);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataStatement() {
	    let localctx = new DataStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Fortran77Parser.RULE_dataStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(Fortran77Parser.DATA);
	        this.state = 816;
	        this.dataStatementEntity();
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.REAL || _la===Fortran77Parser.COMMA || _la===Fortran77Parser.LPAREN || _la===Fortran77Parser.NAME) {
	            this.state = 818;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.COMMA) {
	                this.state = 817;
	                this.match(Fortran77Parser.COMMA);
	            }

	            this.state = 820;
	            this.dataStatementEntity();
	            this.state = 825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataStatementItem() {
	    let localctx = new DataStatementItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Fortran77Parser.RULE_dataStatementItem);
	    try {
	        this.state = 828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 826;
	            this.varRef();
	            break;
	        case Fortran77Parser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 827;
	            this.dataImpliedDo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataStatementMultiple() {
	    let localctx = new DataStatementMultipleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Fortran77Parser.RULE_dataStatementMultiple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        if(la_===1) {
	            this.state = 830;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.ICON || _la===Fortran77Parser.NAME)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 831;
	            this.match(Fortran77Parser.STAR);

	        }
	        this.state = 836;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.TRUE:
	        case Fortran77Parser.FALSE:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	            this.state = 834;
	            this.constant();
	            break;
	        case Fortran77Parser.NAME:
	            this.state = 835;
	            this.match(Fortran77Parser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataStatementEntity() {
	    let localctx = new DataStatementEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Fortran77Parser.RULE_dataStatementEntity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.dse1();
	        this.state = 839;
	        this.dse2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dse1() {
	    let localctx = new Dse1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Fortran77Parser.RULE_dse1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.dataStatementItem();
	        this.state = 846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 842;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 843;
	            this.dataStatementItem();
	            this.state = 848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 849;
	        this.match(Fortran77Parser.DIV);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dse2() {
	    let localctx = new Dse2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Fortran77Parser.RULE_dse2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.dataStatementMultiple();
	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 852;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 853;
	            this.dataStatementMultiple();
	            this.state = 858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 859;
	        this.match(Fortran77Parser.DIV);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataImpliedDo() {
	    let localctx = new DataImpliedDoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Fortran77Parser.RULE_dataImpliedDo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 861;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 862;
	        this.dataImpliedDoList();
	        this.state = 863;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 864;
	        this.dataImpliedDoRange();
	        this.state = 865;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataImpliedDoRange() {
	    let localctx = new DataImpliedDoRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Fortran77Parser.RULE_dataImpliedDoRange);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(Fortran77Parser.NAME);
	        this.state = 868;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 869;
	        this.intConstantExpr();
	        this.state = 870;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 871;
	        this.intConstantExpr();
	        this.state = 874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 872;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 873;
	            this.intConstantExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataImpliedDoList() {
	    let localctx = new DataImpliedDoListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Fortran77Parser.RULE_dataImpliedDoList);
	    try {
	        this.state = 879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 876;
	            this.dataImpliedDoListWhat();
	            break;
	        case Fortran77Parser.COMMA:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 877;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 878;
	            this.dataImpliedDoList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataImpliedDoListWhat() {
	    let localctx = new DataImpliedDoListWhatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Fortran77Parser.RULE_dataImpliedDoListWhat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.NAME:
	            this.state = 881;
	            this.varRef();
	            break;
	        case Fortran77Parser.LPAREN:
	            this.state = 882;
	            this.dataImpliedDo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStatement() {
	    let localctx = new GotoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Fortran77Parser.RULE_gotoStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 885;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.GO || _la===Fortran77Parser.GOTO)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 886;
	        this.to();
	        this.state = 891;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ICON:
	            this.state = 888;
	            this.unconditionalGoto();
	            break;
	        case Fortran77Parser.LPAREN:
	            this.state = 889;
	            this.computedGoto();
	            break;
	        case Fortran77Parser.NAME:
	            this.state = 890;
	            this.assignedGoto();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unconditionalGoto() {
	    let localctx = new UnconditionalGotoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Fortran77Parser.RULE_unconditionalGoto);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 893;
	        this.lblRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	computedGoto() {
	    let localctx = new ComputedGotoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Fortran77Parser.RULE_computedGoto);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 895;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 896;
	        this.labelList();
	        this.state = 897;
	        this.match(Fortran77Parser.RPAREN);
	        this.state = 899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 898;
	            this.match(Fortran77Parser.COMMA);
	        }

	        this.state = 901;
	        this.integerExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lblRef() {
	    let localctx = new LblRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Fortran77Parser.RULE_lblRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(Fortran77Parser.ICON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelList() {
	    let localctx = new LabelListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Fortran77Parser.RULE_labelList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        this.lblRef();
	        this.state = 910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 906;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 907;
	            this.lblRef();
	            this.state = 912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignedGoto() {
	    let localctx = new AssignedGotoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Fortran77Parser.RULE_assignedGoto);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this.match(Fortran77Parser.NAME);
	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA || _la===Fortran77Parser.LPAREN) {
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.COMMA) {
	                this.state = 914;
	                this.match(Fortran77Parser.COMMA);
	            }

	            this.state = 917;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 918;
	            this.labelList();
	            this.state = 919;
	            this.match(Fortran77Parser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Fortran77Parser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this.match(Fortran77Parser.IF);
	        this.state = 924;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 925;
	        this.logicalExpression();
	        this.state = 926;
	        this.match(Fortran77Parser.RPAREN);
	        this.state = 930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 927;
	            this.blockIfStatement();
	            break;

	        case 2:
	            this.state = 928;
	            this.logicalIfStatement();
	            break;

	        case 3:
	            this.state = 929;
	            this.arithmeticIfStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticIfStatement() {
	    let localctx = new ArithmeticIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Fortran77Parser.RULE_arithmeticIfStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 932;
	        this.lblRef();
	        this.state = 933;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 934;
	        this.lblRef();
	        this.state = 935;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 936;
	        this.lblRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalIfStatement() {
	    let localctx = new LogicalIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Fortran77Parser.RULE_logicalIfStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this.executableStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockIfStatement() {
	    let localctx = new BlockIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Fortran77Parser.RULE_blockIfStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        this.firstIfBlock();
	        this.state = 944;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 941;
	                this.elseIfStatement(); 
	            }
	            this.state = 946;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
	        }

	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.ELSE) {
	            this.state = 947;
	            this.elseStatement();
	        }

	        this.state = 950;
	        this.endIfStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	firstIfBlock() {
	    let localctx = new FirstIfBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Fortran77Parser.RULE_firstIfBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.match(Fortran77Parser.THEN);
	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 953;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 959;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMENT) {
	            this.state = 956;
	            this.commentStatement();
	            this.state = 961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 969; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 962;
	            this.wholeStatement();
	            this.state = 966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMENT) {
	                this.state = 963;
	                this.commentStatement();
	                this.state = 968;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 971; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Fortran77Parser.ENTRY) | (1 << Fortran77Parser.DIMENSION) | (1 << Fortran77Parser.REAL) | (1 << Fortran77Parser.EQUIVALENCE) | (1 << Fortran77Parser.COMMON) | (1 << Fortran77Parser.POINTER) | (1 << Fortran77Parser.IMPLICIT) | (1 << Fortran77Parser.CHARACTER) | (1 << Fortran77Parser.PARAMETER) | (1 << Fortran77Parser.EXTERNAL) | (1 << Fortran77Parser.INTRINSIC) | (1 << Fortran77Parser.SAVE) | (1 << Fortran77Parser.DATA) | (1 << Fortran77Parser.GO) | (1 << Fortran77Parser.GOTO) | (1 << Fortran77Parser.IF) | (1 << Fortran77Parser.DO) | (1 << Fortran77Parser.CONTINUE) | (1 << Fortran77Parser.STOP) | (1 << Fortran77Parser.PAUSE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Fortran77Parser.WRITE - 32)) | (1 << (Fortran77Parser.READ - 32)) | (1 << (Fortran77Parser.PRINT - 32)) | (1 << (Fortran77Parser.OPEN - 32)) | (1 << (Fortran77Parser.LET - 32)) | (1 << (Fortran77Parser.CALL - 32)) | (1 << (Fortran77Parser.RETURN - 32)) | (1 << (Fortran77Parser.CLOSE - 32)) | (1 << (Fortran77Parser.DOUBLE - 32)) | (1 << (Fortran77Parser.LABEL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Fortran77Parser.INQUIRE - 64)) | (1 << (Fortran77Parser.BACKSPACE - 64)) | (1 << (Fortran77Parser.ENDFILE - 64)) | (1 << (Fortran77Parser.REWIND - 64)) | (1 << (Fortran77Parser.LPAREN - 64)) | (1 << (Fortran77Parser.MINUS - 64)) | (1 << (Fortran77Parser.PLUS - 64)) | (1 << (Fortran77Parser.LNOT - 64)) | (1 << (Fortran77Parser.TRUE - 64)) | (1 << (Fortran77Parser.FALSE - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Fortran77Parser.HOLLERITH - 97)) | (1 << (Fortran77Parser.COMPLEX - 97)) | (1 << (Fortran77Parser.INTEGER - 97)) | (1 << (Fortran77Parser.LOGICAL - 97)) | (1 << (Fortran77Parser.SCON - 97)) | (1 << (Fortran77Parser.RCON - 97)) | (1 << (Fortran77Parser.ICON - 97)) | (1 << (Fortran77Parser.NAME - 97)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseIfStatement() {
	    let localctx = new ElseIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Fortran77Parser.RULE_elseIfStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ELSEIF:
	            this.state = 973;
	            this.match(Fortran77Parser.ELSEIF);
	            break;
	        case Fortran77Parser.ELSE:
	            this.state = 974;
	            this.match(Fortran77Parser.ELSE);
	            this.state = 975;
	            this.match(Fortran77Parser.IF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 978;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 979;
	        this.logicalExpression();
	        this.state = 980;
	        this.match(Fortran77Parser.RPAREN);
	        this.state = 981;
	        this.match(Fortran77Parser.THEN);
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 982;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 986; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 985;
	            this.wholeStatement();
	            this.state = 988; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Fortran77Parser.ENTRY) | (1 << Fortran77Parser.DIMENSION) | (1 << Fortran77Parser.REAL) | (1 << Fortran77Parser.EQUIVALENCE) | (1 << Fortran77Parser.COMMON) | (1 << Fortran77Parser.POINTER) | (1 << Fortran77Parser.IMPLICIT) | (1 << Fortran77Parser.CHARACTER) | (1 << Fortran77Parser.PARAMETER) | (1 << Fortran77Parser.EXTERNAL) | (1 << Fortran77Parser.INTRINSIC) | (1 << Fortran77Parser.SAVE) | (1 << Fortran77Parser.DATA) | (1 << Fortran77Parser.GO) | (1 << Fortran77Parser.GOTO) | (1 << Fortran77Parser.IF) | (1 << Fortran77Parser.DO) | (1 << Fortran77Parser.CONTINUE) | (1 << Fortran77Parser.STOP) | (1 << Fortran77Parser.PAUSE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Fortran77Parser.WRITE - 32)) | (1 << (Fortran77Parser.READ - 32)) | (1 << (Fortran77Parser.PRINT - 32)) | (1 << (Fortran77Parser.OPEN - 32)) | (1 << (Fortran77Parser.LET - 32)) | (1 << (Fortran77Parser.CALL - 32)) | (1 << (Fortran77Parser.RETURN - 32)) | (1 << (Fortran77Parser.CLOSE - 32)) | (1 << (Fortran77Parser.DOUBLE - 32)) | (1 << (Fortran77Parser.LABEL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Fortran77Parser.INQUIRE - 64)) | (1 << (Fortran77Parser.BACKSPACE - 64)) | (1 << (Fortran77Parser.ENDFILE - 64)) | (1 << (Fortran77Parser.REWIND - 64)) | (1 << (Fortran77Parser.LPAREN - 64)) | (1 << (Fortran77Parser.MINUS - 64)) | (1 << (Fortran77Parser.PLUS - 64)) | (1 << (Fortran77Parser.LNOT - 64)) | (1 << (Fortran77Parser.TRUE - 64)) | (1 << (Fortran77Parser.FALSE - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Fortran77Parser.HOLLERITH - 97)) | (1 << (Fortran77Parser.COMPLEX - 97)) | (1 << (Fortran77Parser.INTEGER - 97)) | (1 << (Fortran77Parser.LOGICAL - 97)) | (1 << (Fortran77Parser.SCON - 97)) | (1 << (Fortran77Parser.RCON - 97)) | (1 << (Fortran77Parser.ICON - 97)) | (1 << (Fortran77Parser.NAME - 97)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseStatement() {
	    let localctx = new ElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Fortran77Parser.RULE_elseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(Fortran77Parser.ELSE);
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 991;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMENT) {
	            this.state = 994;
	            this.commentStatement();
	            this.state = 999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1007; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1000;
	            this.wholeStatement();
	            this.state = 1004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMENT) {
	                this.state = 1001;
	                this.commentStatement();
	                this.state = 1006;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1009; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Fortran77Parser.ENTRY) | (1 << Fortran77Parser.DIMENSION) | (1 << Fortran77Parser.REAL) | (1 << Fortran77Parser.EQUIVALENCE) | (1 << Fortran77Parser.COMMON) | (1 << Fortran77Parser.POINTER) | (1 << Fortran77Parser.IMPLICIT) | (1 << Fortran77Parser.CHARACTER) | (1 << Fortran77Parser.PARAMETER) | (1 << Fortran77Parser.EXTERNAL) | (1 << Fortran77Parser.INTRINSIC) | (1 << Fortran77Parser.SAVE) | (1 << Fortran77Parser.DATA) | (1 << Fortran77Parser.GO) | (1 << Fortran77Parser.GOTO) | (1 << Fortran77Parser.IF) | (1 << Fortran77Parser.DO) | (1 << Fortran77Parser.CONTINUE) | (1 << Fortran77Parser.STOP) | (1 << Fortran77Parser.PAUSE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Fortran77Parser.WRITE - 32)) | (1 << (Fortran77Parser.READ - 32)) | (1 << (Fortran77Parser.PRINT - 32)) | (1 << (Fortran77Parser.OPEN - 32)) | (1 << (Fortran77Parser.LET - 32)) | (1 << (Fortran77Parser.CALL - 32)) | (1 << (Fortran77Parser.RETURN - 32)) | (1 << (Fortran77Parser.CLOSE - 32)) | (1 << (Fortran77Parser.DOUBLE - 32)) | (1 << (Fortran77Parser.LABEL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Fortran77Parser.INQUIRE - 64)) | (1 << (Fortran77Parser.BACKSPACE - 64)) | (1 << (Fortran77Parser.ENDFILE - 64)) | (1 << (Fortran77Parser.REWIND - 64)) | (1 << (Fortran77Parser.LPAREN - 64)) | (1 << (Fortran77Parser.MINUS - 64)) | (1 << (Fortran77Parser.PLUS - 64)) | (1 << (Fortran77Parser.LNOT - 64)) | (1 << (Fortran77Parser.TRUE - 64)) | (1 << (Fortran77Parser.FALSE - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Fortran77Parser.HOLLERITH - 97)) | (1 << (Fortran77Parser.COMPLEX - 97)) | (1 << (Fortran77Parser.INTEGER - 97)) | (1 << (Fortran77Parser.LOGICAL - 97)) | (1 << (Fortran77Parser.SCON - 97)) | (1 << (Fortran77Parser.RCON - 97)) | (1 << (Fortran77Parser.ICON - 97)) | (1 << (Fortran77Parser.NAME - 97)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endIfStatement() {
	    let localctx = new EndIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Fortran77Parser.RULE_endIfStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ENDIF:
	            this.state = 1011;
	            this.match(Fortran77Parser.ENDIF);
	            break;
	        case Fortran77Parser.END:
	            this.state = 1012;
	            this.match(Fortran77Parser.END);
	            this.state = 1013;
	            this.match(Fortran77Parser.IF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Fortran77Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        this.match(Fortran77Parser.DO);
	        this.state = 1019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ICON:
	            this.state = 1017;
	            this.doWithLabel();
	            break;
	        case Fortran77Parser.NAME:
	            this.state = 1018;
	            this.doWithEndDo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doVarArgs() {
	    let localctx = new DoVarArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Fortran77Parser.RULE_doVarArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.variableName();
	        this.state = 1022;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 1023;
	        this.intRealDpExpr();
	        this.state = 1024;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 1025;
	        this.intRealDpExpr();
	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 1026;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1027;
	            this.intRealDpExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doWithLabel() {
	    let localctx = new DoWithLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Fortran77Parser.RULE_doWithLabel);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1030;
	        this.lblRef();
	        this.state = 1032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 1031;
	            this.match(Fortran77Parser.COMMA);
	        }

	        this.state = 1034;
	        this.doVarArgs();
	        this.state = 1036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 1035;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 1038;
	        this.doBody();
	        this.state = 1040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 1039;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 1042;
	        this.continueStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doBody() {
	    let localctx = new DoBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Fortran77Parser.RULE_doBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1044;
	        		this.wholeStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1047; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,90, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doWithEndDo() {
	    let localctx = new DoWithEndDoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Fortran77Parser.RULE_doWithEndDo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.doVarArgs();
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 1050;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 1053;
	        this.doBody();
	        this.state = 1055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.EOL) {
	            this.state = 1054;
	            this.match(Fortran77Parser.EOL);
	        }

	        this.state = 1057;
	        this.enddoStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enddoStatement() {
	    let localctx = new EnddoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Fortran77Parser.RULE_enddoStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ENDDO:
	            this.state = 1059;
	            this.match(Fortran77Parser.ENDDO);
	            break;
	        case Fortran77Parser.END:
	            this.state = 1060;
	            this.match(Fortran77Parser.END);
	            this.state = 1061;
	            this.match(Fortran77Parser.DO);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Fortran77Parser.RULE_continueStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.ICON) {
	            this.state = 1064;
	            this.lblRef();
	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1070;
	        this.match(Fortran77Parser.CONTINUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopStatement() {
	    let localctx = new StopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Fortran77Parser.RULE_stopStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1072;
	        this.match(Fortran77Parser.STOP);
	        this.state = 1074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.ICON) {
	            this.state = 1073;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.ICON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pauseStatement() {
	    let localctx = new PauseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Fortran77Parser.RULE_pauseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        this.match(Fortran77Parser.PAUSE);
	        this.state = 1077;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.ICON)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeStatement() {
	    let localctx = new WriteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Fortran77Parser.RULE_writeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1079;
	        this.match(Fortran77Parser.WRITE);
	        this.state = 1080;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1081;
	        this.controlInfoList();
	        this.state = 1082;
	        this.match(Fortran77Parser.RPAREN);
	        this.state = 1091;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Fortran77Parser.COMMA - 69)) | (1 << (Fortran77Parser.LPAREN - 69)) | (1 << (Fortran77Parser.MINUS - 69)) | (1 << (Fortran77Parser.PLUS - 69)) | (1 << (Fortran77Parser.LNOT - 69)) | (1 << (Fortran77Parser.TRUE - 69)) | (1 << (Fortran77Parser.FALSE - 69)) | (1 << (Fortran77Parser.HOLLERITH - 69)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	            this.state = 1087; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1084;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Fortran77Parser.COMMA) {
	                    this.state = 1083;
	                    this.match(Fortran77Parser.COMMA);
	                }

	                this.state = 1086;
	                this.ioList();
	                this.state = 1089; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Fortran77Parser.REAL || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Fortran77Parser.COMMA - 69)) | (1 << (Fortran77Parser.LPAREN - 69)) | (1 << (Fortran77Parser.MINUS - 69)) | (1 << (Fortran77Parser.PLUS - 69)) | (1 << (Fortran77Parser.LNOT - 69)) | (1 << (Fortran77Parser.TRUE - 69)) | (1 << (Fortran77Parser.FALSE - 69)) | (1 << (Fortran77Parser.HOLLERITH - 69)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0));
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readStatement() {
	    let localctx = new ReadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Fortran77Parser.RULE_readStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.match(Fortran77Parser.READ);

	        this.state = 1094;
	        this.formatIdentifier();
	        this.state = 1101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 1097; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1095;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 1096;
	                this.ioList();
	                this.state = 1099; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Fortran77Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printStatement() {
	    let localctx = new PrintStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Fortran77Parser.RULE_printStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        this.match(Fortran77Parser.PRINT);

	        this.state = 1104;
	        this.formatIdentifier();
	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 1107; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1105;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 1106;
	                this.ioList();
	                this.state = 1109; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Fortran77Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStatement() {
	    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Fortran77Parser.RULE_assignmentStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1113;
	        this.varRef();
	        this.state = 1114;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 1115;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlInfoList() {
	    let localctx = new ControlInfoListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Fortran77Parser.RULE_controlInfoList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.controlInfoListItem();
	        this.state = 1122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1118;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1119;
	            this.controlInfoListItem();
	            this.state = 1124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlErrSpec() {
	    let localctx = new ControlErrSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Fortran77Parser.RULE_controlErrSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1125;
	        this.controlErr();
	        this.state = 1126;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 1129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ICON:
	            this.state = 1127;
	            this.lblRef();
	            break;
	        case Fortran77Parser.NAME:
	            this.state = 1128;
	            this.match(Fortran77Parser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlInfoListItem() {
	    let localctx = new ControlInfoListItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Fortran77Parser.RULE_controlInfoListItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 1154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this.unitIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.SCON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1133;
	            this.controlFmt();
	            this.state = 1134;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1135;
	            this.formatIdentifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1137;
	            this.controlUnit();
	            this.state = 1138;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1139;
	            this.unitIdentifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1141;
	            this.controlRec();
	            this.state = 1142;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1143;
	            this.integerExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1145;
	            this.controlEnd();
	            this.state = 1146;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1147;
	            this.lblRef();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1149;
	            this.controlErrSpec();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1150;
	            this.controlIostat();
	            this.state = 1151;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1152;
	            this.varRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioList() {
	    let localctx = new IoListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Fortran77Parser.RULE_ioList);
	    try {
	        this.state = 1172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1156;
	            this.ioListItem();
	            this.state = 1157;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1158;
	            this.match(Fortran77Parser.NAME);
	            this.state = 1159;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1161;
	            this.ioListItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1163;
	            this.ioListItem();
	            this.state = 1164;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1165;
	            this.ioListItem();
	            this.state = 1167;
	            this.ioListItem();
	            this.state = 1168;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1169;
	            this.ioList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1171;
	            this.ioListItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioListItem() {
	    let localctx = new IoListItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Fortran77Parser.RULE_ioListItem);
	    try {
	        this.state = 1183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1174;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1175;
	            this.ioList();
	            this.state = 1176;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1177;
	            this.match(Fortran77Parser.NAME);
	            this.state = 1178;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1180;
	            this.ioImpliedDoList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1182;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioImpliedDoList() {
	    let localctx = new IoImpliedDoListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Fortran77Parser.RULE_ioImpliedDoList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1186;
	        this.ioList();
	        this.state = 1187;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 1188;
	        this.match(Fortran77Parser.NAME);
	        this.state = 1189;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 1190;
	        this.intRealDpExpr();
	        this.state = 1191;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 1192;
	        this.intRealDpExpr();
	        this.state = 1195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COMMA) {
	            this.state = 1193;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1194;
	            this.intRealDpExpr();
	        }

	        this.state = 1197;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openStatement() {
	    let localctx = new OpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Fortran77Parser.RULE_openStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1199;
	        this.match(Fortran77Parser.OPEN);
	        this.state = 1200;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1201;
	        this.openControl();
	        this.state = 1206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1202;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1203;
	            this.openControl();
	            this.state = 1208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1209;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openControl() {
	    let localctx = new OpenControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Fortran77Parser.RULE_openControl);
	    try {
	        this.state = 1248;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1211;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.UNIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1212;
	            this.controlUnit();
	            this.state = 1213;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1214;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.ERR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1216;
	            this.controlErrSpec();
	            break;
	        case Fortran77Parser.FILE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1217;
	            this.controlFile();
	            this.state = 1218;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1219;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.STATUS:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1221;
	            this.controlStatus();
	            this.state = 1222;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1223;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.ACCESS:
	        case Fortran77Parser.POSITION:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1227;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Fortran77Parser.ACCESS:
	                this.state = 1225;
	                this.controlAccess();
	                break;
	            case Fortran77Parser.POSITION:
	                this.state = 1226;
	                this.controlPosition();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1229;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1230;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.FORM:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1232;
	            this.controlForm();
	            this.state = 1233;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1234;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.RECL:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1236;
	            this.controlRecl();
	            this.state = 1237;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1238;
	            this.integerExpr();
	            break;
	        case Fortran77Parser.BLANK:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1240;
	            this.controlBlank();
	            this.state = 1241;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1242;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.IOSTART:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1244;
	            this.controlIostat();
	            this.state = 1245;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1246;
	            this.varRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlFmt() {
	    let localctx = new ControlFmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Fortran77Parser.RULE_controlFmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1250;
	        this.match(Fortran77Parser.FMT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlUnit() {
	    let localctx = new ControlUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Fortran77Parser.RULE_controlUnit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.match(Fortran77Parser.UNIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlRec() {
	    let localctx = new ControlRecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Fortran77Parser.RULE_controlRec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlEnd() {
	    let localctx = new ControlEndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Fortran77Parser.RULE_controlEnd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.match(Fortran77Parser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlErr() {
	    let localctx = new ControlErrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Fortran77Parser.RULE_controlErr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.match(Fortran77Parser.ERR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlIostat() {
	    let localctx = new ControlIostatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Fortran77Parser.RULE_controlIostat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.match(Fortran77Parser.IOSTART);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlFile() {
	    let localctx = new ControlFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Fortran77Parser.RULE_controlFile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this.match(Fortran77Parser.FILE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlStatus() {
	    let localctx = new ControlStatusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Fortran77Parser.RULE_controlStatus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1264;
	        this.match(Fortran77Parser.STATUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlAccess() {
	    let localctx = new ControlAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Fortran77Parser.RULE_controlAccess);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1266;
	        this.match(Fortran77Parser.ACCESS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlPosition() {
	    let localctx = new ControlPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Fortran77Parser.RULE_controlPosition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.match(Fortran77Parser.POSITION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlForm() {
	    let localctx = new ControlFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Fortran77Parser.RULE_controlForm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(Fortran77Parser.FORM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlRecl() {
	    let localctx = new ControlReclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Fortran77Parser.RULE_controlRecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1272;
	        this.match(Fortran77Parser.RECL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlBlank() {
	    let localctx = new ControlBlankContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Fortran77Parser.RULE_controlBlank);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.match(Fortran77Parser.BLANK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlExist() {
	    let localctx = new ControlExistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Fortran77Parser.RULE_controlExist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this.match(Fortran77Parser.EXIST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlOpened() {
	    let localctx = new ControlOpenedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Fortran77Parser.RULE_controlOpened);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this.match(Fortran77Parser.OPENED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlNumber() {
	    let localctx = new ControlNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Fortran77Parser.RULE_controlNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this.match(Fortran77Parser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlNamed() {
	    let localctx = new ControlNamedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Fortran77Parser.RULE_controlNamed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1282;
	        this.match(Fortran77Parser.NAMED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlName() {
	    let localctx = new ControlNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Fortran77Parser.RULE_controlName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1284;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlSequential() {
	    let localctx = new ControlSequentialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Fortran77Parser.RULE_controlSequential);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.match(Fortran77Parser.SEQUENTIAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlDirect() {
	    let localctx = new ControlDirectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Fortran77Parser.RULE_controlDirect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlFormatted() {
	    let localctx = new ControlFormattedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Fortran77Parser.RULE_controlFormatted);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1290;
	        this.match(Fortran77Parser.FORMATTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlUnformatted() {
	    let localctx = new ControlUnformattedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Fortran77Parser.RULE_controlUnformatted);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.match(Fortran77Parser.UNFORMATTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlNextrec() {
	    let localctx = new ControlNextrecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Fortran77Parser.RULE_controlNextrec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.match(Fortran77Parser.NEXTREC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeStatement() {
	    let localctx = new CloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Fortran77Parser.RULE_closeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1296;
	        this.match(Fortran77Parser.CLOSE);
	        this.state = 1297;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1298;
	        this.closeControl();
	        this.state = 1303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1299;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1300;
	            this.closeControl();
	            this.state = 1305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1306;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeControl() {
	    let localctx = new CloseControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Fortran77Parser.RULE_closeControl);
	    try {
	        this.state = 1322;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1308;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.UNIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1309;
	            this.controlUnit();
	            this.state = 1310;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1311;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.ERR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.controlErrSpec();
	            break;
	        case Fortran77Parser.STATUS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1314;
	            this.controlStatus();
	            this.state = 1315;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1316;
	            this.characterExpression();
	            break;
	        case Fortran77Parser.IOSTART:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1318;
	            this.controlIostat();
	            this.state = 1319;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1320;
	            this.varRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inquireStatement() {
	    let localctx = new InquireStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Fortran77Parser.RULE_inquireStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.match(Fortran77Parser.INQUIRE);
	        this.state = 1325;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1326;
	        this.inquireControl();
	        this.state = 1331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1327;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1328;
	            this.inquireControl();
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1334;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inquireControl() {
	    let localctx = new InquireControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Fortran77Parser.RULE_inquireControl);
	    try {
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1336;
	            this.controlUnit();
	            this.state = 1337;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1338;
	            this.unitIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1340;
	            this.controlFile();
	            this.state = 1341;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1342;
	            this.characterExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1344;
	            this.controlErrSpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1360;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1345;
	                this.controlIostat();
	                break;

	            case 2:
	                this.state = 1346;
	                this.controlExist();
	                break;

	            case 3:
	                this.state = 1347;
	                this.controlOpened();
	                break;

	            case 4:
	                this.state = 1348;
	                this.controlNumber();
	                break;

	            case 5:
	                this.state = 1349;
	                this.controlNamed();
	                break;

	            case 6:
	                this.state = 1350;
	                this.controlName();
	                break;

	            case 7:
	                this.state = 1351;
	                this.controlAccess();
	                break;

	            case 8:
	                this.state = 1352;
	                this.controlSequential();
	                break;

	            case 9:
	                this.state = 1353;
	                this.controlDirect();
	                break;

	            case 10:
	                this.state = 1354;
	                this.controlForm();
	                break;

	            case 11:
	                this.state = 1355;
	                this.controlFormatted();
	                break;

	            case 12:
	                this.state = 1356;
	                this.controlUnformatted();
	                break;

	            case 13:
	                this.state = 1357;
	                this.controlRecl();
	                break;

	            case 14:
	                this.state = 1358;
	                this.controlNextrec();
	                break;

	            case 15:
	                this.state = 1359;
	                this.controlBlank();
	                break;

	            }
	            this.state = 1362;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1363;
	            this.varRef();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1365;
	            this.unitIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backspaceStatement() {
	    let localctx = new BackspaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Fortran77Parser.RULE_backspaceStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1368;
	        this.match(Fortran77Parser.BACKSPACE);
	        this.state = 1369;
	        this.berFinish();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endfileStatement() {
	    let localctx = new EndfileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Fortran77Parser.RULE_endfileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this.match(Fortran77Parser.ENDFILE);
	        this.state = 1372;
	        this.berFinish();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewindStatement() {
	    let localctx = new RewindStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Fortran77Parser.RULE_rewindStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.match(Fortran77Parser.REWIND);
	        this.state = 1375;
	        this.berFinish();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	berFinish() {
	    let localctx = new BerFinishContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Fortran77Parser.RULE_berFinish);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1377;
	            this.unitIdentifier();

	            this.state = 1378;
	            this.unitIdentifier();
	            break;

	        case 2:
	            this.state = 1380;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1381;
	            this.berFinishItem();
	            this.state = 1386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMA) {
	                this.state = 1382;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 1383;
	                this.berFinishItem();
	                this.state = 1388;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1389;
	            this.match(Fortran77Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	berFinishItem() {
	    let localctx = new BerFinishItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Fortran77Parser.RULE_berFinishItem);
	    try {
	        this.state = 1403;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1393;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.UNIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1394;
	            this.controlUnit();
	            this.state = 1395;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1396;
	            this.unitIdentifier();
	            break;
	        case Fortran77Parser.ERR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1398;
	            this.controlErrSpec();
	            break;
	        case Fortran77Parser.IOSTART:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1399;
	            this.controlIostat();
	            this.state = 1400;
	            this.match(Fortran77Parser.ASSIGN);
	            this.state = 1401;
	            this.varRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitIdentifier() {
	    let localctx = new UnitIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Fortran77Parser.RULE_unitIdentifier);
	    try {
	        this.state = 1407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1405;
	            this.iexpr();
	            break;
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1406;
	            this.match(Fortran77Parser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatIdentifier() {
	    let localctx = new FormatIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Fortran77Parser.RULE_formatIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1412;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1409;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.SCON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1410;
	            this.iexpr();
	            break;
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1411;
	            this.match(Fortran77Parser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatStatement() {
	    let localctx = new FormatStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Fortran77Parser.RULE_formatStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1414;
	        this.match(Fortran77Parser.FORMAT);
	        this.state = 1415;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1416;
	        this.fmtSpec();
	        this.state = 1417;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fmtSpec() {
	    let localctx = new FmtSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Fortran77Parser.RULE_fmtSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1424;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.XCON:
	        case Fortran77Parser.PCON:
	        case Fortran77Parser.FCON:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.state = 1419;
	            this.formatedit();
	            break;
	        case Fortran77Parser.DOLLAR:
	        case Fortran77Parser.COLON:
	        case Fortran77Parser.DIV:
	            this.state = 1420;
	            this.formatsep();
	            this.state = 1422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.XCON - 70)) | (1 << (Fortran77Parser.PCON - 70)) | (1 << (Fortran77Parser.FCON - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	                this.state = 1421;
	                this.formatedit();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Fortran77Parser.DOLLAR - 68)) | (1 << (Fortran77Parser.COMMA - 68)) | (1 << (Fortran77Parser.COLON - 68)) | (1 << (Fortran77Parser.DIV - 68)))) !== 0)) {
	            this.state = 1438;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Fortran77Parser.DOLLAR:
	            case Fortran77Parser.COLON:
	            case Fortran77Parser.DIV:
	                this.state = 1426;
	                this.formatsep();
	                this.state = 1428;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.XCON - 70)) | (1 << (Fortran77Parser.PCON - 70)) | (1 << (Fortran77Parser.FCON - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	                    this.state = 1427;
	                    this.formatedit();
	                }

	                break;
	            case Fortran77Parser.COMMA:
	                this.state = 1430;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 1436;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Fortran77Parser.LPAREN:
	                case Fortran77Parser.MINUS:
	                case Fortran77Parser.PLUS:
	                case Fortran77Parser.XCON:
	                case Fortran77Parser.PCON:
	                case Fortran77Parser.FCON:
	                case Fortran77Parser.HOLLERITH:
	                case Fortran77Parser.SCON:
	                case Fortran77Parser.ICON:
	                case Fortran77Parser.NAME:
	                    this.state = 1431;
	                    this.formatedit();
	                    break;
	                case Fortran77Parser.DOLLAR:
	                case Fortran77Parser.COLON:
	                case Fortran77Parser.DIV:
	                    this.state = 1432;
	                    this.formatsep();
	                    this.state = 1434;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.XCON - 70)) | (1 << (Fortran77Parser.PCON - 70)) | (1 << (Fortran77Parser.FCON - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	                        this.state = 1433;
	                        this.formatedit();
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatsep() {
	    let localctx = new FormatsepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Fortran77Parser.RULE_formatsep);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Fortran77Parser.DOLLAR - 68)) | (1 << (Fortran77Parser.COLON - 68)) | (1 << (Fortran77Parser.DIV - 68)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatedit() {
	    let localctx = new FormateditContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Fortran77Parser.RULE_formatedit);
	    var _la = 0; // Token type
	    try {
	        this.state = 1459;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.XCON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1445;
	            this.match(Fortran77Parser.XCON);
	            break;
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.FCON:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1446;
	            this.editElement();
	            break;
	        case Fortran77Parser.ICON:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1447;
	            this.match(Fortran77Parser.ICON);
	            this.state = 1448;
	            this.editElement();
	            break;
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.PCON:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	                this.state = 1449;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1452;
	            this.match(Fortran77Parser.PCON);
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.FCON - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	                this.state = 1454;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Fortran77Parser.ICON) {
	                    this.state = 1453;
	                    this.match(Fortran77Parser.ICON);
	                }

	                this.state = 1456;
	                this.editElement();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	editElement() {
	    let localctx = new EditElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Fortran77Parser.RULE_editElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1466;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.FCON:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1461;
	            _la = this._input.LA(1);
	            if(!(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (Fortran77Parser.FCON - 95)) | (1 << (Fortran77Parser.HOLLERITH - 95)) | (1 << (Fortran77Parser.SCON - 95)) | (1 << (Fortran77Parser.NAME - 95)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Fortran77Parser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1462;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1463;
	            this.fmtSpec();
	            this.state = 1464;
	            this.match(Fortran77Parser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementFunctionStatement() {
	    let localctx = new StatementFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Fortran77Parser.RULE_statementFunctionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.match(Fortran77Parser.LET);
	        this.state = 1469;
	        this.sfArgs();
	        this.state = 1470;
	        this.match(Fortran77Parser.ASSIGN);
	        this.state = 1471;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sfArgs() {
	    let localctx = new SfArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Fortran77Parser.RULE_sfArgs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1473;
	        this.match(Fortran77Parser.NAME);
	        this.state = 1474;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1475;
	        this.namelist();
	        this.state = 1476;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Fortran77Parser.RULE_callStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this.match(Fortran77Parser.CALL);
	        this.state = 1479;
	        this.subroutineCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subroutineCall() {
	    let localctx = new SubroutineCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Fortran77Parser.RULE_subroutineCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1481;
	        this.match(Fortran77Parser.NAME);
	        this.state = 1487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.LPAREN) {
	            this.state = 1482;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.REAL || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.LNOT - 70)) | (1 << (Fortran77Parser.TRUE - 70)) | (1 << (Fortran77Parser.FALSE - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)) | (1 << (Fortran77Parser.STAR - 112)))) !== 0)) {
	                this.state = 1483;
	                this.callArgumentList();
	            }

	            this.state = 1486;
	            this.match(Fortran77Parser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArgumentList() {
	    let localctx = new CallArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Fortran77Parser.RULE_callArgumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.callArgument();
	        this.state = 1494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1490;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1491;
	            this.callArgument();
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArgument() {
	    let localctx = new CallArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Fortran77Parser.RULE_callArgument);
	    try {
	        this.state = 1500;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.LNOT:
	        case Fortran77Parser.TRUE:
	        case Fortran77Parser.FALSE:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1497;
	            this.expression();
	            break;
	        case Fortran77Parser.STAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1498;
	            this.match(Fortran77Parser.STAR);
	            this.state = 1499;
	            this.lblRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Fortran77Parser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502;
	        this.match(Fortran77Parser.RETURN);
	        this.state = 1504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)))) !== 0) || _la===Fortran77Parser.ICON || _la===Fortran77Parser.NAME) {
	            this.state = 1503;
	            this.integerExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Fortran77Parser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1506;
	        this.ncExpr();
	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.COLON) {
	            this.state = 1507;
	            this.match(Fortran77Parser.COLON);
	            this.state = 1508;
	            this.ncExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ncExpr() {
	    let localctx = new NcExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Fortran77Parser.RULE_ncExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.lexpr0();
	        this.state = 1517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.DIV) {
	            this.state = 1512;
	            this.concatOp();
	            this.state = 1513;
	            this.lexpr0();
	            this.state = 1519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lexpr0() {
	    let localctx = new Lexpr0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Fortran77Parser.RULE_lexpr0);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this.lexpr1();
	        this.state = 1525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.EQV || _la===Fortran77Parser.NEQV) {
	            this.state = 1521;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.EQV || _la===Fortran77Parser.NEQV)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1522;
	            this.lexpr1();
	            this.state = 1527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lexpr1() {
	    let localctx = new Lexpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Fortran77Parser.RULE_lexpr1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1528;
	        this.lexpr2();
	        this.state = 1533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.LOR) {
	            this.state = 1529;
	            this.match(Fortran77Parser.LOR);
	            this.state = 1530;
	            this.lexpr2();
	            this.state = 1535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lexpr2() {
	    let localctx = new Lexpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Fortran77Parser.RULE_lexpr2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1536;
	        this.lexpr3();
	        this.state = 1541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.LAND) {
	            this.state = 1537;
	            this.match(Fortran77Parser.LAND);
	            this.state = 1538;
	            this.lexpr3();
	            this.state = 1543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lexpr3() {
	    let localctx = new Lexpr3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Fortran77Parser.RULE_lexpr3);
	    try {
	        this.state = 1547;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LNOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1544;
	            this.match(Fortran77Parser.LNOT);
	            this.state = 1545;
	            this.lexpr3();
	            break;
	        case Fortran77Parser.REAL:
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.TRUE:
	        case Fortran77Parser.FALSE:
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1546;
	            this.lexpr4();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lexpr4() {
	    let localctx = new Lexpr4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Fortran77Parser.RULE_lexpr4);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1549;
	        this.aexpr0();
	        this.state = 1552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (Fortran77Parser.LT - 85)) | (1 << (Fortran77Parser.LE - 85)) | (1 << (Fortran77Parser.GT - 85)) | (1 << (Fortran77Parser.GE - 85)) | (1 << (Fortran77Parser.NE - 85)) | (1 << (Fortran77Parser.EQ - 85)))) !== 0)) {
	            this.state = 1550;
	            _la = this._input.LA(1);
	            if(!(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (Fortran77Parser.LT - 85)) | (1 << (Fortran77Parser.LE - 85)) | (1 << (Fortran77Parser.GT - 85)) | (1 << (Fortran77Parser.GE - 85)) | (1 << (Fortran77Parser.NE - 85)) | (1 << (Fortran77Parser.EQ - 85)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1551;
	            this.aexpr0();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr0() {
	    let localctx = new Aexpr0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Fortran77Parser.RULE_aexpr0);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this.aexpr1();
	        this.state = 1559;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1555;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1556;
	                this.aexpr1(); 
	            }
	            this.state = 1561;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr1() {
	    let localctx = new Aexpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Fortran77Parser.RULE_aexpr1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1562;
	        this.aexpr2();
	        this.state = 1567;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1563;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.DIV || _la===Fortran77Parser.STAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1564;
	                this.aexpr2(); 
	            }
	            this.state = 1569;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr2() {
	    let localctx = new Aexpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Fortran77Parser.RULE_aexpr2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	            this.state = 1570;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1576;
	        this.aexpr3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr3() {
	    let localctx = new Aexpr3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Fortran77Parser.RULE_aexpr3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.aexpr4();
	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.POWER) {
	            this.state = 1579;
	            this.match(Fortran77Parser.POWER);
	            this.state = 1580;
	            this.aexpr4();
	            this.state = 1585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr4() {
	    let localctx = new Aexpr4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Fortran77Parser.RULE_aexpr4);
	    var _la = 0; // Token type
	    try {
	        this.state = 1594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1586;
	            this.unsignedArithmeticConstant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1587;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.SCON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1588;
	            this.logicalConstant();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1589;
	            this.varRef();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1590;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1591;
	            this.expression();
	            this.state = 1592;
	            this.match(Fortran77Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexpr() {
	    let localctx = new IexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Fortran77Parser.RULE_iexpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1596;
	        this.iexpr1();
	        this.state = 1601;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1597;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1598;
	                this.iexpr1(); 
	            }
	            this.state = 1603;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexprCode() {
	    let localctx = new IexprCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Fortran77Parser.RULE_iexprCode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1604;
	        this.iexpr1();
	        this.state = 1609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	            this.state = 1605;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1606;
	            this.iexpr1();
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexpr1() {
	    let localctx = new Iexpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Fortran77Parser.RULE_iexpr1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        this.iexpr2();
	        this.state = 1617;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,153,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1613;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.DIV || _la===Fortran77Parser.STAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1614;
	                this.iexpr2(); 
	            }
	            this.state = 1619;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,153,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexpr2() {
	    let localctx = new Iexpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Fortran77Parser.RULE_iexpr2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	            this.state = 1620;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1626;
	        this.iexpr3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexpr3() {
	    let localctx = new Iexpr3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Fortran77Parser.RULE_iexpr3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1628;
	        this.iexpr4();
	        this.state = 1631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.POWER) {
	            this.state = 1629;
	            this.match(Fortran77Parser.POWER);
	            this.state = 1630;
	            this.iexpr3();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iexpr4() {
	    let localctx = new Iexpr4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Fortran77Parser.RULE_iexpr4);
	    try {
	        this.state = 1639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.ICON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1633;
	            this.match(Fortran77Parser.ICON);
	            break;
	        case Fortran77Parser.NAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1634;
	            this.varRefCode();
	            break;
	        case Fortran77Parser.LPAREN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1635;
	            this.match(Fortran77Parser.LPAREN);
	            this.state = 1636;
	            this.iexprCode();
	            this.state = 1637;
	            this.match(Fortran77Parser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpr() {
	    let localctx = new ConstantExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Fortran77Parser.RULE_constantExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1641;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticExpression() {
	    let localctx = new ArithmeticExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Fortran77Parser.RULE_arithmeticExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1643;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerExpr() {
	    let localctx = new IntegerExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Fortran77Parser.RULE_integerExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1645;
	        this.iexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intRealDpExpr() {
	    let localctx = new IntRealDpExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Fortran77Parser.RULE_intRealDpExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1647;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticConstExpr() {
	    let localctx = new ArithmeticConstExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Fortran77Parser.RULE_arithmeticConstExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1649;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intConstantExpr() {
	    let localctx = new IntConstantExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Fortran77Parser.RULE_intConstantExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterExpression() {
	    let localctx = new CharacterExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Fortran77Parser.RULE_characterExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1653;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concatOp() {
	    let localctx = new ConcatOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Fortran77Parser.RULE_concatOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1655;
	        this.match(Fortran77Parser.DIV);
	        this.state = 1656;
	        this.match(Fortran77Parser.DIV);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalExpression() {
	    let localctx = new LogicalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Fortran77Parser.RULE_logicalExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1658;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalConstExpr() {
	    let localctx = new LogicalConstExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Fortran77Parser.RULE_logicalConstExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElementName() {
	    let localctx = new ArrayElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Fortran77Parser.RULE_arrayElementName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1662;
	        this.match(Fortran77Parser.NAME);
	        this.state = 1663;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1664;
	        this.integerExpr();
	        this.state = 1669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Fortran77Parser.COMMA) {
	            this.state = 1665;
	            this.match(Fortran77Parser.COMMA);
	            this.state = 1666;
	            this.integerExpr();
	            this.state = 1671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1672;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscripts() {
	    let localctx = new SubscriptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Fortran77Parser.RULE_subscripts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.LNOT - 70)) | (1 << (Fortran77Parser.TRUE - 70)) | (1 << (Fortran77Parser.FALSE - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	            this.state = 1675;
	            this.expression();
	            this.state = 1680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Fortran77Parser.COMMA) {
	                this.state = 1676;
	                this.match(Fortran77Parser.COMMA);
	                this.state = 1677;
	                this.expression();
	                this.state = 1682;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1685;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varRef() {
	    let localctx = new VarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Fortran77Parser.RULE_varRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.REAL || _la===Fortran77Parser.NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 1688;
	            this.subscripts();
	            this.state = 1690;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	            if(la_===1) {
	                this.state = 1689;
	                this.substringApp();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varRefCode() {
	    let localctx = new VarRefCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Fortran77Parser.RULE_varRefCode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.match(Fortran77Parser.NAME);
	        this.state = 1699;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 1695;
	            this.subscripts();
	            this.state = 1697;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            if(la_===1) {
	                this.state = 1696;
	                this.substringApp();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringApp() {
	    let localctx = new SubstringAppContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Fortran77Parser.RULE_substringApp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1701;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.LNOT - 70)) | (1 << (Fortran77Parser.TRUE - 70)) | (1 << (Fortran77Parser.FALSE - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	            this.state = 1702;
	            this.ncExpr();
	        }

	        this.state = 1705;
	        this.match(Fortran77Parser.COLON);
	        this.state = 1707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.REAL || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (Fortran77Parser.LPAREN - 70)) | (1 << (Fortran77Parser.MINUS - 70)) | (1 << (Fortran77Parser.PLUS - 70)) | (1 << (Fortran77Parser.LNOT - 70)) | (1 << (Fortran77Parser.TRUE - 70)) | (1 << (Fortran77Parser.FALSE - 70)) | (1 << (Fortran77Parser.HOLLERITH - 70)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (Fortran77Parser.SCON - 112)) | (1 << (Fortran77Parser.RCON - 112)) | (1 << (Fortran77Parser.ICON - 112)) | (1 << (Fortran77Parser.NAME - 112)))) !== 0)) {
	            this.state = 1706;
	            this.ncExpr();
	        }

	        this.state = 1709;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableName() {
	    let localctx = new VariableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Fortran77Parser.RULE_variableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1711;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayName() {
	    let localctx = new ArrayNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Fortran77Parser.RULE_arrayName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1713;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subroutineName() {
	    let localctx = new SubroutineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Fortran77Parser.RULE_subroutineName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Fortran77Parser.RULE_functionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Fortran77Parser.RULE_constant);
	    var _la = 0; // Token type
	    try {
	        this.state = 1725;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.LPAREN:
	        case Fortran77Parser.MINUS:
	        case Fortran77Parser.PLUS:
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	                this.state = 1719;
	                _la = this._input.LA(1);
	                if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1722;
	            this.unsignedArithmeticConstant();
	            break;
	        case Fortran77Parser.HOLLERITH:
	        case Fortran77Parser.SCON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.HOLLERITH || _la===Fortran77Parser.SCON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Fortran77Parser.TRUE:
	        case Fortran77Parser.FALSE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1724;
	            this.logicalConstant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedArithmeticConstant() {
	    let localctx = new UnsignedArithmeticConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Fortran77Parser.RULE_unsignedArithmeticConstant);
	    var _la = 0; // Token type
	    try {
	        this.state = 1729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Fortran77Parser.RCON:
	        case Fortran77Parser.ICON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1727;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.RCON || _la===Fortran77Parser.ICON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Fortran77Parser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1728;
	            this.complexConstant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complexConstant() {
	    let localctx = new ComplexConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Fortran77Parser.RULE_complexConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.match(Fortran77Parser.LPAREN);
	        this.state = 1733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	            this.state = 1732;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1735;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.RCON || _la===Fortran77Parser.ICON)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1736;
	        this.match(Fortran77Parser.COMMA);
	        this.state = 1738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS) {
	            this.state = 1737;
	            _la = this._input.LA(1);
	            if(!(_la===Fortran77Parser.MINUS || _la===Fortran77Parser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1740;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.RCON || _la===Fortran77Parser.ICON)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1741;
	        this.match(Fortran77Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalConstant() {
	    let localctx = new LogicalConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Fortran77Parser.RULE_logicalConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.TRUE || _la===Fortran77Parser.FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Fortran77Parser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        _la = this._input.LA(1);
	        if(!(_la===Fortran77Parser.REAL || _la===Fortran77Parser.NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	to() {
	    let localctx = new ToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Fortran77Parser.RULE_to);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1747;
	        this.match(Fortran77Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Fortran77Parser.EOF = antlr4.Token.EOF;
Fortran77Parser.PROGRAM = 1;
Fortran77Parser.ENTRY = 2;
Fortran77Parser.FUNCTION = 3;
Fortran77Parser.BLOCK = 4;
Fortran77Parser.SUBROUTINE = 5;
Fortran77Parser.END = 6;
Fortran77Parser.DIMENSION = 7;
Fortran77Parser.REAL = 8;
Fortran77Parser.EQUIVALENCE = 9;
Fortran77Parser.COMMON = 10;
Fortran77Parser.POINTER = 11;
Fortran77Parser.IMPLICIT = 12;
Fortran77Parser.NONE = 13;
Fortran77Parser.CHARACTER = 14;
Fortran77Parser.PARAMETER = 15;
Fortran77Parser.EXTERNAL = 16;
Fortran77Parser.INTRINSIC = 17;
Fortran77Parser.SAVE = 18;
Fortran77Parser.DATA = 19;
Fortran77Parser.GO = 20;
Fortran77Parser.GOTO = 21;
Fortran77Parser.IF = 22;
Fortran77Parser.THEN = 23;
Fortran77Parser.ELSE = 24;
Fortran77Parser.ENDIF = 25;
Fortran77Parser.ELSEIF = 26;
Fortran77Parser.DO = 27;
Fortran77Parser.CONTINUE = 28;
Fortran77Parser.STOP = 29;
Fortran77Parser.ENDDO = 30;
Fortran77Parser.PAUSE = 31;
Fortran77Parser.WRITE = 32;
Fortran77Parser.READ = 33;
Fortran77Parser.PRINT = 34;
Fortran77Parser.OPEN = 35;
Fortran77Parser.FMT = 36;
Fortran77Parser.UNIT = 37;
Fortran77Parser.ERR = 38;
Fortran77Parser.IOSTAT = 39;
Fortran77Parser.FORMAT = 40;
Fortran77Parser.LET = 41;
Fortran77Parser.CALL = 42;
Fortran77Parser.RETURN = 43;
Fortran77Parser.CLOSE = 44;
Fortran77Parser.DOUBLE = 45;
Fortran77Parser.IOSTART = 46;
Fortran77Parser.SEQUENTIAL = 47;
Fortran77Parser.LABEL = 48;
Fortran77Parser.FILE = 49;
Fortran77Parser.STATUS = 50;
Fortran77Parser.ACCESS = 51;
Fortran77Parser.POSITION = 52;
Fortran77Parser.FORM = 53;
Fortran77Parser.RECL = 54;
Fortran77Parser.BLANK = 55;
Fortran77Parser.EXIST = 56;
Fortran77Parser.OPENED = 57;
Fortran77Parser.NUMBER = 58;
Fortran77Parser.NAMED = 59;
Fortran77Parser.NAME_ = 60;
Fortran77Parser.FORMATTED = 61;
Fortran77Parser.UNFORMATTED = 62;
Fortran77Parser.NEXTREC = 63;
Fortran77Parser.INQUIRE = 64;
Fortran77Parser.BACKSPACE = 65;
Fortran77Parser.ENDFILE = 66;
Fortran77Parser.REWIND = 67;
Fortran77Parser.DOLLAR = 68;
Fortran77Parser.COMMA = 69;
Fortran77Parser.LPAREN = 70;
Fortran77Parser.RPAREN = 71;
Fortran77Parser.COLON = 72;
Fortran77Parser.ASSIGN = 73;
Fortran77Parser.MINUS = 74;
Fortran77Parser.PLUS = 75;
Fortran77Parser.DIV = 76;
Fortran77Parser.POWER = 77;
Fortran77Parser.LNOT = 78;
Fortran77Parser.LAND = 79;
Fortran77Parser.LOR = 80;
Fortran77Parser.EQV = 81;
Fortran77Parser.NEQV = 82;
Fortran77Parser.XOR = 83;
Fortran77Parser.EOR = 84;
Fortran77Parser.LT = 85;
Fortran77Parser.LE = 86;
Fortran77Parser.GT = 87;
Fortran77Parser.GE = 88;
Fortran77Parser.NE = 89;
Fortran77Parser.EQ = 90;
Fortran77Parser.TRUE = 91;
Fortran77Parser.FALSE = 92;
Fortran77Parser.XCON = 93;
Fortran77Parser.PCON = 94;
Fortran77Parser.FCON = 95;
Fortran77Parser.CCON = 96;
Fortran77Parser.HOLLERITH = 97;
Fortran77Parser.CONCATOP = 98;
Fortran77Parser.CTRLDIRECT = 99;
Fortran77Parser.CTRLREC = 100;
Fortran77Parser.TO = 101;
Fortran77Parser.SUBPROGRAMBLOCK = 102;
Fortran77Parser.DOBLOCK = 103;
Fortran77Parser.AIF = 104;
Fortran77Parser.THENBLOCK = 105;
Fortran77Parser.ELSEBLOCK = 106;
Fortran77Parser.CODEROOT = 107;
Fortran77Parser.COMPLEX = 108;
Fortran77Parser.PRECISION = 109;
Fortran77Parser.INTEGER = 110;
Fortran77Parser.LOGICAL = 111;
Fortran77Parser.SCON = 112;
Fortran77Parser.RCON = 113;
Fortran77Parser.ICON = 114;
Fortran77Parser.NAME = 115;
Fortran77Parser.COMMENT = 116;
Fortran77Parser.STAR = 117;
Fortran77Parser.STRINGLITERAL = 118;
Fortran77Parser.EOL = 119;
Fortran77Parser.LINECONT = 120;
Fortran77Parser.WS = 121;

Fortran77Parser.RULE_commentStatement = 0;
Fortran77Parser.RULE_program = 1;
Fortran77Parser.RULE_executableUnit = 2;
Fortran77Parser.RULE_mainProgram = 3;
Fortran77Parser.RULE_functionSubprogram = 4;
Fortran77Parser.RULE_subroutineSubprogram = 5;
Fortran77Parser.RULE_blockdataSubprogram = 6;
Fortran77Parser.RULE_otherSpecificationStatement = 7;
Fortran77Parser.RULE_executableStatement = 8;
Fortran77Parser.RULE_programStatement = 9;
Fortran77Parser.RULE_entryStatement = 10;
Fortran77Parser.RULE_functionStatement = 11;
Fortran77Parser.RULE_blockdataStatement = 12;
Fortran77Parser.RULE_subroutineStatement = 13;
Fortran77Parser.RULE_namelist = 14;
Fortran77Parser.RULE_statement = 15;
Fortran77Parser.RULE_subprogramBody = 16;
Fortran77Parser.RULE_wholeStatement = 17;
Fortran77Parser.RULE_endStatement = 18;
Fortran77Parser.RULE_dimensionStatement = 19;
Fortran77Parser.RULE_arrayDeclarator = 20;
Fortran77Parser.RULE_arrayDeclarators = 21;
Fortran77Parser.RULE_arrayDeclaratorExtents = 22;
Fortran77Parser.RULE_arrayDeclaratorExtent = 23;
Fortran77Parser.RULE_equivalenceStatement = 24;
Fortran77Parser.RULE_equivEntityGroup = 25;
Fortran77Parser.RULE_equivEntity = 26;
Fortran77Parser.RULE_commonStatement = 27;
Fortran77Parser.RULE_commonName = 28;
Fortran77Parser.RULE_commonItem = 29;
Fortran77Parser.RULE_commonItems = 30;
Fortran77Parser.RULE_commonBlock = 31;
Fortran77Parser.RULE_typeStatement = 32;
Fortran77Parser.RULE_typeStatementNameList = 33;
Fortran77Parser.RULE_typeStatementName = 34;
Fortran77Parser.RULE_typeStatementNameCharList = 35;
Fortran77Parser.RULE_typeStatementNameChar = 36;
Fortran77Parser.RULE_typeStatementLenSpec = 37;
Fortran77Parser.RULE_typename_ = 38;
Fortran77Parser.RULE_type_ = 39;
Fortran77Parser.RULE_typenameLen = 40;
Fortran77Parser.RULE_pointerStatement = 41;
Fortran77Parser.RULE_pointerDecl = 42;
Fortran77Parser.RULE_implicitStatement = 43;
Fortran77Parser.RULE_implicitSpec = 44;
Fortran77Parser.RULE_implicitSpecs = 45;
Fortran77Parser.RULE_implicitNone = 46;
Fortran77Parser.RULE_implicitLetter = 47;
Fortran77Parser.RULE_implicitRange = 48;
Fortran77Parser.RULE_implicitLetters = 49;
Fortran77Parser.RULE_lenSpecification = 50;
Fortran77Parser.RULE_characterWithLen = 51;
Fortran77Parser.RULE_cwlLen = 52;
Fortran77Parser.RULE_parameterStatement = 53;
Fortran77Parser.RULE_paramlist = 54;
Fortran77Parser.RULE_paramassign = 55;
Fortran77Parser.RULE_externalStatement = 56;
Fortran77Parser.RULE_intrinsicStatement = 57;
Fortran77Parser.RULE_saveStatement = 58;
Fortran77Parser.RULE_saveEntity = 59;
Fortran77Parser.RULE_dataStatement = 60;
Fortran77Parser.RULE_dataStatementItem = 61;
Fortran77Parser.RULE_dataStatementMultiple = 62;
Fortran77Parser.RULE_dataStatementEntity = 63;
Fortran77Parser.RULE_dse1 = 64;
Fortran77Parser.RULE_dse2 = 65;
Fortran77Parser.RULE_dataImpliedDo = 66;
Fortran77Parser.RULE_dataImpliedDoRange = 67;
Fortran77Parser.RULE_dataImpliedDoList = 68;
Fortran77Parser.RULE_dataImpliedDoListWhat = 69;
Fortran77Parser.RULE_gotoStatement = 70;
Fortran77Parser.RULE_unconditionalGoto = 71;
Fortran77Parser.RULE_computedGoto = 72;
Fortran77Parser.RULE_lblRef = 73;
Fortran77Parser.RULE_labelList = 74;
Fortran77Parser.RULE_assignedGoto = 75;
Fortran77Parser.RULE_ifStatement = 76;
Fortran77Parser.RULE_arithmeticIfStatement = 77;
Fortran77Parser.RULE_logicalIfStatement = 78;
Fortran77Parser.RULE_blockIfStatement = 79;
Fortran77Parser.RULE_firstIfBlock = 80;
Fortran77Parser.RULE_elseIfStatement = 81;
Fortran77Parser.RULE_elseStatement = 82;
Fortran77Parser.RULE_endIfStatement = 83;
Fortran77Parser.RULE_doStatement = 84;
Fortran77Parser.RULE_doVarArgs = 85;
Fortran77Parser.RULE_doWithLabel = 86;
Fortran77Parser.RULE_doBody = 87;
Fortran77Parser.RULE_doWithEndDo = 88;
Fortran77Parser.RULE_enddoStatement = 89;
Fortran77Parser.RULE_continueStatement = 90;
Fortran77Parser.RULE_stopStatement = 91;
Fortran77Parser.RULE_pauseStatement = 92;
Fortran77Parser.RULE_writeStatement = 93;
Fortran77Parser.RULE_readStatement = 94;
Fortran77Parser.RULE_printStatement = 95;
Fortran77Parser.RULE_assignmentStatement = 96;
Fortran77Parser.RULE_controlInfoList = 97;
Fortran77Parser.RULE_controlErrSpec = 98;
Fortran77Parser.RULE_controlInfoListItem = 99;
Fortran77Parser.RULE_ioList = 100;
Fortran77Parser.RULE_ioListItem = 101;
Fortran77Parser.RULE_ioImpliedDoList = 102;
Fortran77Parser.RULE_openStatement = 103;
Fortran77Parser.RULE_openControl = 104;
Fortran77Parser.RULE_controlFmt = 105;
Fortran77Parser.RULE_controlUnit = 106;
Fortran77Parser.RULE_controlRec = 107;
Fortran77Parser.RULE_controlEnd = 108;
Fortran77Parser.RULE_controlErr = 109;
Fortran77Parser.RULE_controlIostat = 110;
Fortran77Parser.RULE_controlFile = 111;
Fortran77Parser.RULE_controlStatus = 112;
Fortran77Parser.RULE_controlAccess = 113;
Fortran77Parser.RULE_controlPosition = 114;
Fortran77Parser.RULE_controlForm = 115;
Fortran77Parser.RULE_controlRecl = 116;
Fortran77Parser.RULE_controlBlank = 117;
Fortran77Parser.RULE_controlExist = 118;
Fortran77Parser.RULE_controlOpened = 119;
Fortran77Parser.RULE_controlNumber = 120;
Fortran77Parser.RULE_controlNamed = 121;
Fortran77Parser.RULE_controlName = 122;
Fortran77Parser.RULE_controlSequential = 123;
Fortran77Parser.RULE_controlDirect = 124;
Fortran77Parser.RULE_controlFormatted = 125;
Fortran77Parser.RULE_controlUnformatted = 126;
Fortran77Parser.RULE_controlNextrec = 127;
Fortran77Parser.RULE_closeStatement = 128;
Fortran77Parser.RULE_closeControl = 129;
Fortran77Parser.RULE_inquireStatement = 130;
Fortran77Parser.RULE_inquireControl = 131;
Fortran77Parser.RULE_backspaceStatement = 132;
Fortran77Parser.RULE_endfileStatement = 133;
Fortran77Parser.RULE_rewindStatement = 134;
Fortran77Parser.RULE_berFinish = 135;
Fortran77Parser.RULE_berFinishItem = 136;
Fortran77Parser.RULE_unitIdentifier = 137;
Fortran77Parser.RULE_formatIdentifier = 138;
Fortran77Parser.RULE_formatStatement = 139;
Fortran77Parser.RULE_fmtSpec = 140;
Fortran77Parser.RULE_formatsep = 141;
Fortran77Parser.RULE_formatedit = 142;
Fortran77Parser.RULE_editElement = 143;
Fortran77Parser.RULE_statementFunctionStatement = 144;
Fortran77Parser.RULE_sfArgs = 145;
Fortran77Parser.RULE_callStatement = 146;
Fortran77Parser.RULE_subroutineCall = 147;
Fortran77Parser.RULE_callArgumentList = 148;
Fortran77Parser.RULE_callArgument = 149;
Fortran77Parser.RULE_returnStatement = 150;
Fortran77Parser.RULE_expression = 151;
Fortran77Parser.RULE_ncExpr = 152;
Fortran77Parser.RULE_lexpr0 = 153;
Fortran77Parser.RULE_lexpr1 = 154;
Fortran77Parser.RULE_lexpr2 = 155;
Fortran77Parser.RULE_lexpr3 = 156;
Fortran77Parser.RULE_lexpr4 = 157;
Fortran77Parser.RULE_aexpr0 = 158;
Fortran77Parser.RULE_aexpr1 = 159;
Fortran77Parser.RULE_aexpr2 = 160;
Fortran77Parser.RULE_aexpr3 = 161;
Fortran77Parser.RULE_aexpr4 = 162;
Fortran77Parser.RULE_iexpr = 163;
Fortran77Parser.RULE_iexprCode = 164;
Fortran77Parser.RULE_iexpr1 = 165;
Fortran77Parser.RULE_iexpr2 = 166;
Fortran77Parser.RULE_iexpr3 = 167;
Fortran77Parser.RULE_iexpr4 = 168;
Fortran77Parser.RULE_constantExpr = 169;
Fortran77Parser.RULE_arithmeticExpression = 170;
Fortran77Parser.RULE_integerExpr = 171;
Fortran77Parser.RULE_intRealDpExpr = 172;
Fortran77Parser.RULE_arithmeticConstExpr = 173;
Fortran77Parser.RULE_intConstantExpr = 174;
Fortran77Parser.RULE_characterExpression = 175;
Fortran77Parser.RULE_concatOp = 176;
Fortran77Parser.RULE_logicalExpression = 177;
Fortran77Parser.RULE_logicalConstExpr = 178;
Fortran77Parser.RULE_arrayElementName = 179;
Fortran77Parser.RULE_subscripts = 180;
Fortran77Parser.RULE_varRef = 181;
Fortran77Parser.RULE_varRefCode = 182;
Fortran77Parser.RULE_substringApp = 183;
Fortran77Parser.RULE_variableName = 184;
Fortran77Parser.RULE_arrayName = 185;
Fortran77Parser.RULE_subroutineName = 186;
Fortran77Parser.RULE_functionName = 187;
Fortran77Parser.RULE_constant = 188;
Fortran77Parser.RULE_unsignedArithmeticConstant = 189;
Fortran77Parser.RULE_complexConstant = 190;
Fortran77Parser.RULE_logicalConstant = 191;
Fortran77Parser.RULE_identifier = 192;
Fortran77Parser.RULE_to = 193;

class CommentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commentStatement;
    }

	COMMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMENT);
	    } else {
	        return this.getToken(Fortran77Parser.COMMENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommentStatement(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_program;
    }

	commentStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentStatementContext);
	    } else {
	        return this.getTypedRuleContext(CommentStatementContext,i);
	    }
	};

	executableUnit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExecutableUnitContext);
	    } else {
	        return this.getTypedRuleContext(ExecutableUnitContext,i);
	    }
	};

	EOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.EOL);
	    } else {
	        return this.getToken(Fortran77Parser.EOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class ExecutableUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_executableUnit;
    }

	functionSubprogram() {
	    return this.getTypedRuleContext(FunctionSubprogramContext,0);
	};

	mainProgram() {
	    return this.getTypedRuleContext(MainProgramContext,0);
	};

	subroutineSubprogram() {
	    return this.getTypedRuleContext(SubroutineSubprogramContext,0);
	};

	blockdataSubprogram() {
	    return this.getTypedRuleContext(BlockdataSubprogramContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterExecutableUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitExecutableUnit(this);
		}
	}


}



class MainProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_mainProgram;
    }

	subprogramBody() {
	    return this.getTypedRuleContext(SubprogramBodyContext,0);
	};

	programStatement() {
	    return this.getTypedRuleContext(ProgramStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterMainProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitMainProgram(this);
		}
	}


}



class FunctionSubprogramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_functionSubprogram;
    }

	functionStatement() {
	    return this.getTypedRuleContext(FunctionStatementContext,0);
	};

	subprogramBody() {
	    return this.getTypedRuleContext(SubprogramBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFunctionSubprogram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFunctionSubprogram(this);
		}
	}


}



class SubroutineSubprogramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subroutineSubprogram;
    }

	subroutineStatement() {
	    return this.getTypedRuleContext(SubroutineStatementContext,0);
	};

	subprogramBody() {
	    return this.getTypedRuleContext(SubprogramBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubroutineSubprogram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubroutineSubprogram(this);
		}
	}


}



class BlockdataSubprogramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_blockdataSubprogram;
    }

	blockdataStatement() {
	    return this.getTypedRuleContext(BlockdataStatementContext,0);
	};

	subprogramBody() {
	    return this.getTypedRuleContext(SubprogramBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBlockdataSubprogram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBlockdataSubprogram(this);
		}
	}


}



class OtherSpecificationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_otherSpecificationStatement;
    }

	dimensionStatement() {
	    return this.getTypedRuleContext(DimensionStatementContext,0);
	};

	equivalenceStatement() {
	    return this.getTypedRuleContext(EquivalenceStatementContext,0);
	};

	intrinsicStatement() {
	    return this.getTypedRuleContext(IntrinsicStatementContext,0);
	};

	saveStatement() {
	    return this.getTypedRuleContext(SaveStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterOtherSpecificationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitOtherSpecificationStatement(this);
		}
	}


}



class ExecutableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_executableStatement;
    }

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	gotoStatement() {
	    return this.getTypedRuleContext(GotoStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	stopStatement() {
	    return this.getTypedRuleContext(StopStatementContext,0);
	};

	pauseStatement() {
	    return this.getTypedRuleContext(PauseStatementContext,0);
	};

	readStatement() {
	    return this.getTypedRuleContext(ReadStatementContext,0);
	};

	writeStatement() {
	    return this.getTypedRuleContext(WriteStatementContext,0);
	};

	printStatement() {
	    return this.getTypedRuleContext(PrintStatementContext,0);
	};

	rewindStatement() {
	    return this.getTypedRuleContext(RewindStatementContext,0);
	};

	backspaceStatement() {
	    return this.getTypedRuleContext(BackspaceStatementContext,0);
	};

	openStatement() {
	    return this.getTypedRuleContext(OpenStatementContext,0);
	};

	closeStatement() {
	    return this.getTypedRuleContext(CloseStatementContext,0);
	};

	endfileStatement() {
	    return this.getTypedRuleContext(EndfileStatementContext,0);
	};

	inquireStatement() {
	    return this.getTypedRuleContext(InquireStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterExecutableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitExecutableStatement(this);
		}
	}


}



class ProgramStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_programStatement;
    }

	PROGRAM() {
	    return this.getToken(Fortran77Parser.PROGRAM, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterProgramStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitProgramStatement(this);
		}
	}


}



class EntryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_entryStatement;
    }

	ENTRY() {
	    return this.getToken(Fortran77Parser.ENTRY, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEntryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEntryStatement(this);
		}
	}


}



class FunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_functionStatement;
    }

	FUNCTION() {
	    return this.getToken(Fortran77Parser.FUNCTION, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFunctionStatement(this);
		}
	}


}



class BlockdataStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_blockdataStatement;
    }

	BLOCK() {
	    return this.getToken(Fortran77Parser.BLOCK, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBlockdataStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBlockdataStatement(this);
		}
	}


}



class SubroutineStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subroutineStatement;
    }

	SUBROUTINE() {
	    return this.getToken(Fortran77Parser.SUBROUTINE, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubroutineStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubroutineStatement(this);
		}
	}


}



class NamelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_namelist;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterNamelist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitNamelist(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_statement;
    }

	entryStatement() {
	    return this.getTypedRuleContext(EntryStatementContext,0);
	};

	implicitStatement() {
	    return this.getTypedRuleContext(ImplicitStatementContext,0);
	};

	parameterStatement() {
	    return this.getTypedRuleContext(ParameterStatementContext,0);
	};

	typeStatement() {
	    return this.getTypedRuleContext(TypeStatementContext,0);
	};

	commonStatement() {
	    return this.getTypedRuleContext(CommonStatementContext,0);
	};

	pointerStatement() {
	    return this.getTypedRuleContext(PointerStatementContext,0);
	};

	externalStatement() {
	    return this.getTypedRuleContext(ExternalStatementContext,0);
	};

	otherSpecificationStatement() {
	    return this.getTypedRuleContext(OtherSpecificationStatementContext,0);
	};

	dataStatement() {
	    return this.getTypedRuleContext(DataStatementContext,0);
	};

	statementFunctionStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementFunctionStatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementFunctionStatementContext,i);
	    }
	};

	executableStatement() {
	    return this.getTypedRuleContext(ExecutableStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class SubprogramBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subprogramBody;
    }

	endStatement() {
	    return this.getTypedRuleContext(EndStatementContext,0);
	};

	commentStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentStatementContext);
	    } else {
	        return this.getTypedRuleContext(CommentStatementContext,i);
	    }
	};

	wholeStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WholeStatementContext);
	    } else {
	        return this.getTypedRuleContext(WholeStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubprogramBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubprogramBody(this);
		}
	}


}



class WholeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_wholeStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	LABEL() {
	    return this.getToken(Fortran77Parser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterWholeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitWholeStatement(this);
		}
	}


}



class EndStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_endStatement;
    }

	END() {
	    return this.getToken(Fortran77Parser.END, 0);
	};

	LABEL() {
	    return this.getToken(Fortran77Parser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEndStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEndStatement(this);
		}
	}


}



class DimensionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dimensionStatement;
    }

	DIMENSION() {
	    return this.getToken(Fortran77Parser.DIMENSION, 0);
	};

	arrayDeclarators() {
	    return this.getTypedRuleContext(ArrayDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDimensionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDimensionStatement(this);
		}
	}


}



class ArrayDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayDeclarator;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	arrayDeclaratorExtents() {
	    return this.getTypedRuleContext(ArrayDeclaratorExtentsContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	REAL() {
	    return this.getToken(Fortran77Parser.REAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayDeclarator(this);
		}
	}


}



class ArrayDeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayDeclarators;
    }

	arrayDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(ArrayDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayDeclarators(this);
		}
	}


}



class ArrayDeclaratorExtentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayDeclaratorExtents;
    }

	arrayDeclaratorExtent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayDeclaratorExtentContext);
	    } else {
	        return this.getTypedRuleContext(ArrayDeclaratorExtentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayDeclaratorExtents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayDeclaratorExtents(this);
		}
	}


}



class ArrayDeclaratorExtentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayDeclaratorExtent;
    }

	iexprCode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IexprCodeContext);
	    } else {
	        return this.getTypedRuleContext(IexprCodeContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Fortran77Parser.COLON, 0);
	};

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayDeclaratorExtent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayDeclaratorExtent(this);
		}
	}


}



class EquivalenceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_equivalenceStatement;
    }

	EQUIVALENCE() {
	    return this.getToken(Fortran77Parser.EQUIVALENCE, 0);
	};

	equivEntityGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquivEntityGroupContext);
	    } else {
	        return this.getTypedRuleContext(EquivEntityGroupContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEquivalenceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEquivalenceStatement(this);
		}
	}


}



class EquivEntityGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_equivEntityGroup;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	equivEntity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquivEntityContext);
	    } else {
	        return this.getTypedRuleContext(EquivEntityContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEquivEntityGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEquivEntityGroup(this);
		}
	}


}



class EquivEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_equivEntity;
    }

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEquivEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEquivEntity(this);
		}
	}


}



class CommonStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commonStatement;
    }

	COMMON() {
	    return this.getToken(Fortran77Parser.COMMON, 0);
	};

	commonBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonBlockContext);
	    } else {
	        return this.getTypedRuleContext(CommonBlockContext,i);
	    }
	};

	commonItems() {
	    return this.getTypedRuleContext(CommonItemsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommonStatement(this);
		}
	}


}



class CommonNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commonName;
    }

	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.DIV);
	    } else {
	        return this.getToken(Fortran77Parser.DIV, i);
	    }
	};


	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommonName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommonName(this);
		}
	}


}



class CommonItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commonItem;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	arrayDeclarator() {
	    return this.getTypedRuleContext(ArrayDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommonItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommonItem(this);
		}
	}


}



class CommonItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commonItems;
    }

	commonItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonItemContext);
	    } else {
	        return this.getTypedRuleContext(CommonItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommonItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommonItems(this);
		}
	}


}



class CommonBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_commonBlock;
    }

	commonName() {
	    return this.getTypedRuleContext(CommonNameContext,0);
	};

	commonItems() {
	    return this.getTypedRuleContext(CommonItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCommonBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCommonBlock(this);
		}
	}


}



class TypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatement;
    }

	typename_() {
	    return this.getTypedRuleContext(Typename_Context,0);
	};

	typeStatementNameList() {
	    return this.getTypedRuleContext(TypeStatementNameListContext,0);
	};

	characterWithLen() {
	    return this.getTypedRuleContext(CharacterWithLenContext,0);
	};

	typeStatementNameCharList() {
	    return this.getTypedRuleContext(TypeStatementNameCharListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatement(this);
		}
	}


}



class TypeStatementNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatementNameList;
    }

	typeStatementName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeStatementNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeStatementNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatementNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatementNameList(this);
		}
	}


}



class TypeStatementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatementName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	arrayDeclarator() {
	    return this.getTypedRuleContext(ArrayDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatementName(this);
		}
	}


}



class TypeStatementNameCharListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatementNameCharList;
    }

	typeStatementNameChar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeStatementNameCharContext);
	    } else {
	        return this.getTypedRuleContext(TypeStatementNameCharContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatementNameCharList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatementNameCharList(this);
		}
	}


}



class TypeStatementNameCharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatementNameChar;
    }

	typeStatementName() {
	    return this.getTypedRuleContext(TypeStatementNameContext,0);
	};

	typeStatementLenSpec() {
	    return this.getTypedRuleContext(TypeStatementLenSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatementNameChar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatementNameChar(this);
		}
	}


}



class TypeStatementLenSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typeStatementLenSpec;
    }

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	lenSpecification() {
	    return this.getTypedRuleContext(LenSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypeStatementLenSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypeStatementLenSpec(this);
		}
	}


}



class Typename_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typename_;
    }

	REAL() {
	    return this.getToken(Fortran77Parser.REAL, 0);
	};

	COMPLEX() {
	    return this.getToken(Fortran77Parser.COMPLEX, 0);
	};

	DOUBLE() {
	    return this.getToken(Fortran77Parser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(Fortran77Parser.PRECISION, 0);
	};

	INTEGER() {
	    return this.getToken(Fortran77Parser.INTEGER, 0);
	};

	LOGICAL() {
	    return this.getToken(Fortran77Parser.LOGICAL, 0);
	};

	CHARACTER() {
	    return this.getToken(Fortran77Parser.CHARACTER, 0);
	};

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypename_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypename_(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_type_;
    }

	typename_() {
	    return this.getTypedRuleContext(Typename_Context,0);
	};

	characterWithLen() {
	    return this.getTypedRuleContext(CharacterWithLenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitType_(this);
		}
	}


}



class TypenameLenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_typenameLen;
    }

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTypenameLen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTypenameLen(this);
		}
	}


}



class PointerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_pointerStatement;
    }

	POINTER() {
	    return this.getToken(Fortran77Parser.POINTER, 0);
	};

	pointerDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerDeclContext);
	    } else {
	        return this.getTypedRuleContext(PointerDeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterPointerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitPointerStatement(this);
		}
	}


}



class PointerDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_pointerDecl;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.NAME);
	    } else {
	        return this.getToken(Fortran77Parser.NAME, i);
	    }
	};


	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterPointerDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitPointerDecl(this);
		}
	}


}



class ImplicitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitStatement;
    }

	IMPLICIT() {
	    return this.getToken(Fortran77Parser.IMPLICIT, 0);
	};

	implicitNone() {
	    return this.getTypedRuleContext(ImplicitNoneContext,0);
	};

	implicitSpecs() {
	    return this.getTypedRuleContext(ImplicitSpecsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitStatement(this);
		}
	}


}



class ImplicitSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitSpec;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	implicitLetters() {
	    return this.getTypedRuleContext(ImplicitLettersContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitSpec(this);
		}
	}


}



class ImplicitSpecsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitSpecs;
    }

	implicitSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImplicitSpecContext);
	    } else {
	        return this.getTypedRuleContext(ImplicitSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitSpecs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitSpecs(this);
		}
	}


}



class ImplicitNoneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitNone;
    }

	NONE() {
	    return this.getToken(Fortran77Parser.NONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitNone(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitNone(this);
		}
	}


}



class ImplicitLetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitLetter;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitLetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitLetter(this);
		}
	}


}



class ImplicitRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitRange;
    }

	implicitLetter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImplicitLetterContext);
	    } else {
	        return this.getTypedRuleContext(ImplicitLetterContext,i);
	    }
	};

	MINUS() {
	    return this.getToken(Fortran77Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitRange(this);
		}
	}


}



class ImplicitLettersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_implicitLetters;
    }

	implicitRange = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImplicitRangeContext);
	    } else {
	        return this.getTypedRuleContext(ImplicitRangeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterImplicitLetters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitImplicitLetters(this);
		}
	}


}



class LenSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lenSpecification;
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.LPAREN);
	    } else {
	        return this.getToken(Fortran77Parser.LPAREN, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.STAR);
	    } else {
	        return this.getToken(Fortran77Parser.STAR, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.RPAREN);
	    } else {
	        return this.getToken(Fortran77Parser.RPAREN, i);
	    }
	};


	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	intConstantExpr() {
	    return this.getTypedRuleContext(IntConstantExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLenSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLenSpecification(this);
		}
	}


}



class CharacterWithLenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_characterWithLen;
    }

	characterExpression() {
	    return this.getTypedRuleContext(CharacterExpressionContext,0);
	};

	cwlLen() {
	    return this.getTypedRuleContext(CwlLenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCharacterWithLen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCharacterWithLen(this);
		}
	}


}



class CwlLenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_cwlLen;
    }

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	lenSpecification() {
	    return this.getTypedRuleContext(LenSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCwlLen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCwlLen(this);
		}
	}


}



class ParameterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_parameterStatement;
    }

	PARAMETER() {
	    return this.getToken(Fortran77Parser.PARAMETER, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	paramlist() {
	    return this.getTypedRuleContext(ParamlistContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterParameterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitParameterStatement(this);
		}
	}


}



class ParamlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_paramlist;
    }

	paramassign = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamassignContext);
	    } else {
	        return this.getTypedRuleContext(ParamassignContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterParamlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitParamlist(this);
		}
	}


}



class ParamassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_paramassign;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterParamassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitParamassign(this);
		}
	}


}



class ExternalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_externalStatement;
    }

	EXTERNAL() {
	    return this.getToken(Fortran77Parser.EXTERNAL, 0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterExternalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitExternalStatement(this);
		}
	}


}



class IntrinsicStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_intrinsicStatement;
    }

	INTRINSIC() {
	    return this.getToken(Fortran77Parser.INTRINSIC, 0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIntrinsicStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIntrinsicStatement(this);
		}
	}


}



class SaveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_saveStatement;
    }

	SAVE() {
	    return this.getToken(Fortran77Parser.SAVE, 0);
	};

	saveEntity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SaveEntityContext);
	    } else {
	        return this.getTypedRuleContext(SaveEntityContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSaveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSaveStatement(this);
		}
	}


}



class SaveEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_saveEntity;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.DIV);
	    } else {
	        return this.getToken(Fortran77Parser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSaveEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSaveEntity(this);
		}
	}


}



class DataStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataStatement;
    }

	DATA() {
	    return this.getToken(Fortran77Parser.DATA, 0);
	};

	dataStatementEntity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataStatementEntityContext);
	    } else {
	        return this.getTypedRuleContext(DataStatementEntityContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataStatement(this);
		}
	}


}



class DataStatementItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataStatementItem;
    }

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	dataImpliedDo() {
	    return this.getTypedRuleContext(DataImpliedDoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataStatementItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataStatementItem(this);
		}
	}


}



class DataStatementMultipleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataStatementMultiple;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.NAME);
	    } else {
	        return this.getToken(Fortran77Parser.NAME, i);
	    }
	};


	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataStatementMultiple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataStatementMultiple(this);
		}
	}


}



class DataStatementEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataStatementEntity;
    }

	dse1() {
	    return this.getTypedRuleContext(Dse1Context,0);
	};

	dse2() {
	    return this.getTypedRuleContext(Dse2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataStatementEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataStatementEntity(this);
		}
	}


}



class Dse1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dse1;
    }

	dataStatementItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataStatementItemContext);
	    } else {
	        return this.getTypedRuleContext(DataStatementItemContext,i);
	    }
	};

	DIV() {
	    return this.getToken(Fortran77Parser.DIV, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDse1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDse1(this);
		}
	}


}



class Dse2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dse2;
    }

	dataStatementMultiple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataStatementMultipleContext);
	    } else {
	        return this.getTypedRuleContext(DataStatementMultipleContext,i);
	    }
	};

	DIV() {
	    return this.getToken(Fortran77Parser.DIV, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDse2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDse2(this);
		}
	}


}



class DataImpliedDoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataImpliedDo;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	dataImpliedDoList() {
	    return this.getTypedRuleContext(DataImpliedDoListContext,0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	dataImpliedDoRange() {
	    return this.getTypedRuleContext(DataImpliedDoRangeContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataImpliedDo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataImpliedDo(this);
		}
	}


}



class DataImpliedDoRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataImpliedDoRange;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	intConstantExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntConstantExprContext);
	    } else {
	        return this.getTypedRuleContext(IntConstantExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataImpliedDoRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataImpliedDoRange(this);
		}
	}


}



class DataImpliedDoListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataImpliedDoList;
    }

	dataImpliedDoListWhat() {
	    return this.getTypedRuleContext(DataImpliedDoListWhatContext,0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	dataImpliedDoList() {
	    return this.getTypedRuleContext(DataImpliedDoListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataImpliedDoList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataImpliedDoList(this);
		}
	}


}



class DataImpliedDoListWhatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_dataImpliedDoListWhat;
    }

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	dataImpliedDo() {
	    return this.getTypedRuleContext(DataImpliedDoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDataImpliedDoListWhat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDataImpliedDoListWhat(this);
		}
	}


}



class GotoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_gotoStatement;
    }

	to() {
	    return this.getTypedRuleContext(ToContext,0);
	};

	unconditionalGoto() {
	    return this.getTypedRuleContext(UnconditionalGotoContext,0);
	};

	computedGoto() {
	    return this.getTypedRuleContext(ComputedGotoContext,0);
	};

	assignedGoto() {
	    return this.getTypedRuleContext(AssignedGotoContext,0);
	};

	GO() {
	    return this.getToken(Fortran77Parser.GO, 0);
	};

	GOTO() {
	    return this.getToken(Fortran77Parser.GOTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitGotoStatement(this);
		}
	}


}



class UnconditionalGotoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_unconditionalGoto;
    }

	lblRef() {
	    return this.getTypedRuleContext(LblRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterUnconditionalGoto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitUnconditionalGoto(this);
		}
	}


}



class ComputedGotoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_computedGoto;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	labelList() {
	    return this.getTypedRuleContext(LabelListContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	integerExpr() {
	    return this.getTypedRuleContext(IntegerExprContext,0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterComputedGoto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitComputedGoto(this);
		}
	}


}



class LblRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lblRef;
    }

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLblRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLblRef(this);
		}
	}


}



class LabelListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_labelList;
    }

	lblRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LblRefContext);
	    } else {
	        return this.getTypedRuleContext(LblRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLabelList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLabelList(this);
		}
	}


}



class AssignedGotoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_assignedGoto;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	labelList() {
	    return this.getTypedRuleContext(LabelListContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAssignedGoto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAssignedGoto(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_ifStatement;
    }

	IF() {
	    return this.getToken(Fortran77Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	blockIfStatement() {
	    return this.getTypedRuleContext(BlockIfStatementContext,0);
	};

	logicalIfStatement() {
	    return this.getTypedRuleContext(LogicalIfStatementContext,0);
	};

	arithmeticIfStatement() {
	    return this.getTypedRuleContext(ArithmeticIfStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class ArithmeticIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arithmeticIfStatement;
    }

	lblRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LblRefContext);
	    } else {
	        return this.getTypedRuleContext(LblRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArithmeticIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArithmeticIfStatement(this);
		}
	}


}



class LogicalIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_logicalIfStatement;
    }

	executableStatement() {
	    return this.getTypedRuleContext(ExecutableStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLogicalIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLogicalIfStatement(this);
		}
	}


}



class BlockIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_blockIfStatement;
    }

	firstIfBlock() {
	    return this.getTypedRuleContext(FirstIfBlockContext,0);
	};

	endIfStatement() {
	    return this.getTypedRuleContext(EndIfStatementContext,0);
	};

	elseIfStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElseIfStatementContext);
	    } else {
	        return this.getTypedRuleContext(ElseIfStatementContext,i);
	    }
	};

	elseStatement() {
	    return this.getTypedRuleContext(ElseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBlockIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBlockIfStatement(this);
		}
	}


}



class FirstIfBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_firstIfBlock;
    }

	THEN() {
	    return this.getToken(Fortran77Parser.THEN, 0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	commentStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentStatementContext);
	    } else {
	        return this.getTypedRuleContext(CommentStatementContext,i);
	    }
	};

	wholeStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WholeStatementContext);
	    } else {
	        return this.getTypedRuleContext(WholeStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFirstIfBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFirstIfBlock(this);
		}
	}


}



class ElseIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_elseIfStatement;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	THEN() {
	    return this.getToken(Fortran77Parser.THEN, 0);
	};

	ELSEIF() {
	    return this.getToken(Fortran77Parser.ELSEIF, 0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	wholeStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WholeStatementContext);
	    } else {
	        return this.getTypedRuleContext(WholeStatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Fortran77Parser.ELSE, 0);
	};

	IF() {
	    return this.getToken(Fortran77Parser.IF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterElseIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitElseIfStatement(this);
		}
	}


}



class ElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_elseStatement;
    }

	ELSE() {
	    return this.getToken(Fortran77Parser.ELSE, 0);
	};

	EOL() {
	    return this.getToken(Fortran77Parser.EOL, 0);
	};

	commentStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentStatementContext);
	    } else {
	        return this.getTypedRuleContext(CommentStatementContext,i);
	    }
	};

	wholeStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WholeStatementContext);
	    } else {
	        return this.getTypedRuleContext(WholeStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitElseStatement(this);
		}
	}


}



class EndIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_endIfStatement;
    }

	ENDIF() {
	    return this.getToken(Fortran77Parser.ENDIF, 0);
	};

	END() {
	    return this.getToken(Fortran77Parser.END, 0);
	};

	IF() {
	    return this.getToken(Fortran77Parser.IF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEndIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEndIfStatement(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(Fortran77Parser.DO, 0);
	};

	doWithLabel() {
	    return this.getTypedRuleContext(DoWithLabelContext,0);
	};

	doWithEndDo() {
	    return this.getTypedRuleContext(DoWithEndDoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class DoVarArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_doVarArgs;
    }

	variableName() {
	    return this.getTypedRuleContext(VariableNameContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	intRealDpExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntRealDpExprContext);
	    } else {
	        return this.getTypedRuleContext(IntRealDpExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDoVarArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDoVarArgs(this);
		}
	}


}



class DoWithLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_doWithLabel;
    }

	lblRef() {
	    return this.getTypedRuleContext(LblRefContext,0);
	};

	doVarArgs() {
	    return this.getTypedRuleContext(DoVarArgsContext,0);
	};

	doBody() {
	    return this.getTypedRuleContext(DoBodyContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	EOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.EOL);
	    } else {
	        return this.getToken(Fortran77Parser.EOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDoWithLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDoWithLabel(this);
		}
	}


}



class DoBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_doBody;
    }

	wholeStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WholeStatementContext);
	    } else {
	        return this.getTypedRuleContext(WholeStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDoBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDoBody(this);
		}
	}


}



class DoWithEndDoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_doWithEndDo;
    }

	doVarArgs() {
	    return this.getTypedRuleContext(DoVarArgsContext,0);
	};

	doBody() {
	    return this.getTypedRuleContext(DoBodyContext,0);
	};

	enddoStatement() {
	    return this.getTypedRuleContext(EnddoStatementContext,0);
	};

	EOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.EOL);
	    } else {
	        return this.getToken(Fortran77Parser.EOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterDoWithEndDo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitDoWithEndDo(this);
		}
	}


}



class EnddoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_enddoStatement;
    }

	ENDDO() {
	    return this.getToken(Fortran77Parser.ENDDO, 0);
	};

	END() {
	    return this.getToken(Fortran77Parser.END, 0);
	};

	DO() {
	    return this.getToken(Fortran77Parser.DO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEnddoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEnddoStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Fortran77Parser.CONTINUE, 0);
	};

	lblRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LblRefContext);
	    } else {
	        return this.getTypedRuleContext(LblRefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class StopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_stopStatement;
    }

	STOP() {
	    return this.getToken(Fortran77Parser.STOP, 0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterStopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitStopStatement(this);
		}
	}


}



class PauseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_pauseStatement;
    }

	PAUSE() {
	    return this.getToken(Fortran77Parser.PAUSE, 0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterPauseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitPauseStatement(this);
		}
	}


}



class WriteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_writeStatement;
    }

	WRITE() {
	    return this.getToken(Fortran77Parser.WRITE, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	controlInfoList() {
	    return this.getTypedRuleContext(ControlInfoListContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	ioList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IoListContext);
	    } else {
	        return this.getTypedRuleContext(IoListContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterWriteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitWriteStatement(this);
		}
	}


}



class ReadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_readStatement;
    }

	READ() {
	    return this.getToken(Fortran77Parser.READ, 0);
	};

	formatIdentifier() {
	    return this.getTypedRuleContext(FormatIdentifierContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	ioList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IoListContext);
	    } else {
	        return this.getTypedRuleContext(IoListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitReadStatement(this);
		}
	}


}



class PrintStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_printStatement;
    }

	PRINT() {
	    return this.getToken(Fortran77Parser.PRINT, 0);
	};

	formatIdentifier() {
	    return this.getTypedRuleContext(FormatIdentifierContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	ioList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IoListContext);
	    } else {
	        return this.getTypedRuleContext(IoListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterPrintStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitPrintStatement(this);
		}
	}


}



class AssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_assignmentStatement;
    }

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAssignmentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAssignmentStatement(this);
		}
	}


}



class ControlInfoListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlInfoList;
    }

	controlInfoListItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ControlInfoListItemContext);
	    } else {
	        return this.getTypedRuleContext(ControlInfoListItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlInfoList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlInfoList(this);
		}
	}


}



class ControlErrSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlErrSpec;
    }

	controlErr() {
	    return this.getTypedRuleContext(ControlErrContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	lblRef() {
	    return this.getTypedRuleContext(LblRefContext,0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlErrSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlErrSpec(this);
		}
	}


}



class ControlInfoListItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlInfoListItem;
    }

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	SCON() {
	    return this.getToken(Fortran77Parser.SCON, 0);
	};

	controlFmt() {
	    return this.getTypedRuleContext(ControlFmtContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	formatIdentifier() {
	    return this.getTypedRuleContext(FormatIdentifierContext,0);
	};

	controlUnit() {
	    return this.getTypedRuleContext(ControlUnitContext,0);
	};

	controlRec() {
	    return this.getTypedRuleContext(ControlRecContext,0);
	};

	integerExpr() {
	    return this.getTypedRuleContext(IntegerExprContext,0);
	};

	controlEnd() {
	    return this.getTypedRuleContext(ControlEndContext,0);
	};

	lblRef() {
	    return this.getTypedRuleContext(LblRefContext,0);
	};

	controlErrSpec() {
	    return this.getTypedRuleContext(ControlErrSpecContext,0);
	};

	controlIostat() {
	    return this.getTypedRuleContext(ControlIostatContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlInfoListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlInfoListItem(this);
		}
	}


}



class IoListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_ioList;
    }

	ioListItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IoListItemContext);
	    } else {
	        return this.getTypedRuleContext(IoListItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	ioList() {
	    return this.getTypedRuleContext(IoListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIoList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIoList(this);
		}
	}


}



class IoListItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_ioListItem;
    }

	ioImpliedDoList() {
	    return this.getTypedRuleContext(IoImpliedDoListContext,0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	ioList() {
	    return this.getTypedRuleContext(IoListContext,0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIoListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIoListItem(this);
		}
	}


}



class IoImpliedDoListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_ioImpliedDoList;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	ioList() {
	    return this.getTypedRuleContext(IoListContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	intRealDpExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntRealDpExprContext);
	    } else {
	        return this.getTypedRuleContext(IntRealDpExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIoImpliedDoList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIoImpliedDoList(this);
		}
	}


}



class OpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_openStatement;
    }

	OPEN() {
	    return this.getToken(Fortran77Parser.OPEN, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	openControl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenControlContext);
	    } else {
	        return this.getTypedRuleContext(OpenControlContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitOpenStatement(this);
		}
	}


}



class OpenControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_openControl;
    }

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	controlUnit() {
	    return this.getTypedRuleContext(ControlUnitContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	controlErrSpec() {
	    return this.getTypedRuleContext(ControlErrSpecContext,0);
	};

	controlFile() {
	    return this.getTypedRuleContext(ControlFileContext,0);
	};

	characterExpression() {
	    return this.getTypedRuleContext(CharacterExpressionContext,0);
	};

	controlStatus() {
	    return this.getTypedRuleContext(ControlStatusContext,0);
	};

	controlAccess() {
	    return this.getTypedRuleContext(ControlAccessContext,0);
	};

	controlPosition() {
	    return this.getTypedRuleContext(ControlPositionContext,0);
	};

	controlForm() {
	    return this.getTypedRuleContext(ControlFormContext,0);
	};

	controlRecl() {
	    return this.getTypedRuleContext(ControlReclContext,0);
	};

	integerExpr() {
	    return this.getTypedRuleContext(IntegerExprContext,0);
	};

	controlBlank() {
	    return this.getTypedRuleContext(ControlBlankContext,0);
	};

	controlIostat() {
	    return this.getTypedRuleContext(ControlIostatContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterOpenControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitOpenControl(this);
		}
	}


}



class ControlFmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlFmt;
    }

	FMT() {
	    return this.getToken(Fortran77Parser.FMT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlFmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlFmt(this);
		}
	}


}



class ControlUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlUnit;
    }

	UNIT() {
	    return this.getToken(Fortran77Parser.UNIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlUnit(this);
		}
	}


}



class ControlRecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlRec;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlRec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlRec(this);
		}
	}


}



class ControlEndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlEnd;
    }

	END() {
	    return this.getToken(Fortran77Parser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlEnd(this);
		}
	}


}



class ControlErrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlErr;
    }

	ERR() {
	    return this.getToken(Fortran77Parser.ERR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlErr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlErr(this);
		}
	}


}



class ControlIostatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlIostat;
    }

	IOSTART() {
	    return this.getToken(Fortran77Parser.IOSTART, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlIostat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlIostat(this);
		}
	}


}



class ControlFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlFile;
    }

	FILE() {
	    return this.getToken(Fortran77Parser.FILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlFile(this);
		}
	}


}



class ControlStatusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlStatus;
    }

	STATUS() {
	    return this.getToken(Fortran77Parser.STATUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlStatus(this);
		}
	}


}



class ControlAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlAccess;
    }

	ACCESS() {
	    return this.getToken(Fortran77Parser.ACCESS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlAccess(this);
		}
	}


}



class ControlPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlPosition;
    }

	POSITION() {
	    return this.getToken(Fortran77Parser.POSITION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlPosition(this);
		}
	}


}



class ControlFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlForm;
    }

	FORM() {
	    return this.getToken(Fortran77Parser.FORM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlForm(this);
		}
	}


}



class ControlReclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlRecl;
    }

	RECL() {
	    return this.getToken(Fortran77Parser.RECL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlRecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlRecl(this);
		}
	}


}



class ControlBlankContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlBlank;
    }

	BLANK() {
	    return this.getToken(Fortran77Parser.BLANK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlBlank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlBlank(this);
		}
	}


}



class ControlExistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlExist;
    }

	EXIST() {
	    return this.getToken(Fortran77Parser.EXIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlExist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlExist(this);
		}
	}


}



class ControlOpenedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlOpened;
    }

	OPENED() {
	    return this.getToken(Fortran77Parser.OPENED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlOpened(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlOpened(this);
		}
	}


}



class ControlNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlNumber;
    }

	NUMBER() {
	    return this.getToken(Fortran77Parser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlNumber(this);
		}
	}


}



class ControlNamedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlNamed;
    }

	NAMED() {
	    return this.getToken(Fortran77Parser.NAMED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlNamed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlNamed(this);
		}
	}


}



class ControlNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlName(this);
		}
	}


}



class ControlSequentialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlSequential;
    }

	SEQUENTIAL() {
	    return this.getToken(Fortran77Parser.SEQUENTIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlSequential(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlSequential(this);
		}
	}


}



class ControlDirectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlDirect;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlDirect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlDirect(this);
		}
	}


}



class ControlFormattedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlFormatted;
    }

	FORMATTED() {
	    return this.getToken(Fortran77Parser.FORMATTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlFormatted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlFormatted(this);
		}
	}


}



class ControlUnformattedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlUnformatted;
    }

	UNFORMATTED() {
	    return this.getToken(Fortran77Parser.UNFORMATTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlUnformatted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlUnformatted(this);
		}
	}


}



class ControlNextrecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_controlNextrec;
    }

	NEXTREC() {
	    return this.getToken(Fortran77Parser.NEXTREC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterControlNextrec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitControlNextrec(this);
		}
	}


}



class CloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_closeStatement;
    }

	CLOSE() {
	    return this.getToken(Fortran77Parser.CLOSE, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	closeControl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CloseControlContext);
	    } else {
	        return this.getTypedRuleContext(CloseControlContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCloseStatement(this);
		}
	}


}



class CloseControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_closeControl;
    }

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	controlUnit() {
	    return this.getTypedRuleContext(ControlUnitContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	controlErrSpec() {
	    return this.getTypedRuleContext(ControlErrSpecContext,0);
	};

	controlStatus() {
	    return this.getTypedRuleContext(ControlStatusContext,0);
	};

	characterExpression() {
	    return this.getTypedRuleContext(CharacterExpressionContext,0);
	};

	controlIostat() {
	    return this.getTypedRuleContext(ControlIostatContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCloseControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCloseControl(this);
		}
	}


}



class InquireStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_inquireStatement;
    }

	INQUIRE() {
	    return this.getToken(Fortran77Parser.INQUIRE, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	inquireControl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InquireControlContext);
	    } else {
	        return this.getTypedRuleContext(InquireControlContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterInquireStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitInquireStatement(this);
		}
	}


}



class InquireControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_inquireControl;
    }

	controlUnit() {
	    return this.getTypedRuleContext(ControlUnitContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	controlFile() {
	    return this.getTypedRuleContext(ControlFileContext,0);
	};

	characterExpression() {
	    return this.getTypedRuleContext(CharacterExpressionContext,0);
	};

	controlErrSpec() {
	    return this.getTypedRuleContext(ControlErrSpecContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	controlIostat() {
	    return this.getTypedRuleContext(ControlIostatContext,0);
	};

	controlExist() {
	    return this.getTypedRuleContext(ControlExistContext,0);
	};

	controlOpened() {
	    return this.getTypedRuleContext(ControlOpenedContext,0);
	};

	controlNumber() {
	    return this.getTypedRuleContext(ControlNumberContext,0);
	};

	controlNamed() {
	    return this.getTypedRuleContext(ControlNamedContext,0);
	};

	controlName() {
	    return this.getTypedRuleContext(ControlNameContext,0);
	};

	controlAccess() {
	    return this.getTypedRuleContext(ControlAccessContext,0);
	};

	controlSequential() {
	    return this.getTypedRuleContext(ControlSequentialContext,0);
	};

	controlDirect() {
	    return this.getTypedRuleContext(ControlDirectContext,0);
	};

	controlForm() {
	    return this.getTypedRuleContext(ControlFormContext,0);
	};

	controlFormatted() {
	    return this.getTypedRuleContext(ControlFormattedContext,0);
	};

	controlUnformatted() {
	    return this.getTypedRuleContext(ControlUnformattedContext,0);
	};

	controlRecl() {
	    return this.getTypedRuleContext(ControlReclContext,0);
	};

	controlNextrec() {
	    return this.getTypedRuleContext(ControlNextrecContext,0);
	};

	controlBlank() {
	    return this.getTypedRuleContext(ControlBlankContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterInquireControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitInquireControl(this);
		}
	}


}



class BackspaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_backspaceStatement;
    }

	BACKSPACE() {
	    return this.getToken(Fortran77Parser.BACKSPACE, 0);
	};

	berFinish() {
	    return this.getTypedRuleContext(BerFinishContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBackspaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBackspaceStatement(this);
		}
	}


}



class EndfileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_endfileStatement;
    }

	ENDFILE() {
	    return this.getToken(Fortran77Parser.ENDFILE, 0);
	};

	berFinish() {
	    return this.getTypedRuleContext(BerFinishContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEndfileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEndfileStatement(this);
		}
	}


}



class RewindStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_rewindStatement;
    }

	REWIND() {
	    return this.getToken(Fortran77Parser.REWIND, 0);
	};

	berFinish() {
	    return this.getTypedRuleContext(BerFinishContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterRewindStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitRewindStatement(this);
		}
	}


}



class BerFinishContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_berFinish;
    }

	unitIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnitIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(UnitIdentifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	berFinishItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BerFinishItemContext);
	    } else {
	        return this.getTypedRuleContext(BerFinishItemContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBerFinish(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBerFinish(this);
		}
	}


}



class BerFinishItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_berFinishItem;
    }

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	controlUnit() {
	    return this.getTypedRuleContext(ControlUnitContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	controlErrSpec() {
	    return this.getTypedRuleContext(ControlErrSpecContext,0);
	};

	controlIostat() {
	    return this.getTypedRuleContext(ControlIostatContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterBerFinishItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitBerFinishItem(this);
		}
	}


}



class UnitIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_unitIdentifier;
    }

	iexpr() {
	    return this.getTypedRuleContext(IexprContext,0);
	};

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterUnitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitUnitIdentifier(this);
		}
	}


}



class FormatIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_formatIdentifier;
    }

	SCON() {
	    return this.getToken(Fortran77Parser.SCON, 0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	iexpr() {
	    return this.getTypedRuleContext(IexprContext,0);
	};

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFormatIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFormatIdentifier(this);
		}
	}


}



class FormatStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_formatStatement;
    }

	FORMAT() {
	    return this.getToken(Fortran77Parser.FORMAT, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	fmtSpec() {
	    return this.getTypedRuleContext(FmtSpecContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFormatStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFormatStatement(this);
		}
	}


}



class FmtSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_fmtSpec;
    }

	formatedit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormateditContext);
	    } else {
	        return this.getTypedRuleContext(FormateditContext,i);
	    }
	};

	formatsep = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormatsepContext);
	    } else {
	        return this.getTypedRuleContext(FormatsepContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFmtSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFmtSpec(this);
		}
	}


}



class FormatsepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_formatsep;
    }

	DIV() {
	    return this.getToken(Fortran77Parser.DIV, 0);
	};

	COLON() {
	    return this.getToken(Fortran77Parser.COLON, 0);
	};

	DOLLAR() {
	    return this.getToken(Fortran77Parser.DOLLAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFormatsep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFormatsep(this);
		}
	}


}



class FormateditContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_formatedit;
    }

	XCON() {
	    return this.getToken(Fortran77Parser.XCON, 0);
	};

	editElement() {
	    return this.getTypedRuleContext(EditElementContext,0);
	};

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	PCON() {
	    return this.getToken(Fortran77Parser.PCON, 0);
	};

	PLUS() {
	    return this.getToken(Fortran77Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(Fortran77Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFormatedit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFormatedit(this);
		}
	}


}



class EditElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_editElement;
    }

	FCON() {
	    return this.getToken(Fortran77Parser.FCON, 0);
	};

	SCON() {
	    return this.getToken(Fortran77Parser.SCON, 0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	fmtSpec() {
	    return this.getTypedRuleContext(FmtSpecContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterEditElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitEditElement(this);
		}
	}


}



class StatementFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_statementFunctionStatement;
    }

	LET() {
	    return this.getToken(Fortran77Parser.LET, 0);
	};

	sfArgs() {
	    return this.getTypedRuleContext(SfArgsContext,0);
	};

	ASSIGN() {
	    return this.getToken(Fortran77Parser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterStatementFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitStatementFunctionStatement(this);
		}
	}


}



class SfArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_sfArgs;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	namelist() {
	    return this.getTypedRuleContext(NamelistContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSfArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSfArgs(this);
		}
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_callStatement;
    }

	CALL() {
	    return this.getToken(Fortran77Parser.CALL, 0);
	};

	subroutineCall() {
	    return this.getTypedRuleContext(SubroutineCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCallStatement(this);
		}
	}


}



class SubroutineCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subroutineCall;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	callArgumentList() {
	    return this.getTypedRuleContext(CallArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubroutineCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubroutineCall(this);
		}
	}


}



class CallArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_callArgumentList;
    }

	callArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallArgumentContext);
	    } else {
	        return this.getTypedRuleContext(CallArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCallArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCallArgumentList(this);
		}
	}


}



class CallArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_callArgument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STAR() {
	    return this.getToken(Fortran77Parser.STAR, 0);
	};

	lblRef() {
	    return this.getTypedRuleContext(LblRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCallArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCallArgument(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Fortran77Parser.RETURN, 0);
	};

	integerExpr() {
	    return this.getTypedRuleContext(IntegerExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_expression;
    }

	ncExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NcExprContext);
	    } else {
	        return this.getTypedRuleContext(NcExprContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Fortran77Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class NcExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_ncExpr;
    }

	lexpr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lexpr0Context);
	    } else {
	        return this.getTypedRuleContext(Lexpr0Context,i);
	    }
	};

	concatOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConcatOpContext);
	    } else {
	        return this.getTypedRuleContext(ConcatOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterNcExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitNcExpr(this);
		}
	}


}



class Lexpr0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lexpr0;
    }

	lexpr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lexpr1Context);
	    } else {
	        return this.getTypedRuleContext(Lexpr1Context,i);
	    }
	};

	NEQV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.NEQV);
	    } else {
	        return this.getToken(Fortran77Parser.NEQV, i);
	    }
	};


	EQV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.EQV);
	    } else {
	        return this.getToken(Fortran77Parser.EQV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLexpr0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLexpr0(this);
		}
	}


}



class Lexpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lexpr1;
    }

	lexpr2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lexpr2Context);
	    } else {
	        return this.getTypedRuleContext(Lexpr2Context,i);
	    }
	};

	LOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.LOR);
	    } else {
	        return this.getToken(Fortran77Parser.LOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLexpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLexpr1(this);
		}
	}


}



class Lexpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lexpr2;
    }

	lexpr3 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lexpr3Context);
	    } else {
	        return this.getTypedRuleContext(Lexpr3Context,i);
	    }
	};

	LAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.LAND);
	    } else {
	        return this.getToken(Fortran77Parser.LAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLexpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLexpr2(this);
		}
	}


}



class Lexpr3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lexpr3;
    }

	LNOT() {
	    return this.getToken(Fortran77Parser.LNOT, 0);
	};

	lexpr3() {
	    return this.getTypedRuleContext(Lexpr3Context,0);
	};

	lexpr4() {
	    return this.getTypedRuleContext(Lexpr4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLexpr3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLexpr3(this);
		}
	}


}



class Lexpr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_lexpr4;
    }

	aexpr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aexpr0Context);
	    } else {
	        return this.getTypedRuleContext(Aexpr0Context,i);
	    }
	};

	LT() {
	    return this.getToken(Fortran77Parser.LT, 0);
	};

	LE() {
	    return this.getToken(Fortran77Parser.LE, 0);
	};

	EQ() {
	    return this.getToken(Fortran77Parser.EQ, 0);
	};

	NE() {
	    return this.getToken(Fortran77Parser.NE, 0);
	};

	GT() {
	    return this.getToken(Fortran77Parser.GT, 0);
	};

	GE() {
	    return this.getToken(Fortran77Parser.GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLexpr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLexpr4(this);
		}
	}


}



class Aexpr0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_aexpr0;
    }

	aexpr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aexpr1Context);
	    } else {
	        return this.getTypedRuleContext(Aexpr1Context,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAexpr0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAexpr0(this);
		}
	}


}



class Aexpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_aexpr1;
    }

	aexpr2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aexpr2Context);
	    } else {
	        return this.getTypedRuleContext(Aexpr2Context,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.STAR);
	    } else {
	        return this.getToken(Fortran77Parser.STAR, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.DIV);
	    } else {
	        return this.getToken(Fortran77Parser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAexpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAexpr1(this);
		}
	}


}



class Aexpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_aexpr2;
    }

	aexpr3() {
	    return this.getTypedRuleContext(Aexpr3Context,0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAexpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAexpr2(this);
		}
	}


}



class Aexpr3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_aexpr3;
    }

	aexpr4 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Aexpr4Context);
	    } else {
	        return this.getTypedRuleContext(Aexpr4Context,i);
	    }
	};

	POWER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.POWER);
	    } else {
	        return this.getToken(Fortran77Parser.POWER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAexpr3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAexpr3(this);
		}
	}


}



class Aexpr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_aexpr4;
    }

	unsignedArithmeticConstant() {
	    return this.getTypedRuleContext(UnsignedArithmeticConstantContext,0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	SCON() {
	    return this.getToken(Fortran77Parser.SCON, 0);
	};

	logicalConstant() {
	    return this.getTypedRuleContext(LogicalConstantContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterAexpr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitAexpr4(this);
		}
	}


}



class IexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexpr;
    }

	iexpr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Iexpr1Context);
	    } else {
	        return this.getTypedRuleContext(Iexpr1Context,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexpr(this);
		}
	}


}



class IexprCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexprCode;
    }

	iexpr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Iexpr1Context);
	    } else {
	        return this.getTypedRuleContext(Iexpr1Context,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexprCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexprCode(this);
		}
	}


}



class Iexpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexpr1;
    }

	iexpr2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Iexpr2Context);
	    } else {
	        return this.getTypedRuleContext(Iexpr2Context,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.STAR);
	    } else {
	        return this.getToken(Fortran77Parser.STAR, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.DIV);
	    } else {
	        return this.getToken(Fortran77Parser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexpr1(this);
		}
	}


}



class Iexpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexpr2;
    }

	iexpr3() {
	    return this.getTypedRuleContext(Iexpr3Context,0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexpr2(this);
		}
	}


}



class Iexpr3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexpr3;
    }

	iexpr4() {
	    return this.getTypedRuleContext(Iexpr4Context,0);
	};

	POWER() {
	    return this.getToken(Fortran77Parser.POWER, 0);
	};

	iexpr3() {
	    return this.getTypedRuleContext(Iexpr3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexpr3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexpr3(this);
		}
	}


}



class Iexpr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_iexpr4;
    }

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	varRefCode() {
	    return this.getTypedRuleContext(VarRefCodeContext,0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	iexprCode() {
	    return this.getTypedRuleContext(IexprCodeContext,0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIexpr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIexpr4(this);
		}
	}


}



class ConstantExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_constantExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterConstantExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitConstantExpr(this);
		}
	}


}



class ArithmeticExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arithmeticExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArithmeticExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArithmeticExpression(this);
		}
	}


}



class IntegerExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_integerExpr;
    }

	iexpr() {
	    return this.getTypedRuleContext(IexprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIntegerExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIntegerExpr(this);
		}
	}


}



class IntRealDpExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_intRealDpExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIntRealDpExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIntRealDpExpr(this);
		}
	}


}



class ArithmeticConstExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arithmeticConstExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArithmeticConstExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArithmeticConstExpr(this);
		}
	}


}



class IntConstantExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_intConstantExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIntConstantExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIntConstantExpr(this);
		}
	}


}



class CharacterExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_characterExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterCharacterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitCharacterExpression(this);
		}
	}


}



class ConcatOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_concatOp;
    }

	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.DIV);
	    } else {
	        return this.getToken(Fortran77Parser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterConcatOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitConcatOp(this);
		}
	}


}



class LogicalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_logicalExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLogicalExpression(this);
		}
	}


}



class LogicalConstExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_logicalConstExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLogicalConstExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLogicalConstExpr(this);
		}
	}


}



class ArrayElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayElementName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	integerExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerExprContext);
	    } else {
	        return this.getTypedRuleContext(IntegerExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayElementName(this);
		}
	}


}



class SubscriptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subscripts;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.COMMA);
	    } else {
	        return this.getToken(Fortran77Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubscripts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubscripts(this);
		}
	}


}



class VarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_varRef;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	REAL() {
	    return this.getToken(Fortran77Parser.REAL, 0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	substringApp() {
	    return this.getTypedRuleContext(SubstringAppContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitVarRef(this);
		}
	}


}



class VarRefCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_varRefCode;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	subscripts() {
	    return this.getTypedRuleContext(SubscriptsContext,0);
	};

	substringApp() {
	    return this.getTypedRuleContext(SubstringAppContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterVarRefCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitVarRefCode(this);
		}
	}


}



class SubstringAppContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_substringApp;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	COLON() {
	    return this.getToken(Fortran77Parser.COLON, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	ncExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NcExprContext);
	    } else {
	        return this.getTypedRuleContext(NcExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubstringApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubstringApp(this);
		}
	}


}



class VariableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_variableName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterVariableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitVariableName(this);
		}
	}


}



class ArrayNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_arrayName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterArrayName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitArrayName(this);
		}
	}


}



class SubroutineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_subroutineName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterSubroutineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitSubroutineName(this);
		}
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_functionName;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitFunctionName(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_constant;
    }

	unsignedArithmeticConstant() {
	    return this.getTypedRuleContext(UnsignedArithmeticConstantContext,0);
	};

	PLUS() {
	    return this.getToken(Fortran77Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(Fortran77Parser.MINUS, 0);
	};

	SCON() {
	    return this.getToken(Fortran77Parser.SCON, 0);
	};

	HOLLERITH() {
	    return this.getToken(Fortran77Parser.HOLLERITH, 0);
	};

	logicalConstant() {
	    return this.getTypedRuleContext(LogicalConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitConstant(this);
		}
	}


}



class UnsignedArithmeticConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_unsignedArithmeticConstant;
    }

	ICON() {
	    return this.getToken(Fortran77Parser.ICON, 0);
	};

	RCON() {
	    return this.getToken(Fortran77Parser.RCON, 0);
	};

	complexConstant() {
	    return this.getTypedRuleContext(ComplexConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterUnsignedArithmeticConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitUnsignedArithmeticConstant(this);
		}
	}


}



class ComplexConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_complexConstant;
    }

	LPAREN() {
	    return this.getToken(Fortran77Parser.LPAREN, 0);
	};

	COMMA() {
	    return this.getToken(Fortran77Parser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(Fortran77Parser.RPAREN, 0);
	};

	ICON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.ICON);
	    } else {
	        return this.getToken(Fortran77Parser.ICON, i);
	    }
	};


	RCON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.RCON);
	    } else {
	        return this.getToken(Fortran77Parser.RCON, i);
	    }
	};


	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.PLUS);
	    } else {
	        return this.getToken(Fortran77Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Fortran77Parser.MINUS);
	    } else {
	        return this.getToken(Fortran77Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterComplexConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitComplexConstant(this);
		}
	}


}



class LogicalConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_logicalConstant;
    }

	TRUE() {
	    return this.getToken(Fortran77Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Fortran77Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterLogicalConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitLogicalConstant(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_identifier;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	REAL() {
	    return this.getToken(Fortran77Parser.REAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class ToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Fortran77Parser.RULE_to;
    }

	NAME() {
	    return this.getToken(Fortran77Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.enterTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Fortran77ParserListener ) {
	        listener.exitTo(this);
		}
	}


}




Fortran77Parser.CommentStatementContext = CommentStatementContext; 
Fortran77Parser.ProgramContext = ProgramContext; 
Fortran77Parser.ExecutableUnitContext = ExecutableUnitContext; 
Fortran77Parser.MainProgramContext = MainProgramContext; 
Fortran77Parser.FunctionSubprogramContext = FunctionSubprogramContext; 
Fortran77Parser.SubroutineSubprogramContext = SubroutineSubprogramContext; 
Fortran77Parser.BlockdataSubprogramContext = BlockdataSubprogramContext; 
Fortran77Parser.OtherSpecificationStatementContext = OtherSpecificationStatementContext; 
Fortran77Parser.ExecutableStatementContext = ExecutableStatementContext; 
Fortran77Parser.ProgramStatementContext = ProgramStatementContext; 
Fortran77Parser.EntryStatementContext = EntryStatementContext; 
Fortran77Parser.FunctionStatementContext = FunctionStatementContext; 
Fortran77Parser.BlockdataStatementContext = BlockdataStatementContext; 
Fortran77Parser.SubroutineStatementContext = SubroutineStatementContext; 
Fortran77Parser.NamelistContext = NamelistContext; 
Fortran77Parser.StatementContext = StatementContext; 
Fortran77Parser.SubprogramBodyContext = SubprogramBodyContext; 
Fortran77Parser.WholeStatementContext = WholeStatementContext; 
Fortran77Parser.EndStatementContext = EndStatementContext; 
Fortran77Parser.DimensionStatementContext = DimensionStatementContext; 
Fortran77Parser.ArrayDeclaratorContext = ArrayDeclaratorContext; 
Fortran77Parser.ArrayDeclaratorsContext = ArrayDeclaratorsContext; 
Fortran77Parser.ArrayDeclaratorExtentsContext = ArrayDeclaratorExtentsContext; 
Fortran77Parser.ArrayDeclaratorExtentContext = ArrayDeclaratorExtentContext; 
Fortran77Parser.EquivalenceStatementContext = EquivalenceStatementContext; 
Fortran77Parser.EquivEntityGroupContext = EquivEntityGroupContext; 
Fortran77Parser.EquivEntityContext = EquivEntityContext; 
Fortran77Parser.CommonStatementContext = CommonStatementContext; 
Fortran77Parser.CommonNameContext = CommonNameContext; 
Fortran77Parser.CommonItemContext = CommonItemContext; 
Fortran77Parser.CommonItemsContext = CommonItemsContext; 
Fortran77Parser.CommonBlockContext = CommonBlockContext; 
Fortran77Parser.TypeStatementContext = TypeStatementContext; 
Fortran77Parser.TypeStatementNameListContext = TypeStatementNameListContext; 
Fortran77Parser.TypeStatementNameContext = TypeStatementNameContext; 
Fortran77Parser.TypeStatementNameCharListContext = TypeStatementNameCharListContext; 
Fortran77Parser.TypeStatementNameCharContext = TypeStatementNameCharContext; 
Fortran77Parser.TypeStatementLenSpecContext = TypeStatementLenSpecContext; 
Fortran77Parser.Typename_Context = Typename_Context; 
Fortran77Parser.Type_Context = Type_Context; 
Fortran77Parser.TypenameLenContext = TypenameLenContext; 
Fortran77Parser.PointerStatementContext = PointerStatementContext; 
Fortran77Parser.PointerDeclContext = PointerDeclContext; 
Fortran77Parser.ImplicitStatementContext = ImplicitStatementContext; 
Fortran77Parser.ImplicitSpecContext = ImplicitSpecContext; 
Fortran77Parser.ImplicitSpecsContext = ImplicitSpecsContext; 
Fortran77Parser.ImplicitNoneContext = ImplicitNoneContext; 
Fortran77Parser.ImplicitLetterContext = ImplicitLetterContext; 
Fortran77Parser.ImplicitRangeContext = ImplicitRangeContext; 
Fortran77Parser.ImplicitLettersContext = ImplicitLettersContext; 
Fortran77Parser.LenSpecificationContext = LenSpecificationContext; 
Fortran77Parser.CharacterWithLenContext = CharacterWithLenContext; 
Fortran77Parser.CwlLenContext = CwlLenContext; 
Fortran77Parser.ParameterStatementContext = ParameterStatementContext; 
Fortran77Parser.ParamlistContext = ParamlistContext; 
Fortran77Parser.ParamassignContext = ParamassignContext; 
Fortran77Parser.ExternalStatementContext = ExternalStatementContext; 
Fortran77Parser.IntrinsicStatementContext = IntrinsicStatementContext; 
Fortran77Parser.SaveStatementContext = SaveStatementContext; 
Fortran77Parser.SaveEntityContext = SaveEntityContext; 
Fortran77Parser.DataStatementContext = DataStatementContext; 
Fortran77Parser.DataStatementItemContext = DataStatementItemContext; 
Fortran77Parser.DataStatementMultipleContext = DataStatementMultipleContext; 
Fortran77Parser.DataStatementEntityContext = DataStatementEntityContext; 
Fortran77Parser.Dse1Context = Dse1Context; 
Fortran77Parser.Dse2Context = Dse2Context; 
Fortran77Parser.DataImpliedDoContext = DataImpliedDoContext; 
Fortran77Parser.DataImpliedDoRangeContext = DataImpliedDoRangeContext; 
Fortran77Parser.DataImpliedDoListContext = DataImpliedDoListContext; 
Fortran77Parser.DataImpliedDoListWhatContext = DataImpliedDoListWhatContext; 
Fortran77Parser.GotoStatementContext = GotoStatementContext; 
Fortran77Parser.UnconditionalGotoContext = UnconditionalGotoContext; 
Fortran77Parser.ComputedGotoContext = ComputedGotoContext; 
Fortran77Parser.LblRefContext = LblRefContext; 
Fortran77Parser.LabelListContext = LabelListContext; 
Fortran77Parser.AssignedGotoContext = AssignedGotoContext; 
Fortran77Parser.IfStatementContext = IfStatementContext; 
Fortran77Parser.ArithmeticIfStatementContext = ArithmeticIfStatementContext; 
Fortran77Parser.LogicalIfStatementContext = LogicalIfStatementContext; 
Fortran77Parser.BlockIfStatementContext = BlockIfStatementContext; 
Fortran77Parser.FirstIfBlockContext = FirstIfBlockContext; 
Fortran77Parser.ElseIfStatementContext = ElseIfStatementContext; 
Fortran77Parser.ElseStatementContext = ElseStatementContext; 
Fortran77Parser.EndIfStatementContext = EndIfStatementContext; 
Fortran77Parser.DoStatementContext = DoStatementContext; 
Fortran77Parser.DoVarArgsContext = DoVarArgsContext; 
Fortran77Parser.DoWithLabelContext = DoWithLabelContext; 
Fortran77Parser.DoBodyContext = DoBodyContext; 
Fortran77Parser.DoWithEndDoContext = DoWithEndDoContext; 
Fortran77Parser.EnddoStatementContext = EnddoStatementContext; 
Fortran77Parser.ContinueStatementContext = ContinueStatementContext; 
Fortran77Parser.StopStatementContext = StopStatementContext; 
Fortran77Parser.PauseStatementContext = PauseStatementContext; 
Fortran77Parser.WriteStatementContext = WriteStatementContext; 
Fortran77Parser.ReadStatementContext = ReadStatementContext; 
Fortran77Parser.PrintStatementContext = PrintStatementContext; 
Fortran77Parser.AssignmentStatementContext = AssignmentStatementContext; 
Fortran77Parser.ControlInfoListContext = ControlInfoListContext; 
Fortran77Parser.ControlErrSpecContext = ControlErrSpecContext; 
Fortran77Parser.ControlInfoListItemContext = ControlInfoListItemContext; 
Fortran77Parser.IoListContext = IoListContext; 
Fortran77Parser.IoListItemContext = IoListItemContext; 
Fortran77Parser.IoImpliedDoListContext = IoImpliedDoListContext; 
Fortran77Parser.OpenStatementContext = OpenStatementContext; 
Fortran77Parser.OpenControlContext = OpenControlContext; 
Fortran77Parser.ControlFmtContext = ControlFmtContext; 
Fortran77Parser.ControlUnitContext = ControlUnitContext; 
Fortran77Parser.ControlRecContext = ControlRecContext; 
Fortran77Parser.ControlEndContext = ControlEndContext; 
Fortran77Parser.ControlErrContext = ControlErrContext; 
Fortran77Parser.ControlIostatContext = ControlIostatContext; 
Fortran77Parser.ControlFileContext = ControlFileContext; 
Fortran77Parser.ControlStatusContext = ControlStatusContext; 
Fortran77Parser.ControlAccessContext = ControlAccessContext; 
Fortran77Parser.ControlPositionContext = ControlPositionContext; 
Fortran77Parser.ControlFormContext = ControlFormContext; 
Fortran77Parser.ControlReclContext = ControlReclContext; 
Fortran77Parser.ControlBlankContext = ControlBlankContext; 
Fortran77Parser.ControlExistContext = ControlExistContext; 
Fortran77Parser.ControlOpenedContext = ControlOpenedContext; 
Fortran77Parser.ControlNumberContext = ControlNumberContext; 
Fortran77Parser.ControlNamedContext = ControlNamedContext; 
Fortran77Parser.ControlNameContext = ControlNameContext; 
Fortran77Parser.ControlSequentialContext = ControlSequentialContext; 
Fortran77Parser.ControlDirectContext = ControlDirectContext; 
Fortran77Parser.ControlFormattedContext = ControlFormattedContext; 
Fortran77Parser.ControlUnformattedContext = ControlUnformattedContext; 
Fortran77Parser.ControlNextrecContext = ControlNextrecContext; 
Fortran77Parser.CloseStatementContext = CloseStatementContext; 
Fortran77Parser.CloseControlContext = CloseControlContext; 
Fortran77Parser.InquireStatementContext = InquireStatementContext; 
Fortran77Parser.InquireControlContext = InquireControlContext; 
Fortran77Parser.BackspaceStatementContext = BackspaceStatementContext; 
Fortran77Parser.EndfileStatementContext = EndfileStatementContext; 
Fortran77Parser.RewindStatementContext = RewindStatementContext; 
Fortran77Parser.BerFinishContext = BerFinishContext; 
Fortran77Parser.BerFinishItemContext = BerFinishItemContext; 
Fortran77Parser.UnitIdentifierContext = UnitIdentifierContext; 
Fortran77Parser.FormatIdentifierContext = FormatIdentifierContext; 
Fortran77Parser.FormatStatementContext = FormatStatementContext; 
Fortran77Parser.FmtSpecContext = FmtSpecContext; 
Fortran77Parser.FormatsepContext = FormatsepContext; 
Fortran77Parser.FormateditContext = FormateditContext; 
Fortran77Parser.EditElementContext = EditElementContext; 
Fortran77Parser.StatementFunctionStatementContext = StatementFunctionStatementContext; 
Fortran77Parser.SfArgsContext = SfArgsContext; 
Fortran77Parser.CallStatementContext = CallStatementContext; 
Fortran77Parser.SubroutineCallContext = SubroutineCallContext; 
Fortran77Parser.CallArgumentListContext = CallArgumentListContext; 
Fortran77Parser.CallArgumentContext = CallArgumentContext; 
Fortran77Parser.ReturnStatementContext = ReturnStatementContext; 
Fortran77Parser.ExpressionContext = ExpressionContext; 
Fortran77Parser.NcExprContext = NcExprContext; 
Fortran77Parser.Lexpr0Context = Lexpr0Context; 
Fortran77Parser.Lexpr1Context = Lexpr1Context; 
Fortran77Parser.Lexpr2Context = Lexpr2Context; 
Fortran77Parser.Lexpr3Context = Lexpr3Context; 
Fortran77Parser.Lexpr4Context = Lexpr4Context; 
Fortran77Parser.Aexpr0Context = Aexpr0Context; 
Fortran77Parser.Aexpr1Context = Aexpr1Context; 
Fortran77Parser.Aexpr2Context = Aexpr2Context; 
Fortran77Parser.Aexpr3Context = Aexpr3Context; 
Fortran77Parser.Aexpr4Context = Aexpr4Context; 
Fortran77Parser.IexprContext = IexprContext; 
Fortran77Parser.IexprCodeContext = IexprCodeContext; 
Fortran77Parser.Iexpr1Context = Iexpr1Context; 
Fortran77Parser.Iexpr2Context = Iexpr2Context; 
Fortran77Parser.Iexpr3Context = Iexpr3Context; 
Fortran77Parser.Iexpr4Context = Iexpr4Context; 
Fortran77Parser.ConstantExprContext = ConstantExprContext; 
Fortran77Parser.ArithmeticExpressionContext = ArithmeticExpressionContext; 
Fortran77Parser.IntegerExprContext = IntegerExprContext; 
Fortran77Parser.IntRealDpExprContext = IntRealDpExprContext; 
Fortran77Parser.ArithmeticConstExprContext = ArithmeticConstExprContext; 
Fortran77Parser.IntConstantExprContext = IntConstantExprContext; 
Fortran77Parser.CharacterExpressionContext = CharacterExpressionContext; 
Fortran77Parser.ConcatOpContext = ConcatOpContext; 
Fortran77Parser.LogicalExpressionContext = LogicalExpressionContext; 
Fortran77Parser.LogicalConstExprContext = LogicalConstExprContext; 
Fortran77Parser.ArrayElementNameContext = ArrayElementNameContext; 
Fortran77Parser.SubscriptsContext = SubscriptsContext; 
Fortran77Parser.VarRefContext = VarRefContext; 
Fortran77Parser.VarRefCodeContext = VarRefCodeContext; 
Fortran77Parser.SubstringAppContext = SubstringAppContext; 
Fortran77Parser.VariableNameContext = VariableNameContext; 
Fortran77Parser.ArrayNameContext = ArrayNameContext; 
Fortran77Parser.SubroutineNameContext = SubroutineNameContext; 
Fortran77Parser.FunctionNameContext = FunctionNameContext; 
Fortran77Parser.ConstantContext = ConstantContext; 
Fortran77Parser.UnsignedArithmeticConstantContext = UnsignedArithmeticConstantContext; 
Fortran77Parser.ComplexConstantContext = ComplexConstantContext; 
Fortran77Parser.LogicalConstantContext = LogicalConstantContext; 
Fortran77Parser.IdentifierContext = IdentifierContext; 
Fortran77Parser.ToContext = ToContext; 
