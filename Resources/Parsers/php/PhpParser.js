// Generated from Resources/Parsers/php/PhpParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import PhpParserListener from './PhpParserListener.js';
const serializedATN = [4,1,239,1779,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,1,0,3,0,264,8,0,1,0,1,0,5,0,268,8,0,10,0,12,0,271,9,0,1,0,1,
0,1,1,4,1,276,8,1,11,1,12,1,277,1,1,3,1,281,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,305,
8,2,10,2,12,2,308,9,2,1,2,3,2,311,8,2,1,3,4,3,314,8,3,11,3,12,3,315,1,4,
5,4,319,8,4,10,4,12,4,322,9,4,1,4,4,4,325,8,4,11,4,12,4,326,1,5,1,5,1,5,
1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,340,8,6,1,7,1,7,3,7,344,8,7,1,7,1,7,
1,7,1,8,3,8,350,8,8,1,8,1,8,1,8,3,8,355,8,8,1,8,5,8,358,8,8,10,8,12,8,361,
9,8,1,9,1,9,1,10,1,10,3,10,367,8,10,1,10,1,10,5,10,371,8,10,10,10,12,10,
374,9,10,1,10,1,10,1,10,1,10,3,10,380,8,10,1,11,1,11,1,11,1,11,1,11,3,11,
387,8,11,1,12,3,12,390,8,12,1,12,1,12,3,12,394,8,12,1,12,1,12,3,12,398,8,
12,1,12,1,12,1,12,1,12,1,12,3,12,405,8,12,1,12,3,12,408,8,12,1,12,1,12,1,
13,3,13,413,8,13,1,13,3,13,416,8,13,1,13,3,13,419,8,13,1,13,3,13,422,8,13,
1,13,1,13,1,13,3,13,427,8,13,1,13,1,13,3,13,431,8,13,1,13,1,13,3,13,435,
8,13,1,13,1,13,1,13,3,13,440,8,13,1,13,1,13,3,13,444,8,13,3,13,446,8,13,
1,13,1,13,5,13,450,8,13,10,13,12,13,453,9,13,1,13,1,13,1,14,1,14,1,15,1,
15,1,15,5,15,462,8,15,10,15,12,15,465,9,15,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,481,8,16,1,17,1,17,1,17,5,17,
486,8,17,10,17,12,17,489,9,17,1,18,1,18,1,18,5,18,494,8,18,10,18,12,18,497,
9,18,1,19,3,19,500,8,19,1,19,1,19,1,20,3,20,505,8,20,1,20,1,20,1,20,1,20,
3,20,511,8,20,1,21,1,21,1,21,1,21,5,21,517,8,21,10,21,12,21,520,9,21,1,21,
1,21,1,22,4,22,525,8,22,11,22,12,22,526,1,23,1,23,1,23,1,23,3,23,533,8,23,
1,23,1,23,1,23,5,23,538,8,23,10,23,12,23,541,9,23,1,23,1,23,1,24,1,24,3,
24,547,8,24,1,25,5,25,550,8,25,10,25,12,25,553,9,25,1,26,1,26,1,26,3,26,
558,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
27,587,8,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,599,8,
30,10,30,12,30,602,9,30,1,30,3,30,605,8,30,1,30,1,30,1,30,1,30,1,30,5,30,
612,8,30,10,30,12,30,615,9,30,1,30,3,30,618,8,30,1,30,1,30,1,30,3,30,623,
8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,
34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,649,8,35,1,36,
1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,3,37,660,8,37,1,37,1,37,3,37,664,
8,37,1,37,1,37,3,37,668,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,677,
8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,3,40,687,8,40,1,40,5,40,690,
8,40,10,40,12,40,693,9,40,1,40,1,40,1,40,3,40,698,8,40,1,40,5,40,701,8,40,
10,40,12,40,704,9,40,1,40,1,40,3,40,708,8,40,1,41,1,41,1,41,3,41,713,8,41,
1,41,4,41,716,8,41,11,41,12,41,717,1,41,1,41,1,42,1,42,3,42,724,8,42,1,42,
1,42,1,43,1,43,3,43,730,8,43,1,43,1,43,1,44,1,44,3,44,736,8,44,1,44,1,44,
1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,
47,754,8,47,1,47,1,47,1,47,3,47,759,8,47,1,47,3,47,762,8,47,1,47,1,47,1,
47,1,47,1,47,1,47,1,47,1,47,3,47,772,8,47,1,47,3,47,775,8,47,1,47,1,47,1,
47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,788,8,47,1,47,1,47,1,47,
1,47,1,47,1,47,3,47,796,8,47,1,48,1,48,1,48,4,48,801,8,48,11,48,12,48,802,
1,48,3,48,806,8,48,1,48,5,48,809,8,48,10,48,12,48,812,9,48,1,48,3,48,815,
8,48,1,49,1,49,1,49,1,49,1,49,5,49,822,8,49,10,49,12,49,825,9,49,1,49,1,
49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,852,8,53,1,54,4,54,855,
8,54,11,54,12,54,856,1,55,1,55,1,55,5,55,862,8,55,10,55,12,55,865,9,55,1,
56,3,56,868,8,56,1,56,1,56,5,56,872,8,56,10,56,12,56,875,9,56,1,56,3,56,
878,8,56,1,57,3,57,881,8,57,1,57,3,57,884,8,57,1,57,3,57,887,8,57,1,57,3,
57,890,8,57,1,57,3,57,893,8,57,1,57,3,57,896,8,57,1,57,1,57,1,58,1,58,1,
58,1,58,3,58,904,8,58,1,58,1,58,1,58,5,58,909,8,58,10,58,12,58,912,9,58,
1,59,1,59,1,59,1,59,5,59,918,8,59,10,59,12,59,921,9,59,1,59,1,59,1,60,1,
60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,933,8,60,1,61,1,61,1,61,1,61,1,62,
1,62,1,62,1,62,5,62,943,8,62,10,62,12,62,946,9,62,1,62,1,62,1,63,3,63,951,
8,63,1,63,1,63,3,63,955,8,63,1,63,1,63,1,63,5,63,960,8,63,10,63,12,63,963,
9,63,1,63,1,63,1,63,3,63,968,8,63,1,63,1,63,3,63,972,8,63,1,63,1,63,1,63,
5,63,977,8,63,10,63,12,63,980,9,63,1,63,1,63,1,63,1,63,3,63,986,8,63,1,63,
1,63,3,63,990,8,63,1,63,1,63,1,63,1,63,3,63,996,8,63,1,63,1,63,3,63,1000,
8,63,3,63,1002,8,63,1,63,1,63,1,63,1,63,3,63,1008,8,63,1,64,1,64,1,64,5,
64,1013,8,64,10,64,12,64,1016,9,64,1,64,3,64,1019,8,64,1,65,1,65,3,65,1023,
8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,1036,8,
67,1,67,3,67,1039,8,67,1,67,1,67,1,68,1,68,1,68,3,68,1046,8,68,1,68,1,68,
1,69,1,69,1,69,3,69,1053,8,69,1,70,1,70,3,70,1057,8,70,1,71,1,71,3,71,1061,
8,71,1,72,4,72,1064,8,72,11,72,12,72,1065,1,73,1,73,1,73,3,73,1071,8,73,
1,74,1,74,1,74,1,74,1,75,3,75,1078,8,75,1,75,1,75,1,75,1,75,5,75,1084,8,
75,10,75,12,75,1087,9,75,1,75,1,75,1,76,1,76,1,76,5,76,1094,8,76,10,76,12,
76,1097,9,76,1,77,1,77,1,77,3,77,1102,8,77,1,77,1,77,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1165,8,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1178,8,78,1,
78,1,78,1,78,1,78,1,78,3,78,1185,8,78,1,78,1,78,1,78,3,78,1190,8,78,3,78,
1192,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1230,8,78,1,78,1,78,1,
78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,1,78,5,78,1252,8,78,10,78,12,78,1255,9,78,1,79,1,79,3,79,1259,
8,79,1,80,1,80,1,80,3,80,1264,8,80,1,80,1,80,1,80,3,80,1269,8,80,1,80,3,
80,1272,8,80,1,80,1,80,1,80,1,80,3,80,1278,8,80,1,81,3,81,1281,8,81,1,81,
1,81,3,81,1285,8,81,1,81,1,81,1,81,1,81,3,81,1291,8,81,1,81,1,81,3,81,1295,
8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1306,8,81,1,82,1,
82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1316,8,82,10,82,12,82,1319,9,82,1,
82,3,82,1322,8,82,1,82,1,82,1,83,1,83,1,83,5,83,1329,8,83,10,83,12,83,1332,
9,83,1,83,1,83,1,83,1,84,1,84,1,84,3,84,1340,8,84,1,85,1,85,1,86,1,86,1,
86,1,86,3,86,1348,8,86,1,86,1,86,3,86,1352,8,86,1,87,1,87,1,87,5,87,1357,
8,87,10,87,12,87,1360,9,87,1,87,3,87,1363,8,87,1,88,1,88,1,88,3,88,1368,
8,88,1,88,1,88,1,88,3,88,1373,8,88,1,88,1,88,3,88,1377,8,88,1,89,1,89,1,
89,1,89,1,89,5,89,1384,8,89,10,89,12,89,1387,9,89,1,89,1,89,1,90,3,90,1392,
8,90,1,90,1,90,1,91,1,91,3,91,1398,8,91,1,91,3,91,1401,8,91,1,92,1,92,3,
92,1405,8,92,1,92,3,92,1408,8,92,1,92,1,92,1,92,3,92,1413,8,92,1,93,3,93,
1416,8,93,1,93,3,93,1419,8,93,1,93,3,93,1422,8,93,1,93,3,93,1425,8,93,1,
93,1,93,3,93,1429,8,93,1,93,1,93,3,93,1433,8,93,1,93,1,93,3,93,1437,8,93,
1,93,1,93,1,93,3,93,1442,8,93,1,93,1,93,3,93,1446,8,93,3,93,1448,8,93,1,
93,1,93,5,93,1452,8,93,10,93,12,93,1455,9,93,1,93,1,93,1,94,1,94,1,94,5,
94,1462,8,94,10,94,12,94,1465,9,94,1,95,3,95,1468,8,95,1,95,3,95,1471,8,
95,1,95,1,95,1,96,1,96,1,96,1,96,5,96,1479,8,96,10,96,12,96,1482,9,96,1,
96,1,96,3,96,1486,8,96,3,96,1488,8,96,1,97,1,97,1,97,3,97,1493,8,97,1,97,
1,97,1,97,1,97,5,97,1499,8,97,10,97,12,97,1502,9,97,1,97,3,97,1505,8,97,
1,97,1,97,3,97,1509,8,97,1,98,1,98,1,98,5,98,1514,8,98,10,98,12,98,1517,
9,98,1,99,1,99,1,99,1,99,5,99,1523,8,99,10,99,12,99,1526,9,99,1,99,3,99,
1529,8,99,1,99,3,99,1532,8,99,1,99,1,99,1,100,3,100,1537,8,100,1,100,3,100,
1540,8,100,1,100,1,100,1,100,3,100,1545,8,100,1,101,1,101,1,101,1,102,1,
102,1,102,1,102,1,102,1,102,3,102,1556,8,102,3,102,1558,8,102,1,102,1,102,
1,102,1,102,3,102,1564,8,102,3,102,1566,8,102,1,102,1,102,1,102,3,102,1571,
8,102,1,103,1,103,1,103,1,103,1,103,3,103,1578,8,103,1,104,1,104,1,104,1,
104,3,104,1584,8,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
1594,8,106,1,106,1,106,1,106,3,106,1599,8,106,1,106,1,106,1,106,3,106,1604,
8,106,3,106,1606,8,106,1,107,1,107,1,108,1,108,4,108,1612,8,108,11,108,12,
108,1613,1,108,1,108,4,108,1618,8,108,11,108,12,108,1619,1,108,1,108,1,108,
5,108,1625,8,108,10,108,12,108,1628,9,108,1,108,3,108,1631,8,108,1,109,1,
109,1,109,3,109,1636,8,109,1,110,1,110,1,110,5,110,1641,8,110,10,110,12,
110,1644,9,110,1,111,1,111,5,111,1648,8,111,10,111,12,111,1651,9,111,1,112,
1,112,1,112,1,112,1,112,1,112,3,112,1659,8,112,1,113,1,113,1,113,3,113,1664,
8,113,1,114,1,114,1,114,1,115,1,115,1,115,1,115,3,115,1673,8,115,1,116,3,
116,1676,8,116,1,116,1,116,5,116,1680,8,116,10,116,12,116,1683,9,116,1,117,
1,117,1,117,3,117,1688,8,117,1,117,1,117,1,117,1,117,3,117,1694,8,117,1,
118,1,118,3,118,1698,8,118,1,119,1,119,1,119,1,119,1,119,3,119,1705,8,119,
1,119,5,119,1708,8,119,10,119,12,119,1711,9,119,1,120,5,120,1714,8,120,10,
120,12,120,1717,9,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1725,8,120,
1,120,5,120,1728,8,120,10,120,12,120,1731,9,120,1,121,1,121,3,121,1735,8,
121,1,121,1,121,1,121,1,121,1,121,3,121,1742,8,121,1,122,3,122,1745,8,122,
1,122,1,122,3,122,1749,8,122,5,122,1751,8,122,10,122,12,122,1754,9,122,1,
123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1763,8,123,1,124,1,124,1,125,
1,125,1,126,1,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,130,
0,2,116,156,131,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
238,240,242,244,246,248,250,252,254,256,258,260,0,24,2,0,56,56,81,81,2,0,
54,54,120,120,1,0,214,215,1,0,202,203,2,0,195,195,197,198,1,0,160,161,1,
0,87,88,1,0,112,113,1,0,199,201,2,0,197,198,205,205,1,0,185,186,2,0,166,
167,191,192,1,0,162,165,4,0,168,170,172,180,184,184,216,216,1,0,197,198,
2,0,221,222,224,225,2,0,54,54,106,106,2,0,44,44,76,76,4,0,44,100,102,130,
132,155,220,220,4,0,44,44,76,76,109,111,116,116,1,0,148,155,1,0,132,147,
7,0,45,45,48,48,62,62,93,94,105,105,114,114,117,117,9,0,45,45,47,48,61,62,
78,78,91,94,105,105,114,114,117,117,123,125,1991,0,263,1,0,0,0,2,280,1,0,
0,0,4,310,1,0,0,0,6,313,1,0,0,0,8,320,1,0,0,0,10,328,1,0,0,0,12,339,1,0,
0,0,14,341,1,0,0,0,16,349,1,0,0,0,18,362,1,0,0,0,20,364,1,0,0,0,22,386,1,
0,0,0,24,389,1,0,0,0,26,412,1,0,0,0,28,456,1,0,0,0,30,458,1,0,0,0,32,480,
1,0,0,0,34,482,1,0,0,0,36,490,1,0,0,0,38,499,1,0,0,0,40,504,1,0,0,0,42,512,
1,0,0,0,44,524,1,0,0,0,46,528,1,0,0,0,48,544,1,0,0,0,50,551,1,0,0,0,52,557,
1,0,0,0,54,586,1,0,0,0,56,588,1,0,0,0,58,590,1,0,0,0,60,622,1,0,0,0,62,624,
1,0,0,0,64,628,1,0,0,0,66,633,1,0,0,0,68,636,1,0,0,0,70,640,1,0,0,0,72,650,
1,0,0,0,74,656,1,0,0,0,76,678,1,0,0,0,78,680,1,0,0,0,80,682,1,0,0,0,82,715,
1,0,0,0,84,721,1,0,0,0,86,727,1,0,0,0,88,733,1,0,0,0,90,739,1,0,0,0,92,742,
1,0,0,0,94,748,1,0,0,0,96,797,1,0,0,0,98,816,1,0,0,0,100,830,1,0,0,0,102,
833,1,0,0,0,104,837,1,0,0,0,106,841,1,0,0,0,108,854,1,0,0,0,110,858,1,0,
0,0,112,867,1,0,0,0,114,880,1,0,0,0,116,903,1,0,0,0,118,913,1,0,0,0,120,
932,1,0,0,0,122,934,1,0,0,0,124,938,1,0,0,0,126,1007,1,0,0,0,128,1018,1,
0,0,0,130,1022,1,0,0,0,132,1024,1,0,0,0,134,1031,1,0,0,0,136,1045,1,0,0,
0,138,1049,1,0,0,0,140,1056,1,0,0,0,142,1060,1,0,0,0,144,1063,1,0,0,0,146,
1067,1,0,0,0,148,1072,1,0,0,0,150,1077,1,0,0,0,152,1090,1,0,0,0,154,1098,
1,0,0,0,156,1191,1,0,0,0,158,1258,1,0,0,0,160,1271,1,0,0,0,162,1305,1,0,
0,0,164,1307,1,0,0,0,166,1325,1,0,0,0,168,1336,1,0,0,0,170,1341,1,0,0,0,
172,1343,1,0,0,0,174,1353,1,0,0,0,176,1376,1,0,0,0,178,1378,1,0,0,0,180,
1391,1,0,0,0,182,1400,1,0,0,0,184,1412,1,0,0,0,186,1415,1,0,0,0,188,1458,
1,0,0,0,190,1467,1,0,0,0,192,1487,1,0,0,0,194,1508,1,0,0,0,196,1510,1,0,
0,0,198,1518,1,0,0,0,200,1544,1,0,0,0,202,1546,1,0,0,0,204,1570,1,0,0,0,
206,1577,1,0,0,0,208,1583,1,0,0,0,210,1585,1,0,0,0,212,1605,1,0,0,0,214,
1607,1,0,0,0,216,1630,1,0,0,0,218,1635,1,0,0,0,220,1637,1,0,0,0,222,1645,
1,0,0,0,224,1658,1,0,0,0,226,1660,1,0,0,0,228,1665,1,0,0,0,230,1672,1,0,
0,0,232,1675,1,0,0,0,234,1693,1,0,0,0,236,1697,1,0,0,0,238,1704,1,0,0,0,
240,1715,1,0,0,0,242,1741,1,0,0,0,244,1744,1,0,0,0,246,1762,1,0,0,0,248,
1764,1,0,0,0,250,1766,1,0,0,0,252,1768,1,0,0,0,254,1770,1,0,0,0,256,1772,
1,0,0,0,258,1774,1,0,0,0,260,1776,1,0,0,0,262,264,5,10,0,0,263,262,1,0,0,
0,263,264,1,0,0,0,264,269,1,0,0,0,265,268,3,2,1,0,266,268,3,8,4,0,267,265,
1,0,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,
270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,0,0,1,273,1,1,0,0,0,274,276,3,
4,2,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,
281,1,0,0,0,279,281,3,6,3,0,280,275,1,0,0,0,280,279,1,0,0,0,281,3,1,0,0,
0,282,311,5,8,0,0,283,311,5,15,0,0,284,311,5,6,0,0,285,311,5,9,0,0,286,311,
5,24,0,0,287,311,5,16,0,0,288,311,5,17,0,0,289,311,5,2,0,0,290,311,5,18,
0,0,291,311,5,19,0,0,292,311,5,27,0,0,293,311,5,20,0,0,294,311,5,31,0,0,
295,311,5,21,0,0,296,311,5,22,0,0,297,311,5,28,0,0,298,311,5,32,0,0,299,
311,5,37,0,0,300,311,5,5,0,0,301,311,5,35,0,0,302,306,5,3,0,0,303,305,5,
12,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
309,1,0,0,0,308,306,1,0,0,0,309,311,5,13,0,0,310,282,1,0,0,0,310,283,1,0,
0,0,310,284,1,0,0,0,310,285,1,0,0,0,310,286,1,0,0,0,310,287,1,0,0,0,310,
288,1,0,0,0,310,289,1,0,0,0,310,290,1,0,0,0,310,291,1,0,0,0,310,292,1,0,
0,0,310,293,1,0,0,0,310,294,1,0,0,0,310,295,1,0,0,0,310,296,1,0,0,0,310,
297,1,0,0,0,310,298,1,0,0,0,310,299,1,0,0,0,310,300,1,0,0,0,310,301,1,0,
0,0,310,302,1,0,0,0,311,5,1,0,0,0,312,314,5,34,0,0,313,312,1,0,0,0,314,315,
1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,7,1,0,0,0,317,319,3,10,5,0,318,
317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,324,1,0,
0,0,322,320,1,0,0,0,323,325,3,12,6,0,324,323,1,0,0,0,325,326,1,0,0,0,326,
324,1,0,0,0,326,327,1,0,0,0,327,9,1,0,0,0,328,329,5,86,0,0,329,330,5,102,
0,0,330,331,3,192,96,0,331,332,5,215,0,0,332,11,1,0,0,0,333,340,3,54,27,
0,334,340,3,14,7,0,335,340,3,20,10,0,336,340,3,24,12,0,337,340,3,26,13,0,
338,340,3,150,75,0,339,333,1,0,0,0,339,334,1,0,0,0,339,335,1,0,0,0,339,336,
1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,13,1,0,0,0,341,343,5,126,0,0,
342,344,7,0,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,
3,16,8,0,346,347,5,215,0,0,347,15,1,0,0,0,348,350,5,189,0,0,349,348,1,0,
0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,359,3,18,9,0,352,354,5,213,0,0,353,
355,5,189,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,358,3,
18,9,0,357,352,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,
17,1,0,0,0,361,359,1,0,0,0,362,363,3,192,96,0,363,19,1,0,0,0,364,379,5,102,
0,0,365,367,3,192,96,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,
372,5,211,0,0,369,371,3,22,11,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,
1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,380,5,212,0,
0,376,377,3,192,96,0,377,378,5,215,0,0,378,380,1,0,0,0,379,366,1,0,0,0,379,
376,1,0,0,0,380,21,1,0,0,0,381,387,3,54,27,0,382,387,3,14,7,0,383,387,3,
24,12,0,384,387,3,26,13,0,385,387,3,150,75,0,386,381,1,0,0,0,386,382,1,0,
0,0,386,383,1,0,0,0,386,384,1,0,0,0,386,385,1,0,0,0,387,23,1,0,0,0,388,390,
3,44,22,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,393,5,81,0,
0,392,394,5,193,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
397,3,250,125,0,396,398,3,32,16,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,
1,0,0,0,399,400,5,207,0,0,400,401,3,112,56,0,401,407,5,208,0,0,402,404,5,
214,0,0,403,405,5,206,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,
0,406,408,3,116,58,0,407,402,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,
410,3,58,29,0,410,25,1,0,0,0,411,413,3,44,22,0,412,411,1,0,0,0,412,413,1,
0,0,0,413,415,1,0,0,0,414,416,5,109,0,0,415,414,1,0,0,0,415,416,1,0,0,0,
416,418,1,0,0,0,417,419,3,248,124,0,418,417,1,0,0,0,418,419,1,0,0,0,419,
421,1,0,0,0,420,422,5,107,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,445,1,
0,0,0,423,424,3,28,14,0,424,426,3,250,125,0,425,427,3,32,16,0,426,425,1,
0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,428,429,5,75,0,0,429,431,3,182,91,
0,430,428,1,0,0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,433,5,85,0,0,433,435,
3,30,15,0,434,432,1,0,0,0,434,435,1,0,0,0,435,446,1,0,0,0,436,437,5,95,0,
0,437,439,3,250,125,0,438,440,3,32,16,0,439,438,1,0,0,0,439,440,1,0,0,0,
440,443,1,0,0,0,441,442,5,75,0,0,442,444,3,30,15,0,443,441,1,0,0,0,443,444,
1,0,0,0,444,446,1,0,0,0,445,423,1,0,0,0,445,436,1,0,0,0,446,447,1,0,0,0,
447,451,5,211,0,0,448,450,3,126,63,0,449,448,1,0,0,0,450,453,1,0,0,0,451,
449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,455,5,212,
0,0,455,27,1,0,0,0,456,457,7,1,0,0,457,29,1,0,0,0,458,463,3,182,91,0,459,
460,5,213,0,0,460,462,3,182,91,0,461,459,1,0,0,0,462,465,1,0,0,0,463,461,
1,0,0,0,463,464,1,0,0,0,464,31,1,0,0,0,465,463,1,0,0,0,466,467,5,157,0,0,
467,468,3,34,17,0,468,469,5,158,0,0,469,481,1,0,0,0,470,471,5,157,0,0,471,
472,3,36,18,0,472,473,5,158,0,0,473,481,1,0,0,0,474,475,5,157,0,0,475,476,
3,34,17,0,476,477,5,213,0,0,477,478,3,36,18,0,478,479,5,158,0,0,479,481,
1,0,0,0,480,466,1,0,0,0,480,470,1,0,0,0,480,474,1,0,0,0,481,33,1,0,0,0,482,
487,3,38,19,0,483,484,5,213,0,0,484,486,3,38,19,0,485,483,1,0,0,0,486,489,
1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,35,1,0,0,0,489,487,1,0,0,0,490,
495,3,40,20,0,491,492,5,213,0,0,492,494,3,40,20,0,493,491,1,0,0,0,494,497,
1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,37,1,0,0,0,497,495,1,0,0,0,498,
500,3,44,22,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,502,3,
250,125,0,502,39,1,0,0,0,503,505,3,44,22,0,504,503,1,0,0,0,504,505,1,0,0,
0,505,506,1,0,0,0,506,507,3,250,125,0,507,510,5,216,0,0,508,511,3,182,91,
0,509,511,3,258,129,0,510,508,1,0,0,0,510,509,1,0,0,0,511,41,1,0,0,0,512,
513,5,157,0,0,513,518,3,184,92,0,514,515,5,213,0,0,515,517,3,184,92,0,516,
514,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,521,1,0,
0,0,520,518,1,0,0,0,521,522,5,158,0,0,522,43,1,0,0,0,523,525,3,46,23,0,524,
523,1,0,0,0,525,526,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,45,1,0,0,
0,528,532,5,43,0,0,529,530,3,250,125,0,530,531,5,214,0,0,531,533,1,0,0,0,
532,529,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,539,3,48,24,0,535,536,
5,213,0,0,536,538,3,48,24,0,537,535,1,0,0,0,538,541,1,0,0,0,539,537,1,0,
0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,543,5,210,0,0,543,
47,1,0,0,0,544,546,3,190,95,0,545,547,3,198,99,0,546,545,1,0,0,0,546,547,
1,0,0,0,547,49,1,0,0,0,548,550,3,52,26,0,549,548,1,0,0,0,550,553,1,0,0,0,
551,549,1,0,0,0,551,552,1,0,0,0,552,51,1,0,0,0,553,551,1,0,0,0,554,558,3,
54,27,0,555,558,3,24,12,0,556,558,3,26,13,0,557,554,1,0,0,0,557,555,1,0,
0,0,557,556,1,0,0,0,558,53,1,0,0,0,559,560,3,250,125,0,560,561,5,214,0,0,
561,587,1,0,0,0,562,587,3,58,29,0,563,587,3,60,30,0,564,587,3,70,35,0,565,
587,3,72,36,0,566,587,3,74,37,0,567,587,3,80,40,0,568,587,3,84,42,0,569,
587,3,86,43,0,570,587,3,88,44,0,571,572,3,172,86,0,572,573,5,215,0,0,573,
587,1,0,0,0,574,587,3,118,59,0,575,587,3,124,62,0,576,587,3,122,61,0,577,
587,3,90,45,0,578,587,3,92,46,0,579,587,3,94,47,0,580,587,3,96,48,0,581,
587,3,102,51,0,582,587,3,104,52,0,583,587,3,106,53,0,584,587,3,56,28,0,585,
587,3,108,54,0,586,559,1,0,0,0,586,562,1,0,0,0,586,563,1,0,0,0,586,564,1,
0,0,0,586,565,1,0,0,0,586,566,1,0,0,0,586,567,1,0,0,0,586,568,1,0,0,0,586,
569,1,0,0,0,586,570,1,0,0,0,586,571,1,0,0,0,586,574,1,0,0,0,586,575,1,0,
0,0,586,576,1,0,0,0,586,577,1,0,0,0,586,578,1,0,0,0,586,579,1,0,0,0,586,
580,1,0,0,0,586,581,1,0,0,0,586,582,1,0,0,0,586,583,1,0,0,0,586,584,1,0,
0,0,586,585,1,0,0,0,587,55,1,0,0,0,588,589,5,215,0,0,589,57,1,0,0,0,590,
591,5,211,0,0,591,592,3,50,25,0,592,593,5,212,0,0,593,59,1,0,0,0,594,595,
5,84,0,0,595,596,3,154,77,0,596,600,3,54,27,0,597,599,3,62,31,0,598,597,
1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,604,1,0,0,0,
602,600,1,0,0,0,603,605,3,66,33,0,604,603,1,0,0,0,604,605,1,0,0,0,605,623,
1,0,0,0,606,607,5,84,0,0,607,608,3,154,77,0,608,609,5,214,0,0,609,613,3,
50,25,0,610,612,3,64,32,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,
0,613,614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,618,3,68,34,0,617,
616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,5,70,0,0,620,621,5,215,
0,0,621,623,1,0,0,0,622,594,1,0,0,0,622,606,1,0,0,0,623,61,1,0,0,0,624,625,
5,65,0,0,625,626,3,154,77,0,626,627,3,54,27,0,627,63,1,0,0,0,628,629,5,65,
0,0,629,630,3,154,77,0,630,631,5,214,0,0,631,632,3,50,25,0,632,65,1,0,0,
0,633,634,5,64,0,0,634,635,3,54,27,0,635,67,1,0,0,0,636,637,5,64,0,0,637,
638,5,214,0,0,638,639,3,50,25,0,639,69,1,0,0,0,640,641,5,128,0,0,641,648,
3,154,77,0,642,649,3,54,27,0,643,644,5,214,0,0,644,645,3,50,25,0,645,646,
5,72,0,0,646,647,5,215,0,0,647,649,1,0,0,0,648,642,1,0,0,0,648,643,1,0,0,
0,649,71,1,0,0,0,650,651,5,60,0,0,651,652,3,54,27,0,652,653,5,128,0,0,653,
654,3,154,77,0,654,655,5,215,0,0,655,73,1,0,0,0,656,657,5,79,0,0,657,659,
5,207,0,0,658,660,3,76,38,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,
0,0,661,663,5,215,0,0,662,664,3,152,76,0,663,662,1,0,0,0,663,664,1,0,0,0,
664,665,1,0,0,0,665,667,5,215,0,0,666,668,3,78,39,0,667,666,1,0,0,0,667,
668,1,0,0,0,668,669,1,0,0,0,669,676,5,208,0,0,670,677,3,54,27,0,671,672,
5,214,0,0,672,673,3,50,25,0,673,674,5,68,0,0,674,675,5,215,0,0,675,677,1,
0,0,0,676,670,1,0,0,0,676,671,1,0,0,0,677,75,1,0,0,0,678,679,3,152,76,0,
679,77,1,0,0,0,680,681,3,152,76,0,681,79,1,0,0,0,682,683,5,118,0,0,683,707,
3,154,77,0,684,686,5,211,0,0,685,687,5,215,0,0,686,685,1,0,0,0,686,687,1,
0,0,0,687,691,1,0,0,0,688,690,3,82,41,0,689,688,1,0,0,0,690,693,1,0,0,0,
691,689,1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,691,1,0,0,0,694,708,
5,212,0,0,695,697,5,214,0,0,696,698,5,215,0,0,697,696,1,0,0,0,697,698,1,
0,0,0,698,702,1,0,0,0,699,701,3,82,41,0,700,699,1,0,0,0,701,704,1,0,0,0,
702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,
5,71,0,0,706,708,5,215,0,0,707,684,1,0,0,0,707,695,1,0,0,0,708,81,1,0,0,
0,709,710,5,52,0,0,710,713,3,156,78,0,711,713,5,59,0,0,712,709,1,0,0,0,712,
711,1,0,0,0,713,714,1,0,0,0,714,716,7,2,0,0,715,712,1,0,0,0,716,717,1,0,
0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,3,50,25,0,720,
83,1,0,0,0,721,723,5,50,0,0,722,724,3,156,78,0,723,722,1,0,0,0,723,724,1,
0,0,0,724,725,1,0,0,0,725,726,5,215,0,0,726,85,1,0,0,0,727,729,5,57,0,0,
728,730,3,156,78,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,732,
5,215,0,0,732,87,1,0,0,0,733,735,5,115,0,0,734,736,3,156,78,0,735,734,1,
0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,738,5,215,0,0,738,89,1,0,0,0,739,
740,3,156,78,0,740,741,5,215,0,0,741,91,1,0,0,0,742,743,5,125,0,0,743,744,
5,207,0,0,744,745,3,220,110,0,745,746,5,208,0,0,746,747,5,215,0,0,747,93,
1,0,0,0,748,787,5,80,0,0,749,750,5,207,0,0,750,751,3,222,111,0,751,753,5,
46,0,0,752,754,5,193,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,
755,761,3,158,79,0,756,758,5,159,0,0,757,759,5,193,0,0,758,757,1,0,0,0,758,
759,1,0,0,0,759,760,1,0,0,0,760,762,3,222,111,0,761,756,1,0,0,0,761,762,
1,0,0,0,762,763,1,0,0,0,763,764,5,208,0,0,764,788,1,0,0,0,765,766,5,207,
0,0,766,767,3,156,78,0,767,768,5,46,0,0,768,774,3,158,79,0,769,771,5,159,
0,0,770,772,5,193,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,
775,3,222,111,0,774,769,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,
5,208,0,0,777,788,1,0,0,0,778,779,5,207,0,0,779,780,3,222,111,0,780,781,
5,46,0,0,781,782,5,97,0,0,782,783,5,207,0,0,783,784,3,244,122,0,784,785,
5,208,0,0,785,786,5,208,0,0,786,788,1,0,0,0,787,749,1,0,0,0,787,765,1,0,
0,0,787,778,1,0,0,0,788,795,1,0,0,0,789,796,3,54,27,0,790,791,5,214,0,0,
791,792,3,50,25,0,792,793,5,69,0,0,793,794,5,215,0,0,794,796,1,0,0,0,795,
789,1,0,0,0,795,790,1,0,0,0,796,95,1,0,0,0,797,798,5,121,0,0,798,814,3,58,
29,0,799,801,3,98,49,0,800,799,1,0,0,0,801,802,1,0,0,0,802,800,1,0,0,0,802,
803,1,0,0,0,803,805,1,0,0,0,804,806,3,100,50,0,805,804,1,0,0,0,805,806,1,
0,0,0,806,815,1,0,0,0,807,809,3,98,49,0,808,807,1,0,0,0,809,812,1,0,0,0,
810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,810,1,0,0,0,813,815,
3,100,50,0,814,800,1,0,0,0,814,810,1,0,0,0,815,97,1,0,0,0,816,817,5,53,0,
0,817,818,5,207,0,0,818,823,3,182,91,0,819,820,5,194,0,0,820,822,3,182,91,
0,821,819,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,826,
1,0,0,0,825,823,1,0,0,0,826,827,5,219,0,0,827,828,5,208,0,0,828,829,3,58,
29,0,829,99,1,0,0,0,830,831,5,77,0,0,831,832,3,58,29,0,832,101,1,0,0,0,833,
834,5,119,0,0,834,835,3,156,78,0,835,836,5,215,0,0,836,103,1,0,0,0,837,838,
5,83,0,0,838,839,3,250,125,0,839,840,5,215,0,0,840,105,1,0,0,0,841,842,5,
58,0,0,842,843,5,207,0,0,843,844,3,110,55,0,844,851,5,208,0,0,845,852,3,
54,27,0,846,847,5,214,0,0,847,848,3,50,25,0,848,849,5,67,0,0,849,850,5,215,
0,0,850,852,1,0,0,0,851,845,1,0,0,0,851,846,1,0,0,0,852,107,1,0,0,0,853,
855,3,2,1,0,854,853,1,0,0,0,855,856,1,0,0,0,856,854,1,0,0,0,856,857,1,0,
0,0,857,109,1,0,0,0,858,863,3,148,74,0,859,860,5,213,0,0,860,862,3,148,74,
0,861,859,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,111,
1,0,0,0,865,863,1,0,0,0,866,868,3,114,57,0,867,866,1,0,0,0,867,868,1,0,0,
0,868,873,1,0,0,0,869,870,5,213,0,0,870,872,3,114,57,0,871,869,1,0,0,0,872,
875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,877,1,0,0,0,875,873,1,0,
0,0,876,878,5,213,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,113,1,0,0,0,879,
881,3,44,22,0,880,879,1,0,0,0,880,881,1,0,0,0,881,883,1,0,0,0,882,884,3,
252,126,0,883,882,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,5,206,
0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,890,3,116,58,0,889,
888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,5,193,0,0,892,891,1,
0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,896,5,190,0,0,895,894,1,0,0,0,
895,896,1,0,0,0,896,897,1,0,0,0,897,898,3,146,73,0,898,115,1,0,0,0,899,900,
6,58,-1,0,900,904,3,182,91,0,901,904,5,51,0,0,902,904,3,258,129,0,903,899,
1,0,0,0,903,901,1,0,0,0,903,902,1,0,0,0,904,910,1,0,0,0,905,906,10,1,0,0,
906,907,5,194,0,0,907,909,3,116,58,2,908,905,1,0,0,0,909,912,1,0,0,0,910,
908,1,0,0,0,910,911,1,0,0,0,911,117,1,0,0,0,912,910,1,0,0,0,913,914,5,82,
0,0,914,919,3,120,60,0,915,916,5,213,0,0,916,918,3,120,60,0,917,915,1,0,
0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,
919,1,0,0,0,922,923,5,215,0,0,923,119,1,0,0,0,924,933,5,219,0,0,925,926,
5,204,0,0,926,933,3,222,111,0,927,928,5,204,0,0,928,929,5,211,0,0,929,930,
3,156,78,0,930,931,5,212,0,0,931,933,1,0,0,0,932,924,1,0,0,0,932,925,1,0,
0,0,932,927,1,0,0,0,933,121,1,0,0,0,934,935,5,63,0,0,935,936,3,152,76,0,
936,937,5,215,0,0,937,123,1,0,0,0,938,939,5,116,0,0,939,944,3,146,73,0,940,
941,5,213,0,0,941,943,3,146,73,0,942,940,1,0,0,0,943,946,1,0,0,0,944,942,
1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,944,1,0,0,0,947,948,5,215,0,
0,948,125,1,0,0,0,949,951,3,44,22,0,950,949,1,0,0,0,950,951,1,0,0,0,951,
1001,1,0,0,0,952,954,3,142,71,0,953,955,3,116,58,0,954,953,1,0,0,0,954,955,
1,0,0,0,955,956,1,0,0,0,956,961,3,146,73,0,957,958,5,213,0,0,958,960,3,146,
73,0,959,957,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,
964,1,0,0,0,963,961,1,0,0,0,964,965,5,215,0,0,965,1002,1,0,0,0,966,968,3,
144,72,0,967,966,1,0,0,0,967,968,1,0,0,0,968,999,1,0,0,0,969,971,5,56,0,
0,970,972,3,116,58,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,
978,3,148,74,0,974,975,5,213,0,0,975,977,3,148,74,0,976,974,1,0,0,0,977,
980,1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,978,1,0,
0,0,981,982,5,215,0,0,982,1000,1,0,0,0,983,985,5,81,0,0,984,986,5,193,0,
0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,989,3,250,125,0,988,
990,3,32,16,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,1,0,0,0,991,992,5,
207,0,0,992,993,3,112,56,0,993,995,5,208,0,0,994,996,3,138,69,0,995,994,
1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,3,140,70,0,998,1000,1,0,
0,0,999,969,1,0,0,0,999,983,1,0,0,0,1000,1002,1,0,0,0,1001,952,1,0,0,0,1001,
967,1,0,0,0,1002,1008,1,0,0,0,1003,1004,5,126,0,0,1004,1005,3,196,98,0,1005,
1006,3,128,64,0,1006,1008,1,0,0,0,1007,950,1,0,0,0,1007,1003,1,0,0,0,1008,
127,1,0,0,0,1009,1019,5,215,0,0,1010,1014,5,211,0,0,1011,1013,3,130,65,0,
1012,1011,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,
1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1019,5,212,0,0,1018,1009,1,0,0,
0,1018,1010,1,0,0,0,1019,129,1,0,0,0,1020,1023,3,132,66,0,1021,1023,3,134,
67,0,1022,1020,1,0,0,0,1022,1021,1,0,0,0,1023,131,1,0,0,0,1024,1025,3,190,
95,0,1025,1026,5,187,0,0,1026,1027,3,250,125,0,1027,1028,5,90,0,0,1028,1029,
3,196,98,0,1029,1030,5,215,0,0,1030,133,1,0,0,0,1031,1032,3,136,68,0,1032,
1038,5,46,0,0,1033,1039,3,252,126,0,1034,1036,3,252,126,0,1035,1034,1,0,
0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1039,3,250,125,0,1038,1033,
1,0,0,0,1038,1035,1,0,0,0,1039,1040,1,0,0,0,1040,1041,5,215,0,0,1041,135,
1,0,0,0,1042,1043,3,190,95,0,1043,1044,5,187,0,0,1044,1046,1,0,0,0,1045,
1042,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,1047,1048,3,250,125,0,1048,
137,1,0,0,0,1049,1050,5,214,0,0,1050,1052,3,250,125,0,1051,1053,3,198,99,
0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,139,1,0,0,0,1054,1057,5,215,0,
0,1055,1057,3,58,29,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,141,1,0,0,
0,1058,1061,3,144,72,0,1059,1061,5,127,0,0,1060,1058,1,0,0,0,1060,1059,1,
0,0,0,1061,143,1,0,0,0,1062,1064,3,252,126,0,1063,1062,1,0,0,0,1064,1065,
1,0,0,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,145,1,0,0,0,1067,1070,5,
219,0,0,1068,1069,5,216,0,0,1069,1071,3,204,102,0,1070,1068,1,0,0,0,1070,
1071,1,0,0,0,1071,147,1,0,0,0,1072,1073,3,250,125,0,1073,1074,5,216,0,0,
1074,1075,3,204,102,0,1075,149,1,0,0,0,1076,1078,3,44,22,0,1077,1076,1,0,
0,0,1077,1078,1,0,0,0,1078,1079,1,0,0,0,1079,1080,5,56,0,0,1080,1085,3,148,
74,0,1081,1082,5,213,0,0,1082,1084,3,148,74,0,1083,1081,1,0,0,0,1084,1087,
1,0,0,0,1085,1083,1,0,0,0,1085,1086,1,0,0,0,1086,1088,1,0,0,0,1087,1085,
1,0,0,0,1088,1089,5,215,0,0,1089,151,1,0,0,0,1090,1095,3,156,78,0,1091,1092,
5,213,0,0,1092,1094,3,156,78,0,1093,1091,1,0,0,0,1094,1097,1,0,0,0,1095,
1093,1,0,0,0,1095,1096,1,0,0,0,1096,153,1,0,0,0,1097,1095,1,0,0,0,1098,1101,
5,207,0,0,1099,1102,3,156,78,0,1100,1102,3,172,86,0,1101,1099,1,0,0,0,1101,
1100,1,0,0,0,1102,1103,1,0,0,0,1103,1104,5,208,0,0,1104,155,1,0,0,0,1105,
1106,6,78,-1,0,1106,1107,5,55,0,0,1107,1192,3,156,78,47,1108,1192,3,168,
84,0,1109,1110,3,214,107,0,1110,1111,5,209,0,0,1111,1112,3,156,78,0,1112,
1113,5,210,0,0,1113,1192,1,0,0,0,1114,1115,5,207,0,0,1115,1116,3,260,130,
0,1116,1117,5,208,0,0,1117,1118,3,156,78,44,1118,1192,1,0,0,0,1119,1120,
7,3,0,0,1120,1192,3,156,78,43,1121,1122,7,4,0,0,1122,1192,3,156,78,42,1123,
1124,7,5,0,0,1124,1192,3,222,111,0,1125,1126,3,222,111,0,1126,1127,7,5,0,
0,1127,1192,1,0,0,0,1128,1129,5,108,0,0,1129,1192,3,156,78,39,1130,1192,
3,222,111,0,1131,1192,3,206,103,0,1132,1192,3,216,108,0,1133,1192,5,220,
0,0,1134,1192,5,226,0,0,1135,1192,3,154,77,0,1136,1192,3,160,80,0,1137,1192,
5,129,0,0,1138,1139,5,97,0,0,1139,1140,5,207,0,0,1140,1141,3,244,122,0,1141,
1142,5,208,0,0,1142,1143,5,216,0,0,1143,1144,3,156,78,30,1144,1192,1,0,0,
0,1145,1146,5,96,0,0,1146,1147,5,207,0,0,1147,1148,3,220,110,0,1148,1149,
5,208,0,0,1149,1192,1,0,0,0,1150,1151,5,66,0,0,1151,1152,5,207,0,0,1152,
1153,3,222,111,0,1153,1154,5,208,0,0,1154,1192,1,0,0,0,1155,1156,5,73,0,
0,1156,1157,5,207,0,0,1157,1158,3,156,78,0,1158,1159,5,208,0,0,1159,1192,
1,0,0,0,1160,1164,5,74,0,0,1161,1162,5,207,0,0,1162,1165,5,208,0,0,1163,
1165,3,154,77,0,1164,1161,1,0,0,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,
1192,1,0,0,0,1166,1167,7,6,0,0,1167,1192,3,156,78,25,1168,1169,7,7,0,0,1169,
1192,3,156,78,24,1170,1192,3,162,81,0,1171,1192,3,164,82,0,1172,1173,5,119,
0,0,1173,1192,3,156,78,6,1174,1175,3,158,79,0,1175,1177,3,170,85,0,1176,
1178,3,44,22,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,
1180,3,156,78,5,1180,1192,1,0,0,0,1181,1182,3,158,79,0,1182,1184,5,216,0,
0,1183,1185,3,44,22,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1186,1,0,
0,0,1186,1189,5,193,0,0,1187,1190,3,222,111,0,1188,1190,3,168,84,0,1189,
1187,1,0,0,0,1189,1188,1,0,0,0,1190,1192,1,0,0,0,1191,1105,1,0,0,0,1191,
1108,1,0,0,0,1191,1109,1,0,0,0,1191,1114,1,0,0,0,1191,1119,1,0,0,0,1191,
1121,1,0,0,0,1191,1123,1,0,0,0,1191,1125,1,0,0,0,1191,1128,1,0,0,0,1191,
1130,1,0,0,0,1191,1131,1,0,0,0,1191,1132,1,0,0,0,1191,1133,1,0,0,0,1191,
1134,1,0,0,0,1191,1135,1,0,0,0,1191,1136,1,0,0,0,1191,1137,1,0,0,0,1191,
1138,1,0,0,0,1191,1145,1,0,0,0,1191,1150,1,0,0,0,1191,1155,1,0,0,0,1191,
1160,1,0,0,0,1191,1166,1,0,0,0,1191,1168,1,0,0,0,1191,1170,1,0,0,0,1191,
1171,1,0,0,0,1191,1172,1,0,0,0,1191,1174,1,0,0,0,1191,1181,1,0,0,0,1192,
1253,1,0,0,0,1193,1194,10,21,0,0,1194,1195,5,171,0,0,1195,1252,3,156,78,
21,1196,1197,10,19,0,0,1197,1198,7,8,0,0,1198,1252,3,156,78,20,1199,1200,
10,18,0,0,1200,1201,7,9,0,0,1201,1252,3,156,78,19,1202,1203,10,17,0,0,1203,
1204,7,10,0,0,1204,1252,3,156,78,18,1205,1206,10,16,0,0,1206,1207,7,11,0,
0,1207,1252,3,156,78,17,1208,1209,10,15,0,0,1209,1210,7,12,0,0,1210,1252,
3,156,78,16,1211,1212,10,14,0,0,1212,1213,5,193,0,0,1213,1252,3,156,78,15,
1214,1215,10,13,0,0,1215,1216,5,196,0,0,1216,1252,3,156,78,14,1217,1218,
10,12,0,0,1218,1219,5,194,0,0,1219,1252,3,156,78,13,1220,1221,10,11,0,0,
1221,1222,5,182,0,0,1222,1252,3,156,78,12,1223,1224,10,10,0,0,1224,1225,
5,181,0,0,1225,1252,3,156,78,11,1226,1227,10,9,0,0,1227,1229,5,206,0,0,1228,
1230,3,156,78,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,
1232,5,214,0,0,1232,1252,3,156,78,10,1233,1234,10,8,0,0,1234,1235,5,183,
0,0,1235,1252,3,156,78,9,1236,1237,10,7,0,0,1237,1238,5,156,0,0,1238,1252,
3,156,78,8,1239,1240,10,3,0,0,1240,1241,5,98,0,0,1241,1252,3,156,78,4,1242,
1243,10,2,0,0,1243,1244,5,100,0,0,1244,1252,3,156,78,3,1245,1246,10,1,0,
0,1246,1247,5,99,0,0,1247,1252,3,156,78,2,1248,1249,10,20,0,0,1249,1250,
5,89,0,0,1250,1252,3,184,92,0,1251,1193,1,0,0,0,1251,1196,1,0,0,0,1251,1199,
1,0,0,0,1251,1202,1,0,0,0,1251,1205,1,0,0,0,1251,1208,1,0,0,0,1251,1211,
1,0,0,0,1251,1214,1,0,0,0,1251,1217,1,0,0,0,1251,1220,1,0,0,0,1251,1223,
1,0,0,0,1251,1226,1,0,0,0,1251,1233,1,0,0,0,1251,1236,1,0,0,0,1251,1239,
1,0,0,0,1251,1242,1,0,0,0,1251,1245,1,0,0,0,1251,1248,1,0,0,0,1252,1255,
1,0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,157,1,0,0,0,1255,1253,1,
0,0,0,1256,1259,3,222,111,0,1257,1259,3,160,80,0,1258,1256,1,0,0,0,1258,
1257,1,0,0,0,1259,159,1,0,0,0,1260,1261,5,45,0,0,1261,1263,5,207,0,0,1262,
1264,3,174,87,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,
1272,5,208,0,0,1266,1268,5,209,0,0,1267,1269,3,174,87,0,1268,1267,1,0,0,
0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1272,5,210,0,0,1271,1260,1,0,
0,0,1271,1266,1,0,0,0,1272,1277,1,0,0,0,1273,1274,5,209,0,0,1274,1275,3,
156,78,0,1275,1276,5,210,0,0,1276,1278,1,0,0,0,1277,1273,1,0,0,0,1277,1278,
1,0,0,0,1278,161,1,0,0,0,1279,1281,5,116,0,0,1280,1279,1,0,0,0,1280,1281,
1,0,0,0,1281,1282,1,0,0,0,1282,1284,5,81,0,0,1283,1285,5,193,0,0,1284,1283,
1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1287,5,207,0,0,1287,1288,
3,112,56,0,1288,1290,5,208,0,0,1289,1291,3,178,89,0,1290,1289,1,0,0,0,1290,
1291,1,0,0,0,1291,1294,1,0,0,0,1292,1293,5,214,0,0,1293,1295,3,116,58,0,
1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1297,3,58,29,
0,1297,1306,1,0,0,0,1298,1299,5,131,0,0,1299,1300,5,207,0,0,1300,1301,3,
112,56,0,1301,1302,5,208,0,0,1302,1303,5,159,0,0,1303,1304,3,156,78,0,1304,
1306,1,0,0,0,1305,1280,1,0,0,0,1305,1298,1,0,0,0,1306,163,1,0,0,0,1307,1308,
5,101,0,0,1308,1309,5,207,0,0,1309,1310,3,156,78,0,1310,1311,5,208,0,0,1311,
1312,5,211,0,0,1312,1317,3,166,83,0,1313,1314,5,213,0,0,1314,1316,3,166,
83,0,1315,1313,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,
0,0,1318,1321,1,0,0,0,1319,1317,1,0,0,0,1320,1322,5,213,0,0,1321,1320,1,
0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,1324,5,212,0,0,1324,165,1,
0,0,0,1325,1330,3,156,78,0,1326,1327,5,213,0,0,1327,1329,3,156,78,0,1328,
1326,1,0,0,0,1329,1332,1,0,0,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,
1333,1,0,0,0,1332,1330,1,0,0,0,1333,1334,5,159,0,0,1334,1335,3,156,78,0,
1335,167,1,0,0,0,1336,1337,5,103,0,0,1337,1339,3,184,92,0,1338,1340,3,198,
99,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,169,1,0,0,0,1341,1342,7,13,
0,0,1342,171,1,0,0,0,1343,1351,5,129,0,0,1344,1347,3,156,78,0,1345,1346,
5,159,0,0,1346,1348,3,156,78,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,
1352,1,0,0,0,1349,1350,5,130,0,0,1350,1352,3,156,78,0,1351,1344,1,0,0,0,
1351,1349,1,0,0,0,1352,173,1,0,0,0,1353,1358,3,176,88,0,1354,1355,5,213,
0,0,1355,1357,3,176,88,0,1356,1354,1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,
0,0,0,1358,1359,1,0,0,0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1361,1363,5,
213,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,175,1,0,0,0,1364,1367,3,
156,78,0,1365,1366,5,159,0,0,1366,1368,3,156,78,0,1367,1365,1,0,0,0,1367,
1368,1,0,0,0,1368,1377,1,0,0,0,1369,1370,3,156,78,0,1370,1371,5,159,0,0,
1371,1373,1,0,0,0,1372,1369,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,
1374,1375,5,193,0,0,1375,1377,3,222,111,0,1376,1364,1,0,0,0,1376,1372,1,
0,0,0,1377,177,1,0,0,0,1378,1379,5,126,0,0,1379,1380,5,207,0,0,1380,1385,
3,180,90,0,1381,1382,5,213,0,0,1382,1384,3,180,90,0,1383,1381,1,0,0,0,1384,
1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,
1385,1,0,0,0,1388,1389,5,208,0,0,1389,179,1,0,0,0,1390,1392,5,193,0,0,1391,
1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,5,219,0,0,1394,
181,1,0,0,0,1395,1397,3,190,95,0,1396,1398,3,42,21,0,1397,1396,1,0,0,0,1397,
1398,1,0,0,0,1398,1401,1,0,0,0,1399,1401,5,116,0,0,1400,1395,1,0,0,0,1400,
1399,1,0,0,0,1401,183,1,0,0,0,1402,1405,3,190,95,0,1403,1405,3,188,94,0,
1404,1402,1,0,0,0,1404,1403,1,0,0,0,1405,1407,1,0,0,0,1406,1408,3,42,21,
0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1413,1,0,0,0,1409,1413,3,258,
129,0,1410,1413,5,116,0,0,1411,1413,3,186,93,0,1412,1404,1,0,0,0,1412,1409,
1,0,0,0,1412,1410,1,0,0,0,1412,1411,1,0,0,0,1413,185,1,0,0,0,1414,1416,3,
44,22,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1418,1,0,0,0,1417,1419,
5,109,0,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1421,1,0,0,0,1420,1422,
3,248,124,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,0,1423,1425,
5,107,0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1447,1,0,0,0,1426,1428,
3,28,14,0,1427,1429,3,32,16,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1432,
1,0,0,0,1430,1431,5,75,0,0,1431,1433,3,182,91,0,1432,1430,1,0,0,0,1432,1433,
1,0,0,0,1433,1436,1,0,0,0,1434,1435,5,85,0,0,1435,1437,3,30,15,0,1436,1434,
1,0,0,0,1436,1437,1,0,0,0,1437,1448,1,0,0,0,1438,1439,5,95,0,0,1439,1441,
3,250,125,0,1440,1442,3,32,16,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,
1445,1,0,0,0,1443,1444,5,75,0,0,1444,1446,3,30,15,0,1445,1443,1,0,0,0,1445,
1446,1,0,0,0,1446,1448,1,0,0,0,1447,1426,1,0,0,0,1447,1438,1,0,0,0,1448,
1449,1,0,0,0,1449,1453,5,211,0,0,1450,1452,3,126,63,0,1451,1450,1,0,0,0,
1452,1455,1,0,0,0,1453,1451,1,0,0,0,1453,1454,1,0,0,0,1454,1456,1,0,0,0,
1455,1453,1,0,0,0,1456,1457,5,212,0,0,1457,187,1,0,0,0,1458,1463,3,234,117,
0,1459,1460,5,188,0,0,1460,1462,3,236,118,0,1461,1459,1,0,0,0,1462,1465,
1,0,0,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,189,1,0,0,0,1465,1463,1,
0,0,0,1466,1468,5,102,0,0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,1468,1470,
1,0,0,0,1469,1471,5,189,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,
1,0,0,0,1472,1473,3,192,96,0,1473,191,1,0,0,0,1474,1488,3,250,125,0,1475,
1480,3,250,125,0,1476,1477,5,189,0,0,1477,1479,3,250,125,0,1478,1476,1,0,
0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,1481,1,0,0,0,1481,1485,1,0,
0,0,1482,1480,1,0,0,0,1483,1484,5,189,0,0,1484,1486,3,194,97,0,1485,1483,
1,0,0,0,1485,1486,1,0,0,0,1486,1488,1,0,0,0,1487,1474,1,0,0,0,1487,1475,
1,0,0,0,1488,193,1,0,0,0,1489,1492,3,250,125,0,1490,1491,5,46,0,0,1491,1493,
3,250,125,0,1492,1490,1,0,0,0,1492,1493,1,0,0,0,1493,1509,1,0,0,0,1494,1495,
5,211,0,0,1495,1500,3,194,97,0,1496,1497,5,213,0,0,1497,1499,3,194,97,0,
1498,1496,1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,
1501,1504,1,0,0,0,1502,1500,1,0,0,0,1503,1505,5,213,0,0,1504,1503,1,0,0,
0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1507,5,212,0,0,1507,1509,1,0,
0,0,1508,1489,1,0,0,0,1508,1494,1,0,0,0,1509,195,1,0,0,0,1510,1515,3,190,
95,0,1511,1512,5,213,0,0,1512,1514,3,190,95,0,1513,1511,1,0,0,0,1514,1517,
1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,197,1,0,0,0,1517,1515,1,
0,0,0,1518,1528,5,207,0,0,1519,1524,3,200,100,0,1520,1521,5,213,0,0,1521,
1523,3,200,100,0,1522,1520,1,0,0,0,1523,1526,1,0,0,0,1524,1522,1,0,0,0,1524,
1525,1,0,0,0,1525,1529,1,0,0,0,1526,1524,1,0,0,0,1527,1529,3,172,86,0,1528,
1519,1,0,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1531,1,0,0,0,1530,
1532,5,213,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,
1534,5,208,0,0,1534,199,1,0,0,0,1535,1537,3,202,101,0,1536,1535,1,0,0,0,
1536,1537,1,0,0,0,1537,1539,1,0,0,0,1538,1540,5,190,0,0,1539,1538,1,0,0,
0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1545,3,156,78,0,1542,1543,5,193,
0,0,1543,1545,3,222,111,0,1544,1536,1,0,0,0,1544,1542,1,0,0,0,1545,201,1,
0,0,0,1546,1547,3,250,125,0,1547,1548,5,214,0,0,1548,203,1,0,0,0,1549,1571,
3,206,103,0,1550,1571,3,216,108,0,1551,1552,5,45,0,0,1552,1557,5,207,0,0,
1553,1555,3,174,87,0,1554,1556,5,213,0,0,1555,1554,1,0,0,0,1555,1556,1,0,
0,0,1556,1558,1,0,0,0,1557,1553,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,
0,0,1559,1571,5,208,0,0,1560,1565,5,209,0,0,1561,1563,3,174,87,0,1562,1564,
5,213,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1561,
1,0,0,0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1571,5,210,0,0,1568,1569,
7,14,0,0,1569,1571,3,204,102,0,1570,1549,1,0,0,0,1570,1550,1,0,0,0,1570,
1551,1,0,0,0,1570,1560,1,0,0,0,1570,1568,1,0,0,0,1571,205,1,0,0,0,1572,1578,
5,104,0,0,1573,1578,3,208,104,0,1574,1578,3,254,127,0,1575,1578,3,212,106,
0,1576,1578,3,190,95,0,1577,1572,1,0,0,0,1577,1573,1,0,0,0,1577,1574,1,0,
0,0,1577,1575,1,0,0,0,1577,1576,1,0,0,0,1578,207,1,0,0,0,1579,1584,5,223,
0,0,1580,1584,5,49,0,0,1581,1584,3,210,105,0,1582,1584,3,214,107,0,1583,
1579,1,0,0,0,1583,1580,1,0,0,0,1583,1581,1,0,0,0,1583,1582,1,0,0,0,1584,
209,1,0,0,0,1585,1586,7,15,0,0,1586,211,1,0,0,0,1587,1588,7,16,0,0,1588,
1593,5,187,0,0,1589,1594,3,250,125,0,1590,1594,5,136,0,0,1591,1594,5,132,
0,0,1592,1594,5,133,0,0,1593,1589,1,0,0,0,1593,1590,1,0,0,0,1593,1591,1,
0,0,0,1593,1592,1,0,0,0,1594,1606,1,0,0,0,1595,1599,3,182,91,0,1596,1599,
3,240,120,0,1597,1599,3,216,108,0,1598,1595,1,0,0,0,1598,1596,1,0,0,0,1598,
1597,1,0,0,0,1599,1600,1,0,0,0,1600,1603,5,187,0,0,1601,1604,3,250,125,0,
1602,1604,3,240,120,0,1603,1601,1,0,0,0,1603,1602,1,0,0,0,1604,1606,1,0,
0,0,1605,1587,1,0,0,0,1605,1598,1,0,0,0,1606,213,1,0,0,0,1607,1608,5,220,
0,0,1608,215,1,0,0,0,1609,1611,5,230,0,0,1610,1612,5,238,0,0,1611,1610,1,
0,0,0,1612,1613,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,1631,1,
0,0,0,1615,1617,5,229,0,0,1616,1618,5,238,0,0,1617,1616,1,0,0,0,1618,1619,
1,0,0,0,1619,1617,1,0,0,0,1619,1620,1,0,0,0,1620,1631,1,0,0,0,1621,1631,
5,227,0,0,1622,1626,5,228,0,0,1623,1625,3,218,109,0,1624,1623,1,0,0,0,1625,
1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,1629,1,0,0,0,1628,
1626,1,0,0,0,1629,1631,5,228,0,0,1630,1609,1,0,0,0,1630,1615,1,0,0,0,1630,
1621,1,0,0,0,1630,1622,1,0,0,0,1631,217,1,0,0,0,1632,1636,5,234,0,0,1633,
1636,5,233,0,0,1634,1636,3,222,111,0,1635,1632,1,0,0,0,1635,1633,1,0,0,0,
1635,1634,1,0,0,0,1636,219,1,0,0,0,1637,1642,3,222,111,0,1638,1639,5,213,
0,0,1639,1641,3,222,111,0,1640,1638,1,0,0,0,1641,1644,1,0,0,0,1642,1640,
1,0,0,0,1642,1643,1,0,0,0,1643,221,1,0,0,0,1644,1642,1,0,0,0,1645,1649,3,
224,112,0,1646,1648,3,226,113,0,1647,1646,1,0,0,0,1648,1651,1,0,0,0,1649,
1647,1,0,0,0,1649,1650,1,0,0,0,1650,223,1,0,0,0,1651,1649,1,0,0,0,1652,1659,
3,234,117,0,1653,1659,3,228,114,0,1654,1655,5,207,0,0,1655,1656,3,168,84,
0,1656,1657,5,208,0,0,1657,1659,1,0,0,0,1658,1652,1,0,0,0,1658,1653,1,0,
0,0,1658,1654,1,0,0,0,1659,225,1,0,0,0,1660,1661,5,188,0,0,1661,1663,3,236,
118,0,1662,1664,3,232,116,0,1663,1662,1,0,0,0,1663,1664,1,0,0,0,1664,227,
1,0,0,0,1665,1666,3,230,115,0,1666,1667,3,232,116,0,1667,229,1,0,0,0,1668,
1673,3,190,95,0,1669,1673,3,212,106,0,1670,1673,3,234,117,0,1671,1673,3,
154,77,0,1672,1668,1,0,0,0,1672,1669,1,0,0,0,1672,1670,1,0,0,0,1672,1671,
1,0,0,0,1673,231,1,0,0,0,1674,1676,3,42,21,0,1675,1674,1,0,0,0,1675,1676,
1,0,0,0,1676,1677,1,0,0,0,1677,1681,3,198,99,0,1678,1680,3,242,121,0,1679,
1678,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,
233,1,0,0,0,1683,1681,1,0,0,0,1684,1687,3,240,120,0,1685,1686,5,187,0,0,
1686,1688,3,240,120,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,1694,1,0,
0,0,1689,1690,3,182,91,0,1690,1691,5,187,0,0,1691,1692,3,240,120,0,1692,
1694,1,0,0,0,1693,1684,1,0,0,0,1693,1689,1,0,0,0,1694,235,1,0,0,0,1695,1698,
3,238,119,0,1696,1698,3,240,120,0,1697,1695,1,0,0,0,1697,1696,1,0,0,0,1698,
237,1,0,0,0,1699,1705,3,250,125,0,1700,1701,5,211,0,0,1701,1702,3,156,78,
0,1702,1703,5,212,0,0,1703,1705,1,0,0,0,1704,1699,1,0,0,0,1704,1700,1,0,
0,0,1705,1709,1,0,0,0,1706,1708,3,242,121,0,1707,1706,1,0,0,0,1708,1711,
1,0,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,239,1,0,0,0,1711,1709,1,
0,0,0,1712,1714,5,204,0,0,1713,1712,1,0,0,0,1714,1717,1,0,0,0,1715,1713,
1,0,0,0,1715,1716,1,0,0,0,1716,1724,1,0,0,0,1717,1715,1,0,0,0,1718,1725,
5,219,0,0,1719,1720,5,204,0,0,1720,1721,5,211,0,0,1721,1722,3,156,78,0,1722,
1723,5,212,0,0,1723,1725,1,0,0,0,1724,1718,1,0,0,0,1724,1719,1,0,0,0,1725,
1729,1,0,0,0,1726,1728,3,242,121,0,1727,1726,1,0,0,0,1728,1731,1,0,0,0,1729,
1727,1,0,0,0,1729,1730,1,0,0,0,1730,241,1,0,0,0,1731,1729,1,0,0,0,1732,1734,
5,209,0,0,1733,1735,3,156,78,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
1736,1,0,0,0,1736,1742,5,210,0,0,1737,1738,5,211,0,0,1738,1739,3,156,78,
0,1739,1740,5,212,0,0,1740,1742,1,0,0,0,1741,1732,1,0,0,0,1741,1737,1,0,
0,0,1742,243,1,0,0,0,1743,1745,3,246,123,0,1744,1743,1,0,0,0,1744,1745,1,
0,0,0,1745,1752,1,0,0,0,1746,1748,5,213,0,0,1747,1749,3,246,123,0,1748,1747,
1,0,0,0,1748,1749,1,0,0,0,1749,1751,1,0,0,0,1750,1746,1,0,0,0,1751,1754,
1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,245,1,0,0,0,1754,1752,1,
0,0,0,1755,1763,3,222,111,0,1756,1757,5,97,0,0,1757,1758,5,207,0,0,1758,
1759,3,244,122,0,1759,1760,5,208,0,0,1760,1763,1,0,0,0,1761,1763,3,176,88,
0,1762,1755,1,0,0,0,1762,1756,1,0,0,0,1762,1761,1,0,0,0,1763,247,1,0,0,0,
1764,1765,7,17,0,0,1765,249,1,0,0,0,1766,1767,7,18,0,0,1767,251,1,0,0,0,
1768,1769,7,19,0,0,1769,253,1,0,0,0,1770,1771,7,20,0,0,1771,255,1,0,0,0,
1772,1773,7,21,0,0,1773,257,1,0,0,0,1774,1775,7,22,0,0,1775,259,1,0,0,0,
1776,1777,7,23,0,0,1777,261,1,0,0,0,227,263,267,269,277,280,306,310,315,
320,326,339,343,349,354,359,366,372,379,386,389,393,397,404,407,412,415,
418,421,426,430,434,439,443,445,451,463,480,487,495,499,504,510,518,526,
532,539,546,551,557,586,600,604,613,617,622,648,659,663,667,676,686,691,
697,702,707,712,717,723,729,735,753,758,761,771,774,787,795,802,805,810,
814,823,851,856,863,867,873,877,880,883,886,889,892,895,903,910,919,932,
944,950,954,961,967,971,978,985,989,995,999,1001,1007,1014,1018,1022,1035,
1038,1045,1052,1056,1060,1065,1070,1077,1085,1095,1101,1164,1177,1184,1189,
1191,1229,1251,1253,1258,1263,1268,1271,1277,1280,1284,1290,1294,1305,1317,
1321,1330,1339,1347,1351,1358,1362,1367,1372,1376,1385,1391,1397,1400,1404,
1407,1412,1415,1418,1421,1424,1428,1432,1436,1441,1445,1447,1453,1463,1467,
1470,1480,1485,1487,1492,1500,1504,1508,1515,1524,1528,1531,1536,1539,1544,
1555,1557,1563,1565,1570,1577,1583,1593,1598,1603,1605,1613,1619,1626,1630,
1635,1642,1649,1658,1663,1672,1675,1681,1687,1693,1697,1704,1709,1715,1724,
1729,1734,1741,1744,1748,1752,1762];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class PhpParser extends antlr4.Parser {

    static grammarFileName = "PhpParser.g4";
    static literalNames = [ null, null, null, "'<?xml'", null, null, null, 
                            null, null, null, null, null, null, "'?>'", 
                            null, null, "'/>'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'#['", 
                            "'abstract'", "'array'", "'as'", "'binary'", 
                            null, null, "'break'", "'callable'", "'case'", 
                            "'catch'", "'class'", "'clone'", "'const'", 
                            "'continue'", "'declare'", "'default'", "'do'", 
                            "'real'", "'double'", "'echo'", "'else'", "'elseif'", 
                            "'empty'", "'enddeclare'", "'endfor'", "'endforeach'", 
                            "'endif'", "'endswitch'", "'endwhile'", "'eval'", 
                            "'die'", "'extends'", "'final'", "'finally'", 
                            "'float'", "'for'", "'foreach'", "'function'", 
                            "'global'", "'goto'", "'if'", "'implements'", 
                            "'import'", "'include'", "'include_once'", "'instanceof'", 
                            "'insteadof'", "'int8'", "'int16'", "'int64'", 
                            null, "'interface'", "'isset'", "'list'", "'and'", 
                            "'or'", "'xor'", "'match'", "'namespace'", "'new'", 
                            "'null'", "'object'", "'parent'", "'partial'", 
                            "'print'", "'private'", "'protected'", "'public'", 
                            "'require'", "'require_once'", "'resource'", 
                            "'return'", "'static'", "'string'", "'switch'", 
                            "'throw'", "'trait'", "'try'", "'clrtypeof'", 
                            null, "'unicode'", "'unset'", "'use'", "'var'", 
                            "'while'", "'yield'", "'from'", "'fn'", "'__get'", 
                            "'__set'", "'__call'", "'__callstatic'", "'__construct'", 
                            "'__destruct'", "'__wakeup'", "'__sleep'", "'__autoload'", 
                            "'__isset'", "'__unset'", "'__tostring'", "'__invoke'", 
                            "'__set_state'", "'__clone'", "'__debuginfo'", 
                            "'__namespace__'", "'__class__'", "'__trait__'", 
                            "'__function__'", "'__method__'", "'__line__'", 
                            "'__file__'", "'__dir__'", "'<=>'", "'<:'", 
                            "':>'", "'=>'", "'++'", "'--'", "'==='", "'!=='", 
                            "'=='", null, "'<='", "'>='", "'+='", "'-='", 
                            "'*='", "'**'", "'**='", "'/='", "'.='", "'%='", 
                            "'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'", 
                            "'&&'", "'??'", "'??='", "'<<'", "'>>'", "'::'", 
                            "'->'", "'\\'", "'...'", null, null, "'&'", 
                            "'|'", "'!'", "'^'", "'+'", "'-'", "'*'", "'%'", 
                            null, "'~'", "'@'", null, "'.'", null, "'('", 
                            "')'", "'['", "']'", null, "'}'", "','", "':'", 
                            "';'", null, "'''", "'`'" ];
    static symbolicNames = [ null, "SeaWhitespace", "HtmlText", "XmlStart", 
                             "PHPStart", "HtmlScriptOpen", "HtmlStyleOpen", 
                             "HtmlComment", "HtmlDtd", "HtmlOpen", "Shebang", 
                             "Error", "XmlText", "XmlClose", "PHPStartInside", 
                             "HtmlClose", "HtmlSlashClose", "HtmlSlash", 
                             "HtmlEquals", "HtmlStartQuoteString", "HtmlStartDoubleQuoteString", 
                             "HtmlHex", "HtmlDecimal", "HtmlSpace", "HtmlName", 
                             "ErrorInside", "PHPStartInsideQuoteString", 
                             "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", 
                             "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString", 
                             "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", 
                             "ScriptText", "HtmlScriptClose", "PHPStartInsideScript", 
                             "StyleBody", "PHPEnd", "Whitespace", "MultiLineComment", 
                             "SingleLineComment", "ShellStyleComment", "AttributeStart", 
                             "Abstract", "Array", "As", "BinaryCast", "BoolType", 
                             "BooleanConstant", "Break", "Callable", "Case", 
                             "Catch", "Class", "Clone", "Const", "Continue", 
                             "Declare", "Default", "Do", "DoubleCast", "DoubleType", 
                             "Echo", "Else", "ElseIf", "Empty", "EndDeclare", 
                             "EndFor", "EndForeach", "EndIf", "EndSwitch", 
                             "EndWhile", "Eval", "Exit", "Extends", "Final", 
                             "Finally", "FloatCast", "For", "Foreach", "Function_", 
                             "Global", "Goto", "If", "Implements", "Import", 
                             "Include", "IncludeOnce", "InstanceOf", "InsteadOf", 
                             "Int8Cast", "Int16Cast", "Int64Type", "IntType", 
                             "Interface", "IsSet", "List", "LogicalAnd", 
                             "LogicalOr", "LogicalXor", "Match", "Namespace", 
                             "New", "Null", "ObjectType", "Parent_", "Partial", 
                             "Print", "Private", "Protected", "Public", 
                             "Require", "RequireOnce", "Resource", "Return", 
                             "Static", "StringType", "Switch", "Throw", 
                             "Trait", "Try", "Typeof", "UintCast", "UnicodeCast", 
                             "Unset", "Use", "Var", "While", "Yield", "From", 
                             "LambdaFn", "Get", "Set", "Call", "CallStatic", 
                             "Constructor", "Destruct", "Wakeup", "Sleep", 
                             "Autoload", "IsSet__", "Unset__", "ToString__", 
                             "Invoke", "SetState", "Clone__", "DebugInfo", 
                             "Namespace__", "Class__", "Traic__", "Function__", 
                             "Method__", "Line__", "File__", "Dir__", "Spaceship", 
                             "Lgeneric", "Rgeneric", "DoubleArrow", "Inc", 
                             "Dec", "IsIdentical", "IsNoidentical", "IsEqual", 
                             "IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual", 
                             "PlusEqual", "MinusEqual", "MulEqual", "Pow", 
                             "PowEqual", "DivEqual", "Concaequal", "ModEqual", 
                             "ShiftLeftEqual", "ShiftRightEqual", "AndEqual", 
                             "OrEqual", "XorEqual", "BooleanOr", "BooleanAnd", 
                             "NullCoalescing", "NullCoalescingEqual", "ShiftLeft", 
                             "ShiftRight", "DoubleColon", "ObjectOperator", 
                             "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                             "Ampersand", "Pipe", "Bang", "Caret", "Plus", 
                             "Minus", "Asterisk", "Percent", "Divide", "Tilde", 
                             "SuppressWarnings", "Dollar", "Dot", "QuestionMark", 
                             "OpenRoundBracket", "CloseRoundBracket", "OpenSquareBracket", 
                             "CloseSquareBracket", "OpenCurlyBracket", "CloseCurlyBracket", 
                             "Comma", "Colon", "SemiColon", "Eq", "Quote", 
                             "BackQuote", "VarName", "Label", "Octal", "Decimal", 
                             "Real", "Hex", "Binary", "BackQuoteString", 
                             "SingleQuoteString", "DoubleQuote", "StartNowDoc", 
                             "StartHereDoc", "ErrorPhp", "CurlyDollar", 
                             "UnicodeEscape", "StringPart", "Comment", "PHPEndSingleLineComment", 
                             "CommentEnd", "HereDocText", "XmlText2" ];
    static ruleNames = [ "htmlDocument", "inlineHtml", "htmlElement", "scriptText", 
                         "phpBlock", "importStatement", "topStatement", 
                         "useDeclaration", "useDeclarationContentList", 
                         "useDeclarationContent", "namespaceDeclaration", 
                         "namespaceStatement", "functionDeclaration", "classDeclaration", 
                         "classEntryType", "interfaceList", "typeParameterListInBrackets", 
                         "typeParameterList", "typeParameterWithDefaultsList", 
                         "typeParameterDecl", "typeParameterWithDefaultDecl", 
                         "genericDynamicArgs", "attributes", "attributeGroup", 
                         "attribute", "innerStatementList", "innerStatement", 
                         "statement", "emptyStatement_", "blockStatement", 
                         "ifStatement", "elseIfStatement", "elseIfColonStatement", 
                         "elseStatement", "elseColonStatement", "whileStatement", 
                         "doWhileStatement", "forStatement", "forInit", 
                         "forUpdate", "switchStatement", "switchBlock", 
                         "breakStatement", "continueStatement", "returnStatement", 
                         "expressionStatement", "unsetStatement", "foreachStatement", 
                         "tryCatchFinally", "catchClause", "finallyStatement", 
                         "throwStatement", "gotoStatement", "declareStatement", 
                         "inlineHtmlStatement", "declareList", "formalParameterList", 
                         "formalParameter", "typeHint", "globalStatement", 
                         "globalVar", "echoStatement", "staticVariableStatement", 
                         "classStatement", "traitAdaptations", "traitAdaptationStatement", 
                         "traitPrecedence", "traitAlias", "traitMethodReference", 
                         "baseCtorCall", "methodBody", "propertyModifiers", 
                         "memberModifiers", "variableInitializer", "identifierInitializer", 
                         "globalConstantDeclaration", "expressionList", 
                         "parentheses", "expression", "assignable", "arrayCreation", 
                         "lambdaFunctionExpr", "matchExpr", "matchItem", 
                         "newExpr", "assignmentOperator", "yieldExpression", 
                         "arrayItemList", "arrayItem", "lambdaFunctionUseVars", 
                         "lambdaFunctionUseVar", "qualifiedStaticTypeRef", 
                         "typeRef", "anonymousClass", "indirectTypeRef", 
                         "qualifiedNamespaceName", "namespaceNameList", 
                         "namespaceNameTail", "qualifiedNamespaceNameList", 
                         "arguments", "actualArgument", "argumentName", 
                         "constantInitializer", "constant", "literalConstant", 
                         "numericConstant", "classConstant", "stringConstant", 
                         "string", "interpolatedStringPart", "chainList", 
                         "chain", "chainOrigin", "memberAccess", "functionCall", 
                         "functionCallName", "actualArguments", "chainBase", 
                         "keyedFieldName", "keyedSimpleFieldName", "keyedVariable", 
                         "squareCurlyExpression", "assignmentList", "assignmentListElement", 
                         "modifier", "identifier", "memberModifier", "magicConstant", 
                         "magicMethod", "primitiveType", "castOperation" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PhpParser.ruleNames;
        this.literalNames = PhpParser.literalNames;
        this.symbolicNames = PhpParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 58:
    	    		return this.typeHint_sempred(localctx, predIndex);
    	case 78:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typeHint_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 21);
    		case 2:
    			return this.precpred(this._ctx, 19);
    		case 3:
    			return this.precpred(this._ctx, 18);
    		case 4:
    			return this.precpred(this._ctx, 17);
    		case 5:
    			return this.precpred(this._ctx, 16);
    		case 6:
    			return this.precpred(this._ctx, 15);
    		case 7:
    			return this.precpred(this._ctx, 14);
    		case 8:
    			return this.precpred(this._ctx, 13);
    		case 9:
    			return this.precpred(this._ctx, 12);
    		case 10:
    			return this.precpred(this._ctx, 11);
    		case 11:
    			return this.precpred(this._ctx, 10);
    		case 12:
    			return this.precpred(this._ctx, 9);
    		case 13:
    			return this.precpred(this._ctx, 8);
    		case 14:
    			return this.precpred(this._ctx, 7);
    		case 15:
    			return this.precpred(this._ctx, 3);
    		case 16:
    			return this.precpred(this._ctx, 2);
    		case 17:
    			return this.precpred(this._ctx, 1);
    		case 18:
    			return this.precpred(this._ctx, 20);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	htmlDocument() {
	    let localctx = new HtmlDocumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PhpParser.RULE_htmlDocument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Shebang) {
	            this.state = 262;
	            this.match(PhpParser.Shebang);
	        }

	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PhpParser.HtmlText - 2)) | (1 << (PhpParser.XmlStart - 2)) | (1 << (PhpParser.HtmlScriptOpen - 2)) | (1 << (PhpParser.HtmlStyleOpen - 2)) | (1 << (PhpParser.HtmlDtd - 2)) | (1 << (PhpParser.HtmlOpen - 2)) | (1 << (PhpParser.HtmlClose - 2)) | (1 << (PhpParser.HtmlSlashClose - 2)) | (1 << (PhpParser.HtmlSlash - 2)) | (1 << (PhpParser.HtmlEquals - 2)) | (1 << (PhpParser.HtmlStartQuoteString - 2)) | (1 << (PhpParser.HtmlStartDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlHex - 2)) | (1 << (PhpParser.HtmlDecimal - 2)) | (1 << (PhpParser.HtmlName - 2)) | (1 << (PhpParser.HtmlEndQuoteString - 2)) | (1 << (PhpParser.HtmlQuoteString - 2)) | (1 << (PhpParser.HtmlEndDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlDoubleQuoteString - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PhpParser.ScriptText - 34)) | (1 << (PhpParser.HtmlScriptClose - 34)) | (1 << (PhpParser.StyleBody - 34)) | (1 << (PhpParser.AttributeStart - 34)) | (1 << (PhpParser.Abstract - 34)) | (1 << (PhpParser.Array - 34)) | (1 << (PhpParser.As - 34)) | (1 << (PhpParser.BinaryCast - 34)) | (1 << (PhpParser.BoolType - 34)) | (1 << (PhpParser.BooleanConstant - 34)) | (1 << (PhpParser.Break - 34)) | (1 << (PhpParser.Callable - 34)) | (1 << (PhpParser.Case - 34)) | (1 << (PhpParser.Catch - 34)) | (1 << (PhpParser.Class - 34)) | (1 << (PhpParser.Clone - 34)) | (1 << (PhpParser.Const - 34)) | (1 << (PhpParser.Continue - 34)) | (1 << (PhpParser.Declare - 34)) | (1 << (PhpParser.Default - 34)) | (1 << (PhpParser.Do - 34)) | (1 << (PhpParser.DoubleCast - 34)) | (1 << (PhpParser.DoubleType - 34)) | (1 << (PhpParser.Echo - 34)) | (1 << (PhpParser.Else - 34)) | (1 << (PhpParser.ElseIf - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PhpParser.Empty - 66)) | (1 << (PhpParser.EndDeclare - 66)) | (1 << (PhpParser.EndFor - 66)) | (1 << (PhpParser.EndForeach - 66)) | (1 << (PhpParser.EndIf - 66)) | (1 << (PhpParser.EndSwitch - 66)) | (1 << (PhpParser.EndWhile - 66)) | (1 << (PhpParser.Eval - 66)) | (1 << (PhpParser.Exit - 66)) | (1 << (PhpParser.Extends - 66)) | (1 << (PhpParser.Final - 66)) | (1 << (PhpParser.Finally - 66)) | (1 << (PhpParser.FloatCast - 66)) | (1 << (PhpParser.For - 66)) | (1 << (PhpParser.Foreach - 66)) | (1 << (PhpParser.Function_ - 66)) | (1 << (PhpParser.Global - 66)) | (1 << (PhpParser.Goto - 66)) | (1 << (PhpParser.If - 66)) | (1 << (PhpParser.Implements - 66)) | (1 << (PhpParser.Import - 66)) | (1 << (PhpParser.Include - 66)) | (1 << (PhpParser.IncludeOnce - 66)) | (1 << (PhpParser.InstanceOf - 66)) | (1 << (PhpParser.InsteadOf - 66)) | (1 << (PhpParser.Int8Cast - 66)) | (1 << (PhpParser.Int16Cast - 66)) | (1 << (PhpParser.Int64Type - 66)) | (1 << (PhpParser.IntType - 66)) | (1 << (PhpParser.Interface - 66)) | (1 << (PhpParser.IsSet - 66)) | (1 << (PhpParser.List - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PhpParser.LogicalAnd - 98)) | (1 << (PhpParser.LogicalOr - 98)) | (1 << (PhpParser.LogicalXor - 98)) | (1 << (PhpParser.Match - 98)) | (1 << (PhpParser.Namespace - 98)) | (1 << (PhpParser.New - 98)) | (1 << (PhpParser.Null - 98)) | (1 << (PhpParser.ObjectType - 98)) | (1 << (PhpParser.Parent_ - 98)) | (1 << (PhpParser.Partial - 98)) | (1 << (PhpParser.Print - 98)) | (1 << (PhpParser.Private - 98)) | (1 << (PhpParser.Protected - 98)) | (1 << (PhpParser.Public - 98)) | (1 << (PhpParser.Require - 98)) | (1 << (PhpParser.RequireOnce - 98)) | (1 << (PhpParser.Resource - 98)) | (1 << (PhpParser.Return - 98)) | (1 << (PhpParser.Static - 98)) | (1 << (PhpParser.StringType - 98)) | (1 << (PhpParser.Switch - 98)) | (1 << (PhpParser.Throw - 98)) | (1 << (PhpParser.Trait - 98)) | (1 << (PhpParser.Try - 98)) | (1 << (PhpParser.Typeof - 98)) | (1 << (PhpParser.UintCast - 98)) | (1 << (PhpParser.UnicodeCast - 98)) | (1 << (PhpParser.Unset - 98)) | (1 << (PhpParser.Use - 98)) | (1 << (PhpParser.Var - 98)) | (1 << (PhpParser.While - 98)) | (1 << (PhpParser.Yield - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PhpParser.From - 130)) | (1 << (PhpParser.LambdaFn - 130)) | (1 << (PhpParser.Get - 130)) | (1 << (PhpParser.Set - 130)) | (1 << (PhpParser.Call - 130)) | (1 << (PhpParser.CallStatic - 130)) | (1 << (PhpParser.Constructor - 130)) | (1 << (PhpParser.Destruct - 130)) | (1 << (PhpParser.Wakeup - 130)) | (1 << (PhpParser.Sleep - 130)) | (1 << (PhpParser.Autoload - 130)) | (1 << (PhpParser.IsSet__ - 130)) | (1 << (PhpParser.Unset__ - 130)) | (1 << (PhpParser.ToString__ - 130)) | (1 << (PhpParser.Invoke - 130)) | (1 << (PhpParser.SetState - 130)) | (1 << (PhpParser.Clone__ - 130)) | (1 << (PhpParser.DebugInfo - 130)) | (1 << (PhpParser.Namespace__ - 130)) | (1 << (PhpParser.Class__ - 130)) | (1 << (PhpParser.Traic__ - 130)) | (1 << (PhpParser.Function__ - 130)) | (1 << (PhpParser.Method__ - 130)) | (1 << (PhpParser.Line__ - 130)) | (1 << (PhpParser.File__ - 130)) | (1 << (PhpParser.Dir__ - 130)) | (1 << (PhpParser.Inc - 130)) | (1 << (PhpParser.Dec - 130)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.OpenCurlyBracket - 189)) | (1 << (PhpParser.SemiColon - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 267;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 265;
	                this.inlineHtml();
	                break;

	            case 2:
	                this.state = 266;
	                this.phpBlock();
	                break;

	            }
	            this.state = 271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 272;
	        this.match(PhpParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineHtml() {
	    let localctx = new InlineHtmlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PhpParser.RULE_inlineHtml);
	    try {
	        this.state = 280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlText:
	        case PhpParser.XmlStart:
	        case PhpParser.HtmlScriptOpen:
	        case PhpParser.HtmlStyleOpen:
	        case PhpParser.HtmlDtd:
	        case PhpParser.HtmlOpen:
	        case PhpParser.HtmlClose:
	        case PhpParser.HtmlSlashClose:
	        case PhpParser.HtmlSlash:
	        case PhpParser.HtmlEquals:
	        case PhpParser.HtmlStartQuoteString:
	        case PhpParser.HtmlStartDoubleQuoteString:
	        case PhpParser.HtmlHex:
	        case PhpParser.HtmlDecimal:
	        case PhpParser.HtmlName:
	        case PhpParser.HtmlEndQuoteString:
	        case PhpParser.HtmlQuoteString:
	        case PhpParser.HtmlEndDoubleQuoteString:
	        case PhpParser.HtmlDoubleQuoteString:
	        case PhpParser.HtmlScriptClose:
	        case PhpParser.StyleBody:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 275; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 274;
	            		this.htmlElement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 277; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case PhpParser.ScriptText:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 279;
	            this.scriptText();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	htmlElement() {
	    let localctx = new HtmlElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PhpParser.RULE_htmlElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 310;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlDtd:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 282;
	            this.match(PhpParser.HtmlDtd);
	            break;
	        case PhpParser.HtmlClose:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 283;
	            this.match(PhpParser.HtmlClose);
	            break;
	        case PhpParser.HtmlStyleOpen:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 284;
	            this.match(PhpParser.HtmlStyleOpen);
	            break;
	        case PhpParser.HtmlOpen:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 285;
	            this.match(PhpParser.HtmlOpen);
	            break;
	        case PhpParser.HtmlName:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 286;
	            this.match(PhpParser.HtmlName);
	            break;
	        case PhpParser.HtmlSlashClose:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 287;
	            this.match(PhpParser.HtmlSlashClose);
	            break;
	        case PhpParser.HtmlSlash:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 288;
	            this.match(PhpParser.HtmlSlash);
	            break;
	        case PhpParser.HtmlText:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 289;
	            this.match(PhpParser.HtmlText);
	            break;
	        case PhpParser.HtmlEquals:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 290;
	            this.match(PhpParser.HtmlEquals);
	            break;
	        case PhpParser.HtmlStartQuoteString:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 291;
	            this.match(PhpParser.HtmlStartQuoteString);
	            break;
	        case PhpParser.HtmlEndQuoteString:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 292;
	            this.match(PhpParser.HtmlEndQuoteString);
	            break;
	        case PhpParser.HtmlStartDoubleQuoteString:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 293;
	            this.match(PhpParser.HtmlStartDoubleQuoteString);
	            break;
	        case PhpParser.HtmlEndDoubleQuoteString:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 294;
	            this.match(PhpParser.HtmlEndDoubleQuoteString);
	            break;
	        case PhpParser.HtmlHex:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 295;
	            this.match(PhpParser.HtmlHex);
	            break;
	        case PhpParser.HtmlDecimal:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 296;
	            this.match(PhpParser.HtmlDecimal);
	            break;
	        case PhpParser.HtmlQuoteString:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 297;
	            this.match(PhpParser.HtmlQuoteString);
	            break;
	        case PhpParser.HtmlDoubleQuoteString:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 298;
	            this.match(PhpParser.HtmlDoubleQuoteString);
	            break;
	        case PhpParser.StyleBody:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 299;
	            this.match(PhpParser.StyleBody);
	            break;
	        case PhpParser.HtmlScriptOpen:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 300;
	            this.match(PhpParser.HtmlScriptOpen);
	            break;
	        case PhpParser.HtmlScriptClose:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 301;
	            this.match(PhpParser.HtmlScriptClose);
	            break;
	        case PhpParser.XmlStart:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 302;
	            this.match(PhpParser.XmlStart);
	            this.state = 306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PhpParser.XmlText) {
	                this.state = 303;
	                this.match(PhpParser.XmlText);
	                this.state = 308;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 309;
	            this.match(PhpParser.XmlClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scriptText() {
	    let localctx = new ScriptTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PhpParser.RULE_scriptText);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 312;
	        		this.match(PhpParser.ScriptText);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 315; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,7, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	phpBlock() {
	    let localctx = new PhpBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PhpParser.RULE_phpBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 317;
	                this.importStatement(); 
	            }
	            this.state = 322;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 324; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 323;
	        		this.topStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 326; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,9, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PhpParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this.match(PhpParser.Import);
	        this.state = 329;
	        this.match(PhpParser.Namespace);
	        this.state = 330;
	        this.namespaceNameList();
	        this.state = 331;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topStatement() {
	    let localctx = new TopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PhpParser.RULE_topStatement);
	    try {
	        this.state = 339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 333;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 334;
	            this.useDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 335;
	            this.namespaceDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 336;
	            this.functionDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 337;
	            this.classDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 338;
	            this.globalConstantDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDeclaration() {
	    let localctx = new UseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PhpParser.RULE_useDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        this.match(PhpParser.Use);
	        this.state = 343;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 342;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Const || _la===PhpParser.Function_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 345;
	        this.useDeclarationContentList();
	        this.state = 346;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDeclarationContentList() {
	    let localctx = new UseDeclarationContentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PhpParser.RULE_useDeclarationContentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.NamespaceSeparator) {
	            this.state = 348;
	            this.match(PhpParser.NamespaceSeparator);
	        }

	        this.state = 351;
	        this.useDeclarationContent();
	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 352;
	            this.match(PhpParser.Comma);
	            this.state = 354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.NamespaceSeparator) {
	                this.state = 353;
	                this.match(PhpParser.NamespaceSeparator);
	            }

	            this.state = 356;
	            this.useDeclarationContent();
	            this.state = 361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDeclarationContent() {
	    let localctx = new UseDeclarationContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PhpParser.RULE_useDeclarationContent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.namespaceNameList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDeclaration() {
	    let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PhpParser.RULE_namespaceDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.match(PhpParser.Namespace);
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la===PhpParser.Label) {
	                this.state = 365;
	                this.namespaceNameList();
	            }

	            this.state = 368;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PhpParser.HtmlText - 2)) | (1 << (PhpParser.XmlStart - 2)) | (1 << (PhpParser.HtmlScriptOpen - 2)) | (1 << (PhpParser.HtmlStyleOpen - 2)) | (1 << (PhpParser.HtmlDtd - 2)) | (1 << (PhpParser.HtmlOpen - 2)) | (1 << (PhpParser.HtmlClose - 2)) | (1 << (PhpParser.HtmlSlashClose - 2)) | (1 << (PhpParser.HtmlSlash - 2)) | (1 << (PhpParser.HtmlEquals - 2)) | (1 << (PhpParser.HtmlStartQuoteString - 2)) | (1 << (PhpParser.HtmlStartDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlHex - 2)) | (1 << (PhpParser.HtmlDecimal - 2)) | (1 << (PhpParser.HtmlName - 2)) | (1 << (PhpParser.HtmlEndQuoteString - 2)) | (1 << (PhpParser.HtmlQuoteString - 2)) | (1 << (PhpParser.HtmlEndDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlDoubleQuoteString - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PhpParser.ScriptText - 34)) | (1 << (PhpParser.HtmlScriptClose - 34)) | (1 << (PhpParser.StyleBody - 34)) | (1 << (PhpParser.AttributeStart - 34)) | (1 << (PhpParser.Abstract - 34)) | (1 << (PhpParser.Array - 34)) | (1 << (PhpParser.As - 34)) | (1 << (PhpParser.BinaryCast - 34)) | (1 << (PhpParser.BoolType - 34)) | (1 << (PhpParser.BooleanConstant - 34)) | (1 << (PhpParser.Break - 34)) | (1 << (PhpParser.Callable - 34)) | (1 << (PhpParser.Case - 34)) | (1 << (PhpParser.Catch - 34)) | (1 << (PhpParser.Class - 34)) | (1 << (PhpParser.Clone - 34)) | (1 << (PhpParser.Const - 34)) | (1 << (PhpParser.Continue - 34)) | (1 << (PhpParser.Declare - 34)) | (1 << (PhpParser.Default - 34)) | (1 << (PhpParser.Do - 34)) | (1 << (PhpParser.DoubleCast - 34)) | (1 << (PhpParser.DoubleType - 34)) | (1 << (PhpParser.Echo - 34)) | (1 << (PhpParser.Else - 34)) | (1 << (PhpParser.ElseIf - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PhpParser.Empty - 66)) | (1 << (PhpParser.EndDeclare - 66)) | (1 << (PhpParser.EndFor - 66)) | (1 << (PhpParser.EndForeach - 66)) | (1 << (PhpParser.EndIf - 66)) | (1 << (PhpParser.EndSwitch - 66)) | (1 << (PhpParser.EndWhile - 66)) | (1 << (PhpParser.Eval - 66)) | (1 << (PhpParser.Exit - 66)) | (1 << (PhpParser.Extends - 66)) | (1 << (PhpParser.Final - 66)) | (1 << (PhpParser.Finally - 66)) | (1 << (PhpParser.FloatCast - 66)) | (1 << (PhpParser.For - 66)) | (1 << (PhpParser.Foreach - 66)) | (1 << (PhpParser.Function_ - 66)) | (1 << (PhpParser.Global - 66)) | (1 << (PhpParser.Goto - 66)) | (1 << (PhpParser.If - 66)) | (1 << (PhpParser.Implements - 66)) | (1 << (PhpParser.Import - 66)) | (1 << (PhpParser.Include - 66)) | (1 << (PhpParser.IncludeOnce - 66)) | (1 << (PhpParser.InstanceOf - 66)) | (1 << (PhpParser.InsteadOf - 66)) | (1 << (PhpParser.Int8Cast - 66)) | (1 << (PhpParser.Int16Cast - 66)) | (1 << (PhpParser.Int64Type - 66)) | (1 << (PhpParser.IntType - 66)) | (1 << (PhpParser.Interface - 66)) | (1 << (PhpParser.IsSet - 66)) | (1 << (PhpParser.List - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PhpParser.LogicalAnd - 98)) | (1 << (PhpParser.LogicalOr - 98)) | (1 << (PhpParser.LogicalXor - 98)) | (1 << (PhpParser.Match - 98)) | (1 << (PhpParser.Namespace - 98)) | (1 << (PhpParser.New - 98)) | (1 << (PhpParser.Null - 98)) | (1 << (PhpParser.ObjectType - 98)) | (1 << (PhpParser.Parent_ - 98)) | (1 << (PhpParser.Partial - 98)) | (1 << (PhpParser.Print - 98)) | (1 << (PhpParser.Private - 98)) | (1 << (PhpParser.Protected - 98)) | (1 << (PhpParser.Public - 98)) | (1 << (PhpParser.Require - 98)) | (1 << (PhpParser.RequireOnce - 98)) | (1 << (PhpParser.Resource - 98)) | (1 << (PhpParser.Return - 98)) | (1 << (PhpParser.Static - 98)) | (1 << (PhpParser.StringType - 98)) | (1 << (PhpParser.Switch - 98)) | (1 << (PhpParser.Throw - 98)) | (1 << (PhpParser.Trait - 98)) | (1 << (PhpParser.Try - 98)) | (1 << (PhpParser.Typeof - 98)) | (1 << (PhpParser.UintCast - 98)) | (1 << (PhpParser.UnicodeCast - 98)) | (1 << (PhpParser.Unset - 98)) | (1 << (PhpParser.Use - 98)) | (1 << (PhpParser.Var - 98)) | (1 << (PhpParser.While - 98)) | (1 << (PhpParser.Yield - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PhpParser.From - 130)) | (1 << (PhpParser.LambdaFn - 130)) | (1 << (PhpParser.Get - 130)) | (1 << (PhpParser.Set - 130)) | (1 << (PhpParser.Call - 130)) | (1 << (PhpParser.CallStatic - 130)) | (1 << (PhpParser.Constructor - 130)) | (1 << (PhpParser.Destruct - 130)) | (1 << (PhpParser.Wakeup - 130)) | (1 << (PhpParser.Sleep - 130)) | (1 << (PhpParser.Autoload - 130)) | (1 << (PhpParser.IsSet__ - 130)) | (1 << (PhpParser.Unset__ - 130)) | (1 << (PhpParser.ToString__ - 130)) | (1 << (PhpParser.Invoke - 130)) | (1 << (PhpParser.SetState - 130)) | (1 << (PhpParser.Clone__ - 130)) | (1 << (PhpParser.DebugInfo - 130)) | (1 << (PhpParser.Namespace__ - 130)) | (1 << (PhpParser.Class__ - 130)) | (1 << (PhpParser.Traic__ - 130)) | (1 << (PhpParser.Function__ - 130)) | (1 << (PhpParser.Method__ - 130)) | (1 << (PhpParser.Line__ - 130)) | (1 << (PhpParser.File__ - 130)) | (1 << (PhpParser.Dir__ - 130)) | (1 << (PhpParser.Inc - 130)) | (1 << (PhpParser.Dec - 130)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.OpenCurlyBracket - 189)) | (1 << (PhpParser.SemiColon - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 369;
	                this.namespaceStatement();
	                this.state = 374;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 375;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;

	        case 2:
	            this.state = 376;
	            this.namespaceNameList();
	            this.state = 377;
	            this.match(PhpParser.SemiColon);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceStatement() {
	    let localctx = new NamespaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PhpParser.RULE_namespaceStatement);
	    try {
	        this.state = 386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 381;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 382;
	            this.useDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 383;
	            this.functionDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 384;
	            this.classDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 385;
	            this.globalConstantDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PhpParser.RULE_functionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 388;
	            this.attributes();
	        }

	        this.state = 391;
	        this.match(PhpParser.Function_);
	        this.state = 393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Ampersand) {
	            this.state = 392;
	            this.match(PhpParser.Ampersand);
	        }

	        this.state = 395;
	        this.identifier();
	        this.state = 397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Lgeneric) {
	            this.state = 396;
	            this.typeParameterListInBrackets();
	        }

	        this.state = 399;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 400;
	        this.formalParameterList();
	        this.state = 401;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Colon) {
	            this.state = 402;
	            this.match(PhpParser.Colon);
	            this.state = 404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.QuestionMark) {
	                this.state = 403;
	                this.match(PhpParser.QuestionMark);
	            }

	            this.state = 406;
	            this.typeHint(0);
	        }

	        this.state = 409;
	        this.blockStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PhpParser.RULE_classDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 411;
	            this.attributes();
	        }

	        this.state = 415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Private) {
	            this.state = 414;
	            this.match(PhpParser.Private);
	        }

	        this.state = 418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Abstract || _la===PhpParser.Final) {
	            this.state = 417;
	            this.modifier();
	        }

	        this.state = 421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Partial) {
	            this.state = 420;
	            this.match(PhpParser.Partial);
	        }

	        this.state = 445;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Class:
	        case PhpParser.Trait:
	            this.state = 423;
	            this.classEntryType();
	            this.state = 424;
	            this.identifier();
	            this.state = 426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Lgeneric) {
	                this.state = 425;
	                this.typeParameterListInBrackets();
	            }

	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Extends) {
	                this.state = 428;
	                this.match(PhpParser.Extends);
	                this.state = 429;
	                this.qualifiedStaticTypeRef();
	            }

	            this.state = 434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Implements) {
	                this.state = 432;
	                this.match(PhpParser.Implements);
	                this.state = 433;
	                this.interfaceList();
	            }

	            break;
	        case PhpParser.Interface:
	            this.state = 436;
	            this.match(PhpParser.Interface);
	            this.state = 437;
	            this.identifier();
	            this.state = 439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Lgeneric) {
	                this.state = 438;
	                this.typeParameterListInBrackets();
	            }

	            this.state = 443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Extends) {
	                this.state = 441;
	                this.match(PhpParser.Extends);
	                this.state = 442;
	                this.interfaceList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 447;
	        this.match(PhpParser.OpenCurlyBracket);
	        this.state = 451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Const - 43)))) !== 0) || _la===PhpParser.Final || _la===PhpParser.Function_ || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)) | (1 << (PhpParser.Use - 109)) | (1 << (PhpParser.Var - 109)))) !== 0)) {
	            this.state = 448;
	            this.classStatement();
	            this.state = 453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 454;
	        this.match(PhpParser.CloseCurlyBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classEntryType() {
	    let localctx = new ClassEntryTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PhpParser.RULE_classEntryType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456;
	        _la = this._input.LA(1);
	        if(!(_la===PhpParser.Class || _la===PhpParser.Trait)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceList() {
	    let localctx = new InterfaceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PhpParser.RULE_interfaceList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.qualifiedStaticTypeRef();
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 459;
	            this.match(PhpParser.Comma);
	            this.state = 460;
	            this.qualifiedStaticTypeRef();
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterListInBrackets() {
	    let localctx = new TypeParameterListInBracketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PhpParser.RULE_typeParameterListInBrackets);
	    try {
	        this.state = 480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 466;
	            this.match(PhpParser.Lgeneric);
	            this.state = 467;
	            this.typeParameterList();
	            this.state = 468;
	            this.match(PhpParser.Rgeneric);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 470;
	            this.match(PhpParser.Lgeneric);
	            this.state = 471;
	            this.typeParameterWithDefaultsList();
	            this.state = 472;
	            this.match(PhpParser.Rgeneric);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 474;
	            this.match(PhpParser.Lgeneric);
	            this.state = 475;
	            this.typeParameterList();
	            this.state = 476;
	            this.match(PhpParser.Comma);
	            this.state = 477;
	            this.typeParameterWithDefaultsList();
	            this.state = 478;
	            this.match(PhpParser.Rgeneric);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterList() {
	    let localctx = new TypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PhpParser.RULE_typeParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.typeParameterDecl();
	        this.state = 487;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 483;
	                this.match(PhpParser.Comma);
	                this.state = 484;
	                this.typeParameterDecl(); 
	            }
	            this.state = 489;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterWithDefaultsList() {
	    let localctx = new TypeParameterWithDefaultsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PhpParser.RULE_typeParameterWithDefaultsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.typeParameterWithDefaultDecl();
	        this.state = 495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 491;
	            this.match(PhpParser.Comma);
	            this.state = 492;
	            this.typeParameterWithDefaultDecl();
	            this.state = 497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterDecl() {
	    let localctx = new TypeParameterDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PhpParser.RULE_typeParameterDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 498;
	            this.attributes();
	        }

	        this.state = 501;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterWithDefaultDecl() {
	    let localctx = new TypeParameterWithDefaultDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PhpParser.RULE_typeParameterWithDefaultDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 503;
	            this.attributes();
	        }

	        this.state = 506;
	        this.identifier();
	        this.state = 507;
	        this.match(PhpParser.Eq);
	        this.state = 510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 508;
	            this.qualifiedStaticTypeRef();
	            break;

	        case 2:
	            this.state = 509;
	            this.primitiveType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericDynamicArgs() {
	    let localctx = new GenericDynamicArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PhpParser.RULE_genericDynamicArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(PhpParser.Lgeneric);
	        this.state = 513;
	        this.typeRef();
	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 514;
	            this.match(PhpParser.Comma);
	            this.state = 515;
	            this.typeRef();
	            this.state = 520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 521;
	        this.match(PhpParser.Rgeneric);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributes() {
	    let localctx = new AttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PhpParser.RULE_attributes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 523;
	            this.attributeGroup();
	            this.state = 526; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===PhpParser.AttributeStart);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeGroup() {
	    let localctx = new AttributeGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PhpParser.RULE_attributeGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(PhpParser.AttributeStart);
	        this.state = 532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 529;
	            this.identifier();
	            this.state = 530;
	            this.match(PhpParser.Colon);

	        }
	        this.state = 534;
	        this.attribute();
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 535;
	            this.match(PhpParser.Comma);
	            this.state = 536;
	            this.attribute();
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 542;
	        this.match(PhpParser.CloseSquareBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PhpParser.RULE_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this.qualifiedNamespaceName();
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.OpenRoundBracket) {
	            this.state = 545;
	            this.arguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerStatementList() {
	    let localctx = new InnerStatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PhpParser.RULE_innerStatementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 548;
	                this.innerStatement(); 
	            }
	            this.state = 553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerStatement() {
	    let localctx = new InnerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PhpParser.RULE_innerStatement);
	    try {
	        this.state = 557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 554;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 555;
	            this.functionDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 556;
	            this.classDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PhpParser.RULE_statement);
	    try {
	        this.state = 586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 559;
	            this.identifier();
	            this.state = 560;
	            this.match(PhpParser.Colon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 562;
	            this.blockStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 563;
	            this.ifStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 564;
	            this.whileStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 565;
	            this.doWhileStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 566;
	            this.forStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 567;
	            this.switchStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 568;
	            this.breakStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 569;
	            this.continueStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 570;
	            this.returnStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 571;
	            this.yieldExpression();
	            this.state = 572;
	            this.match(PhpParser.SemiColon);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 574;
	            this.globalStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 575;
	            this.staticVariableStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 576;
	            this.echoStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 577;
	            this.expressionStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 578;
	            this.unsetStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 579;
	            this.foreachStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 580;
	            this.tryCatchFinally();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 581;
	            this.throwStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 582;
	            this.gotoStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 583;
	            this.declareStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 584;
	            this.emptyStatement_();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 585;
	            this.inlineHtmlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PhpParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, PhpParser.RULE_blockStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.match(PhpParser.OpenCurlyBracket);
	        this.state = 591;
	        this.innerStatementList();
	        this.state = 592;
	        this.match(PhpParser.CloseCurlyBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PhpParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            this.match(PhpParser.If);
	            this.state = 595;
	            this.parentheses();
	            this.state = 596;
	            this.statement();
	            this.state = 600;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 597;
	                    this.elseIfStatement(); 
	                }
	                this.state = 602;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	            }

	            this.state = 604;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            if(la_===1) {
	                this.state = 603;
	                this.elseStatement();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 606;
	            this.match(PhpParser.If);
	            this.state = 607;
	            this.parentheses();
	            this.state = 608;
	            this.match(PhpParser.Colon);
	            this.state = 609;
	            this.innerStatementList();
	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PhpParser.ElseIf) {
	                this.state = 610;
	                this.elseIfColonStatement();
	                this.state = 615;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Else) {
	                this.state = 616;
	                this.elseColonStatement();
	            }

	            this.state = 619;
	            this.match(PhpParser.EndIf);
	            this.state = 620;
	            this.match(PhpParser.SemiColon);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseIfStatement() {
	    let localctx = new ElseIfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PhpParser.RULE_elseIfStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(PhpParser.ElseIf);
	        this.state = 625;
	        this.parentheses();
	        this.state = 626;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseIfColonStatement() {
	    let localctx = new ElseIfColonStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PhpParser.RULE_elseIfColonStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(PhpParser.ElseIf);
	        this.state = 629;
	        this.parentheses();
	        this.state = 630;
	        this.match(PhpParser.Colon);
	        this.state = 631;
	        this.innerStatementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseStatement() {
	    let localctx = new ElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PhpParser.RULE_elseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(PhpParser.Else);
	        this.state = 634;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseColonStatement() {
	    let localctx = new ElseColonStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PhpParser.RULE_elseColonStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.match(PhpParser.Else);
	        this.state = 637;
	        this.match(PhpParser.Colon);
	        this.state = 638;
	        this.innerStatementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PhpParser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(PhpParser.While);
	        this.state = 641;
	        this.parentheses();
	        this.state = 648;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlText:
	        case PhpParser.XmlStart:
	        case PhpParser.HtmlScriptOpen:
	        case PhpParser.HtmlStyleOpen:
	        case PhpParser.HtmlDtd:
	        case PhpParser.HtmlOpen:
	        case PhpParser.HtmlClose:
	        case PhpParser.HtmlSlashClose:
	        case PhpParser.HtmlSlash:
	        case PhpParser.HtmlEquals:
	        case PhpParser.HtmlStartQuoteString:
	        case PhpParser.HtmlStartDoubleQuoteString:
	        case PhpParser.HtmlHex:
	        case PhpParser.HtmlDecimal:
	        case PhpParser.HtmlName:
	        case PhpParser.HtmlEndQuoteString:
	        case PhpParser.HtmlQuoteString:
	        case PhpParser.HtmlEndDoubleQuoteString:
	        case PhpParser.HtmlDoubleQuoteString:
	        case PhpParser.ScriptText:
	        case PhpParser.HtmlScriptClose:
	        case PhpParser.StyleBody:
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Match:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.LambdaFn:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Inc:
	        case PhpParser.Dec:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Bang:
	        case PhpParser.Plus:
	        case PhpParser.Minus:
	        case PhpParser.Tilde:
	        case PhpParser.SuppressWarnings:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.OpenSquareBracket:
	        case PhpParser.OpenCurlyBracket:
	        case PhpParser.SemiColon:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Real:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	        case PhpParser.BackQuoteString:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.state = 642;
	            this.statement();
	            break;
	        case PhpParser.Colon:
	            this.state = 643;
	            this.match(PhpParser.Colon);
	            this.state = 644;
	            this.innerStatementList();
	            this.state = 645;
	            this.match(PhpParser.EndWhile);
	            this.state = 646;
	            this.match(PhpParser.SemiColon);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doWhileStatement() {
	    let localctx = new DoWhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PhpParser.RULE_doWhileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(PhpParser.Do);
	        this.state = 651;
	        this.statement();
	        this.state = 652;
	        this.match(PhpParser.While);
	        this.state = 653;
	        this.parentheses();
	        this.state = 654;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, PhpParser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.match(PhpParser.For);
	        this.state = 657;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 658;
	            this.forInit();
	        }

	        this.state = 661;
	        this.match(PhpParser.SemiColon);
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 662;
	            this.expressionList();
	        }

	        this.state = 665;
	        this.match(PhpParser.SemiColon);
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 666;
	            this.forUpdate();
	        }

	        this.state = 669;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlText:
	        case PhpParser.XmlStart:
	        case PhpParser.HtmlScriptOpen:
	        case PhpParser.HtmlStyleOpen:
	        case PhpParser.HtmlDtd:
	        case PhpParser.HtmlOpen:
	        case PhpParser.HtmlClose:
	        case PhpParser.HtmlSlashClose:
	        case PhpParser.HtmlSlash:
	        case PhpParser.HtmlEquals:
	        case PhpParser.HtmlStartQuoteString:
	        case PhpParser.HtmlStartDoubleQuoteString:
	        case PhpParser.HtmlHex:
	        case PhpParser.HtmlDecimal:
	        case PhpParser.HtmlName:
	        case PhpParser.HtmlEndQuoteString:
	        case PhpParser.HtmlQuoteString:
	        case PhpParser.HtmlEndDoubleQuoteString:
	        case PhpParser.HtmlDoubleQuoteString:
	        case PhpParser.ScriptText:
	        case PhpParser.HtmlScriptClose:
	        case PhpParser.StyleBody:
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Match:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.LambdaFn:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Inc:
	        case PhpParser.Dec:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Bang:
	        case PhpParser.Plus:
	        case PhpParser.Minus:
	        case PhpParser.Tilde:
	        case PhpParser.SuppressWarnings:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.OpenSquareBracket:
	        case PhpParser.OpenCurlyBracket:
	        case PhpParser.SemiColon:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Real:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	        case PhpParser.BackQuoteString:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.state = 670;
	            this.statement();
	            break;
	        case PhpParser.Colon:
	            this.state = 671;
	            this.match(PhpParser.Colon);
	            this.state = 672;
	            this.innerStatementList();
	            this.state = 673;
	            this.match(PhpParser.EndFor);
	            this.state = 674;
	            this.match(PhpParser.SemiColon);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, PhpParser.RULE_forInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, PhpParser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, PhpParser.RULE_switchStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(PhpParser.Switch);
	        this.state = 683;
	        this.parentheses();
	        this.state = 707;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.OpenCurlyBracket:
	            this.state = 684;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.SemiColon) {
	                this.state = 685;
	                this.match(PhpParser.SemiColon);
	            }

	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PhpParser.Case || _la===PhpParser.Default) {
	                this.state = 688;
	                this.switchBlock();
	                this.state = 693;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 694;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        case PhpParser.Colon:
	            this.state = 695;
	            this.match(PhpParser.Colon);
	            this.state = 697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.SemiColon) {
	                this.state = 696;
	                this.match(PhpParser.SemiColon);
	            }

	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PhpParser.Case || _la===PhpParser.Default) {
	                this.state = 699;
	                this.switchBlock();
	                this.state = 704;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 705;
	            this.match(PhpParser.EndSwitch);
	            this.state = 706;
	            this.match(PhpParser.SemiColon);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, PhpParser.RULE_switchBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 712;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case PhpParser.Case:
	        		    this.state = 709;
	        		    this.match(PhpParser.Case);
	        		    this.state = 710;
	        		    this.expression(0);
	        		    break;
	        		case PhpParser.Default:
	        		    this.state = 711;
	        		    this.match(PhpParser.Default);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		this.state = 714;
	        		_la = this._input.LA(1);
	        		if(!(_la===PhpParser.Colon || _la===PhpParser.SemiColon)) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 717; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,66, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 719;
	        this.innerStatementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, PhpParser.RULE_breakStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.match(PhpParser.Break);
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 722;
	            this.expression(0);
	        }

	        this.state = 725;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, PhpParser.RULE_continueStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.match(PhpParser.Continue);
	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 728;
	            this.expression(0);
	        }

	        this.state = 731;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, PhpParser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this.match(PhpParser.Return);
	        this.state = 735;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 734;
	            this.expression(0);
	        }

	        this.state = 737;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, PhpParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.expression(0);
	        this.state = 740;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsetStatement() {
	    let localctx = new UnsetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, PhpParser.RULE_unsetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.match(PhpParser.Unset);
	        this.state = 743;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 744;
	        this.chainList();
	        this.state = 745;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 746;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreachStatement() {
	    let localctx = new ForeachStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, PhpParser.RULE_foreachStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.match(PhpParser.Foreach);
	        this.state = 787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 749;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 750;
	            this.chain();
	            this.state = 751;
	            this.match(PhpParser.As);
	            this.state = 753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Ampersand) {
	                this.state = 752;
	                this.match(PhpParser.Ampersand);
	            }

	            this.state = 755;
	            this.assignable();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.DoubleArrow) {
	                this.state = 756;
	                this.match(PhpParser.DoubleArrow);
	                this.state = 758;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===PhpParser.Ampersand) {
	                    this.state = 757;
	                    this.match(PhpParser.Ampersand);
	                }

	                this.state = 760;
	                this.chain();
	            }

	            this.state = 763;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 2:
	            this.state = 765;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 766;
	            this.expression(0);
	            this.state = 767;
	            this.match(PhpParser.As);
	            this.state = 768;
	            this.assignable();
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.DoubleArrow) {
	                this.state = 769;
	                this.match(PhpParser.DoubleArrow);
	                this.state = 771;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===PhpParser.Ampersand) {
	                    this.state = 770;
	                    this.match(PhpParser.Ampersand);
	                }

	                this.state = 773;
	                this.chain();
	            }

	            this.state = 776;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 3:
	            this.state = 778;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 779;
	            this.chain();
	            this.state = 780;
	            this.match(PhpParser.As);
	            this.state = 781;
	            this.match(PhpParser.List);
	            this.state = 782;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 783;
	            this.assignmentList();
	            this.state = 784;
	            this.match(PhpParser.CloseRoundBracket);
	            this.state = 785;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        }
	        this.state = 795;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlText:
	        case PhpParser.XmlStart:
	        case PhpParser.HtmlScriptOpen:
	        case PhpParser.HtmlStyleOpen:
	        case PhpParser.HtmlDtd:
	        case PhpParser.HtmlOpen:
	        case PhpParser.HtmlClose:
	        case PhpParser.HtmlSlashClose:
	        case PhpParser.HtmlSlash:
	        case PhpParser.HtmlEquals:
	        case PhpParser.HtmlStartQuoteString:
	        case PhpParser.HtmlStartDoubleQuoteString:
	        case PhpParser.HtmlHex:
	        case PhpParser.HtmlDecimal:
	        case PhpParser.HtmlName:
	        case PhpParser.HtmlEndQuoteString:
	        case PhpParser.HtmlQuoteString:
	        case PhpParser.HtmlEndDoubleQuoteString:
	        case PhpParser.HtmlDoubleQuoteString:
	        case PhpParser.ScriptText:
	        case PhpParser.HtmlScriptClose:
	        case PhpParser.StyleBody:
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Match:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.LambdaFn:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Inc:
	        case PhpParser.Dec:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Bang:
	        case PhpParser.Plus:
	        case PhpParser.Minus:
	        case PhpParser.Tilde:
	        case PhpParser.SuppressWarnings:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.OpenSquareBracket:
	        case PhpParser.OpenCurlyBracket:
	        case PhpParser.SemiColon:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Real:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	        case PhpParser.BackQuoteString:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.state = 789;
	            this.statement();
	            break;
	        case PhpParser.Colon:
	            this.state = 790;
	            this.match(PhpParser.Colon);
	            this.state = 791;
	            this.innerStatementList();
	            this.state = 792;
	            this.match(PhpParser.EndForeach);
	            this.state = 793;
	            this.match(PhpParser.SemiColon);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryCatchFinally() {
	    let localctx = new TryCatchFinallyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, PhpParser.RULE_tryCatchFinally);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this.match(PhpParser.Try);
	        this.state = 798;
	        this.blockStatement();
	        this.state = 814;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 800; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 799;
	            		this.catchClause();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 802; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,77, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 805;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 804;
	                this.finallyStatement();

	            }
	            break;

	        case 2:
	            this.state = 810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===PhpParser.Catch) {
	                this.state = 807;
	                this.catchClause();
	                this.state = 812;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 813;
	            this.finallyStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, PhpParser.RULE_catchClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.match(PhpParser.Catch);
	        this.state = 817;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 818;
	        this.qualifiedStaticTypeRef();
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Pipe) {
	            this.state = 819;
	            this.match(PhpParser.Pipe);
	            this.state = 820;
	            this.qualifiedStaticTypeRef();
	            this.state = 825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 826;
	        this.match(PhpParser.VarName);
	        this.state = 827;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 828;
	        this.blockStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyStatement() {
	    let localctx = new FinallyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, PhpParser.RULE_finallyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this.match(PhpParser.Finally);
	        this.state = 831;
	        this.blockStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, PhpParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.match(PhpParser.Throw);
	        this.state = 834;
	        this.expression(0);
	        this.state = 835;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStatement() {
	    let localctx = new GotoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, PhpParser.RULE_gotoStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.match(PhpParser.Goto);
	        this.state = 838;
	        this.identifier();
	        this.state = 839;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareStatement() {
	    let localctx = new DeclareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, PhpParser.RULE_declareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.match(PhpParser.Declare);
	        this.state = 842;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 843;
	        this.declareList();
	        this.state = 844;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.HtmlText:
	        case PhpParser.XmlStart:
	        case PhpParser.HtmlScriptOpen:
	        case PhpParser.HtmlStyleOpen:
	        case PhpParser.HtmlDtd:
	        case PhpParser.HtmlOpen:
	        case PhpParser.HtmlClose:
	        case PhpParser.HtmlSlashClose:
	        case PhpParser.HtmlSlash:
	        case PhpParser.HtmlEquals:
	        case PhpParser.HtmlStartQuoteString:
	        case PhpParser.HtmlStartDoubleQuoteString:
	        case PhpParser.HtmlHex:
	        case PhpParser.HtmlDecimal:
	        case PhpParser.HtmlName:
	        case PhpParser.HtmlEndQuoteString:
	        case PhpParser.HtmlQuoteString:
	        case PhpParser.HtmlEndDoubleQuoteString:
	        case PhpParser.HtmlDoubleQuoteString:
	        case PhpParser.ScriptText:
	        case PhpParser.HtmlScriptClose:
	        case PhpParser.StyleBody:
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Match:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.LambdaFn:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Inc:
	        case PhpParser.Dec:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Bang:
	        case PhpParser.Plus:
	        case PhpParser.Minus:
	        case PhpParser.Tilde:
	        case PhpParser.SuppressWarnings:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.OpenSquareBracket:
	        case PhpParser.OpenCurlyBracket:
	        case PhpParser.SemiColon:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Real:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	        case PhpParser.BackQuoteString:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.state = 845;
	            this.statement();
	            break;
	        case PhpParser.Colon:
	            this.state = 846;
	            this.match(PhpParser.Colon);
	            this.state = 847;
	            this.innerStatementList();
	            this.state = 848;
	            this.match(PhpParser.EndDeclare);
	            this.state = 849;
	            this.match(PhpParser.SemiColon);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineHtmlStatement() {
	    let localctx = new InlineHtmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, PhpParser.RULE_inlineHtmlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 853;
	        		this.inlineHtml();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 856; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,83, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareList() {
	    let localctx = new DeclareListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, PhpParser.RULE_declareList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.identifierInitializer();
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 859;
	            this.match(PhpParser.Comma);
	            this.state = 860;
	            this.identifierInitializer();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, PhpParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (PhpParser.Extends - 75)) | (1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Finally - 75)) | (1 << (PhpParser.FloatCast - 75)) | (1 << (PhpParser.For - 75)) | (1 << (PhpParser.Foreach - 75)) | (1 << (PhpParser.Function_ - 75)) | (1 << (PhpParser.Global - 75)) | (1 << (PhpParser.Goto - 75)) | (1 << (PhpParser.If - 75)) | (1 << (PhpParser.Implements - 75)) | (1 << (PhpParser.Import - 75)) | (1 << (PhpParser.Include - 75)) | (1 << (PhpParser.IncludeOnce - 75)) | (1 << (PhpParser.InstanceOf - 75)) | (1 << (PhpParser.InsteadOf - 75)) | (1 << (PhpParser.Int8Cast - 75)) | (1 << (PhpParser.Int16Cast - 75)) | (1 << (PhpParser.Int64Type - 75)) | (1 << (PhpParser.IntType - 75)) | (1 << (PhpParser.Interface - 75)) | (1 << (PhpParser.IsSet - 75)) | (1 << (PhpParser.List - 75)) | (1 << (PhpParser.LogicalAnd - 75)) | (1 << (PhpParser.LogicalOr - 75)) | (1 << (PhpParser.LogicalXor - 75)) | (1 << (PhpParser.Namespace - 75)) | (1 << (PhpParser.New - 75)) | (1 << (PhpParser.Null - 75)) | (1 << (PhpParser.ObjectType - 75)) | (1 << (PhpParser.Parent_ - 75)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (PhpParser.Partial - 107)) | (1 << (PhpParser.Print - 107)) | (1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.From - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (PhpParser.Sleep - 139)) | (1 << (PhpParser.Autoload - 139)) | (1 << (PhpParser.IsSet__ - 139)) | (1 << (PhpParser.Unset__ - 139)) | (1 << (PhpParser.ToString__ - 139)) | (1 << (PhpParser.Invoke - 139)) | (1 << (PhpParser.SetState - 139)) | (1 << (PhpParser.Clone__ - 139)) | (1 << (PhpParser.DebugInfo - 139)) | (1 << (PhpParser.Namespace__ - 139)) | (1 << (PhpParser.Class__ - 139)) | (1 << (PhpParser.Traic__ - 139)) | (1 << (PhpParser.Function__ - 139)) | (1 << (PhpParser.Method__ - 139)) | (1 << (PhpParser.Line__ - 139)) | (1 << (PhpParser.File__ - 139)) | (1 << (PhpParser.Dir__ - 139)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ellipsis - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.QuestionMark - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0)) {
	            this.state = 866;
	            this.formalParameter();
	        }

	        this.state = 873;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 869;
	                this.match(PhpParser.Comma);
	                this.state = 870;
	                this.formalParameter(); 
	            }
	            this.state = 875;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	        this.state = 877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Comma) {
	            this.state = 876;
	            this.match(PhpParser.Comma);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, PhpParser.RULE_formalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 879;
	            this.attributes();
	        }

	        this.state = 883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 882;
	            this.memberModifier();

	        }
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.QuestionMark) {
	            this.state = 885;
	            this.match(PhpParser.QuestionMark);
	        }

	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la===PhpParser.NamespaceSeparator || _la===PhpParser.Label) {
	            this.state = 888;
	            this.typeHint(0);
	        }

	        this.state = 892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Ampersand) {
	            this.state = 891;
	            this.match(PhpParser.Ampersand);
	        }

	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Ellipsis) {
	            this.state = 894;
	            this.match(PhpParser.Ellipsis);
	        }

	        this.state = 897;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typeHint(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeHintContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 116;
	    this.enterRecursionRule(localctx, 116, PhpParser.RULE_typeHint, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 900;
	            this.qualifiedStaticTypeRef();
	            break;

	        case 2:
	            this.state = 901;
	            this.match(PhpParser.Callable);
	            break;

	        case 3:
	            this.state = 902;
	            this.primitiveType();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 910;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeHintContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_typeHint);
	                this.state = 905;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 906;
	                this.match(PhpParser.Pipe);
	                this.state = 907;
	                this.typeHint(2); 
	            }
	            this.state = 912;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	globalStatement() {
	    let localctx = new GlobalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, PhpParser.RULE_globalStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this.match(PhpParser.Global);
	        this.state = 914;
	        this.globalVar();
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 915;
	            this.match(PhpParser.Comma);
	            this.state = 916;
	            this.globalVar();
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 922;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVar() {
	    let localctx = new GlobalVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, PhpParser.RULE_globalVar);
	    try {
	        this.state = 932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 924;
	            this.match(PhpParser.VarName);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 925;
	            this.match(PhpParser.Dollar);
	            this.state = 926;
	            this.chain();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 927;
	            this.match(PhpParser.Dollar);
	            this.state = 928;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 929;
	            this.expression(0);
	            this.state = 930;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	echoStatement() {
	    let localctx = new EchoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, PhpParser.RULE_echoStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        this.match(PhpParser.Echo);
	        this.state = 935;
	        this.expressionList();
	        this.state = 936;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticVariableStatement() {
	    let localctx = new StaticVariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, PhpParser.RULE_staticVariableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this.match(PhpParser.Static);
	        this.state = 939;
	        this.variableInitializer();
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 940;
	            this.match(PhpParser.Comma);
	            this.state = 941;
	            this.variableInitializer();
	            this.state = 946;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 947;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classStatement() {
	    let localctx = new ClassStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, PhpParser.RULE_classStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.AttributeStart:
	        case PhpParser.Abstract:
	        case PhpParser.Const:
	        case PhpParser.Final:
	        case PhpParser.Function_:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Static:
	        case PhpParser.Var:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.AttributeStart) {
	                this.state = 949;
	                this.attributes();
	            }

	            this.state = 1001;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 952;
	                this.propertyModifiers();
	                this.state = 954;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la===PhpParser.NamespaceSeparator || _la===PhpParser.Label) {
	                    this.state = 953;
	                    this.typeHint(0);
	                }

	                this.state = 956;
	                this.variableInitializer();
	                this.state = 961;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===PhpParser.Comma) {
	                    this.state = 957;
	                    this.match(PhpParser.Comma);
	                    this.state = 958;
	                    this.variableInitializer();
	                    this.state = 963;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 964;
	                this.match(PhpParser.SemiColon);
	                break;

	            case 2:
	                this.state = 967;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===PhpParser.Abstract || _la===PhpParser.Final || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)))) !== 0)) {
	                    this.state = 966;
	                    this.memberModifiers();
	                }

	                this.state = 999;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case PhpParser.Const:
	                    this.state = 969;
	                    this.match(PhpParser.Const);
	                    this.state = 971;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	                    if(la_===1) {
	                        this.state = 970;
	                        this.typeHint(0);

	                    }
	                    this.state = 973;
	                    this.identifierInitializer();
	                    this.state = 978;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===PhpParser.Comma) {
	                        this.state = 974;
	                        this.match(PhpParser.Comma);
	                        this.state = 975;
	                        this.identifierInitializer();
	                        this.state = 980;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 981;
	                    this.match(PhpParser.SemiColon);
	                    break;
	                case PhpParser.Function_:
	                    this.state = 983;
	                    this.match(PhpParser.Function_);
	                    this.state = 985;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===PhpParser.Ampersand) {
	                        this.state = 984;
	                        this.match(PhpParser.Ampersand);
	                    }

	                    this.state = 987;
	                    this.identifier();
	                    this.state = 989;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===PhpParser.Lgeneric) {
	                        this.state = 988;
	                        this.typeParameterListInBrackets();
	                    }

	                    this.state = 991;
	                    this.match(PhpParser.OpenRoundBracket);
	                    this.state = 992;
	                    this.formalParameterList();
	                    this.state = 993;
	                    this.match(PhpParser.CloseRoundBracket);
	                    this.state = 995;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===PhpParser.Colon) {
	                        this.state = 994;
	                        this.baseCtorCall();
	                    }

	                    this.state = 997;
	                    this.methodBody();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            break;
	        case PhpParser.Use:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1003;
	            this.match(PhpParser.Use);
	            this.state = 1004;
	            this.qualifiedNamespaceNameList();
	            this.state = 1005;
	            this.traitAdaptations();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitAdaptations() {
	    let localctx = new TraitAdaptationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, PhpParser.RULE_traitAdaptations);
	    var _la = 0; // Token type
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.SemiColon:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1009;
	            this.match(PhpParser.SemiColon);
	            break;
	        case PhpParser.OpenCurlyBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1010;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 1014;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la===PhpParser.NamespaceSeparator || _la===PhpParser.Label) {
	                this.state = 1011;
	                this.traitAdaptationStatement();
	                this.state = 1016;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1017;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitAdaptationStatement() {
	    let localctx = new TraitAdaptationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, PhpParser.RULE_traitAdaptationStatement);
	    try {
	        this.state = 1022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1020;
	            this.traitPrecedence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1021;
	            this.traitAlias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitPrecedence() {
	    let localctx = new TraitPrecedenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, PhpParser.RULE_traitPrecedence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this.qualifiedNamespaceName();
	        this.state = 1025;
	        this.match(PhpParser.DoubleColon);
	        this.state = 1026;
	        this.identifier();
	        this.state = 1027;
	        this.match(PhpParser.InsteadOf);
	        this.state = 1028;
	        this.qualifiedNamespaceNameList();
	        this.state = 1029;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitAlias() {
	    let localctx = new TraitAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, PhpParser.RULE_traitAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.traitMethodReference();
	        this.state = 1032;
	        this.match(PhpParser.As);
	        this.state = 1038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1033;
	            this.memberModifier();
	            break;

	        case 2:
	            this.state = 1035;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	            if(la_===1) {
	                this.state = 1034;
	                this.memberModifier();

	            }
	            this.state = 1037;
	            this.identifier();
	            break;

	        }
	        this.state = 1040;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitMethodReference() {
	    let localctx = new TraitMethodReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, PhpParser.RULE_traitMethodReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 1042;
	            this.qualifiedNamespaceName();
	            this.state = 1043;
	            this.match(PhpParser.DoubleColon);

	        }
	        this.state = 1047;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseCtorCall() {
	    let localctx = new BaseCtorCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, PhpParser.RULE_baseCtorCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.match(PhpParser.Colon);
	        this.state = 1050;
	        this.identifier();
	        this.state = 1052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.OpenRoundBracket) {
	            this.state = 1051;
	            this.arguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, PhpParser.RULE_methodBody);
	    try {
	        this.state = 1056;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.SemiColon:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1054;
	            this.match(PhpParser.SemiColon);
	            break;
	        case PhpParser.OpenCurlyBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1055;
	            this.blockStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyModifiers() {
	    let localctx = new PropertyModifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, PhpParser.RULE_propertyModifiers);
	    try {
	        this.state = 1060;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Abstract:
	        case PhpParser.Final:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Static:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1058;
	            this.memberModifiers();
	            break;
	        case PhpParser.Var:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1059;
	            this.match(PhpParser.Var);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberModifiers() {
	    let localctx = new MemberModifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, PhpParser.RULE_memberModifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1063; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1062;
	        		this.memberModifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1065; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,120, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, PhpParser.RULE_variableInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this.match(PhpParser.VarName);
	        this.state = 1070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Eq) {
	            this.state = 1068;
	            this.match(PhpParser.Eq);
	            this.state = 1069;
	            this.constantInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierInitializer() {
	    let localctx = new IdentifierInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, PhpParser.RULE_identifierInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1072;
	        this.identifier();
	        this.state = 1073;
	        this.match(PhpParser.Eq);
	        this.state = 1074;
	        this.constantInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantDeclaration() {
	    let localctx = new GlobalConstantDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, PhpParser.RULE_globalConstantDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 1076;
	            this.attributes();
	        }

	        this.state = 1079;
	        this.match(PhpParser.Const);
	        this.state = 1080;
	        this.identifierInitializer();
	        this.state = 1085;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1081;
	            this.match(PhpParser.Comma);
	            this.state = 1082;
	            this.identifierInitializer();
	            this.state = 1087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1088;
	        this.match(PhpParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, PhpParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.expression(0);
	        this.state = 1095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1091;
	            this.match(PhpParser.Comma);
	            this.state = 1092;
	            this.expression(0);
	            this.state = 1097;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentheses() {
	    let localctx = new ParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, PhpParser.RULE_parentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 1101;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1099;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 1100;
	            this.yieldExpression();
	            break;

	        }
	        this.state = 1103;
	        this.match(PhpParser.CloseRoundBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 156;
	    this.enterRecursionRule(localctx, 156, PhpParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1191;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CloneExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1106;
	            this.match(PhpParser.Clone);
	            this.state = 1107;
	            this.expression(47);
	            break;

	        case 2:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1108;
	            this.newExpr();
	            break;

	        case 3:
	            localctx = new IndexerExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1109;
	            this.stringConstant();
	            this.state = 1110;
	            this.match(PhpParser.OpenSquareBracket);
	            this.state = 1111;
	            this.expression(0);
	            this.state = 1112;
	            this.match(PhpParser.CloseSquareBracket);
	            break;

	        case 4:
	            localctx = new CastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1114;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1115;
	            this.castOperation();
	            this.state = 1116;
	            this.match(PhpParser.CloseRoundBracket);
	            this.state = 1117;
	            this.expression(44);
	            break;

	        case 5:
	            localctx = new UnaryOperatorExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1119;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Tilde || _la===PhpParser.SuppressWarnings)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1120;
	            this.expression(43);
	            break;

	        case 6:
	            localctx = new UnaryOperatorExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1121;
	            _la = this._input.LA(1);
	            if(!(((((_la - 195)) & ~0x1f) == 0 && ((1 << (_la - 195)) & ((1 << (PhpParser.Bang - 195)) | (1 << (PhpParser.Plus - 195)) | (1 << (PhpParser.Minus - 195)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1122;
	            this.expression(42);
	            break;

	        case 7:
	            localctx = new PrefixIncDecExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1123;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Inc || _la===PhpParser.Dec)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1124;
	            this.chain();
	            break;

	        case 8:
	            localctx = new PostfixIncDecExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1125;
	            this.chain();
	            this.state = 1126;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Inc || _la===PhpParser.Dec)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new PrintExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1128;
	            this.match(PhpParser.Print);
	            this.state = 1129;
	            this.expression(39);
	            break;

	        case 10:
	            localctx = new ChainExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1130;
	            this.chain();
	            break;

	        case 11:
	            localctx = new ScalarExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1131;
	            this.constant();
	            break;

	        case 12:
	            localctx = new ScalarExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1132;
	            this.string();
	            break;

	        case 13:
	            localctx = new ScalarExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1133;
	            this.match(PhpParser.Label);
	            break;

	        case 14:
	            localctx = new BackQuoteStringExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1134;
	            this.match(PhpParser.BackQuoteString);
	            break;

	        case 15:
	            localctx = new ParenthesisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1135;
	            this.parentheses();
	            break;

	        case 16:
	            localctx = new ArrayCreationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1136;
	            this.arrayCreation();
	            break;

	        case 17:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1137;
	            this.match(PhpParser.Yield);
	            break;

	        case 18:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1138;
	            this.match(PhpParser.List);
	            this.state = 1139;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1140;
	            this.assignmentList();
	            this.state = 1141;
	            this.match(PhpParser.CloseRoundBracket);
	            this.state = 1142;
	            this.match(PhpParser.Eq);
	            this.state = 1143;
	            this.expression(30);
	            break;

	        case 19:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1145;
	            this.match(PhpParser.IsSet);
	            this.state = 1146;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1147;
	            this.chainList();
	            this.state = 1148;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 20:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1150;
	            this.match(PhpParser.Empty);
	            this.state = 1151;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1152;
	            this.chain();
	            this.state = 1153;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 21:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1155;
	            this.match(PhpParser.Eval);
	            this.state = 1156;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1157;
	            this.expression(0);
	            this.state = 1158;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 22:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1160;
	            this.match(PhpParser.Exit);
	            this.state = 1164;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            if(la_===1) {
	                this.state = 1161;
	                this.match(PhpParser.OpenRoundBracket);
	                this.state = 1162;
	                this.match(PhpParser.CloseRoundBracket);

	            } else if(la_===2) {
	                this.state = 1163;
	                this.parentheses();

	            }
	            break;

	        case 23:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1166;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Include || _la===PhpParser.IncludeOnce)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1167;
	            this.expression(25);
	            break;

	        case 24:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1168;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Require || _la===PhpParser.RequireOnce)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1169;
	            this.expression(24);
	            break;

	        case 25:
	            localctx = new LambdaFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1170;
	            this.lambdaFunctionExpr();
	            break;

	        case 26:
	            localctx = new MatchExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1171;
	            this.matchExpr();
	            break;

	        case 27:
	            localctx = new SpecialWordExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1172;
	            this.match(PhpParser.Throw);
	            this.state = 1173;
	            this.expression(6);
	            break;

	        case 28:
	            localctx = new AssignmentExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1174;
	            this.assignable();
	            this.state = 1175;
	            this.assignmentOperator();
	            this.state = 1177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.AttributeStart) {
	                this.state = 1176;
	                this.attributes();
	            }

	            this.state = 1179;
	            this.expression(5);
	            break;

	        case 29:
	            localctx = new AssignmentExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1181;
	            this.assignable();
	            this.state = 1182;
	            this.match(PhpParser.Eq);
	            this.state = 1184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.AttributeStart) {
	                this.state = 1183;
	                this.attributes();
	            }

	            this.state = 1186;
	            this.match(PhpParser.Ampersand);
	            this.state = 1189;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1187;
	                this.chain();
	                break;

	            case 2:
	                this.state = 1188;
	                this.newExpr();
	                break;

	            }
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1253;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1251;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1193;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1194;
	                    localctx.op = this.match(PhpParser.Pow);
	                    this.state = 1195;
	                    this.expression(21);
	                    break;

	                case 2:
	                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1196;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1197;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (PhpParser.Asterisk - 199)) | (1 << (PhpParser.Percent - 199)) | (1 << (PhpParser.Divide - 199)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1198;
	                    this.expression(20);
	                    break;

	                case 3:
	                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1199;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1200;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (PhpParser.Plus - 197)) | (1 << (PhpParser.Minus - 197)) | (1 << (PhpParser.Dot - 197)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1201;
	                    this.expression(19);
	                    break;

	                case 4:
	                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1202;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1203;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===PhpParser.ShiftLeft || _la===PhpParser.ShiftRight)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1204;
	                    this.expression(18);
	                    break;

	                case 5:
	                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1205;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1206;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 166)) & ~0x1f) == 0 && ((1 << (_la - 166)) & ((1 << (PhpParser.IsSmallerOrEqual - 166)) | (1 << (PhpParser.IsGreaterOrEqual - 166)) | (1 << (PhpParser.Less - 166)) | (1 << (PhpParser.Greater - 166)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1207;
	                    this.expression(17);
	                    break;

	                case 6:
	                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1208;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1209;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (PhpParser.IsIdentical - 162)) | (1 << (PhpParser.IsNoidentical - 162)) | (1 << (PhpParser.IsEqual - 162)) | (1 << (PhpParser.IsNotEq - 162)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1210;
	                    this.expression(16);
	                    break;

	                case 7:
	                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1211;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1212;
	                    localctx.op = this.match(PhpParser.Ampersand);
	                    this.state = 1213;
	                    this.expression(15);
	                    break;

	                case 8:
	                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1214;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1215;
	                    localctx.op = this.match(PhpParser.Caret);
	                    this.state = 1216;
	                    this.expression(14);
	                    break;

	                case 9:
	                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1217;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1218;
	                    localctx.op = this.match(PhpParser.Pipe);
	                    this.state = 1219;
	                    this.expression(13);
	                    break;

	                case 10:
	                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1220;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1221;
	                    localctx.op = this.match(PhpParser.BooleanAnd);
	                    this.state = 1222;
	                    this.expression(12);
	                    break;

	                case 11:
	                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1223;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1224;
	                    localctx.op = this.match(PhpParser.BooleanOr);
	                    this.state = 1225;
	                    this.expression(11);
	                    break;

	                case 12:
	                    localctx = new ConditionalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1226;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1227;
	                    localctx.op = this.match(PhpParser.QuestionMark);
	                    this.state = 1229;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                        this.state = 1228;
	                        this.expression(0);
	                    }

	                    this.state = 1231;
	                    this.match(PhpParser.Colon);
	                    this.state = 1232;
	                    this.expression(10);
	                    break;

	                case 13:
	                    localctx = new NullCoalescingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1233;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1234;
	                    localctx.op = this.match(PhpParser.NullCoalescing);
	                    this.state = 1235;
	                    this.expression(9);
	                    break;

	                case 14:
	                    localctx = new SpaceshipExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1236;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1237;
	                    localctx.op = this.match(PhpParser.Spaceship);
	                    this.state = 1238;
	                    this.expression(8);
	                    break;

	                case 15:
	                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1239;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1240;
	                    localctx.op = this.match(PhpParser.LogicalAnd);
	                    this.state = 1241;
	                    this.expression(4);
	                    break;

	                case 16:
	                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1242;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1243;
	                    localctx.op = this.match(PhpParser.LogicalXor);
	                    this.state = 1244;
	                    this.expression(3);
	                    break;

	                case 17:
	                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1245;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1246;
	                    localctx.op = this.match(PhpParser.LogicalOr);
	                    this.state = 1247;
	                    this.expression(2);
	                    break;

	                case 18:
	                    localctx = new InstanceOfExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
	                    this.state = 1248;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1249;
	                    this.match(PhpParser.InstanceOf);
	                    this.state = 1250;
	                    this.typeRef();
	                    break;

	                } 
	            }
	            this.state = 1255;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, PhpParser.RULE_assignable);
	    try {
	        this.state = 1258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1256;
	            this.chain();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1257;
	            this.arrayCreation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreation() {
	    let localctx = new ArrayCreationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, PhpParser.RULE_arrayCreation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Array:
	            this.state = 1260;
	            this.match(PhpParser.Array);
	            this.state = 1261;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1263;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1262;
	                this.arrayItemList();
	            }

	            this.state = 1265;
	            this.match(PhpParser.CloseRoundBracket);
	            break;
	        case PhpParser.OpenSquareBracket:
	            this.state = 1266;
	            this.match(PhpParser.OpenSquareBracket);
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1267;
	                this.arrayItemList();
	            }

	            this.state = 1270;
	            this.match(PhpParser.CloseSquareBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 1273;
	            this.match(PhpParser.OpenSquareBracket);
	            this.state = 1274;
	            this.expression(0);
	            this.state = 1275;
	            this.match(PhpParser.CloseSquareBracket);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaFunctionExpr() {
	    let localctx = new LambdaFunctionExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, PhpParser.RULE_lambdaFunctionExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1305;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Function_:
	        case PhpParser.Static:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Static) {
	                this.state = 1279;
	                this.match(PhpParser.Static);
	            }

	            this.state = 1282;
	            this.match(PhpParser.Function_);
	            this.state = 1284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Ampersand) {
	                this.state = 1283;
	                this.match(PhpParser.Ampersand);
	            }

	            this.state = 1286;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1287;
	            this.formalParameterList();
	            this.state = 1288;
	            this.match(PhpParser.CloseRoundBracket);
	            this.state = 1290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Use) {
	                this.state = 1289;
	                this.lambdaFunctionUseVars();
	            }

	            this.state = 1294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Colon) {
	                this.state = 1292;
	                this.match(PhpParser.Colon);
	                this.state = 1293;
	                this.typeHint(0);
	            }

	            this.state = 1296;
	            this.blockStatement();
	            break;
	        case PhpParser.LambdaFn:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1298;
	            this.match(PhpParser.LambdaFn);
	            this.state = 1299;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1300;
	            this.formalParameterList();
	            this.state = 1301;
	            this.match(PhpParser.CloseRoundBracket);
	            this.state = 1302;
	            this.match(PhpParser.DoubleArrow);
	            this.state = 1303;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchExpr() {
	    let localctx = new MatchExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, PhpParser.RULE_matchExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1307;
	        this.match(PhpParser.Match);
	        this.state = 1308;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 1309;
	        this.expression(0);
	        this.state = 1310;
	        this.match(PhpParser.CloseRoundBracket);
	        this.state = 1311;
	        this.match(PhpParser.OpenCurlyBracket);
	        this.state = 1312;
	        this.matchItem();
	        this.state = 1317;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1313;
	                this.match(PhpParser.Comma);
	                this.state = 1314;
	                this.matchItem(); 
	            }
	            this.state = 1319;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	        }

	        this.state = 1321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Comma) {
	            this.state = 1320;
	            this.match(PhpParser.Comma);
	        }

	        this.state = 1323;
	        this.match(PhpParser.CloseCurlyBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchItem() {
	    let localctx = new MatchItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, PhpParser.RULE_matchItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1325;
	        this.expression(0);
	        this.state = 1330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1326;
	            this.match(PhpParser.Comma);
	            this.state = 1327;
	            this.expression(0);
	            this.state = 1332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1333;
	        this.match(PhpParser.DoubleArrow);
	        this.state = 1334;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newExpr() {
	    let localctx = new NewExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, PhpParser.RULE_newExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.match(PhpParser.New);
	        this.state = 1337;
	        this.typeRef();
	        this.state = 1339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 1338;
	            this.arguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, PhpParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1341;
	        _la = this._input.LA(1);
	        if(!(((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (PhpParser.PlusEqual - 168)) | (1 << (PhpParser.MinusEqual - 168)) | (1 << (PhpParser.MulEqual - 168)) | (1 << (PhpParser.PowEqual - 168)) | (1 << (PhpParser.DivEqual - 168)) | (1 << (PhpParser.Concaequal - 168)) | (1 << (PhpParser.ModEqual - 168)) | (1 << (PhpParser.ShiftLeftEqual - 168)) | (1 << (PhpParser.ShiftRightEqual - 168)) | (1 << (PhpParser.AndEqual - 168)) | (1 << (PhpParser.OrEqual - 168)) | (1 << (PhpParser.XorEqual - 168)) | (1 << (PhpParser.NullCoalescingEqual - 168)))) !== 0) || _la===PhpParser.Eq)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldExpression() {
	    let localctx = new YieldExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, PhpParser.RULE_yieldExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1343;
	        this.match(PhpParser.Yield);
	        this.state = 1351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1344;
	            this.expression(0);
	            this.state = 1347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.DoubleArrow) {
	                this.state = 1345;
	                this.match(PhpParser.DoubleArrow);
	                this.state = 1346;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 1349;
	            this.match(PhpParser.From);
	            this.state = 1350;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayItemList() {
	    let localctx = new ArrayItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, PhpParser.RULE_arrayItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.arrayItem();
	        this.state = 1358;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1354;
	                this.match(PhpParser.Comma);
	                this.state = 1355;
	                this.arrayItem(); 
	            }
	            this.state = 1360;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	        }

	        this.state = 1362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        if(la_===1) {
	            this.state = 1361;
	            this.match(PhpParser.Comma);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayItem() {
	    let localctx = new ArrayItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, PhpParser.RULE_arrayItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 1376;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1364;
	            this.expression(0);
	            this.state = 1367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.DoubleArrow) {
	                this.state = 1365;
	                this.match(PhpParser.DoubleArrow);
	                this.state = 1366;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1369;
	                this.expression(0);
	                this.state = 1370;
	                this.match(PhpParser.DoubleArrow);
	            }

	            this.state = 1374;
	            this.match(PhpParser.Ampersand);
	            this.state = 1375;
	            this.chain();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaFunctionUseVars() {
	    let localctx = new LambdaFunctionUseVarsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, PhpParser.RULE_lambdaFunctionUseVars);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1378;
	        this.match(PhpParser.Use);
	        this.state = 1379;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 1380;
	        this.lambdaFunctionUseVar();
	        this.state = 1385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1381;
	            this.match(PhpParser.Comma);
	            this.state = 1382;
	            this.lambdaFunctionUseVar();
	            this.state = 1387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1388;
	        this.match(PhpParser.CloseRoundBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaFunctionUseVar() {
	    let localctx = new LambdaFunctionUseVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, PhpParser.RULE_lambdaFunctionUseVar);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Ampersand) {
	            this.state = 1390;
	            this.match(PhpParser.Ampersand);
	        }

	        this.state = 1393;
	        this.match(PhpParser.VarName);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedStaticTypeRef() {
	    let localctx = new QualifiedStaticTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, PhpParser.RULE_qualifiedStaticTypeRef);
	    try {
	        this.state = 1400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1395;
	            this.qualifiedNamespaceName();
	            this.state = 1397;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	            if(la_===1) {
	                this.state = 1396;
	                this.genericDynamicArgs();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1399;
	            this.match(PhpParser.Static);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRef() {
	    let localctx = new TypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, PhpParser.RULE_typeRef);
	    try {
	        this.state = 1412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1402;
	                this.qualifiedNamespaceName();
	                break;

	            case 2:
	                this.state = 1403;
	                this.indirectTypeRef();
	                break;

	            }
	            this.state = 1407;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	            if(la_===1) {
	                this.state = 1406;
	                this.genericDynamicArgs();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1409;
	            this.primitiveType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1410;
	            this.match(PhpParser.Static);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1411;
	            this.anonymousClass();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousClass() {
	    let localctx = new AnonymousClassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, PhpParser.RULE_anonymousClass);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.AttributeStart) {
	            this.state = 1414;
	            this.attributes();
	        }

	        this.state = 1418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Private) {
	            this.state = 1417;
	            this.match(PhpParser.Private);
	        }

	        this.state = 1421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Abstract || _la===PhpParser.Final) {
	            this.state = 1420;
	            this.modifier();
	        }

	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Partial) {
	            this.state = 1423;
	            this.match(PhpParser.Partial);
	        }

	        this.state = 1447;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Class:
	        case PhpParser.Trait:
	            this.state = 1426;
	            this.classEntryType();
	            this.state = 1428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Lgeneric) {
	                this.state = 1427;
	                this.typeParameterListInBrackets();
	            }

	            this.state = 1432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Extends) {
	                this.state = 1430;
	                this.match(PhpParser.Extends);
	                this.state = 1431;
	                this.qualifiedStaticTypeRef();
	            }

	            this.state = 1436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Implements) {
	                this.state = 1434;
	                this.match(PhpParser.Implements);
	                this.state = 1435;
	                this.interfaceList();
	            }

	            break;
	        case PhpParser.Interface:
	            this.state = 1438;
	            this.match(PhpParser.Interface);
	            this.state = 1439;
	            this.identifier();
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Lgeneric) {
	                this.state = 1440;
	                this.typeParameterListInBrackets();
	            }

	            this.state = 1445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Extends) {
	                this.state = 1443;
	                this.match(PhpParser.Extends);
	                this.state = 1444;
	                this.interfaceList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1449;
	        this.match(PhpParser.OpenCurlyBracket);
	        this.state = 1453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Const - 43)))) !== 0) || _la===PhpParser.Final || _la===PhpParser.Function_ || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)) | (1 << (PhpParser.Use - 109)) | (1 << (PhpParser.Var - 109)))) !== 0)) {
	            this.state = 1450;
	            this.classStatement();
	            this.state = 1455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1456;
	        this.match(PhpParser.CloseCurlyBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indirectTypeRef() {
	    let localctx = new IndirectTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, PhpParser.RULE_indirectTypeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        this.chainBase();
	        this.state = 1463;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1459;
	                this.match(PhpParser.ObjectOperator);
	                this.state = 1460;
	                this.keyedFieldName(); 
	            }
	            this.state = 1465;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNamespaceName() {
	    let localctx = new QualifiedNamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, PhpParser.RULE_qualifiedNamespaceName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        if(la_===1) {
	            this.state = 1466;
	            this.match(PhpParser.Namespace);

	        }
	        this.state = 1470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.NamespaceSeparator) {
	            this.state = 1469;
	            this.match(PhpParser.NamespaceSeparator);
	        }

	        this.state = 1472;
	        this.namespaceNameList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceNameList() {
	    let localctx = new NamespaceNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, PhpParser.RULE_namespaceNameList);
	    try {
	        this.state = 1487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1474;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1475;
	            this.identifier();
	            this.state = 1480;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1476;
	                    this.match(PhpParser.NamespaceSeparator);
	                    this.state = 1477;
	                    this.identifier(); 
	                }
	                this.state = 1482;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	            }

	            this.state = 1485;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	            if(la_===1) {
	                this.state = 1483;
	                this.match(PhpParser.NamespaceSeparator);
	                this.state = 1484;
	                this.namespaceNameTail();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceNameTail() {
	    let localctx = new NamespaceNameTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, PhpParser.RULE_namespaceNameTail);
	    var _la = 0; // Token type
	    try {
	        this.state = 1508;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Label:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1489;
	            this.identifier();
	            this.state = 1492;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	            if(la_===1) {
	                this.state = 1490;
	                this.match(PhpParser.As);
	                this.state = 1491;
	                this.identifier();

	            }
	            break;
	        case PhpParser.OpenCurlyBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1494;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 1495;
	            this.namespaceNameTail();
	            this.state = 1500;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1496;
	                    this.match(PhpParser.Comma);
	                    this.state = 1497;
	                    this.namespaceNameTail(); 
	                }
	                this.state = 1502;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	            }

	            this.state = 1504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Comma) {
	                this.state = 1503;
	                this.match(PhpParser.Comma);
	            }

	            this.state = 1506;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNamespaceNameList() {
	    let localctx = new QualifiedNamespaceNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, PhpParser.RULE_qualifiedNamespaceNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1510;
	        this.qualifiedNamespaceName();
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1511;
	            this.match(PhpParser.Comma);
	            this.state = 1512;
	            this.qualifiedNamespaceName();
	            this.state = 1517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, PhpParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.match(PhpParser.OpenRoundBracket);
	        this.state = 1528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        if(la_===1) {
	            this.state = 1519;
	            this.actualArgument();
	            this.state = 1524;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1520;
	                    this.match(PhpParser.Comma);
	                    this.state = 1521;
	                    this.actualArgument(); 
	                }
	                this.state = 1526;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	            }


	        } else if(la_===2) {
	            this.state = 1527;
	            this.yieldExpression();

	        }
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Comma) {
	            this.state = 1530;
	            this.match(PhpParser.Comma);
	        }

	        this.state = 1533;
	        this.match(PhpParser.CloseRoundBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualArgument() {
	    let localctx = new ActualArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, PhpParser.RULE_actualArgument);
	    var _la = 0; // Token type
	    try {
	        this.state = 1544;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Match:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.LambdaFn:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Inc:
	        case PhpParser.Dec:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Ellipsis:
	        case PhpParser.Bang:
	        case PhpParser.Plus:
	        case PhpParser.Minus:
	        case PhpParser.Tilde:
	        case PhpParser.SuppressWarnings:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.OpenSquareBracket:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Real:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	        case PhpParser.BackQuoteString:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1536;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	            if(la_===1) {
	                this.state = 1535;
	                this.argumentName();

	            }
	            this.state = 1539;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===PhpParser.Ellipsis) {
	                this.state = 1538;
	                this.match(PhpParser.Ellipsis);
	            }

	            this.state = 1541;
	            this.expression(0);
	            break;
	        case PhpParser.Ampersand:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1542;
	            this.match(PhpParser.Ampersand);
	            this.state = 1543;
	            this.chain();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentName() {
	    let localctx = new ArgumentNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, PhpParser.RULE_argumentName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.identifier();
	        this.state = 1547;
	        this.match(PhpParser.Colon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantInitializer() {
	    let localctx = new ConstantInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, PhpParser.RULE_constantInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1570;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1549;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1550;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1551;
	            this.match(PhpParser.Array);
	            this.state = 1552;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1553;
	                this.arrayItemList();
	                this.state = 1555;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===PhpParser.Comma) {
	                    this.state = 1554;
	                    this.match(PhpParser.Comma);
	                }

	            }

	            this.state = 1559;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1560;
	            this.match(PhpParser.OpenSquareBracket);
	            this.state = 1565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1561;
	                this.arrayItemList();
	                this.state = 1563;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===PhpParser.Comma) {
	                    this.state = 1562;
	                    this.match(PhpParser.Comma);
	                }

	            }

	            this.state = 1567;
	            this.match(PhpParser.CloseSquareBracket);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1568;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Plus || _la===PhpParser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1569;
	            this.constantInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, PhpParser.RULE_constant);
	    try {
	        this.state = 1577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1572;
	            this.match(PhpParser.Null);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1573;
	            this.literalConstant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1574;
	            this.magicConstant();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1575;
	            this.classConstant();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1576;
	            this.qualifiedNamespaceName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalConstant() {
	    let localctx = new LiteralConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, PhpParser.RULE_literalConstant);
	    try {
	        this.state = 1583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Real:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1579;
	            this.match(PhpParser.Real);
	            break;
	        case PhpParser.BooleanConstant:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1580;
	            this.match(PhpParser.BooleanConstant);
	            break;
	        case PhpParser.Octal:
	        case PhpParser.Decimal:
	        case PhpParser.Hex:
	        case PhpParser.Binary:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1581;
	            this.numericConstant();
	            break;
	        case PhpParser.Label:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1582;
	            this.stringConstant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericConstant() {
	    let localctx = new NumericConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, PhpParser.RULE_numericConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1585;
	        _la = this._input.LA(1);
	        if(!(((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classConstant() {
	    let localctx = new ClassConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, PhpParser.RULE_classConstant);
	    var _la = 0; // Token type
	    try {
	        this.state = 1605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1587;
	            _la = this._input.LA(1);
	            if(!(_la===PhpParser.Class || _la===PhpParser.Parent_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1588;
	            this.match(PhpParser.DoubleColon);
	            this.state = 1593;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1589;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 1590;
	                this.match(PhpParser.Constructor);
	                break;

	            case 3:
	                this.state = 1591;
	                this.match(PhpParser.Get);
	                break;

	            case 4:
	                this.state = 1592;
	                this.match(PhpParser.Set);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1598;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case PhpParser.Abstract:
	            case PhpParser.Array:
	            case PhpParser.As:
	            case PhpParser.BinaryCast:
	            case PhpParser.BoolType:
	            case PhpParser.BooleanConstant:
	            case PhpParser.Break:
	            case PhpParser.Callable:
	            case PhpParser.Case:
	            case PhpParser.Catch:
	            case PhpParser.Class:
	            case PhpParser.Clone:
	            case PhpParser.Const:
	            case PhpParser.Continue:
	            case PhpParser.Declare:
	            case PhpParser.Default:
	            case PhpParser.Do:
	            case PhpParser.DoubleCast:
	            case PhpParser.DoubleType:
	            case PhpParser.Echo:
	            case PhpParser.Else:
	            case PhpParser.ElseIf:
	            case PhpParser.Empty:
	            case PhpParser.EndDeclare:
	            case PhpParser.EndFor:
	            case PhpParser.EndForeach:
	            case PhpParser.EndIf:
	            case PhpParser.EndSwitch:
	            case PhpParser.EndWhile:
	            case PhpParser.Eval:
	            case PhpParser.Exit:
	            case PhpParser.Extends:
	            case PhpParser.Final:
	            case PhpParser.Finally:
	            case PhpParser.FloatCast:
	            case PhpParser.For:
	            case PhpParser.Foreach:
	            case PhpParser.Function_:
	            case PhpParser.Global:
	            case PhpParser.Goto:
	            case PhpParser.If:
	            case PhpParser.Implements:
	            case PhpParser.Import:
	            case PhpParser.Include:
	            case PhpParser.IncludeOnce:
	            case PhpParser.InstanceOf:
	            case PhpParser.InsteadOf:
	            case PhpParser.Int8Cast:
	            case PhpParser.Int16Cast:
	            case PhpParser.Int64Type:
	            case PhpParser.IntType:
	            case PhpParser.Interface:
	            case PhpParser.IsSet:
	            case PhpParser.List:
	            case PhpParser.LogicalAnd:
	            case PhpParser.LogicalOr:
	            case PhpParser.LogicalXor:
	            case PhpParser.Namespace:
	            case PhpParser.New:
	            case PhpParser.Null:
	            case PhpParser.ObjectType:
	            case PhpParser.Parent_:
	            case PhpParser.Partial:
	            case PhpParser.Print:
	            case PhpParser.Private:
	            case PhpParser.Protected:
	            case PhpParser.Public:
	            case PhpParser.Require:
	            case PhpParser.RequireOnce:
	            case PhpParser.Resource:
	            case PhpParser.Return:
	            case PhpParser.Static:
	            case PhpParser.StringType:
	            case PhpParser.Switch:
	            case PhpParser.Throw:
	            case PhpParser.Trait:
	            case PhpParser.Try:
	            case PhpParser.Typeof:
	            case PhpParser.UintCast:
	            case PhpParser.UnicodeCast:
	            case PhpParser.Unset:
	            case PhpParser.Use:
	            case PhpParser.Var:
	            case PhpParser.While:
	            case PhpParser.Yield:
	            case PhpParser.From:
	            case PhpParser.Get:
	            case PhpParser.Set:
	            case PhpParser.Call:
	            case PhpParser.CallStatic:
	            case PhpParser.Constructor:
	            case PhpParser.Destruct:
	            case PhpParser.Wakeup:
	            case PhpParser.Sleep:
	            case PhpParser.Autoload:
	            case PhpParser.IsSet__:
	            case PhpParser.Unset__:
	            case PhpParser.ToString__:
	            case PhpParser.Invoke:
	            case PhpParser.SetState:
	            case PhpParser.Clone__:
	            case PhpParser.DebugInfo:
	            case PhpParser.Namespace__:
	            case PhpParser.Class__:
	            case PhpParser.Traic__:
	            case PhpParser.Function__:
	            case PhpParser.Method__:
	            case PhpParser.Line__:
	            case PhpParser.File__:
	            case PhpParser.Dir__:
	            case PhpParser.NamespaceSeparator:
	            case PhpParser.Label:
	                this.state = 1595;
	                this.qualifiedStaticTypeRef();
	                break;
	            case PhpParser.Dollar:
	            case PhpParser.VarName:
	                this.state = 1596;
	                this.keyedVariable();
	                break;
	            case PhpParser.SingleQuoteString:
	            case PhpParser.DoubleQuote:
	            case PhpParser.StartNowDoc:
	            case PhpParser.StartHereDoc:
	                this.state = 1597;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1600;
	            this.match(PhpParser.DoubleColon);
	            this.state = 1603;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case PhpParser.Abstract:
	            case PhpParser.Array:
	            case PhpParser.As:
	            case PhpParser.BinaryCast:
	            case PhpParser.BoolType:
	            case PhpParser.BooleanConstant:
	            case PhpParser.Break:
	            case PhpParser.Callable:
	            case PhpParser.Case:
	            case PhpParser.Catch:
	            case PhpParser.Class:
	            case PhpParser.Clone:
	            case PhpParser.Const:
	            case PhpParser.Continue:
	            case PhpParser.Declare:
	            case PhpParser.Default:
	            case PhpParser.Do:
	            case PhpParser.DoubleCast:
	            case PhpParser.DoubleType:
	            case PhpParser.Echo:
	            case PhpParser.Else:
	            case PhpParser.ElseIf:
	            case PhpParser.Empty:
	            case PhpParser.EndDeclare:
	            case PhpParser.EndFor:
	            case PhpParser.EndForeach:
	            case PhpParser.EndIf:
	            case PhpParser.EndSwitch:
	            case PhpParser.EndWhile:
	            case PhpParser.Eval:
	            case PhpParser.Exit:
	            case PhpParser.Extends:
	            case PhpParser.Final:
	            case PhpParser.Finally:
	            case PhpParser.FloatCast:
	            case PhpParser.For:
	            case PhpParser.Foreach:
	            case PhpParser.Function_:
	            case PhpParser.Global:
	            case PhpParser.Goto:
	            case PhpParser.If:
	            case PhpParser.Implements:
	            case PhpParser.Import:
	            case PhpParser.Include:
	            case PhpParser.IncludeOnce:
	            case PhpParser.InstanceOf:
	            case PhpParser.InsteadOf:
	            case PhpParser.Int8Cast:
	            case PhpParser.Int16Cast:
	            case PhpParser.Int64Type:
	            case PhpParser.IntType:
	            case PhpParser.Interface:
	            case PhpParser.IsSet:
	            case PhpParser.List:
	            case PhpParser.LogicalAnd:
	            case PhpParser.LogicalOr:
	            case PhpParser.LogicalXor:
	            case PhpParser.Namespace:
	            case PhpParser.New:
	            case PhpParser.Null:
	            case PhpParser.ObjectType:
	            case PhpParser.Parent_:
	            case PhpParser.Partial:
	            case PhpParser.Print:
	            case PhpParser.Private:
	            case PhpParser.Protected:
	            case PhpParser.Public:
	            case PhpParser.Require:
	            case PhpParser.RequireOnce:
	            case PhpParser.Resource:
	            case PhpParser.Return:
	            case PhpParser.Static:
	            case PhpParser.StringType:
	            case PhpParser.Switch:
	            case PhpParser.Throw:
	            case PhpParser.Trait:
	            case PhpParser.Try:
	            case PhpParser.Typeof:
	            case PhpParser.UintCast:
	            case PhpParser.UnicodeCast:
	            case PhpParser.Unset:
	            case PhpParser.Use:
	            case PhpParser.Var:
	            case PhpParser.While:
	            case PhpParser.Yield:
	            case PhpParser.From:
	            case PhpParser.Get:
	            case PhpParser.Set:
	            case PhpParser.Call:
	            case PhpParser.CallStatic:
	            case PhpParser.Constructor:
	            case PhpParser.Destruct:
	            case PhpParser.Wakeup:
	            case PhpParser.Sleep:
	            case PhpParser.Autoload:
	            case PhpParser.IsSet__:
	            case PhpParser.Unset__:
	            case PhpParser.ToString__:
	            case PhpParser.Invoke:
	            case PhpParser.SetState:
	            case PhpParser.Clone__:
	            case PhpParser.DebugInfo:
	            case PhpParser.Namespace__:
	            case PhpParser.Class__:
	            case PhpParser.Traic__:
	            case PhpParser.Function__:
	            case PhpParser.Method__:
	            case PhpParser.Line__:
	            case PhpParser.File__:
	            case PhpParser.Dir__:
	            case PhpParser.Label:
	                this.state = 1601;
	                this.identifier();
	                break;
	            case PhpParser.Dollar:
	            case PhpParser.VarName:
	                this.state = 1602;
	                this.keyedVariable();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConstant() {
	    let localctx = new StringConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, PhpParser.RULE_stringConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1607;
	        this.match(PhpParser.Label);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, PhpParser.RULE_string);
	    try {
	        this.state = 1630;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.StartHereDoc:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1609;
	            this.match(PhpParser.StartHereDoc);
	            this.state = 1611; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1610;
	            		this.match(PhpParser.HereDocText);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1613; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,201, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case PhpParser.StartNowDoc:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1615;
	            this.match(PhpParser.StartNowDoc);
	            this.state = 1617; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1616;
	            		this.match(PhpParser.HereDocText);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1619; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,202, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case PhpParser.SingleQuoteString:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1621;
	            this.match(PhpParser.SingleQuoteString);
	            break;
	        case PhpParser.DoubleQuote:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1622;
	            this.match(PhpParser.DoubleQuote);
	            this.state = 1626;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1623;
	                    this.interpolatedStringPart(); 
	                }
	                this.state = 1628;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
	            }

	            this.state = 1629;
	            this.match(PhpParser.DoubleQuote);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolatedStringPart() {
	    let localctx = new InterpolatedStringPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, PhpParser.RULE_interpolatedStringPart);
	    try {
	        this.state = 1635;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.StringPart:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1632;
	            this.match(PhpParser.StringPart);
	            break;
	        case PhpParser.UnicodeEscape:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1633;
	            this.match(PhpParser.UnicodeEscape);
	            break;
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Dollar:
	        case PhpParser.OpenRoundBracket:
	        case PhpParser.VarName:
	        case PhpParser.Label:
	        case PhpParser.SingleQuoteString:
	        case PhpParser.DoubleQuote:
	        case PhpParser.StartNowDoc:
	        case PhpParser.StartHereDoc:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1634;
	            this.chain();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chainList() {
	    let localctx = new ChainListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, PhpParser.RULE_chainList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1637;
	        this.chain();
	        this.state = 1642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1638;
	            this.match(PhpParser.Comma);
	            this.state = 1639;
	            this.chain();
	            this.state = 1644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chain() {
	    let localctx = new ChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, PhpParser.RULE_chain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1645;
	        this.chainOrigin();
	        this.state = 1649;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1646;
	                this.memberAccess(); 
	            }
	            this.state = 1651;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chainOrigin() {
	    let localctx = new ChainOriginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, PhpParser.RULE_chainOrigin);
	    try {
	        this.state = 1658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1652;
	            this.chainBase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1653;
	            this.functionCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1654;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1655;
	            this.newExpr();
	            this.state = 1656;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberAccess() {
	    let localctx = new MemberAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, PhpParser.RULE_memberAccess);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this.match(PhpParser.ObjectOperator);
	        this.state = 1661;
	        this.keyedFieldName();
	        this.state = 1663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        if(la_===1) {
	            this.state = 1662;
	            this.actualArguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, PhpParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this.functionCallName();
	        this.state = 1666;
	        this.actualArguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCallName() {
	    let localctx = new FunctionCallNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, PhpParser.RULE_functionCallName);
	    try {
	        this.state = 1672;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1668;
	            this.qualifiedNamespaceName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1669;
	            this.classConstant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1670;
	            this.chainBase();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1671;
	            this.parentheses();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualArguments() {
	    let localctx = new ActualArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, PhpParser.RULE_actualArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===PhpParser.Lgeneric) {
	            this.state = 1674;
	            this.genericDynamicArgs();
	        }

	        this.state = 1677;
	        this.arguments();
	        this.state = 1681;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1678;
	                this.squareCurlyExpression(); 
	            }
	            this.state = 1683;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chainBase() {
	    let localctx = new ChainBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, PhpParser.RULE_chainBase);
	    try {
	        this.state = 1693;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Dollar:
	        case PhpParser.VarName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1684;
	            this.keyedVariable();
	            this.state = 1687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	            if(la_===1) {
	                this.state = 1685;
	                this.match(PhpParser.DoubleColon);
	                this.state = 1686;
	                this.keyedVariable();

	            }
	            break;
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.NamespaceSeparator:
	        case PhpParser.Label:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1689;
	            this.qualifiedStaticTypeRef();
	            this.state = 1690;
	            this.match(PhpParser.DoubleColon);
	            this.state = 1691;
	            this.keyedVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyedFieldName() {
	    let localctx = new KeyedFieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, PhpParser.RULE_keyedFieldName);
	    try {
	        this.state = 1697;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.OpenCurlyBracket:
	        case PhpParser.Label:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1695;
	            this.keyedSimpleFieldName();
	            break;
	        case PhpParser.Dollar:
	        case PhpParser.VarName:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1696;
	            this.keyedVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyedSimpleFieldName() {
	    let localctx = new KeyedSimpleFieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, PhpParser.RULE_keyedSimpleFieldName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.Abstract:
	        case PhpParser.Array:
	        case PhpParser.As:
	        case PhpParser.BinaryCast:
	        case PhpParser.BoolType:
	        case PhpParser.BooleanConstant:
	        case PhpParser.Break:
	        case PhpParser.Callable:
	        case PhpParser.Case:
	        case PhpParser.Catch:
	        case PhpParser.Class:
	        case PhpParser.Clone:
	        case PhpParser.Const:
	        case PhpParser.Continue:
	        case PhpParser.Declare:
	        case PhpParser.Default:
	        case PhpParser.Do:
	        case PhpParser.DoubleCast:
	        case PhpParser.DoubleType:
	        case PhpParser.Echo:
	        case PhpParser.Else:
	        case PhpParser.ElseIf:
	        case PhpParser.Empty:
	        case PhpParser.EndDeclare:
	        case PhpParser.EndFor:
	        case PhpParser.EndForeach:
	        case PhpParser.EndIf:
	        case PhpParser.EndSwitch:
	        case PhpParser.EndWhile:
	        case PhpParser.Eval:
	        case PhpParser.Exit:
	        case PhpParser.Extends:
	        case PhpParser.Final:
	        case PhpParser.Finally:
	        case PhpParser.FloatCast:
	        case PhpParser.For:
	        case PhpParser.Foreach:
	        case PhpParser.Function_:
	        case PhpParser.Global:
	        case PhpParser.Goto:
	        case PhpParser.If:
	        case PhpParser.Implements:
	        case PhpParser.Import:
	        case PhpParser.Include:
	        case PhpParser.IncludeOnce:
	        case PhpParser.InstanceOf:
	        case PhpParser.InsteadOf:
	        case PhpParser.Int8Cast:
	        case PhpParser.Int16Cast:
	        case PhpParser.Int64Type:
	        case PhpParser.IntType:
	        case PhpParser.Interface:
	        case PhpParser.IsSet:
	        case PhpParser.List:
	        case PhpParser.LogicalAnd:
	        case PhpParser.LogicalOr:
	        case PhpParser.LogicalXor:
	        case PhpParser.Namespace:
	        case PhpParser.New:
	        case PhpParser.Null:
	        case PhpParser.ObjectType:
	        case PhpParser.Parent_:
	        case PhpParser.Partial:
	        case PhpParser.Print:
	        case PhpParser.Private:
	        case PhpParser.Protected:
	        case PhpParser.Public:
	        case PhpParser.Require:
	        case PhpParser.RequireOnce:
	        case PhpParser.Resource:
	        case PhpParser.Return:
	        case PhpParser.Static:
	        case PhpParser.StringType:
	        case PhpParser.Switch:
	        case PhpParser.Throw:
	        case PhpParser.Trait:
	        case PhpParser.Try:
	        case PhpParser.Typeof:
	        case PhpParser.UintCast:
	        case PhpParser.UnicodeCast:
	        case PhpParser.Unset:
	        case PhpParser.Use:
	        case PhpParser.Var:
	        case PhpParser.While:
	        case PhpParser.Yield:
	        case PhpParser.From:
	        case PhpParser.Get:
	        case PhpParser.Set:
	        case PhpParser.Call:
	        case PhpParser.CallStatic:
	        case PhpParser.Constructor:
	        case PhpParser.Destruct:
	        case PhpParser.Wakeup:
	        case PhpParser.Sleep:
	        case PhpParser.Autoload:
	        case PhpParser.IsSet__:
	        case PhpParser.Unset__:
	        case PhpParser.ToString__:
	        case PhpParser.Invoke:
	        case PhpParser.SetState:
	        case PhpParser.Clone__:
	        case PhpParser.DebugInfo:
	        case PhpParser.Namespace__:
	        case PhpParser.Class__:
	        case PhpParser.Traic__:
	        case PhpParser.Function__:
	        case PhpParser.Method__:
	        case PhpParser.Line__:
	        case PhpParser.File__:
	        case PhpParser.Dir__:
	        case PhpParser.Label:
	            this.state = 1699;
	            this.identifier();
	            break;
	        case PhpParser.OpenCurlyBracket:
	            this.state = 1700;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 1701;
	            this.expression(0);
	            this.state = 1702;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1709;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1706;
	                this.squareCurlyExpression(); 
	            }
	            this.state = 1711;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyedVariable() {
	    let localctx = new KeyedVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, PhpParser.RULE_keyedVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1712;
	                this.match(PhpParser.Dollar); 
	            }
	            this.state = 1717;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
	        }

	        this.state = 1724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.VarName:
	            this.state = 1718;
	            this.match(PhpParser.VarName);
	            break;
	        case PhpParser.Dollar:
	            this.state = 1719;
	            this.match(PhpParser.Dollar);
	            this.state = 1720;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 1721;
	            this.expression(0);
	            this.state = 1722;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1729;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1726;
	                this.squareCurlyExpression(); 
	            }
	            this.state = 1731;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareCurlyExpression() {
	    let localctx = new SquareCurlyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, PhpParser.RULE_squareCurlyExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1741;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case PhpParser.OpenSquareBracket:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1732;
	            this.match(PhpParser.OpenSquareBracket);
	            this.state = 1734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1733;
	                this.expression(0);
	            }

	            this.state = 1736;
	            this.match(PhpParser.CloseSquareBracket);
	            break;
	        case PhpParser.OpenCurlyBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1737;
	            this.match(PhpParser.OpenCurlyBracket);
	            this.state = 1738;
	            this.expression(0);
	            this.state = 1739;
	            this.match(PhpParser.CloseCurlyBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentList() {
	    let localctx = new AssignmentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, PhpParser.RULE_assignmentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	            this.state = 1743;
	            this.assignmentListElement();
	        }

	        this.state = 1752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===PhpParser.Comma) {
	            this.state = 1746;
	            this.match(PhpParser.Comma);
	            this.state = 1748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
	                this.state = 1747;
	                this.assignmentListElement();
	            }

	            this.state = 1754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentListElement() {
	    let localctx = new AssignmentListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, PhpParser.RULE_assignmentListElement);
	    try {
	        this.state = 1762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1755;
	            this.chain();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1756;
	            this.match(PhpParser.List);
	            this.state = 1757;
	            this.match(PhpParser.OpenRoundBracket);
	            this.state = 1758;
	            this.assignmentList();
	            this.state = 1759;
	            this.match(PhpParser.CloseRoundBracket);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1761;
	            this.arrayItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, PhpParser.RULE_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        _la = this._input.LA(1);
	        if(!(_la===PhpParser.Abstract || _la===PhpParser.Final)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, PhpParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1766;
	        _la = this._input.LA(1);
	        if(!(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function_ - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la===PhpParser.Label)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberModifier() {
	    let localctx = new MemberModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, PhpParser.RULE_memberModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        _la = this._input.LA(1);
	        if(!(_la===PhpParser.Abstract || _la===PhpParser.Final || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	magicConstant() {
	    let localctx = new MagicConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, PhpParser.RULE_magicConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        _la = this._input.LA(1);
	        if(!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (PhpParser.Namespace__ - 148)) | (1 << (PhpParser.Class__ - 148)) | (1 << (PhpParser.Traic__ - 148)) | (1 << (PhpParser.Function__ - 148)) | (1 << (PhpParser.Method__ - 148)) | (1 << (PhpParser.Line__ - 148)) | (1 << (PhpParser.File__ - 148)) | (1 << (PhpParser.Dir__ - 148)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	magicMethod() {
	    let localctx = new MagicMethodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, PhpParser.RULE_magicMethod);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1772;
	        _la = this._input.LA(1);
	        if(!(((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (PhpParser.Get - 132)) | (1 << (PhpParser.Set - 132)) | (1 << (PhpParser.Call - 132)) | (1 << (PhpParser.CallStatic - 132)) | (1 << (PhpParser.Constructor - 132)) | (1 << (PhpParser.Destruct - 132)) | (1 << (PhpParser.Wakeup - 132)) | (1 << (PhpParser.Sleep - 132)) | (1 << (PhpParser.Autoload - 132)) | (1 << (PhpParser.IsSet__ - 132)) | (1 << (PhpParser.Unset__ - 132)) | (1 << (PhpParser.ToString__ - 132)) | (1 << (PhpParser.Invoke - 132)) | (1 << (PhpParser.SetState - 132)) | (1 << (PhpParser.Clone__ - 132)) | (1 << (PhpParser.DebugInfo - 132)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, PhpParser.RULE_primitiveType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1774;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PhpParser.Array - 45)) | (1 << (PhpParser.BoolType - 45)) | (1 << (PhpParser.DoubleType - 45)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (PhpParser.Int64Type - 93)) | (1 << (PhpParser.IntType - 93)) | (1 << (PhpParser.ObjectType - 93)) | (1 << (PhpParser.Resource - 93)) | (1 << (PhpParser.StringType - 93)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castOperation() {
	    let localctx = new CastOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, PhpParser.RULE_castOperation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PhpParser.Array - 45)) | (1 << (PhpParser.BinaryCast - 45)) | (1 << (PhpParser.BoolType - 45)) | (1 << (PhpParser.DoubleCast - 45)) | (1 << (PhpParser.DoubleType - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (PhpParser.FloatCast - 78)) | (1 << (PhpParser.Int8Cast - 78)) | (1 << (PhpParser.Int16Cast - 78)) | (1 << (PhpParser.Int64Type - 78)) | (1 << (PhpParser.IntType - 78)) | (1 << (PhpParser.ObjectType - 78)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (PhpParser.Resource - 114)) | (1 << (PhpParser.StringType - 114)) | (1 << (PhpParser.UintCast - 114)) | (1 << (PhpParser.UnicodeCast - 114)) | (1 << (PhpParser.Unset - 114)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PhpParser.EOF = antlr4.Token.EOF;
PhpParser.SeaWhitespace = 1;
PhpParser.HtmlText = 2;
PhpParser.XmlStart = 3;
PhpParser.PHPStart = 4;
PhpParser.HtmlScriptOpen = 5;
PhpParser.HtmlStyleOpen = 6;
PhpParser.HtmlComment = 7;
PhpParser.HtmlDtd = 8;
PhpParser.HtmlOpen = 9;
PhpParser.Shebang = 10;
PhpParser.Error = 11;
PhpParser.XmlText = 12;
PhpParser.XmlClose = 13;
PhpParser.PHPStartInside = 14;
PhpParser.HtmlClose = 15;
PhpParser.HtmlSlashClose = 16;
PhpParser.HtmlSlash = 17;
PhpParser.HtmlEquals = 18;
PhpParser.HtmlStartQuoteString = 19;
PhpParser.HtmlStartDoubleQuoteString = 20;
PhpParser.HtmlHex = 21;
PhpParser.HtmlDecimal = 22;
PhpParser.HtmlSpace = 23;
PhpParser.HtmlName = 24;
PhpParser.ErrorInside = 25;
PhpParser.PHPStartInsideQuoteString = 26;
PhpParser.HtmlEndQuoteString = 27;
PhpParser.HtmlQuoteString = 28;
PhpParser.ErrorHtmlQuote = 29;
PhpParser.PHPStartDoubleQuoteString = 30;
PhpParser.HtmlEndDoubleQuoteString = 31;
PhpParser.HtmlDoubleQuoteString = 32;
PhpParser.ErrorHtmlDoubleQuote = 33;
PhpParser.ScriptText = 34;
PhpParser.HtmlScriptClose = 35;
PhpParser.PHPStartInsideScript = 36;
PhpParser.StyleBody = 37;
PhpParser.PHPEnd = 38;
PhpParser.Whitespace = 39;
PhpParser.MultiLineComment = 40;
PhpParser.SingleLineComment = 41;
PhpParser.ShellStyleComment = 42;
PhpParser.AttributeStart = 43;
PhpParser.Abstract = 44;
PhpParser.Array = 45;
PhpParser.As = 46;
PhpParser.BinaryCast = 47;
PhpParser.BoolType = 48;
PhpParser.BooleanConstant = 49;
PhpParser.Break = 50;
PhpParser.Callable = 51;
PhpParser.Case = 52;
PhpParser.Catch = 53;
PhpParser.Class = 54;
PhpParser.Clone = 55;
PhpParser.Const = 56;
PhpParser.Continue = 57;
PhpParser.Declare = 58;
PhpParser.Default = 59;
PhpParser.Do = 60;
PhpParser.DoubleCast = 61;
PhpParser.DoubleType = 62;
PhpParser.Echo = 63;
PhpParser.Else = 64;
PhpParser.ElseIf = 65;
PhpParser.Empty = 66;
PhpParser.EndDeclare = 67;
PhpParser.EndFor = 68;
PhpParser.EndForeach = 69;
PhpParser.EndIf = 70;
PhpParser.EndSwitch = 71;
PhpParser.EndWhile = 72;
PhpParser.Eval = 73;
PhpParser.Exit = 74;
PhpParser.Extends = 75;
PhpParser.Final = 76;
PhpParser.Finally = 77;
PhpParser.FloatCast = 78;
PhpParser.For = 79;
PhpParser.Foreach = 80;
PhpParser.Function_ = 81;
PhpParser.Global = 82;
PhpParser.Goto = 83;
PhpParser.If = 84;
PhpParser.Implements = 85;
PhpParser.Import = 86;
PhpParser.Include = 87;
PhpParser.IncludeOnce = 88;
PhpParser.InstanceOf = 89;
PhpParser.InsteadOf = 90;
PhpParser.Int8Cast = 91;
PhpParser.Int16Cast = 92;
PhpParser.Int64Type = 93;
PhpParser.IntType = 94;
PhpParser.Interface = 95;
PhpParser.IsSet = 96;
PhpParser.List = 97;
PhpParser.LogicalAnd = 98;
PhpParser.LogicalOr = 99;
PhpParser.LogicalXor = 100;
PhpParser.Match = 101;
PhpParser.Namespace = 102;
PhpParser.New = 103;
PhpParser.Null = 104;
PhpParser.ObjectType = 105;
PhpParser.Parent_ = 106;
PhpParser.Partial = 107;
PhpParser.Print = 108;
PhpParser.Private = 109;
PhpParser.Protected = 110;
PhpParser.Public = 111;
PhpParser.Require = 112;
PhpParser.RequireOnce = 113;
PhpParser.Resource = 114;
PhpParser.Return = 115;
PhpParser.Static = 116;
PhpParser.StringType = 117;
PhpParser.Switch = 118;
PhpParser.Throw = 119;
PhpParser.Trait = 120;
PhpParser.Try = 121;
PhpParser.Typeof = 122;
PhpParser.UintCast = 123;
PhpParser.UnicodeCast = 124;
PhpParser.Unset = 125;
PhpParser.Use = 126;
PhpParser.Var = 127;
PhpParser.While = 128;
PhpParser.Yield = 129;
PhpParser.From = 130;
PhpParser.LambdaFn = 131;
PhpParser.Get = 132;
PhpParser.Set = 133;
PhpParser.Call = 134;
PhpParser.CallStatic = 135;
PhpParser.Constructor = 136;
PhpParser.Destruct = 137;
PhpParser.Wakeup = 138;
PhpParser.Sleep = 139;
PhpParser.Autoload = 140;
PhpParser.IsSet__ = 141;
PhpParser.Unset__ = 142;
PhpParser.ToString__ = 143;
PhpParser.Invoke = 144;
PhpParser.SetState = 145;
PhpParser.Clone__ = 146;
PhpParser.DebugInfo = 147;
PhpParser.Namespace__ = 148;
PhpParser.Class__ = 149;
PhpParser.Traic__ = 150;
PhpParser.Function__ = 151;
PhpParser.Method__ = 152;
PhpParser.Line__ = 153;
PhpParser.File__ = 154;
PhpParser.Dir__ = 155;
PhpParser.Spaceship = 156;
PhpParser.Lgeneric = 157;
PhpParser.Rgeneric = 158;
PhpParser.DoubleArrow = 159;
PhpParser.Inc = 160;
PhpParser.Dec = 161;
PhpParser.IsIdentical = 162;
PhpParser.IsNoidentical = 163;
PhpParser.IsEqual = 164;
PhpParser.IsNotEq = 165;
PhpParser.IsSmallerOrEqual = 166;
PhpParser.IsGreaterOrEqual = 167;
PhpParser.PlusEqual = 168;
PhpParser.MinusEqual = 169;
PhpParser.MulEqual = 170;
PhpParser.Pow = 171;
PhpParser.PowEqual = 172;
PhpParser.DivEqual = 173;
PhpParser.Concaequal = 174;
PhpParser.ModEqual = 175;
PhpParser.ShiftLeftEqual = 176;
PhpParser.ShiftRightEqual = 177;
PhpParser.AndEqual = 178;
PhpParser.OrEqual = 179;
PhpParser.XorEqual = 180;
PhpParser.BooleanOr = 181;
PhpParser.BooleanAnd = 182;
PhpParser.NullCoalescing = 183;
PhpParser.NullCoalescingEqual = 184;
PhpParser.ShiftLeft = 185;
PhpParser.ShiftRight = 186;
PhpParser.DoubleColon = 187;
PhpParser.ObjectOperator = 188;
PhpParser.NamespaceSeparator = 189;
PhpParser.Ellipsis = 190;
PhpParser.Less = 191;
PhpParser.Greater = 192;
PhpParser.Ampersand = 193;
PhpParser.Pipe = 194;
PhpParser.Bang = 195;
PhpParser.Caret = 196;
PhpParser.Plus = 197;
PhpParser.Minus = 198;
PhpParser.Asterisk = 199;
PhpParser.Percent = 200;
PhpParser.Divide = 201;
PhpParser.Tilde = 202;
PhpParser.SuppressWarnings = 203;
PhpParser.Dollar = 204;
PhpParser.Dot = 205;
PhpParser.QuestionMark = 206;
PhpParser.OpenRoundBracket = 207;
PhpParser.CloseRoundBracket = 208;
PhpParser.OpenSquareBracket = 209;
PhpParser.CloseSquareBracket = 210;
PhpParser.OpenCurlyBracket = 211;
PhpParser.CloseCurlyBracket = 212;
PhpParser.Comma = 213;
PhpParser.Colon = 214;
PhpParser.SemiColon = 215;
PhpParser.Eq = 216;
PhpParser.Quote = 217;
PhpParser.BackQuote = 218;
PhpParser.VarName = 219;
PhpParser.Label = 220;
PhpParser.Octal = 221;
PhpParser.Decimal = 222;
PhpParser.Real = 223;
PhpParser.Hex = 224;
PhpParser.Binary = 225;
PhpParser.BackQuoteString = 226;
PhpParser.SingleQuoteString = 227;
PhpParser.DoubleQuote = 228;
PhpParser.StartNowDoc = 229;
PhpParser.StartHereDoc = 230;
PhpParser.ErrorPhp = 231;
PhpParser.CurlyDollar = 232;
PhpParser.UnicodeEscape = 233;
PhpParser.StringPart = 234;
PhpParser.Comment = 235;
PhpParser.PHPEndSingleLineComment = 236;
PhpParser.CommentEnd = 237;
PhpParser.HereDocText = 238;
PhpParser.XmlText2 = 239;

PhpParser.RULE_htmlDocument = 0;
PhpParser.RULE_inlineHtml = 1;
PhpParser.RULE_htmlElement = 2;
PhpParser.RULE_scriptText = 3;
PhpParser.RULE_phpBlock = 4;
PhpParser.RULE_importStatement = 5;
PhpParser.RULE_topStatement = 6;
PhpParser.RULE_useDeclaration = 7;
PhpParser.RULE_useDeclarationContentList = 8;
PhpParser.RULE_useDeclarationContent = 9;
PhpParser.RULE_namespaceDeclaration = 10;
PhpParser.RULE_namespaceStatement = 11;
PhpParser.RULE_functionDeclaration = 12;
PhpParser.RULE_classDeclaration = 13;
PhpParser.RULE_classEntryType = 14;
PhpParser.RULE_interfaceList = 15;
PhpParser.RULE_typeParameterListInBrackets = 16;
PhpParser.RULE_typeParameterList = 17;
PhpParser.RULE_typeParameterWithDefaultsList = 18;
PhpParser.RULE_typeParameterDecl = 19;
PhpParser.RULE_typeParameterWithDefaultDecl = 20;
PhpParser.RULE_genericDynamicArgs = 21;
PhpParser.RULE_attributes = 22;
PhpParser.RULE_attributeGroup = 23;
PhpParser.RULE_attribute = 24;
PhpParser.RULE_innerStatementList = 25;
PhpParser.RULE_innerStatement = 26;
PhpParser.RULE_statement = 27;
PhpParser.RULE_emptyStatement_ = 28;
PhpParser.RULE_blockStatement = 29;
PhpParser.RULE_ifStatement = 30;
PhpParser.RULE_elseIfStatement = 31;
PhpParser.RULE_elseIfColonStatement = 32;
PhpParser.RULE_elseStatement = 33;
PhpParser.RULE_elseColonStatement = 34;
PhpParser.RULE_whileStatement = 35;
PhpParser.RULE_doWhileStatement = 36;
PhpParser.RULE_forStatement = 37;
PhpParser.RULE_forInit = 38;
PhpParser.RULE_forUpdate = 39;
PhpParser.RULE_switchStatement = 40;
PhpParser.RULE_switchBlock = 41;
PhpParser.RULE_breakStatement = 42;
PhpParser.RULE_continueStatement = 43;
PhpParser.RULE_returnStatement = 44;
PhpParser.RULE_expressionStatement = 45;
PhpParser.RULE_unsetStatement = 46;
PhpParser.RULE_foreachStatement = 47;
PhpParser.RULE_tryCatchFinally = 48;
PhpParser.RULE_catchClause = 49;
PhpParser.RULE_finallyStatement = 50;
PhpParser.RULE_throwStatement = 51;
PhpParser.RULE_gotoStatement = 52;
PhpParser.RULE_declareStatement = 53;
PhpParser.RULE_inlineHtmlStatement = 54;
PhpParser.RULE_declareList = 55;
PhpParser.RULE_formalParameterList = 56;
PhpParser.RULE_formalParameter = 57;
PhpParser.RULE_typeHint = 58;
PhpParser.RULE_globalStatement = 59;
PhpParser.RULE_globalVar = 60;
PhpParser.RULE_echoStatement = 61;
PhpParser.RULE_staticVariableStatement = 62;
PhpParser.RULE_classStatement = 63;
PhpParser.RULE_traitAdaptations = 64;
PhpParser.RULE_traitAdaptationStatement = 65;
PhpParser.RULE_traitPrecedence = 66;
PhpParser.RULE_traitAlias = 67;
PhpParser.RULE_traitMethodReference = 68;
PhpParser.RULE_baseCtorCall = 69;
PhpParser.RULE_methodBody = 70;
PhpParser.RULE_propertyModifiers = 71;
PhpParser.RULE_memberModifiers = 72;
PhpParser.RULE_variableInitializer = 73;
PhpParser.RULE_identifierInitializer = 74;
PhpParser.RULE_globalConstantDeclaration = 75;
PhpParser.RULE_expressionList = 76;
PhpParser.RULE_parentheses = 77;
PhpParser.RULE_expression = 78;
PhpParser.RULE_assignable = 79;
PhpParser.RULE_arrayCreation = 80;
PhpParser.RULE_lambdaFunctionExpr = 81;
PhpParser.RULE_matchExpr = 82;
PhpParser.RULE_matchItem = 83;
PhpParser.RULE_newExpr = 84;
PhpParser.RULE_assignmentOperator = 85;
PhpParser.RULE_yieldExpression = 86;
PhpParser.RULE_arrayItemList = 87;
PhpParser.RULE_arrayItem = 88;
PhpParser.RULE_lambdaFunctionUseVars = 89;
PhpParser.RULE_lambdaFunctionUseVar = 90;
PhpParser.RULE_qualifiedStaticTypeRef = 91;
PhpParser.RULE_typeRef = 92;
PhpParser.RULE_anonymousClass = 93;
PhpParser.RULE_indirectTypeRef = 94;
PhpParser.RULE_qualifiedNamespaceName = 95;
PhpParser.RULE_namespaceNameList = 96;
PhpParser.RULE_namespaceNameTail = 97;
PhpParser.RULE_qualifiedNamespaceNameList = 98;
PhpParser.RULE_arguments = 99;
PhpParser.RULE_actualArgument = 100;
PhpParser.RULE_argumentName = 101;
PhpParser.RULE_constantInitializer = 102;
PhpParser.RULE_constant = 103;
PhpParser.RULE_literalConstant = 104;
PhpParser.RULE_numericConstant = 105;
PhpParser.RULE_classConstant = 106;
PhpParser.RULE_stringConstant = 107;
PhpParser.RULE_string = 108;
PhpParser.RULE_interpolatedStringPart = 109;
PhpParser.RULE_chainList = 110;
PhpParser.RULE_chain = 111;
PhpParser.RULE_chainOrigin = 112;
PhpParser.RULE_memberAccess = 113;
PhpParser.RULE_functionCall = 114;
PhpParser.RULE_functionCallName = 115;
PhpParser.RULE_actualArguments = 116;
PhpParser.RULE_chainBase = 117;
PhpParser.RULE_keyedFieldName = 118;
PhpParser.RULE_keyedSimpleFieldName = 119;
PhpParser.RULE_keyedVariable = 120;
PhpParser.RULE_squareCurlyExpression = 121;
PhpParser.RULE_assignmentList = 122;
PhpParser.RULE_assignmentListElement = 123;
PhpParser.RULE_modifier = 124;
PhpParser.RULE_identifier = 125;
PhpParser.RULE_memberModifier = 126;
PhpParser.RULE_magicConstant = 127;
PhpParser.RULE_magicMethod = 128;
PhpParser.RULE_primitiveType = 129;
PhpParser.RULE_castOperation = 130;

class HtmlDocumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_htmlDocument;
    }

	EOF() {
	    return this.getToken(PhpParser.EOF, 0);
	};

	Shebang() {
	    return this.getToken(PhpParser.Shebang, 0);
	};

	inlineHtml = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InlineHtmlContext);
	    } else {
	        return this.getTypedRuleContext(InlineHtmlContext,i);
	    }
	};

	phpBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PhpBlockContext);
	    } else {
	        return this.getTypedRuleContext(PhpBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterHtmlDocument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitHtmlDocument(this);
		}
	}


}



class InlineHtmlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_inlineHtml;
    }

	htmlElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HtmlElementContext);
	    } else {
	        return this.getTypedRuleContext(HtmlElementContext,i);
	    }
	};

	scriptText() {
	    return this.getTypedRuleContext(ScriptTextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInlineHtml(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInlineHtml(this);
		}
	}


}



class HtmlElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_htmlElement;
    }

	HtmlDtd() {
	    return this.getToken(PhpParser.HtmlDtd, 0);
	};

	HtmlClose() {
	    return this.getToken(PhpParser.HtmlClose, 0);
	};

	HtmlStyleOpen() {
	    return this.getToken(PhpParser.HtmlStyleOpen, 0);
	};

	HtmlOpen() {
	    return this.getToken(PhpParser.HtmlOpen, 0);
	};

	HtmlName() {
	    return this.getToken(PhpParser.HtmlName, 0);
	};

	HtmlSlashClose() {
	    return this.getToken(PhpParser.HtmlSlashClose, 0);
	};

	HtmlSlash() {
	    return this.getToken(PhpParser.HtmlSlash, 0);
	};

	HtmlText() {
	    return this.getToken(PhpParser.HtmlText, 0);
	};

	HtmlEquals() {
	    return this.getToken(PhpParser.HtmlEquals, 0);
	};

	HtmlStartQuoteString() {
	    return this.getToken(PhpParser.HtmlStartQuoteString, 0);
	};

	HtmlEndQuoteString() {
	    return this.getToken(PhpParser.HtmlEndQuoteString, 0);
	};

	HtmlStartDoubleQuoteString() {
	    return this.getToken(PhpParser.HtmlStartDoubleQuoteString, 0);
	};

	HtmlEndDoubleQuoteString() {
	    return this.getToken(PhpParser.HtmlEndDoubleQuoteString, 0);
	};

	HtmlHex() {
	    return this.getToken(PhpParser.HtmlHex, 0);
	};

	HtmlDecimal() {
	    return this.getToken(PhpParser.HtmlDecimal, 0);
	};

	HtmlQuoteString() {
	    return this.getToken(PhpParser.HtmlQuoteString, 0);
	};

	HtmlDoubleQuoteString() {
	    return this.getToken(PhpParser.HtmlDoubleQuoteString, 0);
	};

	StyleBody() {
	    return this.getToken(PhpParser.StyleBody, 0);
	};

	HtmlScriptOpen() {
	    return this.getToken(PhpParser.HtmlScriptOpen, 0);
	};

	HtmlScriptClose() {
	    return this.getToken(PhpParser.HtmlScriptClose, 0);
	};

	XmlStart() {
	    return this.getToken(PhpParser.XmlStart, 0);
	};

	XmlClose() {
	    return this.getToken(PhpParser.XmlClose, 0);
	};

	XmlText = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.XmlText);
	    } else {
	        return this.getToken(PhpParser.XmlText, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterHtmlElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitHtmlElement(this);
		}
	}


}



class ScriptTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_scriptText;
    }

	ScriptText = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.ScriptText);
	    } else {
	        return this.getToken(PhpParser.ScriptText, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterScriptText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitScriptText(this);
		}
	}


}



class PhpBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_phpBlock;
    }

	importStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportStatementContext);
	    } else {
	        return this.getTypedRuleContext(ImportStatementContext,i);
	    }
	};

	topStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopStatementContext);
	    } else {
	        return this.getTypedRuleContext(TopStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPhpBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPhpBlock(this);
		}
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(PhpParser.Import, 0);
	};

	Namespace() {
	    return this.getToken(PhpParser.Namespace, 0);
	};

	namespaceNameList() {
	    return this.getTypedRuleContext(NamespaceNameListContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitImportStatement(this);
		}
	}


}



class TopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_topStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	useDeclaration() {
	    return this.getTypedRuleContext(UseDeclarationContext,0);
	};

	namespaceDeclaration() {
	    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	globalConstantDeclaration() {
	    return this.getTypedRuleContext(GlobalConstantDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTopStatement(this);
		}
	}


}



class UseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclaration;
    }

	Use() {
	    return this.getToken(PhpParser.Use, 0);
	};

	useDeclarationContentList() {
	    return this.getTypedRuleContext(UseDeclarationContentListContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	Function_() {
	    return this.getToken(PhpParser.Function_, 0);
	};

	Const() {
	    return this.getToken(PhpParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterUseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitUseDeclaration(this);
		}
	}


}



class UseDeclarationContentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclarationContentList;
    }

	useDeclarationContent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseDeclarationContentContext);
	    } else {
	        return this.getTypedRuleContext(UseDeclarationContentContext,i);
	    }
	};

	NamespaceSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.NamespaceSeparator);
	    } else {
	        return this.getToken(PhpParser.NamespaceSeparator, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterUseDeclarationContentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitUseDeclarationContentList(this);
		}
	}


}



class UseDeclarationContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclarationContent;
    }

	namespaceNameList() {
	    return this.getTypedRuleContext(NamespaceNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterUseDeclarationContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitUseDeclarationContent(this);
		}
	}


}



class NamespaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceDeclaration;
    }

	Namespace() {
	    return this.getToken(PhpParser.Namespace, 0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	namespaceNameList() {
	    return this.getTypedRuleContext(NamespaceNameListContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	namespaceStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamespaceStatementContext);
	    } else {
	        return this.getTypedRuleContext(NamespaceStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNamespaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNamespaceDeclaration(this);
		}
	}


}



class NamespaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	useDeclaration() {
	    return this.getTypedRuleContext(UseDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	globalConstantDeclaration() {
	    return this.getTypedRuleContext(GlobalConstantDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNamespaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNamespaceStatement(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(PhpParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	typeParameterListInBrackets() {
	    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	QuestionMark() {
	    return this.getToken(PhpParser.QuestionMark, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classDeclaration;
    }

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	classEntryType() {
	    return this.getTypedRuleContext(ClassEntryTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Interface() {
	    return this.getToken(PhpParser.Interface, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Private() {
	    return this.getToken(PhpParser.Private, 0);
	};

	modifier() {
	    return this.getTypedRuleContext(ModifierContext,0);
	};

	Partial() {
	    return this.getToken(PhpParser.Partial, 0);
	};

	classStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassStatementContext);
	    } else {
	        return this.getTypedRuleContext(ClassStatementContext,i);
	    }
	};

	typeParameterListInBrackets() {
	    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
	};

	Extends() {
	    return this.getToken(PhpParser.Extends, 0);
	};

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	Implements() {
	    return this.getToken(PhpParser.Implements, 0);
	};

	interfaceList() {
	    return this.getTypedRuleContext(InterfaceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class ClassEntryTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classEntryType;
    }

	Class() {
	    return this.getToken(PhpParser.Class, 0);
	};

	Trait() {
	    return this.getToken(PhpParser.Trait, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterClassEntryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitClassEntryType(this);
		}
	}


}



class InterfaceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_interfaceList;
    }

	qualifiedStaticTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedStaticTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedStaticTypeRefContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInterfaceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInterfaceList(this);
		}
	}


}



class TypeParameterListInBracketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterListInBrackets;
    }

	Lgeneric() {
	    return this.getToken(PhpParser.Lgeneric, 0);
	};

	typeParameterList() {
	    return this.getTypedRuleContext(TypeParameterListContext,0);
	};

	Rgeneric() {
	    return this.getToken(PhpParser.Rgeneric, 0);
	};

	typeParameterWithDefaultsList() {
	    return this.getTypedRuleContext(TypeParameterWithDefaultsListContext,0);
	};

	Comma() {
	    return this.getToken(PhpParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeParameterListInBrackets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeParameterListInBrackets(this);
		}
	}


}



class TypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterList;
    }

	typeParameterDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterDeclContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterDeclContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeParameterList(this);
		}
	}


}



class TypeParameterWithDefaultsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterWithDefaultsList;
    }

	typeParameterWithDefaultDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterWithDefaultDeclContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterWithDefaultDeclContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeParameterWithDefaultsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeParameterWithDefaultsList(this);
		}
	}


}



class TypeParameterDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeParameterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeParameterDecl(this);
		}
	}


}



class TypeParameterWithDefaultDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterWithDefaultDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeParameterWithDefaultDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeParameterWithDefaultDecl(this);
		}
	}


}



class GenericDynamicArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_genericDynamicArgs;
    }

	Lgeneric() {
	    return this.getToken(PhpParser.Lgeneric, 0);
	};

	typeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeRefContext);
	    } else {
	        return this.getTypedRuleContext(TypeRefContext,i);
	    }
	};

	Rgeneric() {
	    return this.getToken(PhpParser.Rgeneric, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterGenericDynamicArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitGenericDynamicArgs(this);
		}
	}


}



class AttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attributes;
    }

	attributeGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeGroupContext);
	    } else {
	        return this.getTypedRuleContext(AttributeGroupContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAttributes(this);
		}
	}


}



class AttributeGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attributeGroup;
    }

	AttributeStart() {
	    return this.getToken(PhpParser.AttributeStart, 0);
	};

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	CloseSquareBracket() {
	    return this.getToken(PhpParser.CloseSquareBracket, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAttributeGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAttributeGroup(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attribute;
    }

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class InnerStatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_innerStatementList;
    }

	innerStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerStatementContext);
	    } else {
	        return this.getTypedRuleContext(InnerStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInnerStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInnerStatementList(this);
		}
	}


}



class InnerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_innerStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInnerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInnerStatement(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_statement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	doWhileStatement() {
	    return this.getTypedRuleContext(DoWhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldExpression() {
	    return this.getTypedRuleContext(YieldExpressionContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	globalStatement() {
	    return this.getTypedRuleContext(GlobalStatementContext,0);
	};

	staticVariableStatement() {
	    return this.getTypedRuleContext(StaticVariableStatementContext,0);
	};

	echoStatement() {
	    return this.getTypedRuleContext(EchoStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	unsetStatement() {
	    return this.getTypedRuleContext(UnsetStatementContext,0);
	};

	foreachStatement() {
	    return this.getTypedRuleContext(ForeachStatementContext,0);
	};

	tryCatchFinally() {
	    return this.getTypedRuleContext(TryCatchFinallyContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	gotoStatement() {
	    return this.getTypedRuleContext(GotoStatementContext,0);
	};

	declareStatement() {
	    return this.getTypedRuleContext(DeclareStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	inlineHtmlStatement() {
	    return this.getTypedRuleContext(InlineHtmlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_blockStatement;
    }

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(PhpParser.If, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	elseIfStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElseIfStatementContext);
	    } else {
	        return this.getTypedRuleContext(ElseIfStatementContext,i);
	    }
	};

	elseStatement() {
	    return this.getTypedRuleContext(ElseStatementContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	EndIf() {
	    return this.getToken(PhpParser.EndIf, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	elseIfColonStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElseIfColonStatementContext);
	    } else {
	        return this.getTypedRuleContext(ElseIfColonStatementContext,i);
	    }
	};

	elseColonStatement() {
	    return this.getTypedRuleContext(ElseColonStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class ElseIfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseIfStatement;
    }

	ElseIf() {
	    return this.getToken(PhpParser.ElseIf, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterElseIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitElseIfStatement(this);
		}
	}


}



class ElseIfColonStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseIfColonStatement;
    }

	ElseIf() {
	    return this.getToken(PhpParser.ElseIf, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterElseIfColonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitElseIfColonStatement(this);
		}
	}


}



class ElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseStatement;
    }

	Else() {
	    return this.getToken(PhpParser.Else, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitElseStatement(this);
		}
	}


}



class ElseColonStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseColonStatement;
    }

	Else() {
	    return this.getToken(PhpParser.Else, 0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterElseColonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitElseColonStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_whileStatement;
    }

	While() {
	    return this.getToken(PhpParser.While, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	EndWhile() {
	    return this.getToken(PhpParser.EndWhile, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class DoWhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_doWhileStatement;
    }

	Do() {
	    return this.getToken(PhpParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(PhpParser.While, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterDoWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitDoWhileStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forStatement;
    }

	For() {
	    return this.getToken(PhpParser.For, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.SemiColon);
	    } else {
	        return this.getToken(PhpParser.SemiColon, i);
	    }
	};


	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	EndFor() {
	    return this.getToken(PhpParser.EndFor, 0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forInit;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitForInit(this);
		}
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forUpdate;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitForUpdate(this);
		}
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(PhpParser.Switch, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	EndSwitch() {
	    return this.getToken(PhpParser.EndSwitch, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.SemiColon);
	    } else {
	        return this.getToken(PhpParser.SemiColon, i);
	    }
	};


	switchBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_switchBlock;
    }

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Colon);
	    } else {
	        return this.getToken(PhpParser.Colon, i);
	    }
	};


	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.SemiColon);
	    } else {
	        return this.getToken(PhpParser.SemiColon, i);
	    }
	};


	Case = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Case);
	    } else {
	        return this.getToken(PhpParser.Case, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Default = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Default);
	    } else {
	        return this.getToken(PhpParser.Default, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterSwitchBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitSwitchBlock(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(PhpParser.Break, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(PhpParser.Continue, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(PhpParser.Return, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class UnsetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_unsetStatement;
    }

	Unset() {
	    return this.getToken(PhpParser.Unset, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	chainList() {
	    return this.getTypedRuleContext(ChainListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterUnsetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitUnsetStatement(this);
		}
	}


}



class ForeachStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_foreachStatement;
    }

	Foreach() {
	    return this.getToken(PhpParser.Foreach, 0);
	};

	OpenRoundBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.OpenRoundBracket);
	    } else {
	        return this.getToken(PhpParser.OpenRoundBracket, i);
	    }
	};


	chain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChainContext);
	    } else {
	        return this.getTypedRuleContext(ChainContext,i);
	    }
	};

	As() {
	    return this.getToken(PhpParser.As, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	CloseRoundBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.CloseRoundBracket);
	    } else {
	        return this.getToken(PhpParser.CloseRoundBracket, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	List() {
	    return this.getToken(PhpParser.List, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	EndForeach() {
	    return this.getToken(PhpParser.EndForeach, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	Ampersand = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Ampersand);
	    } else {
	        return this.getToken(PhpParser.Ampersand, i);
	    }
	};


	DoubleArrow() {
	    return this.getToken(PhpParser.DoubleArrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterForeachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitForeachStatement(this);
		}
	}


}



class TryCatchFinallyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_tryCatchFinally;
    }

	Try() {
	    return this.getToken(PhpParser.Try, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	finallyStatement() {
	    return this.getTypedRuleContext(FinallyStatementContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTryCatchFinally(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTryCatchFinally(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_catchClause;
    }

	Catch() {
	    return this.getToken(PhpParser.Catch, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	qualifiedStaticTypeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedStaticTypeRefContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedStaticTypeRefContext,i);
	    }
	};

	VarName() {
	    return this.getToken(PhpParser.VarName, 0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	Pipe = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Pipe);
	    } else {
	        return this.getToken(PhpParser.Pipe, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class FinallyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_finallyStatement;
    }

	Finally() {
	    return this.getToken(PhpParser.Finally, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFinallyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFinallyStatement(this);
		}
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(PhpParser.Throw, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}


}



class GotoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_gotoStatement;
    }

	Goto() {
	    return this.getToken(PhpParser.Goto, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitGotoStatement(this);
		}
	}


}



class DeclareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_declareStatement;
    }

	Declare() {
	    return this.getToken(PhpParser.Declare, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	declareList() {
	    return this.getTypedRuleContext(DeclareListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	innerStatementList() {
	    return this.getTypedRuleContext(InnerStatementListContext,0);
	};

	EndDeclare() {
	    return this.getToken(PhpParser.EndDeclare, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterDeclareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitDeclareStatement(this);
		}
	}


}



class InlineHtmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_inlineHtmlStatement;
    }

	inlineHtml = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InlineHtmlContext);
	    } else {
	        return this.getTypedRuleContext(InlineHtmlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInlineHtmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInlineHtmlStatement(this);
		}
	}


}



class DeclareListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_declareList;
    }

	identifierInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierInitializerContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierInitializerContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterDeclareList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitDeclareList(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_formalParameter;
    }

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	memberModifier() {
	    return this.getTypedRuleContext(MemberModifierContext,0);
	};

	QuestionMark() {
	    return this.getToken(PhpParser.QuestionMark, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	Ellipsis() {
	    return this.getToken(PhpParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFormalParameter(this);
		}
	}


}



class TypeHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeHint;
    }

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	Callable() {
	    return this.getToken(PhpParser.Callable, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	typeHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeHintContext);
	    } else {
	        return this.getTypedRuleContext(TypeHintContext,i);
	    }
	};

	Pipe() {
	    return this.getToken(PhpParser.Pipe, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeHint(this);
		}
	}


}



class GlobalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalStatement;
    }

	Global() {
	    return this.getToken(PhpParser.Global, 0);
	};

	globalVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVarContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVarContext,i);
	    }
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterGlobalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitGlobalStatement(this);
		}
	}


}



class GlobalVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalVar;
    }

	VarName() {
	    return this.getToken(PhpParser.VarName, 0);
	};

	Dollar() {
	    return this.getToken(PhpParser.Dollar, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterGlobalVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitGlobalVar(this);
		}
	}


}



class EchoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_echoStatement;
    }

	Echo() {
	    return this.getToken(PhpParser.Echo, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterEchoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitEchoStatement(this);
		}
	}


}



class StaticVariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_staticVariableStatement;
    }

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterStaticVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitStaticVariableStatement(this);
		}
	}


}



class ClassStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classStatement;
    }

	propertyModifiers() {
	    return this.getTypedRuleContext(PropertyModifiersContext,0);
	};

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Const() {
	    return this.getToken(PhpParser.Const, 0);
	};

	identifierInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierInitializerContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierInitializerContext,i);
	    }
	};

	Function_() {
	    return this.getToken(PhpParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	memberModifiers() {
	    return this.getTypedRuleContext(MemberModifiersContext,0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	typeParameterListInBrackets() {
	    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
	};

	baseCtorCall() {
	    return this.getTypedRuleContext(BaseCtorCallContext,0);
	};

	Use() {
	    return this.getToken(PhpParser.Use, 0);
	};

	qualifiedNamespaceNameList() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameListContext,0);
	};

	traitAdaptations() {
	    return this.getTypedRuleContext(TraitAdaptationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterClassStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitClassStatement(this);
		}
	}


}



class TraitAdaptationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAdaptations;
    }

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	traitAdaptationStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TraitAdaptationStatementContext);
	    } else {
	        return this.getTypedRuleContext(TraitAdaptationStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTraitAdaptations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTraitAdaptations(this);
		}
	}


}



class TraitAdaptationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAdaptationStatement;
    }

	traitPrecedence() {
	    return this.getTypedRuleContext(TraitPrecedenceContext,0);
	};

	traitAlias() {
	    return this.getTypedRuleContext(TraitAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTraitAdaptationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTraitAdaptationStatement(this);
		}
	}


}



class TraitPrecedenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitPrecedence;
    }

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	DoubleColon() {
	    return this.getToken(PhpParser.DoubleColon, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	InsteadOf() {
	    return this.getToken(PhpParser.InsteadOf, 0);
	};

	qualifiedNamespaceNameList() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameListContext,0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTraitPrecedence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTraitPrecedence(this);
		}
	}


}



class TraitAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAlias;
    }

	traitMethodReference() {
	    return this.getTypedRuleContext(TraitMethodReferenceContext,0);
	};

	As() {
	    return this.getToken(PhpParser.As, 0);
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	memberModifier() {
	    return this.getTypedRuleContext(MemberModifierContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTraitAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTraitAlias(this);
		}
	}


}



class TraitMethodReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitMethodReference;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	DoubleColon() {
	    return this.getToken(PhpParser.DoubleColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTraitMethodReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTraitMethodReference(this);
		}
	}


}



class BaseCtorCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_baseCtorCall;
    }

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterBaseCtorCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitBaseCtorCall(this);
		}
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_methodBody;
    }

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMethodBody(this);
		}
	}


}



class PropertyModifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_propertyModifiers;
    }

	memberModifiers() {
	    return this.getTypedRuleContext(MemberModifiersContext,0);
	};

	Var() {
	    return this.getToken(PhpParser.Var, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPropertyModifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPropertyModifiers(this);
		}
	}


}



class MemberModifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberModifiers;
    }

	memberModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberModifierContext);
	    } else {
	        return this.getTypedRuleContext(MemberModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMemberModifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMemberModifiers(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_variableInitializer;
    }

	VarName() {
	    return this.getToken(PhpParser.VarName, 0);
	};

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	constantInitializer() {
	    return this.getTypedRuleContext(ConstantInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class IdentifierInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_identifierInitializer;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	constantInitializer() {
	    return this.getTypedRuleContext(ConstantInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterIdentifierInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitIdentifierInitializer(this);
		}
	}


}



class GlobalConstantDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalConstantDeclaration;
    }

	Const() {
	    return this.getToken(PhpParser.Const, 0);
	};

	identifierInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierInitializerContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierInitializerContext,i);
	    }
	};

	SemiColon() {
	    return this.getToken(PhpParser.SemiColon, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterGlobalConstantDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitGlobalConstantDeclaration(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class ParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_parentheses;
    }

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	yieldExpression() {
	    return this.getTypedRuleContext(YieldExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitParentheses(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ChainExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterChainExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitChainExpression(this);
		}
	}


}

PhpParser.ChainExpressionContext = ChainExpressionContext;

class SpecialWordExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Yield() {
	    return this.getToken(PhpParser.Yield, 0);
	};

	List() {
	    return this.getToken(PhpParser.List, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IsSet() {
	    return this.getToken(PhpParser.IsSet, 0);
	};

	chainList() {
	    return this.getTypedRuleContext(ChainListContext,0);
	};

	Empty() {
	    return this.getToken(PhpParser.Empty, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	Eval() {
	    return this.getToken(PhpParser.Eval, 0);
	};

	Exit() {
	    return this.getToken(PhpParser.Exit, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	Include() {
	    return this.getToken(PhpParser.Include, 0);
	};

	IncludeOnce() {
	    return this.getToken(PhpParser.IncludeOnce, 0);
	};

	Require() {
	    return this.getToken(PhpParser.Require, 0);
	};

	RequireOnce() {
	    return this.getToken(PhpParser.RequireOnce, 0);
	};

	Throw() {
	    return this.getToken(PhpParser.Throw, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterSpecialWordExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitSpecialWordExpression(this);
		}
	}


}

PhpParser.SpecialWordExpressionContext = SpecialWordExpressionContext;

class ArrayCreationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayCreation() {
	    return this.getTypedRuleContext(ArrayCreationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArrayCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArrayCreationExpression(this);
		}
	}


}

PhpParser.ArrayCreationExpressionContext = ArrayCreationExpressionContext;

class BackQuoteStringExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BackQuoteString() {
	    return this.getToken(PhpParser.BackQuoteString, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterBackQuoteStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitBackQuoteStringExpression(this);
		}
	}


}

PhpParser.BackQuoteStringExpressionContext = BackQuoteStringExpressionContext;

class MatchExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	matchExpr() {
	    return this.getTypedRuleContext(MatchExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMatchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMatchExpression(this);
		}
	}


}

PhpParser.MatchExpressionContext = MatchExpressionContext;

class LogicalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LogicalAnd() {
	    return this.getToken(PhpParser.LogicalAnd, 0);
	};

	LogicalXor() {
	    return this.getToken(PhpParser.LogicalXor, 0);
	};

	LogicalOr() {
	    return this.getToken(PhpParser.LogicalOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLogicalExpression(this);
		}
	}


}

PhpParser.LogicalExpressionContext = LogicalExpressionContext;

class PrintExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Print() {
	    return this.getToken(PhpParser.Print, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPrintExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPrintExpression(this);
		}
	}


}

PhpParser.PrintExpressionContext = PrintExpressionContext;

class AssignmentExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	newExpr() {
	    return this.getTypedRuleContext(NewExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}

PhpParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostfixIncDecExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	Inc() {
	    return this.getToken(PhpParser.Inc, 0);
	};

	Dec() {
	    return this.getToken(PhpParser.Dec, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPostfixIncDecExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPostfixIncDecExpression(this);
		}
	}


}

PhpParser.PostfixIncDecExpressionContext = PostfixIncDecExpressionContext;

class CloneExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Clone() {
	    return this.getToken(PhpParser.Clone, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterCloneExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitCloneExpression(this);
		}
	}


}

PhpParser.CloneExpressionContext = CloneExpressionContext;

class UnaryOperatorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Tilde() {
	    return this.getToken(PhpParser.Tilde, 0);
	};

	SuppressWarnings() {
	    return this.getToken(PhpParser.SuppressWarnings, 0);
	};

	Bang() {
	    return this.getToken(PhpParser.Bang, 0);
	};

	Plus() {
	    return this.getToken(PhpParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(PhpParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterUnaryOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitUnaryOperatorExpression(this);
		}
	}


}

PhpParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;

class NewExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	newExpr() {
	    return this.getTypedRuleContext(NewExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNewExpression(this);
		}
	}


}

PhpParser.NewExpressionContext = NewExpressionContext;

class ParenthesisExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitParenthesisExpression(this);
		}
	}


}

PhpParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

class SpaceshipExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Spaceship() {
	    return this.getToken(PhpParser.Spaceship, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterSpaceshipExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitSpaceshipExpression(this);
		}
	}


}

PhpParser.SpaceshipExpressionContext = SpaceshipExpressionContext;

class ConditionalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	QuestionMark() {
	    return this.getToken(PhpParser.QuestionMark, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}

PhpParser.ConditionalExpressionContext = ConditionalExpressionContext;

class NullCoalescingExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NullCoalescing() {
	    return this.getToken(PhpParser.NullCoalescing, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNullCoalescingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNullCoalescingExpression(this);
		}
	}


}

PhpParser.NullCoalescingExpressionContext = NullCoalescingExpressionContext;

class ArithmeticExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Pow() {
	    return this.getToken(PhpParser.Pow, 0);
	};

	Asterisk() {
	    return this.getToken(PhpParser.Asterisk, 0);
	};

	Divide() {
	    return this.getToken(PhpParser.Divide, 0);
	};

	Percent() {
	    return this.getToken(PhpParser.Percent, 0);
	};

	Plus() {
	    return this.getToken(PhpParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(PhpParser.Minus, 0);
	};

	Dot() {
	    return this.getToken(PhpParser.Dot, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArithmeticExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArithmeticExpression(this);
		}
	}


}

PhpParser.ArithmeticExpressionContext = ArithmeticExpressionContext;

class IndexerExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringConstant() {
	    return this.getTypedRuleContext(StringConstantContext,0);
	};

	OpenSquareBracket() {
	    return this.getToken(PhpParser.OpenSquareBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseSquareBracket() {
	    return this.getToken(PhpParser.CloseSquareBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterIndexerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitIndexerExpression(this);
		}
	}


}

PhpParser.IndexerExpressionContext = IndexerExpressionContext;

class ScalarExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	Label() {
	    return this.getToken(PhpParser.Label, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterScalarExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitScalarExpression(this);
		}
	}


}

PhpParser.ScalarExpressionContext = ScalarExpressionContext;

class PrefixIncDecExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	Inc() {
	    return this.getToken(PhpParser.Inc, 0);
	};

	Dec() {
	    return this.getToken(PhpParser.Dec, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPrefixIncDecExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPrefixIncDecExpression(this);
		}
	}


}

PhpParser.PrefixIncDecExpressionContext = PrefixIncDecExpressionContext;

class ComparisonExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ShiftLeft() {
	    return this.getToken(PhpParser.ShiftLeft, 0);
	};

	ShiftRight() {
	    return this.getToken(PhpParser.ShiftRight, 0);
	};

	Less() {
	    return this.getToken(PhpParser.Less, 0);
	};

	IsSmallerOrEqual() {
	    return this.getToken(PhpParser.IsSmallerOrEqual, 0);
	};

	Greater() {
	    return this.getToken(PhpParser.Greater, 0);
	};

	IsGreaterOrEqual() {
	    return this.getToken(PhpParser.IsGreaterOrEqual, 0);
	};

	IsIdentical() {
	    return this.getToken(PhpParser.IsIdentical, 0);
	};

	IsNoidentical() {
	    return this.getToken(PhpParser.IsNoidentical, 0);
	};

	IsEqual() {
	    return this.getToken(PhpParser.IsEqual, 0);
	};

	IsNotEq() {
	    return this.getToken(PhpParser.IsNotEq, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitComparisonExpression(this);
		}
	}


}

PhpParser.ComparisonExpressionContext = ComparisonExpressionContext;

class CastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	castOperation() {
	    return this.getTypedRuleContext(CastOperationContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitCastExpression(this);
		}
	}


}

PhpParser.CastExpressionContext = CastExpressionContext;

class InstanceOfExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	InstanceOf() {
	    return this.getToken(PhpParser.InstanceOf, 0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInstanceOfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInstanceOfExpression(this);
		}
	}


}

PhpParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

class LambdaFunctionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lambdaFunctionExpr() {
	    return this.getTypedRuleContext(LambdaFunctionExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLambdaFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLambdaFunctionExpression(this);
		}
	}


}

PhpParser.LambdaFunctionExpressionContext = LambdaFunctionExpressionContext;

class BitwiseExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	Caret() {
	    return this.getToken(PhpParser.Caret, 0);
	};

	Pipe() {
	    return this.getToken(PhpParser.Pipe, 0);
	};

	BooleanAnd() {
	    return this.getToken(PhpParser.BooleanAnd, 0);
	};

	BooleanOr() {
	    return this.getToken(PhpParser.BooleanOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterBitwiseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitBitwiseExpression(this);
		}
	}


}

PhpParser.BitwiseExpressionContext = BitwiseExpressionContext;

class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignable;
    }

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	arrayCreation() {
	    return this.getTypedRuleContext(ArrayCreationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAssignable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAssignable(this);
		}
	}


}



class ArrayCreationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayCreation;
    }

	Array() {
	    return this.getToken(PhpParser.Array, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	OpenSquareBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.OpenSquareBracket);
	    } else {
	        return this.getToken(PhpParser.OpenSquareBracket, i);
	    }
	};


	CloseSquareBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.CloseSquareBracket);
	    } else {
	        return this.getToken(PhpParser.CloseSquareBracket, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arrayItemList() {
	    return this.getTypedRuleContext(ArrayItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArrayCreation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArrayCreation(this);
		}
	}


}



class LambdaFunctionExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionExpr;
    }

	Function_() {
	    return this.getToken(PhpParser.Function_, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	lambdaFunctionUseVars() {
	    return this.getTypedRuleContext(LambdaFunctionUseVarsContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	typeHint() {
	    return this.getTypedRuleContext(TypeHintContext,0);
	};

	LambdaFn() {
	    return this.getToken(PhpParser.LambdaFn, 0);
	};

	DoubleArrow() {
	    return this.getToken(PhpParser.DoubleArrow, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLambdaFunctionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLambdaFunctionExpr(this);
		}
	}


}



class MatchExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_matchExpr;
    }

	Match() {
	    return this.getToken(PhpParser.Match, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	matchItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchItemContext);
	    } else {
	        return this.getTypedRuleContext(MatchItemContext,i);
	    }
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMatchExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMatchExpr(this);
		}
	}


}



class MatchItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_matchItem;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DoubleArrow() {
	    return this.getToken(PhpParser.DoubleArrow, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMatchItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMatchItem(this);
		}
	}


}



class NewExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_newExpr;
    }

	New() {
	    return this.getToken(PhpParser.New, 0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNewExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNewExpr(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentOperator;
    }

	Eq() {
	    return this.getToken(PhpParser.Eq, 0);
	};

	PlusEqual() {
	    return this.getToken(PhpParser.PlusEqual, 0);
	};

	MinusEqual() {
	    return this.getToken(PhpParser.MinusEqual, 0);
	};

	MulEqual() {
	    return this.getToken(PhpParser.MulEqual, 0);
	};

	PowEqual() {
	    return this.getToken(PhpParser.PowEqual, 0);
	};

	DivEqual() {
	    return this.getToken(PhpParser.DivEqual, 0);
	};

	Concaequal() {
	    return this.getToken(PhpParser.Concaequal, 0);
	};

	ModEqual() {
	    return this.getToken(PhpParser.ModEqual, 0);
	};

	AndEqual() {
	    return this.getToken(PhpParser.AndEqual, 0);
	};

	OrEqual() {
	    return this.getToken(PhpParser.OrEqual, 0);
	};

	XorEqual() {
	    return this.getToken(PhpParser.XorEqual, 0);
	};

	ShiftLeftEqual() {
	    return this.getToken(PhpParser.ShiftLeftEqual, 0);
	};

	ShiftRightEqual() {
	    return this.getToken(PhpParser.ShiftRightEqual, 0);
	};

	NullCoalescingEqual() {
	    return this.getToken(PhpParser.NullCoalescingEqual, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class YieldExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_yieldExpression;
    }

	Yield() {
	    return this.getToken(PhpParser.Yield, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	From() {
	    return this.getToken(PhpParser.From, 0);
	};

	DoubleArrow() {
	    return this.getToken(PhpParser.DoubleArrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterYieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitYieldExpression(this);
		}
	}


}



class ArrayItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayItemList;
    }

	arrayItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayItemContext);
	    } else {
	        return this.getTypedRuleContext(ArrayItemContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArrayItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArrayItemList(this);
		}
	}


}



class ArrayItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayItem;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DoubleArrow() {
	    return this.getToken(PhpParser.DoubleArrow, 0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArrayItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArrayItem(this);
		}
	}


}



class LambdaFunctionUseVarsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionUseVars;
    }

	Use() {
	    return this.getToken(PhpParser.Use, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	lambdaFunctionUseVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LambdaFunctionUseVarContext);
	    } else {
	        return this.getTypedRuleContext(LambdaFunctionUseVarContext,i);
	    }
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLambdaFunctionUseVars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLambdaFunctionUseVars(this);
		}
	}


}



class LambdaFunctionUseVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionUseVar;
    }

	VarName() {
	    return this.getToken(PhpParser.VarName, 0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLambdaFunctionUseVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLambdaFunctionUseVar(this);
		}
	}


}



class QualifiedStaticTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedStaticTypeRef;
    }

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	genericDynamicArgs() {
	    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
	};

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterQualifiedStaticTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitQualifiedStaticTypeRef(this);
		}
	}


}



class TypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeRef;
    }

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	indirectTypeRef() {
	    return this.getTypedRuleContext(IndirectTypeRefContext,0);
	};

	genericDynamicArgs() {
	    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	anonymousClass() {
	    return this.getTypedRuleContext(AnonymousClassContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitTypeRef(this);
		}
	}


}



class AnonymousClassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_anonymousClass;
    }

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	classEntryType() {
	    return this.getTypedRuleContext(ClassEntryTypeContext,0);
	};

	Interface() {
	    return this.getToken(PhpParser.Interface, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	Private() {
	    return this.getToken(PhpParser.Private, 0);
	};

	modifier() {
	    return this.getTypedRuleContext(ModifierContext,0);
	};

	Partial() {
	    return this.getToken(PhpParser.Partial, 0);
	};

	classStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassStatementContext);
	    } else {
	        return this.getTypedRuleContext(ClassStatementContext,i);
	    }
	};

	typeParameterListInBrackets() {
	    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
	};

	Extends() {
	    return this.getToken(PhpParser.Extends, 0);
	};

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	Implements() {
	    return this.getToken(PhpParser.Implements, 0);
	};

	interfaceList() {
	    return this.getTypedRuleContext(InterfaceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAnonymousClass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAnonymousClass(this);
		}
	}


}



class IndirectTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_indirectTypeRef;
    }

	chainBase() {
	    return this.getTypedRuleContext(ChainBaseContext,0);
	};

	ObjectOperator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.ObjectOperator);
	    } else {
	        return this.getToken(PhpParser.ObjectOperator, i);
	    }
	};


	keyedFieldName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyedFieldNameContext);
	    } else {
	        return this.getTypedRuleContext(KeyedFieldNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterIndirectTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitIndirectTypeRef(this);
		}
	}


}



class QualifiedNamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedNamespaceName;
    }

	namespaceNameList() {
	    return this.getTypedRuleContext(NamespaceNameListContext,0);
	};

	Namespace() {
	    return this.getToken(PhpParser.Namespace, 0);
	};

	NamespaceSeparator() {
	    return this.getToken(PhpParser.NamespaceSeparator, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterQualifiedNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitQualifiedNamespaceName(this);
		}
	}


}



class NamespaceNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceNameList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	NamespaceSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.NamespaceSeparator);
	    } else {
	        return this.getToken(PhpParser.NamespaceSeparator, i);
	    }
	};


	namespaceNameTail() {
	    return this.getTypedRuleContext(NamespaceNameTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNamespaceNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNamespaceNameList(this);
		}
	}


}



class NamespaceNameTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceNameTail;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	As() {
	    return this.getToken(PhpParser.As, 0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	namespaceNameTail = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamespaceNameTailContext);
	    } else {
	        return this.getTypedRuleContext(NamespaceNameTailContext,i);
	    }
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNamespaceNameTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNamespaceNameTail(this);
		}
	}


}



class QualifiedNamespaceNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedNamespaceNameList;
    }

	qualifiedNamespaceName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNamespaceNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNamespaceNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterQualifiedNamespaceNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitQualifiedNamespaceNameList(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arguments;
    }

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	actualArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActualArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ActualArgumentContext,i);
	    }
	};

	yieldExpression() {
	    return this.getTypedRuleContext(YieldExpressionContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArguments(this);
		}
	}


}



class ActualArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_actualArgument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	argumentName() {
	    return this.getTypedRuleContext(ArgumentNameContext,0);
	};

	Ellipsis() {
	    return this.getToken(PhpParser.Ellipsis, 0);
	};

	Ampersand() {
	    return this.getToken(PhpParser.Ampersand, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterActualArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitActualArgument(this);
		}
	}


}



class ArgumentNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_argumentName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(PhpParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterArgumentName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitArgumentName(this);
		}
	}


}



class ConstantInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_constantInitializer;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	Array() {
	    return this.getToken(PhpParser.Array, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	arrayItemList() {
	    return this.getTypedRuleContext(ArrayItemListContext,0);
	};

	Comma() {
	    return this.getToken(PhpParser.Comma, 0);
	};

	OpenSquareBracket() {
	    return this.getToken(PhpParser.OpenSquareBracket, 0);
	};

	CloseSquareBracket() {
	    return this.getToken(PhpParser.CloseSquareBracket, 0);
	};

	constantInitializer() {
	    return this.getTypedRuleContext(ConstantInitializerContext,0);
	};

	Plus() {
	    return this.getToken(PhpParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(PhpParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterConstantInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitConstantInitializer(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_constant;
    }

	Null() {
	    return this.getToken(PhpParser.Null, 0);
	};

	literalConstant() {
	    return this.getTypedRuleContext(LiteralConstantContext,0);
	};

	magicConstant() {
	    return this.getTypedRuleContext(MagicConstantContext,0);
	};

	classConstant() {
	    return this.getTypedRuleContext(ClassConstantContext,0);
	};

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitConstant(this);
		}
	}


}



class LiteralConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_literalConstant;
    }

	Real() {
	    return this.getToken(PhpParser.Real, 0);
	};

	BooleanConstant() {
	    return this.getToken(PhpParser.BooleanConstant, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	stringConstant() {
	    return this.getTypedRuleContext(StringConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterLiteralConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitLiteralConstant(this);
		}
	}


}



class NumericConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_numericConstant;
    }

	Octal() {
	    return this.getToken(PhpParser.Octal, 0);
	};

	Decimal() {
	    return this.getToken(PhpParser.Decimal, 0);
	};

	Hex() {
	    return this.getToken(PhpParser.Hex, 0);
	};

	Binary() {
	    return this.getToken(PhpParser.Binary, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterNumericConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitNumericConstant(this);
		}
	}


}



class ClassConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classConstant;
    }

	DoubleColon() {
	    return this.getToken(PhpParser.DoubleColon, 0);
	};

	Class() {
	    return this.getToken(PhpParser.Class, 0);
	};

	Parent_() {
	    return this.getToken(PhpParser.Parent_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Constructor() {
	    return this.getToken(PhpParser.Constructor, 0);
	};

	Get() {
	    return this.getToken(PhpParser.Get, 0);
	};

	Set() {
	    return this.getToken(PhpParser.Set, 0);
	};

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	keyedVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyedVariableContext);
	    } else {
	        return this.getTypedRuleContext(KeyedVariableContext,i);
	    }
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterClassConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitClassConstant(this);
		}
	}


}



class StringConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_stringConstant;
    }

	Label() {
	    return this.getToken(PhpParser.Label, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterStringConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitStringConstant(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_string;
    }

	StartHereDoc() {
	    return this.getToken(PhpParser.StartHereDoc, 0);
	};

	HereDocText = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.HereDocText);
	    } else {
	        return this.getToken(PhpParser.HereDocText, i);
	    }
	};


	StartNowDoc() {
	    return this.getToken(PhpParser.StartNowDoc, 0);
	};

	SingleQuoteString() {
	    return this.getToken(PhpParser.SingleQuoteString, 0);
	};

	DoubleQuote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.DoubleQuote);
	    } else {
	        return this.getToken(PhpParser.DoubleQuote, i);
	    }
	};


	interpolatedStringPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterpolatedStringPartContext);
	    } else {
	        return this.getTypedRuleContext(InterpolatedStringPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitString(this);
		}
	}


}



class InterpolatedStringPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_interpolatedStringPart;
    }

	StringPart() {
	    return this.getToken(PhpParser.StringPart, 0);
	};

	UnicodeEscape() {
	    return this.getToken(PhpParser.UnicodeEscape, 0);
	};

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterInterpolatedStringPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitInterpolatedStringPart(this);
		}
	}


}



class ChainListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainList;
    }

	chain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChainContext);
	    } else {
	        return this.getTypedRuleContext(ChainContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterChainList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitChainList(this);
		}
	}


}



class ChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chain;
    }

	chainOrigin() {
	    return this.getTypedRuleContext(ChainOriginContext,0);
	};

	memberAccess = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberAccessContext);
	    } else {
	        return this.getTypedRuleContext(MemberAccessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitChain(this);
		}
	}


}



class ChainOriginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainOrigin;
    }

	chainBase() {
	    return this.getTypedRuleContext(ChainBaseContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	newExpr() {
	    return this.getTypedRuleContext(NewExprContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterChainOrigin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitChainOrigin(this);
		}
	}


}



class MemberAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberAccess;
    }

	ObjectOperator() {
	    return this.getToken(PhpParser.ObjectOperator, 0);
	};

	keyedFieldName() {
	    return this.getTypedRuleContext(KeyedFieldNameContext,0);
	};

	actualArguments() {
	    return this.getTypedRuleContext(ActualArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMemberAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMemberAccess(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionCall;
    }

	functionCallName() {
	    return this.getTypedRuleContext(FunctionCallNameContext,0);
	};

	actualArguments() {
	    return this.getTypedRuleContext(ActualArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class FunctionCallNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionCallName;
    }

	qualifiedNamespaceName() {
	    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
	};

	classConstant() {
	    return this.getTypedRuleContext(ClassConstantContext,0);
	};

	chainBase() {
	    return this.getTypedRuleContext(ChainBaseContext,0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterFunctionCallName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitFunctionCallName(this);
		}
	}


}



class ActualArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_actualArguments;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	genericDynamicArgs() {
	    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
	};

	squareCurlyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterActualArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitActualArguments(this);
		}
	}


}



class ChainBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainBase;
    }

	keyedVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyedVariableContext);
	    } else {
	        return this.getTypedRuleContext(KeyedVariableContext,i);
	    }
	};

	DoubleColon() {
	    return this.getToken(PhpParser.DoubleColon, 0);
	};

	qualifiedStaticTypeRef() {
	    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterChainBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitChainBase(this);
		}
	}


}



class KeyedFieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedFieldName;
    }

	keyedSimpleFieldName() {
	    return this.getTypedRuleContext(KeyedSimpleFieldNameContext,0);
	};

	keyedVariable() {
	    return this.getTypedRuleContext(KeyedVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterKeyedFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitKeyedFieldName(this);
		}
	}


}



class KeyedSimpleFieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedSimpleFieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	squareCurlyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterKeyedSimpleFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitKeyedSimpleFieldName(this);
		}
	}


}



class KeyedVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedVariable;
    }

	VarName() {
	    return this.getToken(PhpParser.VarName, 0);
	};

	Dollar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Dollar);
	    } else {
	        return this.getToken(PhpParser.Dollar, i);
	    }
	};


	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	squareCurlyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterKeyedVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitKeyedVariable(this);
		}
	}


}



class SquareCurlyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_squareCurlyExpression;
    }

	OpenSquareBracket() {
	    return this.getToken(PhpParser.OpenSquareBracket, 0);
	};

	CloseSquareBracket() {
	    return this.getToken(PhpParser.CloseSquareBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OpenCurlyBracket() {
	    return this.getToken(PhpParser.OpenCurlyBracket, 0);
	};

	CloseCurlyBracket() {
	    return this.getToken(PhpParser.CloseCurlyBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterSquareCurlyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitSquareCurlyExpression(this);
		}
	}


}



class AssignmentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentList;
    }

	assignmentListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentListElementContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentListElementContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PhpParser.Comma);
	    } else {
	        return this.getToken(PhpParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAssignmentList(this);
		}
	}


}



class AssignmentListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentListElement;
    }

	chain() {
	    return this.getTypedRuleContext(ChainContext,0);
	};

	List() {
	    return this.getToken(PhpParser.List, 0);
	};

	OpenRoundBracket() {
	    return this.getToken(PhpParser.OpenRoundBracket, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	CloseRoundBracket() {
	    return this.getToken(PhpParser.CloseRoundBracket, 0);
	};

	arrayItem() {
	    return this.getTypedRuleContext(ArrayItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterAssignmentListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitAssignmentListElement(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_modifier;
    }

	Abstract() {
	    return this.getToken(PhpParser.Abstract, 0);
	};

	Final() {
	    return this.getToken(PhpParser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_identifier;
    }

	Label() {
	    return this.getToken(PhpParser.Label, 0);
	};

	Abstract() {
	    return this.getToken(PhpParser.Abstract, 0);
	};

	Array() {
	    return this.getToken(PhpParser.Array, 0);
	};

	As() {
	    return this.getToken(PhpParser.As, 0);
	};

	BinaryCast() {
	    return this.getToken(PhpParser.BinaryCast, 0);
	};

	BoolType() {
	    return this.getToken(PhpParser.BoolType, 0);
	};

	BooleanConstant() {
	    return this.getToken(PhpParser.BooleanConstant, 0);
	};

	Break() {
	    return this.getToken(PhpParser.Break, 0);
	};

	Callable() {
	    return this.getToken(PhpParser.Callable, 0);
	};

	Case() {
	    return this.getToken(PhpParser.Case, 0);
	};

	Catch() {
	    return this.getToken(PhpParser.Catch, 0);
	};

	Class() {
	    return this.getToken(PhpParser.Class, 0);
	};

	Clone() {
	    return this.getToken(PhpParser.Clone, 0);
	};

	Const() {
	    return this.getToken(PhpParser.Const, 0);
	};

	Continue() {
	    return this.getToken(PhpParser.Continue, 0);
	};

	Declare() {
	    return this.getToken(PhpParser.Declare, 0);
	};

	Default() {
	    return this.getToken(PhpParser.Default, 0);
	};

	Do() {
	    return this.getToken(PhpParser.Do, 0);
	};

	DoubleCast() {
	    return this.getToken(PhpParser.DoubleCast, 0);
	};

	DoubleType() {
	    return this.getToken(PhpParser.DoubleType, 0);
	};

	Echo() {
	    return this.getToken(PhpParser.Echo, 0);
	};

	Else() {
	    return this.getToken(PhpParser.Else, 0);
	};

	ElseIf() {
	    return this.getToken(PhpParser.ElseIf, 0);
	};

	Empty() {
	    return this.getToken(PhpParser.Empty, 0);
	};

	EndDeclare() {
	    return this.getToken(PhpParser.EndDeclare, 0);
	};

	EndFor() {
	    return this.getToken(PhpParser.EndFor, 0);
	};

	EndForeach() {
	    return this.getToken(PhpParser.EndForeach, 0);
	};

	EndIf() {
	    return this.getToken(PhpParser.EndIf, 0);
	};

	EndSwitch() {
	    return this.getToken(PhpParser.EndSwitch, 0);
	};

	EndWhile() {
	    return this.getToken(PhpParser.EndWhile, 0);
	};

	Eval() {
	    return this.getToken(PhpParser.Eval, 0);
	};

	Exit() {
	    return this.getToken(PhpParser.Exit, 0);
	};

	Extends() {
	    return this.getToken(PhpParser.Extends, 0);
	};

	Final() {
	    return this.getToken(PhpParser.Final, 0);
	};

	Finally() {
	    return this.getToken(PhpParser.Finally, 0);
	};

	FloatCast() {
	    return this.getToken(PhpParser.FloatCast, 0);
	};

	For() {
	    return this.getToken(PhpParser.For, 0);
	};

	Foreach() {
	    return this.getToken(PhpParser.Foreach, 0);
	};

	Function_() {
	    return this.getToken(PhpParser.Function_, 0);
	};

	Global() {
	    return this.getToken(PhpParser.Global, 0);
	};

	Goto() {
	    return this.getToken(PhpParser.Goto, 0);
	};

	If() {
	    return this.getToken(PhpParser.If, 0);
	};

	Implements() {
	    return this.getToken(PhpParser.Implements, 0);
	};

	Import() {
	    return this.getToken(PhpParser.Import, 0);
	};

	Include() {
	    return this.getToken(PhpParser.Include, 0);
	};

	IncludeOnce() {
	    return this.getToken(PhpParser.IncludeOnce, 0);
	};

	InstanceOf() {
	    return this.getToken(PhpParser.InstanceOf, 0);
	};

	InsteadOf() {
	    return this.getToken(PhpParser.InsteadOf, 0);
	};

	Int16Cast() {
	    return this.getToken(PhpParser.Int16Cast, 0);
	};

	Int64Type() {
	    return this.getToken(PhpParser.Int64Type, 0);
	};

	Int8Cast() {
	    return this.getToken(PhpParser.Int8Cast, 0);
	};

	Interface() {
	    return this.getToken(PhpParser.Interface, 0);
	};

	IntType() {
	    return this.getToken(PhpParser.IntType, 0);
	};

	IsSet() {
	    return this.getToken(PhpParser.IsSet, 0);
	};

	List() {
	    return this.getToken(PhpParser.List, 0);
	};

	LogicalAnd() {
	    return this.getToken(PhpParser.LogicalAnd, 0);
	};

	LogicalOr() {
	    return this.getToken(PhpParser.LogicalOr, 0);
	};

	LogicalXor() {
	    return this.getToken(PhpParser.LogicalXor, 0);
	};

	Namespace() {
	    return this.getToken(PhpParser.Namespace, 0);
	};

	New() {
	    return this.getToken(PhpParser.New, 0);
	};

	Null() {
	    return this.getToken(PhpParser.Null, 0);
	};

	ObjectType() {
	    return this.getToken(PhpParser.ObjectType, 0);
	};

	Parent_() {
	    return this.getToken(PhpParser.Parent_, 0);
	};

	Partial() {
	    return this.getToken(PhpParser.Partial, 0);
	};

	Print() {
	    return this.getToken(PhpParser.Print, 0);
	};

	Private() {
	    return this.getToken(PhpParser.Private, 0);
	};

	Protected() {
	    return this.getToken(PhpParser.Protected, 0);
	};

	Public() {
	    return this.getToken(PhpParser.Public, 0);
	};

	Require() {
	    return this.getToken(PhpParser.Require, 0);
	};

	RequireOnce() {
	    return this.getToken(PhpParser.RequireOnce, 0);
	};

	Resource() {
	    return this.getToken(PhpParser.Resource, 0);
	};

	Return() {
	    return this.getToken(PhpParser.Return, 0);
	};

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	StringType() {
	    return this.getToken(PhpParser.StringType, 0);
	};

	Switch() {
	    return this.getToken(PhpParser.Switch, 0);
	};

	Throw() {
	    return this.getToken(PhpParser.Throw, 0);
	};

	Trait() {
	    return this.getToken(PhpParser.Trait, 0);
	};

	Try() {
	    return this.getToken(PhpParser.Try, 0);
	};

	Typeof() {
	    return this.getToken(PhpParser.Typeof, 0);
	};

	UintCast() {
	    return this.getToken(PhpParser.UintCast, 0);
	};

	UnicodeCast() {
	    return this.getToken(PhpParser.UnicodeCast, 0);
	};

	Unset() {
	    return this.getToken(PhpParser.Unset, 0);
	};

	Use() {
	    return this.getToken(PhpParser.Use, 0);
	};

	Var() {
	    return this.getToken(PhpParser.Var, 0);
	};

	While() {
	    return this.getToken(PhpParser.While, 0);
	};

	Yield() {
	    return this.getToken(PhpParser.Yield, 0);
	};

	From() {
	    return this.getToken(PhpParser.From, 0);
	};

	Get() {
	    return this.getToken(PhpParser.Get, 0);
	};

	Set() {
	    return this.getToken(PhpParser.Set, 0);
	};

	Call() {
	    return this.getToken(PhpParser.Call, 0);
	};

	CallStatic() {
	    return this.getToken(PhpParser.CallStatic, 0);
	};

	Constructor() {
	    return this.getToken(PhpParser.Constructor, 0);
	};

	Destruct() {
	    return this.getToken(PhpParser.Destruct, 0);
	};

	Wakeup() {
	    return this.getToken(PhpParser.Wakeup, 0);
	};

	Sleep() {
	    return this.getToken(PhpParser.Sleep, 0);
	};

	Autoload() {
	    return this.getToken(PhpParser.Autoload, 0);
	};

	IsSet__() {
	    return this.getToken(PhpParser.IsSet__, 0);
	};

	Unset__() {
	    return this.getToken(PhpParser.Unset__, 0);
	};

	ToString__() {
	    return this.getToken(PhpParser.ToString__, 0);
	};

	Invoke() {
	    return this.getToken(PhpParser.Invoke, 0);
	};

	SetState() {
	    return this.getToken(PhpParser.SetState, 0);
	};

	Clone__() {
	    return this.getToken(PhpParser.Clone__, 0);
	};

	DebugInfo() {
	    return this.getToken(PhpParser.DebugInfo, 0);
	};

	Namespace__() {
	    return this.getToken(PhpParser.Namespace__, 0);
	};

	Class__() {
	    return this.getToken(PhpParser.Class__, 0);
	};

	Traic__() {
	    return this.getToken(PhpParser.Traic__, 0);
	};

	Function__() {
	    return this.getToken(PhpParser.Function__, 0);
	};

	Method__() {
	    return this.getToken(PhpParser.Method__, 0);
	};

	Line__() {
	    return this.getToken(PhpParser.Line__, 0);
	};

	File__() {
	    return this.getToken(PhpParser.File__, 0);
	};

	Dir__() {
	    return this.getToken(PhpParser.Dir__, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class MemberModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberModifier;
    }

	Public() {
	    return this.getToken(PhpParser.Public, 0);
	};

	Protected() {
	    return this.getToken(PhpParser.Protected, 0);
	};

	Private() {
	    return this.getToken(PhpParser.Private, 0);
	};

	Static() {
	    return this.getToken(PhpParser.Static, 0);
	};

	Abstract() {
	    return this.getToken(PhpParser.Abstract, 0);
	};

	Final() {
	    return this.getToken(PhpParser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMemberModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMemberModifier(this);
		}
	}


}



class MagicConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_magicConstant;
    }

	Namespace__() {
	    return this.getToken(PhpParser.Namespace__, 0);
	};

	Class__() {
	    return this.getToken(PhpParser.Class__, 0);
	};

	Traic__() {
	    return this.getToken(PhpParser.Traic__, 0);
	};

	Function__() {
	    return this.getToken(PhpParser.Function__, 0);
	};

	Method__() {
	    return this.getToken(PhpParser.Method__, 0);
	};

	Line__() {
	    return this.getToken(PhpParser.Line__, 0);
	};

	File__() {
	    return this.getToken(PhpParser.File__, 0);
	};

	Dir__() {
	    return this.getToken(PhpParser.Dir__, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMagicConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMagicConstant(this);
		}
	}


}



class MagicMethodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_magicMethod;
    }

	Get() {
	    return this.getToken(PhpParser.Get, 0);
	};

	Set() {
	    return this.getToken(PhpParser.Set, 0);
	};

	Call() {
	    return this.getToken(PhpParser.Call, 0);
	};

	CallStatic() {
	    return this.getToken(PhpParser.CallStatic, 0);
	};

	Constructor() {
	    return this.getToken(PhpParser.Constructor, 0);
	};

	Destruct() {
	    return this.getToken(PhpParser.Destruct, 0);
	};

	Wakeup() {
	    return this.getToken(PhpParser.Wakeup, 0);
	};

	Sleep() {
	    return this.getToken(PhpParser.Sleep, 0);
	};

	Autoload() {
	    return this.getToken(PhpParser.Autoload, 0);
	};

	IsSet__() {
	    return this.getToken(PhpParser.IsSet__, 0);
	};

	Unset__() {
	    return this.getToken(PhpParser.Unset__, 0);
	};

	ToString__() {
	    return this.getToken(PhpParser.ToString__, 0);
	};

	Invoke() {
	    return this.getToken(PhpParser.Invoke, 0);
	};

	SetState() {
	    return this.getToken(PhpParser.SetState, 0);
	};

	Clone__() {
	    return this.getToken(PhpParser.Clone__, 0);
	};

	DebugInfo() {
	    return this.getToken(PhpParser.DebugInfo, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterMagicMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitMagicMethod(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_primitiveType;
    }

	BoolType() {
	    return this.getToken(PhpParser.BoolType, 0);
	};

	IntType() {
	    return this.getToken(PhpParser.IntType, 0);
	};

	Int64Type() {
	    return this.getToken(PhpParser.Int64Type, 0);
	};

	DoubleType() {
	    return this.getToken(PhpParser.DoubleType, 0);
	};

	StringType() {
	    return this.getToken(PhpParser.StringType, 0);
	};

	Resource() {
	    return this.getToken(PhpParser.Resource, 0);
	};

	ObjectType() {
	    return this.getToken(PhpParser.ObjectType, 0);
	};

	Array() {
	    return this.getToken(PhpParser.Array, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class CastOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_castOperation;
    }

	BoolType() {
	    return this.getToken(PhpParser.BoolType, 0);
	};

	Int8Cast() {
	    return this.getToken(PhpParser.Int8Cast, 0);
	};

	Int16Cast() {
	    return this.getToken(PhpParser.Int16Cast, 0);
	};

	IntType() {
	    return this.getToken(PhpParser.IntType, 0);
	};

	Int64Type() {
	    return this.getToken(PhpParser.Int64Type, 0);
	};

	UintCast() {
	    return this.getToken(PhpParser.UintCast, 0);
	};

	DoubleCast() {
	    return this.getToken(PhpParser.DoubleCast, 0);
	};

	DoubleType() {
	    return this.getToken(PhpParser.DoubleType, 0);
	};

	FloatCast() {
	    return this.getToken(PhpParser.FloatCast, 0);
	};

	StringType() {
	    return this.getToken(PhpParser.StringType, 0);
	};

	BinaryCast() {
	    return this.getToken(PhpParser.BinaryCast, 0);
	};

	UnicodeCast() {
	    return this.getToken(PhpParser.UnicodeCast, 0);
	};

	Array() {
	    return this.getToken(PhpParser.Array, 0);
	};

	ObjectType() {
	    return this.getToken(PhpParser.ObjectType, 0);
	};

	Resource() {
	    return this.getToken(PhpParser.Resource, 0);
	};

	Unset() {
	    return this.getToken(PhpParser.Unset, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.enterCastOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PhpParserListener ) {
	        listener.exitCastOperation(this);
		}
	}


}




PhpParser.HtmlDocumentContext = HtmlDocumentContext; 
PhpParser.InlineHtmlContext = InlineHtmlContext; 
PhpParser.HtmlElementContext = HtmlElementContext; 
PhpParser.ScriptTextContext = ScriptTextContext; 
PhpParser.PhpBlockContext = PhpBlockContext; 
PhpParser.ImportStatementContext = ImportStatementContext; 
PhpParser.TopStatementContext = TopStatementContext; 
PhpParser.UseDeclarationContext = UseDeclarationContext; 
PhpParser.UseDeclarationContentListContext = UseDeclarationContentListContext; 
PhpParser.UseDeclarationContentContext = UseDeclarationContentContext; 
PhpParser.NamespaceDeclarationContext = NamespaceDeclarationContext; 
PhpParser.NamespaceStatementContext = NamespaceStatementContext; 
PhpParser.FunctionDeclarationContext = FunctionDeclarationContext; 
PhpParser.ClassDeclarationContext = ClassDeclarationContext; 
PhpParser.ClassEntryTypeContext = ClassEntryTypeContext; 
PhpParser.InterfaceListContext = InterfaceListContext; 
PhpParser.TypeParameterListInBracketsContext = TypeParameterListInBracketsContext; 
PhpParser.TypeParameterListContext = TypeParameterListContext; 
PhpParser.TypeParameterWithDefaultsListContext = TypeParameterWithDefaultsListContext; 
PhpParser.TypeParameterDeclContext = TypeParameterDeclContext; 
PhpParser.TypeParameterWithDefaultDeclContext = TypeParameterWithDefaultDeclContext; 
PhpParser.GenericDynamicArgsContext = GenericDynamicArgsContext; 
PhpParser.AttributesContext = AttributesContext; 
PhpParser.AttributeGroupContext = AttributeGroupContext; 
PhpParser.AttributeContext = AttributeContext; 
PhpParser.InnerStatementListContext = InnerStatementListContext; 
PhpParser.InnerStatementContext = InnerStatementContext; 
PhpParser.StatementContext = StatementContext; 
PhpParser.EmptyStatement_Context = EmptyStatement_Context; 
PhpParser.BlockStatementContext = BlockStatementContext; 
PhpParser.IfStatementContext = IfStatementContext; 
PhpParser.ElseIfStatementContext = ElseIfStatementContext; 
PhpParser.ElseIfColonStatementContext = ElseIfColonStatementContext; 
PhpParser.ElseStatementContext = ElseStatementContext; 
PhpParser.ElseColonStatementContext = ElseColonStatementContext; 
PhpParser.WhileStatementContext = WhileStatementContext; 
PhpParser.DoWhileStatementContext = DoWhileStatementContext; 
PhpParser.ForStatementContext = ForStatementContext; 
PhpParser.ForInitContext = ForInitContext; 
PhpParser.ForUpdateContext = ForUpdateContext; 
PhpParser.SwitchStatementContext = SwitchStatementContext; 
PhpParser.SwitchBlockContext = SwitchBlockContext; 
PhpParser.BreakStatementContext = BreakStatementContext; 
PhpParser.ContinueStatementContext = ContinueStatementContext; 
PhpParser.ReturnStatementContext = ReturnStatementContext; 
PhpParser.ExpressionStatementContext = ExpressionStatementContext; 
PhpParser.UnsetStatementContext = UnsetStatementContext; 
PhpParser.ForeachStatementContext = ForeachStatementContext; 
PhpParser.TryCatchFinallyContext = TryCatchFinallyContext; 
PhpParser.CatchClauseContext = CatchClauseContext; 
PhpParser.FinallyStatementContext = FinallyStatementContext; 
PhpParser.ThrowStatementContext = ThrowStatementContext; 
PhpParser.GotoStatementContext = GotoStatementContext; 
PhpParser.DeclareStatementContext = DeclareStatementContext; 
PhpParser.InlineHtmlStatementContext = InlineHtmlStatementContext; 
PhpParser.DeclareListContext = DeclareListContext; 
PhpParser.FormalParameterListContext = FormalParameterListContext; 
PhpParser.FormalParameterContext = FormalParameterContext; 
PhpParser.TypeHintContext = TypeHintContext; 
PhpParser.GlobalStatementContext = GlobalStatementContext; 
PhpParser.GlobalVarContext = GlobalVarContext; 
PhpParser.EchoStatementContext = EchoStatementContext; 
PhpParser.StaticVariableStatementContext = StaticVariableStatementContext; 
PhpParser.ClassStatementContext = ClassStatementContext; 
PhpParser.TraitAdaptationsContext = TraitAdaptationsContext; 
PhpParser.TraitAdaptationStatementContext = TraitAdaptationStatementContext; 
PhpParser.TraitPrecedenceContext = TraitPrecedenceContext; 
PhpParser.TraitAliasContext = TraitAliasContext; 
PhpParser.TraitMethodReferenceContext = TraitMethodReferenceContext; 
PhpParser.BaseCtorCallContext = BaseCtorCallContext; 
PhpParser.MethodBodyContext = MethodBodyContext; 
PhpParser.PropertyModifiersContext = PropertyModifiersContext; 
PhpParser.MemberModifiersContext = MemberModifiersContext; 
PhpParser.VariableInitializerContext = VariableInitializerContext; 
PhpParser.IdentifierInitializerContext = IdentifierInitializerContext; 
PhpParser.GlobalConstantDeclarationContext = GlobalConstantDeclarationContext; 
PhpParser.ExpressionListContext = ExpressionListContext; 
PhpParser.ParenthesesContext = ParenthesesContext; 
PhpParser.ExpressionContext = ExpressionContext; 
PhpParser.AssignableContext = AssignableContext; 
PhpParser.ArrayCreationContext = ArrayCreationContext; 
PhpParser.LambdaFunctionExprContext = LambdaFunctionExprContext; 
PhpParser.MatchExprContext = MatchExprContext; 
PhpParser.MatchItemContext = MatchItemContext; 
PhpParser.NewExprContext = NewExprContext; 
PhpParser.AssignmentOperatorContext = AssignmentOperatorContext; 
PhpParser.YieldExpressionContext = YieldExpressionContext; 
PhpParser.ArrayItemListContext = ArrayItemListContext; 
PhpParser.ArrayItemContext = ArrayItemContext; 
PhpParser.LambdaFunctionUseVarsContext = LambdaFunctionUseVarsContext; 
PhpParser.LambdaFunctionUseVarContext = LambdaFunctionUseVarContext; 
PhpParser.QualifiedStaticTypeRefContext = QualifiedStaticTypeRefContext; 
PhpParser.TypeRefContext = TypeRefContext; 
PhpParser.AnonymousClassContext = AnonymousClassContext; 
PhpParser.IndirectTypeRefContext = IndirectTypeRefContext; 
PhpParser.QualifiedNamespaceNameContext = QualifiedNamespaceNameContext; 
PhpParser.NamespaceNameListContext = NamespaceNameListContext; 
PhpParser.NamespaceNameTailContext = NamespaceNameTailContext; 
PhpParser.QualifiedNamespaceNameListContext = QualifiedNamespaceNameListContext; 
PhpParser.ArgumentsContext = ArgumentsContext; 
PhpParser.ActualArgumentContext = ActualArgumentContext; 
PhpParser.ArgumentNameContext = ArgumentNameContext; 
PhpParser.ConstantInitializerContext = ConstantInitializerContext; 
PhpParser.ConstantContext = ConstantContext; 
PhpParser.LiteralConstantContext = LiteralConstantContext; 
PhpParser.NumericConstantContext = NumericConstantContext; 
PhpParser.ClassConstantContext = ClassConstantContext; 
PhpParser.StringConstantContext = StringConstantContext; 
PhpParser.StringContext = StringContext; 
PhpParser.InterpolatedStringPartContext = InterpolatedStringPartContext; 
PhpParser.ChainListContext = ChainListContext; 
PhpParser.ChainContext = ChainContext; 
PhpParser.ChainOriginContext = ChainOriginContext; 
PhpParser.MemberAccessContext = MemberAccessContext; 
PhpParser.FunctionCallContext = FunctionCallContext; 
PhpParser.FunctionCallNameContext = FunctionCallNameContext; 
PhpParser.ActualArgumentsContext = ActualArgumentsContext; 
PhpParser.ChainBaseContext = ChainBaseContext; 
PhpParser.KeyedFieldNameContext = KeyedFieldNameContext; 
PhpParser.KeyedSimpleFieldNameContext = KeyedSimpleFieldNameContext; 
PhpParser.KeyedVariableContext = KeyedVariableContext; 
PhpParser.SquareCurlyExpressionContext = SquareCurlyExpressionContext; 
PhpParser.AssignmentListContext = AssignmentListContext; 
PhpParser.AssignmentListElementContext = AssignmentListElementContext; 
PhpParser.ModifierContext = ModifierContext; 
PhpParser.IdentifierContext = IdentifierContext; 
PhpParser.MemberModifierContext = MemberModifierContext; 
PhpParser.MagicConstantContext = MagicConstantContext; 
PhpParser.MagicMethodContext = MagicMethodContext; 
PhpParser.PrimitiveTypeContext = PrimitiveTypeContext; 
PhpParser.CastOperationContext = CastOperationContext; 
