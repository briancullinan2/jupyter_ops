// Generated from Resources/Parsers/tinyos_nesc/TinyosParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import TinyosParserListener from './TinyosParserListener.js';
const serializedATN = [4,1,99,989,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,1,0,5,0,160,8,0,10,0,12,0,163,9,0,1,0,3,0,166,8,0,1,0,5,0,169,8,
0,10,0,12,0,172,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
1,4,1,4,3,4,189,8,4,1,5,1,5,1,5,1,6,1,6,1,6,3,6,197,8,6,1,6,3,6,200,8,6,
1,6,1,6,1,7,1,7,1,8,1,8,5,8,208,8,8,10,8,12,8,211,9,8,1,8,1,8,1,9,1,9,3,
9,217,8,9,1,10,1,10,1,10,5,10,222,8,10,10,10,12,10,225,9,10,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,5,10,234,8,10,10,10,12,10,237,9,10,1,10,3,10,240,
8,10,1,11,1,11,1,11,5,11,245,8,11,10,11,12,11,248,9,11,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,5,11,257,8,11,10,11,12,11,260,9,11,1,11,3,11,263,8,11,
1,12,1,12,3,12,267,8,12,1,13,1,13,3,13,271,8,13,1,14,1,14,1,14,1,14,1,15,
1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,5,18,287,8,18,10,18,12,18,290,
9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,3,19,308,8,19,1,20,1,20,1,20,1,20,1,20,5,20,315,8,20,10,20,
12,20,318,9,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,327,8,21,1,22,1,22,
3,22,331,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
1,24,3,24,346,8,24,1,24,1,24,1,24,3,24,351,8,24,1,25,1,25,3,25,355,8,25,
1,25,1,25,1,25,3,25,360,8,25,1,25,1,25,3,25,364,8,25,1,25,1,25,1,25,3,25,
369,8,25,1,25,5,25,372,8,25,10,25,12,25,375,9,25,1,25,1,25,3,25,379,8,25,
1,25,1,25,1,25,3,25,384,8,25,3,25,386,8,25,1,26,1,26,3,26,390,8,26,1,26,
1,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,400,8,28,1,28,1,28,1,28,3,28,405,
8,28,1,28,1,28,3,28,409,8,28,1,28,1,28,1,28,3,28,414,8,28,1,28,5,28,417,
8,28,10,28,12,28,420,9,28,1,28,1,28,3,28,424,8,28,1,28,1,28,1,28,3,28,429,
8,28,3,28,431,8,28,1,29,1,29,3,29,435,8,29,1,29,1,29,3,29,439,8,29,1,30,
1,30,1,30,1,30,1,31,1,31,3,31,447,8,31,1,31,1,31,1,31,3,31,452,8,31,1,31,
1,31,3,31,456,8,31,1,31,1,31,1,31,3,31,461,8,31,1,31,5,31,464,8,31,10,31,
12,31,467,9,31,1,31,1,31,3,31,471,8,31,1,31,1,31,1,31,3,31,476,8,31,3,31,
478,8,31,1,32,1,32,3,32,482,8,32,1,32,1,32,3,32,486,8,32,1,33,1,33,1,33,
1,33,1,34,3,34,493,8,34,1,34,1,34,1,34,3,34,498,8,34,1,34,3,34,501,8,34,
1,34,1,34,1,34,3,34,506,8,34,1,34,5,34,509,8,34,10,34,12,34,512,9,34,1,34,
3,34,515,8,34,1,34,1,34,1,34,3,34,520,8,34,3,34,522,8,34,1,35,1,35,3,35,
526,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,538,8,37,
5,37,540,8,37,10,37,12,37,543,9,37,1,37,1,37,1,37,1,38,1,38,3,38,550,8,38,
1,39,1,39,1,39,1,39,1,39,5,39,557,8,39,10,39,12,39,560,9,39,1,39,1,39,3,
39,564,8,39,1,40,1,40,5,40,568,8,40,10,40,12,40,571,9,40,1,40,5,40,574,8,
40,10,40,12,40,577,9,40,3,40,579,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,596,8,40,1,41,1,41,1,41,1,41,
1,41,3,41,603,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
3,43,616,8,43,1,44,1,44,1,44,1,44,3,44,622,8,44,1,44,3,44,625,8,44,4,44,
627,8,44,11,44,12,44,628,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,639,
8,45,1,46,1,46,1,46,1,46,5,46,645,8,46,10,46,12,46,648,9,46,1,46,1,46,1,
47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,660,8,47,1,48,1,48,1,48,3,48,
665,8,48,1,48,1,48,5,48,669,8,48,10,48,12,48,672,9,48,1,48,1,48,1,48,1,48,
1,48,1,48,5,48,680,8,48,10,48,12,48,683,9,48,1,48,1,48,3,48,687,8,48,1,49,
1,49,1,49,1,50,1,50,1,50,1,50,3,50,696,8,50,1,50,1,50,1,50,1,50,1,50,3,50,
703,8,50,3,50,705,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,714,8,51,
10,51,12,51,717,9,51,1,51,1,51,3,51,721,8,51,1,51,1,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
1,51,5,51,744,8,51,10,51,12,51,747,9,51,1,52,1,52,1,52,1,52,1,52,3,52,754,
8,52,1,53,1,53,1,54,1,54,5,54,760,8,54,10,54,12,54,763,9,54,1,54,1,54,1,
55,1,55,3,55,769,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,778,8,55,3,
55,780,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,3,59,791,8,59,1,
59,3,59,794,8,59,1,59,1,59,1,59,3,59,799,8,59,5,59,801,8,59,10,59,12,59,
804,9,59,1,59,1,59,1,59,1,59,3,59,810,8,59,1,59,1,59,1,59,1,59,5,59,816,
8,59,10,59,12,59,819,9,59,3,59,821,8,59,1,60,1,60,1,60,3,60,826,8,60,1,60,
1,60,1,60,5,60,831,8,60,10,60,12,60,834,9,60,1,61,1,61,1,61,1,61,3,61,840,
8,61,1,61,1,61,1,61,1,61,5,61,846,8,61,10,61,12,61,849,9,61,1,62,1,62,3,
62,853,8,62,1,62,1,62,1,62,3,62,858,8,62,5,62,860,8,62,10,62,12,62,863,9,
62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,3,65,874,8,65,1,65,1,65,
1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,890,8,69,
10,69,12,69,893,9,69,1,70,1,70,1,70,5,70,898,8,70,10,70,12,70,901,9,70,1,
70,1,70,1,70,1,71,3,71,907,8,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,915,8,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,925,8,71,1,72,1,72,1,72,
1,72,1,73,1,73,3,73,933,8,73,5,73,935,8,73,10,73,12,73,938,9,73,1,74,1,74,
1,75,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,
78,1,78,3,78,958,8,78,1,78,3,78,961,8,78,1,78,3,78,964,8,78,1,78,1,78,1,
78,1,78,1,78,1,78,3,78,972,8,78,1,78,1,78,3,78,976,8,78,1,78,3,78,979,8,
78,1,78,3,78,982,8,78,1,78,1,78,1,78,3,78,987,8,78,1,78,0,1,102,79,0,2,4,
6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
140,142,144,146,148,150,152,154,156,0,10,1,0,63,65,2,0,61,62,68,68,1,0,57,
60,1,0,55,56,1,0,92,93,2,0,27,27,48,48,6,0,57,58,63,63,68,68,72,74,78,81,
84,89,7,0,57,58,63,63,68,68,72,74,78,81,84,87,89,89,7,0,1,2,4,4,6,7,26,26,
39,40,42,42,50,50,1,0,84,85,1084,0,161,1,0,0,0,2,176,1,0,0,0,4,180,1,0,0,
0,6,184,1,0,0,0,8,188,1,0,0,0,10,190,1,0,0,0,12,193,1,0,0,0,14,203,1,0,0,
0,16,205,1,0,0,0,18,216,1,0,0,0,20,239,1,0,0,0,22,262,1,0,0,0,24,266,1,0,
0,0,26,270,1,0,0,0,28,272,1,0,0,0,30,276,1,0,0,0,32,278,1,0,0,0,34,283,1,
0,0,0,36,288,1,0,0,0,38,307,1,0,0,0,40,309,1,0,0,0,42,322,1,0,0,0,44,328,
1,0,0,0,46,334,1,0,0,0,48,350,1,0,0,0,50,385,1,0,0,0,52,387,1,0,0,0,54,393,
1,0,0,0,56,430,1,0,0,0,58,432,1,0,0,0,60,440,1,0,0,0,62,477,1,0,0,0,64,479,
1,0,0,0,66,487,1,0,0,0,68,521,1,0,0,0,70,523,1,0,0,0,72,529,1,0,0,0,74,533,
1,0,0,0,76,549,1,0,0,0,78,551,1,0,0,0,80,595,1,0,0,0,82,602,1,0,0,0,84,604,
1,0,0,0,86,615,1,0,0,0,88,617,1,0,0,0,90,638,1,0,0,0,92,640,1,0,0,0,94,659,
1,0,0,0,96,686,1,0,0,0,98,688,1,0,0,0,100,704,1,0,0,0,102,720,1,0,0,0,104,
753,1,0,0,0,106,755,1,0,0,0,108,757,1,0,0,0,110,779,1,0,0,0,112,781,1,0,
0,0,114,783,1,0,0,0,116,785,1,0,0,0,118,820,1,0,0,0,120,825,1,0,0,0,122,
839,1,0,0,0,124,850,1,0,0,0,126,864,1,0,0,0,128,867,1,0,0,0,130,871,1,0,
0,0,132,877,1,0,0,0,134,879,1,0,0,0,136,882,1,0,0,0,138,891,1,0,0,0,140,
894,1,0,0,0,142,924,1,0,0,0,144,926,1,0,0,0,146,936,1,0,0,0,148,939,1,0,
0,0,150,941,1,0,0,0,152,944,1,0,0,0,154,946,1,0,0,0,156,986,1,0,0,0,158,
160,3,2,1,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,
0,0,162,165,1,0,0,0,163,161,1,0,0,0,164,166,3,8,4,0,165,164,1,0,0,0,165,
166,1,0,0,0,166,170,1,0,0,0,167,169,3,4,2,0,168,167,1,0,0,0,169,172,1,0,
0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,172,170,1,0,0,0,173,
174,3,8,4,0,174,175,5,0,0,1,175,1,1,0,0,0,176,177,5,76,0,0,177,178,5,33,
0,0,178,179,3,6,3,0,179,3,1,0,0,0,180,181,5,76,0,0,181,182,5,33,0,0,182,
183,3,6,3,0,183,5,1,0,0,0,184,185,3,118,59,0,185,7,1,0,0,0,186,189,3,10,
5,0,187,189,3,126,63,0,188,186,1,0,0,0,188,187,1,0,0,0,189,9,1,0,0,0,190,
191,3,12,6,0,191,192,3,32,16,0,192,11,1,0,0,0,193,194,5,38,0,0,194,196,3,
14,7,0,195,197,5,80,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,
198,200,5,81,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,
3,16,8,0,202,13,1,0,0,0,203,204,3,118,59,0,204,15,1,0,0,0,205,209,5,82,0,
0,206,208,3,18,9,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,
1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,83,0,0,213,17,1,0,0,0,
214,217,3,20,10,0,215,217,3,22,11,0,216,214,1,0,0,0,216,215,1,0,0,0,217,
19,1,0,0,0,218,219,5,49,0,0,219,223,5,35,0,0,220,222,3,24,12,0,221,220,1,
0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,
223,1,0,0,0,226,240,5,77,0,0,227,228,5,49,0,0,228,235,5,82,0,0,229,230,5,
35,0,0,230,231,3,24,12,0,231,232,5,77,0,0,232,234,1,0,0,0,233,229,1,0,0,
0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,
1,0,0,0,238,240,5,83,0,0,239,218,1,0,0,0,239,227,1,0,0,0,240,21,1,0,0,0,
241,242,5,41,0,0,242,246,5,35,0,0,243,245,3,26,13,0,244,243,1,0,0,0,245,
248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,246,1,0,
0,0,249,263,5,77,0,0,250,251,5,41,0,0,251,258,5,82,0,0,252,253,5,35,0,0,
253,254,3,26,13,0,254,255,5,77,0,0,255,257,1,0,0,0,256,252,1,0,0,0,257,260,
1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,
261,263,5,83,0,0,262,241,1,0,0,0,262,250,1,0,0,0,263,23,1,0,0,0,264,267,
3,28,14,0,265,267,3,30,15,0,266,264,1,0,0,0,266,265,1,0,0,0,267,25,1,0,0,
0,268,271,3,28,14,0,269,271,3,30,15,0,270,268,1,0,0,0,270,269,1,0,0,0,271,
27,1,0,0,0,272,273,3,30,15,0,273,274,5,2,0,0,274,275,3,30,15,0,275,29,1,
0,0,0,276,277,3,118,59,0,277,31,1,0,0,0,278,279,5,32,0,0,279,280,5,82,0,
0,280,281,3,34,17,0,281,282,5,83,0,0,282,33,1,0,0,0,283,284,3,36,18,0,284,
35,1,0,0,0,285,287,3,38,19,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,
0,0,288,289,1,0,0,0,289,37,1,0,0,0,290,288,1,0,0,0,291,308,3,48,24,0,292,
308,3,50,25,0,293,308,3,56,28,0,294,308,3,62,31,0,295,308,3,78,39,0,296,
308,3,74,37,0,297,308,3,84,42,0,298,308,3,88,44,0,299,308,3,92,46,0,300,
308,3,68,34,0,301,308,3,98,49,0,302,308,3,46,23,0,303,308,3,42,21,0,304,
308,3,40,20,0,305,306,5,98,0,0,306,308,6,19,-1,0,307,291,1,0,0,0,307,292,
1,0,0,0,307,293,1,0,0,0,307,294,1,0,0,0,307,295,1,0,0,0,307,296,1,0,0,0,
307,297,1,0,0,0,307,298,1,0,0,0,307,299,1,0,0,0,307,300,1,0,0,0,307,301,
1,0,0,0,307,302,1,0,0,0,307,303,1,0,0,0,307,304,1,0,0,0,307,305,1,0,0,0,
308,39,1,0,0,0,309,310,5,52,0,0,310,311,3,76,38,0,311,312,3,118,59,0,312,
316,5,82,0,0,313,315,3,48,24,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,
0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,5,83,0,0,320,
321,3,48,24,0,321,41,1,0,0,0,322,323,5,7,0,0,323,324,3,76,38,0,324,326,3,
44,22,0,325,327,5,77,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,43,1,0,0,0,
328,330,5,80,0,0,329,331,3,102,51,0,330,329,1,0,0,0,330,331,1,0,0,0,331,
332,1,0,0,0,332,333,5,81,0,0,333,45,1,0,0,0,334,335,5,76,0,0,335,336,5,18,
0,0,336,337,3,76,38,0,337,338,3,118,59,0,338,339,5,82,0,0,339,340,3,48,24,
0,340,341,5,83,0,0,341,342,3,48,24,0,342,47,1,0,0,0,343,345,3,120,60,0,344,
346,5,77,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,351,1,0,0,0,347,348,3,102,
51,0,348,349,5,77,0,0,349,351,1,0,0,0,350,343,1,0,0,0,350,347,1,0,0,0,351,
49,1,0,0,0,352,354,5,22,0,0,353,355,5,50,0,0,354,353,1,0,0,0,354,355,1,0,
0,0,355,356,1,0,0,0,356,357,3,76,38,0,357,359,3,52,26,0,358,360,3,54,27,
0,359,358,1,0,0,0,359,360,1,0,0,0,360,386,1,0,0,0,361,363,5,22,0,0,362,364,
5,50,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,3,76,38,
0,366,368,3,52,26,0,367,369,3,54,27,0,368,367,1,0,0,0,368,369,1,0,0,0,369,
373,1,0,0,0,370,372,3,38,19,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,
0,0,0,373,374,1,0,0,0,374,383,1,0,0,0,375,373,1,0,0,0,376,378,5,22,0,0,377,
379,5,50,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,3,76,
38,0,381,382,3,54,27,0,382,384,1,0,0,0,383,376,1,0,0,0,383,384,1,0,0,0,384,
386,1,0,0,0,385,352,1,0,0,0,385,361,1,0,0,0,386,51,1,0,0,0,387,389,5,80,
0,0,388,390,3,102,51,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,
392,5,81,0,0,392,53,1,0,0,0,393,394,5,82,0,0,394,395,3,36,18,0,395,396,5,
83,0,0,396,55,1,0,0,0,397,399,5,47,0,0,398,400,5,50,0,0,399,398,1,0,0,0,
399,400,1,0,0,0,400,401,1,0,0,0,401,402,3,76,38,0,402,404,3,58,29,0,403,
405,3,60,30,0,404,403,1,0,0,0,404,405,1,0,0,0,405,431,1,0,0,0,406,408,5,
47,0,0,407,409,5,50,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,
410,411,3,76,38,0,411,413,3,58,29,0,412,414,3,60,30,0,413,412,1,0,0,0,413,
414,1,0,0,0,414,418,1,0,0,0,415,417,3,38,19,0,416,415,1,0,0,0,417,420,1,
0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,428,1,0,0,0,420,418,1,0,0,0,421,
423,5,47,0,0,422,424,5,50,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,
0,0,0,425,426,3,76,38,0,426,427,3,60,30,0,427,429,1,0,0,0,428,421,1,0,0,
0,428,429,1,0,0,0,429,431,1,0,0,0,430,397,1,0,0,0,430,406,1,0,0,0,431,57,
1,0,0,0,432,434,5,80,0,0,433,435,3,102,51,0,434,433,1,0,0,0,434,435,1,0,
0,0,435,436,1,0,0,0,436,438,5,81,0,0,437,439,5,77,0,0,438,437,1,0,0,0,438,
439,1,0,0,0,439,59,1,0,0,0,440,441,5,82,0,0,441,442,3,36,18,0,442,443,5,
83,0,0,443,61,1,0,0,0,444,446,5,45,0,0,445,447,5,50,0,0,446,445,1,0,0,0,
446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,76,38,0,449,451,3,64,32,0,450,
452,3,66,33,0,451,450,1,0,0,0,451,452,1,0,0,0,452,478,1,0,0,0,453,455,5,
45,0,0,454,456,5,50,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,
457,458,3,76,38,0,458,460,3,64,32,0,459,461,3,66,33,0,460,459,1,0,0,0,460,
461,1,0,0,0,461,465,1,0,0,0,462,464,3,38,19,0,463,462,1,0,0,0,464,467,1,
0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,475,1,0,0,0,467,465,1,0,0,0,468,
470,5,45,0,0,469,471,5,50,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,
0,0,0,472,473,3,76,38,0,473,474,3,66,33,0,474,476,1,0,0,0,475,468,1,0,0,
0,475,476,1,0,0,0,476,478,1,0,0,0,477,444,1,0,0,0,477,453,1,0,0,0,478,63,
1,0,0,0,479,481,5,80,0,0,480,482,3,102,51,0,481,480,1,0,0,0,481,482,1,0,
0,0,482,483,1,0,0,0,483,485,5,81,0,0,484,486,5,77,0,0,485,484,1,0,0,0,485,
486,1,0,0,0,486,65,1,0,0,0,487,488,5,82,0,0,488,489,3,36,18,0,489,490,5,
83,0,0,490,67,1,0,0,0,491,493,5,50,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,
494,1,0,0,0,494,495,3,76,38,0,495,497,3,70,35,0,496,498,3,72,36,0,497,496,
1,0,0,0,497,498,1,0,0,0,498,522,1,0,0,0,499,501,5,50,0,0,500,499,1,0,0,0,
500,501,1,0,0,0,501,502,1,0,0,0,502,503,3,76,38,0,503,505,3,70,35,0,504,
506,3,72,36,0,505,504,1,0,0,0,505,506,1,0,0,0,506,510,1,0,0,0,507,509,3,
38,19,0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,
511,519,1,0,0,0,512,510,1,0,0,0,513,515,5,50,0,0,514,513,1,0,0,0,514,515,
1,0,0,0,515,516,1,0,0,0,516,517,3,76,38,0,517,518,3,72,36,0,518,520,1,0,
0,0,519,514,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,492,1,0,0,0,521,
500,1,0,0,0,522,69,1,0,0,0,523,525,5,80,0,0,524,526,3,102,51,0,525,524,1,
0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,528,5,81,0,0,528,71,1,0,0,0,529,
530,5,82,0,0,530,531,3,36,18,0,531,532,5,83,0,0,532,73,1,0,0,0,533,534,5,
21,0,0,534,541,5,82,0,0,535,537,3,102,51,0,536,538,5,88,0,0,537,536,1,0,
0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,535,1,0,0,0,540,543,1,0,0,0,541,
539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,541,1,0,0,0,544,545,5,83,
0,0,545,546,5,77,0,0,546,75,1,0,0,0,547,550,3,118,59,0,548,550,3,122,61,
0,549,547,1,0,0,0,549,548,1,0,0,0,550,77,1,0,0,0,551,552,5,31,0,0,552,558,
3,80,40,0,553,554,5,20,0,0,554,555,5,31,0,0,555,557,3,80,40,0,556,553,1,
0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,563,1,0,0,0,560,
558,1,0,0,0,561,562,5,20,0,0,562,564,3,82,41,0,563,561,1,0,0,0,563,564,1,
0,0,0,564,79,1,0,0,0,565,578,5,80,0,0,566,568,3,122,61,0,567,566,1,0,0,0,
568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,579,1,0,0,0,571,569,
1,0,0,0,572,574,3,102,51,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,
0,575,576,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,578,569,1,0,0,0,578,575,
1,0,0,0,579,580,1,0,0,0,580,581,5,81,0,0,581,596,3,82,41,0,582,583,5,80,
0,0,583,584,5,81,0,0,584,596,3,82,41,0,585,586,5,80,0,0,586,587,3,102,51,
0,587,588,5,81,0,0,588,589,3,82,41,0,589,596,1,0,0,0,590,591,5,80,0,0,591,
592,3,106,53,0,592,593,5,81,0,0,593,594,3,82,41,0,594,596,1,0,0,0,595,565,
1,0,0,0,595,582,1,0,0,0,595,585,1,0,0,0,595,590,1,0,0,0,596,81,1,0,0,0,597,
598,5,82,0,0,598,599,3,36,18,0,599,600,5,83,0,0,600,603,1,0,0,0,601,603,
3,38,19,0,602,597,1,0,0,0,602,601,1,0,0,0,603,83,1,0,0,0,604,605,5,51,0,
0,605,606,5,80,0,0,606,607,3,102,51,0,607,608,5,81,0,0,608,609,3,86,43,0,
609,85,1,0,0,0,610,611,5,82,0,0,611,612,3,36,18,0,612,613,5,83,0,0,613,616,
1,0,0,0,614,616,3,38,19,0,615,610,1,0,0,0,615,614,1,0,0,0,616,87,1,0,0,0,
617,618,5,29,0,0,618,626,5,80,0,0,619,622,3,102,51,0,620,622,3,120,60,0,
621,619,1,0,0,0,621,620,1,0,0,0,622,624,1,0,0,0,623,625,5,77,0,0,624,623,
1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,621,1,0,0,0,627,628,1,0,0,0,
628,626,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,5,81,0,0,631,632,
3,90,45,0,632,89,1,0,0,0,633,634,5,82,0,0,634,635,3,36,18,0,635,636,5,83,
0,0,636,639,1,0,0,0,637,639,3,38,19,0,638,633,1,0,0,0,638,637,1,0,0,0,639,
91,1,0,0,0,640,641,5,46,0,0,641,642,3,94,47,0,642,646,5,82,0,0,643,645,3,
96,48,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,
647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,83,0,0,650,93,1,0,0,0,651,652,
5,80,0,0,652,653,3,102,51,0,653,654,5,81,0,0,654,660,1,0,0,0,655,656,5,80,
0,0,656,657,3,106,53,0,657,658,5,81,0,0,658,660,1,0,0,0,659,651,1,0,0,0,
659,655,1,0,0,0,660,95,1,0,0,0,661,664,5,8,0,0,662,665,3,102,51,0,663,665,
3,120,60,0,664,662,1,0,0,0,664,663,1,0,0,0,665,666,1,0,0,0,666,670,5,71,
0,0,667,669,3,38,19,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,
671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,674,5,6,0,0,674,675,5,77,
0,0,675,687,1,0,0,0,676,677,5,19,0,0,677,681,5,71,0,0,678,680,3,38,19,0,
679,678,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,684,
1,0,0,0,683,681,1,0,0,0,684,685,5,6,0,0,685,687,5,77,0,0,686,661,1,0,0,0,
686,676,1,0,0,0,687,97,1,0,0,0,688,689,5,4,0,0,689,690,3,100,50,0,690,99,
1,0,0,0,691,695,5,82,0,0,692,696,3,48,24,0,693,696,3,78,39,0,694,696,3,68,
34,0,695,692,1,0,0,0,695,693,1,0,0,0,695,694,1,0,0,0,696,697,1,0,0,0,697,
698,5,83,0,0,698,705,1,0,0,0,699,703,3,48,24,0,700,703,3,78,39,0,701,703,
3,68,34,0,702,699,1,0,0,0,702,700,1,0,0,0,702,701,1,0,0,0,703,705,1,0,0,
0,704,691,1,0,0,0,704,702,1,0,0,0,705,101,1,0,0,0,706,707,6,51,-1,0,707,
708,5,62,0,0,708,721,3,102,51,11,709,710,5,67,0,0,710,721,3,102,51,10,711,
715,3,104,52,0,712,714,3,104,52,0,713,712,1,0,0,0,714,717,1,0,0,0,715,713,
1,0,0,0,715,716,1,0,0,0,716,721,1,0,0,0,717,715,1,0,0,0,718,721,3,118,59,
0,719,721,3,108,54,0,720,706,1,0,0,0,720,709,1,0,0,0,720,711,1,0,0,0,720,
718,1,0,0,0,720,719,1,0,0,0,721,745,1,0,0,0,722,723,10,12,0,0,723,724,5,
66,0,0,724,744,3,102,51,13,725,726,10,9,0,0,726,727,7,0,0,0,727,744,3,102,
51,10,728,729,10,8,0,0,729,730,7,1,0,0,730,744,3,102,51,9,731,732,10,7,0,
0,732,733,7,2,0,0,733,744,3,102,51,8,734,735,10,6,0,0,735,736,7,3,0,0,736,
744,3,102,51,7,737,738,10,5,0,0,738,739,5,54,0,0,739,744,3,102,51,6,740,
741,10,4,0,0,741,742,5,53,0,0,742,744,3,102,51,5,743,722,1,0,0,0,743,725,
1,0,0,0,743,728,1,0,0,0,743,731,1,0,0,0,743,734,1,0,0,0,743,737,1,0,0,0,
743,740,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,103,
1,0,0,0,747,745,1,0,0,0,748,754,5,94,0,0,749,754,5,91,0,0,750,754,7,4,0,
0,751,754,7,5,0,0,752,754,5,99,0,0,753,748,1,0,0,0,753,749,1,0,0,0,753,750,
1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,105,1,0,0,0,755,756,5,98,0,0,
756,107,1,0,0,0,757,761,5,82,0,0,758,760,3,110,55,0,759,758,1,0,0,0,760,
763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,761,1,0,
0,0,764,765,5,83,0,0,765,109,1,0,0,0,766,768,3,104,52,0,767,769,5,88,0,0,
768,767,1,0,0,0,768,769,1,0,0,0,769,780,1,0,0,0,770,771,5,82,0,0,771,772,
3,104,52,0,772,773,5,88,0,0,773,774,3,104,52,0,774,775,5,83,0,0,775,777,
1,0,0,0,776,778,5,88,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,
779,766,1,0,0,0,779,770,1,0,0,0,780,111,1,0,0,0,781,782,7,6,0,0,782,113,
1,0,0,0,783,784,7,7,0,0,784,115,1,0,0,0,785,786,7,8,0,0,786,117,1,0,0,0,
787,791,3,104,52,0,788,791,3,106,53,0,789,791,3,112,56,0,790,787,1,0,0,0,
790,788,1,0,0,0,790,789,1,0,0,0,791,802,1,0,0,0,792,794,5,89,0,0,793,792,
1,0,0,0,793,794,1,0,0,0,794,798,1,0,0,0,795,799,3,104,52,0,796,799,3,106,
53,0,797,799,3,112,56,0,798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,0,0,0,
799,801,1,0,0,0,800,793,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,
1,0,0,0,803,821,1,0,0,0,804,802,1,0,0,0,805,810,3,104,52,0,806,810,3,106,
53,0,807,810,3,112,56,0,808,810,3,116,58,0,809,805,1,0,0,0,809,806,1,0,0,
0,809,807,1,0,0,0,809,808,1,0,0,0,810,817,1,0,0,0,811,816,3,104,52,0,812,
816,3,106,53,0,813,816,3,112,56,0,814,816,3,116,58,0,815,811,1,0,0,0,815,
812,1,0,0,0,815,813,1,0,0,0,815,814,1,0,0,0,816,819,1,0,0,0,817,815,1,0,
0,0,817,818,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,820,790,1,0,0,0,820,
809,1,0,0,0,821,119,1,0,0,0,822,826,3,104,52,0,823,826,3,106,53,0,824,826,
3,112,56,0,825,822,1,0,0,0,825,823,1,0,0,0,825,824,1,0,0,0,826,832,1,0,0,
0,827,831,3,104,52,0,828,831,3,106,53,0,829,831,3,112,56,0,830,827,1,0,0,
0,830,828,1,0,0,0,830,829,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,
1,0,0,0,833,121,1,0,0,0,834,832,1,0,0,0,835,840,3,104,52,0,836,840,3,106,
53,0,837,840,3,112,56,0,838,840,3,116,58,0,839,835,1,0,0,0,839,836,1,0,0,
0,839,837,1,0,0,0,839,838,1,0,0,0,840,847,1,0,0,0,841,846,3,104,52,0,842,
846,3,106,53,0,843,846,3,112,56,0,844,846,3,116,58,0,845,841,1,0,0,0,845,
842,1,0,0,0,845,843,1,0,0,0,845,844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,
0,0,847,848,1,0,0,0,848,123,1,0,0,0,849,847,1,0,0,0,850,861,3,104,52,0,851,
853,5,89,0,0,852,851,1,0,0,0,852,853,1,0,0,0,853,857,1,0,0,0,854,858,3,112,
56,0,855,858,3,106,53,0,856,858,3,104,52,0,857,854,1,0,0,0,857,855,1,0,0,
0,857,856,1,0,0,0,858,860,1,0,0,0,859,852,1,0,0,0,860,863,1,0,0,0,861,859,
1,0,0,0,861,862,1,0,0,0,862,125,1,0,0,0,863,861,1,0,0,0,864,865,3,128,64,
0,865,866,3,134,67,0,866,127,1,0,0,0,867,868,5,10,0,0,868,869,3,132,66,0,
869,870,3,130,65,0,870,129,1,0,0,0,871,873,5,82,0,0,872,874,3,102,51,0,873,
872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,83,0,0,876,131,1,0,
0,0,877,878,3,118,59,0,878,133,1,0,0,0,879,880,5,32,0,0,880,881,3,136,68,
0,881,135,1,0,0,0,882,883,5,82,0,0,883,884,3,138,69,0,884,885,5,83,0,0,885,
137,1,0,0,0,886,890,3,144,72,0,887,890,3,150,75,0,888,890,3,140,70,0,889,
886,1,0,0,0,889,887,1,0,0,0,889,888,1,0,0,0,890,893,1,0,0,0,891,889,1,0,
0,0,891,892,1,0,0,0,892,139,1,0,0,0,893,891,1,0,0,0,894,895,5,76,0,0,895,
899,5,31,0,0,896,898,3,142,71,0,897,896,1,0,0,0,898,901,1,0,0,0,899,897,
1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,0,901,899,1,0,0,0,902,903,5,76,0,0,
903,904,5,25,0,0,904,141,1,0,0,0,905,907,5,17,0,0,906,905,1,0,0,0,906,907,
1,0,0,0,907,908,1,0,0,0,908,909,3,118,59,0,909,910,3,144,72,0,910,925,1,
0,0,0,911,912,5,76,0,0,912,914,5,24,0,0,913,915,5,17,0,0,914,913,1,0,0,0,
914,915,1,0,0,0,915,916,1,0,0,0,916,917,3,118,59,0,917,918,3,144,72,0,918,
925,1,0,0,0,919,920,5,76,0,0,920,921,5,20,0,0,921,922,5,76,0,0,922,923,5,
26,0,0,923,925,3,118,59,0,924,906,1,0,0,0,924,911,1,0,0,0,924,919,1,0,0,
0,925,143,1,0,0,0,926,927,5,13,0,0,927,928,3,146,73,0,928,929,5,77,0,0,929,
145,1,0,0,0,930,932,3,148,74,0,931,933,5,88,0,0,932,931,1,0,0,0,932,933,
1,0,0,0,933,935,1,0,0,0,934,930,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,
936,937,1,0,0,0,937,147,1,0,0,0,938,936,1,0,0,0,939,940,3,156,78,0,940,149,
1,0,0,0,941,942,3,152,76,0,942,943,5,77,0,0,943,151,1,0,0,0,944,945,3,154,
77,0,945,153,1,0,0,0,946,947,3,156,78,0,947,948,7,9,0,0,948,949,3,156,78,
0,949,155,1,0,0,0,950,987,3,104,52,0,951,987,3,124,62,0,952,953,5,39,0,0,
953,987,3,104,52,0,954,955,5,39,0,0,955,957,3,104,52,0,956,958,5,80,0,0,
957,956,1,0,0,0,957,958,1,0,0,0,958,960,1,0,0,0,959,961,3,104,52,0,960,959,
1,0,0,0,960,961,1,0,0,0,961,963,1,0,0,0,962,964,5,81,0,0,963,962,1,0,0,0,
963,964,1,0,0,0,964,987,1,0,0,0,965,966,5,39,0,0,966,967,3,104,52,0,967,
968,5,2,0,0,968,969,3,104,52,0,969,987,1,0,0,0,970,972,5,39,0,0,971,970,
1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,975,3,104,52,0,974,976,5,80,
0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,978,1,0,0,0,977,979,3,104,52,0,978,
977,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,982,5,81,0,0,981,980,1,0,
0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,5,2,0,0,984,985,3,104,52,0,985,
987,1,0,0,0,986,950,1,0,0,0,986,951,1,0,0,0,986,952,1,0,0,0,986,954,1,0,
0,0,986,965,1,0,0,0,986,971,1,0,0,0,987,157,1,0,0,0,128,161,165,170,188,
196,199,209,216,223,235,239,246,258,262,266,270,288,307,316,326,330,345,
350,354,359,363,368,373,378,383,385,389,399,404,408,413,418,423,428,430,
434,438,446,451,455,460,465,470,475,477,481,485,492,497,500,505,510,514,
519,521,525,537,541,549,558,563,569,575,578,595,602,615,621,624,628,638,
646,659,664,670,681,686,695,702,704,715,720,743,745,753,761,768,777,779,
790,793,798,802,809,815,817,820,825,830,832,839,845,847,852,857,861,873,
889,891,899,906,914,924,932,936,957,960,963,971,975,978,981,986];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class TinyosParser extends antlr4.Parser {

    static grammarFileName = "TinyosParser.g4";
    static literalNames = [ null, "'abstract'", "'as'", "'async'", "'atomic'", 
                            "'boolean'", "'break'", "'call'", "'case'", 
                            "'char'", "'configuration'", "'command'", "'component'", 
                            "'components'", "'continue'", "'do'", "'double'", 
                            "'defined'", "'define'", "'default'", "'else'", 
                            "'enum'", "'event'", "'extends'", "'elif'", 
                            "'endif'", "'error'", "'false'", "'final'", 
                            "'for'", "'generic'", "'if'", "'implementation'", 
                            "'include'", "'includes'", "'interface'", "'log'", 
                            "'long'", "'module'", "'new'", "'post'", "'provides'", 
                            "'return'", "'short'", "'signal'", "'static'", 
                            "'switch'", "'task'", "'true'", "'uses'", "'void'", 
                            "'while'", "'typedef'", "'||'", "'&&'", "'=='", 
                            "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
                            "'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "'='", 
                            "'~'", "'?'", "':'", "'++'", "'--'", "'&'", 
                            "'|'", "'#'", "';'", "'['", "']'", "'('", "')'", 
                            "'{'", "'}'", "'->'", "'<-'", "'::'", "'@'", 
                            "','", "'.'", "'_'" ];
    static symbolicNames = [ null, "ABSTRACT", "AS", "ASYNC", "ATOMIC", 
                             "BOOLEAN", "BREAK", "CALL", "CASE", "CHAR", 
                             "COFIGURATION", "COMMAND", "COMPONENT", "COMPONENTS", 
                             "CONTINUE", "DO", "DOUBLE", "DEFINED", "DEFINE", 
                             "DEFAULT", "ELSE", "ENUM", "EVENT", "EXTENDS", 
                             "ELIF", "ENDIF", "ERROR", "FALSE", "FINAL", 
                             "FOR", "GENERIC", "IF", "IMPLEMENTATION", "INCLUDE", 
                             "INCLUDES", "INTERFACE", "LOG", "LONG", "MODULE", 
                             "NEW", "POST", "PROVIDES", "RETURN", "SHORT", 
                             "SIGNAL", "STATIC", "SWITCH", "TASK", "TRUE", 
                             "USES", "VOID", "WHILE", "TYPEDEF", "OR", "AND", 
                             "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", 
                             "MINUS", "MULT", "DIV", "MOD", "POW", "NOT", 
                             "ASSIGN", "TILDE", "QUESTION", "COLON", "INC", 
                             "DEC", "BITAND", "BITOR", "HASHTAG", "SCOL", 
                             "OBRACK", "CBRACK", "OPAR", "CPAR", "OBRACE", 
                             "CBRACE", "FORWARDARROW", "BACKARROW", "COLONCOLON", 
                             "AT", "COMMA", "DOT", "UNDERSCORE", "ID", "INT", 
                             "FLOAT", "STRING", "COMMENT", "LINE_COMMENT", 
                             "SPACE", "OTHER", "HEX" ];
    static ruleNames = [ "compilationUnit", "includeDeclarationModule", 
                         "includeDeclarationConfiguration", "qualifiedName", 
                         "componentDeclaration", "moduleDeclaration", "moduleSignature", 
                         "moduleName", "moduleSignatureBody", "usesOrProvides", 
                         "usesState", "providesState", "usesInterfaceDescription", 
                         "providesInterfaceDescription", "interfaceNameAs", 
                         "interfaceName", "moduleImplementation", "moduleImplementationBody", 
                         "block", "stat", "packet_define", "call_stat", 
                         "call_condition_block", "define_stat", "statement", 
                         "event_stat", "event_condition_block", "event_stat_block", 
                         "task_stat", "task_condition_block", "task_stat_block", 
                         "static_stat", "static_condition_block", "static_stat_block", 
                         "other_stat", "other_condition_block", "other_stat_block", 
                         "enum_stat", "common_name", "if_stat", "if_condition_block", 
                         "if_stat_block", "while_stat", "while_stat_block", 
                         "for_stat", "for_stat_block", "switch_stat", "switch_condition_block", 
                         "switch_stat_block", "atomic_stat", "atomic_stat_block", 
                         "expr", "atom", "symbol", "singleDoubleArray", 
                         "arrayElement", "chars", "chars_no_comma", "reservedwords", 
                         "singleLine", "anystatement", "name_or_reserved", 
                         "name_with_char", "configurationDeclaration", "configurationSignature", 
                         "configurationSignatureBody", "configurationName", 
                         "configurationImplementation", "configurationImplementationBody", 
                         "configurationImplementationDescription", "platformDefinition", 
                         "platformDefinitionDescription", "componentsDefinition", 
                         "componentsDefinitionDetails", "componentsDefinitionName", 
                         "componentsWiring", "wiring", "wiringName", "componentsName" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = TinyosParser.ruleNames;
        this.literalNames = TinyosParser.literalNames;
        this.symbolicNames = TinyosParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 51:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 12);
    		case 1:
    			return this.precpred(this._ctx, 9);
    		case 2:
    			return this.precpred(this._ctx, 8);
    		case 3:
    			return this.precpred(this._ctx, 7);
    		case 4:
    			return this.precpred(this._ctx, 6);
    		case 5:
    			return this.precpred(this._ctx, 5);
    		case 6:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, TinyosParser.RULE_compilationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 161;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 158;
	                this.includeDeclarationModule(); 
	            }
	            this.state = 163;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 165;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 164;
	            this.componentDeclaration();

	        }
	        this.state = 170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TinyosParser.HASHTAG) {
	            this.state = 167;
	            this.includeDeclarationConfiguration();
	            this.state = 172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 173;
	        this.componentDeclaration();
	        this.state = 174;
	        this.match(TinyosParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includeDeclarationModule() {
	    let localctx = new IncludeDeclarationModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, TinyosParser.RULE_includeDeclarationModule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 176;
	        this.match(TinyosParser.HASHTAG);
	        this.state = 177;
	        this.match(TinyosParser.INCLUDE);
	        this.state = 178;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includeDeclarationConfiguration() {
	    let localctx = new IncludeDeclarationConfigurationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, TinyosParser.RULE_includeDeclarationConfiguration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        this.match(TinyosParser.HASHTAG);
	        this.state = 181;
	        this.match(TinyosParser.INCLUDE);
	        this.state = 182;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, TinyosParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 184;
	        this.singleLine();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentDeclaration() {
	    let localctx = new ComponentDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, TinyosParser.RULE_componentDeclaration);
	    try {
	        this.state = 188;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.MODULE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 186;
	            this.moduleDeclaration();
	            break;
	        case TinyosParser.COFIGURATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 187;
	            this.configurationDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclaration() {
	    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, TinyosParser.RULE_moduleDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 190;
	        this.moduleSignature();
	        this.state = 191;
	        this.moduleImplementation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleSignature() {
	    let localctx = new ModuleSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, TinyosParser.RULE_moduleSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(TinyosParser.MODULE);
	        this.state = 194;
	        this.moduleName();
	        this.state = 196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TinyosParser.OPAR) {
	            this.state = 195;
	            this.match(TinyosParser.OPAR);
	        }

	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TinyosParser.CPAR) {
	            this.state = 198;
	            this.match(TinyosParser.CPAR);
	        }

	        this.state = 201;
	        this.moduleSignatureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleName() {
	    let localctx = new ModuleNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, TinyosParser.RULE_moduleName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203;
	        this.singleLine();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleSignatureBody() {
	    let localctx = new ModuleSignatureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, TinyosParser.RULE_moduleSignatureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205;
	        this.match(TinyosParser.OBRACE);
	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TinyosParser.PROVIDES || _la===TinyosParser.USES) {
	            this.state = 206;
	            this.usesOrProvides();
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usesOrProvides() {
	    let localctx = new UsesOrProvidesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, TinyosParser.RULE_usesOrProvides);
	    try {
	        this.state = 216;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.USES:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 214;
	            this.usesState();
	            break;
	        case TinyosParser.PROVIDES:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 215;
	            this.providesState();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usesState() {
	    let localctx = new UsesStateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, TinyosParser.RULE_usesState);
	    var _la = 0; // Token type
	    try {
	        this.state = 239;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 218;
	            this.match(TinyosParser.USES);
	            this.state = 219;
	            this.match(TinyosParser.INTERFACE);
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	                this.state = 220;
	                this.usesInterfaceDescription();
	                this.state = 225;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 226;
	            this.match(TinyosParser.SCOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 227;
	            this.match(TinyosParser.USES);
	            this.state = 228;
	            this.match(TinyosParser.OBRACE);
	            this.state = 235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===TinyosParser.INTERFACE) {
	                this.state = 229;
	                this.match(TinyosParser.INTERFACE);
	                this.state = 230;
	                this.usesInterfaceDescription();
	                this.state = 231;
	                this.match(TinyosParser.SCOL);
	                this.state = 237;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 238;
	            this.match(TinyosParser.CBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	providesState() {
	    let localctx = new ProvidesStateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, TinyosParser.RULE_providesState);
	    var _la = 0; // Token type
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 241;
	            this.match(TinyosParser.PROVIDES);
	            this.state = 242;
	            this.match(TinyosParser.INTERFACE);
	            this.state = 246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	                this.state = 243;
	                this.providesInterfaceDescription();
	                this.state = 248;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 249;
	            this.match(TinyosParser.SCOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 250;
	            this.match(TinyosParser.PROVIDES);
	            this.state = 251;
	            this.match(TinyosParser.OBRACE);
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===TinyosParser.INTERFACE) {
	                this.state = 252;
	                this.match(TinyosParser.INTERFACE);
	                this.state = 253;
	                this.providesInterfaceDescription();
	                this.state = 254;
	                this.match(TinyosParser.SCOL);
	                this.state = 260;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 261;
	            this.match(TinyosParser.CBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usesInterfaceDescription() {
	    let localctx = new UsesInterfaceDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, TinyosParser.RULE_usesInterfaceDescription);
	    try {
	        this.state = 266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 264;
	            this.interfaceNameAs();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 265;
	            this.interfaceName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	providesInterfaceDescription() {
	    let localctx = new ProvidesInterfaceDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, TinyosParser.RULE_providesInterfaceDescription);
	    try {
	        this.state = 270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 268;
	            this.interfaceNameAs();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 269;
	            this.interfaceName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceNameAs() {
	    let localctx = new InterfaceNameAsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, TinyosParser.RULE_interfaceNameAs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 272;
	        this.interfaceName();
	        this.state = 273;
	        this.match(TinyosParser.AS);
	        this.state = 274;
	        this.interfaceName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceName() {
	    let localctx = new InterfaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, TinyosParser.RULE_interfaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        this.singleLine();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleImplementation() {
	    let localctx = new ModuleImplementationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, TinyosParser.RULE_moduleImplementation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this.match(TinyosParser.IMPLEMENTATION);
	        this.state = 279;
	        this.match(TinyosParser.OBRACE);
	        this.state = 280;
	        this.moduleImplementationBody();
	        this.state = 281;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleImplementationBody() {
	    let localctx = new ModuleImplementationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, TinyosParser.RULE_moduleImplementationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, TinyosParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ENUM) | (1 << TinyosParser.EVENT) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE) | (1 << TinyosParser.FOR) | (1 << TinyosParser.IF))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.STATIC - 39)) | (1 << (TinyosParser.SWITCH - 39)) | (1 << (TinyosParser.TASK - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.WHILE - 39)) | (1 << (TinyosParser.TYPEDEF - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MINUS - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.NOT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.HASHTAG - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.OBRACE - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	            this.state = 285;
	            this.stat();
	            this.state = 290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stat() {
	    let localctx = new StatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, TinyosParser.RULE_stat);
	    try {
	        this.state = 307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 291;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 292;
	            this.event_stat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 293;
	            this.task_stat();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 294;
	            this.static_stat();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 295;
	            this.if_stat();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 296;
	            this.enum_stat();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 297;
	            this.while_stat();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 298;
	            this.for_stat();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 299;
	            this.switch_stat();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 300;
	            this.other_stat();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 301;
	            this.atomic_stat();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 302;
	            this.define_stat();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 303;
	            this.call_stat();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 304;
	            this.packet_define();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 305;
	            localctx._OTHER = this.match(TinyosParser.OTHER);
	            System.err.println("unknown char: " + (localctx._OTHER===null ? null : localctx._OTHER.text));
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packet_define() {
	    let localctx = new Packet_defineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, TinyosParser.RULE_packet_define);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(TinyosParser.TYPEDEF);
	        this.state = 310;
	        this.common_name();
	        this.state = 311;
	        this.singleLine();
	        this.state = 312;
	        this.match(TinyosParser.OBRACE);
	        this.state = 316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MINUS - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.NOT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.OBRACE - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	            this.state = 313;
	            this.statement();
	            this.state = 318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 319;
	        this.match(TinyosParser.CBRACE);
	        this.state = 320;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_stat() {
	    let localctx = new Call_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, TinyosParser.RULE_call_stat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.match(TinyosParser.CALL);
	        this.state = 323;
	        this.common_name();
	        this.state = 324;
	        this.call_condition_block();
	        this.state = 326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TinyosParser.SCOL) {
	            this.state = 325;
	            this.match(TinyosParser.SCOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_condition_block() {
	    let localctx = new Call_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, TinyosParser.RULE_call_condition_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this.match(TinyosParser.OPAR);
	        this.state = 330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 329;
	            this.expr(0);

	        }
	        this.state = 332;
	        this.match(TinyosParser.CPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define_stat() {
	    let localctx = new Define_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, TinyosParser.RULE_define_stat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 334;
	        this.match(TinyosParser.HASHTAG);
	        this.state = 335;
	        this.match(TinyosParser.DEFINE);
	        this.state = 336;
	        this.common_name();
	        this.state = 337;
	        this.singleLine();
	        this.state = 338;
	        this.match(TinyosParser.OBRACE);
	        this.state = 339;
	        this.statement();
	        this.state = 340;
	        this.match(TinyosParser.CBRACE);
	        this.state = 341;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, TinyosParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 343;
	            this.anystatement();
	            this.state = 345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.SCOL) {
	                this.state = 344;
	                this.match(TinyosParser.SCOL);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 347;
	            this.expr(0);
	            this.state = 348;
	            this.match(TinyosParser.SCOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_stat() {
	    let localctx = new Event_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, TinyosParser.RULE_event_stat);
	    try {
	        this.state = 385;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 352;
	            this.match(TinyosParser.EVENT);
	            this.state = 354;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 353;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 356;
	            this.common_name();
	            this.state = 357;
	            this.event_condition_block();
	            this.state = 359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	            if(la_===1) {
	                this.state = 358;
	                this.event_stat_block();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 361;
	            this.match(TinyosParser.EVENT);
	            this.state = 363;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            if(la_===1) {
	                this.state = 362;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 365;
	            this.common_name();
	            this.state = 366;
	            this.event_condition_block();
	            this.state = 368;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            if(la_===1) {
	                this.state = 367;
	                this.event_stat_block();

	            }
	            this.state = 373;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 370;
	                    this.stat(); 
	                }
	                this.state = 375;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	            }

	            this.state = 383;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 376;
	                this.match(TinyosParser.EVENT);
	                this.state = 378;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	                if(la_===1) {
	                    this.state = 377;
	                    this.match(TinyosParser.VOID);

	                }
	                this.state = 380;
	                this.common_name();
	                this.state = 381;
	                this.event_stat_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_condition_block() {
	    let localctx = new Event_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, TinyosParser.RULE_event_condition_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(TinyosParser.OPAR);
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 388;
	            this.expr(0);

	        }
	        this.state = 391;
	        this.match(TinyosParser.CPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_stat_block() {
	    let localctx = new Event_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, TinyosParser.RULE_event_stat_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this.match(TinyosParser.OBRACE);
	        this.state = 394;
	        this.block();
	        this.state = 395;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_stat() {
	    let localctx = new Task_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, TinyosParser.RULE_task_stat);
	    try {
	        this.state = 430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 397;
	            this.match(TinyosParser.TASK);
	            this.state = 399;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            if(la_===1) {
	                this.state = 398;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 401;
	            this.common_name();
	            this.state = 402;
	            this.task_condition_block();
	            this.state = 404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	            if(la_===1) {
	                this.state = 403;
	                this.task_stat_block();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.match(TinyosParser.TASK);
	            this.state = 408;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            if(la_===1) {
	                this.state = 407;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 410;
	            this.common_name();
	            this.state = 411;
	            this.task_condition_block();
	            this.state = 413;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 412;
	                this.task_stat_block();

	            }
	            this.state = 418;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 415;
	                    this.stat(); 
	                }
	                this.state = 420;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	            }

	            this.state = 428;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 421;
	                this.match(TinyosParser.TASK);
	                this.state = 423;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	                if(la_===1) {
	                    this.state = 422;
	                    this.match(TinyosParser.VOID);

	                }
	                this.state = 425;
	                this.common_name();
	                this.state = 426;
	                this.task_stat_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_condition_block() {
	    let localctx = new Task_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, TinyosParser.RULE_task_condition_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(TinyosParser.OPAR);
	        this.state = 434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 433;
	            this.expr(0);

	        }
	        this.state = 436;
	        this.match(TinyosParser.CPAR);
	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TinyosParser.SCOL) {
	            this.state = 437;
	            this.match(TinyosParser.SCOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_stat_block() {
	    let localctx = new Task_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, TinyosParser.RULE_task_stat_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(TinyosParser.OBRACE);
	        this.state = 441;
	        this.block();
	        this.state = 442;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	static_stat() {
	    let localctx = new Static_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, TinyosParser.RULE_static_stat);
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 444;
	            this.match(TinyosParser.STATIC);
	            this.state = 446;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 445;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 448;
	            this.common_name();
	            this.state = 449;
	            this.static_condition_block();
	            this.state = 451;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1) {
	                this.state = 450;
	                this.static_stat_block();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 453;
	            this.match(TinyosParser.STATIC);
	            this.state = 455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 454;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 457;
	            this.common_name();
	            this.state = 458;
	            this.static_condition_block();
	            this.state = 460;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            if(la_===1) {
	                this.state = 459;
	                this.static_stat_block();

	            }
	            this.state = 465;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 462;
	                    this.stat(); 
	                }
	                this.state = 467;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	            }

	            this.state = 475;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 468;
	                this.match(TinyosParser.STATIC);
	                this.state = 470;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	                if(la_===1) {
	                    this.state = 469;
	                    this.match(TinyosParser.VOID);

	                }
	                this.state = 472;
	                this.common_name();
	                this.state = 473;
	                this.static_stat_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	static_condition_block() {
	    let localctx = new Static_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, TinyosParser.RULE_static_condition_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(TinyosParser.OPAR);
	        this.state = 481;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 480;
	            this.expr(0);

	        }
	        this.state = 483;
	        this.match(TinyosParser.CPAR);
	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TinyosParser.SCOL) {
	            this.state = 484;
	            this.match(TinyosParser.SCOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	static_stat_block() {
	    let localctx = new Static_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, TinyosParser.RULE_static_stat_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(TinyosParser.OBRACE);
	        this.state = 488;
	        this.block();
	        this.state = 489;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	other_stat() {
	    let localctx = new Other_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, TinyosParser.RULE_other_stat);
	    try {
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 492;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	            if(la_===1) {
	                this.state = 491;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 494;
	            this.common_name();
	            this.state = 495;
	            this.other_condition_block();
	            this.state = 497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	            if(la_===1) {
	                this.state = 496;
	                this.other_stat_block();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 500;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	            if(la_===1) {
	                this.state = 499;
	                this.match(TinyosParser.VOID);

	            }
	            this.state = 502;
	            this.common_name();
	            this.state = 503;
	            this.other_condition_block();
	            this.state = 505;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	            if(la_===1) {
	                this.state = 504;
	                this.other_stat_block();

	            }
	            this.state = 510;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 507;
	                    this.stat(); 
	                }
	                this.state = 512;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	            }

	            this.state = 519;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            if(la_===1) {
	                this.state = 514;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	                if(la_===1) {
	                    this.state = 513;
	                    this.match(TinyosParser.VOID);

	                }
	                this.state = 516;
	                this.common_name();
	                this.state = 517;
	                this.other_stat_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	other_condition_block() {
	    let localctx = new Other_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, TinyosParser.RULE_other_condition_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.match(TinyosParser.OPAR);
	        this.state = 525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 524;
	            this.expr(0);

	        }
	        this.state = 527;
	        this.match(TinyosParser.CPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	other_stat_block() {
	    let localctx = new Other_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, TinyosParser.RULE_other_stat_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.match(TinyosParser.OBRACE);
	        this.state = 530;
	        this.block();
	        this.state = 531;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_stat() {
	    let localctx = new Enum_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, TinyosParser.RULE_enum_stat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(TinyosParser.ENUM);
	        this.state = 534;
	        this.match(TinyosParser.OBRACE);
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MINUS - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.NOT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.OBRACE - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	            this.state = 535;
	            this.expr(0);
	            this.state = 537;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 536;
	                this.match(TinyosParser.COMMA);

	            }
	            this.state = 543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 544;
	        this.match(TinyosParser.CBRACE);
	        this.state = 545;
	        this.match(TinyosParser.SCOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_name() {
	    let localctx = new Common_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, TinyosParser.RULE_common_name);
	    try {
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 547;
	            this.singleLine();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 548;
	            this.name_or_reserved();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stat() {
	    let localctx = new If_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, TinyosParser.RULE_if_stat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.match(TinyosParser.IF);
	        this.state = 552;
	        this.if_condition_block();
	        this.state = 558;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 553;
	                this.match(TinyosParser.ELSE);
	                this.state = 554;
	                this.match(TinyosParser.IF);
	                this.state = 555;
	                this.if_condition_block(); 
	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	        this.state = 563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        if(la_===1) {
	            this.state = 561;
	            this.match(TinyosParser.ELSE);
	            this.state = 562;
	            this.if_stat_block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_condition_block() {
	    let localctx = new If_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, TinyosParser.RULE_if_condition_block);
	    try {
	        this.state = 595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.match(TinyosParser.OPAR);
	            this.state = 578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 569;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 566;
	                        this.name_or_reserved(); 
	                    }
	                    this.state = 571;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	                }

	                break;

	            case 2:
	                this.state = 575;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 572;
	                        this.expr(0); 
	                    }
	                    this.state = 577;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
	                }

	                break;

	            }
	            this.state = 580;
	            this.match(TinyosParser.CPAR);
	            this.state = 581;
	            this.if_stat_block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 582;
	            this.match(TinyosParser.OPAR);
	            this.state = 583;
	            this.match(TinyosParser.CPAR);
	            this.state = 584;
	            this.if_stat_block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 585;
	            this.match(TinyosParser.OPAR);
	            this.state = 586;
	            this.expr(0);
	            this.state = 587;
	            this.match(TinyosParser.CPAR);
	            this.state = 588;
	            this.if_stat_block();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 590;
	            this.match(TinyosParser.OPAR);
	            this.state = 591;
	            this.symbol();
	            this.state = 592;
	            this.match(TinyosParser.CPAR);
	            this.state = 593;
	            this.if_stat_block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stat_block() {
	    let localctx = new If_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, TinyosParser.RULE_if_stat_block);
	    try {
	        this.state = 602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 597;
	            this.match(TinyosParser.OBRACE);
	            this.state = 598;
	            this.block();
	            this.state = 599;
	            this.match(TinyosParser.CBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 601;
	            this.stat();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stat() {
	    let localctx = new While_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, TinyosParser.RULE_while_stat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(TinyosParser.WHILE);
	        this.state = 605;
	        this.match(TinyosParser.OPAR);
	        this.state = 606;
	        this.expr(0);
	        this.state = 607;
	        this.match(TinyosParser.CPAR);
	        this.state = 608;
	        this.while_stat_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stat_block() {
	    let localctx = new While_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, TinyosParser.RULE_while_stat_block);
	    try {
	        this.state = 615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 610;
	            this.match(TinyosParser.OBRACE);
	            this.state = 611;
	            this.block();
	            this.state = 612;
	            this.match(TinyosParser.CBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 614;
	            this.stat();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stat() {
	    let localctx = new For_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, TinyosParser.RULE_for_stat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.match(TinyosParser.FOR);
	        this.state = 618;
	        this.match(TinyosParser.OPAR);
	        this.state = 626; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 621;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 619;
	        		    this.expr(0);
	        		    break;

	        		case 2:
	        		    this.state = 620;
	        		    this.anystatement();
	        		    break;

	        		}
	        		this.state = 624;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===TinyosParser.SCOL) {
	        		    this.state = 623;
	        		    this.match(TinyosParser.SCOL);
	        		}

	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 628; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,74, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 630;
	        this.match(TinyosParser.CPAR);
	        this.state = 631;
	        this.for_stat_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stat_block() {
	    let localctx = new For_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, TinyosParser.RULE_for_stat_block);
	    try {
	        this.state = 638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 633;
	            this.match(TinyosParser.OBRACE);
	            this.state = 634;
	            this.block();
	            this.state = 635;
	            this.match(TinyosParser.CBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.stat();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_stat() {
	    let localctx = new Switch_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, TinyosParser.RULE_switch_stat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(TinyosParser.SWITCH);
	        this.state = 641;
	        this.switch_condition_block();
	        this.state = 642;
	        this.match(TinyosParser.OBRACE);
	        this.state = 646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TinyosParser.CASE || _la===TinyosParser.DEFAULT) {
	            this.state = 643;
	            this.switch_stat_block();
	            this.state = 648;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 649;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_condition_block() {
	    let localctx = new Switch_condition_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, TinyosParser.RULE_switch_condition_block);
	    try {
	        this.state = 659;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 651;
	            this.match(TinyosParser.OPAR);
	            this.state = 652;
	            this.expr(0);
	            this.state = 653;
	            this.match(TinyosParser.CPAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.match(TinyosParser.OPAR);
	            this.state = 656;
	            this.symbol();
	            this.state = 657;
	            this.match(TinyosParser.CPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_stat_block() {
	    let localctx = new Switch_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, TinyosParser.RULE_switch_stat_block);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 661;
	            this.match(TinyosParser.CASE);
	            this.state = 664;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 662;
	                this.expr(0);
	                break;

	            case 2:
	                this.state = 663;
	                this.anystatement();
	                break;

	            }
	            this.state = 666;
	            this.match(TinyosParser.COLON);
	            this.state = 670;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 667;
	                    this.stat(); 
	                }
	                this.state = 672;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	            }

	            this.state = 673;
	            this.match(TinyosParser.BREAK);
	            this.state = 674;
	            this.match(TinyosParser.SCOL);
	            break;
	        case TinyosParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.match(TinyosParser.DEFAULT);
	            this.state = 677;
	            this.match(TinyosParser.COLON);
	            this.state = 681;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 678;
	                    this.stat(); 
	                }
	                this.state = 683;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	            }

	            this.state = 684;
	            this.match(TinyosParser.BREAK);
	            this.state = 685;
	            this.match(TinyosParser.SCOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_stat() {
	    let localctx = new Atomic_statContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, TinyosParser.RULE_atomic_stat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(TinyosParser.ATOMIC);
	        this.state = 689;
	        this.atomic_stat_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_stat_block() {
	    let localctx = new Atomic_stat_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, TinyosParser.RULE_atomic_stat_block);
	    try {
	        this.state = 704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 691;
	            this.match(TinyosParser.OBRACE);
	            this.state = 695;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 692;
	                this.statement();
	                break;

	            case 2:
	                this.state = 693;
	                this.if_stat();
	                break;

	            case 3:
	                this.state = 694;
	                this.other_stat();
	                break;

	            }
	            this.state = 697;
	            this.match(TinyosParser.CBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 702;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 699;
	                this.statement();
	                break;

	            case 2:
	                this.state = 700;
	                this.if_stat();
	                break;

	            case 3:
	                this.state = 701;
	                this.other_stat();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 102;
	    this.enterRecursionRule(localctx, 102, TinyosParser.RULE_expr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnaryMinusExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 707;
	            this.match(TinyosParser.MINUS);
	            this.state = 708;
	            this.expr(11);
	            break;

	        case 2:
	            localctx = new NotExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 709;
	            this.match(TinyosParser.NOT);
	            this.state = 710;
	            this.expr(10);
	            break;

	        case 3:
	            localctx = new AtomExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 711;
	            this.atom();
	            this.state = 715;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 712;
	                    this.atom(); 
	                }
	                this.state = 717;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	            }

	            break;

	        case 4:
	            localctx = new SinglelineExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 718;
	            this.singleLine();
	            break;

	        case 5:
	            localctx = new SingleDoubleArrayExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 719;
	            this.singleDoubleArray();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 745;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 743;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 722;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 723;
	                    this.match(TinyosParser.POW);
	                    this.state = 724;
	                    this.expr(13);
	                    break;

	                case 2:
	                    localctx = new MultiplicationExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 725;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 726;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (TinyosParser.MULT - 63)) | (1 << (TinyosParser.DIV - 63)) | (1 << (TinyosParser.MOD - 63)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 727;
	                    this.expr(10);
	                    break;

	                case 3:
	                    localctx = new AdditiveExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 728;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 729;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (TinyosParser.PLUS - 61)) | (1 << (TinyosParser.MINUS - 61)) | (1 << (TinyosParser.ASSIGN - 61)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 730;
	                    this.expr(9);
	                    break;

	                case 4:
	                    localctx = new RelationalExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 731;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 732;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (TinyosParser.GT - 57)) | (1 << (TinyosParser.LT - 57)) | (1 << (TinyosParser.GTEQ - 57)) | (1 << (TinyosParser.LTEQ - 57)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 733;
	                    this.expr(8);
	                    break;

	                case 5:
	                    localctx = new EqualityExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 734;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 735;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===TinyosParser.EQ || _la===TinyosParser.NEQ)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 736;
	                    this.expr(7);
	                    break;

	                case 6:
	                    localctx = new AndExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 737;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 738;
	                    this.match(TinyosParser.AND);
	                    this.state = 739;
	                    this.expr(6);
	                    break;

	                case 7:
	                    localctx = new OrExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, TinyosParser.RULE_expr);
	                    this.state = 740;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 741;
	                    this.match(TinyosParser.OR);
	                    this.state = 742;
	                    this.expr(5);
	                    break;

	                } 
	            }
	            this.state = 747;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, TinyosParser.RULE_atom);
	    var _la = 0; // Token type
	    try {
	        this.state = 753;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.STRING:
	            localctx = new StringAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.match(TinyosParser.STRING);
	            break;
	        case TinyosParser.ID:
	            localctx = new IdAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 749;
	            this.match(TinyosParser.ID);
	            break;
	        case TinyosParser.INT:
	        case TinyosParser.FLOAT:
	            localctx = new NumberAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 750;
	            _la = this._input.LA(1);
	            if(!(_la===TinyosParser.INT || _la===TinyosParser.FLOAT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case TinyosParser.FALSE:
	        case TinyosParser.TRUE:
	            localctx = new BooleanAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 751;
	            _la = this._input.LA(1);
	            if(!(_la===TinyosParser.FALSE || _la===TinyosParser.TRUE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case TinyosParser.HEX:
	            localctx = new HexadecimalAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 752;
	            this.match(TinyosParser.HEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol() {
	    let localctx = new SymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, TinyosParser.RULE_symbol);
	    try {
	        localctx = new OthercharContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.match(TinyosParser.OTHER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleDoubleArray() {
	    let localctx = new SingleDoubleArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, TinyosParser.RULE_singleDoubleArray);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(TinyosParser.OBRACE);
	        this.state = 761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TinyosParser.FALSE || _la===TinyosParser.TRUE || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (TinyosParser.OBRACE - 82)) | (1 << (TinyosParser.ID - 82)) | (1 << (TinyosParser.INT - 82)) | (1 << (TinyosParser.FLOAT - 82)) | (1 << (TinyosParser.STRING - 82)) | (1 << (TinyosParser.HEX - 82)))) !== 0)) {
	            this.state = 758;
	            this.arrayElement();
	            this.state = 763;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 764;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, TinyosParser.RULE_arrayElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 779;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.FALSE:
	        case TinyosParser.TRUE:
	        case TinyosParser.ID:
	        case TinyosParser.INT:
	        case TinyosParser.FLOAT:
	        case TinyosParser.STRING:
	        case TinyosParser.HEX:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 766;
	            this.atom();
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.COMMA) {
	                this.state = 767;
	                this.match(TinyosParser.COMMA);
	            }

	            break;
	        case TinyosParser.OBRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 770;
	            this.match(TinyosParser.OBRACE);
	            this.state = 771;
	            this.atom();
	            this.state = 772;
	            this.match(TinyosParser.COMMA);
	            this.state = 773;
	            this.atom();
	            this.state = 774;
	            this.match(TinyosParser.CBRACE);
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.COMMA) {
	                this.state = 776;
	                this.match(TinyosParser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chars() {
	    let localctx = new CharsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, TinyosParser.RULE_chars);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 781;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (TinyosParser.GT - 57)) | (1 << (TinyosParser.LT - 57)) | (1 << (TinyosParser.MULT - 57)) | (1 << (TinyosParser.ASSIGN - 57)) | (1 << (TinyosParser.INC - 57)) | (1 << (TinyosParser.DEC - 57)) | (1 << (TinyosParser.BITAND - 57)) | (1 << (TinyosParser.OBRACK - 57)) | (1 << (TinyosParser.CBRACK - 57)) | (1 << (TinyosParser.OPAR - 57)) | (1 << (TinyosParser.CPAR - 57)) | (1 << (TinyosParser.FORWARDARROW - 57)) | (1 << (TinyosParser.BACKARROW - 57)) | (1 << (TinyosParser.COLONCOLON - 57)) | (1 << (TinyosParser.AT - 57)) | (1 << (TinyosParser.COMMA - 57)))) !== 0) || _la===TinyosParser.DOT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chars_no_comma() {
	    let localctx = new Chars_no_commaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, TinyosParser.RULE_chars_no_comma);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (TinyosParser.GT - 57)) | (1 << (TinyosParser.LT - 57)) | (1 << (TinyosParser.MULT - 57)) | (1 << (TinyosParser.ASSIGN - 57)) | (1 << (TinyosParser.INC - 57)) | (1 << (TinyosParser.DEC - 57)) | (1 << (TinyosParser.BITAND - 57)) | (1 << (TinyosParser.OBRACK - 57)) | (1 << (TinyosParser.CBRACK - 57)) | (1 << (TinyosParser.OPAR - 57)) | (1 << (TinyosParser.CPAR - 57)) | (1 << (TinyosParser.FORWARDARROW - 57)) | (1 << (TinyosParser.BACKARROW - 57)) | (1 << (TinyosParser.COLONCOLON - 57)) | (1 << (TinyosParser.AT - 57)))) !== 0) || _la===TinyosParser.DOT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedwords() {
	    let localctx = new ReservedwordsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, TinyosParser.RULE_reservedwords);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 785;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.VOID - 39)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleLine() {
	    let localctx = new SingleLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, TinyosParser.RULE_singleLine);
	    try {
	        this.state = 820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 790;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case TinyosParser.FALSE:
	            case TinyosParser.TRUE:
	            case TinyosParser.ID:
	            case TinyosParser.INT:
	            case TinyosParser.FLOAT:
	            case TinyosParser.STRING:
	            case TinyosParser.HEX:
	                this.state = 787;
	                this.atom();
	                break;
	            case TinyosParser.OTHER:
	                this.state = 788;
	                this.symbol();
	                break;
	            case TinyosParser.GT:
	            case TinyosParser.LT:
	            case TinyosParser.MULT:
	            case TinyosParser.ASSIGN:
	            case TinyosParser.INC:
	            case TinyosParser.DEC:
	            case TinyosParser.BITAND:
	            case TinyosParser.OBRACK:
	            case TinyosParser.CBRACK:
	            case TinyosParser.OPAR:
	            case TinyosParser.CPAR:
	            case TinyosParser.FORWARDARROW:
	            case TinyosParser.BACKARROW:
	            case TinyosParser.COLONCOLON:
	            case TinyosParser.AT:
	            case TinyosParser.COMMA:
	            case TinyosParser.DOT:
	                this.state = 789;
	                this.chars();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 802;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 793;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	                    if(la_===1) {
	                        this.state = 792;
	                        this.match(TinyosParser.DOT);

	                    }
	                    this.state = 798;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case TinyosParser.FALSE:
	                    case TinyosParser.TRUE:
	                    case TinyosParser.ID:
	                    case TinyosParser.INT:
	                    case TinyosParser.FLOAT:
	                    case TinyosParser.STRING:
	                    case TinyosParser.HEX:
	                        this.state = 795;
	                        this.atom();
	                        break;
	                    case TinyosParser.OTHER:
	                        this.state = 796;
	                        this.symbol();
	                        break;
	                    case TinyosParser.GT:
	                    case TinyosParser.LT:
	                    case TinyosParser.MULT:
	                    case TinyosParser.ASSIGN:
	                    case TinyosParser.INC:
	                    case TinyosParser.DEC:
	                    case TinyosParser.BITAND:
	                    case TinyosParser.OBRACK:
	                    case TinyosParser.CBRACK:
	                    case TinyosParser.OPAR:
	                    case TinyosParser.CPAR:
	                    case TinyosParser.FORWARDARROW:
	                    case TinyosParser.BACKARROW:
	                    case TinyosParser.COLONCOLON:
	                    case TinyosParser.AT:
	                    case TinyosParser.COMMA:
	                    case TinyosParser.DOT:
	                        this.state = 797;
	                        this.chars();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 804;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 809;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case TinyosParser.FALSE:
	            case TinyosParser.TRUE:
	            case TinyosParser.ID:
	            case TinyosParser.INT:
	            case TinyosParser.FLOAT:
	            case TinyosParser.STRING:
	            case TinyosParser.HEX:
	                this.state = 805;
	                this.atom();
	                break;
	            case TinyosParser.OTHER:
	                this.state = 806;
	                this.symbol();
	                break;
	            case TinyosParser.GT:
	            case TinyosParser.LT:
	            case TinyosParser.MULT:
	            case TinyosParser.ASSIGN:
	            case TinyosParser.INC:
	            case TinyosParser.DEC:
	            case TinyosParser.BITAND:
	            case TinyosParser.OBRACK:
	            case TinyosParser.CBRACK:
	            case TinyosParser.OPAR:
	            case TinyosParser.CPAR:
	            case TinyosParser.FORWARDARROW:
	            case TinyosParser.BACKARROW:
	            case TinyosParser.COLONCOLON:
	            case TinyosParser.AT:
	            case TinyosParser.COMMA:
	            case TinyosParser.DOT:
	                this.state = 807;
	                this.chars();
	                break;
	            case TinyosParser.ABSTRACT:
	            case TinyosParser.AS:
	            case TinyosParser.ATOMIC:
	            case TinyosParser.BREAK:
	            case TinyosParser.CALL:
	            case TinyosParser.ERROR:
	            case TinyosParser.NEW:
	            case TinyosParser.POST:
	            case TinyosParser.RETURN:
	            case TinyosParser.VOID:
	                this.state = 808;
	                this.reservedwords();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 817;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 815;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case TinyosParser.FALSE:
	                    case TinyosParser.TRUE:
	                    case TinyosParser.ID:
	                    case TinyosParser.INT:
	                    case TinyosParser.FLOAT:
	                    case TinyosParser.STRING:
	                    case TinyosParser.HEX:
	                        this.state = 811;
	                        this.atom();
	                        break;
	                    case TinyosParser.OTHER:
	                        this.state = 812;
	                        this.symbol();
	                        break;
	                    case TinyosParser.GT:
	                    case TinyosParser.LT:
	                    case TinyosParser.MULT:
	                    case TinyosParser.ASSIGN:
	                    case TinyosParser.INC:
	                    case TinyosParser.DEC:
	                    case TinyosParser.BITAND:
	                    case TinyosParser.OBRACK:
	                    case TinyosParser.CBRACK:
	                    case TinyosParser.OPAR:
	                    case TinyosParser.CPAR:
	                    case TinyosParser.FORWARDARROW:
	                    case TinyosParser.BACKARROW:
	                    case TinyosParser.COLONCOLON:
	                    case TinyosParser.AT:
	                    case TinyosParser.COMMA:
	                    case TinyosParser.DOT:
	                        this.state = 813;
	                        this.chars();
	                        break;
	                    case TinyosParser.ABSTRACT:
	                    case TinyosParser.AS:
	                    case TinyosParser.ATOMIC:
	                    case TinyosParser.BREAK:
	                    case TinyosParser.CALL:
	                    case TinyosParser.ERROR:
	                    case TinyosParser.NEW:
	                    case TinyosParser.POST:
	                    case TinyosParser.RETURN:
	                    case TinyosParser.VOID:
	                        this.state = 814;
	                        this.reservedwords();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 819;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anystatement() {
	    let localctx = new AnystatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, TinyosParser.RULE_anystatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.FALSE:
	        case TinyosParser.TRUE:
	        case TinyosParser.ID:
	        case TinyosParser.INT:
	        case TinyosParser.FLOAT:
	        case TinyosParser.STRING:
	        case TinyosParser.HEX:
	            this.state = 822;
	            this.atom();
	            break;
	        case TinyosParser.OTHER:
	            this.state = 823;
	            this.symbol();
	            break;
	        case TinyosParser.GT:
	        case TinyosParser.LT:
	        case TinyosParser.MULT:
	        case TinyosParser.ASSIGN:
	        case TinyosParser.INC:
	        case TinyosParser.DEC:
	        case TinyosParser.BITAND:
	        case TinyosParser.OBRACK:
	        case TinyosParser.CBRACK:
	        case TinyosParser.OPAR:
	        case TinyosParser.CPAR:
	        case TinyosParser.FORWARDARROW:
	        case TinyosParser.BACKARROW:
	        case TinyosParser.COLONCOLON:
	        case TinyosParser.AT:
	        case TinyosParser.COMMA:
	        case TinyosParser.DOT:
	            this.state = 824;
	            this.chars();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 832;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 830;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case TinyosParser.FALSE:
	                case TinyosParser.TRUE:
	                case TinyosParser.ID:
	                case TinyosParser.INT:
	                case TinyosParser.FLOAT:
	                case TinyosParser.STRING:
	                case TinyosParser.HEX:
	                    this.state = 827;
	                    this.atom();
	                    break;
	                case TinyosParser.OTHER:
	                    this.state = 828;
	                    this.symbol();
	                    break;
	                case TinyosParser.GT:
	                case TinyosParser.LT:
	                case TinyosParser.MULT:
	                case TinyosParser.ASSIGN:
	                case TinyosParser.INC:
	                case TinyosParser.DEC:
	                case TinyosParser.BITAND:
	                case TinyosParser.OBRACK:
	                case TinyosParser.CBRACK:
	                case TinyosParser.OPAR:
	                case TinyosParser.CPAR:
	                case TinyosParser.FORWARDARROW:
	                case TinyosParser.BACKARROW:
	                case TinyosParser.COLONCOLON:
	                case TinyosParser.AT:
	                case TinyosParser.COMMA:
	                case TinyosParser.DOT:
	                    this.state = 829;
	                    this.chars();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 834;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_or_reserved() {
	    let localctx = new Name_or_reservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, TinyosParser.RULE_name_or_reserved);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TinyosParser.FALSE:
	        case TinyosParser.TRUE:
	        case TinyosParser.ID:
	        case TinyosParser.INT:
	        case TinyosParser.FLOAT:
	        case TinyosParser.STRING:
	        case TinyosParser.HEX:
	            this.state = 835;
	            this.atom();
	            break;
	        case TinyosParser.OTHER:
	            this.state = 836;
	            this.symbol();
	            break;
	        case TinyosParser.GT:
	        case TinyosParser.LT:
	        case TinyosParser.MULT:
	        case TinyosParser.ASSIGN:
	        case TinyosParser.INC:
	        case TinyosParser.DEC:
	        case TinyosParser.BITAND:
	        case TinyosParser.OBRACK:
	        case TinyosParser.CBRACK:
	        case TinyosParser.OPAR:
	        case TinyosParser.CPAR:
	        case TinyosParser.FORWARDARROW:
	        case TinyosParser.BACKARROW:
	        case TinyosParser.COLONCOLON:
	        case TinyosParser.AT:
	        case TinyosParser.COMMA:
	        case TinyosParser.DOT:
	            this.state = 837;
	            this.chars();
	            break;
	        case TinyosParser.ABSTRACT:
	        case TinyosParser.AS:
	        case TinyosParser.ATOMIC:
	        case TinyosParser.BREAK:
	        case TinyosParser.CALL:
	        case TinyosParser.ERROR:
	        case TinyosParser.NEW:
	        case TinyosParser.POST:
	        case TinyosParser.RETURN:
	        case TinyosParser.VOID:
	            this.state = 838;
	            this.reservedwords();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 847;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 845;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case TinyosParser.FALSE:
	                case TinyosParser.TRUE:
	                case TinyosParser.ID:
	                case TinyosParser.INT:
	                case TinyosParser.FLOAT:
	                case TinyosParser.STRING:
	                case TinyosParser.HEX:
	                    this.state = 841;
	                    this.atom();
	                    break;
	                case TinyosParser.OTHER:
	                    this.state = 842;
	                    this.symbol();
	                    break;
	                case TinyosParser.GT:
	                case TinyosParser.LT:
	                case TinyosParser.MULT:
	                case TinyosParser.ASSIGN:
	                case TinyosParser.INC:
	                case TinyosParser.DEC:
	                case TinyosParser.BITAND:
	                case TinyosParser.OBRACK:
	                case TinyosParser.CBRACK:
	                case TinyosParser.OPAR:
	                case TinyosParser.CPAR:
	                case TinyosParser.FORWARDARROW:
	                case TinyosParser.BACKARROW:
	                case TinyosParser.COLONCOLON:
	                case TinyosParser.AT:
	                case TinyosParser.COMMA:
	                case TinyosParser.DOT:
	                    this.state = 843;
	                    this.chars();
	                    break;
	                case TinyosParser.ABSTRACT:
	                case TinyosParser.AS:
	                case TinyosParser.ATOMIC:
	                case TinyosParser.BREAK:
	                case TinyosParser.CALL:
	                case TinyosParser.ERROR:
	                case TinyosParser.NEW:
	                case TinyosParser.POST:
	                case TinyosParser.RETURN:
	                case TinyosParser.VOID:
	                    this.state = 844;
	                    this.reservedwords();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 849;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_with_char() {
	    let localctx = new Name_with_charContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, TinyosParser.RULE_name_with_char);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.atom();
	        this.state = 861;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 852;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	                if(la_===1) {
	                    this.state = 851;
	                    this.match(TinyosParser.DOT);

	                }
	                this.state = 857;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case TinyosParser.GT:
	                case TinyosParser.LT:
	                case TinyosParser.MULT:
	                case TinyosParser.ASSIGN:
	                case TinyosParser.INC:
	                case TinyosParser.DEC:
	                case TinyosParser.BITAND:
	                case TinyosParser.OBRACK:
	                case TinyosParser.CBRACK:
	                case TinyosParser.OPAR:
	                case TinyosParser.CPAR:
	                case TinyosParser.FORWARDARROW:
	                case TinyosParser.BACKARROW:
	                case TinyosParser.COLONCOLON:
	                case TinyosParser.AT:
	                case TinyosParser.COMMA:
	                case TinyosParser.DOT:
	                    this.state = 854;
	                    this.chars();
	                    break;
	                case TinyosParser.OTHER:
	                    this.state = 855;
	                    this.symbol();
	                    break;
	                case TinyosParser.FALSE:
	                case TinyosParser.TRUE:
	                case TinyosParser.ID:
	                case TinyosParser.INT:
	                case TinyosParser.FLOAT:
	                case TinyosParser.STRING:
	                case TinyosParser.HEX:
	                    this.state = 856;
	                    this.atom();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 863;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationDeclaration() {
	    let localctx = new ConfigurationDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, TinyosParser.RULE_configurationDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.configurationSignature();
	        this.state = 865;
	        this.configurationImplementation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationSignature() {
	    let localctx = new ConfigurationSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, TinyosParser.RULE_configurationSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(TinyosParser.COFIGURATION);
	        this.state = 868;
	        this.configurationName();
	        this.state = 869;
	        this.configurationSignatureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationSignatureBody() {
	    let localctx = new ConfigurationSignatureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, TinyosParser.RULE_configurationSignatureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(TinyosParser.OBRACE);
	        this.state = 873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TinyosParser.ABSTRACT) | (1 << TinyosParser.AS) | (1 << TinyosParser.ATOMIC) | (1 << TinyosParser.BREAK) | (1 << TinyosParser.CALL) | (1 << TinyosParser.ERROR) | (1 << TinyosParser.FALSE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (TinyosParser.NEW - 39)) | (1 << (TinyosParser.POST - 39)) | (1 << (TinyosParser.RETURN - 39)) | (1 << (TinyosParser.TRUE - 39)) | (1 << (TinyosParser.VOID - 39)) | (1 << (TinyosParser.GT - 39)) | (1 << (TinyosParser.LT - 39)) | (1 << (TinyosParser.MINUS - 39)) | (1 << (TinyosParser.MULT - 39)) | (1 << (TinyosParser.NOT - 39)) | (1 << (TinyosParser.ASSIGN - 39)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (TinyosParser.INC - 72)) | (1 << (TinyosParser.DEC - 72)) | (1 << (TinyosParser.BITAND - 72)) | (1 << (TinyosParser.OBRACK - 72)) | (1 << (TinyosParser.CBRACK - 72)) | (1 << (TinyosParser.OPAR - 72)) | (1 << (TinyosParser.CPAR - 72)) | (1 << (TinyosParser.OBRACE - 72)) | (1 << (TinyosParser.FORWARDARROW - 72)) | (1 << (TinyosParser.BACKARROW - 72)) | (1 << (TinyosParser.COLONCOLON - 72)) | (1 << (TinyosParser.AT - 72)) | (1 << (TinyosParser.COMMA - 72)) | (1 << (TinyosParser.DOT - 72)) | (1 << (TinyosParser.ID - 72)) | (1 << (TinyosParser.INT - 72)) | (1 << (TinyosParser.FLOAT - 72)) | (1 << (TinyosParser.STRING - 72)) | (1 << (TinyosParser.OTHER - 72)) | (1 << (TinyosParser.HEX - 72)))) !== 0)) {
	            this.state = 872;
	            this.expr(0);
	        }

	        this.state = 875;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationName() {
	    let localctx = new ConfigurationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, TinyosParser.RULE_configurationName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.singleLine();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationImplementation() {
	    let localctx = new ConfigurationImplementationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, TinyosParser.RULE_configurationImplementation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.match(TinyosParser.IMPLEMENTATION);
	        this.state = 880;
	        this.configurationImplementationBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationImplementationBody() {
	    let localctx = new ConfigurationImplementationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, TinyosParser.RULE_configurationImplementationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.match(TinyosParser.OBRACE);
	        this.state = 883;
	        this.configurationImplementationDescription();
	        this.state = 884;
	        this.match(TinyosParser.CBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationImplementationDescription() {
	    let localctx = new ConfigurationImplementationDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, TinyosParser.RULE_configurationImplementationDescription);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TinyosParser.COMPONENTS || _la===TinyosParser.FALSE || _la===TinyosParser.NEW || _la===TinyosParser.TRUE || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (TinyosParser.HASHTAG - 76)) | (1 << (TinyosParser.ID - 76)) | (1 << (TinyosParser.INT - 76)) | (1 << (TinyosParser.FLOAT - 76)) | (1 << (TinyosParser.STRING - 76)) | (1 << (TinyosParser.HEX - 76)))) !== 0)) {
	            this.state = 889;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case TinyosParser.COMPONENTS:
	                this.state = 886;
	                this.componentsDefinition();
	                break;
	            case TinyosParser.FALSE:
	            case TinyosParser.NEW:
	            case TinyosParser.TRUE:
	            case TinyosParser.ID:
	            case TinyosParser.INT:
	            case TinyosParser.FLOAT:
	            case TinyosParser.STRING:
	            case TinyosParser.HEX:
	                this.state = 887;
	                this.componentsWiring();
	                break;
	            case TinyosParser.HASHTAG:
	                this.state = 888;
	                this.platformDefinition();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	platformDefinition() {
	    let localctx = new PlatformDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, TinyosParser.RULE_platformDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(TinyosParser.HASHTAG);
	        this.state = 895;
	        this.match(TinyosParser.IF);
	        this.state = 899;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 896;
	                this.platformDefinitionDescription(); 
	            }
	            this.state = 901;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	        this.state = 902;
	        this.match(TinyosParser.HASHTAG);
	        this.state = 903;
	        this.match(TinyosParser.ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	platformDefinitionDescription() {
	    let localctx = new PlatformDefinitionDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, TinyosParser.RULE_platformDefinitionDescription);
	    var _la = 0; // Token type
	    try {
	        this.state = 924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.DEFINED) {
	                this.state = 905;
	                this.match(TinyosParser.DEFINED);
	            }

	            this.state = 908;
	            this.singleLine();
	            this.state = 909;
	            this.componentsDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 911;
	            this.match(TinyosParser.HASHTAG);
	            this.state = 912;
	            this.match(TinyosParser.ELIF);
	            this.state = 914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.DEFINED) {
	                this.state = 913;
	                this.match(TinyosParser.DEFINED);
	            }

	            this.state = 916;
	            this.singleLine();
	            this.state = 917;
	            this.componentsDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 919;
	            this.match(TinyosParser.HASHTAG);
	            this.state = 920;
	            this.match(TinyosParser.ELSE);
	            this.state = 921;
	            this.match(TinyosParser.HASHTAG);
	            this.state = 922;
	            this.match(TinyosParser.ERROR);
	            this.state = 923;
	            this.singleLine();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentsDefinition() {
	    let localctx = new ComponentsDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, TinyosParser.RULE_componentsDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(TinyosParser.COMPONENTS);
	        this.state = 927;
	        this.componentsDefinitionDetails();
	        this.state = 928;
	        this.match(TinyosParser.SCOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentsDefinitionDetails() {
	    let localctx = new ComponentsDefinitionDetailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, TinyosParser.RULE_componentsDefinitionDetails);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (TinyosParser.FALSE - 27)) | (1 << (TinyosParser.NEW - 27)) | (1 << (TinyosParser.TRUE - 27)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (TinyosParser.ID - 91)) | (1 << (TinyosParser.INT - 91)) | (1 << (TinyosParser.FLOAT - 91)) | (1 << (TinyosParser.STRING - 91)) | (1 << (TinyosParser.HEX - 91)))) !== 0)) {
	            this.state = 930;
	            this.componentsDefinitionName();
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.COMMA) {
	                this.state = 931;
	                this.match(TinyosParser.COMMA);
	            }

	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentsDefinitionName() {
	    let localctx = new ComponentsDefinitionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, TinyosParser.RULE_componentsDefinitionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.componentsName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentsWiring() {
	    let localctx = new ComponentsWiringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, TinyosParser.RULE_componentsWiring);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this.wiring();
	        this.state = 942;
	        this.match(TinyosParser.SCOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wiring() {
	    let localctx = new WiringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, TinyosParser.RULE_wiring);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this.wiringName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wiringName() {
	    let localctx = new WiringNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, TinyosParser.RULE_wiringName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.componentsName();
	        this.state = 947;
	        _la = this._input.LA(1);
	        if(!(_la===TinyosParser.FORWARDARROW || _la===TinyosParser.BACKARROW)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 948;
	        this.componentsName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentsName() {
	    let localctx = new ComponentsNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, TinyosParser.RULE_componentsName);
	    var _la = 0; // Token type
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 950;
	            this.atom();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 951;
	            this.name_with_char();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 952;
	            this.match(TinyosParser.NEW);
	            this.state = 953;
	            this.atom();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 954;
	            this.match(TinyosParser.NEW);
	            this.state = 955;
	            this.atom();
	            this.state = 957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.OPAR) {
	                this.state = 956;
	                this.match(TinyosParser.OPAR);
	            }

	            this.state = 960;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 959;
	                this.atom();

	            }
	            this.state = 963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.CPAR) {
	                this.state = 962;
	                this.match(TinyosParser.CPAR);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 965;
	            this.match(TinyosParser.NEW);
	            this.state = 966;
	            this.atom();
	            this.state = 967;
	            this.match(TinyosParser.AS);
	            this.state = 968;
	            this.atom();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.NEW) {
	                this.state = 970;
	                this.match(TinyosParser.NEW);
	            }

	            this.state = 973;
	            this.atom();
	            this.state = 975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.OPAR) {
	                this.state = 974;
	                this.match(TinyosParser.OPAR);
	            }

	            this.state = 978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.FALSE || _la===TinyosParser.TRUE || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (TinyosParser.ID - 91)) | (1 << (TinyosParser.INT - 91)) | (1 << (TinyosParser.FLOAT - 91)) | (1 << (TinyosParser.STRING - 91)) | (1 << (TinyosParser.HEX - 91)))) !== 0)) {
	                this.state = 977;
	                this.atom();
	            }

	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===TinyosParser.CPAR) {
	                this.state = 980;
	                this.match(TinyosParser.CPAR);
	            }

	            this.state = 983;
	            this.match(TinyosParser.AS);
	            this.state = 984;
	            this.atom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

TinyosParser.EOF = antlr4.Token.EOF;
TinyosParser.ABSTRACT = 1;
TinyosParser.AS = 2;
TinyosParser.ASYNC = 3;
TinyosParser.ATOMIC = 4;
TinyosParser.BOOLEAN = 5;
TinyosParser.BREAK = 6;
TinyosParser.CALL = 7;
TinyosParser.CASE = 8;
TinyosParser.CHAR = 9;
TinyosParser.COFIGURATION = 10;
TinyosParser.COMMAND = 11;
TinyosParser.COMPONENT = 12;
TinyosParser.COMPONENTS = 13;
TinyosParser.CONTINUE = 14;
TinyosParser.DO = 15;
TinyosParser.DOUBLE = 16;
TinyosParser.DEFINED = 17;
TinyosParser.DEFINE = 18;
TinyosParser.DEFAULT = 19;
TinyosParser.ELSE = 20;
TinyosParser.ENUM = 21;
TinyosParser.EVENT = 22;
TinyosParser.EXTENDS = 23;
TinyosParser.ELIF = 24;
TinyosParser.ENDIF = 25;
TinyosParser.ERROR = 26;
TinyosParser.FALSE = 27;
TinyosParser.FINAL = 28;
TinyosParser.FOR = 29;
TinyosParser.GENERIC = 30;
TinyosParser.IF = 31;
TinyosParser.IMPLEMENTATION = 32;
TinyosParser.INCLUDE = 33;
TinyosParser.INCLUDES = 34;
TinyosParser.INTERFACE = 35;
TinyosParser.LOG = 36;
TinyosParser.LONG = 37;
TinyosParser.MODULE = 38;
TinyosParser.NEW = 39;
TinyosParser.POST = 40;
TinyosParser.PROVIDES = 41;
TinyosParser.RETURN = 42;
TinyosParser.SHORT = 43;
TinyosParser.SIGNAL = 44;
TinyosParser.STATIC = 45;
TinyosParser.SWITCH = 46;
TinyosParser.TASK = 47;
TinyosParser.TRUE = 48;
TinyosParser.USES = 49;
TinyosParser.VOID = 50;
TinyosParser.WHILE = 51;
TinyosParser.TYPEDEF = 52;
TinyosParser.OR = 53;
TinyosParser.AND = 54;
TinyosParser.EQ = 55;
TinyosParser.NEQ = 56;
TinyosParser.GT = 57;
TinyosParser.LT = 58;
TinyosParser.GTEQ = 59;
TinyosParser.LTEQ = 60;
TinyosParser.PLUS = 61;
TinyosParser.MINUS = 62;
TinyosParser.MULT = 63;
TinyosParser.DIV = 64;
TinyosParser.MOD = 65;
TinyosParser.POW = 66;
TinyosParser.NOT = 67;
TinyosParser.ASSIGN = 68;
TinyosParser.TILDE = 69;
TinyosParser.QUESTION = 70;
TinyosParser.COLON = 71;
TinyosParser.INC = 72;
TinyosParser.DEC = 73;
TinyosParser.BITAND = 74;
TinyosParser.BITOR = 75;
TinyosParser.HASHTAG = 76;
TinyosParser.SCOL = 77;
TinyosParser.OBRACK = 78;
TinyosParser.CBRACK = 79;
TinyosParser.OPAR = 80;
TinyosParser.CPAR = 81;
TinyosParser.OBRACE = 82;
TinyosParser.CBRACE = 83;
TinyosParser.FORWARDARROW = 84;
TinyosParser.BACKARROW = 85;
TinyosParser.COLONCOLON = 86;
TinyosParser.AT = 87;
TinyosParser.COMMA = 88;
TinyosParser.DOT = 89;
TinyosParser.UNDERSCORE = 90;
TinyosParser.ID = 91;
TinyosParser.INT = 92;
TinyosParser.FLOAT = 93;
TinyosParser.STRING = 94;
TinyosParser.COMMENT = 95;
TinyosParser.LINE_COMMENT = 96;
TinyosParser.SPACE = 97;
TinyosParser.OTHER = 98;
TinyosParser.HEX = 99;

TinyosParser.RULE_compilationUnit = 0;
TinyosParser.RULE_includeDeclarationModule = 1;
TinyosParser.RULE_includeDeclarationConfiguration = 2;
TinyosParser.RULE_qualifiedName = 3;
TinyosParser.RULE_componentDeclaration = 4;
TinyosParser.RULE_moduleDeclaration = 5;
TinyosParser.RULE_moduleSignature = 6;
TinyosParser.RULE_moduleName = 7;
TinyosParser.RULE_moduleSignatureBody = 8;
TinyosParser.RULE_usesOrProvides = 9;
TinyosParser.RULE_usesState = 10;
TinyosParser.RULE_providesState = 11;
TinyosParser.RULE_usesInterfaceDescription = 12;
TinyosParser.RULE_providesInterfaceDescription = 13;
TinyosParser.RULE_interfaceNameAs = 14;
TinyosParser.RULE_interfaceName = 15;
TinyosParser.RULE_moduleImplementation = 16;
TinyosParser.RULE_moduleImplementationBody = 17;
TinyosParser.RULE_block = 18;
TinyosParser.RULE_stat = 19;
TinyosParser.RULE_packet_define = 20;
TinyosParser.RULE_call_stat = 21;
TinyosParser.RULE_call_condition_block = 22;
TinyosParser.RULE_define_stat = 23;
TinyosParser.RULE_statement = 24;
TinyosParser.RULE_event_stat = 25;
TinyosParser.RULE_event_condition_block = 26;
TinyosParser.RULE_event_stat_block = 27;
TinyosParser.RULE_task_stat = 28;
TinyosParser.RULE_task_condition_block = 29;
TinyosParser.RULE_task_stat_block = 30;
TinyosParser.RULE_static_stat = 31;
TinyosParser.RULE_static_condition_block = 32;
TinyosParser.RULE_static_stat_block = 33;
TinyosParser.RULE_other_stat = 34;
TinyosParser.RULE_other_condition_block = 35;
TinyosParser.RULE_other_stat_block = 36;
TinyosParser.RULE_enum_stat = 37;
TinyosParser.RULE_common_name = 38;
TinyosParser.RULE_if_stat = 39;
TinyosParser.RULE_if_condition_block = 40;
TinyosParser.RULE_if_stat_block = 41;
TinyosParser.RULE_while_stat = 42;
TinyosParser.RULE_while_stat_block = 43;
TinyosParser.RULE_for_stat = 44;
TinyosParser.RULE_for_stat_block = 45;
TinyosParser.RULE_switch_stat = 46;
TinyosParser.RULE_switch_condition_block = 47;
TinyosParser.RULE_switch_stat_block = 48;
TinyosParser.RULE_atomic_stat = 49;
TinyosParser.RULE_atomic_stat_block = 50;
TinyosParser.RULE_expr = 51;
TinyosParser.RULE_atom = 52;
TinyosParser.RULE_symbol = 53;
TinyosParser.RULE_singleDoubleArray = 54;
TinyosParser.RULE_arrayElement = 55;
TinyosParser.RULE_chars = 56;
TinyosParser.RULE_chars_no_comma = 57;
TinyosParser.RULE_reservedwords = 58;
TinyosParser.RULE_singleLine = 59;
TinyosParser.RULE_anystatement = 60;
TinyosParser.RULE_name_or_reserved = 61;
TinyosParser.RULE_name_with_char = 62;
TinyosParser.RULE_configurationDeclaration = 63;
TinyosParser.RULE_configurationSignature = 64;
TinyosParser.RULE_configurationSignatureBody = 65;
TinyosParser.RULE_configurationName = 66;
TinyosParser.RULE_configurationImplementation = 67;
TinyosParser.RULE_configurationImplementationBody = 68;
TinyosParser.RULE_configurationImplementationDescription = 69;
TinyosParser.RULE_platformDefinition = 70;
TinyosParser.RULE_platformDefinitionDescription = 71;
TinyosParser.RULE_componentsDefinition = 72;
TinyosParser.RULE_componentsDefinitionDetails = 73;
TinyosParser.RULE_componentsDefinitionName = 74;
TinyosParser.RULE_componentsWiring = 75;
TinyosParser.RULE_wiring = 76;
TinyosParser.RULE_wiringName = 77;
TinyosParser.RULE_componentsName = 78;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_compilationUnit;
    }

	componentDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ComponentDeclarationContext,i);
	    }
	};

	EOF() {
	    return this.getToken(TinyosParser.EOF, 0);
	};

	includeDeclarationModule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeDeclarationModuleContext);
	    } else {
	        return this.getTypedRuleContext(IncludeDeclarationModuleContext,i);
	    }
	};

	includeDeclarationConfiguration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeDeclarationConfigurationContext);
	    } else {
	        return this.getTypedRuleContext(IncludeDeclarationConfigurationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class IncludeDeclarationModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_includeDeclarationModule;
    }

	HASHTAG() {
	    return this.getToken(TinyosParser.HASHTAG, 0);
	};

	INCLUDE() {
	    return this.getToken(TinyosParser.INCLUDE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIncludeDeclarationModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIncludeDeclarationModule(this);
		}
	}


}



class IncludeDeclarationConfigurationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_includeDeclarationConfiguration;
    }

	HASHTAG() {
	    return this.getToken(TinyosParser.HASHTAG, 0);
	};

	INCLUDE() {
	    return this.getToken(TinyosParser.INCLUDE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIncludeDeclarationConfiguration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIncludeDeclarationConfiguration(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_qualifiedName;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class ComponentDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentDeclaration;
    }

	moduleDeclaration() {
	    return this.getTypedRuleContext(ModuleDeclarationContext,0);
	};

	configurationDeclaration() {
	    return this.getTypedRuleContext(ConfigurationDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentDeclaration(this);
		}
	}


}



class ModuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleDeclaration;
    }

	moduleSignature() {
	    return this.getTypedRuleContext(ModuleSignatureContext,0);
	};

	moduleImplementation() {
	    return this.getTypedRuleContext(ModuleImplementationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleDeclaration(this);
		}
	}


}



class ModuleSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleSignature;
    }

	MODULE() {
	    return this.getToken(TinyosParser.MODULE, 0);
	};

	moduleName() {
	    return this.getTypedRuleContext(ModuleNameContext,0);
	};

	moduleSignatureBody() {
	    return this.getTypedRuleContext(ModuleSignatureBodyContext,0);
	};

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleSignature(this);
		}
	}


}



class ModuleNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleName;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleName(this);
		}
	}


}



class ModuleSignatureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleSignatureBody;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	usesOrProvides = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsesOrProvidesContext);
	    } else {
	        return this.getTypedRuleContext(UsesOrProvidesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleSignatureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleSignatureBody(this);
		}
	}


}



class UsesOrProvidesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_usesOrProvides;
    }

	usesState() {
	    return this.getTypedRuleContext(UsesStateContext,0);
	};

	providesState() {
	    return this.getTypedRuleContext(ProvidesStateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterUsesOrProvides(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitUsesOrProvides(this);
		}
	}


}



class UsesStateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_usesState;
    }

	USES() {
	    return this.getToken(TinyosParser.USES, 0);
	};

	INTERFACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.INTERFACE);
	    } else {
	        return this.getToken(TinyosParser.INTERFACE, i);
	    }
	};


	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.SCOL);
	    } else {
	        return this.getToken(TinyosParser.SCOL, i);
	    }
	};


	usesInterfaceDescription = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsesInterfaceDescriptionContext);
	    } else {
	        return this.getTypedRuleContext(UsesInterfaceDescriptionContext,i);
	    }
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterUsesState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitUsesState(this);
		}
	}


}



class ProvidesStateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_providesState;
    }

	PROVIDES() {
	    return this.getToken(TinyosParser.PROVIDES, 0);
	};

	INTERFACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.INTERFACE);
	    } else {
	        return this.getToken(TinyosParser.INTERFACE, i);
	    }
	};


	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.SCOL);
	    } else {
	        return this.getToken(TinyosParser.SCOL, i);
	    }
	};


	providesInterfaceDescription = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProvidesInterfaceDescriptionContext);
	    } else {
	        return this.getTypedRuleContext(ProvidesInterfaceDescriptionContext,i);
	    }
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterProvidesState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitProvidesState(this);
		}
	}


}



class UsesInterfaceDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_usesInterfaceDescription;
    }

	interfaceNameAs() {
	    return this.getTypedRuleContext(InterfaceNameAsContext,0);
	};

	interfaceName() {
	    return this.getTypedRuleContext(InterfaceNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterUsesInterfaceDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitUsesInterfaceDescription(this);
		}
	}


}



class ProvidesInterfaceDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_providesInterfaceDescription;
    }

	interfaceNameAs() {
	    return this.getTypedRuleContext(InterfaceNameAsContext,0);
	};

	interfaceName() {
	    return this.getTypedRuleContext(InterfaceNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterProvidesInterfaceDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitProvidesInterfaceDescription(this);
		}
	}


}



class InterfaceNameAsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_interfaceNameAs;
    }

	interfaceName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceNameContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceNameContext,i);
	    }
	};

	AS() {
	    return this.getToken(TinyosParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterInterfaceNameAs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitInterfaceNameAs(this);
		}
	}


}



class InterfaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_interfaceName;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterInterfaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitInterfaceName(this);
		}
	}


}



class ModuleImplementationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleImplementation;
    }

	IMPLEMENTATION() {
	    return this.getToken(TinyosParser.IMPLEMENTATION, 0);
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	moduleImplementationBody() {
	    return this.getTypedRuleContext(ModuleImplementationBodyContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleImplementation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleImplementation(this);
		}
	}


}



class ModuleImplementationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_moduleImplementationBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterModuleImplementationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitModuleImplementationBody(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_block;
    }

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitBlock(this);
		}
	}


}



class StatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_stat;
        this._OTHER = null; // Token
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	event_stat() {
	    return this.getTypedRuleContext(Event_statContext,0);
	};

	task_stat() {
	    return this.getTypedRuleContext(Task_statContext,0);
	};

	static_stat() {
	    return this.getTypedRuleContext(Static_statContext,0);
	};

	if_stat() {
	    return this.getTypedRuleContext(If_statContext,0);
	};

	enum_stat() {
	    return this.getTypedRuleContext(Enum_statContext,0);
	};

	while_stat() {
	    return this.getTypedRuleContext(While_statContext,0);
	};

	for_stat() {
	    return this.getTypedRuleContext(For_statContext,0);
	};

	switch_stat() {
	    return this.getTypedRuleContext(Switch_statContext,0);
	};

	other_stat() {
	    return this.getTypedRuleContext(Other_statContext,0);
	};

	atomic_stat() {
	    return this.getTypedRuleContext(Atomic_statContext,0);
	};

	define_stat() {
	    return this.getTypedRuleContext(Define_statContext,0);
	};

	call_stat() {
	    return this.getTypedRuleContext(Call_statContext,0);
	};

	packet_define() {
	    return this.getTypedRuleContext(Packet_defineContext,0);
	};

	OTHER() {
	    return this.getToken(TinyosParser.OTHER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStat(this);
		}
	}


}



class Packet_defineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_packet_define;
    }

	TYPEDEF() {
	    return this.getToken(TinyosParser.TYPEDEF, 0);
	};

	common_name() {
	    return this.getTypedRuleContext(Common_nameContext,0);
	};

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterPacket_define(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitPacket_define(this);
		}
	}


}



class Call_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_call_stat;
    }

	CALL() {
	    return this.getToken(TinyosParser.CALL, 0);
	};

	common_name() {
	    return this.getTypedRuleContext(Common_nameContext,0);
	};

	call_condition_block() {
	    return this.getTypedRuleContext(Call_condition_blockContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterCall_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitCall_stat(this);
		}
	}


}



class Call_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_call_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterCall_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitCall_condition_block(this);
		}
	}


}



class Define_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_define_stat;
    }

	HASHTAG() {
	    return this.getToken(TinyosParser.HASHTAG, 0);
	};

	DEFINE() {
	    return this.getToken(TinyosParser.DEFINE, 0);
	};

	common_name() {
	    return this.getTypedRuleContext(Common_nameContext,0);
	};

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterDefine_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitDefine_stat(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_statement;
    }

	anystatement() {
	    return this.getTypedRuleContext(AnystatementContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class Event_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_event_stat;
    }

	EVENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.EVENT);
	    } else {
	        return this.getToken(TinyosParser.EVENT, i);
	    }
	};


	common_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_nameContext);
	    } else {
	        return this.getTypedRuleContext(Common_nameContext,i);
	    }
	};

	event_condition_block() {
	    return this.getTypedRuleContext(Event_condition_blockContext,0);
	};

	VOID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.VOID);
	    } else {
	        return this.getToken(TinyosParser.VOID, i);
	    }
	};


	event_stat_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Event_stat_blockContext);
	    } else {
	        return this.getTypedRuleContext(Event_stat_blockContext,i);
	    }
	};

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterEvent_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitEvent_stat(this);
		}
	}


}



class Event_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_event_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterEvent_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitEvent_condition_block(this);
		}
	}


}



class Event_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_event_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterEvent_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitEvent_stat_block(this);
		}
	}


}



class Task_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_task_stat;
    }

	TASK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.TASK);
	    } else {
	        return this.getToken(TinyosParser.TASK, i);
	    }
	};


	common_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_nameContext);
	    } else {
	        return this.getTypedRuleContext(Common_nameContext,i);
	    }
	};

	task_condition_block() {
	    return this.getTypedRuleContext(Task_condition_blockContext,0);
	};

	VOID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.VOID);
	    } else {
	        return this.getToken(TinyosParser.VOID, i);
	    }
	};


	task_stat_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Task_stat_blockContext);
	    } else {
	        return this.getTypedRuleContext(Task_stat_blockContext,i);
	    }
	};

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterTask_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitTask_stat(this);
		}
	}


}



class Task_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_task_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterTask_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitTask_condition_block(this);
		}
	}


}



class Task_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_task_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterTask_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitTask_stat_block(this);
		}
	}


}



class Static_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_static_stat;
    }

	STATIC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.STATIC);
	    } else {
	        return this.getToken(TinyosParser.STATIC, i);
	    }
	};


	common_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_nameContext);
	    } else {
	        return this.getTypedRuleContext(Common_nameContext,i);
	    }
	};

	static_condition_block() {
	    return this.getTypedRuleContext(Static_condition_blockContext,0);
	};

	VOID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.VOID);
	    } else {
	        return this.getToken(TinyosParser.VOID, i);
	    }
	};


	static_stat_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Static_stat_blockContext);
	    } else {
	        return this.getTypedRuleContext(Static_stat_blockContext,i);
	    }
	};

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStatic_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStatic_stat(this);
		}
	}


}



class Static_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_static_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStatic_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStatic_condition_block(this);
		}
	}


}



class Static_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_static_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStatic_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStatic_stat_block(this);
		}
	}


}



class Other_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_other_stat;
    }

	common_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_nameContext);
	    } else {
	        return this.getTypedRuleContext(Common_nameContext,i);
	    }
	};

	other_condition_block() {
	    return this.getTypedRuleContext(Other_condition_blockContext,0);
	};

	VOID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.VOID);
	    } else {
	        return this.getToken(TinyosParser.VOID, i);
	    }
	};


	other_stat_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Other_stat_blockContext);
	    } else {
	        return this.getTypedRuleContext(Other_stat_blockContext,i);
	    }
	};

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterOther_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitOther_stat(this);
		}
	}


}



class Other_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_other_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterOther_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitOther_condition_block(this);
		}
	}


}



class Other_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_other_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterOther_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitOther_stat_block(this);
		}
	}


}



class Enum_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_enum_stat;
    }

	ENUM() {
	    return this.getToken(TinyosParser.ENUM, 0);
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.COMMA);
	    } else {
	        return this.getToken(TinyosParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterEnum_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitEnum_stat(this);
		}
	}


}



class Common_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_common_name;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	name_or_reserved() {
	    return this.getTypedRuleContext(Name_or_reservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterCommon_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitCommon_name(this);
		}
	}


}



class If_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_if_stat;
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.IF);
	    } else {
	        return this.getToken(TinyosParser.IF, i);
	    }
	};


	if_condition_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(If_condition_blockContext);
	    } else {
	        return this.getTypedRuleContext(If_condition_blockContext,i);
	    }
	};

	ELSE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.ELSE);
	    } else {
	        return this.getToken(TinyosParser.ELSE, i);
	    }
	};


	if_stat_block() {
	    return this.getTypedRuleContext(If_stat_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIf_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIf_stat(this);
		}
	}


}



class If_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_if_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	if_stat_block() {
	    return this.getTypedRuleContext(If_stat_blockContext,0);
	};

	name_or_reserved = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Name_or_reservedContext);
	    } else {
	        return this.getTypedRuleContext(Name_or_reservedContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIf_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIf_condition_block(this);
		}
	}


}



class If_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_if_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	stat() {
	    return this.getTypedRuleContext(StatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIf_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIf_stat_block(this);
		}
	}


}



class While_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_while_stat;
    }

	WHILE() {
	    return this.getToken(TinyosParser.WHILE, 0);
	};

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	while_stat_block() {
	    return this.getTypedRuleContext(While_stat_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterWhile_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitWhile_stat(this);
		}
	}


}



class While_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_while_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	stat() {
	    return this.getTypedRuleContext(StatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterWhile_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitWhile_stat_block(this);
		}
	}


}



class For_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_for_stat;
    }

	FOR() {
	    return this.getToken(TinyosParser.FOR, 0);
	};

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	for_stat_block() {
	    return this.getTypedRuleContext(For_stat_blockContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	anystatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnystatementContext);
	    } else {
	        return this.getTypedRuleContext(AnystatementContext,i);
	    }
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.SCOL);
	    } else {
	        return this.getToken(TinyosParser.SCOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterFor_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitFor_stat(this);
		}
	}


}



class For_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_for_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	stat() {
	    return this.getTypedRuleContext(StatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterFor_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitFor_stat_block(this);
		}
	}


}



class Switch_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_switch_stat;
    }

	SWITCH() {
	    return this.getToken(TinyosParser.SWITCH, 0);
	};

	switch_condition_block() {
	    return this.getTypedRuleContext(Switch_condition_blockContext,0);
	};

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	switch_stat_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_stat_blockContext);
	    } else {
	        return this.getTypedRuleContext(Switch_stat_blockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSwitch_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSwitch_stat(this);
		}
	}


}



class Switch_condition_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_switch_condition_block;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSwitch_condition_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSwitch_condition_block(this);
		}
	}


}



class Switch_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_switch_stat_block;
    }

	CASE() {
	    return this.getToken(TinyosParser.CASE, 0);
	};

	COLON() {
	    return this.getToken(TinyosParser.COLON, 0);
	};

	BREAK() {
	    return this.getToken(TinyosParser.BREAK, 0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	anystatement() {
	    return this.getTypedRuleContext(AnystatementContext,0);
	};

	stat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatContext);
	    } else {
	        return this.getTypedRuleContext(StatContext,i);
	    }
	};

	DEFAULT() {
	    return this.getToken(TinyosParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSwitch_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSwitch_stat_block(this);
		}
	}


}



class Atomic_statContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_atomic_stat;
    }

	ATOMIC() {
	    return this.getToken(TinyosParser.ATOMIC, 0);
	};

	atomic_stat_block() {
	    return this.getTypedRuleContext(Atomic_stat_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAtomic_stat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAtomic_stat(this);
		}
	}


}



class Atomic_stat_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_atomic_stat_block;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	if_stat() {
	    return this.getTypedRuleContext(If_statContext,0);
	};

	other_stat() {
	    return this.getTypedRuleContext(Other_statContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAtomic_stat_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAtomic_stat_block(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NotExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(TinyosParser.NOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterNotExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitNotExpr(this);
		}
	}


}

TinyosParser.NotExprContext = NotExprContext;

class UnaryMinusExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(TinyosParser.MINUS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterUnaryMinusExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitUnaryMinusExpr(this);
		}
	}


}

TinyosParser.UnaryMinusExprContext = UnaryMinusExprContext;

class SinglelineExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSinglelineExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSinglelineExpr(this);
		}
	}


}

TinyosParser.SinglelineExprContext = SinglelineExprContext;

class SingleDoubleArrayExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleDoubleArray() {
	    return this.getTypedRuleContext(SingleDoubleArrayContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSingleDoubleArrayExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSingleDoubleArrayExpr(this);
		}
	}


}

TinyosParser.SingleDoubleArrayExprContext = SingleDoubleArrayExprContext;

class MultiplicationExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	MULT() {
	    return this.getToken(TinyosParser.MULT, 0);
	};

	DIV() {
	    return this.getToken(TinyosParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(TinyosParser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterMultiplicationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitMultiplicationExpr(this);
		}
	}


}

TinyosParser.MultiplicationExprContext = MultiplicationExprContext;

class AtomExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAtomExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAtomExpr(this);
		}
	}


}

TinyosParser.AtomExprContext = AtomExprContext;

class OrExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OR() {
	    return this.getToken(TinyosParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitOrExpr(this);
		}
	}


}

TinyosParser.OrExprContext = OrExprContext;

class AdditiveExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(TinyosParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(TinyosParser.MINUS, 0);
	};

	ASSIGN() {
	    return this.getToken(TinyosParser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAdditiveExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAdditiveExpr(this);
		}
	}


}

TinyosParser.AdditiveExprContext = AdditiveExprContext;

class PowExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	POW() {
	    return this.getToken(TinyosParser.POW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterPowExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitPowExpr(this);
		}
	}


}

TinyosParser.PowExprContext = PowExprContext;

class RelationalExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	LTEQ() {
	    return this.getToken(TinyosParser.LTEQ, 0);
	};

	GTEQ() {
	    return this.getToken(TinyosParser.GTEQ, 0);
	};

	LT() {
	    return this.getToken(TinyosParser.LT, 0);
	};

	GT() {
	    return this.getToken(TinyosParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterRelationalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitRelationalExpr(this);
		}
	}


}

TinyosParser.RelationalExprContext = RelationalExprContext;

class EqualityExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	EQ() {
	    return this.getToken(TinyosParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(TinyosParser.NEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterEqualityExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitEqualityExpr(this);
		}
	}


}

TinyosParser.EqualityExprContext = EqualityExprContext;

class AndExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	AND() {
	    return this.getToken(TinyosParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAndExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAndExpr(this);
		}
	}


}

TinyosParser.AndExprContext = AndExprContext;

class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_atom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IdAtomContext extends AtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(TinyosParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterIdAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitIdAtom(this);
		}
	}


}

TinyosParser.IdAtomContext = IdAtomContext;

class BooleanAtomContext extends AtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUE() {
	    return this.getToken(TinyosParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(TinyosParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterBooleanAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitBooleanAtom(this);
		}
	}


}

TinyosParser.BooleanAtomContext = BooleanAtomContext;

class HexadecimalAtomContext extends AtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HEX() {
	    return this.getToken(TinyosParser.HEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterHexadecimalAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitHexadecimalAtom(this);
		}
	}


}

TinyosParser.HexadecimalAtomContext = HexadecimalAtomContext;

class StringAtomContext extends AtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(TinyosParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterStringAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitStringAtom(this);
		}
	}


}

TinyosParser.StringAtomContext = StringAtomContext;

class NumberAtomContext extends AtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INT() {
	    return this.getToken(TinyosParser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(TinyosParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterNumberAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitNumberAtom(this);
		}
	}


}

TinyosParser.NumberAtomContext = NumberAtomContext;

class SymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_symbol;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OthercharContext extends SymbolContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OTHER() {
	    return this.getToken(TinyosParser.OTHER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterOtherchar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitOtherchar(this);
		}
	}


}

TinyosParser.OthercharContext = OthercharContext;

class SingleDoubleArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_singleDoubleArray;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSingleDoubleArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSingleDoubleArray(this);
		}
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_arrayElement;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.COMMA);
	    } else {
	        return this.getToken(TinyosParser.COMMA, i);
	    }
	};


	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterArrayElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitArrayElement(this);
		}
	}


}



class CharsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_chars;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	INC() {
	    return this.getToken(TinyosParser.INC, 0);
	};

	DEC() {
	    return this.getToken(TinyosParser.DEC, 0);
	};

	FORWARDARROW() {
	    return this.getToken(TinyosParser.FORWARDARROW, 0);
	};

	BACKARROW() {
	    return this.getToken(TinyosParser.BACKARROW, 0);
	};

	COLONCOLON() {
	    return this.getToken(TinyosParser.COLONCOLON, 0);
	};

	AT() {
	    return this.getToken(TinyosParser.AT, 0);
	};

	COMMA() {
	    return this.getToken(TinyosParser.COMMA, 0);
	};

	MULT() {
	    return this.getToken(TinyosParser.MULT, 0);
	};

	GT() {
	    return this.getToken(TinyosParser.GT, 0);
	};

	LT() {
	    return this.getToken(TinyosParser.LT, 0);
	};

	DOT() {
	    return this.getToken(TinyosParser.DOT, 0);
	};

	ASSIGN() {
	    return this.getToken(TinyosParser.ASSIGN, 0);
	};

	BITAND() {
	    return this.getToken(TinyosParser.BITAND, 0);
	};

	OBRACK() {
	    return this.getToken(TinyosParser.OBRACK, 0);
	};

	CBRACK() {
	    return this.getToken(TinyosParser.CBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterChars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitChars(this);
		}
	}


}



class Chars_no_commaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_chars_no_comma;
    }

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	INC() {
	    return this.getToken(TinyosParser.INC, 0);
	};

	DEC() {
	    return this.getToken(TinyosParser.DEC, 0);
	};

	FORWARDARROW() {
	    return this.getToken(TinyosParser.FORWARDARROW, 0);
	};

	BACKARROW() {
	    return this.getToken(TinyosParser.BACKARROW, 0);
	};

	COLONCOLON() {
	    return this.getToken(TinyosParser.COLONCOLON, 0);
	};

	AT() {
	    return this.getToken(TinyosParser.AT, 0);
	};

	MULT() {
	    return this.getToken(TinyosParser.MULT, 0);
	};

	GT() {
	    return this.getToken(TinyosParser.GT, 0);
	};

	LT() {
	    return this.getToken(TinyosParser.LT, 0);
	};

	DOT() {
	    return this.getToken(TinyosParser.DOT, 0);
	};

	ASSIGN() {
	    return this.getToken(TinyosParser.ASSIGN, 0);
	};

	BITAND() {
	    return this.getToken(TinyosParser.BITAND, 0);
	};

	OBRACK() {
	    return this.getToken(TinyosParser.OBRACK, 0);
	};

	CBRACK() {
	    return this.getToken(TinyosParser.CBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterChars_no_comma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitChars_no_comma(this);
		}
	}


}



class ReservedwordsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_reservedwords;
    }

	VOID() {
	    return this.getToken(TinyosParser.VOID, 0);
	};

	RETURN() {
	    return this.getToken(TinyosParser.RETURN, 0);
	};

	AS() {
	    return this.getToken(TinyosParser.AS, 0);
	};

	POST() {
	    return this.getToken(TinyosParser.POST, 0);
	};

	ATOMIC() {
	    return this.getToken(TinyosParser.ATOMIC, 0);
	};

	ERROR() {
	    return this.getToken(TinyosParser.ERROR, 0);
	};

	ABSTRACT() {
	    return this.getToken(TinyosParser.ABSTRACT, 0);
	};

	NEW() {
	    return this.getToken(TinyosParser.NEW, 0);
	};

	CALL() {
	    return this.getToken(TinyosParser.CALL, 0);
	};

	BREAK() {
	    return this.getToken(TinyosParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterReservedwords(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitReservedwords(this);
		}
	}


}



class SingleLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_singleLine;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	chars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharsContext);
	    } else {
	        return this.getTypedRuleContext(CharsContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.DOT);
	    } else {
	        return this.getToken(TinyosParser.DOT, i);
	    }
	};


	reservedwords = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReservedwordsContext);
	    } else {
	        return this.getTypedRuleContext(ReservedwordsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterSingleLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitSingleLine(this);
		}
	}


}



class AnystatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_anystatement;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	chars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharsContext);
	    } else {
	        return this.getTypedRuleContext(CharsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterAnystatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitAnystatement(this);
		}
	}


}



class Name_or_reservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_name_or_reserved;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	chars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharsContext);
	    } else {
	        return this.getTypedRuleContext(CharsContext,i);
	    }
	};

	reservedwords = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReservedwordsContext);
	    } else {
	        return this.getTypedRuleContext(ReservedwordsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterName_or_reserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitName_or_reserved(this);
		}
	}


}



class Name_with_charContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_name_with_char;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	chars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharsContext);
	    } else {
	        return this.getTypedRuleContext(CharsContext,i);
	    }
	};

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.DOT);
	    } else {
	        return this.getToken(TinyosParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterName_with_char(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitName_with_char(this);
		}
	}


}



class ConfigurationDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationDeclaration;
    }

	configurationSignature() {
	    return this.getTypedRuleContext(ConfigurationSignatureContext,0);
	};

	configurationImplementation() {
	    return this.getTypedRuleContext(ConfigurationImplementationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationDeclaration(this);
		}
	}


}



class ConfigurationSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationSignature;
    }

	COFIGURATION() {
	    return this.getToken(TinyosParser.COFIGURATION, 0);
	};

	configurationName() {
	    return this.getTypedRuleContext(ConfigurationNameContext,0);
	};

	configurationSignatureBody() {
	    return this.getTypedRuleContext(ConfigurationSignatureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationSignature(this);
		}
	}


}



class ConfigurationSignatureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationSignatureBody;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationSignatureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationSignatureBody(this);
		}
	}


}



class ConfigurationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationName;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationName(this);
		}
	}


}



class ConfigurationImplementationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationImplementation;
    }

	IMPLEMENTATION() {
	    return this.getToken(TinyosParser.IMPLEMENTATION, 0);
	};

	configurationImplementationBody() {
	    return this.getTypedRuleContext(ConfigurationImplementationBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationImplementation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationImplementation(this);
		}
	}


}



class ConfigurationImplementationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationImplementationBody;
    }

	OBRACE() {
	    return this.getToken(TinyosParser.OBRACE, 0);
	};

	configurationImplementationDescription() {
	    return this.getTypedRuleContext(ConfigurationImplementationDescriptionContext,0);
	};

	CBRACE() {
	    return this.getToken(TinyosParser.CBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationImplementationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationImplementationBody(this);
		}
	}


}



class ConfigurationImplementationDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_configurationImplementationDescription;
    }

	componentsDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentsDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ComponentsDefinitionContext,i);
	    }
	};

	componentsWiring = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentsWiringContext);
	    } else {
	        return this.getTypedRuleContext(ComponentsWiringContext,i);
	    }
	};

	platformDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlatformDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PlatformDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterConfigurationImplementationDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitConfigurationImplementationDescription(this);
		}
	}


}



class PlatformDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_platformDefinition;
    }

	HASHTAG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.HASHTAG);
	    } else {
	        return this.getToken(TinyosParser.HASHTAG, i);
	    }
	};


	IF() {
	    return this.getToken(TinyosParser.IF, 0);
	};

	ENDIF() {
	    return this.getToken(TinyosParser.ENDIF, 0);
	};

	platformDefinitionDescription = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlatformDefinitionDescriptionContext);
	    } else {
	        return this.getTypedRuleContext(PlatformDefinitionDescriptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterPlatformDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitPlatformDefinition(this);
		}
	}


}



class PlatformDefinitionDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_platformDefinitionDescription;
    }

	singleLine() {
	    return this.getTypedRuleContext(SingleLineContext,0);
	};

	componentsDefinition() {
	    return this.getTypedRuleContext(ComponentsDefinitionContext,0);
	};

	DEFINED() {
	    return this.getToken(TinyosParser.DEFINED, 0);
	};

	HASHTAG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.HASHTAG);
	    } else {
	        return this.getToken(TinyosParser.HASHTAG, i);
	    }
	};


	ELIF() {
	    return this.getToken(TinyosParser.ELIF, 0);
	};

	ELSE() {
	    return this.getToken(TinyosParser.ELSE, 0);
	};

	ERROR() {
	    return this.getToken(TinyosParser.ERROR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterPlatformDefinitionDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitPlatformDefinitionDescription(this);
		}
	}


}



class ComponentsDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentsDefinition;
    }

	COMPONENTS() {
	    return this.getToken(TinyosParser.COMPONENTS, 0);
	};

	componentsDefinitionDetails() {
	    return this.getTypedRuleContext(ComponentsDefinitionDetailsContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentsDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentsDefinition(this);
		}
	}


}



class ComponentsDefinitionDetailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentsDefinitionDetails;
    }

	componentsDefinitionName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentsDefinitionNameContext);
	    } else {
	        return this.getTypedRuleContext(ComponentsDefinitionNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(TinyosParser.COMMA);
	    } else {
	        return this.getToken(TinyosParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentsDefinitionDetails(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentsDefinitionDetails(this);
		}
	}


}



class ComponentsDefinitionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentsDefinitionName;
    }

	componentsName() {
	    return this.getTypedRuleContext(ComponentsNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentsDefinitionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentsDefinitionName(this);
		}
	}


}



class ComponentsWiringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentsWiring;
    }

	wiring() {
	    return this.getTypedRuleContext(WiringContext,0);
	};

	SCOL() {
	    return this.getToken(TinyosParser.SCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentsWiring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentsWiring(this);
		}
	}


}



class WiringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_wiring;
    }

	wiringName() {
	    return this.getTypedRuleContext(WiringNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterWiring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitWiring(this);
		}
	}


}



class WiringNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_wiringName;
    }

	componentsName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentsNameContext);
	    } else {
	        return this.getTypedRuleContext(ComponentsNameContext,i);
	    }
	};

	FORWARDARROW() {
	    return this.getToken(TinyosParser.FORWARDARROW, 0);
	};

	BACKARROW() {
	    return this.getToken(TinyosParser.BACKARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterWiringName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitWiringName(this);
		}
	}


}



class ComponentsNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TinyosParser.RULE_componentsName;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	name_with_char() {
	    return this.getTypedRuleContext(Name_with_charContext,0);
	};

	NEW() {
	    return this.getToken(TinyosParser.NEW, 0);
	};

	OPAR() {
	    return this.getToken(TinyosParser.OPAR, 0);
	};

	CPAR() {
	    return this.getToken(TinyosParser.CPAR, 0);
	};

	AS() {
	    return this.getToken(TinyosParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.enterComponentsName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TinyosParserListener ) {
	        listener.exitComponentsName(this);
		}
	}


}




TinyosParser.CompilationUnitContext = CompilationUnitContext; 
TinyosParser.IncludeDeclarationModuleContext = IncludeDeclarationModuleContext; 
TinyosParser.IncludeDeclarationConfigurationContext = IncludeDeclarationConfigurationContext; 
TinyosParser.QualifiedNameContext = QualifiedNameContext; 
TinyosParser.ComponentDeclarationContext = ComponentDeclarationContext; 
TinyosParser.ModuleDeclarationContext = ModuleDeclarationContext; 
TinyosParser.ModuleSignatureContext = ModuleSignatureContext; 
TinyosParser.ModuleNameContext = ModuleNameContext; 
TinyosParser.ModuleSignatureBodyContext = ModuleSignatureBodyContext; 
TinyosParser.UsesOrProvidesContext = UsesOrProvidesContext; 
TinyosParser.UsesStateContext = UsesStateContext; 
TinyosParser.ProvidesStateContext = ProvidesStateContext; 
TinyosParser.UsesInterfaceDescriptionContext = UsesInterfaceDescriptionContext; 
TinyosParser.ProvidesInterfaceDescriptionContext = ProvidesInterfaceDescriptionContext; 
TinyosParser.InterfaceNameAsContext = InterfaceNameAsContext; 
TinyosParser.InterfaceNameContext = InterfaceNameContext; 
TinyosParser.ModuleImplementationContext = ModuleImplementationContext; 
TinyosParser.ModuleImplementationBodyContext = ModuleImplementationBodyContext; 
TinyosParser.BlockContext = BlockContext; 
TinyosParser.StatContext = StatContext; 
TinyosParser.Packet_defineContext = Packet_defineContext; 
TinyosParser.Call_statContext = Call_statContext; 
TinyosParser.Call_condition_blockContext = Call_condition_blockContext; 
TinyosParser.Define_statContext = Define_statContext; 
TinyosParser.StatementContext = StatementContext; 
TinyosParser.Event_statContext = Event_statContext; 
TinyosParser.Event_condition_blockContext = Event_condition_blockContext; 
TinyosParser.Event_stat_blockContext = Event_stat_blockContext; 
TinyosParser.Task_statContext = Task_statContext; 
TinyosParser.Task_condition_blockContext = Task_condition_blockContext; 
TinyosParser.Task_stat_blockContext = Task_stat_blockContext; 
TinyosParser.Static_statContext = Static_statContext; 
TinyosParser.Static_condition_blockContext = Static_condition_blockContext; 
TinyosParser.Static_stat_blockContext = Static_stat_blockContext; 
TinyosParser.Other_statContext = Other_statContext; 
TinyosParser.Other_condition_blockContext = Other_condition_blockContext; 
TinyosParser.Other_stat_blockContext = Other_stat_blockContext; 
TinyosParser.Enum_statContext = Enum_statContext; 
TinyosParser.Common_nameContext = Common_nameContext; 
TinyosParser.If_statContext = If_statContext; 
TinyosParser.If_condition_blockContext = If_condition_blockContext; 
TinyosParser.If_stat_blockContext = If_stat_blockContext; 
TinyosParser.While_statContext = While_statContext; 
TinyosParser.While_stat_blockContext = While_stat_blockContext; 
TinyosParser.For_statContext = For_statContext; 
TinyosParser.For_stat_blockContext = For_stat_blockContext; 
TinyosParser.Switch_statContext = Switch_statContext; 
TinyosParser.Switch_condition_blockContext = Switch_condition_blockContext; 
TinyosParser.Switch_stat_blockContext = Switch_stat_blockContext; 
TinyosParser.Atomic_statContext = Atomic_statContext; 
TinyosParser.Atomic_stat_blockContext = Atomic_stat_blockContext; 
TinyosParser.ExprContext = ExprContext; 
TinyosParser.AtomContext = AtomContext; 
TinyosParser.SymbolContext = SymbolContext; 
TinyosParser.SingleDoubleArrayContext = SingleDoubleArrayContext; 
TinyosParser.ArrayElementContext = ArrayElementContext; 
TinyosParser.CharsContext = CharsContext; 
TinyosParser.Chars_no_commaContext = Chars_no_commaContext; 
TinyosParser.ReservedwordsContext = ReservedwordsContext; 
TinyosParser.SingleLineContext = SingleLineContext; 
TinyosParser.AnystatementContext = AnystatementContext; 
TinyosParser.Name_or_reservedContext = Name_or_reservedContext; 
TinyosParser.Name_with_charContext = Name_with_charContext; 
TinyosParser.ConfigurationDeclarationContext = ConfigurationDeclarationContext; 
TinyosParser.ConfigurationSignatureContext = ConfigurationSignatureContext; 
TinyosParser.ConfigurationSignatureBodyContext = ConfigurationSignatureBodyContext; 
TinyosParser.ConfigurationNameContext = ConfigurationNameContext; 
TinyosParser.ConfigurationImplementationContext = ConfigurationImplementationContext; 
TinyosParser.ConfigurationImplementationBodyContext = ConfigurationImplementationBodyContext; 
TinyosParser.ConfigurationImplementationDescriptionContext = ConfigurationImplementationDescriptionContext; 
TinyosParser.PlatformDefinitionContext = PlatformDefinitionContext; 
TinyosParser.PlatformDefinitionDescriptionContext = PlatformDefinitionDescriptionContext; 
TinyosParser.ComponentsDefinitionContext = ComponentsDefinitionContext; 
TinyosParser.ComponentsDefinitionDetailsContext = ComponentsDefinitionDetailsContext; 
TinyosParser.ComponentsDefinitionNameContext = ComponentsDefinitionNameContext; 
TinyosParser.ComponentsWiringContext = ComponentsWiringContext; 
TinyosParser.WiringContext = WiringContext; 
TinyosParser.WiringNameContext = WiringNameContext; 
TinyosParser.ComponentsNameContext = ComponentsNameContext; 
