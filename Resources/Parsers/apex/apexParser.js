// Generated from Resources/Parsers/apex/apex.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import apexListener from './apexListener.js';
const serializedATN = [4,1,121,1373,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,1,0,3,0,218,8,0,1,0,5,0,221,8,0,10,0,12,0,224,9,
0,1,0,5,0,227,8,0,10,0,12,0,230,9,0,1,0,1,0,1,1,5,1,235,8,1,10,1,12,1,238,
9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,246,8,2,1,2,1,2,1,2,3,2,251,8,2,1,2,1,2,
1,3,5,3,256,8,3,10,3,12,3,259,9,3,1,3,1,3,5,3,263,8,3,10,3,12,3,266,9,3,
1,3,1,3,5,3,270,8,3,10,3,12,3,273,9,3,1,3,1,3,5,3,277,8,3,10,3,12,3,280,
9,3,1,3,1,3,3,3,284,8,3,1,4,1,4,3,4,288,8,4,1,5,1,5,3,5,292,8,5,1,6,1,6,
3,6,296,8,6,1,7,1,7,1,7,3,7,301,8,7,1,7,1,7,3,7,305,8,7,1,7,1,7,3,7,309,
8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,317,8,8,10,8,12,8,320,9,8,1,8,1,8,1,9,1,
9,1,9,3,9,327,8,9,1,10,1,10,1,10,5,10,332,8,10,10,10,12,10,335,9,10,1,11,
1,11,1,11,1,11,3,11,341,8,11,1,11,1,11,3,11,345,8,11,1,11,3,11,348,8,11,
1,11,3,11,351,8,11,1,11,1,11,1,12,1,12,1,12,5,12,358,8,12,10,12,12,12,361,
9,12,1,13,5,13,364,8,13,10,13,12,13,367,9,13,1,13,1,13,3,13,371,8,13,1,13,
3,13,374,8,13,1,14,1,14,5,14,378,8,14,10,14,12,14,381,9,14,1,15,1,15,1,15,
3,15,386,8,15,1,15,1,15,3,15,390,8,15,1,15,1,15,1,16,1,16,1,16,5,16,397,
8,16,10,16,12,16,400,9,16,1,17,1,17,5,17,404,8,17,10,17,12,17,407,9,17,1,
17,1,17,1,18,1,18,5,18,413,8,18,10,18,12,18,416,9,18,1,18,1,18,1,19,1,19,
3,19,422,8,19,1,19,1,19,5,19,426,8,19,10,19,12,19,429,9,19,1,19,3,19,432,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,444,8,20,1,21,
3,21,447,8,21,1,21,1,21,3,21,451,8,21,1,21,1,21,1,21,1,21,5,21,457,8,21,
10,21,12,21,460,9,21,1,21,1,21,3,21,464,8,21,1,21,1,21,3,21,468,8,21,1,22,
1,22,1,22,1,23,1,23,1,23,1,23,3,23,477,8,23,1,23,1,23,1,24,1,24,1,24,1,25,
1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,3,27,495,8,27,1,27,1,27,
1,28,5,28,500,8,28,10,28,12,28,503,9,28,1,28,1,28,3,28,507,8,28,1,29,1,29,
1,29,1,29,1,29,1,29,1,29,3,29,516,8,29,1,30,1,30,1,30,1,30,5,30,522,8,30,
10,30,12,30,525,9,30,1,30,1,30,1,31,1,31,1,31,5,31,532,8,31,10,31,12,31,
535,9,31,1,31,1,31,1,31,1,32,1,32,3,32,542,8,32,1,32,1,32,1,32,1,32,5,32,
548,8,32,10,32,12,32,551,9,32,1,32,1,32,3,32,555,8,32,1,32,1,32,1,33,1,33,
1,33,1,34,1,34,1,34,5,34,565,8,34,10,34,12,34,568,9,34,1,35,1,35,1,35,3,
35,573,8,35,1,36,1,36,1,36,5,36,578,8,36,10,36,12,36,581,9,36,1,37,1,37,
3,37,585,8,37,1,38,1,38,1,38,1,38,5,38,591,8,38,10,38,12,38,594,9,38,1,38,
3,38,597,8,38,3,38,599,8,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,5,40,608,
8,40,10,40,12,40,611,9,40,1,40,1,40,1,40,5,40,616,8,40,10,40,12,40,619,9,
40,3,40,621,8,40,1,41,1,41,3,41,625,8,41,1,41,1,41,1,41,3,41,630,8,41,5,
41,632,8,41,10,41,12,41,635,9,41,1,41,1,41,3,41,639,8,41,1,42,1,42,1,43,
1,43,1,43,1,43,5,43,647,8,43,10,43,12,43,650,9,43,1,43,1,43,1,44,1,44,1,
44,1,44,3,44,658,8,44,3,44,660,8,44,1,45,1,45,1,45,5,45,665,8,45,10,45,12,
45,668,9,45,1,46,1,46,3,46,672,8,46,1,46,1,46,1,47,1,47,1,47,5,47,679,8,
47,10,47,12,47,682,9,47,1,47,1,47,3,47,686,8,47,1,47,3,47,689,8,47,1,48,
5,48,692,8,48,10,48,12,48,695,9,48,1,48,1,48,1,48,1,49,5,49,701,8,49,10,
49,12,49,704,9,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,
5,52,717,8,52,10,52,12,52,720,9,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,
54,729,8,54,1,54,3,54,732,8,54,1,55,1,55,1,56,1,56,1,56,5,56,739,8,56,10,
56,12,56,742,9,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,3,58,751,8,58,1,59,
1,59,1,59,1,59,5,59,757,8,59,10,59,12,59,760,9,59,3,59,762,8,59,1,59,3,59,
765,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,776,8,61,10,61,
12,61,779,9,61,1,61,1,61,1,62,5,62,784,8,62,10,62,12,62,787,9,62,1,62,1,
62,3,62,791,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,799,8,63,1,63,1,63,3,
63,803,8,63,1,63,1,63,3,63,807,8,63,1,63,1,63,3,63,811,8,63,3,63,813,8,63,
1,64,1,64,3,64,817,8,64,1,65,1,65,1,65,1,65,3,65,823,8,65,1,66,1,66,1,67,
1,67,1,67,1,68,1,68,5,68,832,8,68,10,68,12,68,835,9,68,1,68,1,68,1,69,1,
69,1,69,3,69,842,8,69,1,70,1,70,1,70,1,71,5,71,848,8,71,10,71,12,71,851,
9,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,862,8,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,4,72,889,8,72,11,72,12,72,890,
1,72,3,72,894,8,72,1,72,3,72,897,8,72,1,72,1,72,1,72,1,72,5,72,903,8,72,
10,72,12,72,906,9,72,1,72,3,72,909,8,72,1,72,1,72,3,72,913,8,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,3,72,922,8,72,1,72,1,72,1,72,3,72,927,8,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,940,8,72,1,73,5,73,
943,8,73,10,73,12,73,946,9,73,1,73,1,73,3,73,950,8,73,1,74,1,74,1,74,3,74,
955,8,74,1,75,1,75,1,75,3,75,960,8,75,1,76,1,76,1,76,5,76,965,8,76,10,76,
12,76,968,9,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,5,77,978,8,77,10,
77,12,77,981,9,77,1,78,1,78,1,78,1,79,1,79,1,79,3,79,989,8,79,1,79,1,79,
1,80,1,80,1,80,5,80,996,8,80,10,80,12,80,999,9,80,1,81,5,81,1002,8,81,10,
81,12,81,1005,9,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,3,82,1014,8,82,1,82,
1,82,3,82,1018,8,82,1,82,1,82,3,82,1022,8,82,3,82,1024,8,82,1,83,1,83,3,
83,1028,8,83,1,84,5,84,1031,8,84,10,84,12,84,1034,9,84,1,84,1,84,1,84,1,
84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1050,8,87,10,87,
12,87,1053,9,87,1,88,1,88,1,89,1,89,1,90,1,90,1,90,5,90,1062,8,90,10,90,
12,90,1065,9,90,1,91,1,91,1,91,3,91,1070,8,91,1,92,1,92,1,92,1,92,1,92,1,
92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1085,8,92,1,92,1,92,1,92,1,92,
1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1101,8,92,1,92,1,
92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
92,1,92,1,92,1,92,1,92,1,92,3,92,1139,8,92,1,92,1,92,1,92,1,92,1,92,1,92,
3,92,1147,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,1,92,3,92,1177,8,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1185,8,92,10,
92,12,92,1188,9,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1209,8,93,1,93,3,93,1212,8,
93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1223,8,94,3,94,1225,
8,94,1,95,1,95,3,95,1229,8,95,1,95,1,95,1,95,3,95,1234,8,95,5,95,1236,8,
95,10,95,12,95,1239,9,95,1,95,1,95,1,95,3,95,1244,8,95,1,96,1,96,3,96,1248,
8,96,1,96,1,96,1,97,1,97,1,97,1,97,5,97,1256,8,97,10,97,12,97,1259,9,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,1268,8,97,10,97,12,97,1271,9,97,
1,97,1,97,5,97,1275,8,97,10,97,12,97,1278,9,97,3,97,1280,8,97,1,98,1,98,
1,98,1,98,3,98,1286,8,98,1,98,1,98,1,98,3,98,1291,8,98,1,98,1,98,1,98,3,
98,1296,8,98,1,98,1,98,1,98,3,98,1301,8,98,5,98,1303,8,98,10,98,12,98,1306,
9,98,1,98,1,98,3,98,1310,8,98,1,99,1,99,1,99,1,99,3,99,1316,8,99,1,99,1,
99,1,99,3,99,1321,8,99,5,99,1323,8,99,10,99,12,99,1326,9,99,1,99,1,99,3,
99,1330,8,99,1,100,1,100,3,100,1334,8,100,1,101,1,101,1,101,1,102,1,102,
1,102,1,102,1,103,1,103,1,103,3,103,1346,8,103,1,104,1,104,1,104,3,104,1351,
8,104,1,105,1,105,1,105,1,105,3,105,1357,8,105,3,105,1359,8,105,1,106,1,
106,1,106,1,106,3,106,1365,8,106,1,107,1,107,3,107,1369,8,107,1,107,1,107,
1,107,0,1,184,108,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
200,202,204,206,208,210,212,214,0,15,3,0,31,31,41,41,45,45,7,0,3,4,7,7,20,
20,34,36,39,39,50,53,60,60,5,0,9,9,11,11,22,22,29,29,38,38,2,0,19,19,40,
40,1,0,62,67,2,0,55,55,57,59,1,0,90,93,1,0,80,81,2,0,94,95,99,99,1,0,92,
93,2,0,78,79,85,86,3,0,1,1,84,84,87,87,2,0,77,77,100,110,1,0,55,59,1,0,90,
91,1500,0,217,1,0,0,0,2,236,1,0,0,0,4,243,1,0,0,0,6,283,1,0,0,0,8,287,1,
0,0,0,10,291,1,0,0,0,12,295,1,0,0,0,14,297,1,0,0,0,16,312,1,0,0,0,18,323,
1,0,0,0,20,328,1,0,0,0,22,336,1,0,0,0,24,354,1,0,0,0,26,365,1,0,0,0,28,375,
1,0,0,0,30,382,1,0,0,0,32,393,1,0,0,0,34,401,1,0,0,0,36,410,1,0,0,0,38,431,
1,0,0,0,40,443,1,0,0,0,42,446,1,0,0,0,44,469,1,0,0,0,46,472,1,0,0,0,48,480,
1,0,0,0,50,483,1,0,0,0,52,487,1,0,0,0,54,491,1,0,0,0,56,506,1,0,0,0,58,515,
1,0,0,0,60,517,1,0,0,0,62,528,1,0,0,0,64,541,1,0,0,0,66,558,1,0,0,0,68,561,
1,0,0,0,70,569,1,0,0,0,72,574,1,0,0,0,74,584,1,0,0,0,76,586,1,0,0,0,78,602,
1,0,0,0,80,620,1,0,0,0,82,638,1,0,0,0,84,640,1,0,0,0,86,642,1,0,0,0,88,659,
1,0,0,0,90,661,1,0,0,0,92,669,1,0,0,0,94,688,1,0,0,0,96,693,1,0,0,0,98,702,
1,0,0,0,100,709,1,0,0,0,102,711,1,0,0,0,104,713,1,0,0,0,106,721,1,0,0,0,
108,723,1,0,0,0,110,733,1,0,0,0,112,735,1,0,0,0,114,743,1,0,0,0,116,750,
1,0,0,0,118,752,1,0,0,0,120,768,1,0,0,0,122,773,1,0,0,0,124,790,1,0,0,0,
126,812,1,0,0,0,128,816,1,0,0,0,130,818,1,0,0,0,132,824,1,0,0,0,134,826,
1,0,0,0,136,829,1,0,0,0,138,841,1,0,0,0,140,843,1,0,0,0,142,849,1,0,0,0,
144,939,1,0,0,0,146,944,1,0,0,0,148,951,1,0,0,0,150,956,1,0,0,0,152,961,
1,0,0,0,154,974,1,0,0,0,156,982,1,0,0,0,158,985,1,0,0,0,160,992,1,0,0,0,
162,1003,1,0,0,0,164,1023,1,0,0,0,166,1027,1,0,0,0,168,1032,1,0,0,0,170,
1040,1,0,0,0,172,1042,1,0,0,0,174,1046,1,0,0,0,176,1054,1,0,0,0,178,1056,
1,0,0,0,180,1058,1,0,0,0,182,1069,1,0,0,0,184,1084,1,0,0,0,186,1211,1,0,
0,0,188,1224,1,0,0,0,190,1243,1,0,0,0,192,1245,1,0,0,0,194,1251,1,0,0,0,
196,1281,1,0,0,0,198,1311,1,0,0,0,200,1331,1,0,0,0,202,1335,1,0,0,0,204,
1338,1,0,0,0,206,1345,1,0,0,0,208,1350,1,0,0,0,210,1358,1,0,0,0,212,1364,
1,0,0,0,214,1366,1,0,0,0,216,218,3,2,1,0,217,216,1,0,0,0,217,218,1,0,0,0,
218,222,1,0,0,0,219,221,3,4,2,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,
1,0,0,0,222,223,1,0,0,0,223,228,1,0,0,0,224,222,1,0,0,0,225,227,3,6,3,0,
226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,
1,0,0,0,230,228,1,0,0,0,231,232,5,0,0,1,232,1,1,0,0,0,233,235,3,108,54,0,
234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,
1,0,0,0,238,236,1,0,0,0,239,240,5,33,0,0,240,241,3,104,52,0,241,242,5,74,
0,0,242,3,1,0,0,0,243,245,5,27,0,0,244,246,5,39,0,0,245,244,1,0,0,0,245,
246,1,0,0,0,246,247,1,0,0,0,247,250,3,104,52,0,248,249,5,76,0,0,249,251,
5,94,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,74,0,
0,253,5,1,0,0,0,254,256,3,10,5,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,
1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,284,3,14,7,0,
261,263,3,10,5,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,284,3,22,11,0,268,270,3,10,5,
0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,
1,0,0,0,273,271,1,0,0,0,274,284,3,30,15,0,275,277,3,10,5,0,276,275,1,0,0,
0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,
1,0,0,0,281,284,3,120,60,0,282,284,5,74,0,0,283,257,1,0,0,0,283,264,1,0,
0,0,283,271,1,0,0,0,283,278,1,0,0,0,283,282,1,0,0,0,284,7,1,0,0,0,285,288,
3,10,5,0,286,288,7,0,0,0,287,285,1,0,0,0,287,286,1,0,0,0,288,9,1,0,0,0,289,
292,3,108,54,0,290,292,7,1,0,0,291,289,1,0,0,0,291,290,1,0,0,0,292,11,1,
0,0,0,293,296,5,20,0,0,294,296,3,108,54,0,295,293,1,0,0,0,295,294,1,0,0,
0,296,13,1,0,0,0,297,298,5,12,0,0,298,300,5,112,0,0,299,301,3,16,8,0,300,
299,1,0,0,0,300,301,1,0,0,0,301,304,1,0,0,0,302,303,5,19,0,0,303,305,3,80,
40,0,304,302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,307,5,26,0,0,307,
309,3,32,16,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,
34,17,0,311,15,1,0,0,0,312,313,5,79,0,0,313,318,3,18,9,0,314,315,5,75,0,
0,315,317,3,18,9,0,316,314,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,
1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,5,78,0,0,322,17,1,0,0,0,
323,326,5,112,0,0,324,325,5,19,0,0,325,327,3,20,10,0,326,324,1,0,0,0,326,
327,1,0,0,0,327,19,1,0,0,0,328,333,3,80,40,0,329,330,5,96,0,0,330,332,3,
80,40,0,331,329,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,
334,21,1,0,0,0,335,333,1,0,0,0,336,337,5,18,0,0,337,340,5,112,0,0,338,339,
5,26,0,0,339,341,3,32,16,0,340,338,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,
0,342,344,5,70,0,0,343,345,3,24,12,0,344,343,1,0,0,0,344,345,1,0,0,0,345,
347,1,0,0,0,346,348,5,75,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,
0,0,349,351,3,28,14,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,
353,5,71,0,0,353,23,1,0,0,0,354,359,3,26,13,0,355,356,5,75,0,0,356,358,3,
26,13,0,357,355,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,
360,25,1,0,0,0,361,359,1,0,0,0,362,364,3,108,54,0,363,362,1,0,0,0,364,367,
1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,
368,370,5,112,0,0,369,371,3,214,107,0,370,369,1,0,0,0,370,371,1,0,0,0,371,
373,1,0,0,0,372,374,3,34,17,0,373,372,1,0,0,0,373,374,1,0,0,0,374,27,1,0,
0,0,375,379,5,74,0,0,376,378,3,38,19,0,377,376,1,0,0,0,378,381,1,0,0,0,379,
377,1,0,0,0,379,380,1,0,0,0,380,29,1,0,0,0,381,379,1,0,0,0,382,383,5,30,
0,0,383,385,5,112,0,0,384,386,3,16,8,0,385,384,1,0,0,0,385,386,1,0,0,0,386,
389,1,0,0,0,387,388,5,19,0,0,388,390,3,32,16,0,389,387,1,0,0,0,389,390,1,
0,0,0,390,391,1,0,0,0,391,392,3,36,18,0,392,31,1,0,0,0,393,398,3,80,40,0,
394,395,5,75,0,0,395,397,3,80,40,0,396,394,1,0,0,0,397,400,1,0,0,0,398,396,
1,0,0,0,398,399,1,0,0,0,399,33,1,0,0,0,400,398,1,0,0,0,401,405,5,70,0,0,
402,404,3,38,19,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,71,0,0,409,35,1,0,0,0,
410,414,5,70,0,0,411,413,3,56,28,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,
1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,71,0,0,
418,37,1,0,0,0,419,432,5,74,0,0,420,422,5,39,0,0,421,420,1,0,0,0,421,422,
1,0,0,0,422,423,1,0,0,0,423,432,3,136,68,0,424,426,3,8,4,0,425,424,1,0,0,
0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,
1,0,0,0,430,432,3,40,20,0,431,419,1,0,0,0,431,421,1,0,0,0,431,427,1,0,0,
0,432,39,1,0,0,0,433,444,3,42,21,0,434,444,3,44,22,0,435,444,3,50,25,0,436,
444,3,46,23,0,437,444,3,48,24,0,438,444,3,30,15,0,439,444,3,120,60,0,440,
444,3,14,7,0,441,444,3,22,11,0,442,444,3,52,26,0,443,433,1,0,0,0,443,434,
1,0,0,0,443,435,1,0,0,0,443,436,1,0,0,0,443,437,1,0,0,0,443,438,1,0,0,0,
443,439,1,0,0,0,443,440,1,0,0,0,443,441,1,0,0,0,443,442,1,0,0,0,444,41,1,
0,0,0,445,447,5,3,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,450,1,0,0,0,448,
451,3,80,40,0,449,451,5,47,0,0,450,448,1,0,0,0,450,449,1,0,0,0,451,452,1,
0,0,0,452,453,5,112,0,0,453,458,3,92,46,0,454,455,5,72,0,0,455,457,5,73,
0,0,456,454,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
463,1,0,0,0,460,458,1,0,0,0,461,462,5,44,0,0,462,464,3,90,45,0,463,461,1,
0,0,0,463,464,1,0,0,0,464,467,1,0,0,0,465,468,3,100,50,0,466,468,5,74,0,
0,467,465,1,0,0,0,467,466,1,0,0,0,468,43,1,0,0,0,469,470,3,16,8,0,470,471,
3,42,21,0,471,45,1,0,0,0,472,473,5,112,0,0,473,476,3,92,46,0,474,475,5,44,
0,0,475,477,3,90,45,0,476,474,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,
479,3,102,51,0,479,47,1,0,0,0,480,481,3,16,8,0,481,482,3,46,23,0,482,49,
1,0,0,0,483,484,3,80,40,0,484,485,3,68,34,0,485,486,5,74,0,0,486,51,1,0,
0,0,487,488,3,80,40,0,488,489,3,68,34,0,489,490,3,54,27,0,490,53,1,0,0,0,
491,492,5,70,0,0,492,494,3,146,73,0,493,495,3,146,73,0,494,493,1,0,0,0,494,
495,1,0,0,0,495,496,1,0,0,0,496,497,5,71,0,0,497,55,1,0,0,0,498,500,3,8,
4,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,
504,1,0,0,0,503,501,1,0,0,0,504,507,3,58,29,0,505,507,5,74,0,0,506,501,1,
0,0,0,506,505,1,0,0,0,507,57,1,0,0,0,508,516,3,60,30,0,509,516,3,64,32,0,
510,516,3,66,33,0,511,516,3,30,15,0,512,516,3,120,60,0,513,516,3,14,7,0,
514,516,3,22,11,0,515,508,1,0,0,0,515,509,1,0,0,0,515,510,1,0,0,0,515,511,
1,0,0,0,515,512,1,0,0,0,515,513,1,0,0,0,515,514,1,0,0,0,516,59,1,0,0,0,517,
518,3,80,40,0,518,523,3,62,31,0,519,520,5,75,0,0,520,522,3,62,31,0,521,519,
1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,
525,523,1,0,0,0,526,527,5,74,0,0,527,61,1,0,0,0,528,533,5,112,0,0,529,530,
5,72,0,0,530,532,5,73,0,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,
0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,77,0,0,537,538,
3,74,37,0,538,63,1,0,0,0,539,542,3,80,40,0,540,542,5,47,0,0,541,539,1,0,
0,0,541,540,1,0,0,0,542,543,1,0,0,0,543,544,5,112,0,0,544,549,3,92,46,0,
545,546,5,72,0,0,546,548,5,73,0,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,
1,0,0,0,549,550,1,0,0,0,550,554,1,0,0,0,551,549,1,0,0,0,552,553,5,44,0,0,
553,555,3,90,45,0,554,552,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,
5,74,0,0,557,65,1,0,0,0,558,559,3,16,8,0,559,560,3,64,32,0,560,67,1,0,0,
0,561,566,3,70,35,0,562,563,5,75,0,0,563,565,3,70,35,0,564,562,1,0,0,0,565,
568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,69,1,0,0,0,568,566,1,0,0,
0,569,572,3,72,36,0,570,571,5,77,0,0,571,573,3,74,37,0,572,570,1,0,0,0,572,
573,1,0,0,0,573,71,1,0,0,0,574,579,5,112,0,0,575,576,5,72,0,0,576,578,5,
73,0,0,577,575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,
73,1,0,0,0,581,579,1,0,0,0,582,585,3,76,38,0,583,585,3,184,92,0,584,582,
1,0,0,0,584,583,1,0,0,0,585,75,1,0,0,0,586,598,5,70,0,0,587,592,3,74,37,
0,588,589,5,75,0,0,589,591,3,74,37,0,590,588,1,0,0,0,591,594,1,0,0,0,592,
590,1,0,0,0,592,593,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,595,597,5,75,
0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,587,1,0,0,0,598,
599,1,0,0,0,599,600,1,0,0,0,600,601,5,71,0,0,601,77,1,0,0,0,602,603,5,112,
0,0,603,79,1,0,0,0,604,609,3,82,41,0,605,606,5,72,0,0,606,608,5,73,0,0,607,
605,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,621,1,0,
0,0,611,609,1,0,0,0,612,617,3,84,42,0,613,614,5,72,0,0,614,616,5,73,0,0,
615,613,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,621,
1,0,0,0,619,617,1,0,0,0,620,604,1,0,0,0,620,612,1,0,0,0,621,81,1,0,0,0,622,
624,5,112,0,0,623,625,3,86,43,0,624,623,1,0,0,0,624,625,1,0,0,0,625,633,
1,0,0,0,626,627,5,76,0,0,627,629,5,112,0,0,628,630,3,86,43,0,629,628,1,0,
0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,626,1,0,0,0,632,635,1,0,0,0,633,
631,1,0,0,0,633,634,1,0,0,0,634,639,1,0,0,0,635,633,1,0,0,0,636,637,5,5,
0,0,637,639,3,86,43,0,638,622,1,0,0,0,638,636,1,0,0,0,639,83,1,0,0,0,640,
641,7,2,0,0,641,85,1,0,0,0,642,643,5,79,0,0,643,648,3,88,44,0,644,645,5,
75,0,0,645,647,3,88,44,0,646,644,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,
648,649,1,0,0,0,649,651,1,0,0,0,650,648,1,0,0,0,651,652,5,78,0,0,652,87,
1,0,0,0,653,660,3,80,40,0,654,657,5,82,0,0,655,656,7,3,0,0,656,658,3,80,
40,0,657,655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,653,1,0,0,0,659,
654,1,0,0,0,660,89,1,0,0,0,661,666,3,104,52,0,662,663,5,75,0,0,663,665,3,
104,52,0,664,662,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,
667,91,1,0,0,0,668,666,1,0,0,0,669,671,5,68,0,0,670,672,3,94,47,0,671,670,
1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,5,69,0,0,674,93,1,0,0,0,
675,680,3,96,48,0,676,677,5,75,0,0,677,679,3,96,48,0,678,676,1,0,0,0,679,
682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,685,1,0,0,0,682,680,1,0,
0,0,683,684,5,75,0,0,684,686,3,98,49,0,685,683,1,0,0,0,685,686,1,0,0,0,686,
689,1,0,0,0,687,689,3,98,49,0,688,675,1,0,0,0,688,687,1,0,0,0,689,95,1,0,
0,0,690,692,3,12,6,0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,
694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,697,3,80,40,0,697,698,3,
72,36,0,698,97,1,0,0,0,699,701,3,12,6,0,700,699,1,0,0,0,701,704,1,0,0,0,
702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,
3,80,40,0,706,707,5,114,0,0,707,708,3,72,36,0,708,99,1,0,0,0,709,710,3,136,
68,0,710,101,1,0,0,0,711,712,3,136,68,0,712,103,1,0,0,0,713,718,5,112,0,
0,714,715,5,76,0,0,715,717,5,112,0,0,716,714,1,0,0,0,717,720,1,0,0,0,718,
716,1,0,0,0,718,719,1,0,0,0,719,105,1,0,0,0,720,718,1,0,0,0,721,722,7,4,
0,0,722,107,1,0,0,0,723,724,5,113,0,0,724,731,3,110,55,0,725,728,5,68,0,
0,726,729,3,112,56,0,727,729,3,116,58,0,728,726,1,0,0,0,728,727,1,0,0,0,
728,729,1,0,0,0,729,730,1,0,0,0,730,732,5,69,0,0,731,725,1,0,0,0,731,732,
1,0,0,0,732,109,1,0,0,0,733,734,3,104,52,0,734,111,1,0,0,0,735,740,3,114,
57,0,736,737,5,75,0,0,737,739,3,114,57,0,738,736,1,0,0,0,739,742,1,0,0,0,
740,738,1,0,0,0,740,741,1,0,0,0,741,113,1,0,0,0,742,740,1,0,0,0,743,744,
5,112,0,0,744,745,5,77,0,0,745,746,3,116,58,0,746,115,1,0,0,0,747,751,3,
184,92,0,748,751,3,108,54,0,749,751,3,118,59,0,750,747,1,0,0,0,750,748,1,
0,0,0,750,749,1,0,0,0,751,117,1,0,0,0,752,761,5,70,0,0,753,758,3,116,58,
0,754,755,5,75,0,0,755,757,3,116,58,0,756,754,1,0,0,0,757,760,1,0,0,0,758,
756,1,0,0,0,758,759,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,761,753,1,0,
0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,765,5,75,0,0,764,763,1,0,0,0,764,
765,1,0,0,0,765,766,1,0,0,0,766,767,5,71,0,0,767,119,1,0,0,0,768,769,5,113,
0,0,769,770,5,30,0,0,770,771,5,112,0,0,771,772,3,122,61,0,772,121,1,0,0,
0,773,777,5,70,0,0,774,776,3,124,62,0,775,774,1,0,0,0,776,779,1,0,0,0,777,
775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,0,0,780,781,5,71,
0,0,781,123,1,0,0,0,782,784,3,8,4,0,783,782,1,0,0,0,784,787,1,0,0,0,785,
783,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,791,3,126,
63,0,789,791,5,74,0,0,790,785,1,0,0,0,790,789,1,0,0,0,791,125,1,0,0,0,792,
793,3,80,40,0,793,794,3,128,64,0,794,795,5,74,0,0,795,813,1,0,0,0,796,798,
3,14,7,0,797,799,5,74,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,813,1,0,0,
0,800,802,3,30,15,0,801,803,5,74,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,
813,1,0,0,0,804,806,3,22,11,0,805,807,5,74,0,0,806,805,1,0,0,0,806,807,1,
0,0,0,807,813,1,0,0,0,808,810,3,120,60,0,809,811,5,74,0,0,810,809,1,0,0,
0,810,811,1,0,0,0,811,813,1,0,0,0,812,792,1,0,0,0,812,796,1,0,0,0,812,800,
1,0,0,0,812,804,1,0,0,0,812,808,1,0,0,0,813,127,1,0,0,0,814,817,3,130,65,
0,815,817,3,132,66,0,816,814,1,0,0,0,816,815,1,0,0,0,817,129,1,0,0,0,818,
819,5,112,0,0,819,820,5,68,0,0,820,822,5,69,0,0,821,823,3,134,67,0,822,821,
1,0,0,0,822,823,1,0,0,0,823,131,1,0,0,0,824,825,3,68,34,0,825,133,1,0,0,
0,826,827,5,15,0,0,827,828,3,116,58,0,828,135,1,0,0,0,829,833,5,70,0,0,830,
832,3,138,69,0,831,830,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,
0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,837,5,71,0,0,837,137,1,0,0,0,838,
842,3,140,70,0,839,842,3,144,72,0,840,842,3,6,3,0,841,838,1,0,0,0,841,839,
1,0,0,0,841,840,1,0,0,0,842,139,1,0,0,0,843,844,3,142,71,0,844,845,5,74,
0,0,845,141,1,0,0,0,846,848,3,12,6,0,847,846,1,0,0,0,848,851,1,0,0,0,849,
847,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,3,80,
40,0,853,854,3,68,34,0,854,143,1,0,0,0,855,940,3,136,68,0,856,857,5,24,0,
0,857,858,3,172,86,0,858,861,3,144,72,0,859,860,5,17,0,0,860,862,3,144,72,
0,861,859,1,0,0,0,861,862,1,0,0,0,862,940,1,0,0,0,863,864,5,23,0,0,864,865,
5,68,0,0,865,866,3,164,82,0,866,867,5,69,0,0,867,868,3,144,72,0,868,940,
1,0,0,0,869,870,5,49,0,0,870,871,3,172,86,0,871,872,3,144,72,0,872,940,1,
0,0,0,873,874,5,16,0,0,874,875,3,144,72,0,875,876,5,49,0,0,876,877,3,172,
86,0,877,878,5,74,0,0,878,940,1,0,0,0,879,880,5,61,0,0,880,881,5,68,0,0,
881,882,3,184,92,0,882,883,5,69,0,0,883,884,3,144,72,0,884,940,1,0,0,0,885,
886,5,46,0,0,886,896,3,136,68,0,887,889,3,152,76,0,888,887,1,0,0,0,889,890,
1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,893,1,0,0,0,892,894,3,156,78,
0,893,892,1,0,0,0,893,894,1,0,0,0,894,897,1,0,0,0,895,897,3,156,78,0,896,
888,1,0,0,0,896,895,1,0,0,0,897,940,1,0,0,0,898,899,5,46,0,0,899,900,3,158,
79,0,900,904,3,136,68,0,901,903,3,152,76,0,902,901,1,0,0,0,903,906,1,0,0,
0,904,902,1,0,0,0,904,905,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,907,909,
3,156,78,0,908,907,1,0,0,0,908,909,1,0,0,0,909,940,1,0,0,0,910,912,5,37,
0,0,911,913,3,184,92,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,
940,5,74,0,0,915,916,5,43,0,0,916,917,3,184,92,0,917,918,5,74,0,0,918,940,
1,0,0,0,919,921,5,8,0,0,920,922,5,112,0,0,921,920,1,0,0,0,921,922,1,0,0,
0,922,923,1,0,0,0,923,940,5,74,0,0,924,926,5,14,0,0,925,927,5,112,0,0,926,
925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,940,5,74,0,0,929,940,5,74,
0,0,930,931,3,176,88,0,931,932,5,74,0,0,932,940,1,0,0,0,933,934,5,112,0,
0,934,935,5,83,0,0,935,940,3,144,72,0,936,937,3,182,91,0,937,938,5,74,0,
0,938,940,1,0,0,0,939,855,1,0,0,0,939,856,1,0,0,0,939,863,1,0,0,0,939,869,
1,0,0,0,939,873,1,0,0,0,939,879,1,0,0,0,939,885,1,0,0,0,939,898,1,0,0,0,
939,910,1,0,0,0,939,915,1,0,0,0,939,919,1,0,0,0,939,924,1,0,0,0,939,929,
1,0,0,0,939,930,1,0,0,0,939,933,1,0,0,0,939,936,1,0,0,0,940,145,1,0,0,0,
941,943,3,8,4,0,942,941,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,
1,0,0,0,945,949,1,0,0,0,946,944,1,0,0,0,947,950,3,148,74,0,948,950,3,150,
75,0,949,947,1,0,0,0,949,948,1,0,0,0,950,147,1,0,0,0,951,954,5,6,0,0,952,
955,5,74,0,0,953,955,3,100,50,0,954,952,1,0,0,0,954,953,1,0,0,0,955,149,
1,0,0,0,956,959,5,5,0,0,957,960,5,74,0,0,958,960,3,100,50,0,959,957,1,0,
0,0,959,958,1,0,0,0,960,151,1,0,0,0,961,962,5,10,0,0,962,966,5,68,0,0,963,
965,3,12,6,0,964,963,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,
0,0,967,969,1,0,0,0,968,966,1,0,0,0,969,970,3,154,77,0,970,971,5,112,0,0,
971,972,5,69,0,0,972,973,3,136,68,0,973,153,1,0,0,0,974,979,3,104,52,0,975,
976,5,97,0,0,976,978,3,104,52,0,977,975,1,0,0,0,978,981,1,0,0,0,979,977,
1,0,0,0,979,980,1,0,0,0,980,155,1,0,0,0,981,979,1,0,0,0,982,983,5,21,0,0,
983,984,3,136,68,0,984,157,1,0,0,0,985,986,5,68,0,0,986,988,3,160,80,0,987,
989,5,74,0,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,991,5,69,
0,0,991,159,1,0,0,0,992,997,3,162,81,0,993,994,5,74,0,0,994,996,3,162,81,
0,995,993,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,161,
1,0,0,0,999,997,1,0,0,0,1000,1002,3,12,6,0,1001,1000,1,0,0,0,1002,1005,1,
0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,1006,1,0,0,0,1005,1003,1,
0,0,0,1006,1007,3,82,41,0,1007,1008,3,72,36,0,1008,1009,5,77,0,0,1009,1010,
3,184,92,0,1010,163,1,0,0,0,1011,1024,3,168,84,0,1012,1014,3,166,83,0,1013,
1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1017,5,74,0,0,1016,
1018,3,184,92,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,
1021,5,74,0,0,1020,1022,3,170,85,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,
1024,1,0,0,0,1023,1011,1,0,0,0,1023,1013,1,0,0,0,1024,165,1,0,0,0,1025,1028,
3,142,71,0,1026,1028,3,174,87,0,1027,1025,1,0,0,0,1027,1026,1,0,0,0,1028,
167,1,0,0,0,1029,1031,3,12,6,0,1030,1029,1,0,0,0,1031,1034,1,0,0,0,1032,
1030,1,0,0,0,1032,1033,1,0,0,0,1033,1035,1,0,0,0,1034,1032,1,0,0,0,1035,
1036,3,80,40,0,1036,1037,3,72,36,0,1037,1038,5,83,0,0,1038,1039,3,184,92,
0,1039,169,1,0,0,0,1040,1041,3,174,87,0,1041,171,1,0,0,0,1042,1043,5,68,
0,0,1043,1044,3,184,92,0,1044,1045,5,69,0,0,1045,173,1,0,0,0,1046,1051,3,
184,92,0,1047,1048,5,75,0,0,1048,1050,3,184,92,0,1049,1047,1,0,0,0,1050,
1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,175,1,0,0,0,1053,1051,
1,0,0,0,1054,1055,3,184,92,0,1055,177,1,0,0,0,1056,1057,3,184,92,0,1057,
179,1,0,0,0,1058,1059,5,56,0,0,1059,1063,3,184,92,0,1060,1062,3,184,92,0,
1061,1060,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,
1064,181,1,0,0,0,1065,1063,1,0,0,0,1066,1067,7,5,0,0,1067,1070,3,184,92,
0,1068,1070,3,180,90,0,1069,1066,1,0,0,0,1069,1068,1,0,0,0,1070,183,1,0,
0,0,1071,1072,6,92,-1,0,1072,1085,3,186,93,0,1073,1074,5,32,0,0,1074,1085,
3,188,94,0,1075,1076,5,68,0,0,1076,1077,3,80,40,0,1077,1078,5,69,0,0,1078,
1079,3,184,92,17,1079,1085,1,0,0,0,1080,1081,7,6,0,0,1081,1085,3,184,92,
15,1082,1083,7,7,0,0,1083,1085,3,184,92,14,1084,1071,1,0,0,0,1084,1073,1,
0,0,0,1084,1075,1,0,0,0,1084,1080,1,0,0,0,1084,1082,1,0,0,0,1085,1186,1,
0,0,0,1086,1087,10,13,0,0,1087,1088,7,8,0,0,1088,1185,3,184,92,14,1089,1090,
10,12,0,0,1090,1091,7,9,0,0,1091,1185,3,184,92,13,1092,1100,10,11,0,0,1093,
1094,5,79,0,0,1094,1101,5,79,0,0,1095,1096,5,78,0,0,1096,1097,5,78,0,0,1097,
1101,5,78,0,0,1098,1099,5,78,0,0,1099,1101,5,78,0,0,1100,1093,1,0,0,0,1100,
1095,1,0,0,0,1100,1098,1,0,0,0,1101,1102,1,0,0,0,1102,1185,3,184,92,12,1103,
1104,10,10,0,0,1104,1105,7,10,0,0,1105,1185,3,184,92,11,1106,1107,10,8,0,
0,1107,1108,7,11,0,0,1108,1185,3,184,92,9,1109,1110,10,7,0,0,1110,1111,5,
96,0,0,1111,1185,3,184,92,8,1112,1113,10,6,0,0,1113,1114,5,98,0,0,1114,1185,
3,184,92,7,1115,1116,10,5,0,0,1116,1117,5,97,0,0,1117,1185,3,184,92,6,1118,
1119,10,4,0,0,1119,1120,5,88,0,0,1120,1185,3,184,92,5,1121,1122,10,3,0,0,
1122,1123,5,89,0,0,1123,1185,3,184,92,4,1124,1125,10,2,0,0,1125,1126,5,82,
0,0,1126,1127,3,184,92,0,1127,1128,5,83,0,0,1128,1129,3,184,92,3,1129,1185,
1,0,0,0,1130,1131,10,1,0,0,1131,1132,7,12,0,0,1132,1185,3,184,92,1,1133,
1134,10,28,0,0,1134,1135,5,76,0,0,1135,1136,5,6,0,0,1136,1138,5,68,0,0,1137,
1139,3,174,87,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,
1185,5,69,0,0,1141,1142,10,27,0,0,1142,1143,5,76,0,0,1143,1144,5,5,0,0,1144,
1146,5,68,0,0,1145,1147,3,174,87,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,
1148,1,0,0,0,1148,1185,5,69,0,0,1149,1150,10,26,0,0,1150,1151,5,76,0,0,1151,
1185,5,112,0,0,1152,1153,10,25,0,0,1153,1154,5,76,0,0,1154,1185,5,42,0,0,
1155,1156,10,24,0,0,1156,1157,5,76,0,0,1157,1185,5,32,0,0,1158,1159,10,23,
0,0,1159,1160,5,76,0,0,1160,1185,7,13,0,0,1161,1162,10,22,0,0,1162,1163,
5,76,0,0,1163,1164,5,40,0,0,1164,1185,3,210,105,0,1165,1166,10,21,0,0,1166,
1167,5,76,0,0,1167,1185,3,202,101,0,1168,1169,10,20,0,0,1169,1170,5,72,0,
0,1170,1171,3,184,92,0,1171,1172,5,73,0,0,1172,1185,1,0,0,0,1173,1174,10,
19,0,0,1174,1176,5,68,0,0,1175,1177,3,174,87,0,1176,1175,1,0,0,0,1176,1177,
1,0,0,0,1177,1178,1,0,0,0,1178,1185,5,69,0,0,1179,1180,10,16,0,0,1180,1185,
7,14,0,0,1181,1182,10,9,0,0,1182,1183,5,28,0,0,1183,1185,3,80,40,0,1184,
1086,1,0,0,0,1184,1089,1,0,0,0,1184,1092,1,0,0,0,1184,1103,1,0,0,0,1184,
1106,1,0,0,0,1184,1109,1,0,0,0,1184,1112,1,0,0,0,1184,1115,1,0,0,0,1184,
1118,1,0,0,0,1184,1121,1,0,0,0,1184,1124,1,0,0,0,1184,1130,1,0,0,0,1184,
1133,1,0,0,0,1184,1141,1,0,0,0,1184,1149,1,0,0,0,1184,1152,1,0,0,0,1184,
1155,1,0,0,0,1184,1158,1,0,0,0,1184,1161,1,0,0,0,1184,1165,1,0,0,0,1184,
1168,1,0,0,0,1184,1173,1,0,0,0,1184,1179,1,0,0,0,1184,1181,1,0,0,0,1185,
1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,185,1,0,0,0,1188,1186,
1,0,0,0,1189,1190,5,68,0,0,1190,1191,3,184,92,0,1191,1192,5,69,0,0,1192,
1212,1,0,0,0,1193,1212,5,42,0,0,1194,1212,5,40,0,0,1195,1212,3,106,53,0,
1196,1212,5,112,0,0,1197,1198,3,80,40,0,1198,1199,5,76,0,0,1199,1200,5,12,
0,0,1200,1212,1,0,0,0,1201,1202,5,47,0,0,1202,1203,5,76,0,0,1203,1212,5,
12,0,0,1204,1208,3,204,102,0,1205,1209,3,212,106,0,1206,1207,5,42,0,0,1207,
1209,3,214,107,0,1208,1205,1,0,0,0,1208,1206,1,0,0,0,1209,1212,1,0,0,0,1210,
1212,5,2,0,0,1211,1189,1,0,0,0,1211,1193,1,0,0,0,1211,1194,1,0,0,0,1211,
1195,1,0,0,0,1211,1196,1,0,0,0,1211,1197,1,0,0,0,1211,1201,1,0,0,0,1211,
1204,1,0,0,0,1211,1210,1,0,0,0,1212,187,1,0,0,0,1213,1214,3,204,102,0,1214,
1215,3,190,95,0,1215,1216,3,200,100,0,1216,1225,1,0,0,0,1217,1222,3,190,
95,0,1218,1223,3,194,97,0,1219,1223,3,200,100,0,1220,1223,3,196,98,0,1221,
1223,3,198,99,0,1222,1218,1,0,0,0,1222,1219,1,0,0,0,1222,1220,1,0,0,0,1222,
1221,1,0,0,0,1223,1225,1,0,0,0,1224,1213,1,0,0,0,1224,1217,1,0,0,0,1225,
189,1,0,0,0,1226,1228,5,112,0,0,1227,1229,3,206,103,0,1228,1227,1,0,0,0,
1228,1229,1,0,0,0,1229,1237,1,0,0,0,1230,1231,5,76,0,0,1231,1233,5,112,0,
0,1232,1234,3,206,103,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,1,
0,0,0,1235,1230,1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,1,
0,0,0,1238,1244,1,0,0,0,1239,1237,1,0,0,0,1240,1244,3,84,42,0,1241,1242,
5,5,0,0,1242,1244,3,206,103,0,1243,1226,1,0,0,0,1243,1240,1,0,0,0,1243,1241,
1,0,0,0,1244,191,1,0,0,0,1245,1247,5,112,0,0,1246,1248,3,208,104,0,1247,
1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,3,200,100,0,1250,
193,1,0,0,0,1251,1279,5,72,0,0,1252,1257,5,73,0,0,1253,1254,5,72,0,0,1254,
1256,5,73,0,0,1255,1253,1,0,0,0,1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,
1258,1,0,0,0,1258,1260,1,0,0,0,1259,1257,1,0,0,0,1260,1280,3,76,38,0,1261,
1262,3,184,92,0,1262,1269,5,73,0,0,1263,1264,5,72,0,0,1264,1265,3,184,92,
0,1265,1266,5,73,0,0,1266,1268,1,0,0,0,1267,1263,1,0,0,0,1268,1271,1,0,0,
0,1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,1276,1,0,0,0,1271,1269,1,0,0,
0,1272,1273,5,72,0,0,1273,1275,5,73,0,0,1274,1272,1,0,0,0,1275,1278,1,0,
0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,
0,0,1279,1252,1,0,0,0,1279,1261,1,0,0,0,1280,195,1,0,0,0,1281,1309,5,70,
0,0,1282,1310,5,71,0,0,1283,1286,5,112,0,0,1284,1286,3,184,92,0,1285,1283,
1,0,0,0,1285,1284,1,0,0,0,1286,1287,1,0,0,0,1287,1290,5,111,0,0,1288,1291,
3,106,53,0,1289,1291,3,184,92,0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,1291,
1304,1,0,0,0,1292,1295,5,75,0,0,1293,1296,5,112,0,0,1294,1296,3,184,92,0,
1295,1293,1,0,0,0,1295,1294,1,0,0,0,1296,1297,1,0,0,0,1297,1300,5,111,0,
0,1298,1301,3,106,53,0,1299,1301,3,184,92,0,1300,1298,1,0,0,0,1300,1299,
1,0,0,0,1301,1303,1,0,0,0,1302,1292,1,0,0,0,1303,1306,1,0,0,0,1304,1302,
1,0,0,0,1304,1305,1,0,0,0,1305,1307,1,0,0,0,1306,1304,1,0,0,0,1307,1308,
5,71,0,0,1308,1310,1,0,0,0,1309,1282,1,0,0,0,1309,1285,1,0,0,0,1310,197,
1,0,0,0,1311,1329,5,70,0,0,1312,1330,5,71,0,0,1313,1316,3,106,53,0,1314,
1316,3,184,92,0,1315,1313,1,0,0,0,1315,1314,1,0,0,0,1316,1324,1,0,0,0,1317,
1320,5,75,0,0,1318,1321,3,106,53,0,1319,1321,3,184,92,0,1320,1318,1,0,0,
0,1320,1319,1,0,0,0,1321,1323,1,0,0,0,1322,1317,1,0,0,0,1323,1326,1,0,0,
0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,1327,1,0,0,0,1326,1324,1,0,0,
0,1327,1328,5,71,0,0,1328,1330,1,0,0,0,1329,1312,1,0,0,0,1329,1315,1,0,0,
0,1330,199,1,0,0,0,1331,1333,3,214,107,0,1332,1334,3,34,17,0,1333,1332,1,
0,0,0,1333,1334,1,0,0,0,1334,201,1,0,0,0,1335,1336,3,204,102,0,1336,1337,
3,212,106,0,1337,203,1,0,0,0,1338,1339,5,79,0,0,1339,1340,3,32,16,0,1340,
1341,5,78,0,0,1341,205,1,0,0,0,1342,1343,5,79,0,0,1343,1346,5,78,0,0,1344,
1346,3,86,43,0,1345,1342,1,0,0,0,1345,1344,1,0,0,0,1346,207,1,0,0,0,1347,
1348,5,79,0,0,1348,1351,5,78,0,0,1349,1351,3,204,102,0,1350,1347,1,0,0,0,
1350,1349,1,0,0,0,1351,209,1,0,0,0,1352,1359,3,214,107,0,1353,1354,5,76,
0,0,1354,1356,5,112,0,0,1355,1357,3,214,107,0,1356,1355,1,0,0,0,1356,1357,
1,0,0,0,1357,1359,1,0,0,0,1358,1352,1,0,0,0,1358,1353,1,0,0,0,1359,211,1,
0,0,0,1360,1361,5,40,0,0,1361,1365,3,210,105,0,1362,1363,5,112,0,0,1363,
1365,3,214,107,0,1364,1360,1,0,0,0,1364,1362,1,0,0,0,1365,213,1,0,0,0,1366,
1368,5,68,0,0,1367,1369,3,174,87,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,
1370,1,0,0,0,1370,1371,5,69,0,0,1371,215,1,0,0,0,163,217,222,228,236,245,
250,257,264,271,278,283,287,291,295,300,304,308,318,326,333,340,344,347,
350,359,365,370,373,379,385,389,398,405,414,421,427,431,443,446,450,458,
463,467,476,494,501,506,515,523,533,541,549,554,566,572,579,584,592,596,
598,609,617,620,624,629,633,638,648,657,659,666,671,680,685,688,693,702,
718,728,731,740,750,758,761,764,777,785,790,798,802,806,810,812,816,822,
833,841,849,861,890,893,896,904,908,912,921,926,939,944,949,954,959,966,
979,988,997,1003,1013,1017,1021,1023,1027,1032,1051,1063,1069,1084,1100,
1138,1146,1176,1184,1186,1208,1211,1222,1224,1228,1233,1237,1243,1247,1257,
1269,1276,1279,1285,1290,1295,1300,1304,1309,1315,1320,1324,1329,1333,1345,
1350,1356,1358,1364,1368];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class apexParser extends antlr4.Parser {

    static grammarFileName = "apex.g4";
    static literalNames = [ null, "'<>'", null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'('", "')'", 
                            "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                            "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
                            "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", 
                            "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
                            "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", 
                            "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                            "'<<='", "'>>='", "'>>>='", "'=>'", null, "'@'", 
                            "'...'", null, null, "'/**'", null, "'/*'", 
                            null, "'''" ];
    static symbolicNames = [ null, null, "SoqlLiteral", "OVERRIDE", "VIRTUAL", 
                             "SET", "GET", "ABSTRACT", "BREAK", "BYTE", 
                             "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
                             "DEFAULT", "DO", "ELSE", "ENUM", "EXTENDS", 
                             "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                             "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                             "INTERFACE", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                             "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                             "SUPER", "SYNCHRONIZED", "THIS", "THROW", "THROWS", 
                             "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", 
                             "GLOBAL", "WEBSERVICE", "APEX_WITH_SHARING", 
                             "APEX_WITHOUT_SHARING", "SELECT", "DB_INSERT", 
                             "DB_UPSERT", "DB_UPDATE", "DB_DELETE", "DB_UNDELETE", 
                             "TESTMETHOD", "RUNAS", "IntegerLiteral", "FloatingPointLiteral", 
                             "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                             "NullLiteral", "LPAREN", "RPAREN", "LBRACE", 
                             "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                             "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
                             "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                             "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                             "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                             "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "LAMBDA_LIKE", 
                             "Identifier", "AT", "ELLIPSIS", "WS", "APEXDOC_COMMENT", 
                             "APEXDOC_COMMENT_START", "COMMENT", "COMMENT_START", 
                             "LINE_COMMENT", "QUOTE" ];
    static ruleNames = [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                         "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                         "variableModifier", "classDeclaration", "typeParameters", 
                         "typeParameter", "typeBound", "enumDeclaration", 
                         "enumConstants", "enumConstant", "enumBodyDeclarations", 
                         "interfaceDeclaration", "typeList", "classBody", 
                         "interfaceBody", "classBodyDeclaration", "memberDeclaration", 
                         "methodDeclaration", "genericMethodDeclaration", 
                         "constructorDeclaration", "genericConstructorDeclaration", 
                         "fieldDeclaration", "propertyDeclaration", "propertyBodyDeclaration", 
                         "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                         "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                         "genericInterfaceMethodDeclaration", "variableDeclarators", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "arrayInitializer", "enumConstantName", "type_", 
                         "classOrInterfaceType", "primitiveType", "typeArguments", 
                         "typeArgument", "qualifiedNameList", "formalParameters", 
                         "formalParameterList", "formalParameter", "lastFormalParameter", 
                         "methodBody", "constructorBody", "qualifiedName", 
                         "literal", "annotation", "annotationName", "elementValuePairs", 
                         "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                         "annotationTypeDeclaration", "annotationTypeBody", 
                         "annotationTypeElementDeclaration", "annotationTypeElementRest", 
                         "annotationMethodOrConstantRest", "annotationMethodRest", 
                         "annotationConstantRest", "defaultValue", "block", 
                         "blockStatement", "localVariableDeclarationStatement", 
                         "localVariableDeclaration", "statement", "propertyBlock", 
                         "getter", "setter", "catchClause", "catchType", 
                         "finallyBlock", "resourceSpecification", "resources", 
                         "resource", "forControl", "forInit", "enhancedForControl", 
                         "forUpdate", "parExpression", "expressionList", 
                         "statementExpression", "constantExpression", "apexDbUpsertExpression", 
                         "apexDbExpression", "expression", "primary", "creator", 
                         "createdName", "innerCreator", "arrayCreatorRest", 
                         "mapCreatorRest", "setCreatorRest", "classCreatorRest", 
                         "explicitGenericInvocation", "nonWildcardTypeArguments", 
                         "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                         "superSuffix", "explicitGenericInvocationSuffix", 
                         "arguments" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = apexParser.ruleNames;
        this.literalNames = apexParser.literalNames;
        this.symbolicNames = apexParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 92:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 13);
    		case 1:
    			return this.precpred(this._ctx, 12);
    		case 2:
    			return this.precpred(this._ctx, 11);
    		case 3:
    			return this.precpred(this._ctx, 10);
    		case 4:
    			return this.precpred(this._ctx, 8);
    		case 5:
    			return this.precpred(this._ctx, 7);
    		case 6:
    			return this.precpred(this._ctx, 6);
    		case 7:
    			return this.precpred(this._ctx, 5);
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 3);
    		case 10:
    			return this.precpred(this._ctx, 2);
    		case 11:
    			return this.precpred(this._ctx, 1);
    		case 12:
    			return this.precpred(this._ctx, 28);
    		case 13:
    			return this.precpred(this._ctx, 27);
    		case 14:
    			return this.precpred(this._ctx, 26);
    		case 15:
    			return this.precpred(this._ctx, 25);
    		case 16:
    			return this.precpred(this._ctx, 24);
    		case 17:
    			return this.precpred(this._ctx, 23);
    		case 18:
    			return this.precpred(this._ctx, 22);
    		case 19:
    			return this.precpred(this._ctx, 21);
    		case 20:
    			return this.precpred(this._ctx, 20);
    		case 21:
    			return this.precpred(this._ctx, 19);
    		case 22:
    			return this.precpred(this._ctx, 16);
    		case 23:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, apexParser.RULE_compilationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 216;
	            this.packageDeclaration();

	        }
	        this.state = 222;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.IMPORT) {
	            this.state = 219;
	            this.importDeclaration();
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.AT) {
	            this.state = 225;
	            this.typeDeclaration();
	            this.state = 230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 231;
	        this.match(apexParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, apexParser.RULE_packageDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.AT) {
	            this.state = 233;
	            this.annotation();
	            this.state = 238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 239;
	        this.match(apexParser.PACKAGE);
	        this.state = 240;
	        this.qualifiedName();
	        this.state = 241;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, apexParser.RULE_importDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        this.match(apexParser.IMPORT);
	        this.state = 245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.STATIC) {
	            this.state = 244;
	            this.match(apexParser.STATIC);
	        }

	        this.state = 247;
	        this.qualifiedName();
	        this.state = 250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.DOT) {
	            this.state = 248;
	            this.match(apexParser.DOT);
	            this.state = 249;
	            this.match(apexParser.MUL);
	        }

	        this.state = 252;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, apexParser.RULE_typeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
	                this.state = 254;
	                this.classOrInterfaceModifier();
	                this.state = 259;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 260;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
	                this.state = 261;
	                this.classOrInterfaceModifier();
	                this.state = 266;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 267;
	            this.enumDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
	                this.state = 268;
	                this.classOrInterfaceModifier();
	                this.state = 273;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 274;
	            this.interfaceDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 278;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 275;
	                    this.classOrInterfaceModifier(); 
	                }
	                this.state = 280;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	            }

	            this.state = 281;
	            this.annotationTypeDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 282;
	            this.match(apexParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, apexParser.RULE_modifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 287;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.OVERRIDE:
	        case apexParser.VIRTUAL:
	        case apexParser.ABSTRACT:
	        case apexParser.FINAL:
	        case apexParser.PRIVATE:
	        case apexParser.PROTECTED:
	        case apexParser.PUBLIC:
	        case apexParser.STATIC:
	        case apexParser.GLOBAL:
	        case apexParser.WEBSERVICE:
	        case apexParser.APEX_WITH_SHARING:
	        case apexParser.APEX_WITHOUT_SHARING:
	        case apexParser.TESTMETHOD:
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 285;
	            this.classOrInterfaceModifier();
	            break;
	        case apexParser.NATIVE:
	        case apexParser.SYNCHRONIZED:
	        case apexParser.TRANSIENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 286;
	            _la = this._input.LA(1);
	            if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (apexParser.NATIVE - 31)) | (1 << (apexParser.SYNCHRONIZED - 31)) | (1 << (apexParser.TRANSIENT - 31)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceModifier() {
	    let localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, apexParser.RULE_classOrInterfaceModifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 289;
	            this.annotation();
	            break;
	        case apexParser.OVERRIDE:
	        case apexParser.VIRTUAL:
	        case apexParser.ABSTRACT:
	        case apexParser.FINAL:
	        case apexParser.PRIVATE:
	        case apexParser.PROTECTED:
	        case apexParser.PUBLIC:
	        case apexParser.STATIC:
	        case apexParser.GLOBAL:
	        case apexParser.WEBSERVICE:
	        case apexParser.APEX_WITH_SHARING:
	        case apexParser.APEX_WITHOUT_SHARING:
	        case apexParser.TESTMETHOD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 290;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, apexParser.RULE_variableModifier);
	    try {
	        this.state = 295;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.FINAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 293;
	            this.match(apexParser.FINAL);
	            break;
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 294;
	            this.annotation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, apexParser.RULE_classDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(apexParser.CLASS);
	        this.state = 298;
	        this.match(apexParser.Identifier);
	        this.state = 300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LT) {
	            this.state = 299;
	            this.typeParameters();
	        }

	        this.state = 304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.EXTENDS) {
	            this.state = 302;
	            this.match(apexParser.EXTENDS);
	            this.state = 303;
	            this.type_();
	        }

	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.IMPLEMENTS) {
	            this.state = 306;
	            this.match(apexParser.IMPLEMENTS);
	            this.state = 307;
	            this.typeList();
	        }

	        this.state = 310;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, apexParser.RULE_typeParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.match(apexParser.LT);
	        this.state = 313;
	        this.typeParameter();
	        this.state = 318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 314;
	            this.match(apexParser.COMMA);
	            this.state = 315;
	            this.typeParameter();
	            this.state = 320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 321;
	        this.match(apexParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, apexParser.RULE_typeParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        this.match(apexParser.Identifier);
	        this.state = 326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.EXTENDS) {
	            this.state = 324;
	            this.match(apexParser.EXTENDS);
	            this.state = 325;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, apexParser.RULE_typeBound);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this.type_();
	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.BITAND) {
	            this.state = 329;
	            this.match(apexParser.BITAND);
	            this.state = 330;
	            this.type_();
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, apexParser.RULE_enumDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.match(apexParser.ENUM);
	        this.state = 337;
	        this.match(apexParser.Identifier);
	        this.state = 340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.IMPLEMENTS) {
	            this.state = 338;
	            this.match(apexParser.IMPLEMENTS);
	            this.state = 339;
	            this.typeList();
	        }

	        this.state = 342;
	        this.match(apexParser.LBRACE);
	        this.state = 344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 343;
	            this.enumConstants();
	        }

	        this.state = 347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.COMMA) {
	            this.state = 346;
	            this.match(apexParser.COMMA);
	        }

	        this.state = 350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.SEMI) {
	            this.state = 349;
	            this.enumBodyDeclarations();
	        }

	        this.state = 352;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstants() {
	    let localctx = new EnumConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, apexParser.RULE_enumConstants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.enumConstant();
	        this.state = 359;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 355;
	                this.match(apexParser.COMMA);
	                this.state = 356;
	                this.enumConstant(); 
	            }
	            this.state = 361;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, apexParser.RULE_enumConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.AT) {
	            this.state = 362;
	            this.annotation();
	            this.state = 367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 368;
	        this.match(apexParser.Identifier);
	        this.state = 370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LPAREN) {
	            this.state = 369;
	            this.arguments();
	        }

	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LBRACE) {
	            this.state = 372;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, apexParser.RULE_enumBodyDeclarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this.match(apexParser.SEMI);
	        this.state = 379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.SHORT - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.VOID - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (apexParser.LBRACE - 70)) | (1 << (apexParser.SEMI - 70)) | (1 << (apexParser.LT - 70)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 376;
	            this.classBodyDeclaration();
	            this.state = 381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, apexParser.RULE_interfaceDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 382;
	        this.match(apexParser.INTERFACE);
	        this.state = 383;
	        this.match(apexParser.Identifier);
	        this.state = 385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LT) {
	            this.state = 384;
	            this.typeParameters();
	        }

	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.EXTENDS) {
	            this.state = 387;
	            this.match(apexParser.EXTENDS);
	            this.state = 388;
	            this.typeList();
	        }

	        this.state = 391;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, apexParser.RULE_typeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this.type_();
	        this.state = 398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 394;
	            this.match(apexParser.COMMA);
	            this.state = 395;
	            this.type_();
	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, apexParser.RULE_classBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.match(apexParser.LBRACE);
	        this.state = 405;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.SHORT - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.VOID - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (apexParser.LBRACE - 70)) | (1 << (apexParser.SEMI - 70)) | (1 << (apexParser.LT - 70)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 402;
	            this.classBodyDeclaration();
	            this.state = 407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 408;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, apexParser.RULE_interfaceBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this.match(apexParser.LBRACE);
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.SHORT - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.VOID - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.LT || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 411;
	            this.interfaceBodyDeclaration();
	            this.state = 416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 417;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, apexParser.RULE_classBodyDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 419;
	            this.match(apexParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.STATIC) {
	                this.state = 420;
	                this.match(apexParser.STATIC);
	            }

	            this.state = 423;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 427;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 424;
	                    this.modifier(); 
	                }
	                this.state = 429;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	            }

	            this.state = 430;
	            this.memberDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaration() {
	    let localctx = new MemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, apexParser.RULE_memberDeclaration);
	    try {
	        this.state = 443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 433;
	            this.methodDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 434;
	            this.genericMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 435;
	            this.fieldDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 436;
	            this.constructorDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 437;
	            this.genericConstructorDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 438;
	            this.interfaceDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 439;
	            this.annotationTypeDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 440;
	            this.classDeclaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 441;
	            this.enumDeclaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 442;
	            this.propertyDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, apexParser.RULE_methodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.OVERRIDE) {
	            this.state = 445;
	            this.match(apexParser.OVERRIDE);
	        }

	        this.state = 450;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	        case apexParser.Identifier:
	            this.state = 448;
	            this.type_();
	            break;
	        case apexParser.VOID:
	            this.state = 449;
	            this.match(apexParser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 452;
	        this.match(apexParser.Identifier);
	        this.state = 453;
	        this.formalParameters();
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.LBRACK) {
	            this.state = 454;
	            this.match(apexParser.LBRACK);
	            this.state = 455;
	            this.match(apexParser.RBRACK);
	            this.state = 460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.THROWS) {
	            this.state = 461;
	            this.match(apexParser.THROWS);
	            this.state = 462;
	            this.qualifiedNameList();
	        }

	        this.state = 467;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.LBRACE:
	            this.state = 465;
	            this.methodBody();
	            break;
	        case apexParser.SEMI:
	            this.state = 466;
	            this.match(apexParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericMethodDeclaration() {
	    let localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, apexParser.RULE_genericMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.typeParameters();
	        this.state = 470;
	        this.methodDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, apexParser.RULE_constructorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.match(apexParser.Identifier);
	        this.state = 473;
	        this.formalParameters();
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.THROWS) {
	            this.state = 474;
	            this.match(apexParser.THROWS);
	            this.state = 475;
	            this.qualifiedNameList();
	        }

	        this.state = 478;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericConstructorDeclaration() {
	    let localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, apexParser.RULE_genericConstructorDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.typeParameters();
	        this.state = 481;
	        this.constructorDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, apexParser.RULE_fieldDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.type_();
	        this.state = 484;
	        this.variableDeclarators();
	        this.state = 485;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyDeclaration() {
	    let localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, apexParser.RULE_propertyDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.type_();
	        this.state = 488;
	        this.variableDeclarators();
	        this.state = 489;
	        this.propertyBodyDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyBodyDeclaration() {
	    let localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, apexParser.RULE_propertyBodyDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(apexParser.LBRACE);
	        this.state = 492;
	        this.propertyBlock();
	        this.state = 494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.GET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
	            this.state = 493;
	            this.propertyBlock();
	        }

	        this.state = 496;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBodyDeclaration() {
	    let localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, apexParser.RULE_interfaceBodyDeclaration);
	    try {
	        this.state = 506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.OVERRIDE:
	        case apexParser.VIRTUAL:
	        case apexParser.SET:
	        case apexParser.ABSTRACT:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.CLASS:
	        case apexParser.ENUM:
	        case apexParser.FINAL:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.INTERFACE:
	        case apexParser.NATIVE:
	        case apexParser.PRIVATE:
	        case apexParser.PROTECTED:
	        case apexParser.PUBLIC:
	        case apexParser.SHORT:
	        case apexParser.STATIC:
	        case apexParser.SYNCHRONIZED:
	        case apexParser.TRANSIENT:
	        case apexParser.VOID:
	        case apexParser.GLOBAL:
	        case apexParser.WEBSERVICE:
	        case apexParser.APEX_WITH_SHARING:
	        case apexParser.APEX_WITHOUT_SHARING:
	        case apexParser.TESTMETHOD:
	        case apexParser.LT:
	        case apexParser.Identifier:
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 498;
	                    this.modifier(); 
	                }
	                this.state = 503;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	            }

	            this.state = 504;
	            this.interfaceMemberDeclaration();
	            break;
	        case apexParser.SEMI:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 505;
	            this.match(apexParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, apexParser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 508;
	            this.constDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 509;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 510;
	            this.genericInterfaceMethodDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 511;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 512;
	            this.annotationTypeDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 513;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 514;
	            this.enumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDeclaration() {
	    let localctx = new ConstDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, apexParser.RULE_constDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.type_();
	        this.state = 518;
	        this.constantDeclarator();
	        this.state = 523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 519;
	            this.match(apexParser.COMMA);
	            this.state = 520;
	            this.constantDeclarator();
	            this.state = 525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 526;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclarator() {
	    let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, apexParser.RULE_constantDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(apexParser.Identifier);
	        this.state = 533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.LBRACK) {
	            this.state = 529;
	            this.match(apexParser.LBRACK);
	            this.state = 530;
	            this.match(apexParser.RBRACK);
	            this.state = 535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 536;
	        this.match(apexParser.ASSIGN);
	        this.state = 537;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, apexParser.RULE_interfaceMethodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	        case apexParser.Identifier:
	            this.state = 539;
	            this.type_();
	            break;
	        case apexParser.VOID:
	            this.state = 540;
	            this.match(apexParser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 543;
	        this.match(apexParser.Identifier);
	        this.state = 544;
	        this.formalParameters();
	        this.state = 549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.LBRACK) {
	            this.state = 545;
	            this.match(apexParser.LBRACK);
	            this.state = 546;
	            this.match(apexParser.RBRACK);
	            this.state = 551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.THROWS) {
	            this.state = 552;
	            this.match(apexParser.THROWS);
	            this.state = 553;
	            this.qualifiedNameList();
	        }

	        this.state = 556;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericInterfaceMethodDeclaration() {
	    let localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, apexParser.RULE_genericInterfaceMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.typeParameters();
	        this.state = 559;
	        this.interfaceMethodDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarators() {
	    let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, apexParser.RULE_variableDeclarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.variableDeclarator();
	        this.state = 566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 562;
	            this.match(apexParser.COMMA);
	            this.state = 563;
	            this.variableDeclarator();
	            this.state = 568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, apexParser.RULE_variableDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        this.variableDeclaratorId();
	        this.state = 572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.ASSIGN) {
	            this.state = 570;
	            this.match(apexParser.ASSIGN);
	            this.state = 571;
	            this.variableInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, apexParser.RULE_variableDeclaratorId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(apexParser.Identifier);
	        this.state = 579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.LBRACK) {
	            this.state = 575;
	            this.match(apexParser.LBRACK);
	            this.state = 576;
	            this.match(apexParser.RBRACK);
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, apexParser.RULE_variableInitializer);
	    try {
	        this.state = 584;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 582;
	            this.arrayInitializer();
	            break;
	        case apexParser.SoqlLiteral:
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.NEW:
	        case apexParser.SHORT:
	        case apexParser.SUPER:
	        case apexParser.THIS:
	        case apexParser.VOID:
	        case apexParser.IntegerLiteral:
	        case apexParser.FloatingPointLiteral:
	        case apexParser.BooleanLiteral:
	        case apexParser.CharacterLiteral:
	        case apexParser.StringLiteral:
	        case apexParser.NullLiteral:
	        case apexParser.LPAREN:
	        case apexParser.LT:
	        case apexParser.BANG:
	        case apexParser.TILDE:
	        case apexParser.INC:
	        case apexParser.DEC:
	        case apexParser.ADD:
	        case apexParser.SUB:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 583;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, apexParser.RULE_arrayInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.match(apexParser.LBRACE);
	        this.state = 598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	            this.state = 587;
	            this.variableInitializer();
	            this.state = 592;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 588;
	                    this.match(apexParser.COMMA);
	                    this.state = 589;
	                    this.variableInitializer(); 
	                }
	                this.state = 594;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	            }

	            this.state = 596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.COMMA) {
	                this.state = 595;
	                this.match(apexParser.COMMA);
	            }

	        }

	        this.state = 600;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantName() {
	    let localctx = new EnumConstantNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, apexParser.RULE_enumConstantName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(apexParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, apexParser.RULE_type_);
	    try {
	        this.state = 620;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SET:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 604;
	            this.classOrInterfaceType();
	            this.state = 609;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 605;
	                    this.match(apexParser.LBRACK);
	                    this.state = 606;
	                    this.match(apexParser.RBRACK); 
	                }
	                this.state = 611;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	            }

	            break;
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.primitiveType();
	            this.state = 617;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 613;
	                    this.match(apexParser.LBRACK);
	                    this.state = 614;
	                    this.match(apexParser.RBRACK); 
	                }
	                this.state = 619;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, apexParser.RULE_classOrInterfaceType);
	    try {
	        this.state = 638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 622;
	            this.match(apexParser.Identifier);
	            this.state = 624;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 623;
	                this.typeArguments();

	            }
	            this.state = 633;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 626;
	                    this.match(apexParser.DOT);
	                    this.state = 627;
	                    this.match(apexParser.Identifier);
	                    this.state = 629;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	                    if(la_===1) {
	                        this.state = 628;
	                        this.typeArguments();

	                    } 
	                }
	                this.state = 635;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	            }

	            break;
	        case apexParser.SET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 636;
	            this.match(apexParser.SET);
	            this.state = 637;
	            this.typeArguments();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, apexParser.RULE_primitiveType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        _la = this._input.LA(1);
	        if(!(((((_la - 9)) & ~0x1f) == 0 && ((1 << (_la - 9)) & ((1 << (apexParser.BYTE - 9)) | (1 << (apexParser.CHAR - 9)) | (1 << (apexParser.FLOAT - 9)) | (1 << (apexParser.INT - 9)) | (1 << (apexParser.SHORT - 9)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, apexParser.RULE_typeArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(apexParser.LT);
	        this.state = 643;
	        this.typeArgument();
	        this.state = 648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 644;
	            this.match(apexParser.COMMA);
	            this.state = 645;
	            this.typeArgument();
	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 651;
	        this.match(apexParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, apexParser.RULE_typeArgument);
	    var _la = 0; // Token type
	    try {
	        this.state = 659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 653;
	            this.type_();
	            break;
	        case apexParser.QUESTION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 654;
	            this.match(apexParser.QUESTION);
	            this.state = 657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.EXTENDS || _la===apexParser.SUPER) {
	                this.state = 655;
	                _la = this._input.LA(1);
	                if(!(_la===apexParser.EXTENDS || _la===apexParser.SUPER)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 656;
	                this.type_();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNameList() {
	    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, apexParser.RULE_qualifiedNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.qualifiedName();
	        this.state = 666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 662;
	            this.match(apexParser.COMMA);
	            this.state = 663;
	            this.qualifiedName();
	            this.state = 668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, apexParser.RULE_formalParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.match(apexParser.LPAREN);
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.SHORT || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 670;
	            this.formalParameterList();
	        }

	        this.state = 673;
	        this.match(apexParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, apexParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 688;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 675;
	            this.formalParameter();
	            this.state = 680;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 676;
	                    this.match(apexParser.COMMA);
	                    this.state = 677;
	                    this.formalParameter(); 
	                }
	                this.state = 682;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	            }

	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.COMMA) {
	                this.state = 683;
	                this.match(apexParser.COMMA);
	                this.state = 684;
	                this.lastFormalParameter();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.lastFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, apexParser.RULE_formalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 690;
	            this.variableModifier();
	            this.state = 695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 696;
	        this.type_();
	        this.state = 697;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameter() {
	    let localctx = new LastFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, apexParser.RULE_lastFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 699;
	            this.variableModifier();
	            this.state = 704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 705;
	        this.type_();
	        this.state = 706;
	        this.match(apexParser.ELLIPSIS);
	        this.state = 707;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, apexParser.RULE_methodBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, apexParser.RULE_constructorBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, apexParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(apexParser.Identifier);
	        this.state = 718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 714;
	                this.match(apexParser.DOT);
	                this.state = 715;
	                this.match(apexParser.Identifier); 
	            }
	            this.state = 720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, apexParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        _la = this._input.LA(1);
	        if(!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (apexParser.IntegerLiteral - 62)) | (1 << (apexParser.FloatingPointLiteral - 62)) | (1 << (apexParser.BooleanLiteral - 62)) | (1 << (apexParser.CharacterLiteral - 62)) | (1 << (apexParser.StringLiteral - 62)) | (1 << (apexParser.NullLiteral - 62)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, apexParser.RULE_annotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this.match(apexParser.AT);
	        this.state = 724;
	        this.annotationName();
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LPAREN) {
	            this.state = 725;
	            this.match(apexParser.LPAREN);
	            this.state = 728;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 726;
	                this.elementValuePairs();

	            } else if(la_===2) {
	                this.state = 727;
	                this.elementValue();

	            }
	            this.state = 730;
	            this.match(apexParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationName() {
	    let localctx = new AnnotationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, apexParser.RULE_annotationName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairs() {
	    let localctx = new ElementValuePairsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, apexParser.RULE_elementValuePairs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.elementValuePair();
	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 736;
	            this.match(apexParser.COMMA);
	            this.state = 737;
	            this.elementValuePair();
	            this.state = 742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, apexParser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.match(apexParser.Identifier);
	        this.state = 744;
	        this.match(apexParser.ASSIGN);
	        this.state = 745;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, apexParser.RULE_elementValue);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SoqlLiteral:
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.NEW:
	        case apexParser.SHORT:
	        case apexParser.SUPER:
	        case apexParser.THIS:
	        case apexParser.VOID:
	        case apexParser.IntegerLiteral:
	        case apexParser.FloatingPointLiteral:
	        case apexParser.BooleanLiteral:
	        case apexParser.CharacterLiteral:
	        case apexParser.StringLiteral:
	        case apexParser.NullLiteral:
	        case apexParser.LPAREN:
	        case apexParser.LT:
	        case apexParser.BANG:
	        case apexParser.TILDE:
	        case apexParser.INC:
	        case apexParser.DEC:
	        case apexParser.ADD:
	        case apexParser.SUB:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 747;
	            this.expression(0);
	            break;
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 748;
	            this.annotation();
	            break;
	        case apexParser.LBRACE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 749;
	            this.elementValueArrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, apexParser.RULE_elementValueArrayInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(apexParser.LBRACE);
	        this.state = 761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 753;
	            this.elementValue();
	            this.state = 758;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 754;
	                    this.match(apexParser.COMMA);
	                    this.state = 755;
	                    this.elementValue(); 
	                }
	                this.state = 760;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	            }

	        }

	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.COMMA) {
	            this.state = 763;
	            this.match(apexParser.COMMA);
	        }

	        this.state = 766;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, apexParser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.match(apexParser.AT);
	        this.state = 769;
	        this.match(apexParser.INTERFACE);
	        this.state = 770;
	        this.match(apexParser.Identifier);
	        this.state = 771;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, apexParser.RULE_annotationTypeBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.match(apexParser.LBRACE);
	        this.state = 777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.SHORT - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 774;
	            this.annotationTypeElementDeclaration();
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 780;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, apexParser.RULE_annotationTypeElementDeclaration);
	    try {
	        this.state = 790;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.OVERRIDE:
	        case apexParser.VIRTUAL:
	        case apexParser.SET:
	        case apexParser.ABSTRACT:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.CLASS:
	        case apexParser.ENUM:
	        case apexParser.FINAL:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.INTERFACE:
	        case apexParser.NATIVE:
	        case apexParser.PRIVATE:
	        case apexParser.PROTECTED:
	        case apexParser.PUBLIC:
	        case apexParser.SHORT:
	        case apexParser.STATIC:
	        case apexParser.SYNCHRONIZED:
	        case apexParser.TRANSIENT:
	        case apexParser.GLOBAL:
	        case apexParser.WEBSERVICE:
	        case apexParser.APEX_WITH_SHARING:
	        case apexParser.APEX_WITHOUT_SHARING:
	        case apexParser.TESTMETHOD:
	        case apexParser.Identifier:
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 785;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 782;
	                    this.modifier(); 
	                }
	                this.state = 787;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	            }

	            this.state = 788;
	            this.annotationTypeElementRest();
	            break;
	        case apexParser.SEMI:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 789;
	            this.match(apexParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementRest() {
	    let localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, apexParser.RULE_annotationTypeElementRest);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 792;
	            this.type_();
	            this.state = 793;
	            this.annotationMethodOrConstantRest();
	            this.state = 794;
	            this.match(apexParser.SEMI);
	            break;
	        case apexParser.CLASS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.classDeclaration();
	            this.state = 798;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 797;
	                this.match(apexParser.SEMI);

	            }
	            break;
	        case apexParser.INTERFACE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 800;
	            this.interfaceDeclaration();
	            this.state = 802;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	            if(la_===1) {
	                this.state = 801;
	                this.match(apexParser.SEMI);

	            }
	            break;
	        case apexParser.ENUM:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 804;
	            this.enumDeclaration();
	            this.state = 806;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	            if(la_===1) {
	                this.state = 805;
	                this.match(apexParser.SEMI);

	            }
	            break;
	        case apexParser.AT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 808;
	            this.annotationTypeDeclaration();
	            this.state = 810;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            if(la_===1) {
	                this.state = 809;
	                this.match(apexParser.SEMI);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodOrConstantRest() {
	    let localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, apexParser.RULE_annotationMethodOrConstantRest);
	    try {
	        this.state = 816;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 814;
	            this.annotationMethodRest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 815;
	            this.annotationConstantRest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodRest() {
	    let localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, apexParser.RULE_annotationMethodRest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this.match(apexParser.Identifier);
	        this.state = 819;
	        this.match(apexParser.LPAREN);
	        this.state = 820;
	        this.match(apexParser.RPAREN);
	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.DEFAULT) {
	            this.state = 821;
	            this.defaultValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationConstantRest() {
	    let localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, apexParser.RULE_annotationConstantRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, apexParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(apexParser.DEFAULT);
	        this.state = 827;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, apexParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 829;
	        this.match(apexParser.LBRACE);
	        this.state = 833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BREAK) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.CONTINUE) | (1 << apexParser.DO) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.FOR) | (1 << apexParser.IF) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.RETURN - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.THROW - 32)) | (1 << (apexParser.TRY - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.WHILE - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.DB_INSERT - 32)) | (1 << (apexParser.DB_UPSERT - 32)) | (1 << (apexParser.DB_UPDATE - 32)) | (1 << (apexParser.DB_DELETE - 32)) | (1 << (apexParser.DB_UNDELETE - 32)) | (1 << (apexParser.TESTMETHOD - 32)) | (1 << (apexParser.RUNAS - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.SEMI - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
	            this.state = 830;
	            this.blockStatement();
	            this.state = 835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 836;
	        this.match(apexParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, apexParser.RULE_blockStatement);
	    try {
	        this.state = 841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 838;
	            this.localVariableDeclarationStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 839;
	            this.statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 840;
	            this.typeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, apexParser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.localVariableDeclaration();
	        this.state = 844;
	        this.match(apexParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, apexParser.RULE_localVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 846;
	            this.variableModifier();
	            this.state = 851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 852;
	        this.type_();
	        this.state = 853;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, apexParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.match(apexParser.IF);
	            this.state = 857;
	            this.parExpression();
	            this.state = 858;
	            this.statement();
	            this.state = 861;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	            if(la_===1) {
	                this.state = 859;
	                this.match(apexParser.ELSE);
	                this.state = 860;
	                this.statement();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 863;
	            this.match(apexParser.FOR);
	            this.state = 864;
	            this.match(apexParser.LPAREN);
	            this.state = 865;
	            this.forControl();
	            this.state = 866;
	            this.match(apexParser.RPAREN);
	            this.state = 867;
	            this.statement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 869;
	            this.match(apexParser.WHILE);
	            this.state = 870;
	            this.parExpression();
	            this.state = 871;
	            this.statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 873;
	            this.match(apexParser.DO);
	            this.state = 874;
	            this.statement();
	            this.state = 875;
	            this.match(apexParser.WHILE);
	            this.state = 876;
	            this.parExpression();
	            this.state = 877;
	            this.match(apexParser.SEMI);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 879;
	            this.match(apexParser.RUNAS);
	            this.state = 880;
	            this.match(apexParser.LPAREN);
	            this.state = 881;
	            this.expression(0);
	            this.state = 882;
	            this.match(apexParser.RPAREN);
	            this.state = 883;
	            this.statement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 885;
	            this.match(apexParser.TRY);
	            this.state = 886;
	            this.block();
	            this.state = 896;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case apexParser.CATCH:
	                this.state = 888; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 887;
	                    this.catchClause();
	                    this.state = 890; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===apexParser.CATCH);
	                this.state = 893;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===apexParser.FINALLY) {
	                    this.state = 892;
	                    this.finallyBlock();
	                }

	                break;
	            case apexParser.FINALLY:
	                this.state = 895;
	                this.finallyBlock();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 898;
	            this.match(apexParser.TRY);
	            this.state = 899;
	            this.resourceSpecification();
	            this.state = 900;
	            this.block();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===apexParser.CATCH) {
	                this.state = 901;
	                this.catchClause();
	                this.state = 906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.FINALLY) {
	                this.state = 907;
	                this.finallyBlock();
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 910;
	            this.match(apexParser.RETURN);
	            this.state = 912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                this.state = 911;
	                this.expression(0);
	            }

	            this.state = 914;
	            this.match(apexParser.SEMI);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 915;
	            this.match(apexParser.THROW);
	            this.state = 916;
	            this.expression(0);
	            this.state = 917;
	            this.match(apexParser.SEMI);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 919;
	            this.match(apexParser.BREAK);
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.Identifier) {
	                this.state = 920;
	                this.match(apexParser.Identifier);
	            }

	            this.state = 923;
	            this.match(apexParser.SEMI);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 924;
	            this.match(apexParser.CONTINUE);
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.Identifier) {
	                this.state = 925;
	                this.match(apexParser.Identifier);
	            }

	            this.state = 928;
	            this.match(apexParser.SEMI);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 929;
	            this.match(apexParser.SEMI);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 930;
	            this.statementExpression();
	            this.state = 931;
	            this.match(apexParser.SEMI);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 933;
	            this.match(apexParser.Identifier);
	            this.state = 934;
	            this.match(apexParser.COLON);
	            this.state = 935;
	            this.statement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 936;
	            this.apexDbExpression();
	            this.state = 937;
	            this.match(apexParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyBlock() {
	    let localctx = new PropertyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, apexParser.RULE_propertyBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.NATIVE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
	            this.state = 941;
	            this.modifier();
	            this.state = 946;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 949;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.GET:
	            this.state = 947;
	            this.getter();
	            break;
	        case apexParser.SET:
	            this.state = 948;
	            this.setter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, apexParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this.match(apexParser.GET);
	        this.state = 954;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SEMI:
	            this.state = 952;
	            this.match(apexParser.SEMI);
	            break;
	        case apexParser.LBRACE:
	            this.state = 953;
	            this.methodBody();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, apexParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(apexParser.SET);
	        this.state = 959;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SEMI:
	            this.state = 957;
	            this.match(apexParser.SEMI);
	            break;
	        case apexParser.LBRACE:
	            this.state = 958;
	            this.methodBody();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, apexParser.RULE_catchClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        this.match(apexParser.CATCH);
	        this.state = 962;
	        this.match(apexParser.LPAREN);
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 963;
	            this.variableModifier();
	            this.state = 968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 969;
	        this.catchType();
	        this.state = 970;
	        this.match(apexParser.Identifier);
	        this.state = 971;
	        this.match(apexParser.RPAREN);
	        this.state = 972;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, apexParser.RULE_catchType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        this.qualifiedName();
	        this.state = 979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.BITOR) {
	            this.state = 975;
	            this.match(apexParser.BITOR);
	            this.state = 976;
	            this.qualifiedName();
	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyBlock() {
	    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, apexParser.RULE_finallyBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.match(apexParser.FINALLY);
	        this.state = 983;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, apexParser.RULE_resourceSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 985;
	        this.match(apexParser.LPAREN);
	        this.state = 986;
	        this.resources();
	        this.state = 988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.SEMI) {
	            this.state = 987;
	            this.match(apexParser.SEMI);
	        }

	        this.state = 990;
	        this.match(apexParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resources() {
	    let localctx = new ResourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, apexParser.RULE_resources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this.resource();
	        this.state = 997;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 993;
	                this.match(apexParser.SEMI);
	                this.state = 994;
	                this.resource(); 
	            }
	            this.state = 999;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, apexParser.RULE_resource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 1000;
	            this.variableModifier();
	            this.state = 1005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1006;
	        this.classOrInterfaceType();
	        this.state = 1007;
	        this.variableDeclaratorId();
	        this.state = 1008;
	        this.match(apexParser.ASSIGN);
	        this.state = 1009;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forControl() {
	    let localctx = new ForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, apexParser.RULE_forControl);
	    var _la = 0; // Token type
	    try {
	        this.state = 1023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1011;
	            this.enhancedForControl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
	                this.state = 1012;
	                this.forInit();
	            }

	            this.state = 1015;
	            this.match(apexParser.SEMI);
	            this.state = 1017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                this.state = 1016;
	                this.expression(0);
	            }

	            this.state = 1019;
	            this.match(apexParser.SEMI);
	            this.state = 1021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                this.state = 1020;
	                this.forUpdate();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, apexParser.RULE_forInit);
	    try {
	        this.state = 1027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1025;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1026;
	            this.expressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForControl() {
	    let localctx = new EnhancedForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, apexParser.RULE_enhancedForControl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.FINAL || _la===apexParser.AT) {
	            this.state = 1029;
	            this.variableModifier();
	            this.state = 1034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1035;
	        this.type_();
	        this.state = 1036;
	        this.variableDeclaratorId();
	        this.state = 1037;
	        this.match(apexParser.COLON);
	        this.state = 1038;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, apexParser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, apexParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1042;
	        this.match(apexParser.LPAREN);
	        this.state = 1043;
	        this.expression(0);
	        this.state = 1044;
	        this.match(apexParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, apexParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046;
	        this.expression(0);
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===apexParser.COMMA) {
	            this.state = 1047;
	            this.match(apexParser.COMMA);
	            this.state = 1048;
	            this.expression(0);
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, apexParser.RULE_statementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, apexParser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	apexDbUpsertExpression() {
	    let localctx = new ApexDbUpsertExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, apexParser.RULE_apexDbUpsertExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this.match(apexParser.DB_UPSERT);
	        this.state = 1059;
	        this.expression(0);
	        this.state = 1063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	            this.state = 1060;
	            this.expression(0);
	            this.state = 1065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	apexDbExpression() {
	    let localctx = new ApexDbExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, apexParser.RULE_apexDbExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1069;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.DB_INSERT:
	        case apexParser.DB_UPDATE:
	        case apexParser.DB_DELETE:
	        case apexParser.DB_UNDELETE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1066;
	            _la = this._input.LA(1);
	            if(!(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (apexParser.DB_INSERT - 55)) | (1 << (apexParser.DB_UPDATE - 55)) | (1 << (apexParser.DB_DELETE - 55)) | (1 << (apexParser.DB_UNDELETE - 55)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1067;
	            this.expression(0);
	            break;
	        case apexParser.DB_UPSERT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1068;
	            this.apexDbUpsertExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 184;
	    this.enterRecursionRule(localctx, 184, apexParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1072;
	            this.primary();
	            break;

	        case 2:
	            this.state = 1073;
	            this.match(apexParser.NEW);
	            this.state = 1074;
	            this.creator();
	            break;

	        case 3:
	            this.state = 1075;
	            this.match(apexParser.LPAREN);
	            this.state = 1076;
	            this.type_();
	            this.state = 1077;
	            this.match(apexParser.RPAREN);
	            this.state = 1078;
	            this.expression(17);
	            break;

	        case 4:
	            this.state = 1080;
	            _la = this._input.LA(1);
	            if(!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (apexParser.INC - 90)) | (1 << (apexParser.DEC - 90)) | (1 << (apexParser.ADD - 90)) | (1 << (apexParser.SUB - 90)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1081;
	            this.expression(15);
	            break;

	        case 5:
	            this.state = 1082;
	            _la = this._input.LA(1);
	            if(!(_la===apexParser.BANG || _la===apexParser.TILDE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1083;
	            this.expression(14);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1186;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1184;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1086;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1087;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (apexParser.MUL - 94)) | (1 << (apexParser.DIV - 94)) | (1 << (apexParser.MOD - 94)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1088;
	                    this.expression(14);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1089;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1090;
	                    _la = this._input.LA(1);
	                    if(!(_la===apexParser.ADD || _la===apexParser.SUB)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1091;
	                    this.expression(13);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1092;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1100;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1093;
	                        this.match(apexParser.LT);
	                        this.state = 1094;
	                        this.match(apexParser.LT);
	                        break;

	                    case 2:
	                        this.state = 1095;
	                        this.match(apexParser.GT);
	                        this.state = 1096;
	                        this.match(apexParser.GT);
	                        this.state = 1097;
	                        this.match(apexParser.GT);
	                        break;

	                    case 3:
	                        this.state = 1098;
	                        this.match(apexParser.GT);
	                        this.state = 1099;
	                        this.match(apexParser.GT);
	                        break;

	                    }
	                    this.state = 1102;
	                    this.expression(12);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1103;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1104;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (apexParser.GT - 78)) | (1 << (apexParser.LT - 78)) | (1 << (apexParser.LE - 78)) | (1 << (apexParser.GE - 78)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1105;
	                    this.expression(11);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1106;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1107;
	                    _la = this._input.LA(1);
	                    if(!(_la===apexParser.T__0 || _la===apexParser.EQUAL || _la===apexParser.NOTEQUAL)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1108;
	                    this.expression(9);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1109;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1110;
	                    this.match(apexParser.BITAND);
	                    this.state = 1111;
	                    this.expression(8);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1112;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1113;
	                    this.match(apexParser.CARET);
	                    this.state = 1114;
	                    this.expression(7);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1115;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1116;
	                    this.match(apexParser.BITOR);
	                    this.state = 1117;
	                    this.expression(6);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1118;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1119;
	                    this.match(apexParser.AND);
	                    this.state = 1120;
	                    this.expression(5);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1121;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1122;
	                    this.match(apexParser.OR);
	                    this.state = 1123;
	                    this.expression(4);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1124;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1125;
	                    this.match(apexParser.QUESTION);
	                    this.state = 1126;
	                    this.expression(0);
	                    this.state = 1127;
	                    this.match(apexParser.COLON);
	                    this.state = 1128;
	                    this.expression(3);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1130;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1131;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (apexParser.ASSIGN - 77)) | (1 << (apexParser.ADD_ASSIGN - 77)) | (1 << (apexParser.SUB_ASSIGN - 77)) | (1 << (apexParser.MUL_ASSIGN - 77)) | (1 << (apexParser.DIV_ASSIGN - 77)) | (1 << (apexParser.AND_ASSIGN - 77)) | (1 << (apexParser.OR_ASSIGN - 77)) | (1 << (apexParser.XOR_ASSIGN - 77)) | (1 << (apexParser.MOD_ASSIGN - 77)) | (1 << (apexParser.LSHIFT_ASSIGN - 77)))) !== 0) || _la===apexParser.RSHIFT_ASSIGN || _la===apexParser.URSHIFT_ASSIGN)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1132;
	                    this.expression(1);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1133;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 1134;
	                    this.match(apexParser.DOT);
	                    this.state = 1135;
	                    this.match(apexParser.GET);
	                    this.state = 1136;
	                    this.match(apexParser.LPAREN);
	                    this.state = 1138;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                        this.state = 1137;
	                        this.expressionList();
	                    }

	                    this.state = 1140;
	                    this.match(apexParser.RPAREN);
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1141;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 1142;
	                    this.match(apexParser.DOT);
	                    this.state = 1143;
	                    this.match(apexParser.SET);
	                    this.state = 1144;
	                    this.match(apexParser.LPAREN);
	                    this.state = 1146;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                        this.state = 1145;
	                        this.expressionList();
	                    }

	                    this.state = 1148;
	                    this.match(apexParser.RPAREN);
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1149;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 1150;
	                    this.match(apexParser.DOT);
	                    this.state = 1151;
	                    this.match(apexParser.Identifier);
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1152;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1153;
	                    this.match(apexParser.DOT);
	                    this.state = 1154;
	                    this.match(apexParser.THIS);
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1155;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1156;
	                    this.match(apexParser.DOT);
	                    this.state = 1157;
	                    this.match(apexParser.NEW);
	                    break;

	                case 18:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1158;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 1159;
	                    this.match(apexParser.DOT);
	                    this.state = 1160;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (apexParser.DB_INSERT - 55)) | (1 << (apexParser.DB_UPSERT - 55)) | (1 << (apexParser.DB_UPDATE - 55)) | (1 << (apexParser.DB_DELETE - 55)) | (1 << (apexParser.DB_UNDELETE - 55)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 19:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1161;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1162;
	                    this.match(apexParser.DOT);
	                    this.state = 1163;
	                    this.match(apexParser.SUPER);
	                    this.state = 1164;
	                    this.superSuffix();
	                    break;

	                case 20:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1165;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1166;
	                    this.match(apexParser.DOT);
	                    this.state = 1167;
	                    this.explicitGenericInvocation();
	                    break;

	                case 21:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1168;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1169;
	                    this.match(apexParser.LBRACK);
	                    this.state = 1170;
	                    this.expression(0);
	                    this.state = 1171;
	                    this.match(apexParser.RBRACK);
	                    break;

	                case 22:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1173;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1174;
	                    this.match(apexParser.LPAREN);
	                    this.state = 1176;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	                        this.state = 1175;
	                        this.expressionList();
	                    }

	                    this.state = 1178;
	                    this.match(apexParser.RPAREN);
	                    break;

	                case 23:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1179;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1180;
	                    _la = this._input.LA(1);
	                    if(!(_la===apexParser.INC || _la===apexParser.DEC)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 24:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
	                    this.state = 1181;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1182;
	                    this.match(apexParser.INSTANCEOF);
	                    this.state = 1183;
	                    this.type_();
	                    break;

	                } 
	            }
	            this.state = 1188;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, apexParser.RULE_primary);
	    try {
	        this.state = 1211;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1189;
	            this.match(apexParser.LPAREN);
	            this.state = 1190;
	            this.expression(0);
	            this.state = 1191;
	            this.match(apexParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1193;
	            this.match(apexParser.THIS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1194;
	            this.match(apexParser.SUPER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1195;
	            this.literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1196;
	            this.match(apexParser.Identifier);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1197;
	            this.type_();
	            this.state = 1198;
	            this.match(apexParser.DOT);
	            this.state = 1199;
	            this.match(apexParser.CLASS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1201;
	            this.match(apexParser.VOID);
	            this.state = 1202;
	            this.match(apexParser.DOT);
	            this.state = 1203;
	            this.match(apexParser.CLASS);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1204;
	            this.nonWildcardTypeArguments();
	            this.state = 1208;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case apexParser.SUPER:
	            case apexParser.Identifier:
	                this.state = 1205;
	                this.explicitGenericInvocationSuffix();
	                break;
	            case apexParser.THIS:
	                this.state = 1206;
	                this.match(apexParser.THIS);
	                this.state = 1207;
	                this.arguments();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1210;
	            this.match(apexParser.SoqlLiteral);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator() {
	    let localctx = new CreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, apexParser.RULE_creator);
	    try {
	        this.state = 1224;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.LT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1213;
	            this.nonWildcardTypeArguments();
	            this.state = 1214;
	            this.createdName();
	            this.state = 1215;
	            this.classCreatorRest();
	            break;
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1217;
	            this.createdName();
	            this.state = 1222;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1218;
	                this.arrayCreatorRest();
	                break;

	            case 2:
	                this.state = 1219;
	                this.classCreatorRest();
	                break;

	            case 3:
	                this.state = 1220;
	                this.mapCreatorRest();
	                break;

	            case 4:
	                this.state = 1221;
	                this.setCreatorRest();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdName() {
	    let localctx = new CreatedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, apexParser.RULE_createdName);
	    var _la = 0; // Token type
	    try {
	        this.state = 1243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1226;
	            this.match(apexParser.Identifier);
	            this.state = 1228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===apexParser.LT) {
	                this.state = 1227;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 1237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===apexParser.DOT) {
	                this.state = 1230;
	                this.match(apexParser.DOT);
	                this.state = 1231;
	                this.match(apexParser.Identifier);
	                this.state = 1233;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===apexParser.LT) {
	                    this.state = 1232;
	                    this.typeArgumentsOrDiamond();
	                }

	                this.state = 1239;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.SHORT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1240;
	            this.primitiveType();
	            break;
	        case apexParser.SET:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1241;
	            this.match(apexParser.SET);
	            this.state = 1242;
	            this.typeArgumentsOrDiamond();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerCreator() {
	    let localctx = new InnerCreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, apexParser.RULE_innerCreator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.match(apexParser.Identifier);
	        this.state = 1247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===apexParser.LT) {
	            this.state = 1246;
	            this.nonWildcardTypeArgumentsOrDiamond();
	        }

	        this.state = 1249;
	        this.classCreatorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreatorRest() {
	    let localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, apexParser.RULE_arrayCreatorRest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1251;
	        this.match(apexParser.LBRACK);
	        this.state = 1279;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.RBRACK:
	            this.state = 1252;
	            this.match(apexParser.RBRACK);
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===apexParser.LBRACK) {
	                this.state = 1253;
	                this.match(apexParser.LBRACK);
	                this.state = 1254;
	                this.match(apexParser.RBRACK);
	                this.state = 1259;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1260;
	            this.arrayInitializer();
	            break;
	        case apexParser.SoqlLiteral:
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.NEW:
	        case apexParser.SHORT:
	        case apexParser.SUPER:
	        case apexParser.THIS:
	        case apexParser.VOID:
	        case apexParser.IntegerLiteral:
	        case apexParser.FloatingPointLiteral:
	        case apexParser.BooleanLiteral:
	        case apexParser.CharacterLiteral:
	        case apexParser.StringLiteral:
	        case apexParser.NullLiteral:
	        case apexParser.LPAREN:
	        case apexParser.LT:
	        case apexParser.BANG:
	        case apexParser.TILDE:
	        case apexParser.INC:
	        case apexParser.DEC:
	        case apexParser.ADD:
	        case apexParser.SUB:
	        case apexParser.Identifier:
	            this.state = 1261;
	            this.expression(0);
	            this.state = 1262;
	            this.match(apexParser.RBRACK);
	            this.state = 1269;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1263;
	                    this.match(apexParser.LBRACK);
	                    this.state = 1264;
	                    this.expression(0);
	                    this.state = 1265;
	                    this.match(apexParser.RBRACK); 
	                }
	                this.state = 1271;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
	            }

	            this.state = 1276;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1272;
	                    this.match(apexParser.LBRACK);
	                    this.state = 1273;
	                    this.match(apexParser.RBRACK); 
	                }
	                this.state = 1278;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapCreatorRest() {
	    let localctx = new MapCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, apexParser.RULE_mapCreatorRest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.match(apexParser.LBRACE);
	        this.state = 1309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.RBRACE:
	            this.state = 1282;
	            this.match(apexParser.RBRACE);
	            break;
	        case apexParser.SoqlLiteral:
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.NEW:
	        case apexParser.SHORT:
	        case apexParser.SUPER:
	        case apexParser.THIS:
	        case apexParser.VOID:
	        case apexParser.IntegerLiteral:
	        case apexParser.FloatingPointLiteral:
	        case apexParser.BooleanLiteral:
	        case apexParser.CharacterLiteral:
	        case apexParser.StringLiteral:
	        case apexParser.NullLiteral:
	        case apexParser.LPAREN:
	        case apexParser.LT:
	        case apexParser.BANG:
	        case apexParser.TILDE:
	        case apexParser.INC:
	        case apexParser.DEC:
	        case apexParser.ADD:
	        case apexParser.SUB:
	        case apexParser.Identifier:
	            this.state = 1285;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1283;
	                this.match(apexParser.Identifier);
	                break;

	            case 2:
	                this.state = 1284;
	                this.expression(0);
	                break;

	            }
	            this.state = 1287;
	            this.match(apexParser.LAMBDA_LIKE);
	            this.state = 1290;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1288;
	                this.literal();
	                break;

	            case 2:
	                this.state = 1289;
	                this.expression(0);
	                break;

	            }
	            this.state = 1304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===apexParser.COMMA) {
	                this.state = 1292;
	                this.match(apexParser.COMMA);
	                this.state = 1295;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1293;
	                    this.match(apexParser.Identifier);
	                    break;

	                case 2:
	                    this.state = 1294;
	                    this.expression(0);
	                    break;

	                }
	                this.state = 1297;
	                this.match(apexParser.LAMBDA_LIKE);
	                this.state = 1300;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1298;
	                    this.literal();
	                    break;

	                case 2:
	                    this.state = 1299;
	                    this.expression(0);
	                    break;

	                }
	                this.state = 1306;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1307;
	            this.match(apexParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setCreatorRest() {
	    let localctx = new SetCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, apexParser.RULE_setCreatorRest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this.match(apexParser.LBRACE);
	        this.state = 1329;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.RBRACE:
	            this.state = 1312;
	            this.match(apexParser.RBRACE);
	            break;
	        case apexParser.SoqlLiteral:
	        case apexParser.SET:
	        case apexParser.BYTE:
	        case apexParser.CHAR:
	        case apexParser.FLOAT:
	        case apexParser.INT:
	        case apexParser.NEW:
	        case apexParser.SHORT:
	        case apexParser.SUPER:
	        case apexParser.THIS:
	        case apexParser.VOID:
	        case apexParser.IntegerLiteral:
	        case apexParser.FloatingPointLiteral:
	        case apexParser.BooleanLiteral:
	        case apexParser.CharacterLiteral:
	        case apexParser.StringLiteral:
	        case apexParser.NullLiteral:
	        case apexParser.LPAREN:
	        case apexParser.LT:
	        case apexParser.BANG:
	        case apexParser.TILDE:
	        case apexParser.INC:
	        case apexParser.DEC:
	        case apexParser.ADD:
	        case apexParser.SUB:
	        case apexParser.Identifier:
	            this.state = 1315;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1313;
	                this.literal();
	                break;

	            case 2:
	                this.state = 1314;
	                this.expression(0);
	                break;

	            }
	            this.state = 1324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===apexParser.COMMA) {
	                this.state = 1317;
	                this.match(apexParser.COMMA);
	                this.state = 1320;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1318;
	                    this.literal();
	                    break;

	                case 2:
	                    this.state = 1319;
	                    this.expression(0);
	                    break;

	                }
	                this.state = 1326;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1327;
	            this.match(apexParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classCreatorRest() {
	    let localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, apexParser.RULE_classCreatorRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1331;
	        this.arguments();
	        this.state = 1333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 1332;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocation() {
	    let localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, apexParser.RULE_explicitGenericInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1335;
	        this.nonWildcardTypeArguments();
	        this.state = 1336;
	        this.explicitGenericInvocationSuffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArguments() {
	    let localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, apexParser.RULE_nonWildcardTypeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1338;
	        this.match(apexParser.LT);
	        this.state = 1339;
	        this.typeList();
	        this.state = 1340;
	        this.match(apexParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, apexParser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 1345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1342;
	            this.match(apexParser.LT);
	            this.state = 1343;
	            this.match(apexParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1344;
	            this.typeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArgumentsOrDiamond() {
	    let localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, apexParser.RULE_nonWildcardTypeArgumentsOrDiamond);
	    try {
	        this.state = 1350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1347;
	            this.match(apexParser.LT);
	            this.state = 1348;
	            this.match(apexParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1349;
	            this.nonWildcardTypeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superSuffix() {
	    let localctx = new SuperSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, apexParser.RULE_superSuffix);
	    try {
	        this.state = 1358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1352;
	            this.arguments();
	            break;
	        case apexParser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1353;
	            this.match(apexParser.DOT);
	            this.state = 1354;
	            this.match(apexParser.Identifier);
	            this.state = 1356;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	            if(la_===1) {
	                this.state = 1355;
	                this.arguments();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocationSuffix() {
	    let localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, apexParser.RULE_explicitGenericInvocationSuffix);
	    try {
	        this.state = 1364;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case apexParser.SUPER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1360;
	            this.match(apexParser.SUPER);
	            this.state = 1361;
	            this.superSuffix();
	            break;
	        case apexParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1362;
	            this.match(apexParser.Identifier);
	            this.state = 1363;
	            this.arguments();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, apexParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.match(apexParser.LPAREN);
	        this.state = 1368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.IntegerLiteral - 32)) | (1 << (apexParser.FloatingPointLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier) {
	            this.state = 1367;
	            this.expressionList();
	        }

	        this.state = 1370;
	        this.match(apexParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

apexParser.EOF = antlr4.Token.EOF;
apexParser.T__0 = 1;
apexParser.SoqlLiteral = 2;
apexParser.OVERRIDE = 3;
apexParser.VIRTUAL = 4;
apexParser.SET = 5;
apexParser.GET = 6;
apexParser.ABSTRACT = 7;
apexParser.BREAK = 8;
apexParser.BYTE = 9;
apexParser.CATCH = 10;
apexParser.CHAR = 11;
apexParser.CLASS = 12;
apexParser.CONST = 13;
apexParser.CONTINUE = 14;
apexParser.DEFAULT = 15;
apexParser.DO = 16;
apexParser.ELSE = 17;
apexParser.ENUM = 18;
apexParser.EXTENDS = 19;
apexParser.FINAL = 20;
apexParser.FINALLY = 21;
apexParser.FLOAT = 22;
apexParser.FOR = 23;
apexParser.IF = 24;
apexParser.GOTO = 25;
apexParser.IMPLEMENTS = 26;
apexParser.IMPORT = 27;
apexParser.INSTANCEOF = 28;
apexParser.INT = 29;
apexParser.INTERFACE = 30;
apexParser.NATIVE = 31;
apexParser.NEW = 32;
apexParser.PACKAGE = 33;
apexParser.PRIVATE = 34;
apexParser.PROTECTED = 35;
apexParser.PUBLIC = 36;
apexParser.RETURN = 37;
apexParser.SHORT = 38;
apexParser.STATIC = 39;
apexParser.SUPER = 40;
apexParser.SYNCHRONIZED = 41;
apexParser.THIS = 42;
apexParser.THROW = 43;
apexParser.THROWS = 44;
apexParser.TRANSIENT = 45;
apexParser.TRY = 46;
apexParser.VOID = 47;
apexParser.VOLATILE = 48;
apexParser.WHILE = 49;
apexParser.GLOBAL = 50;
apexParser.WEBSERVICE = 51;
apexParser.APEX_WITH_SHARING = 52;
apexParser.APEX_WITHOUT_SHARING = 53;
apexParser.SELECT = 54;
apexParser.DB_INSERT = 55;
apexParser.DB_UPSERT = 56;
apexParser.DB_UPDATE = 57;
apexParser.DB_DELETE = 58;
apexParser.DB_UNDELETE = 59;
apexParser.TESTMETHOD = 60;
apexParser.RUNAS = 61;
apexParser.IntegerLiteral = 62;
apexParser.FloatingPointLiteral = 63;
apexParser.BooleanLiteral = 64;
apexParser.CharacterLiteral = 65;
apexParser.StringLiteral = 66;
apexParser.NullLiteral = 67;
apexParser.LPAREN = 68;
apexParser.RPAREN = 69;
apexParser.LBRACE = 70;
apexParser.RBRACE = 71;
apexParser.LBRACK = 72;
apexParser.RBRACK = 73;
apexParser.SEMI = 74;
apexParser.COMMA = 75;
apexParser.DOT = 76;
apexParser.ASSIGN = 77;
apexParser.GT = 78;
apexParser.LT = 79;
apexParser.BANG = 80;
apexParser.TILDE = 81;
apexParser.QUESTION = 82;
apexParser.COLON = 83;
apexParser.EQUAL = 84;
apexParser.LE = 85;
apexParser.GE = 86;
apexParser.NOTEQUAL = 87;
apexParser.AND = 88;
apexParser.OR = 89;
apexParser.INC = 90;
apexParser.DEC = 91;
apexParser.ADD = 92;
apexParser.SUB = 93;
apexParser.MUL = 94;
apexParser.DIV = 95;
apexParser.BITAND = 96;
apexParser.BITOR = 97;
apexParser.CARET = 98;
apexParser.MOD = 99;
apexParser.ADD_ASSIGN = 100;
apexParser.SUB_ASSIGN = 101;
apexParser.MUL_ASSIGN = 102;
apexParser.DIV_ASSIGN = 103;
apexParser.AND_ASSIGN = 104;
apexParser.OR_ASSIGN = 105;
apexParser.XOR_ASSIGN = 106;
apexParser.MOD_ASSIGN = 107;
apexParser.LSHIFT_ASSIGN = 108;
apexParser.RSHIFT_ASSIGN = 109;
apexParser.URSHIFT_ASSIGN = 110;
apexParser.LAMBDA_LIKE = 111;
apexParser.Identifier = 112;
apexParser.AT = 113;
apexParser.ELLIPSIS = 114;
apexParser.WS = 115;
apexParser.APEXDOC_COMMENT = 116;
apexParser.APEXDOC_COMMENT_START = 117;
apexParser.COMMENT = 118;
apexParser.COMMENT_START = 119;
apexParser.LINE_COMMENT = 120;
apexParser.QUOTE = 121;

apexParser.RULE_compilationUnit = 0;
apexParser.RULE_packageDeclaration = 1;
apexParser.RULE_importDeclaration = 2;
apexParser.RULE_typeDeclaration = 3;
apexParser.RULE_modifier = 4;
apexParser.RULE_classOrInterfaceModifier = 5;
apexParser.RULE_variableModifier = 6;
apexParser.RULE_classDeclaration = 7;
apexParser.RULE_typeParameters = 8;
apexParser.RULE_typeParameter = 9;
apexParser.RULE_typeBound = 10;
apexParser.RULE_enumDeclaration = 11;
apexParser.RULE_enumConstants = 12;
apexParser.RULE_enumConstant = 13;
apexParser.RULE_enumBodyDeclarations = 14;
apexParser.RULE_interfaceDeclaration = 15;
apexParser.RULE_typeList = 16;
apexParser.RULE_classBody = 17;
apexParser.RULE_interfaceBody = 18;
apexParser.RULE_classBodyDeclaration = 19;
apexParser.RULE_memberDeclaration = 20;
apexParser.RULE_methodDeclaration = 21;
apexParser.RULE_genericMethodDeclaration = 22;
apexParser.RULE_constructorDeclaration = 23;
apexParser.RULE_genericConstructorDeclaration = 24;
apexParser.RULE_fieldDeclaration = 25;
apexParser.RULE_propertyDeclaration = 26;
apexParser.RULE_propertyBodyDeclaration = 27;
apexParser.RULE_interfaceBodyDeclaration = 28;
apexParser.RULE_interfaceMemberDeclaration = 29;
apexParser.RULE_constDeclaration = 30;
apexParser.RULE_constantDeclarator = 31;
apexParser.RULE_interfaceMethodDeclaration = 32;
apexParser.RULE_genericInterfaceMethodDeclaration = 33;
apexParser.RULE_variableDeclarators = 34;
apexParser.RULE_variableDeclarator = 35;
apexParser.RULE_variableDeclaratorId = 36;
apexParser.RULE_variableInitializer = 37;
apexParser.RULE_arrayInitializer = 38;
apexParser.RULE_enumConstantName = 39;
apexParser.RULE_type_ = 40;
apexParser.RULE_classOrInterfaceType = 41;
apexParser.RULE_primitiveType = 42;
apexParser.RULE_typeArguments = 43;
apexParser.RULE_typeArgument = 44;
apexParser.RULE_qualifiedNameList = 45;
apexParser.RULE_formalParameters = 46;
apexParser.RULE_formalParameterList = 47;
apexParser.RULE_formalParameter = 48;
apexParser.RULE_lastFormalParameter = 49;
apexParser.RULE_methodBody = 50;
apexParser.RULE_constructorBody = 51;
apexParser.RULE_qualifiedName = 52;
apexParser.RULE_literal = 53;
apexParser.RULE_annotation = 54;
apexParser.RULE_annotationName = 55;
apexParser.RULE_elementValuePairs = 56;
apexParser.RULE_elementValuePair = 57;
apexParser.RULE_elementValue = 58;
apexParser.RULE_elementValueArrayInitializer = 59;
apexParser.RULE_annotationTypeDeclaration = 60;
apexParser.RULE_annotationTypeBody = 61;
apexParser.RULE_annotationTypeElementDeclaration = 62;
apexParser.RULE_annotationTypeElementRest = 63;
apexParser.RULE_annotationMethodOrConstantRest = 64;
apexParser.RULE_annotationMethodRest = 65;
apexParser.RULE_annotationConstantRest = 66;
apexParser.RULE_defaultValue = 67;
apexParser.RULE_block = 68;
apexParser.RULE_blockStatement = 69;
apexParser.RULE_localVariableDeclarationStatement = 70;
apexParser.RULE_localVariableDeclaration = 71;
apexParser.RULE_statement = 72;
apexParser.RULE_propertyBlock = 73;
apexParser.RULE_getter = 74;
apexParser.RULE_setter = 75;
apexParser.RULE_catchClause = 76;
apexParser.RULE_catchType = 77;
apexParser.RULE_finallyBlock = 78;
apexParser.RULE_resourceSpecification = 79;
apexParser.RULE_resources = 80;
apexParser.RULE_resource = 81;
apexParser.RULE_forControl = 82;
apexParser.RULE_forInit = 83;
apexParser.RULE_enhancedForControl = 84;
apexParser.RULE_forUpdate = 85;
apexParser.RULE_parExpression = 86;
apexParser.RULE_expressionList = 87;
apexParser.RULE_statementExpression = 88;
apexParser.RULE_constantExpression = 89;
apexParser.RULE_apexDbUpsertExpression = 90;
apexParser.RULE_apexDbExpression = 91;
apexParser.RULE_expression = 92;
apexParser.RULE_primary = 93;
apexParser.RULE_creator = 94;
apexParser.RULE_createdName = 95;
apexParser.RULE_innerCreator = 96;
apexParser.RULE_arrayCreatorRest = 97;
apexParser.RULE_mapCreatorRest = 98;
apexParser.RULE_setCreatorRest = 99;
apexParser.RULE_classCreatorRest = 100;
apexParser.RULE_explicitGenericInvocation = 101;
apexParser.RULE_nonWildcardTypeArguments = 102;
apexParser.RULE_typeArgumentsOrDiamond = 103;
apexParser.RULE_nonWildcardTypeArgumentsOrDiamond = 104;
apexParser.RULE_superSuffix = 105;
apexParser.RULE_explicitGenericInvocationSuffix = 106;
apexParser.RULE_arguments = 107;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(apexParser.EOF, 0);
	};

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(apexParser.PACKAGE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_importDeclaration;
    }

	IMPORT() {
	    return this.getToken(apexParser.IMPORT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	STATIC() {
	    return this.getToken(apexParser.STATIC, 0);
	};

	DOT() {
	    return this.getToken(apexParser.DOT, 0);
	};

	MUL() {
	    return this.getToken(apexParser.MUL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitImportDeclaration(this);
		}
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_modifier;
    }

	classOrInterfaceModifier() {
	    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
	};

	NATIVE() {
	    return this.getToken(apexParser.NATIVE, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(apexParser.SYNCHRONIZED, 0);
	};

	TRANSIENT() {
	    return this.getToken(apexParser.TRANSIENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitModifier(this);
		}
	}


}



class ClassOrInterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classOrInterfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(apexParser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(apexParser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(apexParser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(apexParser.STATIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(apexParser.ABSTRACT, 0);
	};

	FINAL() {
	    return this.getToken(apexParser.FINAL, 0);
	};

	GLOBAL() {
	    return this.getToken(apexParser.GLOBAL, 0);
	};

	WEBSERVICE() {
	    return this.getToken(apexParser.WEBSERVICE, 0);
	};

	OVERRIDE() {
	    return this.getToken(apexParser.OVERRIDE, 0);
	};

	VIRTUAL() {
	    return this.getToken(apexParser.VIRTUAL, 0);
	};

	TESTMETHOD() {
	    return this.getToken(apexParser.TESTMETHOD, 0);
	};

	APEX_WITH_SHARING() {
	    return this.getToken(apexParser.APEX_WITH_SHARING, 0);
	};

	APEX_WITHOUT_SHARING() {
	    return this.getToken(apexParser.APEX_WITHOUT_SHARING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassOrInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassOrInterfaceModifier(this);
		}
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_variableModifier;
    }

	FINAL() {
	    return this.getToken(apexParser.FINAL, 0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitVariableModifier(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classDeclaration;
    }

	CLASS() {
	    return this.getToken(apexParser.CLASS, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(apexParser.EXTENDS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	IMPLEMENTS() {
	    return this.getToken(apexParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(apexParser.LT, 0);
	};

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(apexParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeParameters(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeParameter;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	EXTENDS() {
	    return this.getToken(apexParser.EXTENDS, 0);
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeBound;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	BITAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.BITAND);
	    } else {
	        return this.getToken(apexParser.BITAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeBound(this);
		}
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(apexParser.ENUM, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(apexParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enumConstants() {
	    return this.getTypedRuleContext(EnumConstantsContext,0);
	};

	COMMA() {
	    return this.getToken(apexParser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}


}



class EnumConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enumConstants;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnumConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnumConstants(this);
		}
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enumConstant;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnumConstant(this);
		}
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_interfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(apexParser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(apexParser.EXTENDS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeList;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeList(this);
		}
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassBody(this);
		}
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	interfaceBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInterfaceBody(this);
		}
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classBodyDeclaration;
    }

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	STATIC() {
	    return this.getToken(apexParser.STATIC, 0);
	};

	memberDeclaration() {
	    return this.getTypedRuleContext(MemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}


}



class MemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_memberDeclaration;
    }

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	genericMethodDeclaration() {
	    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
	};

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	genericConstructorDeclaration() {
	    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	propertyDeclaration() {
	    return this.getTypedRuleContext(PropertyDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitMemberDeclaration(this);
		}
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_methodDeclaration;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(apexParser.VOID, 0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	OVERRIDE() {
	    return this.getToken(apexParser.OVERRIDE, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(apexParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}


}



class GenericMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_genericMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterGenericMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitGenericMethodDeclaration(this);
		}
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_constructorDeclaration;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	THROWS() {
	    return this.getToken(apexParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}


}



class GenericConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_genericConstructorDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterGenericConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitGenericConstructorDeclaration(this);
		}
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_fieldDeclaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}


}



class PropertyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_propertyDeclaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	propertyBodyDeclaration() {
	    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPropertyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPropertyDeclaration(this);
		}
	}


}



class PropertyBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_propertyBodyDeclaration;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	propertyBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyBlockContext);
	    } else {
	        return this.getTypedRuleContext(PropertyBlockContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPropertyBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPropertyBodyDeclaration(this);
		}
	}


}



class InterfaceBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_interfaceBodyDeclaration;
    }

	interfaceMemberDeclaration() {
	    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInterfaceBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInterfaceBodyDeclaration(this);
		}
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_interfaceMemberDeclaration;
    }

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	genericInterfaceMethodDeclaration() {
	    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}


}



class ConstDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_constDeclaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	constantDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterConstDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitConstDeclaration(this);
		}
	}


}



class ConstantDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_constantDeclarator;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	ASSIGN() {
	    return this.getToken(apexParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterConstantDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitConstantDeclarator(this);
		}
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_interfaceMethodDeclaration;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(apexParser.VOID, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(apexParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}


}



class GenericInterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_genericInterfaceMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterGenericInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitGenericInterfaceMethodDeclaration(this);
		}
	}


}



class VariableDeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_variableDeclarators;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterVariableDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitVariableDeclarators(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(apexParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_variableDeclaratorId;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_variableInitializer;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitArrayInitializer(this);
		}
	}


}



class EnumConstantNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enumConstantName;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnumConstantName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnumConstantName(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_type_;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitType_(this);
		}
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classOrInterfaceType;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.Identifier);
	    } else {
	        return this.getToken(apexParser.Identifier, i);
	    }
	};


	typeArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.DOT);
	    } else {
	        return this.getToken(apexParser.DOT, i);
	    }
	};


	SET() {
	    return this.getToken(apexParser.SET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_primitiveType;
    }

	CHAR() {
	    return this.getToken(apexParser.CHAR, 0);
	};

	BYTE() {
	    return this.getToken(apexParser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(apexParser.SHORT, 0);
	};

	INT() {
	    return this.getToken(apexParser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(apexParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(apexParser.LT, 0);
	};

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	GT() {
	    return this.getToken(apexParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeArguments(this);
		}
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeArgument;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	QUESTION() {
	    return this.getToken(apexParser.QUESTION, 0);
	};

	EXTENDS() {
	    return this.getToken(apexParser.EXTENDS, 0);
	};

	SUPER() {
	    return this.getToken(apexParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeArgument(this);
		}
	}


}



class QualifiedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_qualifiedNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterQualifiedNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitQualifiedNameList(this);
		}
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_formalParameters;
    }

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitFormalParameters(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	lastFormalParameter() {
	    return this.getTypedRuleContext(LastFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_formalParameter;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitFormalParameter(this);
		}
	}


}



class LastFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_lastFormalParameter;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ELLIPSIS() {
	    return this.getToken(apexParser.ELLIPSIS, 0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterLastFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitLastFormalParameter(this);
		}
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitMethodBody(this);
		}
	}


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_constructorBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterConstructorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitConstructorBody(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_qualifiedName;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.Identifier);
	    } else {
	        return this.getToken(apexParser.Identifier, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.DOT);
	    } else {
	        return this.getToken(apexParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(apexParser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(apexParser.FloatingPointLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(apexParser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(apexParser.StringLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(apexParser.BooleanLiteral, 0);
	};

	NullLiteral() {
	    return this.getToken(apexParser.NullLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotation;
    }

	AT() {
	    return this.getToken(apexParser.AT, 0);
	};

	annotationName() {
	    return this.getTypedRuleContext(AnnotationNameContext,0);
	};

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	elementValuePairs() {
	    return this.getTypedRuleContext(ElementValuePairsContext,0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class AnnotationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationName(this);
		}
	}


}



class ElementValuePairsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_elementValuePairs;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterElementValuePairs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitElementValuePairs(this);
		}
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_elementValuePair;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	ASSIGN() {
	    return this.getToken(apexParser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitElementValuePair(this);
		}
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_elementValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitElementValue(this);
		}
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationTypeDeclaration;
    }

	AT() {
	    return this.getToken(apexParser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(apexParser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationTypeBody;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	annotationTypeElementDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationTypeElementDeclaration;
    }

	annotationTypeElementRest() {
	    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}


}



class AnnotationTypeElementRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationTypeElementRest;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	annotationMethodOrConstantRest() {
	    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationTypeElementRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationTypeElementRest(this);
		}
	}


}



class AnnotationMethodOrConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationMethodOrConstantRest;
    }

	annotationMethodRest() {
	    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
	};

	annotationConstantRest() {
	    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationMethodOrConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationMethodOrConstantRest(this);
		}
	}


}



class AnnotationMethodRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationMethodRest;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationMethodRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationMethodRest(this);
		}
	}


}



class AnnotationConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_annotationConstantRest;
    }

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterAnnotationConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitAnnotationConstantRest(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(apexParser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_blockStatement;
    }

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterLocalVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitLocalVariableDeclarationStatement(this);
		}
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_localVariableDeclaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	IF() {
	    return this.getToken(apexParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(apexParser.ELSE, 0);
	};

	FOR() {
	    return this.getToken(apexParser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	forControl() {
	    return this.getTypedRuleContext(ForControlContext,0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	WHILE() {
	    return this.getToken(apexParser.WHILE, 0);
	};

	DO() {
	    return this.getToken(apexParser.DO, 0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	RUNAS() {
	    return this.getToken(apexParser.RUNAS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	TRY() {
	    return this.getToken(apexParser.TRY, 0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	RETURN() {
	    return this.getToken(apexParser.RETURN, 0);
	};

	THROW() {
	    return this.getToken(apexParser.THROW, 0);
	};

	BREAK() {
	    return this.getToken(apexParser.BREAK, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	CONTINUE() {
	    return this.getToken(apexParser.CONTINUE, 0);
	};

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	COLON() {
	    return this.getToken(apexParser.COLON, 0);
	};

	apexDbExpression() {
	    return this.getTypedRuleContext(ApexDbExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitStatement(this);
		}
	}


}



class PropertyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_propertyBlock;
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPropertyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPropertyBlock(this);
		}
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_getter;
    }

	GET() {
	    return this.getToken(apexParser.GET, 0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitGetter(this);
		}
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_setter;
    }

	SET() {
	    return this.getToken(apexParser.SET, 0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitSetter(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(apexParser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_catchType;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.BITOR);
	    } else {
	        return this.getToken(apexParser.BITOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitCatchType(this);
		}
	}


}



class FinallyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_finallyBlock;
    }

	FINALLY() {
	    return this.getToken(apexParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterFinallyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitFinallyBlock(this);
		}
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	resources() {
	    return this.getTypedRuleContext(ResourcesContext,0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(apexParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitResourceSpecification(this);
		}
	}


}



class ResourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_resources;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.SEMI);
	    } else {
	        return this.getToken(apexParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterResources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitResources(this);
		}
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_resource;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(apexParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitResource(this);
		}
	}


}



class ForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_forControl;
    }

	enhancedForControl() {
	    return this.getTypedRuleContext(EnhancedForControlContext,0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.SEMI);
	    } else {
	        return this.getToken(apexParser.SEMI, i);
	    }
	};


	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitForControl(this);
		}
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_forInit;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitForInit(this);
		}
	}


}



class EnhancedForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_enhancedForControl;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(apexParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterEnhancedForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitEnhancedForControl(this);
		}
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_forUpdate;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitForUpdate(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_statementExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitStatementExpression(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class ApexDbUpsertExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_apexDbUpsertExpression;
    }

	DB_UPSERT() {
	    return this.getToken(apexParser.DB_UPSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterApexDbUpsertExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitApexDbUpsertExpression(this);
		}
	}


}



class ApexDbExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_apexDbExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DB_INSERT() {
	    return this.getToken(apexParser.DB_INSERT, 0);
	};

	DB_UPDATE() {
	    return this.getToken(apexParser.DB_UPDATE, 0);
	};

	DB_DELETE() {
	    return this.getToken(apexParser.DB_DELETE, 0);
	};

	DB_UNDELETE() {
	    return this.getToken(apexParser.DB_UNDELETE, 0);
	};

	apexDbUpsertExpression() {
	    return this.getTypedRuleContext(ApexDbUpsertExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterApexDbExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitApexDbExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_expression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	NEW() {
	    return this.getToken(apexParser.NEW, 0);
	};

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ADD() {
	    return this.getToken(apexParser.ADD, 0);
	};

	SUB() {
	    return this.getToken(apexParser.SUB, 0);
	};

	INC() {
	    return this.getToken(apexParser.INC, 0);
	};

	DEC() {
	    return this.getToken(apexParser.DEC, 0);
	};

	TILDE() {
	    return this.getToken(apexParser.TILDE, 0);
	};

	BANG() {
	    return this.getToken(apexParser.BANG, 0);
	};

	MUL() {
	    return this.getToken(apexParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(apexParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(apexParser.MOD, 0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LT);
	    } else {
	        return this.getToken(apexParser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.GT);
	    } else {
	        return this.getToken(apexParser.GT, i);
	    }
	};


	LE() {
	    return this.getToken(apexParser.LE, 0);
	};

	GE() {
	    return this.getToken(apexParser.GE, 0);
	};

	EQUAL() {
	    return this.getToken(apexParser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(apexParser.NOTEQUAL, 0);
	};

	BITAND() {
	    return this.getToken(apexParser.BITAND, 0);
	};

	CARET() {
	    return this.getToken(apexParser.CARET, 0);
	};

	BITOR() {
	    return this.getToken(apexParser.BITOR, 0);
	};

	AND() {
	    return this.getToken(apexParser.AND, 0);
	};

	OR() {
	    return this.getToken(apexParser.OR, 0);
	};

	QUESTION() {
	    return this.getToken(apexParser.QUESTION, 0);
	};

	COLON() {
	    return this.getToken(apexParser.COLON, 0);
	};

	ASSIGN() {
	    return this.getToken(apexParser.ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(apexParser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(apexParser.SUB_ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(apexParser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(apexParser.DIV_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(apexParser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(apexParser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(apexParser.XOR_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(apexParser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(apexParser.URSHIFT_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(apexParser.LSHIFT_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(apexParser.MOD_ASSIGN, 0);
	};

	DOT() {
	    return this.getToken(apexParser.DOT, 0);
	};

	GET() {
	    return this.getToken(apexParser.GET, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	SET() {
	    return this.getToken(apexParser.SET, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	THIS() {
	    return this.getToken(apexParser.THIS, 0);
	};

	DB_INSERT() {
	    return this.getToken(apexParser.DB_INSERT, 0);
	};

	DB_UPSERT() {
	    return this.getToken(apexParser.DB_UPSERT, 0);
	};

	DB_UPDATE() {
	    return this.getToken(apexParser.DB_UPDATE, 0);
	};

	DB_DELETE() {
	    return this.getToken(apexParser.DB_DELETE, 0);
	};

	DB_UNDELETE() {
	    return this.getToken(apexParser.DB_UNDELETE, 0);
	};

	SUPER() {
	    return this.getToken(apexParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	explicitGenericInvocation() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
	};

	LBRACK() {
	    return this.getToken(apexParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(apexParser.RBRACK, 0);
	};

	INSTANCEOF() {
	    return this.getToken(apexParser.INSTANCEOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitExpression(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_primary;
    }

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	THIS() {
	    return this.getToken(apexParser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(apexParser.SUPER, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	DOT() {
	    return this.getToken(apexParser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(apexParser.CLASS, 0);
	};

	VOID() {
	    return this.getToken(apexParser.VOID, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	SoqlLiteral() {
	    return this.getToken(apexParser.SoqlLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class CreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_creator;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	createdName() {
	    return this.getTypedRuleContext(CreatedNameContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	arrayCreatorRest() {
	    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
	};

	mapCreatorRest() {
	    return this.getTypedRuleContext(MapCreatorRestContext,0);
	};

	setCreatorRest() {
	    return this.getTypedRuleContext(SetCreatorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitCreator(this);
		}
	}


}



class CreatedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_createdName;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.Identifier);
	    } else {
	        return this.getToken(apexParser.Identifier, i);
	    }
	};


	typeArgumentsOrDiamond = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.DOT);
	    } else {
	        return this.getToken(apexParser.DOT, i);
	    }
	};


	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	SET() {
	    return this.getToken(apexParser.SET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterCreatedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitCreatedName(this);
		}
	}


}



class InnerCreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_innerCreator;
    }

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	nonWildcardTypeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterInnerCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitInnerCreator(this);
		}
	}


}



class ArrayCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_arrayCreatorRest;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LBRACK);
	    } else {
	        return this.getToken(apexParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.RBRACK);
	    } else {
	        return this.getToken(apexParser.RBRACK, i);
	    }
	};


	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterArrayCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitArrayCreatorRest(this);
		}
	}


}



class MapCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_mapCreatorRest;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	LAMBDA_LIKE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.LAMBDA_LIKE);
	    } else {
	        return this.getToken(apexParser.LAMBDA_LIKE, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.Identifier);
	    } else {
	        return this.getToken(apexParser.Identifier, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterMapCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitMapCreatorRest(this);
		}
	}


}



class SetCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_setCreatorRest;
    }

	LBRACE() {
	    return this.getToken(apexParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(apexParser.RBRACE, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(apexParser.COMMA);
	    } else {
	        return this.getToken(apexParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterSetCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitSetCreatorRest(this);
		}
	}


}



class ClassCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_classCreatorRest;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterClassCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitClassCreatorRest(this);
		}
	}


}



class ExplicitGenericInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_explicitGenericInvocation;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterExplicitGenericInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitExplicitGenericInvocation(this);
		}
	}


}



class NonWildcardTypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_nonWildcardTypeArguments;
    }

	LT() {
	    return this.getToken(apexParser.LT, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	GT() {
	    return this.getToken(apexParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterNonWildcardTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitNonWildcardTypeArguments(this);
		}
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_typeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(apexParser.LT, 0);
	};

	GT() {
	    return this.getToken(apexParser.GT, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}


}



class NonWildcardTypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(apexParser.LT, 0);
	};

	GT() {
	    return this.getToken(apexParser.GT, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}


}



class SuperSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_superSuffix;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(apexParser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterSuperSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitSuperSuffix(this);
		}
	}


}



class ExplicitGenericInvocationSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_explicitGenericInvocationSuffix;
    }

	SUPER() {
	    return this.getToken(apexParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	Identifier() {
	    return this.getToken(apexParser.Identifier, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterExplicitGenericInvocationSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitExplicitGenericInvocationSuffix(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = apexParser.RULE_arguments;
    }

	LPAREN() {
	    return this.getToken(apexParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(apexParser.RPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof apexListener ) {
	        listener.exitArguments(this);
		}
	}


}




apexParser.CompilationUnitContext = CompilationUnitContext; 
apexParser.PackageDeclarationContext = PackageDeclarationContext; 
apexParser.ImportDeclarationContext = ImportDeclarationContext; 
apexParser.TypeDeclarationContext = TypeDeclarationContext; 
apexParser.ModifierContext = ModifierContext; 
apexParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext; 
apexParser.VariableModifierContext = VariableModifierContext; 
apexParser.ClassDeclarationContext = ClassDeclarationContext; 
apexParser.TypeParametersContext = TypeParametersContext; 
apexParser.TypeParameterContext = TypeParameterContext; 
apexParser.TypeBoundContext = TypeBoundContext; 
apexParser.EnumDeclarationContext = EnumDeclarationContext; 
apexParser.EnumConstantsContext = EnumConstantsContext; 
apexParser.EnumConstantContext = EnumConstantContext; 
apexParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
apexParser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
apexParser.TypeListContext = TypeListContext; 
apexParser.ClassBodyContext = ClassBodyContext; 
apexParser.InterfaceBodyContext = InterfaceBodyContext; 
apexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
apexParser.MemberDeclarationContext = MemberDeclarationContext; 
apexParser.MethodDeclarationContext = MethodDeclarationContext; 
apexParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext; 
apexParser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
apexParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext; 
apexParser.FieldDeclarationContext = FieldDeclarationContext; 
apexParser.PropertyDeclarationContext = PropertyDeclarationContext; 
apexParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext; 
apexParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext; 
apexParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
apexParser.ConstDeclarationContext = ConstDeclarationContext; 
apexParser.ConstantDeclaratorContext = ConstantDeclaratorContext; 
apexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
apexParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext; 
apexParser.VariableDeclaratorsContext = VariableDeclaratorsContext; 
apexParser.VariableDeclaratorContext = VariableDeclaratorContext; 
apexParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
apexParser.VariableInitializerContext = VariableInitializerContext; 
apexParser.ArrayInitializerContext = ArrayInitializerContext; 
apexParser.EnumConstantNameContext = EnumConstantNameContext; 
apexParser.Type_Context = Type_Context; 
apexParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
apexParser.PrimitiveTypeContext = PrimitiveTypeContext; 
apexParser.TypeArgumentsContext = TypeArgumentsContext; 
apexParser.TypeArgumentContext = TypeArgumentContext; 
apexParser.QualifiedNameListContext = QualifiedNameListContext; 
apexParser.FormalParametersContext = FormalParametersContext; 
apexParser.FormalParameterListContext = FormalParameterListContext; 
apexParser.FormalParameterContext = FormalParameterContext; 
apexParser.LastFormalParameterContext = LastFormalParameterContext; 
apexParser.MethodBodyContext = MethodBodyContext; 
apexParser.ConstructorBodyContext = ConstructorBodyContext; 
apexParser.QualifiedNameContext = QualifiedNameContext; 
apexParser.LiteralContext = LiteralContext; 
apexParser.AnnotationContext = AnnotationContext; 
apexParser.AnnotationNameContext = AnnotationNameContext; 
apexParser.ElementValuePairsContext = ElementValuePairsContext; 
apexParser.ElementValuePairContext = ElementValuePairContext; 
apexParser.ElementValueContext = ElementValueContext; 
apexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
apexParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
apexParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
apexParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
apexParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext; 
apexParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext; 
apexParser.AnnotationMethodRestContext = AnnotationMethodRestContext; 
apexParser.AnnotationConstantRestContext = AnnotationConstantRestContext; 
apexParser.DefaultValueContext = DefaultValueContext; 
apexParser.BlockContext = BlockContext; 
apexParser.BlockStatementContext = BlockStatementContext; 
apexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
apexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
apexParser.StatementContext = StatementContext; 
apexParser.PropertyBlockContext = PropertyBlockContext; 
apexParser.GetterContext = GetterContext; 
apexParser.SetterContext = SetterContext; 
apexParser.CatchClauseContext = CatchClauseContext; 
apexParser.CatchTypeContext = CatchTypeContext; 
apexParser.FinallyBlockContext = FinallyBlockContext; 
apexParser.ResourceSpecificationContext = ResourceSpecificationContext; 
apexParser.ResourcesContext = ResourcesContext; 
apexParser.ResourceContext = ResourceContext; 
apexParser.ForControlContext = ForControlContext; 
apexParser.ForInitContext = ForInitContext; 
apexParser.EnhancedForControlContext = EnhancedForControlContext; 
apexParser.ForUpdateContext = ForUpdateContext; 
apexParser.ParExpressionContext = ParExpressionContext; 
apexParser.ExpressionListContext = ExpressionListContext; 
apexParser.StatementExpressionContext = StatementExpressionContext; 
apexParser.ConstantExpressionContext = ConstantExpressionContext; 
apexParser.ApexDbUpsertExpressionContext = ApexDbUpsertExpressionContext; 
apexParser.ApexDbExpressionContext = ApexDbExpressionContext; 
apexParser.ExpressionContext = ExpressionContext; 
apexParser.PrimaryContext = PrimaryContext; 
apexParser.CreatorContext = CreatorContext; 
apexParser.CreatedNameContext = CreatedNameContext; 
apexParser.InnerCreatorContext = InnerCreatorContext; 
apexParser.ArrayCreatorRestContext = ArrayCreatorRestContext; 
apexParser.MapCreatorRestContext = MapCreatorRestContext; 
apexParser.SetCreatorRestContext = SetCreatorRestContext; 
apexParser.ClassCreatorRestContext = ClassCreatorRestContext; 
apexParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext; 
apexParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext; 
apexParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
apexParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext; 
apexParser.SuperSuffixContext = SuperSuffixContext; 
apexParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext; 
apexParser.ArgumentsContext = ArgumentsContext; 
