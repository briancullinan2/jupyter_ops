// Generated from Resources/Parsers/rpn/rpn.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,17,138,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,1,0,1,0,1,0,3,0,49,8,0,1,0,1,0,3,0,53,8,0,1,1,4,1,56,
8,1,11,1,12,1,57,1,1,1,1,4,1,62,8,1,11,1,12,1,63,3,1,66,8,1,1,2,1,2,1,3,
1,3,1,4,1,4,5,4,74,8,4,10,4,12,4,77,9,4,1,5,3,5,80,8,5,1,6,1,6,3,6,84,8,
6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,
13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
20,1,20,1,21,4,21,133,8,21,11,21,12,21,134,1,21,1,21,0,0,22,1,1,3,0,5,0,
7,0,9,2,11,0,13,0,15,3,17,4,19,5,21,6,23,7,25,8,27,9,29,10,31,11,33,12,35,
13,37,14,39,15,41,16,43,17,1,0,4,2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,
90,95,95,97,122,3,0,9,10,13,13,32,32,140,0,1,1,0,0,0,0,9,1,0,0,0,0,15,1,
0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,55,1,0,0,0,5,67,
1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,79,1,0,0,0,13,83,1,0,0,0,15,85,1,0,
0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,91,1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,
0,27,99,1,0,0,0,29,103,1,0,0,0,31,107,1,0,0,0,33,112,1,0,0,0,35,117,1,0,
0,0,37,122,1,0,0,0,39,125,1,0,0,0,41,129,1,0,0,0,43,132,1,0,0,0,45,52,3,
3,1,0,46,48,3,5,2,0,47,49,3,7,3,0,48,47,1,0,0,0,48,49,1,0,0,0,49,50,1,0,
0,0,50,51,3,3,1,0,51,53,1,0,0,0,52,46,1,0,0,0,52,53,1,0,0,0,53,2,1,0,0,0,
54,56,2,48,57,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,
58,65,1,0,0,0,59,61,5,46,0,0,60,62,2,48,57,0,61,60,1,0,0,0,62,63,1,0,0,0,
63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,59,1,0,0,0,65,66,1,0,0,0,66,
4,1,0,0,0,67,68,7,0,0,0,68,6,1,0,0,0,69,70,7,1,0,0,70,8,1,0,0,0,71,75,3,
11,5,0,72,74,3,13,6,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,
0,0,0,76,10,1,0,0,0,77,75,1,0,0,0,78,80,7,2,0,0,79,78,1,0,0,0,80,12,1,0,
0,0,81,84,3,11,5,0,82,84,2,48,57,0,83,81,1,0,0,0,83,82,1,0,0,0,84,14,1,0,
0,0,85,86,5,94,0,0,86,16,1,0,0,0,87,88,5,43,0,0,88,18,1,0,0,0,89,90,5,45,
0,0,90,20,1,0,0,0,91,92,5,42,0,0,92,22,1,0,0,0,93,94,5,47,0,0,94,24,1,0,
0,0,95,96,5,99,0,0,96,97,5,111,0,0,97,98,5,115,0,0,98,26,1,0,0,0,99,100,
5,115,0,0,100,101,5,105,0,0,101,102,5,110,0,0,102,28,1,0,0,0,103,104,5,116,
0,0,104,105,5,97,0,0,105,106,5,110,0,0,106,30,1,0,0,0,107,108,5,97,0,0,108,
109,5,99,0,0,109,110,5,111,0,0,110,111,5,115,0,0,111,32,1,0,0,0,112,113,
5,97,0,0,113,114,5,115,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,34,1,
0,0,0,117,118,5,97,0,0,118,119,5,116,0,0,119,120,5,97,0,0,120,121,5,110,
0,0,121,36,1,0,0,0,122,123,5,108,0,0,123,124,5,110,0,0,124,38,1,0,0,0,125,
126,5,108,0,0,126,127,5,111,0,0,127,128,5,103,0,0,128,40,1,0,0,0,129,130,
5,46,0,0,130,42,1,0,0,0,131,133,7,3,0,0,132,131,1,0,0,0,133,134,1,0,0,0,
134,132,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,6,21,0,0,137,44,
1,0,0,0,10,0,48,52,57,63,65,75,79,83,134,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class rpnLexer extends antlr4.Lexer {

    static grammarFileName = "rpn.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, "'^'", "'+'", "'-'", "'*'", "'/'", 
                         "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", 
                         "'atan'", "'ln'", "'log'", "'.'" ];
	static symbolicNames = [ null, "SCIENTIFIC_NUMBER", "VARIABLE", "POW", 
                          "PLUS", "MINUS", "TIMES", "DIV", "COS", "SIN", 
                          "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "POINT", 
                          "WS" ];
	static ruleNames = [ "SCIENTIFIC_NUMBER", "NUMBER", "E", "SIGN", "VARIABLE", 
                      "VALID_ID_START", "VALID_ID_CHAR", "POW", "PLUS", 
                      "MINUS", "TIMES", "DIV", "COS", "SIN", "TAN", "ACOS", 
                      "ASIN", "ATAN", "LN", "LOG", "POINT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

rpnLexer.EOF = antlr4.Token.EOF;
rpnLexer.SCIENTIFIC_NUMBER = 1;
rpnLexer.VARIABLE = 2;
rpnLexer.POW = 3;
rpnLexer.PLUS = 4;
rpnLexer.MINUS = 5;
rpnLexer.TIMES = 6;
rpnLexer.DIV = 7;
rpnLexer.COS = 8;
rpnLexer.SIN = 9;
rpnLexer.TAN = 10;
rpnLexer.ACOS = 11;
rpnLexer.ASIN = 12;
rpnLexer.ATAN = 13;
rpnLexer.LN = 14;
rpnLexer.LOG = 15;
rpnLexer.POINT = 16;
rpnLexer.WS = 17;



