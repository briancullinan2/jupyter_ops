// Generated from ./iso8601/iso8601.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,17,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,4,16,72,8,16,11,16,
12,16,73,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,1,0,13,2,0,10,10,13,13,2,0,84,84,116,116,2,
0,90,90,122,122,2,0,87,87,119,119,2,0,80,80,112,112,2,0,89,89,121,121,2,
0,77,77,109,109,2,0,68,68,100,100,2,0,72,72,104,104,2,0,83,83,115,115,2,
0,82,82,114,114,1,0,48,57,2,0,44,44,46,46,75,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,
1,0,0,0,7,41,1,0,0,0,9,43,1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,51,1,0,
0,0,17,53,1,0,0,0,19,55,1,0,0,0,21,57,1,0,0,0,23,59,1,0,0,0,25,61,1,0,0,
0,27,63,1,0,0,0,29,65,1,0,0,0,31,67,1,0,0,0,33,69,1,0,0,0,35,36,5,43,0,0,
36,2,1,0,0,0,37,38,5,45,0,0,38,4,1,0,0,0,39,40,5,58,0,0,40,6,1,0,0,0,41,
42,5,47,0,0,42,8,1,0,0,0,43,44,7,0,0,0,44,45,1,0,0,0,45,46,6,4,0,0,46,10,
1,0,0,0,47,48,7,1,0,0,48,12,1,0,0,0,49,50,7,2,0,0,50,14,1,0,0,0,51,52,7,
3,0,0,52,16,1,0,0,0,53,54,7,4,0,0,54,18,1,0,0,0,55,56,7,5,0,0,56,20,1,0,
0,0,57,58,7,6,0,0,58,22,1,0,0,0,59,60,7,7,0,0,60,24,1,0,0,0,61,62,7,8,0,
0,62,26,1,0,0,0,63,64,7,9,0,0,64,28,1,0,0,0,65,66,7,10,0,0,66,30,1,0,0,0,
67,68,7,11,0,0,68,32,1,0,0,0,69,71,7,12,0,0,70,72,3,31,15,0,71,70,1,0,0,
0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,34,1,0,0,0,2,0,73,1,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class iso8601Lexer extends antlr4.Lexer {

    static grammarFileName = "iso8601.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'+'", "'-'", "':'", "'/'" ];
	static symbolicNames = [ null, null, null, null, null, "Newline", "T", 
                          "Z", "W", "P", "Y", "M", "D", "H", "S", "R", "Digit", 
                          "Fraction" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "Newline", "T", "Z", 
                      "W", "P", "Y", "M", "D", "H", "S", "R", "Digit", "Fraction" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

iso8601Lexer.EOF = antlr4.Token.EOF;
iso8601Lexer.T__0 = 1;
iso8601Lexer.T__1 = 2;
iso8601Lexer.T__2 = 3;
iso8601Lexer.T__3 = 4;
iso8601Lexer.Newline = 5;
iso8601Lexer.T = 6;
iso8601Lexer.Z = 7;
iso8601Lexer.W = 8;
iso8601Lexer.P = 9;
iso8601Lexer.Y = 10;
iso8601Lexer.M = 11;
iso8601Lexer.D = 12;
iso8601Lexer.H = 13;
iso8601Lexer.S = 14;
iso8601Lexer.R = 15;
iso8601Lexer.Digit = 16;
iso8601Lexer.Fraction = 17;



