// Generated from ./bcpl/bcpl.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import bcplListener from './bcplListener.js';
const serializedATN = [4,1,136,796,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,5,4,183,8,4,10,4,12,4,186,9,
4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,197,8,6,10,6,12,6,200,9,6,1,7,
1,7,1,7,5,7,205,8,7,10,7,12,7,208,9,7,1,8,1,8,1,8,1,8,5,8,214,8,8,10,8,12,
8,217,9,8,3,8,219,8,8,1,9,1,9,1,9,1,9,5,9,225,8,9,10,9,12,9,228,9,9,1,10,
1,10,3,10,232,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
21,3,21,260,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,268,8,22,1,22,1,22,1,
22,1,22,1,22,1,22,1,22,1,22,5,22,278,8,22,10,22,12,22,281,9,22,1,23,1,23,
1,23,1,23,1,23,1,23,5,23,289,8,23,10,23,12,23,292,9,23,1,24,1,24,1,24,1,
24,3,24,298,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,307,8,25,10,25,
12,25,310,9,25,1,26,1,26,1,26,1,26,1,26,3,26,317,8,26,1,26,1,26,1,26,1,26,
5,26,323,8,26,10,26,12,26,326,9,26,1,27,1,27,1,27,1,27,5,27,332,8,27,10,
27,12,27,335,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,344,8,28,10,28,
12,28,347,9,28,1,29,1,29,1,29,1,29,3,29,353,8,29,1,30,1,30,1,30,1,30,5,30,
359,8,30,10,30,12,30,362,9,30,1,31,1,31,1,31,1,31,5,31,368,8,31,10,31,12,
31,371,9,31,1,32,1,32,1,32,1,32,5,32,377,8,32,10,32,12,32,380,9,32,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,3,33,389,8,33,1,34,1,34,1,34,1,34,1,34,5,34,
396,8,34,10,34,12,34,399,9,34,1,34,1,34,3,34,403,8,34,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,3,35,414,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
5,36,423,8,36,10,36,12,36,426,9,36,1,37,1,37,1,37,1,37,1,37,3,37,433,8,37,
1,37,1,37,1,37,1,37,5,37,439,8,37,10,37,12,37,442,9,37,1,38,1,38,1,38,1,
38,1,38,1,38,1,38,5,38,451,8,38,10,38,12,38,454,9,38,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,5,39,463,8,39,10,39,12,39,466,9,39,1,40,1,40,1,40,1,40,1,
40,1,40,1,40,5,40,475,8,40,10,40,12,40,478,9,40,1,41,1,41,1,41,5,41,483,
8,41,10,41,12,41,486,9,41,1,42,1,42,1,42,5,42,491,8,42,10,42,12,42,494,9,
42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,5,44,503,8,44,10,44,12,44,506,9,44,
1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
48,1,48,1,48,5,48,525,8,48,10,48,12,48,528,9,48,1,49,1,49,1,49,1,49,1,49,
1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,557,8,52,1,53,1,53,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,572,8,53,1,54,1,54,1,54,
1,54,3,54,578,8,54,1,55,1,55,1,55,1,55,5,55,584,8,55,10,55,12,55,587,9,55,
1,56,1,56,1,56,1,56,3,56,593,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,
602,8,57,1,58,1,58,1,58,5,58,607,8,58,10,58,12,58,610,9,58,1,59,1,59,1,59,
1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,3,62,630,8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,3,65,649,8,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,5,65,659,8,65,10,65,12,65,662,9,65,1,66,1,66,1,66,1,66,1,66,1,
66,1,66,1,66,1,66,1,66,1,66,3,66,675,8,66,1,67,1,67,1,67,1,67,1,67,1,68,
1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,707,8,69,1,70,1,70,
1,70,1,70,3,70,713,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,
1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,3,74,736,8,74,1,75,
1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,3,78,751,8,78,
1,79,1,79,1,79,1,79,1,79,3,79,758,8,79,1,80,1,80,1,80,5,80,763,8,80,10,80,
12,80,766,9,80,1,81,1,81,1,81,5,81,771,8,81,10,81,12,81,774,9,81,1,82,1,
82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,788,8,84,1,85,
1,85,1,85,1,85,3,85,794,8,85,1,85,0,11,44,46,50,52,56,72,74,76,78,80,130,
86,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
0,12,1,0,1,52,1,0,53,60,2,0,1,6,53,62,1,0,53,62,1,0,63,63,1,0,68,69,2,0,
70,71,130,130,1,0,72,73,1,0,74,79,1,0,80,81,1,0,131,132,1,0,101,105,797,
0,172,1,0,0,0,2,174,1,0,0,0,4,176,1,0,0,0,6,178,1,0,0,0,8,180,1,0,0,0,10,
189,1,0,0,0,12,193,1,0,0,0,14,201,1,0,0,0,16,218,1,0,0,0,18,220,1,0,0,0,
20,231,1,0,0,0,22,233,1,0,0,0,24,235,1,0,0,0,26,237,1,0,0,0,28,239,1,0,0,
0,30,241,1,0,0,0,32,243,1,0,0,0,34,245,1,0,0,0,36,247,1,0,0,0,38,249,1,0,
0,0,40,251,1,0,0,0,42,259,1,0,0,0,44,267,1,0,0,0,46,282,1,0,0,0,48,297,1,
0,0,0,50,299,1,0,0,0,52,316,1,0,0,0,54,327,1,0,0,0,56,336,1,0,0,0,58,352,
1,0,0,0,60,354,1,0,0,0,62,363,1,0,0,0,64,372,1,0,0,0,66,388,1,0,0,0,68,402,
1,0,0,0,70,413,1,0,0,0,72,415,1,0,0,0,74,432,1,0,0,0,76,443,1,0,0,0,78,455,
1,0,0,0,80,467,1,0,0,0,82,479,1,0,0,0,84,487,1,0,0,0,86,495,1,0,0,0,88,499,
1,0,0,0,90,507,1,0,0,0,92,512,1,0,0,0,94,517,1,0,0,0,96,521,1,0,0,0,98,529,
1,0,0,0,100,534,1,0,0,0,102,538,1,0,0,0,104,556,1,0,0,0,106,571,1,0,0,0,
108,577,1,0,0,0,110,579,1,0,0,0,112,592,1,0,0,0,114,601,1,0,0,0,116,603,
1,0,0,0,118,611,1,0,0,0,120,615,1,0,0,0,122,617,1,0,0,0,124,629,1,0,0,0,
126,631,1,0,0,0,128,634,1,0,0,0,130,648,1,0,0,0,132,674,1,0,0,0,134,676,
1,0,0,0,136,681,1,0,0,0,138,706,1,0,0,0,140,712,1,0,0,0,142,714,1,0,0,0,
144,721,1,0,0,0,146,726,1,0,0,0,148,735,1,0,0,0,150,737,1,0,0,0,152,740,
1,0,0,0,154,744,1,0,0,0,156,750,1,0,0,0,158,757,1,0,0,0,160,759,1,0,0,0,
162,767,1,0,0,0,164,775,1,0,0,0,166,781,1,0,0,0,168,787,1,0,0,0,170,793,
1,0,0,0,172,173,7,0,0,0,173,1,1,0,0,0,174,175,7,1,0,0,175,3,1,0,0,0,176,
177,7,2,0,0,177,5,1,0,0,0,178,179,7,3,0,0,179,7,1,0,0,0,180,184,5,63,0,0,
181,183,8,4,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,
1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,63,0,0,188,9,1,0,0,0,189,
190,5,64,0,0,190,191,3,20,10,0,191,192,5,64,0,0,192,11,1,0,0,0,193,194,5,
65,0,0,194,198,3,2,1,0,195,197,3,2,1,0,196,195,1,0,0,0,197,200,1,0,0,0,198,
196,1,0,0,0,198,199,1,0,0,0,199,13,1,0,0,0,200,198,1,0,0,0,201,202,5,66,
0,0,202,206,3,4,2,0,203,205,3,4,2,0,204,203,1,0,0,0,205,208,1,0,0,0,206,
204,1,0,0,0,206,207,1,0,0,0,207,15,1,0,0,0,208,206,1,0,0,0,209,219,3,12,
6,0,210,219,3,14,7,0,211,215,3,6,3,0,212,214,3,6,3,0,213,212,1,0,0,0,214,
217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,219,1,0,0,0,217,215,1,0,
0,0,218,209,1,0,0,0,218,210,1,0,0,0,218,211,1,0,0,0,219,17,1,0,0,0,220,226,
3,0,0,0,221,225,3,0,0,0,222,225,3,6,3,0,223,225,5,67,0,0,224,221,1,0,0,0,
224,222,1,0,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,
1,0,0,0,227,19,1,0,0,0,228,226,1,0,0,0,229,232,3,0,0,0,230,232,3,6,3,0,231,
229,1,0,0,0,231,230,1,0,0,0,232,21,1,0,0,0,233,234,3,18,9,0,234,23,1,0,0,
0,235,236,7,5,0,0,236,25,1,0,0,0,237,238,7,6,0,0,238,27,1,0,0,0,239,240,
7,7,0,0,240,29,1,0,0,0,241,242,7,8,0,0,242,31,1,0,0,0,243,244,7,9,0,0,244,
33,1,0,0,0,245,246,5,82,0,0,246,35,1,0,0,0,247,248,5,83,0,0,248,37,1,0,0,
0,249,250,7,10,0,0,250,39,1,0,0,0,251,252,5,84,0,0,252,41,1,0,0,0,253,260,
3,10,5,0,254,260,3,8,4,0,255,260,3,16,8,0,256,260,3,18,9,0,257,260,5,133,
0,0,258,260,5,134,0,0,259,253,1,0,0,0,259,254,1,0,0,0,259,255,1,0,0,0,259,
256,1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,43,1,0,0,0,261,262,6,22,
-1,0,262,263,5,85,0,0,263,264,3,68,34,0,264,265,5,86,0,0,265,268,1,0,0,0,
266,268,3,42,21,0,267,261,1,0,0,0,267,266,1,0,0,0,268,279,1,0,0,0,269,270,
10,4,0,0,270,271,5,85,0,0,271,272,3,82,41,0,272,273,5,86,0,0,273,278,1,0,
0,0,274,275,10,3,0,0,275,276,5,85,0,0,276,278,5,86,0,0,277,269,1,0,0,0,277,
274,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,45,1,0,0,
0,281,279,1,0,0,0,282,283,6,23,-1,0,283,284,3,44,22,0,284,290,1,0,0,0,285,
286,10,2,0,0,286,287,5,69,0,0,287,289,3,44,22,0,288,285,1,0,0,0,289,292,
1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,47,1,0,0,0,292,290,1,0,0,0,293,
294,3,24,12,0,294,295,3,48,24,0,295,298,1,0,0,0,296,298,3,46,23,0,297,293,
1,0,0,0,297,296,1,0,0,0,298,49,1,0,0,0,299,300,6,25,-1,0,300,301,3,48,24,
0,301,308,1,0,0,0,302,303,10,2,0,0,303,304,3,26,13,0,304,305,3,48,24,0,305,
307,1,0,0,0,306,302,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,
0,0,309,51,1,0,0,0,310,308,1,0,0,0,311,312,6,26,-1,0,312,313,3,28,14,0,313,
314,3,50,25,0,314,317,1,0,0,0,315,317,3,50,25,0,316,311,1,0,0,0,316,315,
1,0,0,0,317,324,1,0,0,0,318,319,10,3,0,0,319,320,3,28,14,0,320,321,3,50,
25,0,321,323,1,0,0,0,322,318,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,
325,1,0,0,0,325,53,1,0,0,0,326,324,1,0,0,0,327,333,3,52,26,0,328,329,3,30,
15,0,329,330,3,52,26,0,330,332,1,0,0,0,331,328,1,0,0,0,332,335,1,0,0,0,333,
331,1,0,0,0,333,334,1,0,0,0,334,55,1,0,0,0,335,333,1,0,0,0,336,337,6,28,
-1,0,337,338,3,54,27,0,338,345,1,0,0,0,339,340,10,2,0,0,340,341,3,32,16,
0,341,342,3,52,26,0,342,344,1,0,0,0,343,339,1,0,0,0,344,347,1,0,0,0,345,
343,1,0,0,0,345,346,1,0,0,0,346,57,1,0,0,0,347,345,1,0,0,0,348,349,3,40,
20,0,349,350,3,56,28,0,350,353,1,0,0,0,351,353,3,56,28,0,352,348,1,0,0,0,
352,351,1,0,0,0,353,59,1,0,0,0,354,360,3,58,29,0,355,356,3,34,17,0,356,357,
3,58,29,0,357,359,1,0,0,0,358,355,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,
0,360,361,1,0,0,0,361,61,1,0,0,0,362,360,1,0,0,0,363,369,3,60,30,0,364,365,
3,36,18,0,365,366,3,60,30,0,366,368,1,0,0,0,367,364,1,0,0,0,368,371,1,0,
0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,63,1,0,0,0,371,369,1,0,0,0,372,378,
3,62,31,0,373,374,3,38,19,0,374,375,3,62,31,0,375,377,1,0,0,0,376,373,1,
0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,65,1,0,0,0,380,
378,1,0,0,0,381,382,3,64,32,0,382,383,5,87,0,0,383,384,3,66,33,0,384,385,
5,88,0,0,385,386,3,66,33,0,386,389,1,0,0,0,387,389,3,64,32,0,388,381,1,0,
0,0,388,387,1,0,0,0,389,67,1,0,0,0,390,403,3,66,33,0,391,392,5,135,0,0,392,
397,3,80,40,0,393,394,5,88,0,0,394,396,3,80,40,0,395,393,1,0,0,0,396,399,
1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,403,1,0,0,0,399,397,1,0,0,0,
400,401,5,89,0,0,401,403,3,158,79,0,402,390,1,0,0,0,402,391,1,0,0,0,402,
400,1,0,0,0,403,69,1,0,0,0,404,414,3,10,5,0,405,414,3,16,8,0,406,414,3,18,
9,0,407,414,5,133,0,0,408,414,5,134,0,0,409,410,5,85,0,0,410,411,3,80,40,
0,411,412,5,86,0,0,412,414,1,0,0,0,413,404,1,0,0,0,413,405,1,0,0,0,413,406,
1,0,0,0,413,407,1,0,0,0,413,408,1,0,0,0,413,409,1,0,0,0,414,71,1,0,0,0,415,
416,6,36,-1,0,416,417,3,70,35,0,417,424,1,0,0,0,418,419,10,2,0,0,419,420,
3,26,13,0,420,421,3,70,35,0,421,423,1,0,0,0,422,418,1,0,0,0,423,426,1,0,
0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,73,1,0,0,0,426,424,1,0,0,0,427,428,
6,37,-1,0,428,429,3,28,14,0,429,430,3,72,36,0,430,433,1,0,0,0,431,433,3,
72,36,0,432,427,1,0,0,0,432,431,1,0,0,0,433,440,1,0,0,0,434,435,10,3,0,0,
435,436,3,28,14,0,436,437,3,72,36,0,437,439,1,0,0,0,438,434,1,0,0,0,439,
442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,75,1,0,0,0,442,440,1,0,0,
0,443,444,6,38,-1,0,444,445,3,74,37,0,445,452,1,0,0,0,446,447,10,2,0,0,447,
448,3,32,16,0,448,449,3,74,37,0,449,451,1,0,0,0,450,446,1,0,0,0,451,454,
1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,77,1,0,0,0,454,452,1,0,0,0,455,
456,6,39,-1,0,456,457,3,76,38,0,457,464,1,0,0,0,458,459,10,2,0,0,459,460,
3,34,17,0,460,461,3,76,38,0,461,463,1,0,0,0,462,458,1,0,0,0,463,466,1,0,
0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,79,1,0,0,0,466,464,1,0,0,0,467,468,
6,40,-1,0,468,469,3,78,39,0,469,476,1,0,0,0,470,471,10,2,0,0,471,472,3,36,
18,0,472,473,3,78,39,0,473,475,1,0,0,0,474,470,1,0,0,0,475,478,1,0,0,0,476,
474,1,0,0,0,476,477,1,0,0,0,477,81,1,0,0,0,478,476,1,0,0,0,479,484,3,68,
34,0,480,481,5,88,0,0,481,483,3,68,34,0,482,480,1,0,0,0,483,486,1,0,0,0,
484,482,1,0,0,0,484,485,1,0,0,0,485,83,1,0,0,0,486,484,1,0,0,0,487,492,3,
22,11,0,488,489,5,88,0,0,489,491,3,22,11,0,490,488,1,0,0,0,491,494,1,0,0,
0,492,490,1,0,0,0,492,493,1,0,0,0,493,85,1,0,0,0,494,492,1,0,0,0,495,496,
3,18,9,0,496,497,5,74,0,0,497,498,3,80,40,0,498,87,1,0,0,0,499,504,3,86,
43,0,500,501,5,90,0,0,501,503,3,86,43,0,502,500,1,0,0,0,503,506,1,0,0,0,
504,502,1,0,0,0,504,505,1,0,0,0,505,89,1,0,0,0,506,504,1,0,0,0,507,508,5,
91,0,0,508,509,5,136,0,0,509,510,3,88,44,0,510,511,5,92,0,0,511,91,1,0,0,
0,512,513,5,93,0,0,513,514,5,136,0,0,514,515,3,88,44,0,515,516,5,92,0,0,
516,93,1,0,0,0,517,518,3,18,9,0,518,519,5,94,0,0,519,520,3,80,40,0,520,95,
1,0,0,0,521,526,3,94,47,0,522,523,5,90,0,0,523,525,3,94,47,0,524,522,1,0,
0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,97,1,0,0,0,528,526,
1,0,0,0,529,530,5,95,0,0,530,531,5,136,0,0,531,532,3,96,48,0,532,533,5,92,
0,0,533,99,1,0,0,0,534,535,3,84,42,0,535,536,5,74,0,0,536,537,3,82,41,0,
537,101,1,0,0,0,538,539,3,18,9,0,539,540,5,74,0,0,540,541,5,96,0,0,541,542,
3,80,40,0,542,103,1,0,0,0,543,544,3,18,9,0,544,545,5,85,0,0,545,546,3,84,
42,0,546,547,5,86,0,0,547,548,5,74,0,0,548,549,3,68,34,0,549,557,1,0,0,0,
550,551,3,18,9,0,551,552,5,85,0,0,552,553,5,86,0,0,553,554,5,74,0,0,554,
555,3,68,34,0,555,557,1,0,0,0,556,543,1,0,0,0,556,550,1,0,0,0,557,105,1,
0,0,0,558,559,3,18,9,0,559,560,5,85,0,0,560,561,3,84,42,0,561,562,5,86,0,
0,562,563,5,97,0,0,563,564,3,158,79,0,564,572,1,0,0,0,565,566,3,18,9,0,566,
567,5,85,0,0,567,568,5,86,0,0,568,569,5,97,0,0,569,570,3,158,79,0,570,572,
1,0,0,0,571,558,1,0,0,0,571,565,1,0,0,0,572,107,1,0,0,0,573,578,3,100,50,
0,574,578,3,102,51,0,575,578,3,104,52,0,576,578,3,106,53,0,577,573,1,0,0,
0,577,574,1,0,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,109,1,0,0,0,579,580,
5,98,0,0,580,585,3,108,54,0,581,582,5,99,0,0,582,584,3,108,54,0,583,581,
1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,111,1,0,0,0,
587,585,1,0,0,0,588,593,3,110,55,0,589,593,3,90,45,0,590,593,3,92,46,0,591,
593,3,98,49,0,592,588,1,0,0,0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,1,
0,0,0,593,113,1,0,0,0,594,602,3,18,9,0,595,596,3,46,23,0,596,597,5,69,0,
0,597,598,3,44,22,0,598,602,1,0,0,0,599,600,5,69,0,0,600,602,3,44,22,0,601,
594,1,0,0,0,601,595,1,0,0,0,601,599,1,0,0,0,602,115,1,0,0,0,603,608,3,114,
57,0,604,605,5,88,0,0,605,607,3,114,57,0,606,604,1,0,0,0,607,610,1,0,0,0,
608,606,1,0,0,0,608,609,1,0,0,0,609,117,1,0,0,0,610,608,1,0,0,0,611,612,
3,116,58,0,612,613,5,100,0,0,613,614,3,82,41,0,614,119,1,0,0,0,615,616,7,
11,0,0,616,121,1,0,0,0,617,618,5,106,0,0,618,619,3,68,34,0,619,123,1,0,0,
0,620,621,3,44,22,0,621,622,5,85,0,0,622,623,3,82,41,0,623,624,5,86,0,0,
624,630,1,0,0,0,625,626,3,44,22,0,626,627,5,85,0,0,627,628,5,86,0,0,628,
630,1,0,0,0,629,620,1,0,0,0,629,625,1,0,0,0,630,125,1,0,0,0,631,632,5,107,
0,0,632,633,3,68,34,0,633,127,1,0,0,0,634,635,5,108,0,0,635,636,3,68,34,
0,636,637,5,109,0,0,637,638,3,166,83,0,638,129,1,0,0,0,639,640,6,65,-1,0,
640,649,3,118,59,0,641,649,3,120,60,0,642,649,3,122,61,0,643,649,3,124,62,
0,644,649,3,126,63,0,645,649,3,128,64,0,646,649,3,166,83,0,647,649,3,164,
82,0,648,639,1,0,0,0,648,641,1,0,0,0,648,642,1,0,0,0,648,643,1,0,0,0,648,
644,1,0,0,0,648,645,1,0,0,0,648,646,1,0,0,0,648,647,1,0,0,0,649,660,1,0,
0,0,650,651,10,6,0,0,651,659,5,110,0,0,652,653,10,5,0,0,653,654,5,111,0,
0,654,659,3,68,34,0,655,656,10,4,0,0,656,657,5,112,0,0,657,659,3,68,34,0,
658,650,1,0,0,0,658,652,1,0,0,0,658,655,1,0,0,0,659,662,1,0,0,0,660,658,
1,0,0,0,660,661,1,0,0,0,661,131,1,0,0,0,662,660,1,0,0,0,663,664,3,130,65,
0,664,665,5,110,0,0,665,675,1,0,0,0,666,667,3,130,65,0,667,668,5,111,0,0,
668,669,3,68,34,0,669,675,1,0,0,0,670,671,3,130,65,0,671,672,5,112,0,0,672,
673,3,68,34,0,673,675,1,0,0,0,674,663,1,0,0,0,674,666,1,0,0,0,674,670,1,
0,0,0,675,133,1,0,0,0,676,677,5,113,0,0,677,678,3,68,34,0,678,679,5,114,
0,0,679,680,3,158,79,0,680,135,1,0,0,0,681,682,5,115,0,0,682,683,3,68,34,
0,683,684,5,114,0,0,684,685,3,158,79,0,685,137,1,0,0,0,686,687,5,116,0,0,
687,688,3,18,9,0,688,689,5,74,0,0,689,690,3,68,34,0,690,691,5,117,0,0,691,
692,3,68,34,0,692,693,5,118,0,0,693,694,3,80,40,0,694,695,5,114,0,0,695,
696,3,158,79,0,696,707,1,0,0,0,697,698,5,116,0,0,698,699,3,18,9,0,699,700,
5,74,0,0,700,701,3,68,34,0,701,702,5,117,0,0,702,703,3,68,34,0,703,704,5,
114,0,0,704,705,3,158,79,0,705,707,1,0,0,0,706,686,1,0,0,0,706,697,1,0,0,
0,707,139,1,0,0,0,708,713,3,132,66,0,709,713,3,134,67,0,710,713,3,136,68,
0,711,713,3,138,69,0,712,708,1,0,0,0,712,709,1,0,0,0,712,710,1,0,0,0,712,
711,1,0,0,0,713,141,1,0,0,0,714,715,5,119,0,0,715,716,3,68,34,0,716,717,
5,120,0,0,717,718,3,158,79,0,718,719,5,121,0,0,719,720,3,158,79,0,720,143,
1,0,0,0,721,722,5,122,0,0,722,723,3,68,34,0,723,724,5,120,0,0,724,725,3,
158,79,0,725,145,1,0,0,0,726,727,5,123,0,0,727,728,3,68,34,0,728,729,5,120,
0,0,729,730,3,158,79,0,730,147,1,0,0,0,731,736,3,130,65,0,732,736,3,140,
70,0,733,736,3,142,71,0,734,736,3,144,72,0,735,731,1,0,0,0,735,732,1,0,0,
0,735,733,1,0,0,0,735,734,1,0,0,0,736,149,1,0,0,0,737,738,3,18,9,0,738,739,
5,94,0,0,739,151,1,0,0,0,740,741,5,124,0,0,741,742,3,80,40,0,742,743,5,94,
0,0,743,153,1,0,0,0,744,745,5,125,0,0,745,746,5,94,0,0,746,155,1,0,0,0,747,
751,3,150,75,0,748,751,3,152,76,0,749,751,3,154,77,0,750,747,1,0,0,0,750,
748,1,0,0,0,750,749,1,0,0,0,751,157,1,0,0,0,752,758,3,148,74,0,753,754,3,
156,78,0,754,755,3,158,79,0,755,758,1,0,0,0,756,758,3,156,78,0,757,752,1,
0,0,0,757,753,1,0,0,0,757,756,1,0,0,0,758,159,1,0,0,0,759,764,3,158,79,0,
760,761,5,90,0,0,761,763,3,158,79,0,762,760,1,0,0,0,763,766,1,0,0,0,764,
762,1,0,0,0,764,765,1,0,0,0,765,161,1,0,0,0,766,764,1,0,0,0,767,772,3,112,
56,0,768,769,5,90,0,0,769,771,3,112,56,0,770,768,1,0,0,0,771,774,1,0,0,0,
772,770,1,0,0,0,772,773,1,0,0,0,773,163,1,0,0,0,774,772,1,0,0,0,775,776,
5,136,0,0,776,777,3,162,81,0,777,778,5,90,0,0,778,779,3,160,80,0,779,780,
5,92,0,0,780,165,1,0,0,0,781,782,5,136,0,0,782,783,3,160,80,0,783,784,5,
92,0,0,784,167,1,0,0,0,785,788,3,162,81,0,786,788,3,170,85,0,787,785,1,0,
0,0,787,786,1,0,0,0,788,169,1,0,0,0,789,790,5,126,0,0,790,794,3,8,4,0,791,
792,5,127,0,0,792,794,3,8,4,0,793,789,1,0,0,0,793,791,1,0,0,0,794,171,1,
0,0,0,58,184,198,206,215,218,224,226,231,259,267,277,279,290,297,308,316,
324,333,345,352,360,369,378,388,397,402,413,424,432,440,452,464,476,484,
492,504,526,556,571,577,585,592,601,608,629,648,658,660,674,706,712,735,
750,757,764,772,787,793];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class bcplParser extends antlr4.Parser {

    static grammarFileName = "bcpl.g4";
    static literalNames = [ null, "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", 
                            "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", 
                            "'N'", "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", 
                            "'U'", "'V'", "'W'", "'X'", "'Y'", "'Z'", "'a'", 
                            "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", 
                            "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", "'o'", 
                            "'p'", "'q'", "'r'", "'s'", "'t'", "'u'", "'v'", 
                            "'w'", "'x'", "'y'", "'z'", "'0'", "'1'", "'2'", 
                            "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", 
                            "'\"'", "'''", "'#'", "'#X'", "'.'", "'@'", 
                            "'!'", "'*'", "'/'", "'+'", "'-'", "'='", "'\\uFFFD='", 
                            "'<='", "'>='", "'<'", "'>'", "'<<'", "'>>'", 
                            "'&'", "'|'", "'\\uFFFD'", "'('", "')'", "'->'", 
                            "','", "'VALOF'", "';'", "'MANIFEST'", "'$)'", 
                            "'STATIC'", "':'", "'GLOBAL'", "'VEC'", "'BE'", 
                            "'LET'", "'AND'", "':='", "'BREAK'", "'LOOP'", 
                            "'ENDCASE'", "'RETURN'", "'FINISH'", "'GOTO'", 
                            "'RESULTIS'", "'SWITCHON'", "'INTO'", "'REPEAT'", 
                            "'REPEATUNTIL'", "'REPEATWHILE'", "'UNTIL'", 
                            "'DO'", "'WHILE'", "'FOR'", "'TO'", "'BY'", 
                            "'TEST'", "'THEN'", "'ELSE'", "'IF'", "'UNLESS'", 
                            "'CASE'", "'DEFAULT'", "'GET'", "'SECTION'", 
                            null, null, "'REM'", "'EQV'", "'NEQV'", "'TRUE'", 
                            "'FALSE'", "'TABLE'", "'$('" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             "Comment", "WS", "Rem", "Eqv", "Neqv", "True_", 
                             "False_", "Table", "Left_dollar_open" ];
    static ruleNames = [ "letter", "octal_digit", "hex_digit", "digit", 
                         "string_constant", "character_constant", "octal_number", 
                         "hex_number", "number", "identifier", "one_character", 
                         "name", "address_op", "mult_op", "add_op", "rel_op", 
                         "shift_op", "and_op", "or_op", "eqv_op", "not_op", 
                         "element", "primary_E", "vector_E", "address_E", 
                         "mult_E", "add_E", "rel_E", "shift_E", "not_E", 
                         "and_E", "or_E", "eqv_E", "conditional_E", "expression", 
                         "c_element", "c_mult_E", "c_add_E", "c_shift_E", 
                         "c_and_E", "constant_expression", "expression_list", 
                         "name_list", "manifest_item", "manifest_list", 
                         "manifest_declaration", "static_declaration", "global_item", 
                         "global_list", "global_declaration", "simple_definition", 
                         "vector_definition", "function_definition", "routine_definition", 
                         "definition", "simultaneous_declaration", "declaration", 
                         "lhse", "left_hand_side_list", "assignment", "simple_command", 
                         "goto_command", "routine_command", "resultis_command", 
                         "switchon_command", "repeatable_command", "repeated_command", 
                         "until_command", "while_command", "for_command", 
                         "repetitive_command", "test_command", "if_command", 
                         "unless_command", "unlabelled_command", "label_prefix", 
                         "case_prefix", "default_prefix", "prefix_", "command", 
                         "command_list", "declaration_part", "block", "compound_command", 
                         "program", "directive" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = bcplParser.ruleNames;
        this.literalNames = bcplParser.literalNames;
        this.symbolicNames = bcplParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 22:
    	    		return this.primary_E_sempred(localctx, predIndex);
    	case 23:
    	    		return this.vector_E_sempred(localctx, predIndex);
    	case 25:
    	    		return this.mult_E_sempred(localctx, predIndex);
    	case 26:
    	    		return this.add_E_sempred(localctx, predIndex);
    	case 28:
    	    		return this.shift_E_sempred(localctx, predIndex);
    	case 36:
    	    		return this.c_mult_E_sempred(localctx, predIndex);
    	case 37:
    	    		return this.c_add_E_sempred(localctx, predIndex);
    	case 38:
    	    		return this.c_shift_E_sempred(localctx, predIndex);
    	case 39:
    	    		return this.c_and_E_sempred(localctx, predIndex);
    	case 40:
    	    		return this.constant_expression_sempred(localctx, predIndex);
    	case 65:
    	    		return this.repeatable_command_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    primary_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 4);
    		case 1:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    vector_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mult_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    add_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shift_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    c_mult_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    c_add_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    c_shift_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    c_and_E_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    constant_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    repeatable_command_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 6);
    		case 12:
    			return this.precpred(this._ctx, 5);
    		case 13:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	letter() {
	    let localctx = new LetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, bcplParser.RULE_letter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 172;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << bcplParser.T__0) | (1 << bcplParser.T__1) | (1 << bcplParser.T__2) | (1 << bcplParser.T__3) | (1 << bcplParser.T__4) | (1 << bcplParser.T__5) | (1 << bcplParser.T__6) | (1 << bcplParser.T__7) | (1 << bcplParser.T__8) | (1 << bcplParser.T__9) | (1 << bcplParser.T__10) | (1 << bcplParser.T__11) | (1 << bcplParser.T__12) | (1 << bcplParser.T__13) | (1 << bcplParser.T__14) | (1 << bcplParser.T__15) | (1 << bcplParser.T__16) | (1 << bcplParser.T__17) | (1 << bcplParser.T__18) | (1 << bcplParser.T__19) | (1 << bcplParser.T__20) | (1 << bcplParser.T__21) | (1 << bcplParser.T__22) | (1 << bcplParser.T__23) | (1 << bcplParser.T__24) | (1 << bcplParser.T__25) | (1 << bcplParser.T__26) | (1 << bcplParser.T__27) | (1 << bcplParser.T__28) | (1 << bcplParser.T__29) | (1 << bcplParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (bcplParser.T__31 - 32)) | (1 << (bcplParser.T__32 - 32)) | (1 << (bcplParser.T__33 - 32)) | (1 << (bcplParser.T__34 - 32)) | (1 << (bcplParser.T__35 - 32)) | (1 << (bcplParser.T__36 - 32)) | (1 << (bcplParser.T__37 - 32)) | (1 << (bcplParser.T__38 - 32)) | (1 << (bcplParser.T__39 - 32)) | (1 << (bcplParser.T__40 - 32)) | (1 << (bcplParser.T__41 - 32)) | (1 << (bcplParser.T__42 - 32)) | (1 << (bcplParser.T__43 - 32)) | (1 << (bcplParser.T__44 - 32)) | (1 << (bcplParser.T__45 - 32)) | (1 << (bcplParser.T__46 - 32)) | (1 << (bcplParser.T__47 - 32)) | (1 << (bcplParser.T__48 - 32)) | (1 << (bcplParser.T__49 - 32)) | (1 << (bcplParser.T__50 - 32)) | (1 << (bcplParser.T__51 - 32)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octal_digit() {
	    let localctx = new Octal_digitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, bcplParser.RULE_octal_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (bcplParser.T__52 - 53)) | (1 << (bcplParser.T__53 - 53)) | (1 << (bcplParser.T__54 - 53)) | (1 << (bcplParser.T__55 - 53)) | (1 << (bcplParser.T__56 - 53)) | (1 << (bcplParser.T__57 - 53)) | (1 << (bcplParser.T__58 - 53)) | (1 << (bcplParser.T__59 - 53)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hex_digit() {
	    let localctx = new Hex_digitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, bcplParser.RULE_hex_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 176;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << bcplParser.T__0) | (1 << bcplParser.T__1) | (1 << bcplParser.T__2) | (1 << bcplParser.T__3) | (1 << bcplParser.T__4) | (1 << bcplParser.T__5))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (bcplParser.T__52 - 53)) | (1 << (bcplParser.T__53 - 53)) | (1 << (bcplParser.T__54 - 53)) | (1 << (bcplParser.T__55 - 53)) | (1 << (bcplParser.T__56 - 53)) | (1 << (bcplParser.T__57 - 53)) | (1 << (bcplParser.T__58 - 53)) | (1 << (bcplParser.T__59 - 53)) | (1 << (bcplParser.T__60 - 53)) | (1 << (bcplParser.T__61 - 53)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	digit() {
	    let localctx = new DigitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, bcplParser.RULE_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (bcplParser.T__52 - 53)) | (1 << (bcplParser.T__53 - 53)) | (1 << (bcplParser.T__54 - 53)) | (1 << (bcplParser.T__55 - 53)) | (1 << (bcplParser.T__56 - 53)) | (1 << (bcplParser.T__57 - 53)) | (1 << (bcplParser.T__58 - 53)) | (1 << (bcplParser.T__59 - 53)) | (1 << (bcplParser.T__60 - 53)) | (1 << (bcplParser.T__61 - 53)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_constant() {
	    let localctx = new String_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, bcplParser.RULE_string_constant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        this.match(bcplParser.T__62);
	        this.state = 184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << bcplParser.T__0) | (1 << bcplParser.T__1) | (1 << bcplParser.T__2) | (1 << bcplParser.T__3) | (1 << bcplParser.T__4) | (1 << bcplParser.T__5) | (1 << bcplParser.T__6) | (1 << bcplParser.T__7) | (1 << bcplParser.T__8) | (1 << bcplParser.T__9) | (1 << bcplParser.T__10) | (1 << bcplParser.T__11) | (1 << bcplParser.T__12) | (1 << bcplParser.T__13) | (1 << bcplParser.T__14) | (1 << bcplParser.T__15) | (1 << bcplParser.T__16) | (1 << bcplParser.T__17) | (1 << bcplParser.T__18) | (1 << bcplParser.T__19) | (1 << bcplParser.T__20) | (1 << bcplParser.T__21) | (1 << bcplParser.T__22) | (1 << bcplParser.T__23) | (1 << bcplParser.T__24) | (1 << bcplParser.T__25) | (1 << bcplParser.T__26) | (1 << bcplParser.T__27) | (1 << bcplParser.T__28) | (1 << bcplParser.T__29) | (1 << bcplParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (bcplParser.T__31 - 32)) | (1 << (bcplParser.T__32 - 32)) | (1 << (bcplParser.T__33 - 32)) | (1 << (bcplParser.T__34 - 32)) | (1 << (bcplParser.T__35 - 32)) | (1 << (bcplParser.T__36 - 32)) | (1 << (bcplParser.T__37 - 32)) | (1 << (bcplParser.T__38 - 32)) | (1 << (bcplParser.T__39 - 32)) | (1 << (bcplParser.T__40 - 32)) | (1 << (bcplParser.T__41 - 32)) | (1 << (bcplParser.T__42 - 32)) | (1 << (bcplParser.T__43 - 32)) | (1 << (bcplParser.T__44 - 32)) | (1 << (bcplParser.T__45 - 32)) | (1 << (bcplParser.T__46 - 32)) | (1 << (bcplParser.T__47 - 32)) | (1 << (bcplParser.T__48 - 32)) | (1 << (bcplParser.T__49 - 32)) | (1 << (bcplParser.T__50 - 32)) | (1 << (bcplParser.T__51 - 32)) | (1 << (bcplParser.T__52 - 32)) | (1 << (bcplParser.T__53 - 32)) | (1 << (bcplParser.T__54 - 32)) | (1 << (bcplParser.T__55 - 32)) | (1 << (bcplParser.T__56 - 32)) | (1 << (bcplParser.T__57 - 32)) | (1 << (bcplParser.T__58 - 32)) | (1 << (bcplParser.T__59 - 32)) | (1 << (bcplParser.T__60 - 32)) | (1 << (bcplParser.T__61 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (bcplParser.T__63 - 64)) | (1 << (bcplParser.T__64 - 64)) | (1 << (bcplParser.T__65 - 64)) | (1 << (bcplParser.T__66 - 64)) | (1 << (bcplParser.T__67 - 64)) | (1 << (bcplParser.T__68 - 64)) | (1 << (bcplParser.T__69 - 64)) | (1 << (bcplParser.T__70 - 64)) | (1 << (bcplParser.T__71 - 64)) | (1 << (bcplParser.T__72 - 64)) | (1 << (bcplParser.T__73 - 64)) | (1 << (bcplParser.T__74 - 64)) | (1 << (bcplParser.T__75 - 64)) | (1 << (bcplParser.T__76 - 64)) | (1 << (bcplParser.T__77 - 64)) | (1 << (bcplParser.T__78 - 64)) | (1 << (bcplParser.T__79 - 64)) | (1 << (bcplParser.T__80 - 64)) | (1 << (bcplParser.T__81 - 64)) | (1 << (bcplParser.T__82 - 64)) | (1 << (bcplParser.T__83 - 64)) | (1 << (bcplParser.T__84 - 64)) | (1 << (bcplParser.T__85 - 64)) | (1 << (bcplParser.T__86 - 64)) | (1 << (bcplParser.T__87 - 64)) | (1 << (bcplParser.T__88 - 64)) | (1 << (bcplParser.T__89 - 64)) | (1 << (bcplParser.T__90 - 64)) | (1 << (bcplParser.T__91 - 64)) | (1 << (bcplParser.T__92 - 64)) | (1 << (bcplParser.T__93 - 64)) | (1 << (bcplParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (bcplParser.T__95 - 96)) | (1 << (bcplParser.T__96 - 96)) | (1 << (bcplParser.T__97 - 96)) | (1 << (bcplParser.T__98 - 96)) | (1 << (bcplParser.T__99 - 96)) | (1 << (bcplParser.T__100 - 96)) | (1 << (bcplParser.T__101 - 96)) | (1 << (bcplParser.T__102 - 96)) | (1 << (bcplParser.T__103 - 96)) | (1 << (bcplParser.T__104 - 96)) | (1 << (bcplParser.T__105 - 96)) | (1 << (bcplParser.T__106 - 96)) | (1 << (bcplParser.T__107 - 96)) | (1 << (bcplParser.T__108 - 96)) | (1 << (bcplParser.T__109 - 96)) | (1 << (bcplParser.T__110 - 96)) | (1 << (bcplParser.T__111 - 96)) | (1 << (bcplParser.T__112 - 96)) | (1 << (bcplParser.T__113 - 96)) | (1 << (bcplParser.T__114 - 96)) | (1 << (bcplParser.T__115 - 96)) | (1 << (bcplParser.T__116 - 96)) | (1 << (bcplParser.T__117 - 96)) | (1 << (bcplParser.T__118 - 96)) | (1 << (bcplParser.T__119 - 96)) | (1 << (bcplParser.T__120 - 96)) | (1 << (bcplParser.T__121 - 96)) | (1 << (bcplParser.T__122 - 96)) | (1 << (bcplParser.T__123 - 96)) | (1 << (bcplParser.T__124 - 96)) | (1 << (bcplParser.T__125 - 96)) | (1 << (bcplParser.T__126 - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (bcplParser.Comment - 128)) | (1 << (bcplParser.WS - 128)) | (1 << (bcplParser.Rem - 128)) | (1 << (bcplParser.Eqv - 128)) | (1 << (bcplParser.Neqv - 128)) | (1 << (bcplParser.True_ - 128)) | (1 << (bcplParser.False_ - 128)) | (1 << (bcplParser.Table - 128)) | (1 << (bcplParser.Left_dollar_open - 128)))) !== 0)) {
	            this.state = 181;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===bcplParser.T__62) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 187;
	        this.match(bcplParser.T__62);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character_constant() {
	    let localctx = new Character_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, bcplParser.RULE_character_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this.match(bcplParser.T__63);
	        this.state = 190;
	        this.one_character();
	        this.state = 191;
	        this.match(bcplParser.T__63);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octal_number() {
	    let localctx = new Octal_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, bcplParser.RULE_octal_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(bcplParser.T__64);
	        this.state = 194;
	        this.octal_digit();
	        this.state = 198;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 195;
	                this.octal_digit(); 
	            }
	            this.state = 200;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hex_number() {
	    let localctx = new Hex_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, bcplParser.RULE_hex_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(bcplParser.T__65);
	        this.state = 202;
	        this.hex_digit();
	        this.state = 206;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 203;
	                this.hex_digit(); 
	            }
	            this.state = 208;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, bcplParser.RULE_number);
	    try {
	        this.state = 218;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 209;
	            this.octal_number();
	            break;
	        case bcplParser.T__65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.hex_number();
	            break;
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 211;
	            this.digit();
	            this.state = 215;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 212;
	                    this.digit(); 
	                }
	                this.state = 217;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, bcplParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 220;
	        this.letter();
	        this.state = 226;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 224;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case bcplParser.T__0:
	                case bcplParser.T__1:
	                case bcplParser.T__2:
	                case bcplParser.T__3:
	                case bcplParser.T__4:
	                case bcplParser.T__5:
	                case bcplParser.T__6:
	                case bcplParser.T__7:
	                case bcplParser.T__8:
	                case bcplParser.T__9:
	                case bcplParser.T__10:
	                case bcplParser.T__11:
	                case bcplParser.T__12:
	                case bcplParser.T__13:
	                case bcplParser.T__14:
	                case bcplParser.T__15:
	                case bcplParser.T__16:
	                case bcplParser.T__17:
	                case bcplParser.T__18:
	                case bcplParser.T__19:
	                case bcplParser.T__20:
	                case bcplParser.T__21:
	                case bcplParser.T__22:
	                case bcplParser.T__23:
	                case bcplParser.T__24:
	                case bcplParser.T__25:
	                case bcplParser.T__26:
	                case bcplParser.T__27:
	                case bcplParser.T__28:
	                case bcplParser.T__29:
	                case bcplParser.T__30:
	                case bcplParser.T__31:
	                case bcplParser.T__32:
	                case bcplParser.T__33:
	                case bcplParser.T__34:
	                case bcplParser.T__35:
	                case bcplParser.T__36:
	                case bcplParser.T__37:
	                case bcplParser.T__38:
	                case bcplParser.T__39:
	                case bcplParser.T__40:
	                case bcplParser.T__41:
	                case bcplParser.T__42:
	                case bcplParser.T__43:
	                case bcplParser.T__44:
	                case bcplParser.T__45:
	                case bcplParser.T__46:
	                case bcplParser.T__47:
	                case bcplParser.T__48:
	                case bcplParser.T__49:
	                case bcplParser.T__50:
	                case bcplParser.T__51:
	                    this.state = 221;
	                    this.letter();
	                    break;
	                case bcplParser.T__52:
	                case bcplParser.T__53:
	                case bcplParser.T__54:
	                case bcplParser.T__55:
	                case bcplParser.T__56:
	                case bcplParser.T__57:
	                case bcplParser.T__58:
	                case bcplParser.T__59:
	                case bcplParser.T__60:
	                case bcplParser.T__61:
	                    this.state = 222;
	                    this.digit();
	                    break;
	                case bcplParser.T__66:
	                    this.state = 223;
	                    this.match(bcplParser.T__66);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 228;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	one_character() {
	    let localctx = new One_characterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, bcplParser.RULE_one_character);
	    try {
	        this.state = 231;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 229;
	            this.letter();
	            break;
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 230;
	            this.digit();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, bcplParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_op() {
	    let localctx = new Address_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, bcplParser.RULE_address_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        _la = this._input.LA(1);
	        if(!(_la===bcplParser.T__67 || _la===bcplParser.T__68)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mult_op() {
	    let localctx = new Mult_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, bcplParser.RULE_mult_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        _la = this._input.LA(1);
	        if(!(_la===bcplParser.T__69 || _la===bcplParser.T__70 || _la===bcplParser.Rem)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_op() {
	    let localctx = new Add_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, bcplParser.RULE_add_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        _la = this._input.LA(1);
	        if(!(_la===bcplParser.T__71 || _la===bcplParser.T__72)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rel_op() {
	    let localctx = new Rel_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, bcplParser.RULE_rel_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 241;
	        _la = this._input.LA(1);
	        if(!(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (bcplParser.T__73 - 74)) | (1 << (bcplParser.T__74 - 74)) | (1 << (bcplParser.T__75 - 74)) | (1 << (bcplParser.T__76 - 74)) | (1 << (bcplParser.T__77 - 74)) | (1 << (bcplParser.T__78 - 74)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_op() {
	    let localctx = new Shift_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, bcplParser.RULE_shift_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        _la = this._input.LA(1);
	        if(!(_la===bcplParser.T__79 || _la===bcplParser.T__80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_op() {
	    let localctx = new And_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, bcplParser.RULE_and_op);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.match(bcplParser.T__81);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_op() {
	    let localctx = new Or_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, bcplParser.RULE_or_op);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 247;
	        this.match(bcplParser.T__82);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eqv_op() {
	    let localctx = new Eqv_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, bcplParser.RULE_eqv_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        _la = this._input.LA(1);
	        if(!(_la===bcplParser.Eqv || _la===bcplParser.Neqv)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not_op() {
	    let localctx = new Not_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, bcplParser.RULE_not_op);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this.match(bcplParser.T__83);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, bcplParser.RULE_element);
	    try {
	        this.state = 259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__63:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 253;
	            this.character_constant();
	            break;
	        case bcplParser.T__62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 254;
	            this.string_constant();
	            break;
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 255;
	            this.number();
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 256;
	            this.identifier();
	            break;
	        case bcplParser.True_:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 257;
	            this.match(bcplParser.True_);
	            break;
	        case bcplParser.False_:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 258;
	            this.match(bcplParser.False_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	primary_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Primary_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 44;
	    this.enterRecursionRule(localctx, 44, bcplParser.RULE_primary_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__84:
	            this.state = 262;
	            this.match(bcplParser.T__84);
	            this.state = 263;
	            this.expression();
	            this.state = 264;
	            this.match(bcplParser.T__85);
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.state = 266;
	            this.element();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 279;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 277;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Primary_EContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_primary_E);
	                    this.state = 269;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 270;
	                    this.match(bcplParser.T__84);
	                    this.state = 271;
	                    this.expression_list();
	                    this.state = 272;
	                    this.match(bcplParser.T__85);
	                    break;

	                case 2:
	                    localctx = new Primary_EContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_primary_E);
	                    this.state = 274;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 275;
	                    this.match(bcplParser.T__84);
	                    this.state = 276;
	                    this.match(bcplParser.T__85);
	                    break;

	                } 
	            }
	            this.state = 281;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	vector_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Vector_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 46;
	    this.enterRecursionRule(localctx, 46, bcplParser.RULE_vector_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        this.primary_E(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 290;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Vector_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_vector_E);
	                this.state = 285;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 286;
	                this.match(bcplParser.T__68);
	                this.state = 287;
	                this.primary_E(0); 
	            }
	            this.state = 292;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	address_E() {
	    let localctx = new Address_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, bcplParser.RULE_address_E);
	    try {
	        this.state = 297;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__67:
	        case bcplParser.T__68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 293;
	            this.address_op();
	            this.state = 294;
	            this.address_E();
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__84:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 296;
	            this.vector_E(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	mult_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Mult_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 50;
	    this.enterRecursionRule(localctx, 50, bcplParser.RULE_mult_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.address_E();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 308;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Mult_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_mult_E);
	                this.state = 302;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 303;
	                this.mult_op();
	                this.state = 304;
	                this.address_E(); 
	            }
	            this.state = 310;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	add_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Add_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 52;
	    this.enterRecursionRule(localctx, 52, bcplParser.RULE_add_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__71:
	        case bcplParser.T__72:
	            this.state = 312;
	            this.add_op();
	            this.state = 313;
	            this.mult_E(0);
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__67:
	        case bcplParser.T__68:
	        case bcplParser.T__84:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.state = 315;
	            this.mult_E(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 324;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Add_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_add_E);
	                this.state = 318;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 319;
	                this.add_op();
	                this.state = 320;
	                this.mult_E(0); 
	            }
	            this.state = 326;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	rel_E() {
	    let localctx = new Rel_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, bcplParser.RULE_rel_E);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        this.add_E(0);
	        this.state = 333;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 328;
	                this.rel_op();
	                this.state = 329;
	                this.add_E(0); 
	            }
	            this.state = 335;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	shift_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Shift_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 56;
	    this.enterRecursionRule(localctx, 56, bcplParser.RULE_shift_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.rel_E();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 345;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Shift_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_shift_E);
	                this.state = 339;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 340;
	                this.shift_op();
	                this.state = 341;
	                this.add_E(0); 
	            }
	            this.state = 347;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	not_E() {
	    let localctx = new Not_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, bcplParser.RULE_not_E);
	    try {
	        this.state = 352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 348;
	            this.not_op();
	            this.state = 349;
	            this.shift_E(0);
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__67:
	        case bcplParser.T__68:
	        case bcplParser.T__71:
	        case bcplParser.T__72:
	        case bcplParser.T__84:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 351;
	            this.shift_E(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_E() {
	    let localctx = new And_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, bcplParser.RULE_and_E);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.not_E();
	        this.state = 360;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 355;
	                this.and_op();
	                this.state = 356;
	                this.not_E(); 
	            }
	            this.state = 362;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_E() {
	    let localctx = new Or_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, bcplParser.RULE_or_E);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 363;
	        this.and_E();
	        this.state = 369;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 364;
	                this.or_op();
	                this.state = 365;
	                this.and_E(); 
	            }
	            this.state = 371;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eqv_E() {
	    let localctx = new Eqv_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, bcplParser.RULE_eqv_E);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.or_E();
	        this.state = 378;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 373;
	                this.eqv_op();
	                this.state = 374;
	                this.or_E(); 
	            }
	            this.state = 380;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_E() {
	    let localctx = new Conditional_EContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, bcplParser.RULE_conditional_E);
	    try {
	        this.state = 388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 381;
	            this.eqv_E();
	            this.state = 382;
	            this.match(bcplParser.T__86);
	            this.state = 383;
	            this.conditional_E();
	            this.state = 384;
	            this.match(bcplParser.T__87);
	            this.state = 385;
	            this.conditional_E();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 387;
	            this.eqv_E();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, bcplParser.RULE_expression);
	    try {
	        this.state = 402;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__67:
	        case bcplParser.T__68:
	        case bcplParser.T__71:
	        case bcplParser.T__72:
	        case bcplParser.T__83:
	        case bcplParser.T__84:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 390;
	            this.conditional_E();
	            break;
	        case bcplParser.Table:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 391;
	            this.match(bcplParser.Table);
	            this.state = 392;
	            this.constant_expression(0);
	            this.state = 397;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 393;
	                    this.match(bcplParser.T__87);
	                    this.state = 394;
	                    this.constant_expression(0); 
	                }
	                this.state = 399;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            break;
	        case bcplParser.T__88:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 400;
	            this.match(bcplParser.T__88);
	            this.state = 401;
	            this.command();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	c_element() {
	    let localctx = new C_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, bcplParser.RULE_c_element);
	    try {
	        this.state = 413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__63:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 404;
	            this.character_constant();
	            break;
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 405;
	            this.number();
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 406;
	            this.identifier();
	            break;
	        case bcplParser.True_:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 407;
	            this.match(bcplParser.True_);
	            break;
	        case bcplParser.False_:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 408;
	            this.match(bcplParser.False_);
	            break;
	        case bcplParser.T__84:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 409;
	            this.match(bcplParser.T__84);
	            this.state = 410;
	            this.constant_expression(0);
	            this.state = 411;
	            this.match(bcplParser.T__85);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	c_mult_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new C_mult_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 72;
	    this.enterRecursionRule(localctx, 72, bcplParser.RULE_c_mult_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.c_element();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 424;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new C_mult_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_c_mult_E);
	                this.state = 418;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 419;
	                this.mult_op();
	                this.state = 420;
	                this.c_element(); 
	            }
	            this.state = 426;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	c_add_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new C_add_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 74;
	    this.enterRecursionRule(localctx, 74, bcplParser.RULE_c_add_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__71:
	        case bcplParser.T__72:
	            this.state = 428;
	            this.add_op();
	            this.state = 429;
	            this.c_mult_E(0);
	            break;
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__84:
	        case bcplParser.True_:
	        case bcplParser.False_:
	            this.state = 431;
	            this.c_mult_E(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 440;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new C_add_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_c_add_E);
	                this.state = 434;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 435;
	                this.add_op();
	                this.state = 436;
	                this.c_mult_E(0); 
	            }
	            this.state = 442;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	c_shift_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new C_shift_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 76;
	    this.enterRecursionRule(localctx, 76, bcplParser.RULE_c_shift_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.c_add_E(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 452;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new C_shift_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_c_shift_E);
	                this.state = 446;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 447;
	                this.shift_op();
	                this.state = 448;
	                this.c_add_E(0); 
	            }
	            this.state = 454;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	c_and_E(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new C_and_EContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 78;
	    this.enterRecursionRule(localctx, 78, bcplParser.RULE_c_and_E, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456;
	        this.c_shift_E(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 464;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new C_and_EContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_c_and_E);
	                this.state = 458;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 459;
	                this.and_op();
	                this.state = 460;
	                this.c_shift_E(0); 
	            }
	            this.state = 466;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	constant_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Constant_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 80;
	    this.enterRecursionRule(localctx, 80, bcplParser.RULE_constant_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this.c_and_E(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 476;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Constant_expressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_constant_expression);
	                this.state = 470;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 471;
	                this.or_op();
	                this.state = 472;
	                this.c_and_E(0); 
	            }
	            this.state = 478;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, bcplParser.RULE_expression_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.expression();
	        this.state = 484;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 480;
	                this.match(bcplParser.T__87);
	                this.state = 481;
	                this.expression(); 
	            }
	            this.state = 486;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, bcplParser.RULE_name_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.name();
	        this.state = 492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__87) {
	            this.state = 488;
	            this.match(bcplParser.T__87);
	            this.state = 489;
	            this.name();
	            this.state = 494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	manifest_item() {
	    let localctx = new Manifest_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, bcplParser.RULE_manifest_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.identifier();
	        this.state = 496;
	        this.match(bcplParser.T__73);
	        this.state = 497;
	        this.constant_expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	manifest_list() {
	    let localctx = new Manifest_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, bcplParser.RULE_manifest_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.manifest_item();
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__89) {
	            this.state = 500;
	            this.match(bcplParser.T__89);
	            this.state = 501;
	            this.manifest_item();
	            this.state = 506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	manifest_declaration() {
	    let localctx = new Manifest_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, bcplParser.RULE_manifest_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(bcplParser.T__90);
	        this.state = 508;
	        this.match(bcplParser.Left_dollar_open);
	        this.state = 509;
	        this.manifest_list();
	        this.state = 510;
	        this.match(bcplParser.T__91);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	static_declaration() {
	    let localctx = new Static_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, bcplParser.RULE_static_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(bcplParser.T__92);
	        this.state = 513;
	        this.match(bcplParser.Left_dollar_open);
	        this.state = 514;
	        this.manifest_list();
	        this.state = 515;
	        this.match(bcplParser.T__91);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_item() {
	    let localctx = new Global_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, bcplParser.RULE_global_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.identifier();
	        this.state = 518;
	        this.match(bcplParser.T__93);
	        this.state = 519;
	        this.constant_expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_list() {
	    let localctx = new Global_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, bcplParser.RULE_global_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.global_item();
	        this.state = 526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__89) {
	            this.state = 522;
	            this.match(bcplParser.T__89);
	            this.state = 523;
	            this.global_item();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_declaration() {
	    let localctx = new Global_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, bcplParser.RULE_global_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.match(bcplParser.T__94);
	        this.state = 530;
	        this.match(bcplParser.Left_dollar_open);
	        this.state = 531;
	        this.global_list();
	        this.state = 532;
	        this.match(bcplParser.T__91);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_definition() {
	    let localctx = new Simple_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, bcplParser.RULE_simple_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this.name_list();
	        this.state = 535;
	        this.match(bcplParser.T__73);
	        this.state = 536;
	        this.expression_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vector_definition() {
	    let localctx = new Vector_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, bcplParser.RULE_vector_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.identifier();
	        this.state = 539;
	        this.match(bcplParser.T__73);
	        this.state = 540;
	        this.match(bcplParser.T__95);
	        this.state = 541;
	        this.constant_expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_definition() {
	    let localctx = new Function_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, bcplParser.RULE_function_definition);
	    try {
	        this.state = 556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 543;
	            this.identifier();
	            this.state = 544;
	            this.match(bcplParser.T__84);
	            this.state = 545;
	            this.name_list();
	            this.state = 546;
	            this.match(bcplParser.T__85);
	            this.state = 547;
	            this.match(bcplParser.T__73);
	            this.state = 548;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 550;
	            this.identifier();
	            this.state = 551;
	            this.match(bcplParser.T__84);
	            this.state = 552;
	            this.match(bcplParser.T__85);
	            this.state = 553;
	            this.match(bcplParser.T__73);
	            this.state = 554;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routine_definition() {
	    let localctx = new Routine_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, bcplParser.RULE_routine_definition);
	    try {
	        this.state = 571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 558;
	            this.identifier();
	            this.state = 559;
	            this.match(bcplParser.T__84);
	            this.state = 560;
	            this.name_list();
	            this.state = 561;
	            this.match(bcplParser.T__85);
	            this.state = 562;
	            this.match(bcplParser.T__96);
	            this.state = 563;
	            this.command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.identifier();
	            this.state = 566;
	            this.match(bcplParser.T__84);
	            this.state = 567;
	            this.match(bcplParser.T__85);
	            this.state = 568;
	            this.match(bcplParser.T__96);
	            this.state = 569;
	            this.command();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definition() {
	    let localctx = new DefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, bcplParser.RULE_definition);
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 573;
	            this.simple_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 574;
	            this.vector_definition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 575;
	            this.function_definition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 576;
	            this.routine_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simultaneous_declaration() {
	    let localctx = new Simultaneous_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, bcplParser.RULE_simultaneous_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(bcplParser.T__97);
	        this.state = 580;
	        this.definition();
	        this.state = 585;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__98) {
	            this.state = 581;
	            this.match(bcplParser.T__98);
	            this.state = 582;
	            this.definition();
	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, bcplParser.RULE_declaration);
	    try {
	        this.state = 592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__97:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 588;
	            this.simultaneous_declaration();
	            break;
	        case bcplParser.T__90:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 589;
	            this.manifest_declaration();
	            break;
	        case bcplParser.T__92:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 590;
	            this.static_declaration();
	            break;
	        case bcplParser.T__94:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 591;
	            this.global_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lhse() {
	    let localctx = new LhseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, bcplParser.RULE_lhse);
	    try {
	        this.state = 601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            this.vector_E(0);
	            this.state = 596;
	            this.match(bcplParser.T__68);
	            this.state = 597;
	            this.primary_E(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 599;
	            this.match(bcplParser.T__68);
	            this.state = 600;
	            this.primary_E(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	left_hand_side_list() {
	    let localctx = new Left_hand_side_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, bcplParser.RULE_left_hand_side_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 603;
	        this.lhse();
	        this.state = 608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__87) {
	            this.state = 604;
	            this.match(bcplParser.T__87);
	            this.state = 605;
	            this.lhse();
	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, bcplParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        this.left_hand_side_list();
	        this.state = 612;
	        this.match(bcplParser.T__99);
	        this.state = 613;
	        this.expression_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_command() {
	    let localctx = new Simple_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, bcplParser.RULE_simple_command);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        _la = this._input.LA(1);
	        if(!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (bcplParser.T__100 - 101)) | (1 << (bcplParser.T__101 - 101)) | (1 << (bcplParser.T__102 - 101)) | (1 << (bcplParser.T__103 - 101)) | (1 << (bcplParser.T__104 - 101)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goto_command() {
	    let localctx = new Goto_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, bcplParser.RULE_goto_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.match(bcplParser.T__105);
	        this.state = 618;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routine_command() {
	    let localctx = new Routine_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, bcplParser.RULE_routine_command);
	    try {
	        this.state = 629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 620;
	            this.primary_E(0);
	            this.state = 621;
	            this.match(bcplParser.T__84);
	            this.state = 622;
	            this.expression_list();
	            this.state = 623;
	            this.match(bcplParser.T__85);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.primary_E(0);
	            this.state = 626;
	            this.match(bcplParser.T__84);
	            this.state = 627;
	            this.match(bcplParser.T__85);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultis_command() {
	    let localctx = new Resultis_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, bcplParser.RULE_resultis_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(bcplParser.T__106);
	        this.state = 632;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchon_command() {
	    let localctx = new Switchon_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, bcplParser.RULE_switchon_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(bcplParser.T__107);
	        this.state = 635;
	        this.expression();
	        this.state = 636;
	        this.match(bcplParser.T__108);
	        this.state = 637;
	        this.compound_command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	repeatable_command(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Repeatable_commandContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, bcplParser.RULE_repeatable_command, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 640;
	            this.assignment();
	            break;

	        case 2:
	            this.state = 641;
	            this.simple_command();
	            break;

	        case 3:
	            this.state = 642;
	            this.goto_command();
	            break;

	        case 4:
	            this.state = 643;
	            this.routine_command();
	            break;

	        case 5:
	            this.state = 644;
	            this.resultis_command();
	            break;

	        case 6:
	            this.state = 645;
	            this.switchon_command();
	            break;

	        case 7:
	            this.state = 646;
	            this.compound_command();
	            break;

	        case 8:
	            this.state = 647;
	            this.block();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 660;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 658;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Repeatable_commandContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_repeatable_command);
	                    this.state = 650;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 651;
	                    this.match(bcplParser.T__109);
	                    break;

	                case 2:
	                    localctx = new Repeatable_commandContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_repeatable_command);
	                    this.state = 652;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 653;
	                    this.match(bcplParser.T__110);
	                    this.state = 654;
	                    this.expression();
	                    break;

	                case 3:
	                    localctx = new Repeatable_commandContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, bcplParser.RULE_repeatable_command);
	                    this.state = 655;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 656;
	                    this.match(bcplParser.T__111);
	                    this.state = 657;
	                    this.expression();
	                    break;

	                } 
	            }
	            this.state = 662;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	repeated_command() {
	    let localctx = new Repeated_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, bcplParser.RULE_repeated_command);
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 663;
	            this.repeatable_command(0);
	            this.state = 664;
	            this.match(bcplParser.T__109);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 666;
	            this.repeatable_command(0);
	            this.state = 667;
	            this.match(bcplParser.T__110);
	            this.state = 668;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 670;
	            this.repeatable_command(0);
	            this.state = 671;
	            this.match(bcplParser.T__111);
	            this.state = 672;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	until_command() {
	    let localctx = new Until_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, bcplParser.RULE_until_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.match(bcplParser.T__112);
	        this.state = 677;
	        this.expression();
	        this.state = 678;
	        this.match(bcplParser.T__113);
	        this.state = 679;
	        this.command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_command() {
	    let localctx = new While_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, bcplParser.RULE_while_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 681;
	        this.match(bcplParser.T__114);
	        this.state = 682;
	        this.expression();
	        this.state = 683;
	        this.match(bcplParser.T__113);
	        this.state = 684;
	        this.command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_command() {
	    let localctx = new For_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, bcplParser.RULE_for_command);
	    try {
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.match(bcplParser.T__115);
	            this.state = 687;
	            this.identifier();
	            this.state = 688;
	            this.match(bcplParser.T__73);
	            this.state = 689;
	            this.expression();
	            this.state = 690;
	            this.match(bcplParser.T__116);
	            this.state = 691;
	            this.expression();
	            this.state = 692;
	            this.match(bcplParser.T__117);
	            this.state = 693;
	            this.constant_expression(0);
	            this.state = 694;
	            this.match(bcplParser.T__113);
	            this.state = 695;
	            this.command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.match(bcplParser.T__115);
	            this.state = 698;
	            this.identifier();
	            this.state = 699;
	            this.match(bcplParser.T__73);
	            this.state = 700;
	            this.expression();
	            this.state = 701;
	            this.match(bcplParser.T__116);
	            this.state = 702;
	            this.expression();
	            this.state = 703;
	            this.match(bcplParser.T__113);
	            this.state = 704;
	            this.command();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repetitive_command() {
	    let localctx = new Repetitive_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, bcplParser.RULE_repetitive_command);
	    try {
	        this.state = 712;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	        case bcplParser.T__52:
	        case bcplParser.T__53:
	        case bcplParser.T__54:
	        case bcplParser.T__55:
	        case bcplParser.T__56:
	        case bcplParser.T__57:
	        case bcplParser.T__58:
	        case bcplParser.T__59:
	        case bcplParser.T__60:
	        case bcplParser.T__61:
	        case bcplParser.T__62:
	        case bcplParser.T__63:
	        case bcplParser.T__64:
	        case bcplParser.T__65:
	        case bcplParser.T__68:
	        case bcplParser.T__84:
	        case bcplParser.T__100:
	        case bcplParser.T__101:
	        case bcplParser.T__102:
	        case bcplParser.T__103:
	        case bcplParser.T__104:
	        case bcplParser.T__105:
	        case bcplParser.T__106:
	        case bcplParser.T__107:
	        case bcplParser.True_:
	        case bcplParser.False_:
	        case bcplParser.Left_dollar_open:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 708;
	            this.repeated_command();
	            break;
	        case bcplParser.T__112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 709;
	            this.until_command();
	            break;
	        case bcplParser.T__114:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 710;
	            this.while_command();
	            break;
	        case bcplParser.T__115:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 711;
	            this.for_command();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_command() {
	    let localctx = new Test_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, bcplParser.RULE_test_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.match(bcplParser.T__118);
	        this.state = 715;
	        this.expression();
	        this.state = 716;
	        this.match(bcplParser.T__119);
	        this.state = 717;
	        this.command();
	        this.state = 718;
	        this.match(bcplParser.T__120);
	        this.state = 719;
	        this.command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_command() {
	    let localctx = new If_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, bcplParser.RULE_if_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.match(bcplParser.T__121);
	        this.state = 722;
	        this.expression();
	        this.state = 723;
	        this.match(bcplParser.T__119);
	        this.state = 724;
	        this.command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unless_command() {
	    let localctx = new Unless_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, bcplParser.RULE_unless_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this.match(bcplParser.T__122);
	        this.state = 727;
	        this.expression();
	        this.state = 728;
	        this.match(bcplParser.T__119);
	        this.state = 729;
	        this.command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlabelled_command() {
	    let localctx = new Unlabelled_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, bcplParser.RULE_unlabelled_command);
	    try {
	        this.state = 735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 731;
	            this.repeatable_command(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 732;
	            this.repetitive_command();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 733;
	            this.test_command();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 734;
	            this.if_command();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_prefix() {
	    let localctx = new Label_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, bcplParser.RULE_label_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.identifier();
	        this.state = 738;
	        this.match(bcplParser.T__93);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_prefix() {
	    let localctx = new Case_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, bcplParser.RULE_case_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this.match(bcplParser.T__123);
	        this.state = 741;
	        this.constant_expression(0);
	        this.state = 742;
	        this.match(bcplParser.T__93);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_prefix() {
	    let localctx = new Default_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, bcplParser.RULE_default_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this.match(bcplParser.T__124);
	        this.state = 745;
	        this.match(bcplParser.T__93);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix_() {
	    let localctx = new Prefix_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, bcplParser.RULE_prefix_);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__0:
	        case bcplParser.T__1:
	        case bcplParser.T__2:
	        case bcplParser.T__3:
	        case bcplParser.T__4:
	        case bcplParser.T__5:
	        case bcplParser.T__6:
	        case bcplParser.T__7:
	        case bcplParser.T__8:
	        case bcplParser.T__9:
	        case bcplParser.T__10:
	        case bcplParser.T__11:
	        case bcplParser.T__12:
	        case bcplParser.T__13:
	        case bcplParser.T__14:
	        case bcplParser.T__15:
	        case bcplParser.T__16:
	        case bcplParser.T__17:
	        case bcplParser.T__18:
	        case bcplParser.T__19:
	        case bcplParser.T__20:
	        case bcplParser.T__21:
	        case bcplParser.T__22:
	        case bcplParser.T__23:
	        case bcplParser.T__24:
	        case bcplParser.T__25:
	        case bcplParser.T__26:
	        case bcplParser.T__27:
	        case bcplParser.T__28:
	        case bcplParser.T__29:
	        case bcplParser.T__30:
	        case bcplParser.T__31:
	        case bcplParser.T__32:
	        case bcplParser.T__33:
	        case bcplParser.T__34:
	        case bcplParser.T__35:
	        case bcplParser.T__36:
	        case bcplParser.T__37:
	        case bcplParser.T__38:
	        case bcplParser.T__39:
	        case bcplParser.T__40:
	        case bcplParser.T__41:
	        case bcplParser.T__42:
	        case bcplParser.T__43:
	        case bcplParser.T__44:
	        case bcplParser.T__45:
	        case bcplParser.T__46:
	        case bcplParser.T__47:
	        case bcplParser.T__48:
	        case bcplParser.T__49:
	        case bcplParser.T__50:
	        case bcplParser.T__51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 747;
	            this.label_prefix();
	            break;
	        case bcplParser.T__123:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 748;
	            this.case_prefix();
	            break;
	        case bcplParser.T__124:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 749;
	            this.default_prefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command() {
	    let localctx = new CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, bcplParser.RULE_command);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.unlabelled_command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 753;
	            this.prefix_();
	            this.state = 754;
	            this.command();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 756;
	            this.prefix_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command_list() {
	    let localctx = new Command_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, bcplParser.RULE_command_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.command();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===bcplParser.T__89) {
	            this.state = 760;
	            this.match(bcplParser.T__89);
	            this.state = 761;
	            this.command();
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_part() {
	    let localctx = new Declaration_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, bcplParser.RULE_declaration_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.declaration();
	        this.state = 772;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 768;
	                this.match(bcplParser.T__89);
	                this.state = 769;
	                this.declaration(); 
	            }
	            this.state = 774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, bcplParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.match(bcplParser.Left_dollar_open);
	        this.state = 776;
	        this.declaration_part();
	        this.state = 777;
	        this.match(bcplParser.T__89);
	        this.state = 778;
	        this.command_list();
	        this.state = 779;
	        this.match(bcplParser.T__91);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_command() {
	    let localctx = new Compound_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, bcplParser.RULE_compound_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 781;
	        this.match(bcplParser.Left_dollar_open);
	        this.state = 782;
	        this.command_list();
	        this.state = 783;
	        this.match(bcplParser.T__91);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, bcplParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__90:
	        case bcplParser.T__92:
	        case bcplParser.T__94:
	        case bcplParser.T__97:
	            this.state = 785;
	            this.declaration_part();
	            break;
	        case bcplParser.T__125:
	        case bcplParser.T__126:
	            this.state = 786;
	            this.directive();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directive() {
	    let localctx = new DirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, bcplParser.RULE_directive);
	    try {
	        this.state = 793;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case bcplParser.T__125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 789;
	            this.match(bcplParser.T__125);
	            this.state = 790;
	            this.string_constant();
	            break;
	        case bcplParser.T__126:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 791;
	            this.match(bcplParser.T__126);
	            this.state = 792;
	            this.string_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

bcplParser.EOF = antlr4.Token.EOF;
bcplParser.T__0 = 1;
bcplParser.T__1 = 2;
bcplParser.T__2 = 3;
bcplParser.T__3 = 4;
bcplParser.T__4 = 5;
bcplParser.T__5 = 6;
bcplParser.T__6 = 7;
bcplParser.T__7 = 8;
bcplParser.T__8 = 9;
bcplParser.T__9 = 10;
bcplParser.T__10 = 11;
bcplParser.T__11 = 12;
bcplParser.T__12 = 13;
bcplParser.T__13 = 14;
bcplParser.T__14 = 15;
bcplParser.T__15 = 16;
bcplParser.T__16 = 17;
bcplParser.T__17 = 18;
bcplParser.T__18 = 19;
bcplParser.T__19 = 20;
bcplParser.T__20 = 21;
bcplParser.T__21 = 22;
bcplParser.T__22 = 23;
bcplParser.T__23 = 24;
bcplParser.T__24 = 25;
bcplParser.T__25 = 26;
bcplParser.T__26 = 27;
bcplParser.T__27 = 28;
bcplParser.T__28 = 29;
bcplParser.T__29 = 30;
bcplParser.T__30 = 31;
bcplParser.T__31 = 32;
bcplParser.T__32 = 33;
bcplParser.T__33 = 34;
bcplParser.T__34 = 35;
bcplParser.T__35 = 36;
bcplParser.T__36 = 37;
bcplParser.T__37 = 38;
bcplParser.T__38 = 39;
bcplParser.T__39 = 40;
bcplParser.T__40 = 41;
bcplParser.T__41 = 42;
bcplParser.T__42 = 43;
bcplParser.T__43 = 44;
bcplParser.T__44 = 45;
bcplParser.T__45 = 46;
bcplParser.T__46 = 47;
bcplParser.T__47 = 48;
bcplParser.T__48 = 49;
bcplParser.T__49 = 50;
bcplParser.T__50 = 51;
bcplParser.T__51 = 52;
bcplParser.T__52 = 53;
bcplParser.T__53 = 54;
bcplParser.T__54 = 55;
bcplParser.T__55 = 56;
bcplParser.T__56 = 57;
bcplParser.T__57 = 58;
bcplParser.T__58 = 59;
bcplParser.T__59 = 60;
bcplParser.T__60 = 61;
bcplParser.T__61 = 62;
bcplParser.T__62 = 63;
bcplParser.T__63 = 64;
bcplParser.T__64 = 65;
bcplParser.T__65 = 66;
bcplParser.T__66 = 67;
bcplParser.T__67 = 68;
bcplParser.T__68 = 69;
bcplParser.T__69 = 70;
bcplParser.T__70 = 71;
bcplParser.T__71 = 72;
bcplParser.T__72 = 73;
bcplParser.T__73 = 74;
bcplParser.T__74 = 75;
bcplParser.T__75 = 76;
bcplParser.T__76 = 77;
bcplParser.T__77 = 78;
bcplParser.T__78 = 79;
bcplParser.T__79 = 80;
bcplParser.T__80 = 81;
bcplParser.T__81 = 82;
bcplParser.T__82 = 83;
bcplParser.T__83 = 84;
bcplParser.T__84 = 85;
bcplParser.T__85 = 86;
bcplParser.T__86 = 87;
bcplParser.T__87 = 88;
bcplParser.T__88 = 89;
bcplParser.T__89 = 90;
bcplParser.T__90 = 91;
bcplParser.T__91 = 92;
bcplParser.T__92 = 93;
bcplParser.T__93 = 94;
bcplParser.T__94 = 95;
bcplParser.T__95 = 96;
bcplParser.T__96 = 97;
bcplParser.T__97 = 98;
bcplParser.T__98 = 99;
bcplParser.T__99 = 100;
bcplParser.T__100 = 101;
bcplParser.T__101 = 102;
bcplParser.T__102 = 103;
bcplParser.T__103 = 104;
bcplParser.T__104 = 105;
bcplParser.T__105 = 106;
bcplParser.T__106 = 107;
bcplParser.T__107 = 108;
bcplParser.T__108 = 109;
bcplParser.T__109 = 110;
bcplParser.T__110 = 111;
bcplParser.T__111 = 112;
bcplParser.T__112 = 113;
bcplParser.T__113 = 114;
bcplParser.T__114 = 115;
bcplParser.T__115 = 116;
bcplParser.T__116 = 117;
bcplParser.T__117 = 118;
bcplParser.T__118 = 119;
bcplParser.T__119 = 120;
bcplParser.T__120 = 121;
bcplParser.T__121 = 122;
bcplParser.T__122 = 123;
bcplParser.T__123 = 124;
bcplParser.T__124 = 125;
bcplParser.T__125 = 126;
bcplParser.T__126 = 127;
bcplParser.Comment = 128;
bcplParser.WS = 129;
bcplParser.Rem = 130;
bcplParser.Eqv = 131;
bcplParser.Neqv = 132;
bcplParser.True_ = 133;
bcplParser.False_ = 134;
bcplParser.Table = 135;
bcplParser.Left_dollar_open = 136;

bcplParser.RULE_letter = 0;
bcplParser.RULE_octal_digit = 1;
bcplParser.RULE_hex_digit = 2;
bcplParser.RULE_digit = 3;
bcplParser.RULE_string_constant = 4;
bcplParser.RULE_character_constant = 5;
bcplParser.RULE_octal_number = 6;
bcplParser.RULE_hex_number = 7;
bcplParser.RULE_number = 8;
bcplParser.RULE_identifier = 9;
bcplParser.RULE_one_character = 10;
bcplParser.RULE_name = 11;
bcplParser.RULE_address_op = 12;
bcplParser.RULE_mult_op = 13;
bcplParser.RULE_add_op = 14;
bcplParser.RULE_rel_op = 15;
bcplParser.RULE_shift_op = 16;
bcplParser.RULE_and_op = 17;
bcplParser.RULE_or_op = 18;
bcplParser.RULE_eqv_op = 19;
bcplParser.RULE_not_op = 20;
bcplParser.RULE_element = 21;
bcplParser.RULE_primary_E = 22;
bcplParser.RULE_vector_E = 23;
bcplParser.RULE_address_E = 24;
bcplParser.RULE_mult_E = 25;
bcplParser.RULE_add_E = 26;
bcplParser.RULE_rel_E = 27;
bcplParser.RULE_shift_E = 28;
bcplParser.RULE_not_E = 29;
bcplParser.RULE_and_E = 30;
bcplParser.RULE_or_E = 31;
bcplParser.RULE_eqv_E = 32;
bcplParser.RULE_conditional_E = 33;
bcplParser.RULE_expression = 34;
bcplParser.RULE_c_element = 35;
bcplParser.RULE_c_mult_E = 36;
bcplParser.RULE_c_add_E = 37;
bcplParser.RULE_c_shift_E = 38;
bcplParser.RULE_c_and_E = 39;
bcplParser.RULE_constant_expression = 40;
bcplParser.RULE_expression_list = 41;
bcplParser.RULE_name_list = 42;
bcplParser.RULE_manifest_item = 43;
bcplParser.RULE_manifest_list = 44;
bcplParser.RULE_manifest_declaration = 45;
bcplParser.RULE_static_declaration = 46;
bcplParser.RULE_global_item = 47;
bcplParser.RULE_global_list = 48;
bcplParser.RULE_global_declaration = 49;
bcplParser.RULE_simple_definition = 50;
bcplParser.RULE_vector_definition = 51;
bcplParser.RULE_function_definition = 52;
bcplParser.RULE_routine_definition = 53;
bcplParser.RULE_definition = 54;
bcplParser.RULE_simultaneous_declaration = 55;
bcplParser.RULE_declaration = 56;
bcplParser.RULE_lhse = 57;
bcplParser.RULE_left_hand_side_list = 58;
bcplParser.RULE_assignment = 59;
bcplParser.RULE_simple_command = 60;
bcplParser.RULE_goto_command = 61;
bcplParser.RULE_routine_command = 62;
bcplParser.RULE_resultis_command = 63;
bcplParser.RULE_switchon_command = 64;
bcplParser.RULE_repeatable_command = 65;
bcplParser.RULE_repeated_command = 66;
bcplParser.RULE_until_command = 67;
bcplParser.RULE_while_command = 68;
bcplParser.RULE_for_command = 69;
bcplParser.RULE_repetitive_command = 70;
bcplParser.RULE_test_command = 71;
bcplParser.RULE_if_command = 72;
bcplParser.RULE_unless_command = 73;
bcplParser.RULE_unlabelled_command = 74;
bcplParser.RULE_label_prefix = 75;
bcplParser.RULE_case_prefix = 76;
bcplParser.RULE_default_prefix = 77;
bcplParser.RULE_prefix_ = 78;
bcplParser.RULE_command = 79;
bcplParser.RULE_command_list = 80;
bcplParser.RULE_declaration_part = 81;
bcplParser.RULE_block = 82;
bcplParser.RULE_compound_command = 83;
bcplParser.RULE_program = 84;
bcplParser.RULE_directive = 85;

class LetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_letter;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterLetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitLetter(this);
		}
	}


}



class Octal_digitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_octal_digit;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterOctal_digit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitOctal_digit(this);
		}
	}


}



class Hex_digitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_hex_digit;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterHex_digit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitHex_digit(this);
		}
	}


}



class DigitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_digit;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDigit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDigit(this);
		}
	}


}



class String_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_string_constant;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterString_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitString_constant(this);
		}
	}


}



class Character_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_character_constant;
    }

	one_character() {
	    return this.getTypedRuleContext(One_characterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterCharacter_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitCharacter_constant(this);
		}
	}


}



class Octal_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_octal_number;
    }

	octal_digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Octal_digitContext);
	    } else {
	        return this.getTypedRuleContext(Octal_digitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterOctal_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitOctal_number(this);
		}
	}


}



class Hex_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_hex_number;
    }

	hex_digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Hex_digitContext);
	    } else {
	        return this.getTypedRuleContext(Hex_digitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterHex_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitHex_number(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_number;
    }

	octal_number() {
	    return this.getTypedRuleContext(Octal_numberContext,0);
	};

	hex_number() {
	    return this.getTypedRuleContext(Hex_numberContext,0);
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitNumber(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_identifier;
    }

	letter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetterContext);
	    } else {
	        return this.getTypedRuleContext(LetterContext,i);
	    }
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class One_characterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_one_character;
    }

	letter() {
	    return this.getTypedRuleContext(LetterContext,0);
	};

	digit() {
	    return this.getTypedRuleContext(DigitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterOne_character(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitOne_character(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitName(this);
		}
	}


}



class Address_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_address_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAddress_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAddress_op(this);
		}
	}


}



class Mult_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_mult_op;
    }

	Rem() {
	    return this.getToken(bcplParser.Rem, 0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterMult_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitMult_op(this);
		}
	}


}



class Add_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_add_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAdd_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAdd_op(this);
		}
	}


}



class Rel_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_rel_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRel_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRel_op(this);
		}
	}


}



class Shift_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_shift_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterShift_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitShift_op(this);
		}
	}


}



class And_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_and_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAnd_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAnd_op(this);
		}
	}


}



class Or_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_or_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterOr_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitOr_op(this);
		}
	}


}



class Eqv_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_eqv_op;
    }

	Eqv() {
	    return this.getToken(bcplParser.Eqv, 0);
	};

	Neqv() {
	    return this.getToken(bcplParser.Neqv, 0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterEqv_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitEqv_op(this);
		}
	}


}



class Not_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_not_op;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterNot_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitNot_op(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_element;
    }

	character_constant() {
	    return this.getTypedRuleContext(Character_constantContext,0);
	};

	string_constant() {
	    return this.getTypedRuleContext(String_constantContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	True_() {
	    return this.getToken(bcplParser.True_, 0);
	};

	False_() {
	    return this.getToken(bcplParser.False_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitElement(this);
		}
	}


}



class Primary_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_primary_E;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	element() {
	    return this.getTypedRuleContext(ElementContext,0);
	};

	primary_E() {
	    return this.getTypedRuleContext(Primary_EContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterPrimary_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitPrimary_E(this);
		}
	}


}



class Vector_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_vector_E;
    }

	primary_E() {
	    return this.getTypedRuleContext(Primary_EContext,0);
	};

	vector_E() {
	    return this.getTypedRuleContext(Vector_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterVector_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitVector_E(this);
		}
	}


}



class Address_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_address_E;
    }

	address_op() {
	    return this.getTypedRuleContext(Address_opContext,0);
	};

	address_E() {
	    return this.getTypedRuleContext(Address_EContext,0);
	};

	vector_E() {
	    return this.getTypedRuleContext(Vector_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAddress_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAddress_E(this);
		}
	}


}



class Mult_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_mult_E;
    }

	address_E() {
	    return this.getTypedRuleContext(Address_EContext,0);
	};

	mult_E() {
	    return this.getTypedRuleContext(Mult_EContext,0);
	};

	mult_op() {
	    return this.getTypedRuleContext(Mult_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterMult_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitMult_E(this);
		}
	}


}



class Add_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_add_E;
    }

	add_op() {
	    return this.getTypedRuleContext(Add_opContext,0);
	};

	mult_E() {
	    return this.getTypedRuleContext(Mult_EContext,0);
	};

	add_E() {
	    return this.getTypedRuleContext(Add_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAdd_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAdd_E(this);
		}
	}


}



class Rel_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_rel_E;
    }

	add_E = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_EContext);
	    } else {
	        return this.getTypedRuleContext(Add_EContext,i);
	    }
	};

	rel_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rel_opContext);
	    } else {
	        return this.getTypedRuleContext(Rel_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRel_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRel_E(this);
		}
	}


}



class Shift_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_shift_E;
    }

	rel_E() {
	    return this.getTypedRuleContext(Rel_EContext,0);
	};

	shift_E() {
	    return this.getTypedRuleContext(Shift_EContext,0);
	};

	shift_op() {
	    return this.getTypedRuleContext(Shift_opContext,0);
	};

	add_E() {
	    return this.getTypedRuleContext(Add_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterShift_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitShift_E(this);
		}
	}


}



class Not_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_not_E;
    }

	not_op() {
	    return this.getTypedRuleContext(Not_opContext,0);
	};

	shift_E() {
	    return this.getTypedRuleContext(Shift_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterNot_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitNot_E(this);
		}
	}


}



class And_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_and_E;
    }

	not_E = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Not_EContext);
	    } else {
	        return this.getTypedRuleContext(Not_EContext,i);
	    }
	};

	and_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_opContext);
	    } else {
	        return this.getTypedRuleContext(And_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAnd_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAnd_E(this);
		}
	}


}



class Or_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_or_E;
    }

	and_E = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_EContext);
	    } else {
	        return this.getTypedRuleContext(And_EContext,i);
	    }
	};

	or_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_opContext);
	    } else {
	        return this.getTypedRuleContext(Or_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterOr_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitOr_E(this);
		}
	}


}



class Eqv_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_eqv_E;
    }

	or_E = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_EContext);
	    } else {
	        return this.getTypedRuleContext(Or_EContext,i);
	    }
	};

	eqv_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Eqv_opContext);
	    } else {
	        return this.getTypedRuleContext(Eqv_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterEqv_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitEqv_E(this);
		}
	}


}



class Conditional_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_conditional_E;
    }

	eqv_E() {
	    return this.getTypedRuleContext(Eqv_EContext,0);
	};

	conditional_E = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Conditional_EContext);
	    } else {
	        return this.getTypedRuleContext(Conditional_EContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterConditional_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitConditional_E(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_expression;
    }

	conditional_E() {
	    return this.getTypedRuleContext(Conditional_EContext,0);
	};

	Table() {
	    return this.getToken(bcplParser.Table, 0);
	};

	constant_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Constant_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Constant_expressionContext,i);
	    }
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitExpression(this);
		}
	}


}



class C_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_c_element;
    }

	character_constant() {
	    return this.getTypedRuleContext(Character_constantContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	True_() {
	    return this.getToken(bcplParser.True_, 0);
	};

	False_() {
	    return this.getToken(bcplParser.False_, 0);
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterC_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitC_element(this);
		}
	}


}



class C_mult_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_c_mult_E;
    }

	c_element() {
	    return this.getTypedRuleContext(C_elementContext,0);
	};

	c_mult_E() {
	    return this.getTypedRuleContext(C_mult_EContext,0);
	};

	mult_op() {
	    return this.getTypedRuleContext(Mult_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterC_mult_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitC_mult_E(this);
		}
	}


}



class C_add_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_c_add_E;
    }

	add_op() {
	    return this.getTypedRuleContext(Add_opContext,0);
	};

	c_mult_E() {
	    return this.getTypedRuleContext(C_mult_EContext,0);
	};

	c_add_E() {
	    return this.getTypedRuleContext(C_add_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterC_add_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitC_add_E(this);
		}
	}


}



class C_shift_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_c_shift_E;
    }

	c_add_E() {
	    return this.getTypedRuleContext(C_add_EContext,0);
	};

	c_shift_E() {
	    return this.getTypedRuleContext(C_shift_EContext,0);
	};

	shift_op() {
	    return this.getTypedRuleContext(Shift_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterC_shift_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitC_shift_E(this);
		}
	}


}



class C_and_EContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_c_and_E;
    }

	c_shift_E() {
	    return this.getTypedRuleContext(C_shift_EContext,0);
	};

	c_and_E() {
	    return this.getTypedRuleContext(C_and_EContext,0);
	};

	and_op() {
	    return this.getTypedRuleContext(And_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterC_and_E(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitC_and_E(this);
		}
	}


}



class Constant_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_constant_expression;
    }

	c_and_E() {
	    return this.getTypedRuleContext(C_and_EContext,0);
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	or_op() {
	    return this.getTypedRuleContext(Or_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterConstant_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitConstant_expression(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_name_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterName_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitName_list(this);
		}
	}


}



class Manifest_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_manifest_item;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterManifest_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitManifest_item(this);
		}
	}


}



class Manifest_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_manifest_list;
    }

	manifest_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Manifest_itemContext);
	    } else {
	        return this.getTypedRuleContext(Manifest_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterManifest_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitManifest_list(this);
		}
	}


}



class Manifest_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_manifest_declaration;
    }

	Left_dollar_open() {
	    return this.getToken(bcplParser.Left_dollar_open, 0);
	};

	manifest_list() {
	    return this.getTypedRuleContext(Manifest_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterManifest_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitManifest_declaration(this);
		}
	}


}



class Static_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_static_declaration;
    }

	Left_dollar_open() {
	    return this.getToken(bcplParser.Left_dollar_open, 0);
	};

	manifest_list() {
	    return this.getTypedRuleContext(Manifest_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterStatic_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitStatic_declaration(this);
		}
	}


}



class Global_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_global_item;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterGlobal_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitGlobal_item(this);
		}
	}


}



class Global_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_global_list;
    }

	global_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Global_itemContext);
	    } else {
	        return this.getTypedRuleContext(Global_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterGlobal_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitGlobal_list(this);
		}
	}


}



class Global_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_global_declaration;
    }

	Left_dollar_open() {
	    return this.getToken(bcplParser.Left_dollar_open, 0);
	};

	global_list() {
	    return this.getTypedRuleContext(Global_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterGlobal_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitGlobal_declaration(this);
		}
	}


}



class Simple_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_simple_definition;
    }

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterSimple_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitSimple_definition(this);
		}
	}


}



class Vector_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_vector_definition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterVector_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitVector_definition(this);
		}
	}


}



class Function_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_function_definition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterFunction_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitFunction_definition(this);
		}
	}


}



class Routine_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_routine_definition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRoutine_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRoutine_definition(this);
		}
	}


}



class DefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_definition;
    }

	simple_definition() {
	    return this.getTypedRuleContext(Simple_definitionContext,0);
	};

	vector_definition() {
	    return this.getTypedRuleContext(Vector_definitionContext,0);
	};

	function_definition() {
	    return this.getTypedRuleContext(Function_definitionContext,0);
	};

	routine_definition() {
	    return this.getTypedRuleContext(Routine_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDefinition(this);
		}
	}


}



class Simultaneous_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_simultaneous_declaration;
    }

	definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterSimultaneous_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitSimultaneous_declaration(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_declaration;
    }

	simultaneous_declaration() {
	    return this.getTypedRuleContext(Simultaneous_declarationContext,0);
	};

	manifest_declaration() {
	    return this.getTypedRuleContext(Manifest_declarationContext,0);
	};

	static_declaration() {
	    return this.getTypedRuleContext(Static_declarationContext,0);
	};

	global_declaration() {
	    return this.getTypedRuleContext(Global_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class LhseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_lhse;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	vector_E() {
	    return this.getTypedRuleContext(Vector_EContext,0);
	};

	primary_E() {
	    return this.getTypedRuleContext(Primary_EContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterLhse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitLhse(this);
		}
	}


}



class Left_hand_side_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_left_hand_side_list;
    }

	lhse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LhseContext);
	    } else {
	        return this.getTypedRuleContext(LhseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterLeft_hand_side_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitLeft_hand_side_list(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_assignment;
    }

	left_hand_side_list() {
	    return this.getTypedRuleContext(Left_hand_side_listContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitAssignment(this);
		}
	}


}



class Simple_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_simple_command;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterSimple_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitSimple_command(this);
		}
	}


}



class Goto_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_goto_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterGoto_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitGoto_command(this);
		}
	}


}



class Routine_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_routine_command;
    }

	primary_E() {
	    return this.getTypedRuleContext(Primary_EContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRoutine_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRoutine_command(this);
		}
	}


}



class Resultis_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_resultis_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterResultis_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitResultis_command(this);
		}
	}


}



class Switchon_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_switchon_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	compound_command() {
	    return this.getTypedRuleContext(Compound_commandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterSwitchon_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitSwitchon_command(this);
		}
	}


}



class Repeatable_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_repeatable_command;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	simple_command() {
	    return this.getTypedRuleContext(Simple_commandContext,0);
	};

	goto_command() {
	    return this.getTypedRuleContext(Goto_commandContext,0);
	};

	routine_command() {
	    return this.getTypedRuleContext(Routine_commandContext,0);
	};

	resultis_command() {
	    return this.getTypedRuleContext(Resultis_commandContext,0);
	};

	switchon_command() {
	    return this.getTypedRuleContext(Switchon_commandContext,0);
	};

	compound_command() {
	    return this.getTypedRuleContext(Compound_commandContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	repeatable_command() {
	    return this.getTypedRuleContext(Repeatable_commandContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRepeatable_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRepeatable_command(this);
		}
	}


}



class Repeated_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_repeated_command;
    }

	repeatable_command() {
	    return this.getTypedRuleContext(Repeatable_commandContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRepeated_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRepeated_command(this);
		}
	}


}



class Until_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_until_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterUntil_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitUntil_command(this);
		}
	}


}



class While_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_while_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterWhile_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitWhile_command(this);
		}
	}


}



class For_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_for_command;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterFor_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitFor_command(this);
		}
	}


}



class Repetitive_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_repetitive_command;
    }

	repeated_command() {
	    return this.getTypedRuleContext(Repeated_commandContext,0);
	};

	until_command() {
	    return this.getTypedRuleContext(Until_commandContext,0);
	};

	while_command() {
	    return this.getTypedRuleContext(While_commandContext,0);
	};

	for_command() {
	    return this.getTypedRuleContext(For_commandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterRepetitive_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitRepetitive_command(this);
		}
	}


}



class Test_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_test_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterTest_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitTest_command(this);
		}
	}


}



class If_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_if_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterIf_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitIf_command(this);
		}
	}


}



class Unless_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_unless_command;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterUnless_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitUnless_command(this);
		}
	}


}



class Unlabelled_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_unlabelled_command;
    }

	repeatable_command() {
	    return this.getTypedRuleContext(Repeatable_commandContext,0);
	};

	repetitive_command() {
	    return this.getTypedRuleContext(Repetitive_commandContext,0);
	};

	test_command() {
	    return this.getTypedRuleContext(Test_commandContext,0);
	};

	if_command() {
	    return this.getTypedRuleContext(If_commandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterUnlabelled_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitUnlabelled_command(this);
		}
	}


}



class Label_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_label_prefix;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterLabel_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitLabel_prefix(this);
		}
	}


}



class Case_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_case_prefix;
    }

	constant_expression() {
	    return this.getTypedRuleContext(Constant_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterCase_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitCase_prefix(this);
		}
	}


}



class Default_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_default_prefix;
    }


	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDefault_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDefault_prefix(this);
		}
	}


}



class Prefix_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_prefix_;
    }

	label_prefix() {
	    return this.getTypedRuleContext(Label_prefixContext,0);
	};

	case_prefix() {
	    return this.getTypedRuleContext(Case_prefixContext,0);
	};

	default_prefix() {
	    return this.getTypedRuleContext(Default_prefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterPrefix_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitPrefix_(this);
		}
	}


}



class CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_command;
    }

	unlabelled_command() {
	    return this.getTypedRuleContext(Unlabelled_commandContext,0);
	};

	prefix_() {
	    return this.getTypedRuleContext(Prefix_Context,0);
	};

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitCommand(this);
		}
	}


}



class Command_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_command_list;
    }

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterCommand_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitCommand_list(this);
		}
	}


}



class Declaration_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_declaration_part;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDeclaration_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDeclaration_part(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_block;
    }

	Left_dollar_open() {
	    return this.getToken(bcplParser.Left_dollar_open, 0);
	};

	declaration_part() {
	    return this.getTypedRuleContext(Declaration_partContext,0);
	};

	command_list() {
	    return this.getTypedRuleContext(Command_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitBlock(this);
		}
	}


}



class Compound_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_compound_command;
    }

	Left_dollar_open() {
	    return this.getToken(bcplParser.Left_dollar_open, 0);
	};

	command_list() {
	    return this.getTypedRuleContext(Command_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterCompound_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitCompound_command(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_program;
    }

	declaration_part() {
	    return this.getTypedRuleContext(Declaration_partContext,0);
	};

	directive() {
	    return this.getTypedRuleContext(DirectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitProgram(this);
		}
	}


}



class DirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = bcplParser.RULE_directive;
    }

	string_constant() {
	    return this.getTypedRuleContext(String_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.enterDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof bcplListener ) {
	        listener.exitDirective(this);
		}
	}


}




bcplParser.LetterContext = LetterContext; 
bcplParser.Octal_digitContext = Octal_digitContext; 
bcplParser.Hex_digitContext = Hex_digitContext; 
bcplParser.DigitContext = DigitContext; 
bcplParser.String_constantContext = String_constantContext; 
bcplParser.Character_constantContext = Character_constantContext; 
bcplParser.Octal_numberContext = Octal_numberContext; 
bcplParser.Hex_numberContext = Hex_numberContext; 
bcplParser.NumberContext = NumberContext; 
bcplParser.IdentifierContext = IdentifierContext; 
bcplParser.One_characterContext = One_characterContext; 
bcplParser.NameContext = NameContext; 
bcplParser.Address_opContext = Address_opContext; 
bcplParser.Mult_opContext = Mult_opContext; 
bcplParser.Add_opContext = Add_opContext; 
bcplParser.Rel_opContext = Rel_opContext; 
bcplParser.Shift_opContext = Shift_opContext; 
bcplParser.And_opContext = And_opContext; 
bcplParser.Or_opContext = Or_opContext; 
bcplParser.Eqv_opContext = Eqv_opContext; 
bcplParser.Not_opContext = Not_opContext; 
bcplParser.ElementContext = ElementContext; 
bcplParser.Primary_EContext = Primary_EContext; 
bcplParser.Vector_EContext = Vector_EContext; 
bcplParser.Address_EContext = Address_EContext; 
bcplParser.Mult_EContext = Mult_EContext; 
bcplParser.Add_EContext = Add_EContext; 
bcplParser.Rel_EContext = Rel_EContext; 
bcplParser.Shift_EContext = Shift_EContext; 
bcplParser.Not_EContext = Not_EContext; 
bcplParser.And_EContext = And_EContext; 
bcplParser.Or_EContext = Or_EContext; 
bcplParser.Eqv_EContext = Eqv_EContext; 
bcplParser.Conditional_EContext = Conditional_EContext; 
bcplParser.ExpressionContext = ExpressionContext; 
bcplParser.C_elementContext = C_elementContext; 
bcplParser.C_mult_EContext = C_mult_EContext; 
bcplParser.C_add_EContext = C_add_EContext; 
bcplParser.C_shift_EContext = C_shift_EContext; 
bcplParser.C_and_EContext = C_and_EContext; 
bcplParser.Constant_expressionContext = Constant_expressionContext; 
bcplParser.Expression_listContext = Expression_listContext; 
bcplParser.Name_listContext = Name_listContext; 
bcplParser.Manifest_itemContext = Manifest_itemContext; 
bcplParser.Manifest_listContext = Manifest_listContext; 
bcplParser.Manifest_declarationContext = Manifest_declarationContext; 
bcplParser.Static_declarationContext = Static_declarationContext; 
bcplParser.Global_itemContext = Global_itemContext; 
bcplParser.Global_listContext = Global_listContext; 
bcplParser.Global_declarationContext = Global_declarationContext; 
bcplParser.Simple_definitionContext = Simple_definitionContext; 
bcplParser.Vector_definitionContext = Vector_definitionContext; 
bcplParser.Function_definitionContext = Function_definitionContext; 
bcplParser.Routine_definitionContext = Routine_definitionContext; 
bcplParser.DefinitionContext = DefinitionContext; 
bcplParser.Simultaneous_declarationContext = Simultaneous_declarationContext; 
bcplParser.DeclarationContext = DeclarationContext; 
bcplParser.LhseContext = LhseContext; 
bcplParser.Left_hand_side_listContext = Left_hand_side_listContext; 
bcplParser.AssignmentContext = AssignmentContext; 
bcplParser.Simple_commandContext = Simple_commandContext; 
bcplParser.Goto_commandContext = Goto_commandContext; 
bcplParser.Routine_commandContext = Routine_commandContext; 
bcplParser.Resultis_commandContext = Resultis_commandContext; 
bcplParser.Switchon_commandContext = Switchon_commandContext; 
bcplParser.Repeatable_commandContext = Repeatable_commandContext; 
bcplParser.Repeated_commandContext = Repeated_commandContext; 
bcplParser.Until_commandContext = Until_commandContext; 
bcplParser.While_commandContext = While_commandContext; 
bcplParser.For_commandContext = For_commandContext; 
bcplParser.Repetitive_commandContext = Repetitive_commandContext; 
bcplParser.Test_commandContext = Test_commandContext; 
bcplParser.If_commandContext = If_commandContext; 
bcplParser.Unless_commandContext = Unless_commandContext; 
bcplParser.Unlabelled_commandContext = Unlabelled_commandContext; 
bcplParser.Label_prefixContext = Label_prefixContext; 
bcplParser.Case_prefixContext = Case_prefixContext; 
bcplParser.Default_prefixContext = Default_prefixContext; 
bcplParser.Prefix_Context = Prefix_Context; 
bcplParser.CommandContext = CommandContext; 
bcplParser.Command_listContext = Command_listContext; 
bcplParser.Declaration_partContext = Declaration_partContext; 
bcplParser.BlockContext = BlockContext; 
bcplParser.Compound_commandContext = Compound_commandContext; 
bcplParser.ProgramContext = ProgramContext; 
bcplParser.DirectiveContext = DirectiveContext; 
