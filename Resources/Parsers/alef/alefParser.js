// Generated from Resources/Parsers/alef/alef.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import alefListener from './alefListener.js';
const serializedATN = [4,1,99,1021,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,3,0,124,8,0,1,1,4,1,127,
8,1,11,1,12,1,128,1,2,1,2,3,2,133,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,141,8,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,150,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
2,159,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,171,8,2,1,2,1,2,1,
2,1,2,1,2,3,2,178,8,2,1,3,1,3,3,3,182,8,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,190,
8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,201,8,5,1,6,1,6,3,6,205,8,6,
1,6,1,6,1,6,1,6,3,6,211,8,6,1,6,1,6,3,6,215,8,6,1,6,1,6,1,6,1,6,3,6,221,
8,6,1,6,1,6,3,6,225,8,6,1,6,3,6,228,8,6,1,6,1,6,1,6,1,6,3,6,234,8,6,1,6,
1,6,3,6,238,8,6,1,6,1,6,1,6,1,6,3,6,244,8,6,1,7,1,7,3,7,248,8,7,1,8,1,8,
1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,259,8,9,1,10,1,10,3,10,263,8,10,1,10,1,10,
1,10,5,10,268,8,10,10,10,12,10,271,9,10,1,11,1,11,1,11,3,11,276,8,11,1,12,
1,12,1,13,1,13,1,13,1,13,1,13,5,13,285,8,13,10,13,12,13,288,9,13,1,14,1,
14,1,14,5,14,293,8,14,10,14,12,14,296,9,14,1,15,1,15,3,15,300,8,15,1,16,
1,16,1,16,1,17,1,17,3,17,307,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,329,8,17,
1,17,1,17,1,17,5,17,334,8,17,10,17,12,17,337,9,17,1,18,1,18,3,18,341,8,18,
1,18,1,18,1,18,3,18,346,8,18,1,18,1,18,1,18,1,18,3,18,352,8,18,1,18,1,18,
1,18,3,18,357,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,366,8,18,1,18,
1,18,1,18,3,18,371,8,18,1,18,1,18,3,18,375,8,18,1,19,1,19,3,19,379,8,19,
1,19,4,19,382,8,19,11,19,12,19,383,1,20,4,20,387,8,20,11,20,12,20,388,1,
21,5,21,392,8,21,10,21,12,21,395,9,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
1,22,3,22,405,8,22,1,23,1,23,1,23,1,23,3,23,411,8,23,1,23,1,23,1,23,1,23,
1,23,1,23,3,23,419,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
430,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,442,8,23,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,451,8,24,1,24,1,24,1,24,1,24,1,24,
3,24,458,8,24,1,25,4,25,461,8,25,11,25,12,25,462,1,26,1,26,3,26,467,8,26,
1,26,1,26,1,26,1,26,1,26,3,26,474,8,26,1,26,1,26,3,26,478,8,26,1,27,1,27,
3,27,482,8,27,1,27,3,27,485,8,27,1,27,1,27,1,27,1,27,3,27,491,8,27,1,27,
3,27,494,8,27,1,27,3,27,497,8,27,1,28,4,28,500,8,28,11,28,12,28,501,1,29,
1,29,3,29,506,8,29,1,29,1,29,1,29,1,29,3,29,512,8,29,1,29,3,29,515,8,29,
1,30,4,30,518,8,30,11,30,12,30,519,1,31,1,31,1,31,1,31,3,31,526,8,31,1,31,
1,31,1,31,3,31,531,8,31,3,31,533,8,31,1,32,1,32,3,32,537,8,32,1,32,1,32,
1,32,1,32,3,32,543,8,32,1,32,3,32,546,8,32,1,33,4,33,549,8,33,11,33,12,33,
550,1,34,1,34,1,34,1,34,3,34,557,8,34,1,34,1,34,1,34,3,34,562,8,34,3,34,
564,8,34,1,35,1,35,1,35,3,35,569,8,35,1,36,1,36,1,37,1,37,1,37,1,37,3,37,
577,8,37,1,38,1,38,1,38,1,39,3,39,583,8,39,1,39,1,39,1,39,1,39,1,39,3,39,
590,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,3,39,606,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,628,8,39,1,39,1,39,1,39,
1,39,3,39,634,8,39,1,39,1,39,3,39,638,8,39,1,39,1,39,3,39,642,8,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,685,8,39,1,39,
1,39,1,39,3,39,690,8,39,1,39,3,39,693,8,39,1,40,1,40,1,41,1,41,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,799,8,42,10,
42,12,42,802,9,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,3,43,816,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,
828,8,44,1,44,1,44,1,44,1,44,3,44,834,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
45,1,45,1,45,1,45,1,45,3,45,861,8,45,1,46,1,46,1,47,1,47,1,47,5,47,868,8,
47,10,47,12,47,871,9,47,1,48,1,48,1,48,3,48,876,8,48,1,48,3,48,879,8,48,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,907,8,49,
1,49,1,49,1,49,3,49,912,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,932,8,49,10,49,12,49,935,
9,49,1,50,1,50,3,50,939,8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,
949,8,52,10,52,12,52,952,9,52,1,53,1,53,1,53,1,53,1,53,3,53,959,8,53,1,54,
3,54,962,8,54,1,54,1,54,3,54,966,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
974,8,54,1,54,1,54,1,54,1,54,3,54,980,8,54,1,55,1,55,1,55,1,55,1,55,3,55,
987,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,3,56,1007,8,56,3,56,1009,8,56,1,57,1,57,1,57,1,
57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,0,6,20,26,34,84,98,104,61,0,2,4,6,
8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,0,1,3,0,65,65,71,71,94,94,1176,0,123,1,0,
0,0,2,126,1,0,0,0,4,177,1,0,0,0,6,179,1,0,0,0,8,189,1,0,0,0,10,200,1,0,0,
0,12,243,1,0,0,0,14,247,1,0,0,0,16,249,1,0,0,0,18,258,1,0,0,0,20,260,1,0,
0,0,22,272,1,0,0,0,24,277,1,0,0,0,26,279,1,0,0,0,28,289,1,0,0,0,30,297,1,
0,0,0,32,301,1,0,0,0,34,328,1,0,0,0,36,374,1,0,0,0,38,381,1,0,0,0,40,386,
1,0,0,0,42,393,1,0,0,0,44,404,1,0,0,0,46,441,1,0,0,0,48,457,1,0,0,0,50,460,
1,0,0,0,52,477,1,0,0,0,54,496,1,0,0,0,56,499,1,0,0,0,58,514,1,0,0,0,60,517,
1,0,0,0,62,532,1,0,0,0,64,545,1,0,0,0,66,548,1,0,0,0,68,563,1,0,0,0,70,568,
1,0,0,0,72,570,1,0,0,0,74,576,1,0,0,0,76,578,1,0,0,0,78,692,1,0,0,0,80,694,
1,0,0,0,82,696,1,0,0,0,84,698,1,0,0,0,86,815,1,0,0,0,88,833,1,0,0,0,90,860,
1,0,0,0,92,862,1,0,0,0,94,864,1,0,0,0,96,878,1,0,0,0,98,906,1,0,0,0,100,
938,1,0,0,0,102,940,1,0,0,0,104,942,1,0,0,0,106,958,1,0,0,0,108,979,1,0,
0,0,110,986,1,0,0,0,112,1008,1,0,0,0,114,1010,1,0,0,0,116,1014,1,0,0,0,118,
1016,1,0,0,0,120,1018,1,0,0,0,122,124,3,2,1,0,123,122,1,0,0,0,123,124,1,
0,0,0,124,1,1,0,0,0,125,127,3,4,2,0,126,125,1,0,0,0,127,128,1,0,0,0,128,
126,1,0,0,0,128,129,1,0,0,0,129,3,1,0,0,0,130,132,3,108,54,0,131,133,3,28,
14,0,132,131,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,135,5,1,0,0,135,
178,1,0,0,0,136,137,3,108,54,0,137,138,3,36,18,0,138,140,5,2,0,0,139,141,
3,42,21,0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,5,3,0,
0,143,144,3,54,27,0,144,178,1,0,0,0,145,146,3,108,54,0,146,147,3,10,5,0,
147,149,5,2,0,0,148,150,3,42,21,0,149,148,1,0,0,0,149,150,1,0,0,0,150,151,
1,0,0,0,151,152,5,3,0,0,152,153,3,54,27,0,153,178,1,0,0,0,154,155,3,108,
54,0,155,156,3,36,18,0,156,158,5,2,0,0,157,159,3,42,21,0,158,157,1,0,0,0,
158,159,1,0,0,0,159,160,1,0,0,0,160,161,5,3,0,0,161,162,5,1,0,0,162,178,
1,0,0,0,163,164,3,12,6,0,164,165,5,1,0,0,165,178,1,0,0,0,166,167,5,84,0,
0,167,168,3,8,4,0,168,170,3,36,18,0,169,171,3,6,3,0,170,169,1,0,0,0,170,
171,1,0,0,0,171,172,1,0,0,0,172,173,5,1,0,0,173,178,1,0,0,0,174,175,5,84,
0,0,175,176,5,95,0,0,176,178,5,1,0,0,177,130,1,0,0,0,177,136,1,0,0,0,177,
145,1,0,0,0,177,154,1,0,0,0,177,163,1,0,0,0,177,166,1,0,0,0,177,174,1,0,
0,0,178,5,1,0,0,0,179,181,5,2,0,0,180,182,3,42,21,0,181,180,1,0,0,0,181,
182,1,0,0,0,182,183,1,0,0,0,183,184,5,3,0,0,184,7,1,0,0,0,185,190,3,108,
54,0,186,190,5,51,0,0,187,190,5,50,0,0,188,190,5,89,0,0,189,185,1,0,0,0,
189,186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,9,1,0,0,0,191,192,3,
118,59,0,192,193,5,4,0,0,193,194,3,24,12,0,194,201,1,0,0,0,195,196,3,40,
20,0,196,197,3,118,59,0,197,198,5,4,0,0,198,199,3,24,12,0,199,201,1,0,0,
0,200,191,1,0,0,0,200,195,1,0,0,0,201,11,1,0,0,0,202,204,5,51,0,0,203,205,
3,14,7,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,5,0,0,
207,208,3,26,13,0,208,210,5,6,0,0,209,211,3,14,7,0,210,209,1,0,0,0,210,211,
1,0,0,0,211,244,1,0,0,0,212,214,5,89,0,0,213,215,3,14,7,0,214,213,1,0,0,
0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,5,5,0,0,217,218,3,26,13,0,218,
220,5,6,0,0,219,221,3,14,7,0,220,219,1,0,0,0,220,221,1,0,0,0,221,244,1,0,
0,0,222,224,5,50,0,0,223,225,3,14,7,0,224,223,1,0,0,0,224,225,1,0,0,0,225,
227,1,0,0,0,226,228,3,16,8,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,
0,0,229,230,5,5,0,0,230,231,3,26,13,0,231,233,5,6,0,0,232,234,3,14,7,0,233,
232,1,0,0,0,233,234,1,0,0,0,234,244,1,0,0,0,235,237,5,64,0,0,236,238,3,14,
7,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,5,0,0,240,
241,3,20,10,0,241,242,5,6,0,0,242,244,1,0,0,0,243,202,1,0,0,0,243,212,1,
0,0,0,243,222,1,0,0,0,243,235,1,0,0,0,244,13,1,0,0,0,245,248,3,24,12,0,246,
248,3,118,59,0,247,245,1,0,0,0,247,246,1,0,0,0,248,15,1,0,0,0,249,250,5,
7,0,0,250,251,3,18,9,0,251,252,5,8,0,0,252,17,1,0,0,0,253,259,3,24,12,0,
254,255,3,24,12,0,255,256,5,9,0,0,256,257,3,18,9,0,257,259,1,0,0,0,258,253,
1,0,0,0,258,254,1,0,0,0,259,19,1,0,0,0,260,262,6,10,-1,0,261,263,3,22,11,
0,262,261,1,0,0,0,262,263,1,0,0,0,263,269,1,0,0,0,264,265,10,1,0,0,265,266,
5,9,0,0,266,268,3,20,10,2,267,264,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,
0,269,270,1,0,0,0,270,21,1,0,0,0,271,269,1,0,0,0,272,275,3,24,12,0,273,274,
5,10,0,0,274,276,3,84,42,0,275,273,1,0,0,0,275,276,1,0,0,0,276,23,1,0,0,
0,277,278,5,95,0,0,278,25,1,0,0,0,279,280,6,13,-1,0,280,281,3,4,2,0,281,
286,1,0,0,0,282,283,10,1,0,0,283,285,3,4,2,0,284,282,1,0,0,0,285,288,1,0,
0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,27,1,0,0,0,288,286,1,0,0,0,289,294,
3,30,15,0,290,291,5,9,0,0,291,293,3,30,15,0,292,290,1,0,0,0,293,296,1,0,
0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,29,1,0,0,0,296,294,1,0,0,0,297,299,
3,36,18,0,298,300,3,32,16,0,299,298,1,0,0,0,299,300,1,0,0,0,300,31,1,0,0,
0,301,302,5,10,0,0,302,303,3,34,17,0,303,33,1,0,0,0,304,306,6,17,-1,0,305,
307,3,82,41,0,306,305,1,0,0,0,306,307,1,0,0,0,307,329,1,0,0,0,308,309,5,
7,0,0,309,310,3,84,42,0,310,311,5,8,0,0,311,312,3,84,42,0,312,329,1,0,0,
0,313,314,5,4,0,0,314,315,3,100,50,0,315,316,3,84,42,0,316,329,1,0,0,0,317,
318,5,5,0,0,318,319,3,34,17,0,319,320,5,6,0,0,320,329,1,0,0,0,321,322,5,
7,0,0,322,323,3,84,42,0,323,324,5,8,0,0,324,325,5,5,0,0,325,326,3,34,17,
0,326,327,5,6,0,0,327,329,1,0,0,0,328,304,1,0,0,0,328,308,1,0,0,0,328,313,
1,0,0,0,328,317,1,0,0,0,328,321,1,0,0,0,329,335,1,0,0,0,330,331,10,1,0,0,
331,332,5,9,0,0,332,334,3,34,17,2,333,330,1,0,0,0,334,337,1,0,0,0,335,333,
1,0,0,0,335,336,1,0,0,0,336,35,1,0,0,0,337,335,1,0,0,0,338,340,5,95,0,0,
339,341,3,38,19,0,340,339,1,0,0,0,340,341,1,0,0,0,341,375,1,0,0,0,342,343,
3,40,20,0,343,345,5,95,0,0,344,346,3,38,19,0,345,344,1,0,0,0,345,346,1,0,
0,0,346,375,1,0,0,0,347,348,5,2,0,0,348,349,3,40,20,0,349,351,5,95,0,0,350,
352,3,38,19,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,354,5,
3,0,0,354,356,5,2,0,0,355,357,3,42,21,0,356,355,1,0,0,0,356,357,1,0,0,0,
357,358,1,0,0,0,358,359,5,3,0,0,359,375,1,0,0,0,360,361,3,40,20,0,361,362,
5,2,0,0,362,363,3,40,20,0,363,365,5,95,0,0,364,366,3,38,19,0,365,364,1,0,
0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,368,5,3,0,0,368,370,5,2,0,0,369,
371,3,42,21,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,5,
3,0,0,373,375,1,0,0,0,374,338,1,0,0,0,374,342,1,0,0,0,374,347,1,0,0,0,374,
360,1,0,0,0,375,37,1,0,0,0,376,378,5,7,0,0,377,379,3,82,41,0,378,377,1,0,
0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,382,5,8,0,0,381,376,1,0,0,0,382,
383,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,39,1,0,0,0,385,387,5,11,
0,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,
41,1,0,0,0,390,392,3,44,22,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,
0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,397,5,9,0,0,397,
398,3,46,23,0,398,43,1,0,0,0,399,405,3,46,23,0,400,401,5,11,0,0,401,405,
3,112,56,0,402,403,5,4,0,0,403,405,3,112,56,0,404,399,1,0,0,0,404,400,1,
0,0,0,404,402,1,0,0,0,405,45,1,0,0,0,406,442,3,112,56,0,407,408,3,112,56,
0,408,410,3,40,20,0,409,411,3,38,19,0,410,409,1,0,0,0,410,411,1,0,0,0,411,
442,1,0,0,0,412,413,3,112,56,0,413,414,5,2,0,0,414,415,3,40,20,0,415,416,
5,3,0,0,416,418,5,2,0,0,417,419,3,42,21,0,418,417,1,0,0,0,418,419,1,0,0,
0,419,420,1,0,0,0,420,421,5,3,0,0,421,442,1,0,0,0,422,423,3,112,56,0,423,
424,3,40,20,0,424,425,5,2,0,0,425,426,3,40,20,0,426,427,5,3,0,0,427,429,
5,2,0,0,428,430,3,42,21,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,
0,431,432,5,3,0,0,432,442,1,0,0,0,433,434,5,83,0,0,434,442,3,48,24,0,435,
436,3,112,56,0,436,437,3,36,18,0,437,442,1,0,0,0,438,439,5,4,0,0,439,440,
5,4,0,0,440,442,5,4,0,0,441,406,1,0,0,0,441,407,1,0,0,0,441,412,1,0,0,0,
441,422,1,0,0,0,441,433,1,0,0,0,441,435,1,0,0,0,441,438,1,0,0,0,442,47,1,
0,0,0,443,458,3,108,54,0,444,445,3,108,54,0,445,446,5,2,0,0,446,447,3,40,
20,0,447,448,5,3,0,0,448,450,5,2,0,0,449,451,3,42,21,0,450,449,1,0,0,0,450,
451,1,0,0,0,451,452,1,0,0,0,452,453,5,3,0,0,453,458,1,0,0,0,454,455,3,108,
54,0,455,456,3,36,18,0,456,458,1,0,0,0,457,443,1,0,0,0,457,444,1,0,0,0,457,
454,1,0,0,0,458,49,1,0,0,0,459,461,3,52,26,0,460,459,1,0,0,0,461,462,1,0,
0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,51,1,0,0,0,464,466,3,112,56,0,465,
467,3,28,14,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,469,5,
1,0,0,469,478,1,0,0,0,470,471,5,83,0,0,471,473,3,108,54,0,472,474,3,28,14,
0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,5,1,0,0,476,478,
1,0,0,0,477,464,1,0,0,0,477,470,1,0,0,0,478,53,1,0,0,0,479,481,5,5,0,0,480,
482,3,50,25,0,481,480,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,485,3,
56,28,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,497,5,6,0,0,
487,488,5,12,0,0,488,490,5,5,0,0,489,491,3,50,25,0,490,489,1,0,0,0,490,491,
1,0,0,0,491,493,1,0,0,0,492,494,3,56,28,0,493,492,1,0,0,0,493,494,1,0,0,
0,494,495,1,0,0,0,495,497,5,6,0,0,496,479,1,0,0,0,496,487,1,0,0,0,497,55,
1,0,0,0,498,500,3,74,37,0,499,498,1,0,0,0,500,501,1,0,0,0,501,499,1,0,0,
0,501,502,1,0,0,0,502,57,1,0,0,0,503,505,5,5,0,0,504,506,3,60,30,0,505,504,
1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,515,5,6,0,0,508,509,5,12,0,0,
509,511,5,5,0,0,510,512,3,66,33,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,
1,0,0,0,513,515,5,6,0,0,514,503,1,0,0,0,514,508,1,0,0,0,515,59,1,0,0,0,516,
518,3,62,31,0,517,516,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,520,1,
0,0,0,520,61,1,0,0,0,521,522,5,57,0,0,522,523,3,88,44,0,523,525,5,13,0,0,
524,526,3,56,28,0,525,524,1,0,0,0,525,526,1,0,0,0,526,533,1,0,0,0,527,528,
5,61,0,0,528,530,5,13,0,0,529,531,3,56,28,0,530,529,1,0,0,0,530,531,1,0,
0,0,531,533,1,0,0,0,532,521,1,0,0,0,532,527,1,0,0,0,533,63,1,0,0,0,534,536,
5,5,0,0,535,537,3,66,33,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,
0,538,546,5,6,0,0,539,540,5,12,0,0,540,542,5,5,0,0,541,543,3,66,33,0,542,
541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,546,5,6,0,0,545,534,1,0,
0,0,545,539,1,0,0,0,546,65,1,0,0,0,547,549,3,68,34,0,548,547,1,0,0,0,549,
550,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,67,1,0,0,0,552,553,5,57,
0,0,553,554,3,84,42,0,554,556,5,13,0,0,555,557,3,56,28,0,556,555,1,0,0,0,
556,557,1,0,0,0,557,564,1,0,0,0,558,559,5,61,0,0,559,561,5,13,0,0,560,562,
3,56,28,0,561,560,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,552,1,0,0,
0,563,558,1,0,0,0,564,69,1,0,0,0,565,569,3,74,37,0,566,567,5,95,0,0,567,
569,3,54,27,0,568,565,1,0,0,0,568,566,1,0,0,0,569,71,1,0,0,0,570,571,5,95,
0,0,571,73,1,0,0,0,572,577,3,78,39,0,573,574,5,95,0,0,574,575,5,13,0,0,575,
577,3,74,37,0,576,572,1,0,0,0,576,573,1,0,0,0,577,75,1,0,0,0,578,579,5,9,
0,0,579,580,5,96,0,0,580,77,1,0,0,0,581,583,3,82,41,0,582,581,1,0,0,0,582,
583,1,0,0,0,583,584,1,0,0,0,584,693,5,1,0,0,585,693,3,54,27,0,586,587,5,
59,0,0,587,589,3,84,42,0,588,590,3,76,38,0,589,588,1,0,0,0,589,590,1,0,0,
0,590,591,1,0,0,0,591,592,5,1,0,0,592,693,1,0,0,0,593,594,5,52,0,0,594,595,
3,104,52,0,595,596,5,1,0,0,596,693,1,0,0,0,597,598,5,88,0,0,598,599,3,104,
52,0,599,600,5,1,0,0,600,693,1,0,0,0,601,602,5,77,0,0,602,693,3,70,35,0,
603,605,5,76,0,0,604,606,3,72,36,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,
1,0,0,0,607,693,5,1,0,0,608,609,5,68,0,0,609,610,5,95,0,0,610,693,5,1,0,
0,611,612,5,75,0,0,612,613,3,104,52,0,613,614,5,1,0,0,614,693,1,0,0,0,615,
616,5,82,0,0,616,617,3,104,52,0,617,618,5,1,0,0,618,693,1,0,0,0,619,620,
5,54,0,0,620,621,3,84,42,0,621,622,5,1,0,0,622,693,1,0,0,0,623,624,5,53,
0,0,624,693,3,64,32,0,625,627,5,78,0,0,626,628,3,82,41,0,627,626,1,0,0,0,
627,628,1,0,0,0,628,629,1,0,0,0,629,693,5,1,0,0,630,631,5,67,0,0,631,633,
5,2,0,0,632,634,3,82,41,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,
0,635,637,5,1,0,0,636,638,3,82,41,0,637,636,1,0,0,0,637,638,1,0,0,0,638,
639,1,0,0,0,639,641,5,1,0,0,640,642,3,82,41,0,641,640,1,0,0,0,641,642,1,
0,0,0,642,643,1,0,0,0,643,644,5,3,0,0,644,693,3,74,37,0,645,646,5,92,0,0,
646,647,5,2,0,0,647,648,3,84,42,0,648,649,5,3,0,0,649,650,3,74,37,0,650,
693,1,0,0,0,651,652,5,62,0,0,652,653,3,74,37,0,653,654,5,92,0,0,654,655,
5,2,0,0,655,656,3,84,42,0,656,657,5,3,0,0,657,693,1,0,0,0,658,659,5,69,0,
0,659,660,5,2,0,0,660,661,3,84,42,0,661,662,5,3,0,0,662,663,3,74,37,0,663,
693,1,0,0,0,664,665,5,69,0,0,665,666,5,2,0,0,666,667,3,84,42,0,667,668,5,
3,0,0,668,669,3,74,37,0,669,670,5,63,0,0,670,671,3,74,37,0,671,693,1,0,0,
0,672,673,5,74,0,0,673,693,3,54,27,0,674,675,5,81,0,0,675,676,3,84,42,0,
676,677,3,64,32,0,677,693,1,0,0,0,678,679,5,85,0,0,679,680,3,84,42,0,680,
681,3,58,29,0,681,693,1,0,0,0,682,684,5,60,0,0,683,685,3,80,40,0,684,683,
1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,693,5,1,0,0,687,689,5,55,0,0,
688,690,3,80,40,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,693,
5,1,0,0,692,582,1,0,0,0,692,585,1,0,0,0,692,586,1,0,0,0,692,593,1,0,0,0,
692,597,1,0,0,0,692,601,1,0,0,0,692,603,1,0,0,0,692,608,1,0,0,0,692,611,
1,0,0,0,692,615,1,0,0,0,692,619,1,0,0,0,692,623,1,0,0,0,692,625,1,0,0,0,
692,630,1,0,0,0,692,645,1,0,0,0,692,651,1,0,0,0,692,658,1,0,0,0,692,664,
1,0,0,0,692,672,1,0,0,0,692,674,1,0,0,0,692,678,1,0,0,0,692,682,1,0,0,0,
692,687,1,0,0,0,693,79,1,0,0,0,694,695,5,97,0,0,695,81,1,0,0,0,696,697,3,
84,42,0,697,83,1,0,0,0,698,699,6,42,-1,0,699,700,3,86,43,0,700,800,1,0,0,
0,701,702,10,32,0,0,702,703,5,11,0,0,703,799,3,84,42,33,704,705,10,31,0,
0,705,706,5,14,0,0,706,799,3,84,42,32,707,708,10,30,0,0,708,709,5,15,0,0,
709,799,3,84,42,31,710,711,10,29,0,0,711,712,5,16,0,0,712,799,3,84,42,30,
713,714,10,28,0,0,714,715,5,17,0,0,715,799,3,84,42,29,716,717,10,27,0,0,
717,718,5,18,0,0,718,799,3,84,42,28,719,720,10,26,0,0,720,721,5,19,0,0,721,
799,3,84,42,27,722,723,10,25,0,0,723,724,5,20,0,0,724,799,3,84,42,26,725,
726,10,24,0,0,726,727,5,21,0,0,727,799,3,84,42,25,728,729,10,23,0,0,729,
730,5,22,0,0,730,799,3,84,42,24,731,732,10,22,0,0,732,733,5,23,0,0,733,799,
3,84,42,23,734,735,10,21,0,0,735,736,5,24,0,0,736,799,3,84,42,22,737,738,
10,20,0,0,738,739,5,25,0,0,739,799,3,84,42,21,740,741,10,19,0,0,741,742,
5,26,0,0,742,799,3,84,42,20,743,744,10,18,0,0,744,745,5,27,0,0,745,799,3,
84,42,19,746,747,10,17,0,0,747,748,5,28,0,0,748,799,3,84,42,18,749,750,10,
16,0,0,750,751,5,29,0,0,751,799,3,84,42,17,752,753,10,15,0,0,753,754,5,30,
0,0,754,799,3,84,42,16,755,756,10,14,0,0,756,757,5,10,0,0,757,799,3,84,42,
15,758,759,10,13,0,0,759,760,5,31,0,0,760,799,3,84,42,14,761,762,10,12,0,
0,762,763,5,32,0,0,763,764,5,10,0,0,764,799,3,84,42,13,765,766,10,11,0,0,
766,767,5,33,0,0,767,799,3,84,42,12,768,769,10,10,0,0,769,770,5,34,0,0,770,
799,3,84,42,11,771,772,10,9,0,0,772,773,5,35,0,0,773,799,3,84,42,10,774,
775,10,8,0,0,775,776,5,36,0,0,776,799,3,84,42,9,777,778,10,7,0,0,778,779,
5,37,0,0,779,799,3,84,42,8,780,781,10,6,0,0,781,782,5,38,0,0,782,799,3,84,
42,7,783,784,10,5,0,0,784,785,5,39,0,0,785,799,3,84,42,6,786,787,10,4,0,
0,787,788,5,40,0,0,788,799,3,84,42,5,789,790,10,3,0,0,790,791,5,41,0,0,791,
799,3,84,42,4,792,793,10,2,0,0,793,794,5,42,0,0,794,799,3,84,42,3,795,796,
10,1,0,0,796,797,5,43,0,0,797,799,3,84,42,2,798,701,1,0,0,0,798,704,1,0,
0,0,798,707,1,0,0,0,798,710,1,0,0,0,798,713,1,0,0,0,798,716,1,0,0,0,798,
719,1,0,0,0,798,722,1,0,0,0,798,725,1,0,0,0,798,728,1,0,0,0,798,731,1,0,
0,0,798,734,1,0,0,0,798,737,1,0,0,0,798,740,1,0,0,0,798,743,1,0,0,0,798,
746,1,0,0,0,798,749,1,0,0,0,798,752,1,0,0,0,798,755,1,0,0,0,798,758,1,0,
0,0,798,761,1,0,0,0,798,765,1,0,0,0,798,768,1,0,0,0,798,771,1,0,0,0,798,
774,1,0,0,0,798,777,1,0,0,0,798,780,1,0,0,0,798,783,1,0,0,0,798,786,1,0,
0,0,798,789,1,0,0,0,798,792,1,0,0,0,798,795,1,0,0,0,799,802,1,0,0,0,800,
798,1,0,0,0,800,801,1,0,0,0,801,85,1,0,0,0,802,800,1,0,0,0,803,816,3,90,
45,0,804,805,5,2,0,0,805,806,3,88,44,0,806,807,5,3,0,0,807,808,3,86,43,0,
808,816,1,0,0,0,809,810,5,2,0,0,810,811,5,52,0,0,811,812,3,88,44,0,812,813,
5,3,0,0,813,814,3,86,43,0,814,816,1,0,0,0,815,803,1,0,0,0,815,804,1,0,0,
0,815,809,1,0,0,0,816,87,1,0,0,0,817,834,3,112,56,0,818,819,3,112,56,0,819,
820,3,40,20,0,820,834,1,0,0,0,821,822,3,112,56,0,822,823,5,2,0,0,823,824,
3,40,20,0,824,825,5,3,0,0,825,827,5,2,0,0,826,828,3,42,21,0,827,826,1,0,
0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,3,0,0,830,834,1,0,0,0,831,
832,5,83,0,0,832,834,3,108,54,0,833,817,1,0,0,0,833,818,1,0,0,0,833,821,
1,0,0,0,833,831,1,0,0,0,834,89,1,0,0,0,835,861,3,98,49,0,836,837,5,11,0,
0,837,861,3,86,43,0,838,839,5,26,0,0,839,861,3,86,43,0,840,841,5,16,0,0,
841,861,3,86,43,0,842,843,5,17,0,0,843,861,3,86,43,0,844,845,5,44,0,0,845,
861,3,86,43,0,846,847,5,93,0,0,847,861,3,86,43,0,848,849,5,45,0,0,849,861,
3,86,43,0,850,851,5,12,0,0,851,861,3,86,43,0,852,853,5,46,0,0,853,861,3,
86,43,0,854,855,5,80,0,0,855,861,3,90,45,0,856,857,5,32,0,0,857,861,3,86,
43,0,858,859,5,47,0,0,859,861,3,86,43,0,860,835,1,0,0,0,860,836,1,0,0,0,
860,838,1,0,0,0,860,840,1,0,0,0,860,842,1,0,0,0,860,844,1,0,0,0,860,846,
1,0,0,0,860,848,1,0,0,0,860,850,1,0,0,0,860,852,1,0,0,0,860,854,1,0,0,0,
860,856,1,0,0,0,860,858,1,0,0,0,861,91,1,0,0,0,862,863,3,94,47,0,863,93,
1,0,0,0,864,869,3,96,48,0,865,866,5,9,0,0,866,868,3,96,48,0,867,865,1,0,
0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,95,1,0,0,0,871,869,
1,0,0,0,872,879,3,84,42,0,873,875,5,5,0,0,874,876,3,92,46,0,875,874,1,0,
0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,879,5,6,0,0,878,872,1,0,0,0,878,
873,1,0,0,0,879,97,1,0,0,0,880,881,6,49,-1,0,881,882,5,2,0,0,882,883,3,94,
47,0,883,884,5,3,0,0,884,907,1,0,0,0,885,886,5,80,0,0,886,887,5,2,0,0,887,
888,3,88,44,0,888,889,5,3,0,0,889,907,1,0,0,0,890,891,5,4,0,0,891,892,3,
118,59,0,892,893,5,4,0,0,893,894,3,100,50,0,894,907,1,0,0,0,895,907,3,24,
12,0,896,897,5,4,0,0,897,898,5,4,0,0,898,907,5,4,0,0,899,907,5,98,0,0,900,
907,5,73,0,0,901,907,5,97,0,0,902,907,3,120,60,0,903,907,5,96,0,0,904,905,
5,49,0,0,905,907,5,96,0,0,906,880,1,0,0,0,906,885,1,0,0,0,906,890,1,0,0,
0,906,895,1,0,0,0,906,896,1,0,0,0,906,899,1,0,0,0,906,900,1,0,0,0,906,901,
1,0,0,0,906,902,1,0,0,0,906,903,1,0,0,0,906,904,1,0,0,0,907,933,1,0,0,0,
908,909,10,16,0,0,909,911,5,2,0,0,910,912,3,102,51,0,911,910,1,0,0,0,911,
912,1,0,0,0,912,913,1,0,0,0,913,932,5,3,0,0,914,915,10,15,0,0,915,916,5,
7,0,0,916,917,3,84,42,0,917,918,5,8,0,0,918,932,1,0,0,0,919,920,10,14,0,
0,920,921,5,4,0,0,921,932,3,100,50,0,922,923,10,12,0,0,923,924,5,48,0,0,
924,932,3,100,50,0,925,926,10,11,0,0,926,932,5,44,0,0,927,928,10,10,0,0,
928,932,5,45,0,0,929,930,10,9,0,0,930,932,5,47,0,0,931,908,1,0,0,0,931,914,
1,0,0,0,931,919,1,0,0,0,931,922,1,0,0,0,931,925,1,0,0,0,931,927,1,0,0,0,
931,929,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,99,1,
0,0,0,935,933,1,0,0,0,936,939,5,95,0,0,937,939,3,118,59,0,938,936,1,0,0,
0,938,937,1,0,0,0,939,101,1,0,0,0,940,941,3,104,52,0,941,103,1,0,0,0,942,
943,6,52,-1,0,943,944,3,84,42,0,944,950,1,0,0,0,945,946,10,1,0,0,946,947,
5,9,0,0,947,949,3,84,42,0,948,945,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,
0,950,951,1,0,0,0,951,105,1,0,0,0,952,950,1,0,0,0,953,959,3,88,44,0,954,
955,3,88,44,0,955,956,5,9,0,0,956,957,3,106,53,0,957,959,1,0,0,0,958,953,
1,0,0,0,958,954,1,0,0,0,959,107,1,0,0,0,960,962,3,116,58,0,961,960,1,0,0,
0,961,962,1,0,0,0,962,963,1,0,0,0,963,980,3,112,56,0,964,966,3,116,58,0,
965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,968,5,83,0,0,968,969,
5,2,0,0,969,970,3,106,53,0,970,971,5,3,0,0,971,980,1,0,0,0,972,974,3,116,
58,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,2,0,0,976,
977,3,106,53,0,977,978,5,3,0,0,978,980,1,0,0,0,979,961,1,0,0,0,979,965,1,
0,0,0,979,973,1,0,0,0,980,109,1,0,0,0,981,987,3,88,44,0,982,983,3,88,44,
0,983,984,5,9,0,0,984,985,3,110,55,0,985,987,1,0,0,0,986,981,1,0,0,0,986,
982,1,0,0,0,987,111,1,0,0,0,988,1009,5,70,0,0,989,1009,5,86,0,0,990,1009,
5,79,0,0,991,1009,5,90,0,0,992,1009,5,56,0,0,993,1009,5,66,0,0,994,1009,
5,91,0,0,995,1009,3,118,59,0,996,997,3,118,59,0,997,998,5,7,0,0,998,999,
3,110,55,0,999,1000,5,8,0,0,1000,1009,1,0,0,0,1001,1002,5,58,0,0,1002,1003,
5,2,0,0,1003,1004,3,110,55,0,1004,1006,5,3,0,0,1005,1007,3,114,57,0,1006,
1005,1,0,0,0,1006,1007,1,0,0,0,1007,1009,1,0,0,0,1008,988,1,0,0,0,1008,989,
1,0,0,0,1008,990,1,0,0,0,1008,991,1,0,0,0,1008,992,1,0,0,0,1008,993,1,0,
0,0,1008,994,1,0,0,0,1008,995,1,0,0,0,1008,996,1,0,0,0,1008,1001,1,0,0,0,
1009,113,1,0,0,0,1010,1011,5,7,0,0,1011,1012,3,84,42,0,1012,1013,5,8,0,0,
1013,115,1,0,0,0,1014,1015,7,0,0,0,1015,117,1,0,0,0,1016,1017,5,95,0,0,1017,
119,1,0,0,0,1018,1019,5,95,0,0,1019,121,1,0,0,0,108,123,128,132,140,149,
158,170,177,181,189,200,204,210,214,220,224,227,233,237,243,247,258,262,
269,275,286,294,299,306,328,335,340,345,351,356,365,370,374,378,383,388,
393,404,410,418,429,441,450,457,462,466,473,477,481,484,490,493,496,501,
505,511,514,519,525,530,532,536,542,545,550,556,561,563,568,576,582,589,
605,627,633,637,641,684,689,692,798,800,815,827,833,860,869,875,878,906,
911,931,933,938,950,958,961,965,973,979,986,1006,1008];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class alefParser extends antlr4.Parser {

    static grammarFileName = "alef.g4";
    static literalNames = [ null, "';'", "'('", "')'", "'.'", "'{'", "'}'", 
                            "'['", "']'", "','", "'='", "'*'", "'!'", "':'", 
                            "'/'", "'%'", "'+'", "'-'", "'>>'", "'<<'", 
                            "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
                            "'&'", "'^'", "'|'", "'&&'", "'||'", "':='", 
                            "'<-'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                            "'>>='", "'<<='", "'&='", "'|='", "'^='", "'::'", 
                            "'--'", "'++'", "'~'", "'?'", "'->'", "'$'", 
                            "'adt'", "'aggr'", "'alloc'", "'alt'", "'become'", 
                            "'break'", "'byte'", "'case'", "'chan'", "'check'", 
                            "'continue'", "'default'", "'do'", "'else'", 
                            "'enum'", "'extern'", "'float'", "'for'", "'goto'", 
                            "'if'", "'int'", "'intern'", "'lint'", "'nil'", 
                            "'par'", "'proc'", "'raise'", "'rescue'", "'return'", 
                            "'sint'", "'sizeof'", "'switch'", "'task'", 
                            "'tuple'", "'typedef'", "'typeof'", "'uint'", 
                            "'ulint'", "'unalloc'", "'union'", "'usint'", 
                            "'void'", "'while'", "'zerox'", "'private'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "ADT", "AGGR", "ALLOC", "ALT", 
                             "BECOME", "BREAK", "BYTE", "CASE", "CHAN", 
                             "CHECK", "CONTINUE", "DEFAULT", "DO", "ELSE", 
                             "ENUM", "EXTERN", "FLOAT", "FOR", "GOTO", "IF", 
                             "INT", "INTERN", "LINT", "NIL", "PAR", "PROC", 
                             "RAISE", "RESCUE", "RETURN", "SINT", "SIZEOF", 
                             "SWITCH", "TASK", "TUPLE", "TYPEDEF", "TYPEOF", 
                             "UINT", "ULINT", "UNALLOC", "UNION", "USINT", 
                             "VOID", "WHILE", "ZEROX", "PRIVATE", "IDENTIFIER", 
                             "STRING_CONST", "CONSTANT", "ARITHMETIC_CONST", 
                             "WS" ];
    static ruleNames = [ "program", "decllist", "decl", "zargs", "ztname", 
                         "adtfunc", "typespec", "ztag", "zpolytype", "polytype", 
                         "setlist", "sname", "name", "memberlist", "vardecllist", 
                         "ivardecl", "zinit", "zelist", "vardecl", "arrayspec", 
                         "indsp", "arglist", "arglistp", "arg", "tuplearg", 
                         "autolist", "autodecl", "block", "slist", "tbody", 
                         "ctlist", "tcase", "cbody", "clist", "case_", "rbody", 
                         "zlab", "stmnt", "info", "nlstmnt", "zconst", "zexpr", 
                         "expr_", "castexpr", "typecast", "monexpr", "ztelist", 
                         "telist", "tcomp", "term_", "stag", "zarlist", 
                         "elist", "tlist", "tname", "variant", "xtname", 
                         "bufdim", "sclass", "typename", "enum_member" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = alefParser.ruleNames;
        this.literalNames = alefParser.literalNames;
        this.symbolicNames = alefParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 10:
    	    		return this.setlist_sempred(localctx, predIndex);
    	case 13:
    	    		return this.memberlist_sempred(localctx, predIndex);
    	case 17:
    	    		return this.zelist_sempred(localctx, predIndex);
    	case 42:
    	    		return this.expr__sempred(localctx, predIndex);
    	case 49:
    	    		return this.term__sempred(localctx, predIndex);
    	case 52:
    	    		return this.elist_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    setlist_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    memberlist_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    zelist_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr__sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 32);
    		case 4:
    			return this.precpred(this._ctx, 31);
    		case 5:
    			return this.precpred(this._ctx, 30);
    		case 6:
    			return this.precpred(this._ctx, 29);
    		case 7:
    			return this.precpred(this._ctx, 28);
    		case 8:
    			return this.precpred(this._ctx, 27);
    		case 9:
    			return this.precpred(this._ctx, 26);
    		case 10:
    			return this.precpred(this._ctx, 25);
    		case 11:
    			return this.precpred(this._ctx, 24);
    		case 12:
    			return this.precpred(this._ctx, 23);
    		case 13:
    			return this.precpred(this._ctx, 22);
    		case 14:
    			return this.precpred(this._ctx, 21);
    		case 15:
    			return this.precpred(this._ctx, 20);
    		case 16:
    			return this.precpred(this._ctx, 19);
    		case 17:
    			return this.precpred(this._ctx, 18);
    		case 18:
    			return this.precpred(this._ctx, 17);
    		case 19:
    			return this.precpred(this._ctx, 16);
    		case 20:
    			return this.precpred(this._ctx, 15);
    		case 21:
    			return this.precpred(this._ctx, 14);
    		case 22:
    			return this.precpred(this._ctx, 13);
    		case 23:
    			return this.precpred(this._ctx, 12);
    		case 24:
    			return this.precpred(this._ctx, 11);
    		case 25:
    			return this.precpred(this._ctx, 10);
    		case 26:
    			return this.precpred(this._ctx, 9);
    		case 27:
    			return this.precpred(this._ctx, 8);
    		case 28:
    			return this.precpred(this._ctx, 7);
    		case 29:
    			return this.precpred(this._ctx, 6);
    		case 30:
    			return this.precpred(this._ctx, 5);
    		case 31:
    			return this.precpred(this._ctx, 4);
    		case 32:
    			return this.precpred(this._ctx, 3);
    		case 33:
    			return this.precpred(this._ctx, 2);
    		case 34:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    term__sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.precpred(this._ctx, 16);
    		case 36:
    			return this.precpred(this._ctx, 15);
    		case 37:
    			return this.precpred(this._ctx, 14);
    		case 38:
    			return this.precpred(this._ctx, 12);
    		case 39:
    			return this.precpred(this._ctx, 11);
    		case 40:
    			return this.precpred(this._ctx, 10);
    		case 41:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    elist_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 42:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, alefParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===alefParser.T__1 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (alefParser.ADT - 50)) | (1 << (alefParser.AGGR - 50)) | (1 << (alefParser.BYTE - 50)) | (1 << (alefParser.CHAN - 50)) | (1 << (alefParser.ENUM - 50)) | (1 << (alefParser.EXTERN - 50)) | (1 << (alefParser.FLOAT - 50)) | (1 << (alefParser.INT - 50)) | (1 << (alefParser.INTERN - 50)) | (1 << (alefParser.SINT - 50)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (alefParser.TUPLE - 83)) | (1 << (alefParser.TYPEDEF - 83)) | (1 << (alefParser.UINT - 83)) | (1 << (alefParser.UNION - 83)) | (1 << (alefParser.USINT - 83)) | (1 << (alefParser.VOID - 83)) | (1 << (alefParser.PRIVATE - 83)) | (1 << (alefParser.IDENTIFIER - 83)))) !== 0)) {
	            this.state = 122;
	            this.decllist();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decllist() {
	    let localctx = new DecllistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, alefParser.RULE_decllist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 126; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 125;
	            this.decl();
	            this.state = 128; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===alefParser.T__1 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (alefParser.ADT - 50)) | (1 << (alefParser.AGGR - 50)) | (1 << (alefParser.BYTE - 50)) | (1 << (alefParser.CHAN - 50)) | (1 << (alefParser.ENUM - 50)) | (1 << (alefParser.EXTERN - 50)) | (1 << (alefParser.FLOAT - 50)) | (1 << (alefParser.INT - 50)) | (1 << (alefParser.INTERN - 50)) | (1 << (alefParser.SINT - 50)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (alefParser.TUPLE - 83)) | (1 << (alefParser.TYPEDEF - 83)) | (1 << (alefParser.UINT - 83)) | (1 << (alefParser.UNION - 83)) | (1 << (alefParser.USINT - 83)) | (1 << (alefParser.VOID - 83)) | (1 << (alefParser.PRIVATE - 83)) | (1 << (alefParser.IDENTIFIER - 83)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl() {
	    let localctx = new DeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, alefParser.RULE_decl);
	    var _la = 0; // Token type
	    try {
	        this.state = 177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 130;
	            this.tname();
	            this.state = 132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__1 || _la===alefParser.T__10 || _la===alefParser.IDENTIFIER) {
	                this.state = 131;
	                this.vardecllist();
	            }

	            this.state = 134;
	            this.match(alefParser.T__0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 136;
	            this.tname();
	            this.state = 137;
	            this.vardecl();
	            this.state = 138;
	            this.match(alefParser.T__1);
	            this.state = 140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 139;
	                this.arglist();
	            }

	            this.state = 142;
	            this.match(alefParser.T__2);
	            this.state = 143;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 145;
	            this.tname();
	            this.state = 146;
	            this.adtfunc();
	            this.state = 147;
	            this.match(alefParser.T__1);
	            this.state = 149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 148;
	                this.arglist();
	            }

	            this.state = 151;
	            this.match(alefParser.T__2);
	            this.state = 152;
	            this.block();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 154;
	            this.tname();
	            this.state = 155;
	            this.vardecl();
	            this.state = 156;
	            this.match(alefParser.T__1);
	            this.state = 158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 157;
	                this.arglist();
	            }

	            this.state = 160;
	            this.match(alefParser.T__2);
	            this.state = 161;
	            this.match(alefParser.T__0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 163;
	            this.typespec();
	            this.state = 164;
	            this.match(alefParser.T__0);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 166;
	            this.match(alefParser.TYPEDEF);
	            this.state = 167;
	            this.ztname();
	            this.state = 168;
	            this.vardecl();
	            this.state = 170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__1) {
	                this.state = 169;
	                this.zargs();
	            }

	            this.state = 172;
	            this.match(alefParser.T__0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 174;
	            this.match(alefParser.TYPEDEF);
	            this.state = 175;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 176;
	            this.match(alefParser.T__0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zargs() {
	    let localctx = new ZargsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, alefParser.RULE_zargs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this.match(alefParser.T__1);
	        this.state = 181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	            this.state = 180;
	            this.arglist();
	        }

	        this.state = 183;
	        this.match(alefParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ztname() {
	    let localctx = new ZtnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, alefParser.RULE_ztname);
	    try {
	        this.state = 189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.T__1:
	        case alefParser.BYTE:
	        case alefParser.CHAN:
	        case alefParser.EXTERN:
	        case alefParser.FLOAT:
	        case alefParser.INT:
	        case alefParser.INTERN:
	        case alefParser.SINT:
	        case alefParser.TUPLE:
	        case alefParser.UINT:
	        case alefParser.USINT:
	        case alefParser.VOID:
	        case alefParser.PRIVATE:
	        case alefParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 185;
	            this.tname();
	            break;
	        case alefParser.AGGR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 186;
	            this.match(alefParser.AGGR);
	            break;
	        case alefParser.ADT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 187;
	            this.match(alefParser.ADT);
	            break;
	        case alefParser.UNION:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 188;
	            this.match(alefParser.UNION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adtfunc() {
	    let localctx = new AdtfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, alefParser.RULE_adtfunc);
	    try {
	        this.state = 200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 191;
	            this.typename();
	            this.state = 192;
	            this.match(alefParser.T__3);
	            this.state = 193;
	            this.name();
	            break;
	        case alefParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 195;
	            this.indsp();
	            this.state = 196;
	            this.typename();
	            this.state = 197;
	            this.match(alefParser.T__3);
	            this.state = 198;
	            this.name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typespec() {
	    let localctx = new TypespecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, alefParser.RULE_typespec);
	    var _la = 0; // Token type
	    try {
	        this.state = 243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.AGGR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 202;
	            this.match(alefParser.AGGR);
	            this.state = 204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 203;
	                this.ztag();
	            }

	            this.state = 206;
	            this.match(alefParser.T__4);
	            this.state = 207;
	            this.memberlist(0);
	            this.state = 208;
	            this.match(alefParser.T__5);
	            this.state = 210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 209;
	                this.ztag();
	            }

	            break;
	        case alefParser.UNION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 212;
	            this.match(alefParser.UNION);
	            this.state = 214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 213;
	                this.ztag();
	            }

	            this.state = 216;
	            this.match(alefParser.T__4);
	            this.state = 217;
	            this.memberlist(0);
	            this.state = 218;
	            this.match(alefParser.T__5);
	            this.state = 220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 219;
	                this.ztag();
	            }

	            break;
	        case alefParser.ADT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 222;
	            this.match(alefParser.ADT);
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 223;
	                this.ztag();
	            }

	            this.state = 227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 226;
	                this.zpolytype();
	            }

	            this.state = 229;
	            this.match(alefParser.T__4);
	            this.state = 230;
	            this.memberlist(0);
	            this.state = 231;
	            this.match(alefParser.T__5);
	            this.state = 233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 232;
	                this.ztag();
	            }

	            break;
	        case alefParser.ENUM:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 235;
	            this.match(alefParser.ENUM);
	            this.state = 237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 236;
	                this.ztag();
	            }

	            this.state = 239;
	            this.match(alefParser.T__4);
	            this.state = 240;
	            this.setlist(0);
	            this.state = 241;
	            this.match(alefParser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ztag() {
	    let localctx = new ZtagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, alefParser.RULE_ztag);
	    try {
	        this.state = 247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 245;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 246;
	            this.typename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zpolytype() {
	    let localctx = new ZpolytypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, alefParser.RULE_zpolytype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.match(alefParser.T__6);
	        this.state = 250;
	        this.polytype();
	        this.state = 251;
	        this.match(alefParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	polytype() {
	    let localctx = new PolytypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, alefParser.RULE_polytype);
	    try {
	        this.state = 258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 253;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 254;
	            this.name();
	            this.state = 255;
	            this.match(alefParser.T__8);
	            this.state = 256;
	            this.polytype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	setlist(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SetlistContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 20;
	    this.enterRecursionRule(localctx, 20, alefParser.RULE_setlist, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 261;
	            this.sname();

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 269;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SetlistContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_setlist);
	                this.state = 264;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 265;
	                this.match(alefParser.T__8);
	                this.state = 266;
	                this.setlist(2); 
	            }
	            this.state = 271;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	sname() {
	    let localctx = new SnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, alefParser.RULE_sname);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 272;
	        this.name();
	        this.state = 275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 273;
	            this.match(alefParser.T__9);
	            this.state = 274;
	            this.expr_(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, alefParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.match(alefParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	memberlist(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MemberlistContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 26;
	    this.enterRecursionRule(localctx, 26, alefParser.RULE_memberlist, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.decl();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 286;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MemberlistContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_memberlist);
	                this.state = 282;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 283;
	                this.decl(); 
	            }
	            this.state = 288;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	vardecllist() {
	    let localctx = new VardecllistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, alefParser.RULE_vardecllist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.ivardecl();
	        this.state = 294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===alefParser.T__8) {
	            this.state = 290;
	            this.match(alefParser.T__8);
	            this.state = 291;
	            this.ivardecl();
	            this.state = 296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ivardecl() {
	    let localctx = new IvardeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, alefParser.RULE_ivardecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.vardecl();
	        this.state = 299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===alefParser.T__9) {
	            this.state = 298;
	            this.zinit();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zinit() {
	    let localctx = new ZinitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, alefParser.RULE_zinit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this.match(alefParser.T__9);
	        this.state = 302;
	        this.zelist(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	zelist(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ZelistContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 34;
	    this.enterRecursionRule(localctx, 34, alefParser.RULE_zelist, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 306;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            if(la_===1) {
	                this.state = 305;
	                this.zexpr();

	            }
	            break;

	        case 2:
	            this.state = 308;
	            this.match(alefParser.T__6);
	            this.state = 309;
	            this.expr_(0);
	            this.state = 310;
	            this.match(alefParser.T__7);
	            this.state = 311;
	            this.expr_(0);
	            break;

	        case 3:
	            this.state = 313;
	            this.match(alefParser.T__3);
	            this.state = 314;
	            this.stag();
	            this.state = 315;
	            this.expr_(0);
	            break;

	        case 4:
	            this.state = 317;
	            this.match(alefParser.T__4);
	            this.state = 318;
	            this.zelist(0);
	            this.state = 319;
	            this.match(alefParser.T__5);
	            break;

	        case 5:
	            this.state = 321;
	            this.match(alefParser.T__6);
	            this.state = 322;
	            this.expr_(0);
	            this.state = 323;
	            this.match(alefParser.T__7);
	            this.state = 324;
	            this.match(alefParser.T__4);
	            this.state = 325;
	            this.zelist(0);
	            this.state = 326;
	            this.match(alefParser.T__5);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 335;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ZelistContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_zelist);
	                this.state = 330;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 331;
	                this.match(alefParser.T__8);
	                this.state = 332;
	                this.zelist(2); 
	            }
	            this.state = 337;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	vardecl() {
	    let localctx = new VardeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, alefParser.RULE_vardecl);
	    var _la = 0; // Token type
	    try {
	        this.state = 374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 338;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 339;
	                this.arrayspec();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 342;
	            this.indsp();
	            this.state = 343;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 344;
	                this.arrayspec();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 347;
	            this.match(alefParser.T__1);
	            this.state = 348;
	            this.indsp();
	            this.state = 349;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 350;
	                this.arrayspec();
	            }

	            this.state = 353;
	            this.match(alefParser.T__2);
	            this.state = 354;
	            this.match(alefParser.T__1);
	            this.state = 356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 355;
	                this.arglist();
	            }

	            this.state = 358;
	            this.match(alefParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 360;
	            this.indsp();
	            this.state = 361;
	            this.match(alefParser.T__1);
	            this.state = 362;
	            this.indsp();
	            this.state = 363;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 364;
	                this.arrayspec();
	            }

	            this.state = 367;
	            this.match(alefParser.T__2);
	            this.state = 368;
	            this.match(alefParser.T__1);
	            this.state = 370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 369;
	                this.arglist();
	            }

	            this.state = 372;
	            this.match(alefParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayspec() {
	    let localctx = new ArrayspecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, alefParser.RULE_arrayspec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 376;
	            this.match(alefParser.T__6);
	            this.state = 378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 377;
	                this.zexpr();
	            }

	            this.state = 380;
	            this.match(alefParser.T__7);
	            this.state = 383; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===alefParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indsp() {
	    let localctx = new IndspContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, alefParser.RULE_indsp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 385;
	        		this.match(alefParser.T__10);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 388; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,40, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arglist() {
	    let localctx = new ArglistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, alefParser.RULE_arglist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===alefParser.T__3 || _la===alefParser.T__10 || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	            this.state = 390;
	            this.arglistp();
	            this.state = 395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 396;
	        this.match(alefParser.T__8);
	        this.state = 397;
	        this.arg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arglistp() {
	    let localctx = new ArglistpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, alefParser.RULE_arglistp);
	    try {
	        this.state = 404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 399;
	            this.arg();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 400;
	            this.match(alefParser.T__10);
	            this.state = 401;
	            this.xtname();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 402;
	            this.match(alefParser.T__3);
	            this.state = 403;
	            this.xtname();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, alefParser.RULE_arg);
	    var _la = 0; // Token type
	    try {
	        this.state = 441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 406;
	            this.xtname();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 407;
	            this.xtname();
	            this.state = 408;
	            this.indsp();
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 409;
	                this.arrayspec();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 412;
	            this.xtname();
	            this.state = 413;
	            this.match(alefParser.T__1);
	            this.state = 414;
	            this.indsp();
	            this.state = 415;
	            this.match(alefParser.T__2);
	            this.state = 416;
	            this.match(alefParser.T__1);
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 417;
	                this.arglist();
	            }

	            this.state = 420;
	            this.match(alefParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 422;
	            this.xtname();
	            this.state = 423;
	            this.indsp();
	            this.state = 424;
	            this.match(alefParser.T__1);
	            this.state = 425;
	            this.indsp();
	            this.state = 426;
	            this.match(alefParser.T__2);
	            this.state = 427;
	            this.match(alefParser.T__1);
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 428;
	                this.arglist();
	            }

	            this.state = 431;
	            this.match(alefParser.T__2);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 433;
	            this.match(alefParser.TUPLE);
	            this.state = 434;
	            this.tuplearg();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 435;
	            this.xtname();
	            this.state = 436;
	            this.vardecl();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 438;
	            this.match(alefParser.T__3);
	            this.state = 439;
	            this.match(alefParser.T__3);
	            this.state = 440;
	            this.match(alefParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuplearg() {
	    let localctx = new TupleargContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, alefParser.RULE_tuplearg);
	    var _la = 0; // Token type
	    try {
	        this.state = 457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 443;
	            this.tname();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 444;
	            this.tname();
	            this.state = 445;
	            this.match(alefParser.T__1);
	            this.state = 446;
	            this.indsp();
	            this.state = 447;
	            this.match(alefParser.T__2);
	            this.state = 448;
	            this.match(alefParser.T__1);
	            this.state = 450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 449;
	                this.arglist();
	            }

	            this.state = 452;
	            this.match(alefParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 454;
	            this.tname();
	            this.state = 455;
	            this.vardecl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	autolist() {
	    let localctx = new AutolistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, alefParser.RULE_autolist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 459;
	        		this.autodecl();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 462; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,49, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	autodecl() {
	    let localctx = new AutodeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, alefParser.RULE_autodecl);
	    var _la = 0; // Token type
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.BYTE:
	        case alefParser.CHAN:
	        case alefParser.FLOAT:
	        case alefParser.INT:
	        case alefParser.SINT:
	        case alefParser.UINT:
	        case alefParser.USINT:
	        case alefParser.VOID:
	        case alefParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 464;
	            this.xtname();
	            this.state = 466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__1 || _la===alefParser.T__10 || _la===alefParser.IDENTIFIER) {
	                this.state = 465;
	                this.vardecllist();
	            }

	            this.state = 468;
	            this.match(alefParser.T__0);
	            break;
	        case alefParser.TUPLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 470;
	            this.match(alefParser.TUPLE);
	            this.state = 471;
	            this.tname();
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__1 || _la===alefParser.T__10 || _la===alefParser.IDENTIFIER) {
	                this.state = 472;
	                this.vardecllist();
	            }

	            this.state = 475;
	            this.match(alefParser.T__0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, alefParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.state = 496;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 479;
	            this.match(alefParser.T__4);
	            this.state = 481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	            if(la_===1) {
	                this.state = 480;
	                this.autolist();

	            }
	            this.state = 484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 483;
	                this.slist();
	            }

	            this.state = 486;
	            this.match(alefParser.T__5);
	            break;
	        case alefParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 487;
	            this.match(alefParser.T__11);
	            this.state = 488;
	            this.match(alefParser.T__4);
	            this.state = 490;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	            if(la_===1) {
	                this.state = 489;
	                this.autolist();

	            }
	            this.state = 493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 492;
	                this.slist();
	            }

	            this.state = 495;
	            this.match(alefParser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slist() {
	    let localctx = new SlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, alefParser.RULE_slist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 498;
	            this.stmnt();
	            this.state = 501; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tbody() {
	    let localctx = new TbodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, alefParser.RULE_tbody);
	    var _la = 0; // Token type
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 503;
	            this.match(alefParser.T__4);
	            this.state = 505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CASE || _la===alefParser.DEFAULT) {
	                this.state = 504;
	                this.ctlist();
	            }

	            this.state = 507;
	            this.match(alefParser.T__5);
	            break;
	        case alefParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 508;
	            this.match(alefParser.T__11);
	            this.state = 509;
	            this.match(alefParser.T__4);
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CASE || _la===alefParser.DEFAULT) {
	                this.state = 510;
	                this.clist();
	            }

	            this.state = 513;
	            this.match(alefParser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ctlist() {
	    let localctx = new CtlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, alefParser.RULE_ctlist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 516;
	            this.tcase();
	            this.state = 519; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===alefParser.CASE || _la===alefParser.DEFAULT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcase() {
	    let localctx = new TcaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, alefParser.RULE_tcase);
	    var _la = 0; // Token type
	    try {
	        this.state = 532;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 521;
	            this.match(alefParser.CASE);
	            this.state = 522;
	            this.typecast();
	            this.state = 523;
	            this.match(alefParser.T__12);
	            this.state = 525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 524;
	                this.slist();
	            }

	            break;
	        case alefParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 527;
	            this.match(alefParser.DEFAULT);
	            this.state = 528;
	            this.match(alefParser.T__12);
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 529;
	                this.slist();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cbody() {
	    let localctx = new CbodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, alefParser.RULE_cbody);
	    var _la = 0; // Token type
	    try {
	        this.state = 545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 534;
	            this.match(alefParser.T__4);
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CASE || _la===alefParser.DEFAULT) {
	                this.state = 535;
	                this.clist();
	            }

	            this.state = 538;
	            this.match(alefParser.T__5);
	            break;
	        case alefParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 539;
	            this.match(alefParser.T__11);
	            this.state = 540;
	            this.match(alefParser.T__4);
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CASE || _la===alefParser.DEFAULT) {
	                this.state = 541;
	                this.clist();
	            }

	            this.state = 544;
	            this.match(alefParser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clist() {
	    let localctx = new ClistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, alefParser.RULE_clist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 547;
	            this.case_();
	            this.state = 550; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===alefParser.CASE || _la===alefParser.DEFAULT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_() {
	    let localctx = new Case_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, alefParser.RULE_case_);
	    var _la = 0; // Token type
	    try {
	        this.state = 563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 552;
	            this.match(alefParser.CASE);
	            this.state = 553;
	            this.expr_(0);
	            this.state = 554;
	            this.match(alefParser.T__12);
	            this.state = 556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 555;
	                this.slist();
	            }

	            break;
	        case alefParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 558;
	            this.match(alefParser.DEFAULT);
	            this.state = 559;
	            this.match(alefParser.T__12);
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__0) | (1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)) | (1 << (alefParser.ALLOC - 32)) | (1 << (alefParser.ALT - 32)) | (1 << (alefParser.BECOME - 32)) | (1 << (alefParser.BREAK - 32)) | (1 << (alefParser.CHECK - 32)) | (1 << (alefParser.CONTINUE - 32)) | (1 << (alefParser.DO - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (alefParser.FOR - 67)) | (1 << (alefParser.GOTO - 67)) | (1 << (alefParser.IF - 67)) | (1 << (alefParser.NIL - 67)) | (1 << (alefParser.PAR - 67)) | (1 << (alefParser.PROC - 67)) | (1 << (alefParser.RAISE - 67)) | (1 << (alefParser.RESCUE - 67)) | (1 << (alefParser.RETURN - 67)) | (1 << (alefParser.SIZEOF - 67)) | (1 << (alefParser.SWITCH - 67)) | (1 << (alefParser.TASK - 67)) | (1 << (alefParser.TYPEOF - 67)) | (1 << (alefParser.UNALLOC - 67)) | (1 << (alefParser.WHILE - 67)) | (1 << (alefParser.ZEROX - 67)) | (1 << (alefParser.IDENTIFIER - 67)) | (1 << (alefParser.STRING_CONST - 67)) | (1 << (alefParser.CONSTANT - 67)) | (1 << (alefParser.ARITHMETIC_CONST - 67)))) !== 0)) {
	                this.state = 560;
	                this.slist();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rbody() {
	    let localctx = new RbodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, alefParser.RULE_rbody);
	    try {
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.stmnt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 567;
	            this.block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zlab() {
	    let localctx = new ZlabContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, alefParser.RULE_zlab);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(alefParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmnt() {
	    let localctx = new StmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, alefParser.RULE_stmnt);
	    try {
	        this.state = 576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 572;
	            this.nlstmnt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 574;
	            this.match(alefParser.T__12);
	            this.state = 575;
	            this.stmnt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	info() {
	    let localctx = new InfoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, alefParser.RULE_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 578;
	        this.match(alefParser.T__8);
	        this.state = 579;
	        this.match(alefParser.STRING_CONST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nlstmnt() {
	    let localctx = new NlstmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, alefParser.RULE_nlstmnt);
	    var _la = 0; // Token type
	    try {
	        this.state = 692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 581;
	                this.zexpr();
	            }

	            this.state = 584;
	            this.match(alefParser.T__0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 585;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 586;
	            this.match(alefParser.CHECK);
	            this.state = 587;
	            this.expr_(0);
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__8) {
	                this.state = 588;
	                this.info();
	            }

	            this.state = 591;
	            this.match(alefParser.T__0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 593;
	            this.match(alefParser.ALLOC);
	            this.state = 594;
	            this.elist(0);
	            this.state = 595;
	            this.match(alefParser.T__0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 597;
	            this.match(alefParser.UNALLOC);
	            this.state = 598;
	            this.elist(0);
	            this.state = 599;
	            this.match(alefParser.T__0);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 601;
	            this.match(alefParser.RESCUE);
	            this.state = 602;
	            this.rbody();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 603;
	            this.match(alefParser.RAISE);
	            this.state = 605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.IDENTIFIER) {
	                this.state = 604;
	                this.zlab();
	            }

	            this.state = 607;
	            this.match(alefParser.T__0);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 608;
	            this.match(alefParser.GOTO);
	            this.state = 609;
	            this.match(alefParser.IDENTIFIER);
	            this.state = 610;
	            this.match(alefParser.T__0);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 611;
	            this.match(alefParser.PROC);
	            this.state = 612;
	            this.elist(0);
	            this.state = 613;
	            this.match(alefParser.T__0);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 615;
	            this.match(alefParser.TASK);
	            this.state = 616;
	            this.elist(0);
	            this.state = 617;
	            this.match(alefParser.T__0);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 619;
	            this.match(alefParser.BECOME);
	            this.state = 620;
	            this.expr_(0);
	            this.state = 621;
	            this.match(alefParser.T__0);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 623;
	            this.match(alefParser.ALT);
	            this.state = 624;
	            this.cbody();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 625;
	            this.match(alefParser.RETURN);
	            this.state = 627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 626;
	                this.zexpr();
	            }

	            this.state = 629;
	            this.match(alefParser.T__0);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 630;
	            this.match(alefParser.FOR);
	            this.state = 631;
	            this.match(alefParser.T__1);
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 632;
	                this.zexpr();
	            }

	            this.state = 635;
	            this.match(alefParser.T__0);
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 636;
	                this.zexpr();
	            }

	            this.state = 639;
	            this.match(alefParser.T__0);
	            this.state = 641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 640;
	                this.zexpr();
	            }

	            this.state = 643;
	            this.match(alefParser.T__2);
	            this.state = 644;
	            this.stmnt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 645;
	            this.match(alefParser.WHILE);
	            this.state = 646;
	            this.match(alefParser.T__1);
	            this.state = 647;
	            this.expr_(0);
	            this.state = 648;
	            this.match(alefParser.T__2);
	            this.state = 649;
	            this.stmnt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 651;
	            this.match(alefParser.DO);
	            this.state = 652;
	            this.stmnt();
	            this.state = 653;
	            this.match(alefParser.WHILE);
	            this.state = 654;
	            this.match(alefParser.T__1);
	            this.state = 655;
	            this.expr_(0);
	            this.state = 656;
	            this.match(alefParser.T__2);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 658;
	            this.match(alefParser.IF);
	            this.state = 659;
	            this.match(alefParser.T__1);
	            this.state = 660;
	            this.expr_(0);
	            this.state = 661;
	            this.match(alefParser.T__2);
	            this.state = 662;
	            this.stmnt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 664;
	            this.match(alefParser.IF);
	            this.state = 665;
	            this.match(alefParser.T__1);
	            this.state = 666;
	            this.expr_(0);
	            this.state = 667;
	            this.match(alefParser.T__2);
	            this.state = 668;
	            this.stmnt();
	            this.state = 669;
	            this.match(alefParser.ELSE);
	            this.state = 670;
	            this.stmnt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 672;
	            this.match(alefParser.PAR);
	            this.state = 673;
	            this.block();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 674;
	            this.match(alefParser.SWITCH);
	            this.state = 675;
	            this.expr_(0);
	            this.state = 676;
	            this.cbody();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 678;
	            this.match(alefParser.TYPEOF);
	            this.state = 679;
	            this.expr_(0);
	            this.state = 680;
	            this.tbody();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 682;
	            this.match(alefParser.CONTINUE);
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CONSTANT) {
	                this.state = 683;
	                this.zconst();
	            }

	            this.state = 686;
	            this.match(alefParser.T__0);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 687;
	            this.match(alefParser.BREAK);
	            this.state = 689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.CONSTANT) {
	                this.state = 688;
	                this.zconst();
	            }

	            this.state = 691;
	            this.match(alefParser.T__0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zconst() {
	    let localctx = new ZconstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, alefParser.RULE_zconst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 694;
	        this.match(alefParser.CONSTANT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zexpr() {
	    let localctx = new ZexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, alefParser.RULE_zexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.expr_(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr_(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 84;
	    this.enterRecursionRule(localctx, 84, alefParser.RULE_expr_, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.castexpr();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 800;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 798;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 701;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 702;
	                    this.match(alefParser.T__10);
	                    this.state = 703;
	                    this.expr_(33);
	                    break;

	                case 2:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 704;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 705;
	                    this.match(alefParser.T__13);
	                    this.state = 706;
	                    this.expr_(32);
	                    break;

	                case 3:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 707;
	                    if (!( this.precpred(this._ctx, 30))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
	                    }
	                    this.state = 708;
	                    this.match(alefParser.T__14);
	                    this.state = 709;
	                    this.expr_(31);
	                    break;

	                case 4:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 710;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 711;
	                    this.match(alefParser.T__15);
	                    this.state = 712;
	                    this.expr_(30);
	                    break;

	                case 5:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 713;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 714;
	                    this.match(alefParser.T__16);
	                    this.state = 715;
	                    this.expr_(29);
	                    break;

	                case 6:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 716;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 717;
	                    this.match(alefParser.T__17);
	                    this.state = 718;
	                    this.expr_(28);
	                    break;

	                case 7:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 719;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 720;
	                    this.match(alefParser.T__18);
	                    this.state = 721;
	                    this.expr_(27);
	                    break;

	                case 8:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 722;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 723;
	                    this.match(alefParser.T__19);
	                    this.state = 724;
	                    this.expr_(26);
	                    break;

	                case 9:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 725;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 726;
	                    this.match(alefParser.T__20);
	                    this.state = 727;
	                    this.expr_(25);
	                    break;

	                case 10:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 728;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 729;
	                    this.match(alefParser.T__21);
	                    this.state = 730;
	                    this.expr_(24);
	                    break;

	                case 11:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 731;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 732;
	                    this.match(alefParser.T__22);
	                    this.state = 733;
	                    this.expr_(23);
	                    break;

	                case 12:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 734;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 735;
	                    this.match(alefParser.T__23);
	                    this.state = 736;
	                    this.expr_(22);
	                    break;

	                case 13:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 737;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 738;
	                    this.match(alefParser.T__24);
	                    this.state = 739;
	                    this.expr_(21);
	                    break;

	                case 14:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 740;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 741;
	                    this.match(alefParser.T__25);
	                    this.state = 742;
	                    this.expr_(20);
	                    break;

	                case 15:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 743;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 744;
	                    this.match(alefParser.T__26);
	                    this.state = 745;
	                    this.expr_(19);
	                    break;

	                case 16:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 746;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 747;
	                    this.match(alefParser.T__27);
	                    this.state = 748;
	                    this.expr_(18);
	                    break;

	                case 17:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 749;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 750;
	                    this.match(alefParser.T__28);
	                    this.state = 751;
	                    this.expr_(17);
	                    break;

	                case 18:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 752;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 753;
	                    this.match(alefParser.T__29);
	                    this.state = 754;
	                    this.expr_(16);
	                    break;

	                case 19:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 755;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 756;
	                    this.match(alefParser.T__9);
	                    this.state = 757;
	                    this.expr_(15);
	                    break;

	                case 20:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 758;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 759;
	                    this.match(alefParser.T__30);
	                    this.state = 760;
	                    this.expr_(14);
	                    break;

	                case 21:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 761;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 762;
	                    this.match(alefParser.T__31);
	                    this.state = 763;
	                    this.match(alefParser.T__9);
	                    this.state = 764;
	                    this.expr_(13);
	                    break;

	                case 22:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 765;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 766;
	                    this.match(alefParser.T__32);
	                    this.state = 767;
	                    this.expr_(12);
	                    break;

	                case 23:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 768;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 769;
	                    this.match(alefParser.T__33);
	                    this.state = 770;
	                    this.expr_(11);
	                    break;

	                case 24:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 771;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 772;
	                    this.match(alefParser.T__34);
	                    this.state = 773;
	                    this.expr_(10);
	                    break;

	                case 25:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 774;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 775;
	                    this.match(alefParser.T__35);
	                    this.state = 776;
	                    this.expr_(9);
	                    break;

	                case 26:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 777;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 778;
	                    this.match(alefParser.T__36);
	                    this.state = 779;
	                    this.expr_(8);
	                    break;

	                case 27:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 780;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 781;
	                    this.match(alefParser.T__37);
	                    this.state = 782;
	                    this.expr_(7);
	                    break;

	                case 28:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 783;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 784;
	                    this.match(alefParser.T__38);
	                    this.state = 785;
	                    this.expr_(6);
	                    break;

	                case 29:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 786;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 787;
	                    this.match(alefParser.T__39);
	                    this.state = 788;
	                    this.expr_(5);
	                    break;

	                case 30:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 789;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 790;
	                    this.match(alefParser.T__40);
	                    this.state = 791;
	                    this.expr_(4);
	                    break;

	                case 31:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 792;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 793;
	                    this.match(alefParser.T__41);
	                    this.state = 794;
	                    this.expr_(3);
	                    break;

	                case 32:
	                    localctx = new Expr_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_expr_);
	                    this.state = 795;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 796;
	                    this.match(alefParser.T__42);
	                    this.state = 797;
	                    this.expr_(2);
	                    break;

	                } 
	            }
	            this.state = 802;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	castexpr() {
	    let localctx = new CastexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, alefParser.RULE_castexpr);
	    try {
	        this.state = 815;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 803;
	            this.monexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 804;
	            this.match(alefParser.T__1);
	            this.state = 805;
	            this.typecast();
	            this.state = 806;
	            this.match(alefParser.T__2);
	            this.state = 807;
	            this.castexpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 809;
	            this.match(alefParser.T__1);
	            this.state = 810;
	            this.match(alefParser.ALLOC);
	            this.state = 811;
	            this.typecast();
	            this.state = 812;
	            this.match(alefParser.T__2);
	            this.state = 813;
	            this.castexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typecast() {
	    let localctx = new TypecastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, alefParser.RULE_typecast);
	    var _la = 0; // Token type
	    try {
	        this.state = 833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 817;
	            this.xtname();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 818;
	            this.xtname();
	            this.state = 819;
	            this.indsp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 821;
	            this.xtname();
	            this.state = 822;
	            this.match(alefParser.T__1);
	            this.state = 823;
	            this.indsp();
	            this.state = 824;
	            this.match(alefParser.T__2);
	            this.state = 825;
	            this.match(alefParser.T__1);
	            this.state = 827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__3) | (1 << alefParser.T__8) | (1 << alefParser.T__10))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (alefParser.BYTE - 56)) | (1 << (alefParser.CHAN - 56)) | (1 << (alefParser.FLOAT - 56)) | (1 << (alefParser.INT - 56)) | (1 << (alefParser.SINT - 56)) | (1 << (alefParser.TUPLE - 56)) | (1 << (alefParser.UINT - 56)))) !== 0) || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (alefParser.USINT - 90)) | (1 << (alefParser.VOID - 90)) | (1 << (alefParser.IDENTIFIER - 90)))) !== 0)) {
	                this.state = 826;
	                this.arglist();
	            }

	            this.state = 829;
	            this.match(alefParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 831;
	            this.match(alefParser.TUPLE);
	            this.state = 832;
	            this.tname();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	monexpr() {
	    let localctx = new MonexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, alefParser.RULE_monexpr);
	    try {
	        this.state = 860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.term_(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.match(alefParser.T__10);
	            this.state = 837;
	            this.castexpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 838;
	            this.match(alefParser.T__25);
	            this.state = 839;
	            this.castexpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 840;
	            this.match(alefParser.T__15);
	            this.state = 841;
	            this.castexpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 842;
	            this.match(alefParser.T__16);
	            this.state = 843;
	            this.castexpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 844;
	            this.match(alefParser.T__43);
	            this.state = 845;
	            this.castexpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 846;
	            this.match(alefParser.ZEROX);
	            this.state = 847;
	            this.castexpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 848;
	            this.match(alefParser.T__44);
	            this.state = 849;
	            this.castexpr();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 850;
	            this.match(alefParser.T__11);
	            this.state = 851;
	            this.castexpr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 852;
	            this.match(alefParser.T__45);
	            this.state = 853;
	            this.castexpr();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 854;
	            this.match(alefParser.SIZEOF);
	            this.state = 855;
	            this.monexpr();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 856;
	            this.match(alefParser.T__31);
	            this.state = 857;
	            this.castexpr();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 858;
	            this.match(alefParser.T__46);
	            this.state = 859;
	            this.castexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ztelist() {
	    let localctx = new ZtelistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, alefParser.RULE_ztelist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.telist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	telist() {
	    let localctx = new TelistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, alefParser.RULE_telist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.tcomp();
	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===alefParser.T__8) {
	            this.state = 865;
	            this.match(alefParser.T__8);
	            this.state = 866;
	            this.tcomp();
	            this.state = 871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcomp() {
	    let localctx = new TcompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, alefParser.RULE_tcomp);
	    var _la = 0; // Token type
	    try {
	        this.state = 878;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case alefParser.T__1:
	        case alefParser.T__3:
	        case alefParser.T__10:
	        case alefParser.T__11:
	        case alefParser.T__15:
	        case alefParser.T__16:
	        case alefParser.T__25:
	        case alefParser.T__31:
	        case alefParser.T__43:
	        case alefParser.T__44:
	        case alefParser.T__45:
	        case alefParser.T__46:
	        case alefParser.T__48:
	        case alefParser.NIL:
	        case alefParser.SIZEOF:
	        case alefParser.ZEROX:
	        case alefParser.IDENTIFIER:
	        case alefParser.STRING_CONST:
	        case alefParser.CONSTANT:
	        case alefParser.ARITHMETIC_CONST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 872;
	            this.expr_(0);
	            break;
	        case alefParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 873;
	            this.match(alefParser.T__4);
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__4) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                this.state = 874;
	                this.ztelist();
	            }

	            this.state = 877;
	            this.match(alefParser.T__5);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	term_(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Term_Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 98;
	    this.enterRecursionRule(localctx, 98, alefParser.RULE_term_, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 881;
	            this.match(alefParser.T__1);
	            this.state = 882;
	            this.telist();
	            this.state = 883;
	            this.match(alefParser.T__2);
	            break;

	        case 2:
	            this.state = 885;
	            this.match(alefParser.SIZEOF);
	            this.state = 886;
	            this.match(alefParser.T__1);
	            this.state = 887;
	            this.typecast();
	            this.state = 888;
	            this.match(alefParser.T__2);
	            break;

	        case 3:
	            this.state = 890;
	            this.match(alefParser.T__3);
	            this.state = 891;
	            this.typename();
	            this.state = 892;
	            this.match(alefParser.T__3);
	            this.state = 893;
	            this.stag();
	            break;

	        case 4:
	            this.state = 895;
	            this.name();
	            break;

	        case 5:
	            this.state = 896;
	            this.match(alefParser.T__3);
	            this.state = 897;
	            this.match(alefParser.T__3);
	            this.state = 898;
	            this.match(alefParser.T__3);
	            break;

	        case 6:
	            this.state = 899;
	            this.match(alefParser.ARITHMETIC_CONST);
	            break;

	        case 7:
	            this.state = 900;
	            this.match(alefParser.NIL);
	            break;

	        case 8:
	            this.state = 901;
	            this.match(alefParser.CONSTANT);
	            break;

	        case 9:
	            this.state = 902;
	            this.enum_member();
	            break;

	        case 10:
	            this.state = 903;
	            this.match(alefParser.STRING_CONST);
	            break;

	        case 11:
	            this.state = 904;
	            this.match(alefParser.T__48);
	            this.state = 905;
	            this.match(alefParser.STRING_CONST);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 933;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 931;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 908;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 909;
	                    this.match(alefParser.T__1);
	                    this.state = 911;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << alefParser.T__1) | (1 << alefParser.T__3) | (1 << alefParser.T__10) | (1 << alefParser.T__11) | (1 << alefParser.T__15) | (1 << alefParser.T__16) | (1 << alefParser.T__25))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (alefParser.T__31 - 32)) | (1 << (alefParser.T__43 - 32)) | (1 << (alefParser.T__44 - 32)) | (1 << (alefParser.T__45 - 32)) | (1 << (alefParser.T__46 - 32)) | (1 << (alefParser.T__48 - 32)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (alefParser.NIL - 73)) | (1 << (alefParser.SIZEOF - 73)) | (1 << (alefParser.ZEROX - 73)) | (1 << (alefParser.IDENTIFIER - 73)) | (1 << (alefParser.STRING_CONST - 73)) | (1 << (alefParser.CONSTANT - 73)) | (1 << (alefParser.ARITHMETIC_CONST - 73)))) !== 0)) {
	                        this.state = 910;
	                        this.zarlist();
	                    }

	                    this.state = 913;
	                    this.match(alefParser.T__2);
	                    break;

	                case 2:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 914;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 915;
	                    this.match(alefParser.T__6);
	                    this.state = 916;
	                    this.expr_(0);
	                    this.state = 917;
	                    this.match(alefParser.T__7);
	                    break;

	                case 3:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 919;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 920;
	                    this.match(alefParser.T__3);
	                    this.state = 921;
	                    this.stag();
	                    break;

	                case 4:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 922;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 923;
	                    this.match(alefParser.T__47);
	                    this.state = 924;
	                    this.stag();
	                    break;

	                case 5:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 925;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 926;
	                    this.match(alefParser.T__43);
	                    break;

	                case 6:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 927;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 928;
	                    this.match(alefParser.T__44);
	                    break;

	                case 7:
	                    localctx = new Term_Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_term_);
	                    this.state = 929;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 930;
	                    this.match(alefParser.T__46);
	                    break;

	                } 
	            }
	            this.state = 935;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	stag() {
	    let localctx = new StagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, alefParser.RULE_stag);
	    try {
	        this.state = 938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 936;
	            this.match(alefParser.IDENTIFIER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 937;
	            this.typename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zarlist() {
	    let localctx = new ZarlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, alefParser.RULE_zarlist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        this.elist(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	elist(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ElistContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 104;
	    this.enterRecursionRule(localctx, 104, alefParser.RULE_elist, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.expr_(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ElistContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, alefParser.RULE_elist);
	                this.state = 945;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 946;
	                this.match(alefParser.T__8);
	                this.state = 947;
	                this.expr_(0); 
	            }
	            this.state = 952;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tlist() {
	    let localctx = new TlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, alefParser.RULE_tlist);
	    try {
	        this.state = 958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 953;
	            this.typecast();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 954;
	            this.typecast();
	            this.state = 955;
	            this.match(alefParser.T__8);
	            this.state = 956;
	            this.tlist();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tname() {
	    let localctx = new TnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, alefParser.RULE_tname);
	    var _la = 0; // Token type
	    try {
	        this.state = 979;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (alefParser.EXTERN - 65)) | (1 << (alefParser.INTERN - 65)) | (1 << (alefParser.PRIVATE - 65)))) !== 0)) {
	                this.state = 960;
	                this.sclass();
	            }

	            this.state = 963;
	            this.xtname();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (alefParser.EXTERN - 65)) | (1 << (alefParser.INTERN - 65)) | (1 << (alefParser.PRIVATE - 65)))) !== 0)) {
	                this.state = 964;
	                this.sclass();
	            }

	            this.state = 967;
	            this.match(alefParser.TUPLE);
	            this.state = 968;
	            this.match(alefParser.T__1);
	            this.state = 969;
	            this.tlist();
	            this.state = 970;
	            this.match(alefParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (alefParser.EXTERN - 65)) | (1 << (alefParser.INTERN - 65)) | (1 << (alefParser.PRIVATE - 65)))) !== 0)) {
	                this.state = 972;
	                this.sclass();
	            }

	            this.state = 975;
	            this.match(alefParser.T__1);
	            this.state = 976;
	            this.tlist();
	            this.state = 977;
	            this.match(alefParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant() {
	    let localctx = new VariantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, alefParser.RULE_variant);
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 981;
	            this.typecast();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 982;
	            this.typecast();
	            this.state = 983;
	            this.match(alefParser.T__8);
	            this.state = 984;
	            this.variant();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xtname() {
	    let localctx = new XtnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, alefParser.RULE_xtname);
	    var _la = 0; // Token type
	    try {
	        this.state = 1008;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.match(alefParser.INT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.match(alefParser.UINT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 990;
	            this.match(alefParser.SINT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 991;
	            this.match(alefParser.USINT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 992;
	            this.match(alefParser.BYTE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 993;
	            this.match(alefParser.FLOAT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 994;
	            this.match(alefParser.VOID);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 995;
	            this.typename();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 996;
	            this.typename();
	            this.state = 997;
	            this.match(alefParser.T__6);
	            this.state = 998;
	            this.variant();
	            this.state = 999;
	            this.match(alefParser.T__7);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1001;
	            this.match(alefParser.CHAN);
	            this.state = 1002;
	            this.match(alefParser.T__1);
	            this.state = 1003;
	            this.variant();
	            this.state = 1004;
	            this.match(alefParser.T__2);
	            this.state = 1006;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===alefParser.T__6) {
	                this.state = 1005;
	                this.bufdim();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bufdim() {
	    let localctx = new BufdimContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, alefParser.RULE_bufdim);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1010;
	        this.match(alefParser.T__6);
	        this.state = 1011;
	        this.expr_(0);
	        this.state = 1012;
	        this.match(alefParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sclass() {
	    let localctx = new SclassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, alefParser.RULE_sclass);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (alefParser.EXTERN - 65)) | (1 << (alefParser.INTERN - 65)) | (1 << (alefParser.PRIVATE - 65)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typename() {
	    let localctx = new TypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, alefParser.RULE_typename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        this.match(alefParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_member() {
	    let localctx = new Enum_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, alefParser.RULE_enum_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        this.match(alefParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

alefParser.EOF = antlr4.Token.EOF;
alefParser.T__0 = 1;
alefParser.T__1 = 2;
alefParser.T__2 = 3;
alefParser.T__3 = 4;
alefParser.T__4 = 5;
alefParser.T__5 = 6;
alefParser.T__6 = 7;
alefParser.T__7 = 8;
alefParser.T__8 = 9;
alefParser.T__9 = 10;
alefParser.T__10 = 11;
alefParser.T__11 = 12;
alefParser.T__12 = 13;
alefParser.T__13 = 14;
alefParser.T__14 = 15;
alefParser.T__15 = 16;
alefParser.T__16 = 17;
alefParser.T__17 = 18;
alefParser.T__18 = 19;
alefParser.T__19 = 20;
alefParser.T__20 = 21;
alefParser.T__21 = 22;
alefParser.T__22 = 23;
alefParser.T__23 = 24;
alefParser.T__24 = 25;
alefParser.T__25 = 26;
alefParser.T__26 = 27;
alefParser.T__27 = 28;
alefParser.T__28 = 29;
alefParser.T__29 = 30;
alefParser.T__30 = 31;
alefParser.T__31 = 32;
alefParser.T__32 = 33;
alefParser.T__33 = 34;
alefParser.T__34 = 35;
alefParser.T__35 = 36;
alefParser.T__36 = 37;
alefParser.T__37 = 38;
alefParser.T__38 = 39;
alefParser.T__39 = 40;
alefParser.T__40 = 41;
alefParser.T__41 = 42;
alefParser.T__42 = 43;
alefParser.T__43 = 44;
alefParser.T__44 = 45;
alefParser.T__45 = 46;
alefParser.T__46 = 47;
alefParser.T__47 = 48;
alefParser.T__48 = 49;
alefParser.ADT = 50;
alefParser.AGGR = 51;
alefParser.ALLOC = 52;
alefParser.ALT = 53;
alefParser.BECOME = 54;
alefParser.BREAK = 55;
alefParser.BYTE = 56;
alefParser.CASE = 57;
alefParser.CHAN = 58;
alefParser.CHECK = 59;
alefParser.CONTINUE = 60;
alefParser.DEFAULT = 61;
alefParser.DO = 62;
alefParser.ELSE = 63;
alefParser.ENUM = 64;
alefParser.EXTERN = 65;
alefParser.FLOAT = 66;
alefParser.FOR = 67;
alefParser.GOTO = 68;
alefParser.IF = 69;
alefParser.INT = 70;
alefParser.INTERN = 71;
alefParser.LINT = 72;
alefParser.NIL = 73;
alefParser.PAR = 74;
alefParser.PROC = 75;
alefParser.RAISE = 76;
alefParser.RESCUE = 77;
alefParser.RETURN = 78;
alefParser.SINT = 79;
alefParser.SIZEOF = 80;
alefParser.SWITCH = 81;
alefParser.TASK = 82;
alefParser.TUPLE = 83;
alefParser.TYPEDEF = 84;
alefParser.TYPEOF = 85;
alefParser.UINT = 86;
alefParser.ULINT = 87;
alefParser.UNALLOC = 88;
alefParser.UNION = 89;
alefParser.USINT = 90;
alefParser.VOID = 91;
alefParser.WHILE = 92;
alefParser.ZEROX = 93;
alefParser.PRIVATE = 94;
alefParser.IDENTIFIER = 95;
alefParser.STRING_CONST = 96;
alefParser.CONSTANT = 97;
alefParser.ARITHMETIC_CONST = 98;
alefParser.WS = 99;

alefParser.RULE_program = 0;
alefParser.RULE_decllist = 1;
alefParser.RULE_decl = 2;
alefParser.RULE_zargs = 3;
alefParser.RULE_ztname = 4;
alefParser.RULE_adtfunc = 5;
alefParser.RULE_typespec = 6;
alefParser.RULE_ztag = 7;
alefParser.RULE_zpolytype = 8;
alefParser.RULE_polytype = 9;
alefParser.RULE_setlist = 10;
alefParser.RULE_sname = 11;
alefParser.RULE_name = 12;
alefParser.RULE_memberlist = 13;
alefParser.RULE_vardecllist = 14;
alefParser.RULE_ivardecl = 15;
alefParser.RULE_zinit = 16;
alefParser.RULE_zelist = 17;
alefParser.RULE_vardecl = 18;
alefParser.RULE_arrayspec = 19;
alefParser.RULE_indsp = 20;
alefParser.RULE_arglist = 21;
alefParser.RULE_arglistp = 22;
alefParser.RULE_arg = 23;
alefParser.RULE_tuplearg = 24;
alefParser.RULE_autolist = 25;
alefParser.RULE_autodecl = 26;
alefParser.RULE_block = 27;
alefParser.RULE_slist = 28;
alefParser.RULE_tbody = 29;
alefParser.RULE_ctlist = 30;
alefParser.RULE_tcase = 31;
alefParser.RULE_cbody = 32;
alefParser.RULE_clist = 33;
alefParser.RULE_case_ = 34;
alefParser.RULE_rbody = 35;
alefParser.RULE_zlab = 36;
alefParser.RULE_stmnt = 37;
alefParser.RULE_info = 38;
alefParser.RULE_nlstmnt = 39;
alefParser.RULE_zconst = 40;
alefParser.RULE_zexpr = 41;
alefParser.RULE_expr_ = 42;
alefParser.RULE_castexpr = 43;
alefParser.RULE_typecast = 44;
alefParser.RULE_monexpr = 45;
alefParser.RULE_ztelist = 46;
alefParser.RULE_telist = 47;
alefParser.RULE_tcomp = 48;
alefParser.RULE_term_ = 49;
alefParser.RULE_stag = 50;
alefParser.RULE_zarlist = 51;
alefParser.RULE_elist = 52;
alefParser.RULE_tlist = 53;
alefParser.RULE_tname = 54;
alefParser.RULE_variant = 55;
alefParser.RULE_xtname = 56;
alefParser.RULE_bufdim = 57;
alefParser.RULE_sclass = 58;
alefParser.RULE_typename = 59;
alefParser.RULE_enum_member = 60;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_program;
    }

	decllist() {
	    return this.getTypedRuleContext(DecllistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitProgram(this);
		}
	}


}



class DecllistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_decllist;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterDecllist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitDecllist(this);
		}
	}


}



class DeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_decl;
    }

	tname() {
	    return this.getTypedRuleContext(TnameContext,0);
	};

	vardecllist() {
	    return this.getTypedRuleContext(VardecllistContext,0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	adtfunc() {
	    return this.getTypedRuleContext(AdtfuncContext,0);
	};

	typespec() {
	    return this.getTypedRuleContext(TypespecContext,0);
	};

	TYPEDEF() {
	    return this.getToken(alefParser.TYPEDEF, 0);
	};

	ztname() {
	    return this.getTypedRuleContext(ZtnameContext,0);
	};

	zargs() {
	    return this.getTypedRuleContext(ZargsContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitDecl(this);
		}
	}


}



class ZargsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zargs;
    }

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZargs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZargs(this);
		}
	}


}



class ZtnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_ztname;
    }

	tname() {
	    return this.getTypedRuleContext(TnameContext,0);
	};

	AGGR() {
	    return this.getToken(alefParser.AGGR, 0);
	};

	ADT() {
	    return this.getToken(alefParser.ADT, 0);
	};

	UNION() {
	    return this.getToken(alefParser.UNION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZtname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZtname(this);
		}
	}


}



class AdtfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_adtfunc;
    }

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	indsp() {
	    return this.getTypedRuleContext(IndspContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterAdtfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitAdtfunc(this);
		}
	}


}



class TypespecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_typespec;
    }

	AGGR() {
	    return this.getToken(alefParser.AGGR, 0);
	};

	memberlist() {
	    return this.getTypedRuleContext(MemberlistContext,0);
	};

	ztag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ZtagContext);
	    } else {
	        return this.getTypedRuleContext(ZtagContext,i);
	    }
	};

	UNION() {
	    return this.getToken(alefParser.UNION, 0);
	};

	ADT() {
	    return this.getToken(alefParser.ADT, 0);
	};

	zpolytype() {
	    return this.getTypedRuleContext(ZpolytypeContext,0);
	};

	ENUM() {
	    return this.getToken(alefParser.ENUM, 0);
	};

	setlist() {
	    return this.getTypedRuleContext(SetlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTypespec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTypespec(this);
		}
	}


}



class ZtagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_ztag;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZtag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZtag(this);
		}
	}


}



class ZpolytypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zpolytype;
    }

	polytype() {
	    return this.getTypedRuleContext(PolytypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZpolytype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZpolytype(this);
		}
	}


}



class PolytypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_polytype;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	polytype() {
	    return this.getTypedRuleContext(PolytypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterPolytype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitPolytype(this);
		}
	}


}



class SetlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_setlist;
    }

	sname() {
	    return this.getTypedRuleContext(SnameContext,0);
	};

	setlist = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetlistContext);
	    } else {
	        return this.getTypedRuleContext(SetlistContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterSetlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitSetlist(this);
		}
	}


}



class SnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_sname;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterSname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitSname(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_name;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitName(this);
		}
	}


}



class MemberlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_memberlist;
    }

	decl() {
	    return this.getTypedRuleContext(DeclContext,0);
	};

	memberlist() {
	    return this.getTypedRuleContext(MemberlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterMemberlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitMemberlist(this);
		}
	}


}



class VardecllistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_vardecllist;
    }

	ivardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IvardeclContext);
	    } else {
	        return this.getTypedRuleContext(IvardeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterVardecllist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitVardecllist(this);
		}
	}


}



class IvardeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_ivardecl;
    }

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	zinit() {
	    return this.getTypedRuleContext(ZinitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterIvardecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitIvardecl(this);
		}
	}


}



class ZinitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zinit;
    }

	zelist() {
	    return this.getTypedRuleContext(ZelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZinit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZinit(this);
		}
	}


}



class ZelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zelist;
    }

	zexpr() {
	    return this.getTypedRuleContext(ZexprContext,0);
	};

	expr_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_Context);
	    } else {
	        return this.getTypedRuleContext(Expr_Context,i);
	    }
	};

	stag() {
	    return this.getTypedRuleContext(StagContext,0);
	};

	zelist = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ZelistContext);
	    } else {
	        return this.getTypedRuleContext(ZelistContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZelist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZelist(this);
		}
	}


}



class VardeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_vardecl;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	arrayspec() {
	    return this.getTypedRuleContext(ArrayspecContext,0);
	};

	indsp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndspContext);
	    } else {
	        return this.getTypedRuleContext(IndspContext,i);
	    }
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterVardecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitVardecl(this);
		}
	}


}



class ArrayspecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_arrayspec;
    }

	zexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ZexprContext);
	    } else {
	        return this.getTypedRuleContext(ZexprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterArrayspec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitArrayspec(this);
		}
	}


}



class IndspContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_indsp;
    }


	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterIndsp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitIndsp(this);
		}
	}


}



class ArglistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_arglist;
    }

	arg() {
	    return this.getTypedRuleContext(ArgContext,0);
	};

	arglistp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArglistpContext);
	    } else {
	        return this.getTypedRuleContext(ArglistpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterArglist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitArglist(this);
		}
	}


}



class ArglistpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_arglistp;
    }

	arg() {
	    return this.getTypedRuleContext(ArgContext,0);
	};

	xtname() {
	    return this.getTypedRuleContext(XtnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterArglistp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitArglistp(this);
		}
	}


}



class ArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_arg;
    }

	xtname() {
	    return this.getTypedRuleContext(XtnameContext,0);
	};

	indsp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndspContext);
	    } else {
	        return this.getTypedRuleContext(IndspContext,i);
	    }
	};

	arrayspec() {
	    return this.getTypedRuleContext(ArrayspecContext,0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	TUPLE() {
	    return this.getToken(alefParser.TUPLE, 0);
	};

	tuplearg() {
	    return this.getTypedRuleContext(TupleargContext,0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitArg(this);
		}
	}


}



class TupleargContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tuplearg;
    }

	tname() {
	    return this.getTypedRuleContext(TnameContext,0);
	};

	indsp() {
	    return this.getTypedRuleContext(IndspContext,0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTuplearg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTuplearg(this);
		}
	}


}



class AutolistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_autolist;
    }

	autodecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AutodeclContext);
	    } else {
	        return this.getTypedRuleContext(AutodeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterAutolist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitAutolist(this);
		}
	}


}



class AutodeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_autodecl;
    }

	xtname() {
	    return this.getTypedRuleContext(XtnameContext,0);
	};

	vardecllist() {
	    return this.getTypedRuleContext(VardecllistContext,0);
	};

	TUPLE() {
	    return this.getToken(alefParser.TUPLE, 0);
	};

	tname() {
	    return this.getTypedRuleContext(TnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterAutodecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitAutodecl(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_block;
    }

	autolist() {
	    return this.getTypedRuleContext(AutolistContext,0);
	};

	slist() {
	    return this.getTypedRuleContext(SlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitBlock(this);
		}
	}


}



class SlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_slist;
    }

	stmnt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmntContext);
	    } else {
	        return this.getTypedRuleContext(StmntContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterSlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitSlist(this);
		}
	}


}



class TbodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tbody;
    }

	ctlist() {
	    return this.getTypedRuleContext(CtlistContext,0);
	};

	clist() {
	    return this.getTypedRuleContext(ClistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTbody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTbody(this);
		}
	}


}



class CtlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_ctlist;
    }

	tcase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TcaseContext);
	    } else {
	        return this.getTypedRuleContext(TcaseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterCtlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitCtlist(this);
		}
	}


}



class TcaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tcase;
    }

	CASE() {
	    return this.getToken(alefParser.CASE, 0);
	};

	typecast() {
	    return this.getTypedRuleContext(TypecastContext,0);
	};

	slist() {
	    return this.getTypedRuleContext(SlistContext,0);
	};

	DEFAULT() {
	    return this.getToken(alefParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTcase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTcase(this);
		}
	}


}



class CbodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_cbody;
    }

	clist() {
	    return this.getTypedRuleContext(ClistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterCbody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitCbody(this);
		}
	}


}



class ClistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_clist;
    }

	case_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_Context);
	    } else {
	        return this.getTypedRuleContext(Case_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterClist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitClist(this);
		}
	}


}



class Case_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_case_;
    }

	CASE() {
	    return this.getToken(alefParser.CASE, 0);
	};

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	slist() {
	    return this.getTypedRuleContext(SlistContext,0);
	};

	DEFAULT() {
	    return this.getToken(alefParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterCase_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitCase_(this);
		}
	}


}



class RbodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_rbody;
    }

	stmnt() {
	    return this.getTypedRuleContext(StmntContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterRbody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitRbody(this);
		}
	}


}



class ZlabContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zlab;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZlab(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZlab(this);
		}
	}


}



class StmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_stmnt;
    }

	nlstmnt() {
	    return this.getTypedRuleContext(NlstmntContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	stmnt() {
	    return this.getTypedRuleContext(StmntContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterStmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitStmnt(this);
		}
	}


}



class InfoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_info;
    }

	STRING_CONST() {
	    return this.getToken(alefParser.STRING_CONST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitInfo(this);
		}
	}


}



class NlstmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_nlstmnt;
    }

	zexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ZexprContext);
	    } else {
	        return this.getTypedRuleContext(ZexprContext,i);
	    }
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	CHECK() {
	    return this.getToken(alefParser.CHECK, 0);
	};

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	info() {
	    return this.getTypedRuleContext(InfoContext,0);
	};

	ALLOC() {
	    return this.getToken(alefParser.ALLOC, 0);
	};

	elist() {
	    return this.getTypedRuleContext(ElistContext,0);
	};

	UNALLOC() {
	    return this.getToken(alefParser.UNALLOC, 0);
	};

	RESCUE() {
	    return this.getToken(alefParser.RESCUE, 0);
	};

	rbody() {
	    return this.getTypedRuleContext(RbodyContext,0);
	};

	RAISE() {
	    return this.getToken(alefParser.RAISE, 0);
	};

	zlab() {
	    return this.getTypedRuleContext(ZlabContext,0);
	};

	GOTO() {
	    return this.getToken(alefParser.GOTO, 0);
	};

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	PROC() {
	    return this.getToken(alefParser.PROC, 0);
	};

	TASK() {
	    return this.getToken(alefParser.TASK, 0);
	};

	BECOME() {
	    return this.getToken(alefParser.BECOME, 0);
	};

	ALT() {
	    return this.getToken(alefParser.ALT, 0);
	};

	cbody() {
	    return this.getTypedRuleContext(CbodyContext,0);
	};

	RETURN() {
	    return this.getToken(alefParser.RETURN, 0);
	};

	FOR() {
	    return this.getToken(alefParser.FOR, 0);
	};

	stmnt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmntContext);
	    } else {
	        return this.getTypedRuleContext(StmntContext,i);
	    }
	};

	WHILE() {
	    return this.getToken(alefParser.WHILE, 0);
	};

	DO() {
	    return this.getToken(alefParser.DO, 0);
	};

	IF() {
	    return this.getToken(alefParser.IF, 0);
	};

	ELSE() {
	    return this.getToken(alefParser.ELSE, 0);
	};

	PAR() {
	    return this.getToken(alefParser.PAR, 0);
	};

	SWITCH() {
	    return this.getToken(alefParser.SWITCH, 0);
	};

	TYPEOF() {
	    return this.getToken(alefParser.TYPEOF, 0);
	};

	tbody() {
	    return this.getTypedRuleContext(TbodyContext,0);
	};

	CONTINUE() {
	    return this.getToken(alefParser.CONTINUE, 0);
	};

	zconst() {
	    return this.getTypedRuleContext(ZconstContext,0);
	};

	BREAK() {
	    return this.getToken(alefParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterNlstmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitNlstmnt(this);
		}
	}


}



class ZconstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zconst;
    }

	CONSTANT() {
	    return this.getToken(alefParser.CONSTANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZconst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZconst(this);
		}
	}


}



class ZexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zexpr;
    }

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZexpr(this);
		}
	}


}



class Expr_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_expr_;
    }

	castexpr() {
	    return this.getTypedRuleContext(CastexprContext,0);
	};

	expr_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_Context);
	    } else {
	        return this.getTypedRuleContext(Expr_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterExpr_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitExpr_(this);
		}
	}


}



class CastexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_castexpr;
    }

	monexpr() {
	    return this.getTypedRuleContext(MonexprContext,0);
	};

	typecast() {
	    return this.getTypedRuleContext(TypecastContext,0);
	};

	castexpr() {
	    return this.getTypedRuleContext(CastexprContext,0);
	};

	ALLOC() {
	    return this.getToken(alefParser.ALLOC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterCastexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitCastexpr(this);
		}
	}


}



class TypecastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_typecast;
    }

	xtname() {
	    return this.getTypedRuleContext(XtnameContext,0);
	};

	indsp() {
	    return this.getTypedRuleContext(IndspContext,0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	TUPLE() {
	    return this.getToken(alefParser.TUPLE, 0);
	};

	tname() {
	    return this.getTypedRuleContext(TnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTypecast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTypecast(this);
		}
	}


}



class MonexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_monexpr;
    }

	term_() {
	    return this.getTypedRuleContext(Term_Context,0);
	};

	castexpr() {
	    return this.getTypedRuleContext(CastexprContext,0);
	};

	ZEROX() {
	    return this.getToken(alefParser.ZEROX, 0);
	};

	SIZEOF() {
	    return this.getToken(alefParser.SIZEOF, 0);
	};

	monexpr() {
	    return this.getTypedRuleContext(MonexprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterMonexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitMonexpr(this);
		}
	}


}



class ZtelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_ztelist;
    }

	telist() {
	    return this.getTypedRuleContext(TelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZtelist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZtelist(this);
		}
	}


}



class TelistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_telist;
    }

	tcomp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TcompContext);
	    } else {
	        return this.getTypedRuleContext(TcompContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTelist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTelist(this);
		}
	}


}



class TcompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tcomp;
    }

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	ztelist() {
	    return this.getTypedRuleContext(ZtelistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTcomp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTcomp(this);
		}
	}


}



class Term_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_term_;
    }

	telist() {
	    return this.getTypedRuleContext(TelistContext,0);
	};

	SIZEOF() {
	    return this.getToken(alefParser.SIZEOF, 0);
	};

	typecast() {
	    return this.getTypedRuleContext(TypecastContext,0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	stag() {
	    return this.getTypedRuleContext(StagContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ARITHMETIC_CONST() {
	    return this.getToken(alefParser.ARITHMETIC_CONST, 0);
	};

	NIL() {
	    return this.getToken(alefParser.NIL, 0);
	};

	CONSTANT() {
	    return this.getToken(alefParser.CONSTANT, 0);
	};

	enum_member() {
	    return this.getTypedRuleContext(Enum_memberContext,0);
	};

	STRING_CONST() {
	    return this.getToken(alefParser.STRING_CONST, 0);
	};

	term_() {
	    return this.getTypedRuleContext(Term_Context,0);
	};

	zarlist() {
	    return this.getTypedRuleContext(ZarlistContext,0);
	};

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTerm_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTerm_(this);
		}
	}


}



class StagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_stag;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterStag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitStag(this);
		}
	}


}



class ZarlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_zarlist;
    }

	elist() {
	    return this.getTypedRuleContext(ElistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterZarlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitZarlist(this);
		}
	}


}



class ElistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_elist;
    }

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	elist() {
	    return this.getTypedRuleContext(ElistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterElist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitElist(this);
		}
	}


}



class TlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tlist;
    }

	typecast() {
	    return this.getTypedRuleContext(TypecastContext,0);
	};

	tlist() {
	    return this.getTypedRuleContext(TlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTlist(this);
		}
	}


}



class TnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_tname;
    }

	xtname() {
	    return this.getTypedRuleContext(XtnameContext,0);
	};

	sclass() {
	    return this.getTypedRuleContext(SclassContext,0);
	};

	TUPLE() {
	    return this.getToken(alefParser.TUPLE, 0);
	};

	tlist() {
	    return this.getTypedRuleContext(TlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTname(this);
		}
	}


}



class VariantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_variant;
    }

	typecast() {
	    return this.getTypedRuleContext(TypecastContext,0);
	};

	variant() {
	    return this.getTypedRuleContext(VariantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterVariant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitVariant(this);
		}
	}


}



class XtnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_xtname;
    }

	INT() {
	    return this.getToken(alefParser.INT, 0);
	};

	UINT() {
	    return this.getToken(alefParser.UINT, 0);
	};

	SINT() {
	    return this.getToken(alefParser.SINT, 0);
	};

	USINT() {
	    return this.getToken(alefParser.USINT, 0);
	};

	BYTE() {
	    return this.getToken(alefParser.BYTE, 0);
	};

	FLOAT() {
	    return this.getToken(alefParser.FLOAT, 0);
	};

	VOID() {
	    return this.getToken(alefParser.VOID, 0);
	};

	typename() {
	    return this.getTypedRuleContext(TypenameContext,0);
	};

	variant() {
	    return this.getTypedRuleContext(VariantContext,0);
	};

	CHAN() {
	    return this.getToken(alefParser.CHAN, 0);
	};

	bufdim() {
	    return this.getTypedRuleContext(BufdimContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterXtname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitXtname(this);
		}
	}


}



class BufdimContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_bufdim;
    }

	expr_() {
	    return this.getTypedRuleContext(Expr_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterBufdim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitBufdim(this);
		}
	}


}



class SclassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_sclass;
    }

	EXTERN() {
	    return this.getToken(alefParser.EXTERN, 0);
	};

	INTERN() {
	    return this.getToken(alefParser.INTERN, 0);
	};

	PRIVATE() {
	    return this.getToken(alefParser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterSclass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitSclass(this);
		}
	}


}



class TypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_typename;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterTypename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitTypename(this);
		}
	}


}



class Enum_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = alefParser.RULE_enum_member;
    }

	IDENTIFIER() {
	    return this.getToken(alefParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.enterEnum_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof alefListener ) {
	        listener.exitEnum_member(this);
		}
	}


}




alefParser.ProgramContext = ProgramContext; 
alefParser.DecllistContext = DecllistContext; 
alefParser.DeclContext = DeclContext; 
alefParser.ZargsContext = ZargsContext; 
alefParser.ZtnameContext = ZtnameContext; 
alefParser.AdtfuncContext = AdtfuncContext; 
alefParser.TypespecContext = TypespecContext; 
alefParser.ZtagContext = ZtagContext; 
alefParser.ZpolytypeContext = ZpolytypeContext; 
alefParser.PolytypeContext = PolytypeContext; 
alefParser.SetlistContext = SetlistContext; 
alefParser.SnameContext = SnameContext; 
alefParser.NameContext = NameContext; 
alefParser.MemberlistContext = MemberlistContext; 
alefParser.VardecllistContext = VardecllistContext; 
alefParser.IvardeclContext = IvardeclContext; 
alefParser.ZinitContext = ZinitContext; 
alefParser.ZelistContext = ZelistContext; 
alefParser.VardeclContext = VardeclContext; 
alefParser.ArrayspecContext = ArrayspecContext; 
alefParser.IndspContext = IndspContext; 
alefParser.ArglistContext = ArglistContext; 
alefParser.ArglistpContext = ArglistpContext; 
alefParser.ArgContext = ArgContext; 
alefParser.TupleargContext = TupleargContext; 
alefParser.AutolistContext = AutolistContext; 
alefParser.AutodeclContext = AutodeclContext; 
alefParser.BlockContext = BlockContext; 
alefParser.SlistContext = SlistContext; 
alefParser.TbodyContext = TbodyContext; 
alefParser.CtlistContext = CtlistContext; 
alefParser.TcaseContext = TcaseContext; 
alefParser.CbodyContext = CbodyContext; 
alefParser.ClistContext = ClistContext; 
alefParser.Case_Context = Case_Context; 
alefParser.RbodyContext = RbodyContext; 
alefParser.ZlabContext = ZlabContext; 
alefParser.StmntContext = StmntContext; 
alefParser.InfoContext = InfoContext; 
alefParser.NlstmntContext = NlstmntContext; 
alefParser.ZconstContext = ZconstContext; 
alefParser.ZexprContext = ZexprContext; 
alefParser.Expr_Context = Expr_Context; 
alefParser.CastexprContext = CastexprContext; 
alefParser.TypecastContext = TypecastContext; 
alefParser.MonexprContext = MonexprContext; 
alefParser.ZtelistContext = ZtelistContext; 
alefParser.TelistContext = TelistContext; 
alefParser.TcompContext = TcompContext; 
alefParser.Term_Context = Term_Context; 
alefParser.StagContext = StagContext; 
alefParser.ZarlistContext = ZarlistContext; 
alefParser.ElistContext = ElistContext; 
alefParser.TlistContext = TlistContext; 
alefParser.TnameContext = TnameContext; 
alefParser.VariantContext = VariantContext; 
alefParser.XtnameContext = XtnameContext; 
alefParser.BufdimContext = BufdimContext; 
alefParser.SclassContext = SclassContext; 
alefParser.TypenameContext = TypenameContext; 
alefParser.Enum_memberContext = Enum_memberContext; 
