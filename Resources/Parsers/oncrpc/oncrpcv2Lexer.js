// Generated from Resources/Parsers/oncrpc/oncrpcv2.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,39,291,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,244,8,33,10,33,12,33,247,9,33,1,33,
1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,257,8,34,10,34,12,34,260,9,34,1,
35,3,35,263,8,35,1,35,4,35,266,8,35,11,35,12,35,267,1,36,1,36,1,36,1,36,
4,36,274,8,36,11,36,12,36,275,1,37,1,37,5,37,280,8,37,10,37,12,37,283,9,
37,1,38,4,38,286,8,38,11,38,12,38,287,1,38,1,38,1,245,0,39,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,7,1,0,49,
55,1,0,48,55,1,0,48,57,3,0,48,57,65,70,97,102,2,0,65,90,97,122,4,0,48,57,
65,90,95,95,97,122,3,0,9,10,13,13,32,32,297,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,87,1,0,0,0,5,89,1,0,
0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,103,1,0,0,0,15,105,1,0,0,
0,17,107,1,0,0,0,19,109,1,0,0,0,21,114,1,0,0,0,23,116,1,0,0,0,25,118,1,0,
0,0,27,120,1,0,0,0,29,122,1,0,0,0,31,129,1,0,0,0,33,136,1,0,0,0,35,138,1,
0,0,0,37,147,1,0,0,0,39,151,1,0,0,0,41,157,1,0,0,0,43,163,1,0,0,0,45,170,
1,0,0,0,47,180,1,0,0,0,49,185,1,0,0,0,51,190,1,0,0,0,53,197,1,0,0,0,55,203,
1,0,0,0,57,210,1,0,0,0,59,218,1,0,0,0,61,220,1,0,0,0,63,225,1,0,0,0,65,231,
1,0,0,0,67,239,1,0,0,0,69,253,1,0,0,0,71,262,1,0,0,0,73,269,1,0,0,0,75,277,
1,0,0,0,77,285,1,0,0,0,79,80,5,112,0,0,80,81,5,114,0,0,81,82,5,111,0,0,82,
83,5,103,0,0,83,84,5,114,0,0,84,85,5,97,0,0,85,86,5,109,0,0,86,2,1,0,0,0,
87,88,5,123,0,0,88,4,1,0,0,0,89,90,5,125,0,0,90,6,1,0,0,0,91,92,5,61,0,0,
92,8,1,0,0,0,93,94,5,59,0,0,94,10,1,0,0,0,95,96,5,118,0,0,96,97,5,101,0,
0,97,98,5,114,0,0,98,99,5,115,0,0,99,100,5,105,0,0,100,101,5,111,0,0,101,
102,5,110,0,0,102,12,1,0,0,0,103,104,5,40,0,0,104,14,1,0,0,0,105,106,5,44,
0,0,106,16,1,0,0,0,107,108,5,41,0,0,108,18,1,0,0,0,109,110,5,118,0,0,110,
111,5,111,0,0,111,112,5,105,0,0,112,113,5,100,0,0,113,20,1,0,0,0,114,115,
5,91,0,0,115,22,1,0,0,0,116,117,5,93,0,0,117,24,1,0,0,0,118,119,5,60,0,0,
119,26,1,0,0,0,120,121,5,62,0,0,121,28,1,0,0,0,122,123,5,111,0,0,123,124,
5,112,0,0,124,125,5,97,0,0,125,126,5,113,0,0,126,127,5,117,0,0,127,128,5,
101,0,0,128,30,1,0,0,0,129,130,5,115,0,0,130,131,5,116,0,0,131,132,5,114,
0,0,132,133,5,105,0,0,133,134,5,110,0,0,134,135,5,103,0,0,135,32,1,0,0,0,
136,137,5,42,0,0,137,34,1,0,0,0,138,139,5,117,0,0,139,140,5,110,0,0,140,
141,5,115,0,0,141,142,5,105,0,0,142,143,5,103,0,0,143,144,5,110,0,0,144,
145,5,101,0,0,145,146,5,100,0,0,146,36,1,0,0,0,147,148,5,105,0,0,148,149,
5,110,0,0,149,150,5,116,0,0,150,38,1,0,0,0,151,152,5,104,0,0,152,153,5,121,
0,0,153,154,5,112,0,0,154,155,5,101,0,0,155,156,5,114,0,0,156,40,1,0,0,0,
157,158,5,102,0,0,158,159,5,108,0,0,159,160,5,111,0,0,160,161,5,97,0,0,161,
162,5,116,0,0,162,42,1,0,0,0,163,164,5,100,0,0,164,165,5,111,0,0,165,166,
5,117,0,0,166,167,5,98,0,0,167,168,5,108,0,0,168,169,5,101,0,0,169,44,1,
0,0,0,170,171,5,113,0,0,171,172,5,117,0,0,172,173,5,97,0,0,173,174,5,100,
0,0,174,175,5,114,0,0,175,176,5,117,0,0,176,177,5,112,0,0,177,178,5,108,
0,0,178,179,5,101,0,0,179,46,1,0,0,0,180,181,5,98,0,0,181,182,5,111,0,0,
182,183,5,111,0,0,183,184,5,108,0,0,184,48,1,0,0,0,185,186,5,101,0,0,186,
187,5,110,0,0,187,188,5,117,0,0,188,189,5,109,0,0,189,50,1,0,0,0,190,191,
5,115,0,0,191,192,5,116,0,0,192,193,5,114,0,0,193,194,5,117,0,0,194,195,
5,99,0,0,195,196,5,116,0,0,196,52,1,0,0,0,197,198,5,117,0,0,198,199,5,110,
0,0,199,200,5,105,0,0,200,201,5,111,0,0,201,202,5,110,0,0,202,54,1,0,0,0,
203,204,5,115,0,0,204,205,5,119,0,0,205,206,5,105,0,0,206,207,5,116,0,0,
207,208,5,99,0,0,208,209,5,104,0,0,209,56,1,0,0,0,210,211,5,100,0,0,211,
212,5,101,0,0,212,213,5,102,0,0,213,214,5,97,0,0,214,215,5,117,0,0,215,216,
5,108,0,0,216,217,5,116,0,0,217,58,1,0,0,0,218,219,5,58,0,0,219,60,1,0,0,
0,220,221,5,99,0,0,221,222,5,97,0,0,222,223,5,115,0,0,223,224,5,101,0,0,
224,62,1,0,0,0,225,226,5,99,0,0,226,227,5,111,0,0,227,228,5,110,0,0,228,
229,5,115,0,0,229,230,5,116,0,0,230,64,1,0,0,0,231,232,5,116,0,0,232,233,
5,121,0,0,233,234,5,112,0,0,234,235,5,101,0,0,235,236,5,100,0,0,236,237,
5,101,0,0,237,238,5,102,0,0,238,66,1,0,0,0,239,240,5,47,0,0,240,241,5,42,
0,0,241,245,1,0,0,0,242,244,9,0,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,
246,1,0,0,0,245,243,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,5,42,
0,0,249,250,5,47,0,0,250,251,1,0,0,0,251,252,6,33,0,0,252,68,1,0,0,0,253,
254,5,48,0,0,254,258,7,0,0,0,255,257,7,1,0,0,256,255,1,0,0,0,257,260,1,0,
0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,70,1,0,0,0,260,258,1,0,0,0,261,263,
5,45,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,7,2,0,0,
265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,72,1,
0,0,0,269,270,5,48,0,0,270,271,5,120,0,0,271,273,1,0,0,0,272,274,7,3,0,0,
273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,74,1,
0,0,0,277,281,7,4,0,0,278,280,7,5,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,
279,1,0,0,0,281,282,1,0,0,0,282,76,1,0,0,0,283,281,1,0,0,0,284,286,7,6,0,
0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,289,
1,0,0,0,289,290,6,38,0,0,290,78,1,0,0,0,8,0,245,258,262,267,275,281,287,
1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class oncrpcv2Lexer extends antlr4.Lexer {

    static grammarFileName = "oncrpcv2.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'program'", "'{'", "'}'", "'='", "';'", 
                         "'version'", "'('", "','", "')'", "'void'", "'['", 
                         "']'", "'<'", "'>'", "'opaque'", "'string'", "'*'", 
                         "'unsigned'", "'int'", "'hyper'", "'float'", "'double'", 
                         "'quadruple'", "'bool'", "'enum'", "'struct'", 
                         "'union'", "'switch'", "'default'", "':'", "'case'", 
                         "'const'", "'typedef'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, "COMMENT", "OCTAL", "DECIMAL", "HEXADECIMAL", 
                          "IDENTIFIER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "COMMENT", "OCTAL", "DECIMAL", "HEXADECIMAL", 
                      "IDENTIFIER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

oncrpcv2Lexer.EOF = antlr4.Token.EOF;
oncrpcv2Lexer.T__0 = 1;
oncrpcv2Lexer.T__1 = 2;
oncrpcv2Lexer.T__2 = 3;
oncrpcv2Lexer.T__3 = 4;
oncrpcv2Lexer.T__4 = 5;
oncrpcv2Lexer.T__5 = 6;
oncrpcv2Lexer.T__6 = 7;
oncrpcv2Lexer.T__7 = 8;
oncrpcv2Lexer.T__8 = 9;
oncrpcv2Lexer.T__9 = 10;
oncrpcv2Lexer.T__10 = 11;
oncrpcv2Lexer.T__11 = 12;
oncrpcv2Lexer.T__12 = 13;
oncrpcv2Lexer.T__13 = 14;
oncrpcv2Lexer.T__14 = 15;
oncrpcv2Lexer.T__15 = 16;
oncrpcv2Lexer.T__16 = 17;
oncrpcv2Lexer.T__17 = 18;
oncrpcv2Lexer.T__18 = 19;
oncrpcv2Lexer.T__19 = 20;
oncrpcv2Lexer.T__20 = 21;
oncrpcv2Lexer.T__21 = 22;
oncrpcv2Lexer.T__22 = 23;
oncrpcv2Lexer.T__23 = 24;
oncrpcv2Lexer.T__24 = 25;
oncrpcv2Lexer.T__25 = 26;
oncrpcv2Lexer.T__26 = 27;
oncrpcv2Lexer.T__27 = 28;
oncrpcv2Lexer.T__28 = 29;
oncrpcv2Lexer.T__29 = 30;
oncrpcv2Lexer.T__30 = 31;
oncrpcv2Lexer.T__31 = 32;
oncrpcv2Lexer.T__32 = 33;
oncrpcv2Lexer.COMMENT = 34;
oncrpcv2Lexer.OCTAL = 35;
oncrpcv2Lexer.DECIMAL = 36;
oncrpcv2Lexer.HEXADECIMAL = 37;
oncrpcv2Lexer.IDENTIFIER = 38;
oncrpcv2Lexer.WS = 39;



