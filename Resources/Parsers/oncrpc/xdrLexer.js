// Generated from ./oncrpc/xdr.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,37,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,
31,224,8,31,10,31,12,31,227,9,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
5,32,237,8,32,10,32,12,32,240,9,32,1,33,3,33,243,8,33,1,33,4,33,246,8,33,
11,33,12,33,247,1,34,1,34,1,34,1,34,4,34,254,8,34,11,34,12,34,255,1,35,1,
35,5,35,260,8,35,10,35,12,35,263,9,35,1,36,4,36,266,8,36,11,36,12,36,267,
1,36,1,36,1,225,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
71,36,73,37,1,0,7,1,0,49,55,1,0,48,55,1,0,48,57,3,0,48,57,65,70,97,102,2,
0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,277,0,1,
1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,
7,81,1,0,0,0,9,83,1,0,0,0,11,90,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,104,
1,0,0,0,19,113,1,0,0,0,21,117,1,0,0,0,23,123,1,0,0,0,25,129,1,0,0,0,27,136,
1,0,0,0,29,146,1,0,0,0,31,151,1,0,0,0,33,156,1,0,0,0,35,158,1,0,0,0,37,160,
1,0,0,0,39,162,1,0,0,0,41,164,1,0,0,0,43,171,1,0,0,0,45,173,1,0,0,0,47,179,
1,0,0,0,49,186,1,0,0,0,51,188,1,0,0,0,53,190,1,0,0,0,55,198,1,0,0,0,57,200,
1,0,0,0,59,205,1,0,0,0,61,211,1,0,0,0,63,219,1,0,0,0,65,233,1,0,0,0,67,242,
1,0,0,0,69,249,1,0,0,0,71,257,1,0,0,0,73,265,1,0,0,0,75,76,5,91,0,0,76,2,
1,0,0,0,77,78,5,93,0,0,78,4,1,0,0,0,79,80,5,60,0,0,80,6,1,0,0,0,81,82,5,
62,0,0,82,8,1,0,0,0,83,84,5,111,0,0,84,85,5,112,0,0,85,86,5,97,0,0,86,87,
5,113,0,0,87,88,5,117,0,0,88,89,5,101,0,0,89,10,1,0,0,0,90,91,5,115,0,0,
91,92,5,116,0,0,92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,
103,0,0,96,12,1,0,0,0,97,98,5,42,0,0,98,14,1,0,0,0,99,100,5,118,0,0,100,
101,5,111,0,0,101,102,5,105,0,0,102,103,5,100,0,0,103,16,1,0,0,0,104,105,
5,117,0,0,105,106,5,110,0,0,106,107,5,115,0,0,107,108,5,105,0,0,108,109,
5,103,0,0,109,110,5,110,0,0,110,111,5,101,0,0,111,112,5,100,0,0,112,18,1,
0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,116,0,0,116,20,1,0,0,
0,117,118,5,104,0,0,118,119,5,121,0,0,119,120,5,112,0,0,120,121,5,101,0,
0,121,122,5,114,0,0,122,22,1,0,0,0,123,124,5,102,0,0,124,125,5,108,0,0,125,
126,5,111,0,0,126,127,5,97,0,0,127,128,5,116,0,0,128,24,1,0,0,0,129,130,
5,100,0,0,130,131,5,111,0,0,131,132,5,117,0,0,132,133,5,98,0,0,133,134,5,
108,0,0,134,135,5,101,0,0,135,26,1,0,0,0,136,137,5,113,0,0,137,138,5,117,
0,0,138,139,5,97,0,0,139,140,5,100,0,0,140,141,5,114,0,0,141,142,5,117,0,
0,142,143,5,112,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,28,1,0,0,0,146,
147,5,98,0,0,147,148,5,111,0,0,148,149,5,111,0,0,149,150,5,108,0,0,150,30,
1,0,0,0,151,152,5,101,0,0,152,153,5,110,0,0,153,154,5,117,0,0,154,155,5,
109,0,0,155,32,1,0,0,0,156,157,5,123,0,0,157,34,1,0,0,0,158,159,5,61,0,0,
159,36,1,0,0,0,160,161,5,44,0,0,161,38,1,0,0,0,162,163,5,125,0,0,163,40,
1,0,0,0,164,165,5,115,0,0,165,166,5,116,0,0,166,167,5,114,0,0,167,168,5,
117,0,0,168,169,5,99,0,0,169,170,5,116,0,0,170,42,1,0,0,0,171,172,5,59,0,
0,172,44,1,0,0,0,173,174,5,117,0,0,174,175,5,110,0,0,175,176,5,105,0,0,176,
177,5,111,0,0,177,178,5,110,0,0,178,46,1,0,0,0,179,180,5,115,0,0,180,181,
5,119,0,0,181,182,5,105,0,0,182,183,5,116,0,0,183,184,5,99,0,0,184,185,5,
104,0,0,185,48,1,0,0,0,186,187,5,40,0,0,187,50,1,0,0,0,188,189,5,41,0,0,
189,52,1,0,0,0,190,191,5,100,0,0,191,192,5,101,0,0,192,193,5,102,0,0,193,
194,5,97,0,0,194,195,5,117,0,0,195,196,5,108,0,0,196,197,5,116,0,0,197,54,
1,0,0,0,198,199,5,58,0,0,199,56,1,0,0,0,200,201,5,99,0,0,201,202,5,97,0,
0,202,203,5,115,0,0,203,204,5,101,0,0,204,58,1,0,0,0,205,206,5,99,0,0,206,
207,5,111,0,0,207,208,5,110,0,0,208,209,5,115,0,0,209,210,5,116,0,0,210,
60,1,0,0,0,211,212,5,116,0,0,212,213,5,121,0,0,213,214,5,112,0,0,214,215,
5,101,0,0,215,216,5,100,0,0,216,217,5,101,0,0,217,218,5,102,0,0,218,62,1,
0,0,0,219,220,5,47,0,0,220,221,5,42,0,0,221,225,1,0,0,0,222,224,9,0,0,0,
223,222,1,0,0,0,224,227,1,0,0,0,225,226,1,0,0,0,225,223,1,0,0,0,226,228,
1,0,0,0,227,225,1,0,0,0,228,229,5,42,0,0,229,230,5,47,0,0,230,231,1,0,0,
0,231,232,6,31,0,0,232,64,1,0,0,0,233,234,5,48,0,0,234,238,7,0,0,0,235,237,
7,1,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,
239,66,1,0,0,0,240,238,1,0,0,0,241,243,5,45,0,0,242,241,1,0,0,0,242,243,
1,0,0,0,243,245,1,0,0,0,244,246,7,2,0,0,245,244,1,0,0,0,246,247,1,0,0,0,
247,245,1,0,0,0,247,248,1,0,0,0,248,68,1,0,0,0,249,250,5,48,0,0,250,251,
5,120,0,0,251,253,1,0,0,0,252,254,7,3,0,0,253,252,1,0,0,0,254,255,1,0,0,
0,255,253,1,0,0,0,255,256,1,0,0,0,256,70,1,0,0,0,257,261,7,4,0,0,258,260,
7,5,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,
262,72,1,0,0,0,263,261,1,0,0,0,264,266,7,6,0,0,265,264,1,0,0,0,266,267,1,
0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,6,36,0,0,270,
74,1,0,0,0,8,0,225,238,242,247,255,261,267,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class xdrLexer extends antlr4.Lexer {

    static grammarFileName = "xdr.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'['", "']'", "'<'", "'>'", "'opaque'", "'string'", 
                         "'*'", "'void'", "'unsigned'", "'int'", "'hyper'", 
                         "'float'", "'double'", "'quadruple'", "'bool'", 
                         "'enum'", "'{'", "'='", "','", "'}'", "'struct'", 
                         "';'", "'union'", "'switch'", "'('", "')'", "'default'", 
                         "':'", "'case'", "'const'", "'typedef'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "COMMENT", "OCTAL", "DECIMAL", "HEXADECIMAL", 
                          "IDENTIFIER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "COMMENT", "OCTAL", "DECIMAL", "HEXADECIMAL", "IDENTIFIER", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

xdrLexer.EOF = antlr4.Token.EOF;
xdrLexer.T__0 = 1;
xdrLexer.T__1 = 2;
xdrLexer.T__2 = 3;
xdrLexer.T__3 = 4;
xdrLexer.T__4 = 5;
xdrLexer.T__5 = 6;
xdrLexer.T__6 = 7;
xdrLexer.T__7 = 8;
xdrLexer.T__8 = 9;
xdrLexer.T__9 = 10;
xdrLexer.T__10 = 11;
xdrLexer.T__11 = 12;
xdrLexer.T__12 = 13;
xdrLexer.T__13 = 14;
xdrLexer.T__14 = 15;
xdrLexer.T__15 = 16;
xdrLexer.T__16 = 17;
xdrLexer.T__17 = 18;
xdrLexer.T__18 = 19;
xdrLexer.T__19 = 20;
xdrLexer.T__20 = 21;
xdrLexer.T__21 = 22;
xdrLexer.T__22 = 23;
xdrLexer.T__23 = 24;
xdrLexer.T__24 = 25;
xdrLexer.T__25 = 26;
xdrLexer.T__26 = 27;
xdrLexer.T__27 = 28;
xdrLexer.T__28 = 29;
xdrLexer.T__29 = 30;
xdrLexer.T__30 = 31;
xdrLexer.COMMENT = 32;
xdrLexer.OCTAL = 33;
xdrLexer.DECIMAL = 34;
xdrLexer.HEXADECIMAL = 35;
xdrLexer.IDENTIFIER = 36;
xdrLexer.WS = 37;



