// Generated from ./asl/ASL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ASLListener from './ASLListener.js';
const serializedATN = [4,1,114,1199,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
1,0,4,0,214,8,0,11,0,12,0,215,1,0,1,0,1,1,1,1,1,1,3,1,223,8,1,1,1,4,1,226,
8,1,11,1,12,1,227,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
2,243,8,2,1,3,1,3,1,3,1,3,3,3,249,8,3,1,4,1,4,1,4,1,4,1,4,3,4,256,8,4,1,
5,1,5,3,5,260,8,5,1,5,1,5,1,5,3,5,265,8,5,1,6,1,6,3,6,269,8,6,1,6,1,6,1,
6,1,7,1,7,3,7,276,8,7,1,7,1,7,1,7,3,7,281,8,7,1,8,1,8,3,8,285,8,8,1,8,1,
8,1,8,1,9,1,9,3,9,292,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,301,8,10,
1,10,1,10,1,10,1,10,1,10,3,10,308,8,10,1,10,1,10,1,10,3,10,313,8,10,1,11,
1,11,1,11,1,11,3,11,319,8,11,1,12,1,12,1,12,1,12,3,12,325,8,12,1,12,1,12,
3,12,329,8,12,1,13,1,13,3,13,333,8,13,1,13,1,13,1,13,3,13,338,8,13,1,13,
1,13,1,13,3,13,343,8,13,1,14,1,14,1,14,5,14,348,8,14,10,14,12,14,351,9,14,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,362,8,15,1,16,1,16,1,16,
3,16,367,8,16,1,17,1,17,3,17,371,8,17,1,18,1,18,1,18,1,18,1,18,3,18,378,
8,18,1,18,1,18,3,18,382,8,18,1,19,1,19,1,19,1,19,1,19,3,19,389,8,19,1,19,
3,19,392,8,19,1,19,1,19,1,19,1,19,1,19,3,19,399,8,19,1,19,1,19,3,19,403,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,411,8,20,1,20,1,20,5,20,415,8,20,
10,20,12,20,418,9,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,426,8,20,1,20,1,
20,1,20,5,20,431,8,20,10,20,12,20,434,9,20,3,20,436,8,20,1,21,1,21,1,22,
1,22,1,22,1,22,1,22,1,22,1,22,3,22,447,8,22,1,23,1,23,3,23,451,8,23,1,23,
1,23,1,23,1,23,3,23,457,8,23,1,23,1,23,4,23,461,8,23,11,23,12,23,462,1,23,
1,23,3,23,467,8,23,1,23,1,23,3,23,471,8,23,1,24,1,24,1,24,1,24,3,24,477,
8,24,1,24,1,24,1,24,3,24,482,8,24,1,24,1,24,1,24,3,24,487,8,24,1,25,1,25,
1,25,3,25,492,8,25,1,25,1,25,1,25,1,25,3,25,498,8,25,1,25,1,25,1,25,1,25,
1,25,1,25,3,25,506,8,25,3,25,508,8,25,1,26,1,26,1,26,3,26,513,8,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,523,8,26,1,27,1,27,1,27,3,27,528,
8,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,3,30,540,8,30,1,31,
1,31,1,31,1,31,3,31,546,8,31,1,31,1,31,1,31,1,31,1,31,3,31,553,8,31,3,31,
555,8,31,1,32,1,32,1,32,1,32,3,32,561,8,32,1,32,1,32,1,32,1,33,1,33,1,33,
1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,577,8,35,10,35,12,35,580,9,
35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,588,8,36,1,37,1,37,1,37,3,37,593,8,
37,1,38,1,38,3,38,597,8,38,1,38,1,38,1,38,1,38,1,38,3,38,604,8,38,1,38,1,
38,1,39,1,39,3,39,610,8,39,1,39,1,39,1,39,1,39,1,39,3,39,617,8,39,1,39,1,
39,1,40,1,40,3,40,623,8,40,1,40,1,40,1,40,1,40,1,40,3,40,630,8,40,1,40,1,
40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,
1,44,5,44,649,8,44,10,44,12,44,652,9,44,1,45,1,45,1,45,3,45,657,8,45,1,46,
1,46,1,46,5,46,662,8,46,10,46,12,46,665,9,46,1,47,1,47,1,47,1,47,3,47,671,
8,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,679,8,48,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,3,
55,758,8,55,1,56,1,56,1,56,3,56,763,8,56,1,57,1,57,1,58,1,58,3,58,769,8,
58,1,59,1,59,1,59,3,59,774,8,59,1,60,1,60,1,60,3,60,779,8,60,1,61,1,61,1,
61,3,61,784,8,61,1,62,1,62,1,62,3,62,789,8,62,1,63,1,63,1,63,3,63,794,8,
63,1,64,1,64,1,64,3,64,799,8,64,1,65,1,65,1,65,3,65,804,8,65,1,66,1,66,1,
66,3,66,809,8,66,1,67,1,67,1,67,3,67,814,8,67,1,68,1,68,1,68,1,68,1,68,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,
1,71,1,71,1,71,1,71,3,71,840,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
4,72,850,8,72,11,72,12,72,851,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,3,74,866,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,
1,76,1,76,1,76,1,76,3,76,880,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
1,77,5,77,891,8,77,10,77,12,77,894,9,77,1,77,1,77,5,77,898,8,77,10,77,12,
77,901,9,77,3,77,903,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,
79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,5,80,925,8,80,10,80,
12,80,928,9,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,3,82,939,8,82,
1,83,1,83,1,83,5,83,944,8,83,10,83,12,83,947,9,83,1,84,1,84,1,84,1,84,1,
84,3,84,954,8,84,1,85,1,85,3,85,958,8,85,1,85,1,85,1,85,3,85,963,8,85,5,
85,965,8,85,10,85,12,85,968,9,85,1,86,1,86,1,86,3,86,973,8,86,1,86,1,86,
1,86,1,86,1,86,5,86,980,8,86,10,86,12,86,983,9,86,4,86,985,8,86,11,86,12,
86,986,1,86,1,86,1,86,4,86,992,8,86,11,86,12,86,993,3,86,996,8,86,1,86,1,
86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1006,8,87,1,87,1,87,1,87,4,87,1011,
8,87,11,87,12,87,1012,1,87,1,87,1,87,4,87,1018,8,87,11,87,12,87,1019,3,87,
1022,8,87,1,87,1,87,1,88,3,88,1027,8,88,1,88,1,88,1,88,3,88,1032,8,88,1,
88,5,88,1035,8,88,10,88,12,88,1038,9,88,1,89,3,89,1041,8,89,1,89,1,89,1,
89,3,89,1046,8,89,1,89,5,89,1049,8,89,10,89,12,89,1052,9,89,1,89,1,89,3,
89,1056,8,89,1,89,1,89,1,89,3,89,1061,8,89,1,89,5,89,1064,8,89,10,89,12,
89,1067,9,89,1,89,1,89,3,89,1071,8,89,1,90,3,90,1074,8,90,1,90,1,90,1,90,
1,90,1,90,1,90,1,90,1,90,1,90,3,90,1085,8,90,1,90,3,90,1088,8,90,1,91,1,
91,1,91,1,91,1,91,1,91,1,91,3,91,1097,8,91,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,5,92,1106,8,92,10,92,12,92,1109,9,92,1,92,1,92,5,92,1113,8,92,10,92,
12,92,1116,9,92,3,92,1118,8,92,1,92,1,92,1,93,1,93,1,93,3,93,1125,8,93,1,
93,1,93,1,94,1,94,1,94,5,94,1132,8,94,10,94,12,94,1135,9,94,1,94,1,94,1,
94,5,94,1140,8,94,10,94,12,94,1143,9,94,1,94,1,94,1,95,1,95,1,95,5,95,1150,
8,95,10,95,12,95,1153,9,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,1,98,
1,98,1,99,1,99,1,100,1,100,3,100,1169,8,100,1,100,1,100,1,100,1,101,1,101,
1,101,1,101,1,101,1,101,1,101,3,101,1181,8,101,1,102,1,102,1,102,1,102,3,
102,1187,8,102,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
1,105,1,1151,0,106,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
200,202,204,206,208,210,0,11,1,0,34,35,1,0,7,8,1,0,16,17,1,0,71,72,2,0,12,
13,65,66,1,0,87,89,2,0,103,103,107,107,2,0,19,20,71,72,2,0,21,21,73,73,2,
0,101,102,104,105,2,0,102,102,108,108,1306,0,213,1,0,0,0,2,222,1,0,0,0,4,
242,1,0,0,0,6,248,1,0,0,0,8,255,1,0,0,0,10,259,1,0,0,0,12,268,1,0,0,0,14,
275,1,0,0,0,16,284,1,0,0,0,18,291,1,0,0,0,20,312,1,0,0,0,22,318,1,0,0,0,
24,320,1,0,0,0,26,332,1,0,0,0,28,344,1,0,0,0,30,352,1,0,0,0,32,363,1,0,0,
0,34,370,1,0,0,0,36,372,1,0,0,0,38,383,1,0,0,0,40,435,1,0,0,0,42,437,1,0,
0,0,44,446,1,0,0,0,46,450,1,0,0,0,48,472,1,0,0,0,50,507,1,0,0,0,52,522,1,
0,0,0,54,527,1,0,0,0,56,529,1,0,0,0,58,533,1,0,0,0,60,539,1,0,0,0,62,541,
1,0,0,0,64,556,1,0,0,0,66,565,1,0,0,0,68,569,1,0,0,0,70,573,1,0,0,0,72,587,
1,0,0,0,74,592,1,0,0,0,76,594,1,0,0,0,78,607,1,0,0,0,80,620,1,0,0,0,82,633,
1,0,0,0,84,637,1,0,0,0,86,641,1,0,0,0,88,645,1,0,0,0,90,656,1,0,0,0,92,658,
1,0,0,0,94,670,1,0,0,0,96,678,1,0,0,0,98,680,1,0,0,0,100,688,1,0,0,0,102,
696,1,0,0,0,104,709,1,0,0,0,106,732,1,0,0,0,108,747,1,0,0,0,110,757,1,0,
0,0,112,762,1,0,0,0,114,764,1,0,0,0,116,768,1,0,0,0,118,773,1,0,0,0,120,
778,1,0,0,0,122,783,1,0,0,0,124,788,1,0,0,0,126,793,1,0,0,0,128,798,1,0,
0,0,130,803,1,0,0,0,132,808,1,0,0,0,134,813,1,0,0,0,136,815,1,0,0,0,138,
820,1,0,0,0,140,827,1,0,0,0,142,839,1,0,0,0,144,841,1,0,0,0,146,855,1,0,
0,0,148,865,1,0,0,0,150,867,1,0,0,0,152,871,1,0,0,0,154,881,1,0,0,0,156,
906,1,0,0,0,158,912,1,0,0,0,160,918,1,0,0,0,162,929,1,0,0,0,164,938,1,0,
0,0,166,940,1,0,0,0,168,953,1,0,0,0,170,957,1,0,0,0,172,969,1,0,0,0,174,
999,1,0,0,0,176,1026,1,0,0,0,178,1070,1,0,0,0,180,1073,1,0,0,0,182,1096,
1,0,0,0,184,1098,1,0,0,0,186,1124,1,0,0,0,188,1128,1,0,0,0,190,1146,1,0,
0,0,192,1156,1,0,0,0,194,1160,1,0,0,0,196,1162,1,0,0,0,198,1164,1,0,0,0,
200,1168,1,0,0,0,202,1180,1,0,0,0,204,1186,1,0,0,0,206,1188,1,0,0,0,208,
1190,1,0,0,0,210,1194,1,0,0,0,212,214,3,2,1,0,213,212,1,0,0,0,214,215,1,
0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,5,0,0,1,218,
1,1,0,0,0,219,223,3,4,2,0,220,223,3,6,3,0,221,223,3,190,95,0,222,219,1,0,
0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,225,1,0,0,0,224,226,5,113,0,0,225,
224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,3,1,0,0,
0,229,243,3,8,4,0,230,243,3,26,13,0,231,243,3,32,16,0,232,243,3,34,17,0,
233,243,3,46,23,0,234,243,3,48,24,0,235,243,3,50,25,0,236,243,3,52,26,0,
237,243,3,60,30,0,238,243,3,74,37,0,239,243,3,96,48,0,240,243,3,134,67,0,
241,243,3,142,71,0,242,229,1,0,0,0,242,230,1,0,0,0,242,231,1,0,0,0,242,232,
1,0,0,0,242,233,1,0,0,0,242,234,1,0,0,0,242,235,1,0,0,0,242,236,1,0,0,0,
242,237,1,0,0,0,242,238,1,0,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,
1,0,0,0,243,5,1,0,0,0,244,249,3,172,86,0,245,249,3,174,87,0,246,249,3,184,
92,0,247,249,3,188,94,0,248,244,1,0,0,0,248,245,1,0,0,0,248,246,1,0,0,0,
248,247,1,0,0,0,249,7,1,0,0,0,250,256,3,10,5,0,251,256,3,12,6,0,252,256,
3,14,7,0,253,256,3,16,8,0,254,256,3,18,9,0,255,250,1,0,0,0,255,251,1,0,0,
0,255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,9,1,0,0,0,257,260,
3,194,97,0,258,260,3,200,100,0,259,257,1,0,0,0,259,258,1,0,0,0,260,261,1,
0,0,0,261,264,5,66,0,0,262,265,3,202,101,0,263,265,5,6,0,0,264,262,1,0,0,
0,264,263,1,0,0,0,265,11,1,0,0,0,266,269,3,194,97,0,267,269,3,200,100,0,
268,266,1,0,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,271,5,66,0,0,271,272,
7,0,0,0,272,13,1,0,0,0,273,276,3,194,97,0,274,276,3,200,100,0,275,273,1,
0,0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,280,5,66,0,0,278,281,3,194,97,
0,279,281,5,1,0,0,280,278,1,0,0,0,280,279,1,0,0,0,281,15,1,0,0,0,282,285,
3,194,97,0,283,285,3,200,100,0,284,282,1,0,0,0,284,283,1,0,0,0,285,286,1,
0,0,0,286,287,5,66,0,0,287,288,3,200,100,0,288,17,1,0,0,0,289,292,3,194,
97,0,290,292,3,200,100,0,291,289,1,0,0,0,291,290,1,0,0,0,292,293,1,0,0,0,
293,294,5,66,0,0,294,295,3,20,10,0,295,19,1,0,0,0,296,297,3,22,11,0,297,
300,5,95,0,0,298,301,3,22,11,0,299,301,3,20,10,0,300,298,1,0,0,0,300,299,
1,0,0,0,301,313,1,0,0,0,302,303,5,74,0,0,303,304,3,22,11,0,304,307,5,95,
0,0,305,308,3,22,11,0,306,308,3,20,10,0,307,305,1,0,0,0,307,306,1,0,0,0,
308,309,1,0,0,0,309,310,5,75,0,0,310,313,1,0,0,0,311,313,3,24,12,0,312,296,
1,0,0,0,312,302,1,0,0,0,312,311,1,0,0,0,313,21,1,0,0,0,314,319,3,194,97,
0,315,319,3,200,100,0,316,319,3,202,101,0,317,319,3,24,12,0,318,314,1,0,
0,0,318,315,1,0,0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,23,1,0,0,0,320,328,
5,18,0,0,321,329,3,192,96,0,322,325,3,194,97,0,323,325,5,1,0,0,324,322,1,
0,0,0,324,323,1,0,0,0,325,326,1,0,0,0,326,327,5,25,0,0,327,329,3,54,27,0,
328,321,1,0,0,0,328,324,1,0,0,0,329,25,1,0,0,0,330,333,3,194,97,0,331,333,
5,1,0,0,332,330,1,0,0,0,332,331,1,0,0,0,333,334,1,0,0,0,334,335,5,66,0,0,
335,337,5,2,0,0,336,338,5,3,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,
1,0,0,0,339,342,3,196,98,0,340,341,5,4,0,0,341,343,3,28,14,0,342,340,1,0,
0,0,342,343,1,0,0,0,343,27,1,0,0,0,344,349,3,30,15,0,345,346,5,71,0,0,346,
348,3,30,15,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,
0,0,0,350,29,1,0,0,0,351,349,1,0,0,0,352,353,3,198,99,0,353,361,5,66,0,0,
354,362,3,202,101,0,355,362,3,194,97,0,356,362,3,200,100,0,357,362,3,20,
10,0,358,362,5,34,0,0,359,362,5,35,0,0,360,362,5,6,0,0,361,354,1,0,0,0,361,
355,1,0,0,0,361,356,1,0,0,0,361,357,1,0,0,0,361,358,1,0,0,0,361,359,1,0,
0,0,361,360,1,0,0,0,362,31,1,0,0,0,363,366,5,5,0,0,364,367,3,194,97,0,365,
367,5,1,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,33,1,0,0,0,368,371,3,36,
18,0,369,371,3,38,19,0,370,368,1,0,0,0,370,369,1,0,0,0,371,35,1,0,0,0,372,
373,3,194,97,0,373,374,5,66,0,0,374,377,7,1,0,0,375,378,3,196,98,0,376,378,
3,192,96,0,377,375,1,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,380,5,11,
0,0,380,382,3,40,20,0,381,379,1,0,0,0,381,382,1,0,0,0,382,37,1,0,0,0,383,
384,3,192,96,0,384,398,5,66,0,0,385,386,5,10,0,0,386,392,3,196,98,0,387,
389,5,10,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,392,3,192,
96,0,391,385,1,0,0,0,391,388,1,0,0,0,392,393,1,0,0,0,393,394,5,11,0,0,394,
395,3,40,20,0,395,399,1,0,0,0,396,397,5,9,0,0,397,399,3,196,98,0,398,391,
1,0,0,0,398,396,1,0,0,0,399,402,1,0,0,0,400,401,7,2,0,0,401,403,3,198,99,
0,402,400,1,0,0,0,402,403,1,0,0,0,403,39,1,0,0,0,404,405,3,198,99,0,405,
410,3,44,22,0,406,411,3,194,97,0,407,411,3,200,100,0,408,411,3,202,101,0,
409,411,5,6,0,0,410,406,1,0,0,0,410,407,1,0,0,0,410,408,1,0,0,0,410,409,
1,0,0,0,411,416,1,0,0,0,412,413,7,3,0,0,413,415,3,40,20,0,414,412,1,0,0,
0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,436,1,0,0,0,418,416,
1,0,0,0,419,420,5,74,0,0,420,421,3,198,99,0,421,425,3,44,22,0,422,426,3,
194,97,0,423,426,3,202,101,0,424,426,5,6,0,0,425,422,1,0,0,0,425,423,1,0,
0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,432,5,75,0,0,428,429,7,3,0,0,429,
431,3,40,20,0,430,428,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,
0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,435,404,1,0,0,0,435,419,1,0,0,0,436,
41,1,0,0,0,437,438,7,4,0,0,438,43,1,0,0,0,439,447,3,42,21,0,440,447,5,69,
0,0,441,447,5,70,0,0,442,447,5,67,0,0,443,447,5,68,0,0,444,447,5,14,0,0,
445,447,5,15,0,0,446,439,1,0,0,0,446,440,1,0,0,0,446,441,1,0,0,0,446,442,
1,0,0,0,446,443,1,0,0,0,446,444,1,0,0,0,446,445,1,0,0,0,447,45,1,0,0,0,448,
451,3,194,97,0,449,451,3,192,96,0,450,448,1,0,0,0,450,449,1,0,0,0,451,452,
1,0,0,0,452,456,5,66,0,0,453,457,3,194,97,0,454,457,3,192,96,0,455,457,5,
1,0,0,456,453,1,0,0,0,456,454,1,0,0,0,456,455,1,0,0,0,457,460,1,0,0,0,458,
459,5,25,0,0,459,461,3,54,27,0,460,458,1,0,0,0,461,462,1,0,0,0,462,460,1,
0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,465,5,11,0,0,465,467,3,40,20,0,
466,464,1,0,0,0,466,467,1,0,0,0,467,470,1,0,0,0,468,469,7,2,0,0,469,471,
3,198,99,0,470,468,1,0,0,0,470,471,1,0,0,0,471,47,1,0,0,0,472,473,3,194,
97,0,473,476,5,66,0,0,474,477,3,194,97,0,475,477,5,1,0,0,476,474,1,0,0,0,
476,475,1,0,0,0,477,478,1,0,0,0,478,481,5,19,0,0,479,482,3,194,97,0,480,
482,5,1,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,486,5,25,
0,0,484,487,3,56,28,0,485,487,3,58,29,0,486,484,1,0,0,0,486,485,1,0,0,0,
487,49,1,0,0,0,488,491,5,22,0,0,489,492,3,194,97,0,490,492,5,1,0,0,491,489,
1,0,0,0,491,490,1,0,0,0,492,493,1,0,0,0,493,494,3,54,27,0,494,497,3,194,
97,0,495,496,5,23,0,0,496,498,3,194,97,0,497,495,1,0,0,0,497,498,1,0,0,0,
498,508,1,0,0,0,499,500,5,22,0,0,500,501,3,194,97,0,501,502,3,54,27,0,502,
505,5,1,0,0,503,504,5,23,0,0,504,506,3,194,97,0,505,503,1,0,0,0,505,506,
1,0,0,0,506,508,1,0,0,0,507,488,1,0,0,0,507,499,1,0,0,0,508,51,1,0,0,0,509,
512,5,24,0,0,510,513,3,194,97,0,511,513,5,1,0,0,512,510,1,0,0,0,512,511,
1,0,0,0,513,514,1,0,0,0,514,515,3,54,27,0,515,516,3,194,97,0,516,523,1,0,
0,0,517,518,5,24,0,0,518,519,3,194,97,0,519,520,3,54,27,0,520,521,5,1,0,
0,521,523,1,0,0,0,522,509,1,0,0,0,522,517,1,0,0,0,523,53,1,0,0,0,524,528,
5,100,0,0,525,528,3,56,28,0,526,528,3,58,29,0,527,524,1,0,0,0,527,525,1,
0,0,0,527,526,1,0,0,0,528,55,1,0,0,0,529,530,5,100,0,0,530,531,5,81,0,0,
531,532,3,196,98,0,532,57,1,0,0,0,533,534,5,100,0,0,534,535,5,81,0,0,535,
536,5,97,0,0,536,59,1,0,0,0,537,540,3,62,31,0,538,540,3,64,32,0,539,537,
1,0,0,0,539,538,1,0,0,0,540,61,1,0,0,0,541,542,5,26,0,0,542,543,3,66,33,
0,543,545,5,74,0,0,544,546,3,70,35,0,545,544,1,0,0,0,545,546,1,0,0,0,546,
547,1,0,0,0,547,548,5,75,0,0,548,554,5,82,0,0,549,552,5,27,0,0,550,553,3,
194,97,0,551,553,5,1,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,555,1,0,0,0,
554,549,1,0,0,0,554,555,1,0,0,0,555,63,1,0,0,0,556,557,5,26,0,0,557,558,
3,68,34,0,558,560,5,74,0,0,559,561,3,70,35,0,560,559,1,0,0,0,560,561,1,0,
0,0,561,562,1,0,0,0,562,563,5,75,0,0,563,564,5,82,0,0,564,65,1,0,0,0,565,
566,5,106,0,0,566,567,5,83,0,0,567,568,5,104,0,0,568,67,1,0,0,0,569,570,
5,106,0,0,570,571,5,83,0,0,571,572,5,104,0,0,572,69,1,0,0,0,573,578,3,72,
36,0,574,575,5,84,0,0,575,577,3,72,36,0,576,574,1,0,0,0,577,580,1,0,0,0,
578,576,1,0,0,0,578,579,1,0,0,0,579,71,1,0,0,0,580,578,1,0,0,0,581,588,3,
194,97,0,582,588,3,202,101,0,583,588,5,1,0,0,584,588,3,200,100,0,585,588,
3,208,104,0,586,588,5,6,0,0,587,581,1,0,0,0,587,582,1,0,0,0,587,583,1,0,
0,0,587,584,1,0,0,0,587,585,1,0,0,0,587,586,1,0,0,0,588,73,1,0,0,0,589,593,
3,76,38,0,590,593,3,78,39,0,591,593,3,80,40,0,592,589,1,0,0,0,592,590,1,
0,0,0,592,591,1,0,0,0,593,75,1,0,0,0,594,596,5,78,0,0,595,597,3,88,44,0,
596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,5,79,0,0,599,600,
5,66,0,0,600,601,3,82,41,0,601,603,5,78,0,0,602,604,3,92,46,0,603,602,1,
0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,5,79,0,0,606,77,1,0,0,0,607,
609,5,78,0,0,608,610,3,88,44,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,
0,0,0,611,612,5,79,0,0,612,613,5,66,0,0,613,614,3,84,42,0,614,616,5,78,0,
0,615,617,3,92,46,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
619,5,79,0,0,619,79,1,0,0,0,620,622,5,78,0,0,621,623,3,88,44,0,622,621,1,
0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,5,79,0,0,625,626,5,66,0,0,
626,627,3,86,43,0,627,629,5,78,0,0,628,630,3,92,46,0,629,628,1,0,0,0,629,
630,1,0,0,0,630,631,1,0,0,0,631,632,5,79,0,0,632,81,1,0,0,0,633,634,5,106,
0,0,634,635,5,83,0,0,635,636,5,104,0,0,636,83,1,0,0,0,637,638,5,106,0,0,
638,639,5,83,0,0,639,640,5,104,0,0,640,85,1,0,0,0,641,642,5,106,0,0,642,
643,5,83,0,0,643,644,5,104,0,0,644,87,1,0,0,0,645,650,3,90,45,0,646,647,
5,84,0,0,647,649,3,90,45,0,648,646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,
0,650,651,1,0,0,0,651,89,1,0,0,0,652,650,1,0,0,0,653,657,3,194,97,0,654,
657,3,192,96,0,655,657,3,200,100,0,656,653,1,0,0,0,656,654,1,0,0,0,656,655,
1,0,0,0,657,91,1,0,0,0,658,663,3,94,47,0,659,660,5,84,0,0,660,662,3,94,47,
0,661,659,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,93,
1,0,0,0,665,663,1,0,0,0,666,671,3,194,97,0,667,671,3,192,96,0,668,671,3,
202,101,0,669,671,3,200,100,0,670,666,1,0,0,0,670,667,1,0,0,0,670,668,1,
0,0,0,670,669,1,0,0,0,671,95,1,0,0,0,672,679,3,98,49,0,673,679,3,100,50,
0,674,679,3,102,51,0,675,679,3,104,52,0,676,679,3,106,53,0,677,679,3,108,
54,0,678,672,1,0,0,0,678,673,1,0,0,0,678,674,1,0,0,0,678,675,1,0,0,0,678,
676,1,0,0,0,678,677,1,0,0,0,679,97,1,0,0,0,680,681,5,78,0,0,681,682,3,110,
55,0,682,683,5,79,0,0,683,684,5,66,0,0,684,685,5,28,0,0,685,686,5,78,0,0,
686,687,5,79,0,0,687,99,1,0,0,0,688,689,5,78,0,0,689,690,5,79,0,0,690,691,
5,66,0,0,691,692,5,29,0,0,692,693,5,78,0,0,693,694,3,110,55,0,694,695,5,
79,0,0,695,101,1,0,0,0,696,697,5,26,0,0,697,698,5,31,0,0,698,699,5,74,0,
0,699,700,3,112,56,0,700,701,5,84,0,0,701,702,3,114,57,0,702,703,5,84,0,
0,703,704,3,116,58,0,704,705,5,75,0,0,705,706,5,82,0,0,706,707,5,27,0,0,
707,708,3,110,55,0,708,103,1,0,0,0,709,710,5,26,0,0,710,711,5,30,0,0,711,
712,5,74,0,0,712,713,3,118,59,0,713,714,5,84,0,0,714,715,3,120,60,0,715,
716,5,84,0,0,716,717,3,122,61,0,717,718,5,84,0,0,718,719,3,124,62,0,719,
720,5,84,0,0,720,721,3,126,63,0,721,722,5,84,0,0,722,723,3,128,64,0,723,
724,5,84,0,0,724,725,3,114,57,0,725,726,5,84,0,0,726,727,3,116,58,0,727,
728,5,75,0,0,728,729,5,82,0,0,729,730,5,27,0,0,730,731,3,110,55,0,731,105,
1,0,0,0,732,733,5,26,0,0,733,734,5,33,0,0,734,735,5,74,0,0,735,736,3,130,
65,0,736,737,5,84,0,0,737,738,3,132,66,0,738,739,5,84,0,0,739,740,3,114,
57,0,740,741,5,84,0,0,741,742,3,116,58,0,742,743,5,75,0,0,743,744,5,82,0,
0,744,745,5,27,0,0,745,746,3,110,55,0,746,107,1,0,0,0,747,748,5,26,0,0,748,
749,5,32,0,0,749,750,5,74,0,0,750,751,5,75,0,0,751,752,5,82,0,0,752,753,
5,27,0,0,753,754,3,110,55,0,754,109,1,0,0,0,755,758,3,194,97,0,756,758,3,
200,100,0,757,755,1,0,0,0,757,756,1,0,0,0,758,111,1,0,0,0,759,763,3,194,
97,0,760,763,3,200,100,0,761,763,5,93,0,0,762,759,1,0,0,0,762,760,1,0,0,
0,762,761,1,0,0,0,763,113,1,0,0,0,764,765,5,106,0,0,765,115,1,0,0,0,766,
769,3,194,97,0,767,769,5,1,0,0,768,766,1,0,0,0,768,767,1,0,0,0,769,117,1,
0,0,0,770,774,3,194,97,0,771,774,3,200,100,0,772,774,5,93,0,0,773,770,1,
0,0,0,773,771,1,0,0,0,773,772,1,0,0,0,774,119,1,0,0,0,775,779,3,194,97,0,
776,779,3,200,100,0,777,779,5,93,0,0,778,775,1,0,0,0,778,776,1,0,0,0,778,
777,1,0,0,0,779,121,1,0,0,0,780,784,3,194,97,0,781,784,3,200,100,0,782,784,
5,93,0,0,783,780,1,0,0,0,783,781,1,0,0,0,783,782,1,0,0,0,784,123,1,0,0,0,
785,789,3,194,97,0,786,789,3,200,100,0,787,789,5,93,0,0,788,785,1,0,0,0,
788,786,1,0,0,0,788,787,1,0,0,0,789,125,1,0,0,0,790,794,3,194,97,0,791,794,
3,200,100,0,792,794,5,93,0,0,793,790,1,0,0,0,793,791,1,0,0,0,793,792,1,0,
0,0,794,127,1,0,0,0,795,799,3,194,97,0,796,799,3,200,100,0,797,799,5,93,
0,0,798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,0,0,0,799,129,1,0,0,0,800,
804,3,194,97,0,801,804,3,200,100,0,802,804,5,93,0,0,803,800,1,0,0,0,803,
801,1,0,0,0,803,802,1,0,0,0,804,131,1,0,0,0,805,809,3,194,97,0,806,809,3,
200,100,0,807,809,5,93,0,0,808,805,1,0,0,0,808,806,1,0,0,0,808,807,1,0,0,
0,809,133,1,0,0,0,810,814,3,136,68,0,811,814,3,138,69,0,812,814,3,140,70,
0,813,810,1,0,0,0,813,811,1,0,0,0,813,812,1,0,0,0,814,135,1,0,0,0,815,816,
3,192,96,0,816,817,5,66,0,0,817,818,5,3,0,0,818,819,3,192,96,0,819,137,1,
0,0,0,820,821,3,192,96,0,821,822,5,66,0,0,822,823,7,5,0,0,823,824,3,192,
96,0,824,825,5,19,0,0,825,826,3,192,96,0,826,139,1,0,0,0,827,828,3,192,96,
0,828,829,5,66,0,0,829,830,3,192,96,0,830,831,5,90,0,0,831,832,3,192,96,
0,832,141,1,0,0,0,833,840,3,144,72,0,834,840,3,150,75,0,835,840,3,152,76,
0,836,840,3,154,77,0,837,840,3,156,78,0,838,840,3,158,79,0,839,833,1,0,0,
0,839,834,1,0,0,0,839,835,1,0,0,0,839,836,1,0,0,0,839,837,1,0,0,0,839,838,
1,0,0,0,840,143,1,0,0,0,841,842,5,54,0,0,842,843,5,55,0,0,843,844,3,164,
82,0,844,849,5,113,0,0,845,846,3,146,73,0,846,847,3,148,74,0,847,848,5,113,
0,0,848,850,1,0,0,0,849,845,1,0,0,0,850,851,1,0,0,0,851,849,1,0,0,0,851,
852,1,0,0,0,852,853,1,0,0,0,853,854,5,56,0,0,854,145,1,0,0,0,855,856,7,6,
0,0,856,147,1,0,0,0,857,866,5,59,0,0,858,866,5,60,0,0,859,866,5,61,0,0,860,
866,5,62,0,0,861,866,5,63,0,0,862,866,5,64,0,0,863,866,3,164,82,0,864,866,
3,210,105,0,865,857,1,0,0,0,865,858,1,0,0,0,865,859,1,0,0,0,865,860,1,0,
0,0,865,861,1,0,0,0,865,862,1,0,0,0,865,863,1,0,0,0,865,864,1,0,0,0,866,
149,1,0,0,0,867,868,3,162,81,0,868,869,5,57,0,0,869,870,3,164,82,0,870,151,
1,0,0,0,871,872,5,58,0,0,872,873,5,78,0,0,873,874,3,166,83,0,874,875,5,79,
0,0,875,876,5,27,0,0,876,879,3,162,81,0,877,878,7,2,0,0,878,880,3,146,73,
0,879,877,1,0,0,0,879,880,1,0,0,0,880,153,1,0,0,0,881,882,5,44,0,0,882,883,
5,78,0,0,883,884,3,170,85,0,884,885,5,79,0,0,885,886,5,45,0,0,886,887,3,
162,81,0,887,888,5,46,0,0,888,892,5,113,0,0,889,891,3,2,1,0,890,889,1,0,
0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,902,1,0,0,0,894,
892,1,0,0,0,895,899,3,186,93,0,896,898,3,2,1,0,897,896,1,0,0,0,898,901,1,
0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,902,
895,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,47,0,0,905,155,1,0,
0,0,906,907,3,162,81,0,907,908,5,66,0,0,908,909,3,162,81,0,909,910,7,2,0,
0,910,911,3,146,73,0,911,157,1,0,0,0,912,913,3,162,81,0,913,914,5,66,0,0,
914,915,3,162,81,0,915,916,5,11,0,0,916,917,3,160,80,0,917,159,1,0,0,0,918,
919,3,146,73,0,919,920,3,44,22,0,920,921,3,182,91,0,921,926,1,0,0,0,922,
923,7,7,0,0,923,925,3,160,80,0,924,922,1,0,0,0,925,928,1,0,0,0,926,924,1,
0,0,0,926,927,1,0,0,0,927,161,1,0,0,0,928,926,1,0,0,0,929,930,5,76,0,0,930,
931,7,6,0,0,931,932,5,77,0,0,932,163,1,0,0,0,933,939,5,103,0,0,934,939,5,
107,0,0,935,936,5,105,0,0,936,937,5,81,0,0,937,939,5,103,0,0,938,933,1,0,
0,0,938,934,1,0,0,0,938,935,1,0,0,0,939,165,1,0,0,0,940,945,3,168,84,0,941,
942,5,84,0,0,942,944,3,168,84,0,943,941,1,0,0,0,944,947,1,0,0,0,945,943,
1,0,0,0,945,946,1,0,0,0,946,167,1,0,0,0,947,945,1,0,0,0,948,954,3,194,97,
0,949,954,3,192,96,0,950,954,3,202,101,0,951,954,3,200,100,0,952,954,3,162,
81,0,953,948,1,0,0,0,953,949,1,0,0,0,953,950,1,0,0,0,953,951,1,0,0,0,953,
952,1,0,0,0,954,169,1,0,0,0,955,958,3,194,97,0,956,958,3,162,81,0,957,955,
1,0,0,0,957,956,1,0,0,0,958,966,1,0,0,0,959,962,5,84,0,0,960,963,3,194,97,
0,961,963,3,162,81,0,962,960,1,0,0,0,962,961,1,0,0,0,963,965,1,0,0,0,964,
959,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,171,1,0,
0,0,968,966,1,0,0,0,969,972,5,36,0,0,970,973,3,194,97,0,971,973,3,200,100,
0,972,970,1,0,0,0,972,971,1,0,0,0,973,974,1,0,0,0,974,984,5,113,0,0,975,
976,5,37,0,0,976,977,3,202,101,0,977,981,5,113,0,0,978,980,3,2,1,0,979,978,
1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,985,1,0,0,0,
983,981,1,0,0,0,984,975,1,0,0,0,985,986,1,0,0,0,986,984,1,0,0,0,986,987,
1,0,0,0,987,995,1,0,0,0,988,989,5,38,0,0,989,991,5,113,0,0,990,992,3,2,1,
0,991,990,1,0,0,0,992,993,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,
1,0,0,0,995,988,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,5,39,0,0,
998,173,1,0,0,0,999,1005,5,40,0,0,1000,1006,3,176,88,0,1001,1002,5,74,0,
0,1002,1003,3,176,88,0,1003,1004,5,75,0,0,1004,1006,1,0,0,0,1005,1000,1,
0,0,0,1005,1001,1,0,0,0,1006,1007,1,0,0,0,1007,1008,5,41,0,0,1008,1010,5,
113,0,0,1009,1011,3,2,1,0,1010,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1010,
1,0,0,0,1012,1013,1,0,0,0,1013,1021,1,0,0,0,1014,1015,5,42,0,0,1015,1017,
5,113,0,0,1016,1018,3,2,1,0,1017,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1017,
1,0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1014,1,0,0,0,1021,1022,
1,0,0,0,1022,1023,1,0,0,0,1023,1024,5,43,0,0,1024,175,1,0,0,0,1025,1027,
7,8,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1036,
3,178,89,0,1029,1031,7,7,0,0,1030,1032,7,8,0,0,1031,1030,1,0,0,0,1031,1032,
1,0,0,0,1032,1033,1,0,0,0,1033,1035,3,178,89,0,1034,1029,1,0,0,0,1035,1038,
1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,177,1,0,0,0,1038,1036,1,
0,0,0,1039,1041,7,8,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,
0,0,0,1042,1050,3,180,90,0,1043,1045,7,7,0,0,1044,1046,7,8,0,0,1045,1044,
1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,1047,1049,3,180,90,0,1048,1043,
1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1071,
1,0,0,0,1052,1050,1,0,0,0,1053,1055,5,74,0,0,1054,1056,7,8,0,0,1055,1054,
1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1065,3,180,90,0,1058,1060,
7,7,0,0,1059,1061,7,8,0,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,
1,0,0,0,1062,1064,3,180,90,0,1063,1058,1,0,0,0,1064,1067,1,0,0,0,1065,1063,
1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1065,1,0,0,0,1068,1069,
5,75,0,0,1069,1071,1,0,0,0,1070,1040,1,0,0,0,1070,1053,1,0,0,0,1071,179,
1,0,0,0,1072,1074,5,74,0,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1084,
1,0,0,0,1075,1085,3,194,97,0,1076,1077,3,182,91,0,1077,1078,3,44,22,0,1078,
1079,3,182,91,0,1079,1085,1,0,0,0,1080,1081,3,182,91,0,1081,1082,3,42,21,
0,1082,1083,5,6,0,0,1083,1085,1,0,0,0,1084,1075,1,0,0,0,1084,1076,1,0,0,
0,1084,1080,1,0,0,0,1085,1087,1,0,0,0,1086,1088,5,75,0,0,1087,1086,1,0,0,
0,1087,1088,1,0,0,0,1088,181,1,0,0,0,1089,1097,3,194,97,0,1090,1097,3,200,
100,0,1091,1097,3,202,101,0,1092,1093,5,18,0,0,1093,1097,3,192,96,0,1094,
1097,3,20,10,0,1095,1097,5,1,0,0,1096,1089,1,0,0,0,1096,1090,1,0,0,0,1096,
1091,1,0,0,0,1096,1092,1,0,0,0,1096,1094,1,0,0,0,1096,1095,1,0,0,0,1097,
183,1,0,0,0,1098,1099,5,44,0,0,1099,1100,3,194,97,0,1100,1101,5,45,0,0,1101,
1102,3,192,96,0,1102,1103,5,46,0,0,1103,1107,5,113,0,0,1104,1106,3,2,1,0,
1105,1104,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,
1108,1117,1,0,0,0,1109,1107,1,0,0,0,1110,1114,3,186,93,0,1111,1113,3,2,1,
0,1112,1111,1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,0,1114,1115,1,0,0,
0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1117,1110,1,0,0,0,1117,1118,1,0,0,
0,1118,1119,1,0,0,0,1119,1120,5,47,0,0,1120,185,1,0,0,0,1121,1125,5,48,0,
0,1122,1123,5,49,0,0,1123,1125,3,176,88,0,1124,1121,1,0,0,0,1124,1122,1,
0,0,0,1125,1126,1,0,0,0,1126,1127,5,113,0,0,1127,187,1,0,0,0,1128,1129,5,
50,0,0,1129,1133,5,113,0,0,1130,1132,3,2,1,0,1131,1130,1,0,0,0,1132,1135,
1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1136,1,0,0,0,1135,1133,
1,0,0,0,1136,1141,3,186,93,0,1137,1140,3,186,93,0,1138,1140,3,2,1,0,1139,
1137,1,0,0,0,1139,1138,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,
1142,1,0,0,0,1142,1144,1,0,0,0,1143,1141,1,0,0,0,1144,1145,5,51,0,0,1145,
189,1,0,0,0,1146,1147,5,52,0,0,1147,1151,5,113,0,0,1148,1150,9,0,0,0,1149,
1148,1,0,0,0,1150,1153,1,0,0,0,1151,1152,1,0,0,0,1151,1149,1,0,0,0,1152,
1154,1,0,0,0,1153,1151,1,0,0,0,1154,1155,5,53,0,0,1155,191,1,0,0,0,1156,
1157,5,76,0,0,1157,1158,3,194,97,0,1158,1159,5,77,0,0,1159,193,1,0,0,0,1160,
1161,7,6,0,0,1161,195,1,0,0,0,1162,1163,5,102,0,0,1163,197,1,0,0,0,1164,
1165,7,9,0,0,1165,199,1,0,0,0,1166,1169,3,194,97,0,1167,1169,5,1,0,0,1168,
1166,1,0,0,0,1168,1167,1,0,0,0,1169,1170,1,0,0,0,1170,1171,5,81,0,0,1171,
1172,3,198,99,0,1172,201,1,0,0,0,1173,1181,5,93,0,0,1174,1181,5,94,0,0,1175,
1181,5,96,0,0,1176,1181,3,204,102,0,1177,1181,3,206,103,0,1178,1181,5,91,
0,0,1179,1181,5,92,0,0,1180,1173,1,0,0,0,1180,1174,1,0,0,0,1180,1175,1,0,
0,0,1180,1176,1,0,0,0,1180,1177,1,0,0,0,1180,1178,1,0,0,0,1180,1179,1,0,
0,0,1181,203,1,0,0,0,1182,1187,5,97,0,0,1183,1187,5,98,0,0,1184,1185,5,99,
0,0,1185,1187,5,99,0,0,1186,1182,1,0,0,0,1186,1183,1,0,0,0,1186,1184,1,0,
0,0,1187,205,1,0,0,0,1188,1189,7,10,0,0,1189,207,1,0,0,0,1190,1191,3,194,
97,0,1191,1192,5,81,0,0,1192,1193,5,103,0,0,1193,209,1,0,0,0,1194,1195,5,
102,0,0,1195,1196,5,81,0,0,1196,1197,5,105,0,0,1197,211,1,0,0,0,132,215,
222,227,242,248,255,259,264,268,275,280,284,291,300,307,312,318,324,328,
332,337,342,349,361,366,370,377,381,388,391,398,402,410,416,425,432,435,
446,450,456,462,466,470,476,481,486,491,497,505,507,512,522,527,539,545,
552,554,560,578,587,592,596,603,609,616,622,629,650,656,663,670,678,757,
762,768,773,778,783,788,793,798,803,808,813,839,851,865,879,892,899,902,
926,938,945,953,957,962,966,972,981,986,993,995,1005,1012,1019,1021,1026,
1031,1036,1040,1045,1050,1055,1060,1065,1070,1073,1084,1087,1096,1107,1114,
1117,1124,1133,1139,1141,1151,1168,1180,1186];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class ASLParser extends antlr4.Parser {

    static grammarFileName = "ASL.g4";
    static literalNames = [ null, "'this'", "'create'", "'unique'", "'with'", 
                            "'delete'", "'UNDEFINED'", "'find-only'", "'find-one'", 
                            "'find-all'", "'find'", "'where'", "'equals'", 
                            "'not-equals'", "'less-than'", "'greater-than'", 
                            "'reverse ordered by'", "'ordered by'", "'countof'", 
                            "'and'", "'or'", "'not'", "'link'", "'using'", 
                            "'unlink'", "'->'", "'%generate'", "'to'", "'Create_Timer'", 
                            "'Delete_Timer'", "'TIM10:Set_Absolute_Timer'", 
                            "'TIM1:Set_Timer'", "'TIM2:Reset_Timer'", "'TIM3:Set_Chimer'", 
                            "'current-date'", "'current-time'", "'switch'", 
                            "'case'", "'default'", "'endswitch'", "'if'", 
                            "'then'", "'else'", "'endif'", "'for'", "'in'", 
                            "'do'", "'endfor'", "'break'", "'breakif'", 
                            "'loop'", "'endloop'", "'$INLINE'", "'$ENDINLINE'", 
                            "'define'", "'structure'", "'enddefine'", "'is'", 
                            "'append'", "'Integer'", "'Real'", "'Boolean'", 
                            "'Text'", "'Date'", "'Time_of_Day'", "'!='", 
                            "'='", "'<='", "'>='", "'<'", "'>'", "'&'", 
                            "'|'", "'!'", "'('", "')'", "'{'", "'}'", "'['", 
                            "']'", "'_'", "'.'", "';'", "':'", "','", "'#'", 
                            "'\\'", "'union-of'", "'disunion-of'", "'intersection-of'", 
                            "'not-in'", null, null, null, null, null, null, 
                            null, null, "'\"'", null, "'instance_id'" ];
    static symbolicNames = [ null, "THIS", "CREATE", "UNIQUE", "WITH", "DELETE", 
                             "UNDEFINED", "FIND_ONLY", "FIND_ONE", "FIND_ALL", 
                             "FIND", "WHERE", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
                             "GREATER_THAN", "REVERSE_ORDERED_BY", "ORDERED_BY", 
                             "COUNTOF", "AND", "OR", "NOT", "LINK", "USING", 
                             "UNLINK", "RELATIONSHIP_TRAVERSAL", "GENERATE", 
                             "TO", "CREATE_TIMER", "DELETE_TIMER", "TIM10", 
                             "TIM1", "TIM2", "TIM3", "CURRENT_DATE", "CURRENT_TIME", 
                             "SWITCH", "CASE", "DEFAULT", "ENDSWITCH", "IF", 
                             "THEN", "ELSE", "ENDIF", "FOR", "IN", "DO", 
                             "ENDFOR", "BREAK", "BREAKIF", "LOOP", "ENDLOOP", 
                             "INLINE", "END_INLINE", "DEFINE", "STRUCTURE", 
                             "ENDDEFINE", "IS", "APPEND", "INTEGER", "REAL", 
                             "BOOLEAN", "TEXT", "DATE", "TIME", "NEQ", "EQ", 
                             "LTE", "GTE", "LT", "GT", "LOGICAL_AND", "LOGICAL_OR", 
                             "LOGICAL_NOT", "L_PAREN", "R_PAREN", "L_CURLY", 
                             "R_CURLY", "L_SQUARE", "R_SQUARE", "UNDERSCORE", 
                             "DOT", "SEMI_COLON", "COLON", "COMMA", "HASH", 
                             "BACKSLASH", "UNION_OF", "DISUNION_OF", "INTERSECTION_OF", 
                             "NOT_IN", "DATE_VALUE", "TIME_VALUE", "INTEGER_VALUE", 
                             "REAL_VALUE", "ARITHMETIC_OPERATOR", "BOOLEAN_VALUE", 
                             "LOWERCASE_TEXT", "OTHER_TEXT", "QUOTE", "R_NUMBER", 
                             "INSTANCE_ID", "UPPERCASE_ID", "LOWERCASE_ID", 
                             "LEADING_UPPERCASE_ID", "LEADING_FIRST_UPPERCASE_ID", 
                             "UPPERCASE_NUMBER_ID", "LOWERCASE_NUMBER_ID", 
                             "UPPERCASE_OR_NUMBER_ID", "NATIVE_LANGUAGE", 
                             "CONTINUATION", "WHITESPACE", "COMMENT", "NEWLINE", 
                             "OTHER" ];
    static ruleNames = [ "asl", "statement", "simple_statement", "sequential_logic_statement", 
                         "assignment_statement", "constant_assignment", 
                         "date_time_assignment", "variable_assignment", 
                         "object_attribute_assignment", "arithmetic_assignment", 
                         "arithmetic_expression", "arithmetic_component", 
                         "countof_function", "create_statement", "attribute_assignments", 
                         "attribute_assignment", "delete_statement", "find_statement", 
                         "find_instance_statement", "find_set_statement", 
                         "object_condition", "equality_operator", "logical_operator", 
                         "relationship_navigation", "associative_relationship_navigation", 
                         "relationship_link", "relationship_unlink", "relationship_spec", 
                         "qualified_relationship", "relationship_role", 
                         "event_generation", "internal_event_generation", 
                         "external_event_generation", "event_specification", 
                         "external_event_specification", "event_parameters", 
                         "event_parameter", "operation_invocation", "object_operation", 
                         "domain_operation", "bridge_operation", "oo_specification", 
                         "do_specification", "bo_specification", "output_parameter_list", 
                         "output_parameter", "input_parameter_list", "input_parameter", 
                         "timer_operation", "timer_creation", "timer_deletion", 
                         "set_relative_timer", "set_absolute_timer", "set_recurring_timer", 
                         "timer_reset", "timer_id", "time_to_fire", "return_event", 
                         "target_instance", "fire_year", "fire_month", "fire_date", 
                         "fire_hour", "fire_minute", "fire_second", "start_time", 
                         "period", "set_operation", "unique_set", "set_combination", 
                         "set_difference", "struct_statement", "struct_definition", 
                         "member_name", "member_type", "struct_instantiation", 
                         "struct_assembly", "struct_for_loop", "order_struct", 
                         "struct_subset", "struct_condition", "struct_", 
                         "struct_type", "value_list", "struct_value", "variable_list", 
                         "switch_statement", "if_statement", "logical_condition", 
                         "compound_logical_condition", "simple_logical_condition", 
                         "component", "for_loop", "break_statement", "loop_statement", 
                         "native_language_section", "set_variable", "variable", 
                         "object_name", "attribute", "object_attribute", 
                         "constant", "text_string", "enum_value", "structure_field", 
                         "user_defined_type" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ASLParser.ruleNames;
        this.literalNames = ASLParser.literalNames;
        this.symbolicNames = ASLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	asl() {
	    let localctx = new AslContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ASLParser.RULE_asl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 213; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 212;
	            this.statement();
	            this.state = 215; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0));
	        this.state = 217;
	        this.match(ASLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ASLParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 219;
	            this.simple_statement();
	            break;

	        case 2:
	            this.state = 220;
	            this.sequential_logic_statement();
	            break;

	        case 3:
	            this.state = 221;
	            this.native_language_section();
	            break;

	        }
	        this.state = 225; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 224;
	            this.match(ASLParser.NEWLINE);
	            this.state = 227; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ASLParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_statement() {
	    let localctx = new Simple_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ASLParser.RULE_simple_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 229;
	            this.assignment_statement();
	            break;

	        case 2:
	            this.state = 230;
	            this.create_statement();
	            break;

	        case 3:
	            this.state = 231;
	            this.delete_statement();
	            break;

	        case 4:
	            this.state = 232;
	            this.find_statement();
	            break;

	        case 5:
	            this.state = 233;
	            this.relationship_navigation();
	            break;

	        case 6:
	            this.state = 234;
	            this.associative_relationship_navigation();
	            break;

	        case 7:
	            this.state = 235;
	            this.relationship_link();
	            break;

	        case 8:
	            this.state = 236;
	            this.relationship_unlink();
	            break;

	        case 9:
	            this.state = 237;
	            this.event_generation();
	            break;

	        case 10:
	            this.state = 238;
	            this.operation_invocation();
	            break;

	        case 11:
	            this.state = 239;
	            this.timer_operation();
	            break;

	        case 12:
	            this.state = 240;
	            this.set_operation();
	            break;

	        case 13:
	            this.state = 241;
	            this.struct_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequential_logic_statement() {
	    let localctx = new Sequential_logic_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ASLParser.RULE_sequential_logic_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 248;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.SWITCH:
	            this.state = 244;
	            this.switch_statement();
	            break;
	        case ASLParser.IF:
	            this.state = 245;
	            this.if_statement();
	            break;
	        case ASLParser.FOR:
	            this.state = 246;
	            this.for_loop();
	            break;
	        case ASLParser.LOOP:
	            this.state = 247;
	            this.loop_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment_statement() {
	    let localctx = new Assignment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ASLParser.RULE_assignment_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 250;
	            this.constant_assignment();
	            break;

	        case 2:
	            this.state = 251;
	            this.date_time_assignment();
	            break;

	        case 3:
	            this.state = 252;
	            this.variable_assignment();
	            break;

	        case 4:
	            this.state = 253;
	            this.object_attribute_assignment();
	            break;

	        case 5:
	            this.state = 254;
	            this.arithmetic_assignment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_assignment() {
	    let localctx = new Constant_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ASLParser.RULE_constant_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 257;
	            this.variable();
	            break;

	        case 2:
	            this.state = 258;
	            this.object_attribute();
	            break;

	        }
	        this.state = 261;
	        this.match(ASLParser.EQ);
	        this.state = 264;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.DATE_VALUE:
	        case ASLParser.TIME_VALUE:
	        case ASLParser.INTEGER_VALUE:
	        case ASLParser.REAL_VALUE:
	        case ASLParser.BOOLEAN_VALUE:
	        case ASLParser.LOWERCASE_TEXT:
	        case ASLParser.OTHER_TEXT:
	        case ASLParser.QUOTE:
	        case ASLParser.UPPERCASE_ID:
	        case ASLParser.UPPERCASE_OR_NUMBER_ID:
	            this.state = 262;
	            this.constant();
	            break;
	        case ASLParser.UNDEFINED:
	            this.state = 263;
	            this.match(ASLParser.UNDEFINED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	date_time_assignment() {
	    let localctx = new Date_time_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ASLParser.RULE_date_time_assignment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 266;
	            this.variable();
	            break;

	        case 2:
	            this.state = 267;
	            this.object_attribute();
	            break;

	        }
	        this.state = 270;
	        this.match(ASLParser.EQ);
	        this.state = 271;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.CURRENT_DATE || _la===ASLParser.CURRENT_TIME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_assignment() {
	    let localctx = new Variable_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ASLParser.RULE_variable_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 273;
	            this.variable();
	            break;

	        case 2:
	            this.state = 274;
	            this.object_attribute();
	            break;

	        }
	        this.state = 277;
	        this.match(ASLParser.EQ);
	        this.state = 280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 278;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 279;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_attribute_assignment() {
	    let localctx = new Object_attribute_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ASLParser.RULE_object_attribute_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 282;
	            this.variable();
	            break;

	        case 2:
	            this.state = 283;
	            this.object_attribute();
	            break;

	        }
	        this.state = 286;
	        this.match(ASLParser.EQ);
	        this.state = 287;
	        this.object_attribute();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_assignment() {
	    let localctx = new Arithmetic_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ASLParser.RULE_arithmetic_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 289;
	            this.variable();
	            break;

	        case 2:
	            this.state = 290;
	            this.object_attribute();
	            break;

	        }
	        this.state = 293;
	        this.match(ASLParser.EQ);
	        this.state = 294;
	        this.arithmetic_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_expression() {
	    let localctx = new Arithmetic_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ASLParser.RULE_arithmetic_expression);
	    try {
	        this.state = 312;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 296;
	            this.arithmetic_component();
	            this.state = 297;
	            this.match(ASLParser.ARITHMETIC_OPERATOR);
	            this.state = 300;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 298;
	                this.arithmetic_component();
	                break;

	            case 2:
	                this.state = 299;
	                this.arithmetic_expression();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 302;
	            this.match(ASLParser.L_PAREN);
	            this.state = 303;
	            this.arithmetic_component();
	            this.state = 304;
	            this.match(ASLParser.ARITHMETIC_OPERATOR);
	            this.state = 307;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 305;
	                this.arithmetic_component();
	                break;

	            case 2:
	                this.state = 306;
	                this.arithmetic_expression();
	                break;

	            }
	            this.state = 309;
	            this.match(ASLParser.R_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 311;
	            this.countof_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_component() {
	    let localctx = new Arithmetic_componentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ASLParser.RULE_arithmetic_component);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 314;
	            this.variable();
	            break;

	        case 2:
	            this.state = 315;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 316;
	            this.constant();
	            break;

	        case 4:
	            this.state = 317;
	            this.countof_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countof_function() {
	    let localctx = new Countof_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ASLParser.RULE_countof_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.match(ASLParser.COUNTOF);
	        this.state = 328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.L_CURLY:
	            this.state = 321;
	            this.set_variable();
	            break;
	        case ASLParser.THIS:
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 324;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 322;
	                this.variable();
	                break;
	            case ASLParser.THIS:
	                this.state = 323;
	                this.match(ASLParser.THIS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 326;
	            this.match(ASLParser.RELATIONSHIP_TRAVERSAL);
	            this.state = 327;
	            this.relationship_spec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_statement() {
	    let localctx = new Create_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ASLParser.RULE_create_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 330;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 331;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 334;
	        this.match(ASLParser.EQ);
	        this.state = 335;
	        this.match(ASLParser.CREATE);
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.UNIQUE) {
	            this.state = 336;
	            this.match(ASLParser.UNIQUE);
	        }

	        this.state = 339;
	        this.object_name();
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.WITH) {
	            this.state = 340;
	            this.match(ASLParser.WITH);
	            this.state = 341;
	            this.attribute_assignments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_assignments() {
	    let localctx = new Attribute_assignmentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ASLParser.RULE_attribute_assignments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.attribute_assignment();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.LOGICAL_AND) {
	            this.state = 345;
	            this.match(ASLParser.LOGICAL_AND);
	            this.state = 346;
	            this.attribute_assignment();
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_assignment() {
	    let localctx = new Attribute_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ASLParser.RULE_attribute_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this.attribute();
	        this.state = 353;
	        this.match(ASLParser.EQ);
	        this.state = 361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 354;
	            this.constant();
	            break;

	        case 2:
	            this.state = 355;
	            this.variable();
	            break;

	        case 3:
	            this.state = 356;
	            this.object_attribute();
	            break;

	        case 4:
	            this.state = 357;
	            this.arithmetic_expression();
	            break;

	        case 5:
	            this.state = 358;
	            this.match(ASLParser.CURRENT_DATE);
	            break;

	        case 6:
	            this.state = 359;
	            this.match(ASLParser.CURRENT_TIME);
	            break;

	        case 7:
	            this.state = 360;
	            this.match(ASLParser.UNDEFINED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_statement() {
	    let localctx = new Delete_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ASLParser.RULE_delete_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 363;
	        this.match(ASLParser.DELETE);
	        this.state = 366;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 364;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 365;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	find_statement() {
	    let localctx = new Find_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ASLParser.RULE_find_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 368;
	            this.find_instance_statement();
	            break;
	        case ASLParser.L_CURLY:
	            this.state = 369;
	            this.find_set_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	find_instance_statement() {
	    let localctx = new Find_instance_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ASLParser.RULE_find_instance_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.variable();
	        this.state = 373;
	        this.match(ASLParser.EQ);
	        this.state = 374;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.FIND_ONLY || _la===ASLParser.FIND_ONE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.UPPERCASE_ID:
	            this.state = 375;
	            this.object_name();
	            break;
	        case ASLParser.L_CURLY:
	            this.state = 376;
	            this.set_variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 381;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.WHERE) {
	            this.state = 379;
	            this.match(ASLParser.WHERE);
	            this.state = 380;
	            this.object_condition();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	find_set_statement() {
	    let localctx = new Find_set_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ASLParser.RULE_find_set_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.set_variable();
	        this.state = 384;
	        this.match(ASLParser.EQ);
	        this.state = 398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.FIND:
	        case ASLParser.L_CURLY:
	            this.state = 391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 385;
	                this.match(ASLParser.FIND);
	                this.state = 386;
	                this.object_name();
	                break;

	            case 2:
	                this.state = 388;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ASLParser.FIND) {
	                    this.state = 387;
	                    this.match(ASLParser.FIND);
	                }

	                this.state = 390;
	                this.set_variable();
	                break;

	            }
	            this.state = 393;
	            this.match(ASLParser.WHERE);
	            this.state = 394;
	            this.object_condition();
	            break;
	        case ASLParser.FIND_ALL:
	            this.state = 396;
	            this.match(ASLParser.FIND_ALL);
	            this.state = 397;
	            this.object_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY) {
	            this.state = 400;
	            _la = this._input.LA(1);
	            if(!(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 401;
	            this.attribute();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_condition() {
	    let localctx = new Object_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ASLParser.RULE_object_condition);
	    var _la = 0; // Token type
	    try {
	        this.state = 435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.INSTANCE_ID:
	        case ASLParser.UPPERCASE_ID:
	        case ASLParser.LEADING_UPPERCASE_ID:
	        case ASLParser.LEADING_FIRST_UPPERCASE_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 404;
	            this.attribute();
	            this.state = 405;
	            this.logical_operator();
	            this.state = 410;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 406;
	                this.variable();
	                break;

	            case 2:
	                this.state = 407;
	                this.object_attribute();
	                break;

	            case 3:
	                this.state = 408;
	                this.constant();
	                break;

	            case 4:
	                this.state = 409;
	                this.match(ASLParser.UNDEFINED);
	                break;

	            }
	            this.state = 416;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 412;
	                    _la = this._input.LA(1);
	                    if(!(_la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 413;
	                    this.object_condition(); 
	                }
	                this.state = 418;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	            }

	            break;
	        case ASLParser.L_PAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 419;
	            this.match(ASLParser.L_PAREN);
	            this.state = 420;
	            this.attribute();
	            this.state = 421;
	            this.logical_operator();
	            this.state = 425;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 422;
	                this.variable();
	                break;
	            case ASLParser.DATE_VALUE:
	            case ASLParser.TIME_VALUE:
	            case ASLParser.INTEGER_VALUE:
	            case ASLParser.REAL_VALUE:
	            case ASLParser.BOOLEAN_VALUE:
	            case ASLParser.LOWERCASE_TEXT:
	            case ASLParser.OTHER_TEXT:
	            case ASLParser.QUOTE:
	            case ASLParser.UPPERCASE_ID:
	            case ASLParser.UPPERCASE_OR_NUMBER_ID:
	                this.state = 423;
	                this.constant();
	                break;
	            case ASLParser.UNDEFINED:
	                this.state = 424;
	                this.match(ASLParser.UNDEFINED);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 427;
	            this.match(ASLParser.R_PAREN);
	            this.state = 432;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 428;
	                    _la = this._input.LA(1);
	                    if(!(_la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 429;
	                    this.object_condition(); 
	                }
	                this.state = 434;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equality_operator() {
	    let localctx = new Equality_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ASLParser.RULE_equality_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.EQUALS || _la===ASLParser.NOT_EQUALS || _la===ASLParser.NEQ || _la===ASLParser.EQ)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_operator() {
	    let localctx = new Logical_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ASLParser.RULE_logical_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.EQUALS:
	        case ASLParser.NOT_EQUALS:
	        case ASLParser.NEQ:
	        case ASLParser.EQ:
	            this.state = 439;
	            this.equality_operator();
	            break;
	        case ASLParser.LT:
	            this.state = 440;
	            this.match(ASLParser.LT);
	            break;
	        case ASLParser.GT:
	            this.state = 441;
	            this.match(ASLParser.GT);
	            break;
	        case ASLParser.LTE:
	            this.state = 442;
	            this.match(ASLParser.LTE);
	            break;
	        case ASLParser.GTE:
	            this.state = 443;
	            this.match(ASLParser.GTE);
	            break;
	        case ASLParser.LESS_THAN:
	            this.state = 444;
	            this.match(ASLParser.LESS_THAN);
	            break;
	        case ASLParser.GREATER_THAN:
	            this.state = 445;
	            this.match(ASLParser.GREATER_THAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationship_navigation() {
	    let localctx = new Relationship_navigationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ASLParser.RULE_relationship_navigation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 448;
	            this.variable();
	            break;
	        case ASLParser.L_CURLY:
	            this.state = 449;
	            this.set_variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 452;
	        this.match(ASLParser.EQ);
	        this.state = 456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 453;
	            this.variable();
	            break;
	        case ASLParser.L_CURLY:
	            this.state = 454;
	            this.set_variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 455;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 460; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 458;
	            this.match(ASLParser.RELATIONSHIP_TRAVERSAL);
	            this.state = 459;
	            this.relationship_spec();
	            this.state = 462; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ASLParser.RELATIONSHIP_TRAVERSAL);
	        this.state = 466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.WHERE) {
	            this.state = 464;
	            this.match(ASLParser.WHERE);
	            this.state = 465;
	            this.object_condition();
	        }

	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY) {
	            this.state = 468;
	            _la = this._input.LA(1);
	            if(!(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 469;
	            this.attribute();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	associative_relationship_navigation() {
	    let localctx = new Associative_relationship_navigationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ASLParser.RULE_associative_relationship_navigation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.variable();
	        this.state = 473;
	        this.match(ASLParser.EQ);
	        this.state = 476;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 474;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 475;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 478;
	        this.match(ASLParser.AND);
	        this.state = 481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 479;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 480;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 483;
	        this.match(ASLParser.RELATIONSHIP_TRAVERSAL);
	        this.state = 486;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 484;
	            this.qualified_relationship();
	            break;

	        case 2:
	            this.state = 485;
	            this.relationship_role();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationship_link() {
	    let localctx = new Relationship_linkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ASLParser.RULE_relationship_link);
	    var _la = 0; // Token type
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 488;
	            this.match(ASLParser.LINK);
	            this.state = 491;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 489;
	                this.variable();
	                break;
	            case ASLParser.THIS:
	                this.state = 490;
	                this.match(ASLParser.THIS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 493;
	            this.relationship_spec();
	            this.state = 494;
	            this.variable();
	            this.state = 497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ASLParser.USING) {
	                this.state = 495;
	                this.match(ASLParser.USING);
	                this.state = 496;
	                this.variable();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 499;
	            this.match(ASLParser.LINK);
	            this.state = 500;
	            this.variable();
	            this.state = 501;
	            this.relationship_spec();
	            this.state = 502;
	            this.match(ASLParser.THIS);
	            this.state = 505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ASLParser.USING) {
	                this.state = 503;
	                this.match(ASLParser.USING);
	                this.state = 504;
	                this.variable();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationship_unlink() {
	    let localctx = new Relationship_unlinkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ASLParser.RULE_relationship_unlink);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.match(ASLParser.UNLINK);
	            this.state = 512;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 510;
	                this.variable();
	                break;
	            case ASLParser.THIS:
	                this.state = 511;
	                this.match(ASLParser.THIS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 514;
	            this.relationship_spec();
	            this.state = 515;
	            this.variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 517;
	            this.match(ASLParser.UNLINK);
	            this.state = 518;
	            this.variable();
	            this.state = 519;
	            this.relationship_spec();
	            this.state = 520;
	            this.match(ASLParser.THIS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationship_spec() {
	    let localctx = new Relationship_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ASLParser.RULE_relationship_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 524;
	            this.match(ASLParser.R_NUMBER);
	            break;

	        case 2:
	            this.state = 525;
	            this.qualified_relationship();
	            break;

	        case 3:
	            this.state = 526;
	            this.relationship_role();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_relationship() {
	    let localctx = new Qualified_relationshipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ASLParser.RULE_qualified_relationship);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.match(ASLParser.R_NUMBER);
	        this.state = 530;
	        this.match(ASLParser.DOT);
	        this.state = 531;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationship_role() {
	    let localctx = new Relationship_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ASLParser.RULE_relationship_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(ASLParser.R_NUMBER);
	        this.state = 534;
	        this.match(ASLParser.DOT);
	        this.state = 535;
	        this.match(ASLParser.LOWERCASE_TEXT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_generation() {
	    let localctx = new Event_generationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ASLParser.RULE_event_generation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 537;
	            this.internal_event_generation();
	            break;

	        case 2:
	            this.state = 538;
	            this.external_event_generation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	internal_event_generation() {
	    let localctx = new Internal_event_generationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ASLParser.RULE_internal_event_generation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(ASLParser.GENERATE);
	        this.state = 542;
	        this.event_specification();
	        this.state = 543;
	        this.match(ASLParser.L_PAREN);
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || _la===ASLParser.UNDEFINED || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ASLParser.DATE_VALUE - 91)) | (1 << (ASLParser.TIME_VALUE - 91)) | (1 << (ASLParser.INTEGER_VALUE - 91)) | (1 << (ASLParser.REAL_VALUE - 91)) | (1 << (ASLParser.BOOLEAN_VALUE - 91)) | (1 << (ASLParser.LOWERCASE_TEXT - 91)) | (1 << (ASLParser.OTHER_TEXT - 91)) | (1 << (ASLParser.QUOTE - 91)) | (1 << (ASLParser.UPPERCASE_ID - 91)) | (1 << (ASLParser.LOWERCASE_ID - 91)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 91)) | (1 << (ASLParser.UPPERCASE_OR_NUMBER_ID - 91)))) !== 0)) {
	            this.state = 544;
	            this.event_parameters();
	        }

	        this.state = 547;
	        this.match(ASLParser.R_PAREN);
	        this.state = 548;
	        this.match(ASLParser.SEMI_COLON);
	        this.state = 554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.TO) {
	            this.state = 549;
	            this.match(ASLParser.TO);
	            this.state = 552;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 550;
	                this.variable();
	                break;
	            case ASLParser.THIS:
	                this.state = 551;
	                this.match(ASLParser.THIS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_event_generation() {
	    let localctx = new External_event_generationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ASLParser.RULE_external_event_generation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.match(ASLParser.GENERATE);
	        this.state = 557;
	        this.external_event_specification();
	        this.state = 558;
	        this.match(ASLParser.L_PAREN);
	        this.state = 560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || _la===ASLParser.UNDEFINED || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ASLParser.DATE_VALUE - 91)) | (1 << (ASLParser.TIME_VALUE - 91)) | (1 << (ASLParser.INTEGER_VALUE - 91)) | (1 << (ASLParser.REAL_VALUE - 91)) | (1 << (ASLParser.BOOLEAN_VALUE - 91)) | (1 << (ASLParser.LOWERCASE_TEXT - 91)) | (1 << (ASLParser.OTHER_TEXT - 91)) | (1 << (ASLParser.QUOTE - 91)) | (1 << (ASLParser.UPPERCASE_ID - 91)) | (1 << (ASLParser.LOWERCASE_ID - 91)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 91)) | (1 << (ASLParser.UPPERCASE_OR_NUMBER_ID - 91)))) !== 0)) {
	            this.state = 559;
	            this.event_parameters();
	        }

	        this.state = 562;
	        this.match(ASLParser.R_PAREN);
	        this.state = 563;
	        this.match(ASLParser.SEMI_COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_specification() {
	    let localctx = new Event_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ASLParser.RULE_event_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	        this.state = 566;
	        this.match(ASLParser.COLON);
	        this.state = 567;
	        this.match(ASLParser.LEADING_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_event_specification() {
	    let localctx = new External_event_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ASLParser.RULE_external_event_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	        this.state = 570;
	        this.match(ASLParser.COLON);
	        this.state = 571;
	        this.match(ASLParser.LEADING_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_parameters() {
	    let localctx = new Event_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ASLParser.RULE_event_parameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 573;
	        this.event_parameter();
	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.COMMA) {
	            this.state = 574;
	            this.match(ASLParser.COMMA);
	            this.state = 575;
	            this.event_parameter();
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_parameter() {
	    let localctx = new Event_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ASLParser.RULE_event_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 581;
	            this.variable();
	            break;

	        case 2:
	            this.state = 582;
	            this.constant();
	            break;

	        case 3:
	            this.state = 583;
	            this.match(ASLParser.THIS);
	            break;

	        case 4:
	            this.state = 584;
	            this.object_attribute();
	            break;

	        case 5:
	            this.state = 585;
	            this.structure_field();
	            break;

	        case 6:
	            this.state = 586;
	            this.match(ASLParser.UNDEFINED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operation_invocation() {
	    let localctx = new Operation_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ASLParser.RULE_operation_invocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 589;
	            this.object_operation();
	            break;

	        case 2:
	            this.state = 590;
	            this.domain_operation();
	            break;

	        case 3:
	            this.state = 591;
	            this.bridge_operation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_operation() {
	    let localctx = new Object_operationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ASLParser.RULE_object_operation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 594;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 595;
	            this.output_parameter_list();
	        }

	        this.state = 598;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 599;
	        this.match(ASLParser.EQ);
	        this.state = 600;
	        this.oo_specification();
	        this.state = 601;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.DATE_VALUE - 76)) | (1 << (ASLParser.TIME_VALUE - 76)) | (1 << (ASLParser.INTEGER_VALUE - 76)) | (1 << (ASLParser.REAL_VALUE - 76)) | (1 << (ASLParser.BOOLEAN_VALUE - 76)) | (1 << (ASLParser.LOWERCASE_TEXT - 76)) | (1 << (ASLParser.OTHER_TEXT - 76)) | (1 << (ASLParser.QUOTE - 76)) | (1 << (ASLParser.UPPERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0) || _la===ASLParser.UPPERCASE_OR_NUMBER_ID) {
	            this.state = 602;
	            this.input_parameter_list();
	        }

	        this.state = 605;
	        this.match(ASLParser.R_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domain_operation() {
	    let localctx = new Domain_operationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ASLParser.RULE_domain_operation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 608;
	            this.output_parameter_list();
	        }

	        this.state = 611;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 612;
	        this.match(ASLParser.EQ);
	        this.state = 613;
	        this.do_specification();
	        this.state = 614;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 616;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.DATE_VALUE - 76)) | (1 << (ASLParser.TIME_VALUE - 76)) | (1 << (ASLParser.INTEGER_VALUE - 76)) | (1 << (ASLParser.REAL_VALUE - 76)) | (1 << (ASLParser.BOOLEAN_VALUE - 76)) | (1 << (ASLParser.LOWERCASE_TEXT - 76)) | (1 << (ASLParser.OTHER_TEXT - 76)) | (1 << (ASLParser.QUOTE - 76)) | (1 << (ASLParser.UPPERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0) || _la===ASLParser.UPPERCASE_OR_NUMBER_ID) {
	            this.state = 615;
	            this.input_parameter_list();
	        }

	        this.state = 618;
	        this.match(ASLParser.R_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bridge_operation() {
	    let localctx = new Bridge_operationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ASLParser.RULE_bridge_operation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 622;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 621;
	            this.output_parameter_list();
	        }

	        this.state = 624;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 625;
	        this.match(ASLParser.EQ);
	        this.state = 626;
	        this.bo_specification();
	        this.state = 627;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.THIS || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.DATE_VALUE - 76)) | (1 << (ASLParser.TIME_VALUE - 76)) | (1 << (ASLParser.INTEGER_VALUE - 76)) | (1 << (ASLParser.REAL_VALUE - 76)) | (1 << (ASLParser.BOOLEAN_VALUE - 76)) | (1 << (ASLParser.LOWERCASE_TEXT - 76)) | (1 << (ASLParser.OTHER_TEXT - 76)) | (1 << (ASLParser.QUOTE - 76)) | (1 << (ASLParser.UPPERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0) || _la===ASLParser.UPPERCASE_OR_NUMBER_ID) {
	            this.state = 628;
	            this.input_parameter_list();
	        }

	        this.state = 631;
	        this.match(ASLParser.R_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oo_specification() {
	    let localctx = new Oo_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ASLParser.RULE_oo_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	        this.state = 634;
	        this.match(ASLParser.COLON);
	        this.state = 635;
	        this.match(ASLParser.LEADING_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_specification() {
	    let localctx = new Do_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ASLParser.RULE_do_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	        this.state = 638;
	        this.match(ASLParser.COLON);
	        this.state = 639;
	        this.match(ASLParser.LEADING_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bo_specification() {
	    let localctx = new Bo_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ASLParser.RULE_bo_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	        this.state = 642;
	        this.match(ASLParser.COLON);
	        this.state = 643;
	        this.match(ASLParser.LEADING_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	output_parameter_list() {
	    let localctx = new Output_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ASLParser.RULE_output_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.output_parameter();
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.COMMA) {
	            this.state = 646;
	            this.match(ASLParser.COMMA);
	            this.state = 647;
	            this.output_parameter();
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	output_parameter() {
	    let localctx = new Output_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ASLParser.RULE_output_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 653;
	            this.variable();
	            break;

	        case 2:
	            this.state = 654;
	            this.set_variable();
	            break;

	        case 3:
	            this.state = 655;
	            this.object_attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	input_parameter_list() {
	    let localctx = new Input_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ASLParser.RULE_input_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.input_parameter();
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.COMMA) {
	            this.state = 659;
	            this.match(ASLParser.COMMA);
	            this.state = 660;
	            this.input_parameter();
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	input_parameter() {
	    let localctx = new Input_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ASLParser.RULE_input_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 666;
	            this.variable();
	            break;

	        case 2:
	            this.state = 667;
	            this.set_variable();
	            break;

	        case 3:
	            this.state = 668;
	            this.constant();
	            break;

	        case 4:
	            this.state = 669;
	            this.object_attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timer_operation() {
	    let localctx = new Timer_operationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ASLParser.RULE_timer_operation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 672;
	            this.timer_creation();
	            break;

	        case 2:
	            this.state = 673;
	            this.timer_deletion();
	            break;

	        case 3:
	            this.state = 674;
	            this.set_relative_timer();
	            break;

	        case 4:
	            this.state = 675;
	            this.set_absolute_timer();
	            break;

	        case 5:
	            this.state = 676;
	            this.set_recurring_timer();
	            break;

	        case 6:
	            this.state = 677;
	            this.timer_reset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timer_creation() {
	    let localctx = new Timer_creationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ASLParser.RULE_timer_creation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 681;
	        this.timer_id();
	        this.state = 682;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 683;
	        this.match(ASLParser.EQ);
	        this.state = 684;
	        this.match(ASLParser.CREATE_TIMER);
	        this.state = 685;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 686;
	        this.match(ASLParser.R_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timer_deletion() {
	    let localctx = new Timer_deletionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ASLParser.RULE_timer_deletion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 689;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 690;
	        this.match(ASLParser.EQ);
	        this.state = 691;
	        this.match(ASLParser.DELETE_TIMER);
	        this.state = 692;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 693;
	        this.timer_id();
	        this.state = 694;
	        this.match(ASLParser.R_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_relative_timer() {
	    let localctx = new Set_relative_timerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ASLParser.RULE_set_relative_timer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.match(ASLParser.GENERATE);
	        this.state = 697;
	        this.match(ASLParser.TIM1);
	        this.state = 698;
	        this.match(ASLParser.L_PAREN);
	        this.state = 699;
	        this.time_to_fire();
	        this.state = 700;
	        this.match(ASLParser.COMMA);
	        this.state = 701;
	        this.return_event();
	        this.state = 702;
	        this.match(ASLParser.COMMA);
	        this.state = 703;
	        this.target_instance();
	        this.state = 704;
	        this.match(ASLParser.R_PAREN);
	        this.state = 705;
	        this.match(ASLParser.SEMI_COLON);
	        this.state = 706;
	        this.match(ASLParser.TO);
	        this.state = 707;
	        this.timer_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_absolute_timer() {
	    let localctx = new Set_absolute_timerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ASLParser.RULE_set_absolute_timer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(ASLParser.GENERATE);
	        this.state = 710;
	        this.match(ASLParser.TIM10);
	        this.state = 711;
	        this.match(ASLParser.L_PAREN);
	        this.state = 712;
	        this.fire_year();
	        this.state = 713;
	        this.match(ASLParser.COMMA);
	        this.state = 714;
	        this.fire_month();
	        this.state = 715;
	        this.match(ASLParser.COMMA);
	        this.state = 716;
	        this.fire_date();
	        this.state = 717;
	        this.match(ASLParser.COMMA);
	        this.state = 718;
	        this.fire_hour();
	        this.state = 719;
	        this.match(ASLParser.COMMA);
	        this.state = 720;
	        this.fire_minute();
	        this.state = 721;
	        this.match(ASLParser.COMMA);
	        this.state = 722;
	        this.fire_second();
	        this.state = 723;
	        this.match(ASLParser.COMMA);
	        this.state = 724;
	        this.return_event();
	        this.state = 725;
	        this.match(ASLParser.COMMA);
	        this.state = 726;
	        this.target_instance();
	        this.state = 727;
	        this.match(ASLParser.R_PAREN);
	        this.state = 728;
	        this.match(ASLParser.SEMI_COLON);
	        this.state = 729;
	        this.match(ASLParser.TO);
	        this.state = 730;
	        this.timer_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_recurring_timer() {
	    let localctx = new Set_recurring_timerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ASLParser.RULE_set_recurring_timer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.match(ASLParser.GENERATE);
	        this.state = 733;
	        this.match(ASLParser.TIM3);
	        this.state = 734;
	        this.match(ASLParser.L_PAREN);
	        this.state = 735;
	        this.start_time();
	        this.state = 736;
	        this.match(ASLParser.COMMA);
	        this.state = 737;
	        this.period();
	        this.state = 738;
	        this.match(ASLParser.COMMA);
	        this.state = 739;
	        this.return_event();
	        this.state = 740;
	        this.match(ASLParser.COMMA);
	        this.state = 741;
	        this.target_instance();
	        this.state = 742;
	        this.match(ASLParser.R_PAREN);
	        this.state = 743;
	        this.match(ASLParser.SEMI_COLON);
	        this.state = 744;
	        this.match(ASLParser.TO);
	        this.state = 745;
	        this.timer_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timer_reset() {
	    let localctx = new Timer_resetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ASLParser.RULE_timer_reset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(ASLParser.GENERATE);
	        this.state = 748;
	        this.match(ASLParser.TIM2);
	        this.state = 749;
	        this.match(ASLParser.L_PAREN);
	        this.state = 750;
	        this.match(ASLParser.R_PAREN);
	        this.state = 751;
	        this.match(ASLParser.SEMI_COLON);
	        this.state = 752;
	        this.match(ASLParser.TO);
	        this.state = 753;
	        this.timer_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timer_id() {
	    let localctx = new Timer_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ASLParser.RULE_timer_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 755;
	            this.variable();
	            break;

	        case 2:
	            this.state = 756;
	            this.object_attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	time_to_fire() {
	    let localctx = new Time_to_fireContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ASLParser.RULE_time_to_fire);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 759;
	            this.variable();
	            break;

	        case 2:
	            this.state = 760;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 761;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_event() {
	    let localctx = new Return_eventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ASLParser.RULE_return_event);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.match(ASLParser.UPPERCASE_NUMBER_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target_instance() {
	    let localctx = new Target_instanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ASLParser.RULE_target_instance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 766;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 767;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_year() {
	    let localctx = new Fire_yearContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ASLParser.RULE_fire_year);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 770;
	            this.variable();
	            break;

	        case 2:
	            this.state = 771;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 772;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_month() {
	    let localctx = new Fire_monthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ASLParser.RULE_fire_month);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 775;
	            this.variable();
	            break;

	        case 2:
	            this.state = 776;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 777;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_date() {
	    let localctx = new Fire_dateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ASLParser.RULE_fire_date);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 780;
	            this.variable();
	            break;

	        case 2:
	            this.state = 781;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 782;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_hour() {
	    let localctx = new Fire_hourContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ASLParser.RULE_fire_hour);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 785;
	            this.variable();
	            break;

	        case 2:
	            this.state = 786;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 787;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_minute() {
	    let localctx = new Fire_minuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ASLParser.RULE_fire_minute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 790;
	            this.variable();
	            break;

	        case 2:
	            this.state = 791;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 792;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fire_second() {
	    let localctx = new Fire_secondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ASLParser.RULE_fire_second);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 795;
	            this.variable();
	            break;

	        case 2:
	            this.state = 796;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 797;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_time() {
	    let localctx = new Start_timeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ASLParser.RULE_start_time);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 800;
	            this.variable();
	            break;

	        case 2:
	            this.state = 801;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 802;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	period() {
	    let localctx = new PeriodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ASLParser.RULE_period);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 805;
	            this.variable();
	            break;

	        case 2:
	            this.state = 806;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 807;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_operation() {
	    let localctx = new Set_operationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ASLParser.RULE_set_operation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 810;
	            this.unique_set();
	            break;

	        case 2:
	            this.state = 811;
	            this.set_combination();
	            break;

	        case 3:
	            this.state = 812;
	            this.set_difference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unique_set() {
	    let localctx = new Unique_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ASLParser.RULE_unique_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.set_variable();
	        this.state = 816;
	        this.match(ASLParser.EQ);
	        this.state = 817;
	        this.match(ASLParser.UNIQUE);
	        this.state = 818;
	        this.set_variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_combination() {
	    let localctx = new Set_combinationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ASLParser.RULE_set_combination);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 820;
	        this.set_variable();
	        this.state = 821;
	        this.match(ASLParser.EQ);
	        this.state = 822;
	        _la = this._input.LA(1);
	        if(!(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (ASLParser.UNION_OF - 87)) | (1 << (ASLParser.DISUNION_OF - 87)) | (1 << (ASLParser.INTERSECTION_OF - 87)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 823;
	        this.set_variable();
	        this.state = 824;
	        this.match(ASLParser.AND);
	        this.state = 825;
	        this.set_variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_difference() {
	    let localctx = new Set_differenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ASLParser.RULE_set_difference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.set_variable();
	        this.state = 828;
	        this.match(ASLParser.EQ);
	        this.state = 829;
	        this.set_variable();
	        this.state = 830;
	        this.match(ASLParser.NOT_IN);
	        this.state = 831;
	        this.set_variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_statement() {
	    let localctx = new Struct_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ASLParser.RULE_struct_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 833;
	            this.struct_definition();
	            break;

	        case 2:
	            this.state = 834;
	            this.struct_instantiation();
	            break;

	        case 3:
	            this.state = 835;
	            this.struct_assembly();
	            break;

	        case 4:
	            this.state = 836;
	            this.struct_for_loop();
	            break;

	        case 5:
	            this.state = 837;
	            this.order_struct();
	            break;

	        case 6:
	            this.state = 838;
	            this.struct_subset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_definition() {
	    let localctx = new Struct_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ASLParser.RULE_struct_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.match(ASLParser.DEFINE);
	        this.state = 842;
	        this.match(ASLParser.STRUCTURE);
	        this.state = 843;
	        this.struct_type();
	        this.state = 844;
	        this.match(ASLParser.NEWLINE);
	        this.state = 849; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 845;
	            this.member_name();
	            this.state = 846;
	            this.member_type();
	            this.state = 847;
	            this.match(ASLParser.NEWLINE);
	            this.state = 851; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ASLParser.LOWERCASE_ID || _la===ASLParser.LOWERCASE_NUMBER_ID);
	        this.state = 853;
	        this.match(ASLParser.ENDDEFINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_name() {
	    let localctx = new Member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ASLParser.RULE_member_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.LOWERCASE_ID || _la===ASLParser.LOWERCASE_NUMBER_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_type() {
	    let localctx = new Member_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ASLParser.RULE_member_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.INTEGER:
	            this.state = 857;
	            this.match(ASLParser.INTEGER);
	            break;
	        case ASLParser.REAL:
	            this.state = 858;
	            this.match(ASLParser.REAL);
	            break;
	        case ASLParser.BOOLEAN:
	            this.state = 859;
	            this.match(ASLParser.BOOLEAN);
	            break;
	        case ASLParser.TEXT:
	            this.state = 860;
	            this.match(ASLParser.TEXT);
	            break;
	        case ASLParser.DATE:
	            this.state = 861;
	            this.match(ASLParser.DATE);
	            break;
	        case ASLParser.TIME:
	            this.state = 862;
	            this.match(ASLParser.TIME);
	            break;
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LEADING_FIRST_UPPERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 863;
	            this.struct_type();
	            break;
	        case ASLParser.UPPERCASE_ID:
	            this.state = 864;
	            this.user_defined_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_instantiation() {
	    let localctx = new Struct_instantiationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ASLParser.RULE_struct_instantiation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.struct_();
	        this.state = 868;
	        this.match(ASLParser.IS);
	        this.state = 869;
	        this.struct_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_assembly() {
	    let localctx = new Struct_assemblyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ASLParser.RULE_struct_assembly);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(ASLParser.APPEND);
	        this.state = 872;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 873;
	        this.value_list();
	        this.state = 874;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 875;
	        this.match(ASLParser.TO);
	        this.state = 876;
	        this.struct_();
	        this.state = 879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY) {
	            this.state = 877;
	            _la = this._input.LA(1);
	            if(!(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 878;
	            this.member_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_for_loop() {
	    let localctx = new Struct_for_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ASLParser.RULE_struct_for_loop);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.match(ASLParser.FOR);
	        this.state = 882;
	        this.match(ASLParser.L_SQUARE);
	        this.state = 883;
	        this.variable_list();
	        this.state = 884;
	        this.match(ASLParser.R_SQUARE);
	        this.state = 885;
	        this.match(ASLParser.IN);
	        this.state = 886;
	        this.struct_();
	        this.state = 887;
	        this.match(ASLParser.DO);
	        this.state = 888;
	        this.match(ASLParser.NEWLINE);
	        this.state = 892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 889;
	            this.statement();
	            this.state = 894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.BREAK || _la===ASLParser.BREAKIF) {
	            this.state = 895;
	            this.break_statement();
	            this.state = 899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	                this.state = 896;
	                this.statement();
	                this.state = 901;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 904;
	        this.match(ASLParser.ENDFOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_struct() {
	    let localctx = new Order_structContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ASLParser.RULE_order_struct);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this.struct_();
	        this.state = 907;
	        this.match(ASLParser.EQ);
	        this.state = 908;
	        this.struct_();
	        this.state = 909;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.REVERSE_ORDERED_BY || _la===ASLParser.ORDERED_BY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 910;
	        this.member_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_subset() {
	    let localctx = new Struct_subsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, ASLParser.RULE_struct_subset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.struct_();
	        this.state = 913;
	        this.match(ASLParser.EQ);
	        this.state = 914;
	        this.struct_();
	        this.state = 915;
	        this.match(ASLParser.WHERE);
	        this.state = 916;
	        this.struct_condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_condition() {
	    let localctx = new Struct_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, ASLParser.RULE_struct_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.member_name();
	        this.state = 919;
	        this.logical_operator();
	        this.state = 920;
	        this.component();
	        this.state = 926;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 922;
	                _la = this._input.LA(1);
	                if(!(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 923;
	                this.struct_condition(); 
	            }
	            this.state = 928;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_() {
	    let localctx = new Struct_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, ASLParser.RULE_struct_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(ASLParser.L_CURLY);
	        this.state = 930;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.LOWERCASE_ID || _la===ASLParser.LOWERCASE_NUMBER_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 931;
	        this.match(ASLParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_type() {
	    let localctx = new Struct_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, ASLParser.RULE_struct_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	            this.state = 933;
	            this.match(ASLParser.LOWERCASE_ID);
	            break;
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 934;
	            this.match(ASLParser.LOWERCASE_NUMBER_ID);
	            break;
	        case ASLParser.LEADING_FIRST_UPPERCASE_ID:
	            this.state = 935;
	            this.match(ASLParser.LEADING_FIRST_UPPERCASE_ID);
	            this.state = 936;
	            this.match(ASLParser.DOT);
	            this.state = 937;
	            this.match(ASLParser.LOWERCASE_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_list() {
	    let localctx = new Value_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, ASLParser.RULE_value_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        this.struct_value();
	        this.state = 945;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.COMMA) {
	            this.state = 941;
	            this.match(ASLParser.COMMA);
	            this.state = 942;
	            this.struct_value();
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_value() {
	    let localctx = new Struct_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, ASLParser.RULE_struct_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 948;
	            this.variable();
	            break;

	        case 2:
	            this.state = 949;
	            this.set_variable();
	            break;

	        case 3:
	            this.state = 950;
	            this.constant();
	            break;

	        case 4:
	            this.state = 951;
	            this.object_attribute();
	            break;

	        case 5:
	            this.state = 952;
	            this.struct_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_list() {
	    let localctx = new Variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, ASLParser.RULE_variable_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 957;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 955;
	            this.variable();
	            break;
	        case ASLParser.L_CURLY:
	            this.state = 956;
	            this.struct_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.COMMA) {
	            this.state = 959;
	            this.match(ASLParser.COMMA);
	            this.state = 962;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 960;
	                this.variable();
	                break;
	            case ASLParser.L_CURLY:
	                this.state = 961;
	                this.struct_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_statement() {
	    let localctx = new Switch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, ASLParser.RULE_switch_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(ASLParser.SWITCH);
	        this.state = 972;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 970;
	            this.variable();
	            break;

	        case 2:
	            this.state = 971;
	            this.object_attribute();
	            break;

	        }
	        this.state = 974;
	        this.match(ASLParser.NEWLINE);
	        this.state = 984; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 975;
	            this.match(ASLParser.CASE);
	            this.state = 976;
	            this.constant();
	            this.state = 977;
	            this.match(ASLParser.NEWLINE);
	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	                this.state = 978;
	                this.statement();
	                this.state = 983;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 986; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ASLParser.CASE);
	        this.state = 995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.DEFAULT) {
	            this.state = 988;
	            this.match(ASLParser.DEFAULT);
	            this.state = 989;
	            this.match(ASLParser.NEWLINE);
	            this.state = 991; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 990;
	                this.statement();
	                this.state = 993; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0));
	        }

	        this.state = 997;
	        this.match(ASLParser.ENDSWITCH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, ASLParser.RULE_if_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.match(ASLParser.IF);
	        this.state = 1005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1000;
	            this.logical_condition();
	            break;

	        case 2:
	            this.state = 1001;
	            this.match(ASLParser.L_PAREN);
	            this.state = 1002;
	            this.logical_condition();
	            this.state = 1003;
	            this.match(ASLParser.R_PAREN);
	            break;

	        }
	        this.state = 1007;
	        this.match(ASLParser.THEN);
	        this.state = 1008;
	        this.match(ASLParser.NEWLINE);
	        this.state = 1010; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1009;
	            this.statement();
	            this.state = 1012; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0));
	        this.state = 1021;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.ELSE) {
	            this.state = 1014;
	            this.match(ASLParser.ELSE);
	            this.state = 1015;
	            this.match(ASLParser.NEWLINE);
	            this.state = 1017; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1016;
	                this.statement();
	                this.state = 1019; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0));
	        }

	        this.state = 1023;
	        this.match(ASLParser.ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_condition() {
	    let localctx = new Logical_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, ASLParser.RULE_logical_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 1025;
	            _la = this._input.LA(1);
	            if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1028;
	        this.compound_logical_condition();
	        this.state = 1036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR) {
	            this.state = 1029;
	            _la = this._input.LA(1);
	            if(!(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1031;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	            if(la_===1) {
	                this.state = 1030;
	                _la = this._input.LA(1);
	                if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1033;
	            this.compound_logical_condition();
	            this.state = 1038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_logical_condition() {
	    let localctx = new Compound_logical_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, ASLParser.RULE_compound_logical_condition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1070;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT) {
	                this.state = 1039;
	                _la = this._input.LA(1);
	                if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1042;
	            this.simple_logical_condition();
	            this.state = 1050;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1043;
	                    _la = this._input.LA(1);
	                    if(!(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1045;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT) {
	                        this.state = 1044;
	                        _la = this._input.LA(1);
	                        if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    this.state = 1047;
	                    this.simple_logical_condition(); 
	                }
	                this.state = 1052;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1053;
	            this.match(ASLParser.L_PAREN);
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT) {
	                this.state = 1054;
	                _la = this._input.LA(1);
	                if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1057;
	            this.simple_logical_condition();
	            this.state = 1065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR) {
	                this.state = 1058;
	                _la = this._input.LA(1);
	                if(!(_la===ASLParser.AND || _la===ASLParser.OR || _la===ASLParser.LOGICAL_AND || _la===ASLParser.LOGICAL_OR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1060;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT) {
	                    this.state = 1059;
	                    _la = this._input.LA(1);
	                    if(!(_la===ASLParser.NOT || _la===ASLParser.LOGICAL_NOT)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 1062;
	                this.simple_logical_condition();
	                this.state = 1067;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1068;
	            this.match(ASLParser.R_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_logical_condition() {
	    let localctx = new Simple_logical_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, ASLParser.RULE_simple_logical_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 1072;
	            this.match(ASLParser.L_PAREN);

	        }
	        this.state = 1084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1075;
	            this.variable();
	            break;

	        case 2:
	            this.state = 1076;
	            this.component();
	            this.state = 1077;
	            this.logical_operator();
	            this.state = 1078;
	            this.component();
	            break;

	        case 3:
	            this.state = 1080;
	            this.component();
	            this.state = 1081;
	            this.equality_operator();
	            this.state = 1082;
	            this.match(ASLParser.UNDEFINED);
	            break;

	        }
	        this.state = 1087;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1086;
	            this.match(ASLParser.R_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component() {
	    let localctx = new ComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, ASLParser.RULE_component);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1089;
	            this.variable();
	            break;

	        case 2:
	            this.state = 1090;
	            this.object_attribute();
	            break;

	        case 3:
	            this.state = 1091;
	            this.constant();
	            break;

	        case 4:
	            this.state = 1092;
	            this.match(ASLParser.COUNTOF);
	            this.state = 1093;
	            this.set_variable();
	            break;

	        case 5:
	            this.state = 1094;
	            this.arithmetic_expression();
	            break;

	        case 6:
	            this.state = 1095;
	            this.match(ASLParser.THIS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_loop() {
	    let localctx = new For_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, ASLParser.RULE_for_loop);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.match(ASLParser.FOR);
	        this.state = 1099;
	        this.variable();
	        this.state = 1100;
	        this.match(ASLParser.IN);
	        this.state = 1101;
	        this.set_variable();
	        this.state = 1102;
	        this.match(ASLParser.DO);
	        this.state = 1103;
	        this.match(ASLParser.NEWLINE);
	        this.state = 1107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 1104;
	            this.statement();
	            this.state = 1109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ASLParser.BREAK || _la===ASLParser.BREAKIF) {
	            this.state = 1110;
	            this.break_statement();
	            this.state = 1114;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	                this.state = 1111;
	                this.statement();
	                this.state = 1116;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1119;
	        this.match(ASLParser.ENDFOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_statement() {
	    let localctx = new Break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, ASLParser.RULE_break_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1124;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.BREAK:
	            this.state = 1121;
	            this.match(ASLParser.BREAK);
	            break;
	        case ASLParser.BREAKIF:
	            this.state = 1122;
	            this.match(ASLParser.BREAKIF);
	            this.state = 1123;
	            this.logical_condition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1126;
	        this.match(ASLParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loop_statement() {
	    let localctx = new Loop_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, ASLParser.RULE_loop_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1128;
	        this.match(ASLParser.LOOP);
	        this.state = 1129;
	        this.match(ASLParser.NEWLINE);
	        this.state = 1133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 1130;
	            this.statement();
	            this.state = 1135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1136;
	        this.break_statement();
	        this.state = 1141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASLParser.THIS) | (1 << ASLParser.DELETE) | (1 << ASLParser.LINK) | (1 << ASLParser.UNLINK) | (1 << ASLParser.GENERATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ASLParser.SWITCH - 36)) | (1 << (ASLParser.IF - 36)) | (1 << (ASLParser.FOR - 36)) | (1 << (ASLParser.BREAK - 36)) | (1 << (ASLParser.BREAKIF - 36)) | (1 << (ASLParser.LOOP - 36)) | (1 << (ASLParser.INLINE - 36)) | (1 << (ASLParser.DEFINE - 36)) | (1 << (ASLParser.APPEND - 36)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ASLParser.L_CURLY - 76)) | (1 << (ASLParser.L_SQUARE - 76)) | (1 << (ASLParser.LOWERCASE_ID - 76)) | (1 << (ASLParser.LOWERCASE_NUMBER_ID - 76)))) !== 0)) {
	            this.state = 1139;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ASLParser.BREAK:
	            case ASLParser.BREAKIF:
	                this.state = 1137;
	                this.break_statement();
	                break;
	            case ASLParser.THIS:
	            case ASLParser.DELETE:
	            case ASLParser.LINK:
	            case ASLParser.UNLINK:
	            case ASLParser.GENERATE:
	            case ASLParser.SWITCH:
	            case ASLParser.IF:
	            case ASLParser.FOR:
	            case ASLParser.LOOP:
	            case ASLParser.INLINE:
	            case ASLParser.DEFINE:
	            case ASLParser.APPEND:
	            case ASLParser.L_CURLY:
	            case ASLParser.L_SQUARE:
	            case ASLParser.LOWERCASE_ID:
	            case ASLParser.LOWERCASE_NUMBER_ID:
	                this.state = 1138;
	                this.statement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1144;
	        this.match(ASLParser.ENDLOOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_language_section() {
	    let localctx = new Native_language_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, ASLParser.RULE_native_language_section);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1146;
	        this.match(ASLParser.INLINE);
	        this.state = 1147;
	        this.match(ASLParser.NEWLINE);
	        this.state = 1151;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 1148;
	                this.matchWildcard(); 
	            }
	            this.state = 1153;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	        this.state = 1154;
	        this.match(ASLParser.END_INLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_variable() {
	    let localctx = new Set_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, ASLParser.RULE_set_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this.match(ASLParser.L_CURLY);
	        this.state = 1157;
	        this.variable();
	        this.state = 1158;
	        this.match(ASLParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, ASLParser.RULE_variable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.LOWERCASE_ID || _la===ASLParser.LOWERCASE_NUMBER_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_name() {
	    let localctx = new Object_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, ASLParser.RULE_object_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.match(ASLParser.UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, ASLParser.RULE_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1164;
	        _la = this._input.LA(1);
	        if(!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ASLParser.INSTANCE_ID - 101)) | (1 << (ASLParser.UPPERCASE_ID - 101)) | (1 << (ASLParser.LEADING_UPPERCASE_ID - 101)) | (1 << (ASLParser.LEADING_FIRST_UPPERCASE_ID - 101)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_attribute() {
	    let localctx = new Object_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, ASLParser.RULE_object_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_ID:
	        case ASLParser.LOWERCASE_NUMBER_ID:
	            this.state = 1166;
	            this.variable();
	            break;
	        case ASLParser.THIS:
	            this.state = 1167;
	            this.match(ASLParser.THIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1170;
	        this.match(ASLParser.DOT);
	        this.state = 1171;
	        this.attribute();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, ASLParser.RULE_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.INTEGER_VALUE:
	            this.state = 1173;
	            this.match(ASLParser.INTEGER_VALUE);
	            break;
	        case ASLParser.REAL_VALUE:
	            this.state = 1174;
	            this.match(ASLParser.REAL_VALUE);
	            break;
	        case ASLParser.BOOLEAN_VALUE:
	            this.state = 1175;
	            this.match(ASLParser.BOOLEAN_VALUE);
	            break;
	        case ASLParser.LOWERCASE_TEXT:
	        case ASLParser.OTHER_TEXT:
	        case ASLParser.QUOTE:
	            this.state = 1176;
	            this.text_string();
	            break;
	        case ASLParser.UPPERCASE_ID:
	        case ASLParser.UPPERCASE_OR_NUMBER_ID:
	            this.state = 1177;
	            this.enum_value();
	            break;
	        case ASLParser.DATE_VALUE:
	            this.state = 1178;
	            this.match(ASLParser.DATE_VALUE);
	            break;
	        case ASLParser.TIME_VALUE:
	            this.state = 1179;
	            this.match(ASLParser.TIME_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text_string() {
	    let localctx = new Text_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, ASLParser.RULE_text_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1186;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ASLParser.LOWERCASE_TEXT:
	            this.state = 1182;
	            this.match(ASLParser.LOWERCASE_TEXT);
	            break;
	        case ASLParser.OTHER_TEXT:
	            this.state = 1183;
	            this.match(ASLParser.OTHER_TEXT);
	            break;
	        case ASLParser.QUOTE:
	            this.state = 1184;
	            this.match(ASLParser.QUOTE);
	            this.state = 1185;
	            this.match(ASLParser.QUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_value() {
	    let localctx = new Enum_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, ASLParser.RULE_enum_value);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        _la = this._input.LA(1);
	        if(!(_la===ASLParser.UPPERCASE_ID || _la===ASLParser.UPPERCASE_OR_NUMBER_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structure_field() {
	    let localctx = new Structure_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, ASLParser.RULE_structure_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.variable();
	        this.state = 1191;
	        this.match(ASLParser.DOT);
	        this.state = 1192;
	        this.match(ASLParser.LOWERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user_defined_type() {
	    let localctx = new User_defined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, ASLParser.RULE_user_defined_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194;
	        this.match(ASLParser.UPPERCASE_ID);
	        this.state = 1195;
	        this.match(ASLParser.DOT);
	        this.state = 1196;
	        this.match(ASLParser.LEADING_FIRST_UPPERCASE_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ASLParser.EOF = antlr4.Token.EOF;
ASLParser.THIS = 1;
ASLParser.CREATE = 2;
ASLParser.UNIQUE = 3;
ASLParser.WITH = 4;
ASLParser.DELETE = 5;
ASLParser.UNDEFINED = 6;
ASLParser.FIND_ONLY = 7;
ASLParser.FIND_ONE = 8;
ASLParser.FIND_ALL = 9;
ASLParser.FIND = 10;
ASLParser.WHERE = 11;
ASLParser.EQUALS = 12;
ASLParser.NOT_EQUALS = 13;
ASLParser.LESS_THAN = 14;
ASLParser.GREATER_THAN = 15;
ASLParser.REVERSE_ORDERED_BY = 16;
ASLParser.ORDERED_BY = 17;
ASLParser.COUNTOF = 18;
ASLParser.AND = 19;
ASLParser.OR = 20;
ASLParser.NOT = 21;
ASLParser.LINK = 22;
ASLParser.USING = 23;
ASLParser.UNLINK = 24;
ASLParser.RELATIONSHIP_TRAVERSAL = 25;
ASLParser.GENERATE = 26;
ASLParser.TO = 27;
ASLParser.CREATE_TIMER = 28;
ASLParser.DELETE_TIMER = 29;
ASLParser.TIM10 = 30;
ASLParser.TIM1 = 31;
ASLParser.TIM2 = 32;
ASLParser.TIM3 = 33;
ASLParser.CURRENT_DATE = 34;
ASLParser.CURRENT_TIME = 35;
ASLParser.SWITCH = 36;
ASLParser.CASE = 37;
ASLParser.DEFAULT = 38;
ASLParser.ENDSWITCH = 39;
ASLParser.IF = 40;
ASLParser.THEN = 41;
ASLParser.ELSE = 42;
ASLParser.ENDIF = 43;
ASLParser.FOR = 44;
ASLParser.IN = 45;
ASLParser.DO = 46;
ASLParser.ENDFOR = 47;
ASLParser.BREAK = 48;
ASLParser.BREAKIF = 49;
ASLParser.LOOP = 50;
ASLParser.ENDLOOP = 51;
ASLParser.INLINE = 52;
ASLParser.END_INLINE = 53;
ASLParser.DEFINE = 54;
ASLParser.STRUCTURE = 55;
ASLParser.ENDDEFINE = 56;
ASLParser.IS = 57;
ASLParser.APPEND = 58;
ASLParser.INTEGER = 59;
ASLParser.REAL = 60;
ASLParser.BOOLEAN = 61;
ASLParser.TEXT = 62;
ASLParser.DATE = 63;
ASLParser.TIME = 64;
ASLParser.NEQ = 65;
ASLParser.EQ = 66;
ASLParser.LTE = 67;
ASLParser.GTE = 68;
ASLParser.LT = 69;
ASLParser.GT = 70;
ASLParser.LOGICAL_AND = 71;
ASLParser.LOGICAL_OR = 72;
ASLParser.LOGICAL_NOT = 73;
ASLParser.L_PAREN = 74;
ASLParser.R_PAREN = 75;
ASLParser.L_CURLY = 76;
ASLParser.R_CURLY = 77;
ASLParser.L_SQUARE = 78;
ASLParser.R_SQUARE = 79;
ASLParser.UNDERSCORE = 80;
ASLParser.DOT = 81;
ASLParser.SEMI_COLON = 82;
ASLParser.COLON = 83;
ASLParser.COMMA = 84;
ASLParser.HASH = 85;
ASLParser.BACKSLASH = 86;
ASLParser.UNION_OF = 87;
ASLParser.DISUNION_OF = 88;
ASLParser.INTERSECTION_OF = 89;
ASLParser.NOT_IN = 90;
ASLParser.DATE_VALUE = 91;
ASLParser.TIME_VALUE = 92;
ASLParser.INTEGER_VALUE = 93;
ASLParser.REAL_VALUE = 94;
ASLParser.ARITHMETIC_OPERATOR = 95;
ASLParser.BOOLEAN_VALUE = 96;
ASLParser.LOWERCASE_TEXT = 97;
ASLParser.OTHER_TEXT = 98;
ASLParser.QUOTE = 99;
ASLParser.R_NUMBER = 100;
ASLParser.INSTANCE_ID = 101;
ASLParser.UPPERCASE_ID = 102;
ASLParser.LOWERCASE_ID = 103;
ASLParser.LEADING_UPPERCASE_ID = 104;
ASLParser.LEADING_FIRST_UPPERCASE_ID = 105;
ASLParser.UPPERCASE_NUMBER_ID = 106;
ASLParser.LOWERCASE_NUMBER_ID = 107;
ASLParser.UPPERCASE_OR_NUMBER_ID = 108;
ASLParser.NATIVE_LANGUAGE = 109;
ASLParser.CONTINUATION = 110;
ASLParser.WHITESPACE = 111;
ASLParser.COMMENT = 112;
ASLParser.NEWLINE = 113;
ASLParser.OTHER = 114;

ASLParser.RULE_asl = 0;
ASLParser.RULE_statement = 1;
ASLParser.RULE_simple_statement = 2;
ASLParser.RULE_sequential_logic_statement = 3;
ASLParser.RULE_assignment_statement = 4;
ASLParser.RULE_constant_assignment = 5;
ASLParser.RULE_date_time_assignment = 6;
ASLParser.RULE_variable_assignment = 7;
ASLParser.RULE_object_attribute_assignment = 8;
ASLParser.RULE_arithmetic_assignment = 9;
ASLParser.RULE_arithmetic_expression = 10;
ASLParser.RULE_arithmetic_component = 11;
ASLParser.RULE_countof_function = 12;
ASLParser.RULE_create_statement = 13;
ASLParser.RULE_attribute_assignments = 14;
ASLParser.RULE_attribute_assignment = 15;
ASLParser.RULE_delete_statement = 16;
ASLParser.RULE_find_statement = 17;
ASLParser.RULE_find_instance_statement = 18;
ASLParser.RULE_find_set_statement = 19;
ASLParser.RULE_object_condition = 20;
ASLParser.RULE_equality_operator = 21;
ASLParser.RULE_logical_operator = 22;
ASLParser.RULE_relationship_navigation = 23;
ASLParser.RULE_associative_relationship_navigation = 24;
ASLParser.RULE_relationship_link = 25;
ASLParser.RULE_relationship_unlink = 26;
ASLParser.RULE_relationship_spec = 27;
ASLParser.RULE_qualified_relationship = 28;
ASLParser.RULE_relationship_role = 29;
ASLParser.RULE_event_generation = 30;
ASLParser.RULE_internal_event_generation = 31;
ASLParser.RULE_external_event_generation = 32;
ASLParser.RULE_event_specification = 33;
ASLParser.RULE_external_event_specification = 34;
ASLParser.RULE_event_parameters = 35;
ASLParser.RULE_event_parameter = 36;
ASLParser.RULE_operation_invocation = 37;
ASLParser.RULE_object_operation = 38;
ASLParser.RULE_domain_operation = 39;
ASLParser.RULE_bridge_operation = 40;
ASLParser.RULE_oo_specification = 41;
ASLParser.RULE_do_specification = 42;
ASLParser.RULE_bo_specification = 43;
ASLParser.RULE_output_parameter_list = 44;
ASLParser.RULE_output_parameter = 45;
ASLParser.RULE_input_parameter_list = 46;
ASLParser.RULE_input_parameter = 47;
ASLParser.RULE_timer_operation = 48;
ASLParser.RULE_timer_creation = 49;
ASLParser.RULE_timer_deletion = 50;
ASLParser.RULE_set_relative_timer = 51;
ASLParser.RULE_set_absolute_timer = 52;
ASLParser.RULE_set_recurring_timer = 53;
ASLParser.RULE_timer_reset = 54;
ASLParser.RULE_timer_id = 55;
ASLParser.RULE_time_to_fire = 56;
ASLParser.RULE_return_event = 57;
ASLParser.RULE_target_instance = 58;
ASLParser.RULE_fire_year = 59;
ASLParser.RULE_fire_month = 60;
ASLParser.RULE_fire_date = 61;
ASLParser.RULE_fire_hour = 62;
ASLParser.RULE_fire_minute = 63;
ASLParser.RULE_fire_second = 64;
ASLParser.RULE_start_time = 65;
ASLParser.RULE_period = 66;
ASLParser.RULE_set_operation = 67;
ASLParser.RULE_unique_set = 68;
ASLParser.RULE_set_combination = 69;
ASLParser.RULE_set_difference = 70;
ASLParser.RULE_struct_statement = 71;
ASLParser.RULE_struct_definition = 72;
ASLParser.RULE_member_name = 73;
ASLParser.RULE_member_type = 74;
ASLParser.RULE_struct_instantiation = 75;
ASLParser.RULE_struct_assembly = 76;
ASLParser.RULE_struct_for_loop = 77;
ASLParser.RULE_order_struct = 78;
ASLParser.RULE_struct_subset = 79;
ASLParser.RULE_struct_condition = 80;
ASLParser.RULE_struct_ = 81;
ASLParser.RULE_struct_type = 82;
ASLParser.RULE_value_list = 83;
ASLParser.RULE_struct_value = 84;
ASLParser.RULE_variable_list = 85;
ASLParser.RULE_switch_statement = 86;
ASLParser.RULE_if_statement = 87;
ASLParser.RULE_logical_condition = 88;
ASLParser.RULE_compound_logical_condition = 89;
ASLParser.RULE_simple_logical_condition = 90;
ASLParser.RULE_component = 91;
ASLParser.RULE_for_loop = 92;
ASLParser.RULE_break_statement = 93;
ASLParser.RULE_loop_statement = 94;
ASLParser.RULE_native_language_section = 95;
ASLParser.RULE_set_variable = 96;
ASLParser.RULE_variable = 97;
ASLParser.RULE_object_name = 98;
ASLParser.RULE_attribute = 99;
ASLParser.RULE_object_attribute = 100;
ASLParser.RULE_constant = 101;
ASLParser.RULE_text_string = 102;
ASLParser.RULE_enum_value = 103;
ASLParser.RULE_structure_field = 104;
ASLParser.RULE_user_defined_type = 105;

class AslContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_asl;
    }

	EOF() {
	    return this.getToken(ASLParser.EOF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAsl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAsl(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_statement;
    }

	simple_statement() {
	    return this.getTypedRuleContext(Simple_statementContext,0);
	};

	sequential_logic_statement() {
	    return this.getTypedRuleContext(Sequential_logic_statementContext,0);
	};

	native_language_section() {
	    return this.getTypedRuleContext(Native_language_sectionContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NEWLINE);
	    } else {
	        return this.getToken(ASLParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStatement(this);
		}
	}


}



class Simple_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_simple_statement;
    }

	assignment_statement() {
	    return this.getTypedRuleContext(Assignment_statementContext,0);
	};

	create_statement() {
	    return this.getTypedRuleContext(Create_statementContext,0);
	};

	delete_statement() {
	    return this.getTypedRuleContext(Delete_statementContext,0);
	};

	find_statement() {
	    return this.getTypedRuleContext(Find_statementContext,0);
	};

	relationship_navigation() {
	    return this.getTypedRuleContext(Relationship_navigationContext,0);
	};

	associative_relationship_navigation() {
	    return this.getTypedRuleContext(Associative_relationship_navigationContext,0);
	};

	relationship_link() {
	    return this.getTypedRuleContext(Relationship_linkContext,0);
	};

	relationship_unlink() {
	    return this.getTypedRuleContext(Relationship_unlinkContext,0);
	};

	event_generation() {
	    return this.getTypedRuleContext(Event_generationContext,0);
	};

	operation_invocation() {
	    return this.getTypedRuleContext(Operation_invocationContext,0);
	};

	timer_operation() {
	    return this.getTypedRuleContext(Timer_operationContext,0);
	};

	set_operation() {
	    return this.getTypedRuleContext(Set_operationContext,0);
	};

	struct_statement() {
	    return this.getTypedRuleContext(Struct_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSimple_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSimple_statement(this);
		}
	}


}



class Sequential_logic_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_sequential_logic_statement;
    }

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	for_loop() {
	    return this.getTypedRuleContext(For_loopContext,0);
	};

	loop_statement() {
	    return this.getTypedRuleContext(Loop_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSequential_logic_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSequential_logic_statement(this);
		}
	}


}



class Assignment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_assignment_statement;
    }

	constant_assignment() {
	    return this.getTypedRuleContext(Constant_assignmentContext,0);
	};

	date_time_assignment() {
	    return this.getTypedRuleContext(Date_time_assignmentContext,0);
	};

	variable_assignment() {
	    return this.getTypedRuleContext(Variable_assignmentContext,0);
	};

	object_attribute_assignment() {
	    return this.getTypedRuleContext(Object_attribute_assignmentContext,0);
	};

	arithmetic_assignment() {
	    return this.getTypedRuleContext(Arithmetic_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAssignment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAssignment_statement(this);
		}
	}


}



class Constant_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_constant_assignment;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	UNDEFINED() {
	    return this.getToken(ASLParser.UNDEFINED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterConstant_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitConstant_assignment(this);
		}
	}


}



class Date_time_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_date_time_assignment;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(ASLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(ASLParser.CURRENT_TIME, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterDate_time_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitDate_time_assignment(this);
		}
	}


}



class Variable_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_variable_assignment;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterVariable_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitVariable_assignment(this);
		}
	}


}



class Object_attribute_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_object_attribute_assignment;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	object_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Object_attributeContext,i);
	    }
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterObject_attribute_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitObject_attribute_assignment(this);
		}
	}


}



class Arithmetic_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_arithmetic_assignment;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	arithmetic_expression() {
	    return this.getTypedRuleContext(Arithmetic_expressionContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterArithmetic_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitArithmetic_assignment(this);
		}
	}


}



class Arithmetic_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_arithmetic_expression;
    }

	arithmetic_component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_componentContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_componentContext,i);
	    }
	};

	ARITHMETIC_OPERATOR() {
	    return this.getToken(ASLParser.ARITHMETIC_OPERATOR, 0);
	};

	arithmetic_expression() {
	    return this.getTypedRuleContext(Arithmetic_expressionContext,0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	countof_function() {
	    return this.getTypedRuleContext(Countof_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterArithmetic_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitArithmetic_expression(this);
		}
	}


}



class Arithmetic_componentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_arithmetic_component;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	countof_function() {
	    return this.getTypedRuleContext(Countof_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterArithmetic_component(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitArithmetic_component(this);
		}
	}


}



class Countof_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_countof_function;
    }

	COUNTOF() {
	    return this.getToken(ASLParser.COUNTOF, 0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	RELATIONSHIP_TRAVERSAL() {
	    return this.getToken(ASLParser.RELATIONSHIP_TRAVERSAL, 0);
	};

	relationship_spec() {
	    return this.getTypedRuleContext(Relationship_specContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterCountof_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitCountof_function(this);
		}
	}


}



class Create_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_create_statement;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	CREATE() {
	    return this.getToken(ASLParser.CREATE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	UNIQUE() {
	    return this.getToken(ASLParser.UNIQUE, 0);
	};

	WITH() {
	    return this.getToken(ASLParser.WITH, 0);
	};

	attribute_assignments() {
	    return this.getTypedRuleContext(Attribute_assignmentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterCreate_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitCreate_statement(this);
		}
	}


}



class Attribute_assignmentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_attribute_assignments;
    }

	attribute_assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_assignmentContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_assignmentContext,i);
	    }
	};

	LOGICAL_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_AND);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAttribute_assignments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAttribute_assignments(this);
		}
	}


}



class Attribute_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_attribute_assignment;
    }

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	arithmetic_expression() {
	    return this.getTypedRuleContext(Arithmetic_expressionContext,0);
	};

	CURRENT_DATE() {
	    return this.getToken(ASLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(ASLParser.CURRENT_TIME, 0);
	};

	UNDEFINED() {
	    return this.getToken(ASLParser.UNDEFINED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAttribute_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAttribute_assignment(this);
		}
	}


}



class Delete_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_delete_statement;
    }

	DELETE() {
	    return this.getToken(ASLParser.DELETE, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterDelete_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitDelete_statement(this);
		}
	}


}



class Find_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_find_statement;
    }

	find_instance_statement() {
	    return this.getTypedRuleContext(Find_instance_statementContext,0);
	};

	find_set_statement() {
	    return this.getTypedRuleContext(Find_set_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFind_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFind_statement(this);
		}
	}


}



class Find_instance_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_find_instance_statement;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	FIND_ONE() {
	    return this.getToken(ASLParser.FIND_ONE, 0);
	};

	FIND_ONLY() {
	    return this.getToken(ASLParser.FIND_ONLY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	WHERE() {
	    return this.getToken(ASLParser.WHERE, 0);
	};

	object_condition() {
	    return this.getTypedRuleContext(Object_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFind_instance_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFind_instance_statement(this);
		}
	}


}



class Find_set_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_find_set_statement;
    }

	set_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_variableContext);
	    } else {
	        return this.getTypedRuleContext(Set_variableContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	WHERE() {
	    return this.getToken(ASLParser.WHERE, 0);
	};

	object_condition() {
	    return this.getTypedRuleContext(Object_conditionContext,0);
	};

	FIND_ALL() {
	    return this.getToken(ASLParser.FIND_ALL, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	ORDERED_BY() {
	    return this.getToken(ASLParser.ORDERED_BY, 0);
	};

	REVERSE_ORDERED_BY() {
	    return this.getToken(ASLParser.REVERSE_ORDERED_BY, 0);
	};

	FIND() {
	    return this.getToken(ASLParser.FIND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFind_set_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFind_set_statement(this);
		}
	}


}



class Object_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_object_condition;
    }

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	logical_operator() {
	    return this.getTypedRuleContext(Logical_operatorContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	UNDEFINED() {
	    return this.getToken(ASLParser.UNDEFINED, 0);
	};

	object_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Object_conditionContext,i);
	    }
	};

	LOGICAL_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_AND);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_AND, i);
	    }
	};


	LOGICAL_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_OR);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_OR, i);
	    }
	};


	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterObject_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitObject_condition(this);
		}
	}


}



class Equality_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_equality_operator;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(ASLParser.NEQ, 0);
	};

	EQUALS() {
	    return this.getToken(ASLParser.EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(ASLParser.NOT_EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEquality_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEquality_operator(this);
		}
	}


}



class Logical_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_logical_operator;
    }

	equality_operator() {
	    return this.getTypedRuleContext(Equality_operatorContext,0);
	};

	LT() {
	    return this.getToken(ASLParser.LT, 0);
	};

	GT() {
	    return this.getToken(ASLParser.GT, 0);
	};

	LTE() {
	    return this.getToken(ASLParser.LTE, 0);
	};

	GTE() {
	    return this.getToken(ASLParser.GTE, 0);
	};

	LESS_THAN() {
	    return this.getToken(ASLParser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ASLParser.GREATER_THAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterLogical_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitLogical_operator(this);
		}
	}


}



class Relationship_navigationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_relationship_navigation;
    }

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	set_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_variableContext);
	    } else {
	        return this.getTypedRuleContext(Set_variableContext,i);
	    }
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	RELATIONSHIP_TRAVERSAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.RELATIONSHIP_TRAVERSAL);
	    } else {
	        return this.getToken(ASLParser.RELATIONSHIP_TRAVERSAL, i);
	    }
	};


	relationship_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Relationship_specContext);
	    } else {
	        return this.getTypedRuleContext(Relationship_specContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(ASLParser.WHERE, 0);
	};

	object_condition() {
	    return this.getTypedRuleContext(Object_conditionContext,0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	ORDERED_BY() {
	    return this.getToken(ASLParser.ORDERED_BY, 0);
	};

	REVERSE_ORDERED_BY() {
	    return this.getToken(ASLParser.REVERSE_ORDERED_BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterRelationship_navigation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitRelationship_navigation(this);
		}
	}


}



class Associative_relationship_navigationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_associative_relationship_navigation;
    }

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	AND() {
	    return this.getToken(ASLParser.AND, 0);
	};

	RELATIONSHIP_TRAVERSAL() {
	    return this.getToken(ASLParser.RELATIONSHIP_TRAVERSAL, 0);
	};

	THIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.THIS);
	    } else {
	        return this.getToken(ASLParser.THIS, i);
	    }
	};


	qualified_relationship() {
	    return this.getTypedRuleContext(Qualified_relationshipContext,0);
	};

	relationship_role() {
	    return this.getTypedRuleContext(Relationship_roleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAssociative_relationship_navigation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAssociative_relationship_navigation(this);
		}
	}


}



class Relationship_linkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_relationship_link;
    }

	LINK() {
	    return this.getToken(ASLParser.LINK, 0);
	};

	relationship_spec() {
	    return this.getTypedRuleContext(Relationship_specContext,0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	USING() {
	    return this.getToken(ASLParser.USING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterRelationship_link(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitRelationship_link(this);
		}
	}


}



class Relationship_unlinkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_relationship_unlink;
    }

	UNLINK() {
	    return this.getToken(ASLParser.UNLINK, 0);
	};

	relationship_spec() {
	    return this.getTypedRuleContext(Relationship_specContext,0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterRelationship_unlink(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitRelationship_unlink(this);
		}
	}


}



class Relationship_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_relationship_spec;
    }

	R_NUMBER() {
	    return this.getToken(ASLParser.R_NUMBER, 0);
	};

	qualified_relationship() {
	    return this.getTypedRuleContext(Qualified_relationshipContext,0);
	};

	relationship_role() {
	    return this.getTypedRuleContext(Relationship_roleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterRelationship_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitRelationship_spec(this);
		}
	}


}



class Qualified_relationshipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_qualified_relationship;
    }

	R_NUMBER() {
	    return this.getToken(ASLParser.R_NUMBER, 0);
	};

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterQualified_relationship(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitQualified_relationship(this);
		}
	}


}



class Relationship_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_relationship_role;
    }

	R_NUMBER() {
	    return this.getToken(ASLParser.R_NUMBER, 0);
	};

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	LOWERCASE_TEXT() {
	    return this.getToken(ASLParser.LOWERCASE_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterRelationship_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitRelationship_role(this);
		}
	}


}



class Event_generationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_event_generation;
    }

	internal_event_generation() {
	    return this.getTypedRuleContext(Internal_event_generationContext,0);
	};

	external_event_generation() {
	    return this.getTypedRuleContext(External_event_generationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEvent_generation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEvent_generation(this);
		}
	}


}



class Internal_event_generationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_internal_event_generation;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	event_specification() {
	    return this.getTypedRuleContext(Event_specificationContext,0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	event_parameters() {
	    return this.getTypedRuleContext(Event_parametersContext,0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterInternal_event_generation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitInternal_event_generation(this);
		}
	}


}



class External_event_generationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_external_event_generation;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	external_event_specification() {
	    return this.getTypedRuleContext(External_event_specificationContext,0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	event_parameters() {
	    return this.getTypedRuleContext(Event_parametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterExternal_event_generation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitExternal_event_generation(this);
		}
	}


}



class Event_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_event_specification;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	COLON() {
	    return this.getToken(ASLParser.COLON, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEvent_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEvent_specification(this);
		}
	}


}



class External_event_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_external_event_specification;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	COLON() {
	    return this.getToken(ASLParser.COLON, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterExternal_event_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitExternal_event_specification(this);
		}
	}


}



class Event_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_event_parameters;
    }

	event_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Event_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Event_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEvent_parameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEvent_parameters(this);
		}
	}


}



class Event_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_event_parameter;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	structure_field() {
	    return this.getTypedRuleContext(Structure_fieldContext,0);
	};

	UNDEFINED() {
	    return this.getToken(ASLParser.UNDEFINED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEvent_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEvent_parameter(this);
		}
	}


}



class Operation_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_operation_invocation;
    }

	object_operation() {
	    return this.getTypedRuleContext(Object_operationContext,0);
	};

	domain_operation() {
	    return this.getTypedRuleContext(Domain_operationContext,0);
	};

	bridge_operation() {
	    return this.getTypedRuleContext(Bridge_operationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterOperation_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitOperation_invocation(this);
		}
	}


}



class Object_operationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_object_operation;
    }

	L_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.L_SQUARE);
	    } else {
	        return this.getToken(ASLParser.L_SQUARE, i);
	    }
	};


	R_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.R_SQUARE);
	    } else {
	        return this.getToken(ASLParser.R_SQUARE, i);
	    }
	};


	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	oo_specification() {
	    return this.getTypedRuleContext(Oo_specificationContext,0);
	};

	output_parameter_list() {
	    return this.getTypedRuleContext(Output_parameter_listContext,0);
	};

	input_parameter_list() {
	    return this.getTypedRuleContext(Input_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterObject_operation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitObject_operation(this);
		}
	}


}



class Domain_operationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_domain_operation;
    }

	L_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.L_SQUARE);
	    } else {
	        return this.getToken(ASLParser.L_SQUARE, i);
	    }
	};


	R_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.R_SQUARE);
	    } else {
	        return this.getToken(ASLParser.R_SQUARE, i);
	    }
	};


	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	do_specification() {
	    return this.getTypedRuleContext(Do_specificationContext,0);
	};

	output_parameter_list() {
	    return this.getTypedRuleContext(Output_parameter_listContext,0);
	};

	input_parameter_list() {
	    return this.getTypedRuleContext(Input_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterDomain_operation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitDomain_operation(this);
		}
	}


}



class Bridge_operationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_bridge_operation;
    }

	L_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.L_SQUARE);
	    } else {
	        return this.getToken(ASLParser.L_SQUARE, i);
	    }
	};


	R_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.R_SQUARE);
	    } else {
	        return this.getToken(ASLParser.R_SQUARE, i);
	    }
	};


	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	bo_specification() {
	    return this.getTypedRuleContext(Bo_specificationContext,0);
	};

	output_parameter_list() {
	    return this.getTypedRuleContext(Output_parameter_listContext,0);
	};

	input_parameter_list() {
	    return this.getTypedRuleContext(Input_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterBridge_operation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitBridge_operation(this);
		}
	}


}



class Oo_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_oo_specification;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	COLON() {
	    return this.getToken(ASLParser.COLON, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterOo_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitOo_specification(this);
		}
	}


}



class Do_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_do_specification;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	COLON() {
	    return this.getToken(ASLParser.COLON, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterDo_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitDo_specification(this);
		}
	}


}



class Bo_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_bo_specification;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	COLON() {
	    return this.getToken(ASLParser.COLON, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterBo_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitBo_specification(this);
		}
	}


}



class Output_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_output_parameter_list;
    }

	output_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Output_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Output_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterOutput_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitOutput_parameter_list(this);
		}
	}


}



class Output_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_output_parameter;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterOutput_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitOutput_parameter(this);
		}
	}


}



class Input_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_input_parameter_list;
    }

	input_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Input_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Input_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterInput_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitInput_parameter_list(this);
		}
	}


}



class Input_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_input_parameter;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterInput_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitInput_parameter(this);
		}
	}


}



class Timer_operationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_timer_operation;
    }

	timer_creation() {
	    return this.getTypedRuleContext(Timer_creationContext,0);
	};

	timer_deletion() {
	    return this.getTypedRuleContext(Timer_deletionContext,0);
	};

	set_relative_timer() {
	    return this.getTypedRuleContext(Set_relative_timerContext,0);
	};

	set_absolute_timer() {
	    return this.getTypedRuleContext(Set_absolute_timerContext,0);
	};

	set_recurring_timer() {
	    return this.getTypedRuleContext(Set_recurring_timerContext,0);
	};

	timer_reset() {
	    return this.getTypedRuleContext(Timer_resetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTimer_operation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTimer_operation(this);
		}
	}


}



class Timer_creationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_timer_creation;
    }

	L_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.L_SQUARE);
	    } else {
	        return this.getToken(ASLParser.L_SQUARE, i);
	    }
	};


	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	R_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.R_SQUARE);
	    } else {
	        return this.getToken(ASLParser.R_SQUARE, i);
	    }
	};


	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	CREATE_TIMER() {
	    return this.getToken(ASLParser.CREATE_TIMER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTimer_creation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTimer_creation(this);
		}
	}


}



class Timer_deletionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_timer_deletion;
    }

	L_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.L_SQUARE);
	    } else {
	        return this.getToken(ASLParser.L_SQUARE, i);
	    }
	};


	R_SQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.R_SQUARE);
	    } else {
	        return this.getToken(ASLParser.R_SQUARE, i);
	    }
	};


	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	DELETE_TIMER() {
	    return this.getToken(ASLParser.DELETE_TIMER, 0);
	};

	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTimer_deletion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTimer_deletion(this);
		}
	}


}



class Set_relative_timerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_relative_timer;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	TIM1() {
	    return this.getToken(ASLParser.TIM1, 0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	time_to_fire() {
	    return this.getTypedRuleContext(Time_to_fireContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	return_event() {
	    return this.getTypedRuleContext(Return_eventContext,0);
	};

	target_instance() {
	    return this.getTypedRuleContext(Target_instanceContext,0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_relative_timer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_relative_timer(this);
		}
	}


}



class Set_absolute_timerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_absolute_timer;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	TIM10() {
	    return this.getToken(ASLParser.TIM10, 0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	fire_year() {
	    return this.getTypedRuleContext(Fire_yearContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	fire_month() {
	    return this.getTypedRuleContext(Fire_monthContext,0);
	};

	fire_date() {
	    return this.getTypedRuleContext(Fire_dateContext,0);
	};

	fire_hour() {
	    return this.getTypedRuleContext(Fire_hourContext,0);
	};

	fire_minute() {
	    return this.getTypedRuleContext(Fire_minuteContext,0);
	};

	fire_second() {
	    return this.getTypedRuleContext(Fire_secondContext,0);
	};

	return_event() {
	    return this.getTypedRuleContext(Return_eventContext,0);
	};

	target_instance() {
	    return this.getTypedRuleContext(Target_instanceContext,0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_absolute_timer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_absolute_timer(this);
		}
	}


}



class Set_recurring_timerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_recurring_timer;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	TIM3() {
	    return this.getToken(ASLParser.TIM3, 0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	start_time() {
	    return this.getTypedRuleContext(Start_timeContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	period() {
	    return this.getTypedRuleContext(PeriodContext,0);
	};

	return_event() {
	    return this.getTypedRuleContext(Return_eventContext,0);
	};

	target_instance() {
	    return this.getTypedRuleContext(Target_instanceContext,0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_recurring_timer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_recurring_timer(this);
		}
	}


}



class Timer_resetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_timer_reset;
    }

	GENERATE() {
	    return this.getToken(ASLParser.GENERATE, 0);
	};

	TIM2() {
	    return this.getToken(ASLParser.TIM2, 0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	SEMI_COLON() {
	    return this.getToken(ASLParser.SEMI_COLON, 0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	timer_id() {
	    return this.getTypedRuleContext(Timer_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTimer_reset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTimer_reset(this);
		}
	}


}



class Timer_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_timer_id;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTimer_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTimer_id(this);
		}
	}


}



class Time_to_fireContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_time_to_fire;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTime_to_fire(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTime_to_fire(this);
		}
	}


}



class Return_eventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_return_event;
    }

	UPPERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_NUMBER_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterReturn_event(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitReturn_event(this);
		}
	}


}



class Target_instanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_target_instance;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterTarget_instance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitTarget_instance(this);
		}
	}


}



class Fire_yearContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_year;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_year(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_year(this);
		}
	}


}



class Fire_monthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_month;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_month(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_month(this);
		}
	}


}



class Fire_dateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_date;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_date(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_date(this);
		}
	}


}



class Fire_hourContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_hour;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_hour(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_hour(this);
		}
	}


}



class Fire_minuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_minute;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_minute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_minute(this);
		}
	}


}



class Fire_secondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_fire_second;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFire_second(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFire_second(this);
		}
	}


}



class Start_timeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_start_time;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStart_time(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStart_time(this);
		}
	}


}



class PeriodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_period;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterPeriod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitPeriod(this);
		}
	}


}



class Set_operationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_operation;
    }

	unique_set() {
	    return this.getTypedRuleContext(Unique_setContext,0);
	};

	set_combination() {
	    return this.getTypedRuleContext(Set_combinationContext,0);
	};

	set_difference() {
	    return this.getTypedRuleContext(Set_differenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_operation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_operation(this);
		}
	}


}



class Unique_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_unique_set;
    }

	set_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_variableContext);
	    } else {
	        return this.getTypedRuleContext(Set_variableContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	UNIQUE() {
	    return this.getToken(ASLParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterUnique_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitUnique_set(this);
		}
	}


}



class Set_combinationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_combination;
    }

	set_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_variableContext);
	    } else {
	        return this.getTypedRuleContext(Set_variableContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	AND() {
	    return this.getToken(ASLParser.AND, 0);
	};

	UNION_OF() {
	    return this.getToken(ASLParser.UNION_OF, 0);
	};

	DISUNION_OF() {
	    return this.getToken(ASLParser.DISUNION_OF, 0);
	};

	INTERSECTION_OF() {
	    return this.getToken(ASLParser.INTERSECTION_OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_combination(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_combination(this);
		}
	}


}



class Set_differenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_difference;
    }

	set_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_variableContext);
	    } else {
	        return this.getTypedRuleContext(Set_variableContext,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	NOT_IN() {
	    return this.getToken(ASLParser.NOT_IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_difference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_difference(this);
		}
	}


}



class Struct_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_statement;
    }

	struct_definition() {
	    return this.getTypedRuleContext(Struct_definitionContext,0);
	};

	struct_instantiation() {
	    return this.getTypedRuleContext(Struct_instantiationContext,0);
	};

	struct_assembly() {
	    return this.getTypedRuleContext(Struct_assemblyContext,0);
	};

	struct_for_loop() {
	    return this.getTypedRuleContext(Struct_for_loopContext,0);
	};

	order_struct() {
	    return this.getTypedRuleContext(Order_structContext,0);
	};

	struct_subset() {
	    return this.getTypedRuleContext(Struct_subsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_statement(this);
		}
	}


}



class Struct_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_definition;
    }

	DEFINE() {
	    return this.getToken(ASLParser.DEFINE, 0);
	};

	STRUCTURE() {
	    return this.getToken(ASLParser.STRUCTURE, 0);
	};

	struct_type() {
	    return this.getTypedRuleContext(Struct_typeContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NEWLINE);
	    } else {
	        return this.getToken(ASLParser.NEWLINE, i);
	    }
	};


	ENDDEFINE() {
	    return this.getToken(ASLParser.ENDDEFINE, 0);
	};

	member_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_nameContext);
	    } else {
	        return this.getTypedRuleContext(Member_nameContext,i);
	    }
	};

	member_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_typeContext);
	    } else {
	        return this.getTypedRuleContext(Member_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_definition(this);
		}
	}


}



class Member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_member_name;
    }

	LOWERCASE_ID() {
	    return this.getToken(ASLParser.LOWERCASE_ID, 0);
	};

	LOWERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.LOWERCASE_NUMBER_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterMember_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitMember_name(this);
		}
	}


}



class Member_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_member_type;
    }

	INTEGER() {
	    return this.getToken(ASLParser.INTEGER, 0);
	};

	REAL() {
	    return this.getToken(ASLParser.REAL, 0);
	};

	BOOLEAN() {
	    return this.getToken(ASLParser.BOOLEAN, 0);
	};

	TEXT() {
	    return this.getToken(ASLParser.TEXT, 0);
	};

	DATE() {
	    return this.getToken(ASLParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(ASLParser.TIME, 0);
	};

	struct_type() {
	    return this.getTypedRuleContext(Struct_typeContext,0);
	};

	user_defined_type() {
	    return this.getTypedRuleContext(User_defined_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterMember_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitMember_type(this);
		}
	}


}



class Struct_instantiationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_instantiation;
    }

	struct_() {
	    return this.getTypedRuleContext(Struct_Context,0);
	};

	IS() {
	    return this.getToken(ASLParser.IS, 0);
	};

	struct_type() {
	    return this.getTypedRuleContext(Struct_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_instantiation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_instantiation(this);
		}
	}


}



class Struct_assemblyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_assembly;
    }

	APPEND() {
	    return this.getToken(ASLParser.APPEND, 0);
	};

	L_SQUARE() {
	    return this.getToken(ASLParser.L_SQUARE, 0);
	};

	value_list() {
	    return this.getTypedRuleContext(Value_listContext,0);
	};

	R_SQUARE() {
	    return this.getToken(ASLParser.R_SQUARE, 0);
	};

	TO() {
	    return this.getToken(ASLParser.TO, 0);
	};

	struct_() {
	    return this.getTypedRuleContext(Struct_Context,0);
	};

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	ORDERED_BY() {
	    return this.getToken(ASLParser.ORDERED_BY, 0);
	};

	REVERSE_ORDERED_BY() {
	    return this.getToken(ASLParser.REVERSE_ORDERED_BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_assembly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_assembly(this);
		}
	}


}



class Struct_for_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_for_loop;
    }

	FOR() {
	    return this.getToken(ASLParser.FOR, 0);
	};

	L_SQUARE() {
	    return this.getToken(ASLParser.L_SQUARE, 0);
	};

	variable_list() {
	    return this.getTypedRuleContext(Variable_listContext,0);
	};

	R_SQUARE() {
	    return this.getToken(ASLParser.R_SQUARE, 0);
	};

	IN() {
	    return this.getToken(ASLParser.IN, 0);
	};

	struct_() {
	    return this.getTypedRuleContext(Struct_Context,0);
	};

	DO() {
	    return this.getToken(ASLParser.DO, 0);
	};

	NEWLINE() {
	    return this.getToken(ASLParser.NEWLINE, 0);
	};

	ENDFOR() {
	    return this.getToken(ASLParser.ENDFOR, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_for_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_for_loop(this);
		}
	}


}



class Order_structContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_order_struct;
    }

	struct_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_Context);
	    } else {
	        return this.getTypedRuleContext(Struct_Context,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	ORDERED_BY() {
	    return this.getToken(ASLParser.ORDERED_BY, 0);
	};

	REVERSE_ORDERED_BY() {
	    return this.getToken(ASLParser.REVERSE_ORDERED_BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterOrder_struct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitOrder_struct(this);
		}
	}


}



class Struct_subsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_subset;
    }

	struct_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_Context);
	    } else {
	        return this.getTypedRuleContext(Struct_Context,i);
	    }
	};

	EQ() {
	    return this.getToken(ASLParser.EQ, 0);
	};

	WHERE() {
	    return this.getToken(ASLParser.WHERE, 0);
	};

	struct_condition() {
	    return this.getTypedRuleContext(Struct_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_subset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_subset(this);
		}
	}


}



class Struct_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_condition;
    }

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	logical_operator() {
	    return this.getTypedRuleContext(Logical_operatorContext,0);
	};

	component() {
	    return this.getTypedRuleContext(ComponentContext,0);
	};

	struct_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Struct_conditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.AND);
	    } else {
	        return this.getToken(ASLParser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.OR);
	    } else {
	        return this.getToken(ASLParser.OR, i);
	    }
	};


	LOGICAL_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_AND);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_AND, i);
	    }
	};


	LOGICAL_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_OR);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_condition(this);
		}
	}


}



class Struct_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_;
    }

	L_CURLY() {
	    return this.getToken(ASLParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(ASLParser.R_CURLY, 0);
	};

	LOWERCASE_ID() {
	    return this.getToken(ASLParser.LOWERCASE_ID, 0);
	};

	LOWERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.LOWERCASE_NUMBER_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_(this);
		}
	}


}



class Struct_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_type;
    }

	LOWERCASE_ID() {
	    return this.getToken(ASLParser.LOWERCASE_ID, 0);
	};

	LOWERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.LOWERCASE_NUMBER_ID, 0);
	};

	LEADING_FIRST_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_FIRST_UPPERCASE_ID, 0);
	};

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_type(this);
		}
	}


}



class Value_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_value_list;
    }

	struct_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_valueContext);
	    } else {
	        return this.getTypedRuleContext(Struct_valueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterValue_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitValue_list(this);
		}
	}


}



class Struct_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_struct_value;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	struct_() {
	    return this.getTypedRuleContext(Struct_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStruct_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStruct_value(this);
		}
	}


}



class Variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_variable_list;
    }

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	struct_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_Context);
	    } else {
	        return this.getTypedRuleContext(Struct_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.COMMA);
	    } else {
	        return this.getToken(ASLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterVariable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitVariable_list(this);
		}
	}


}



class Switch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_switch_statement;
    }

	SWITCH() {
	    return this.getToken(ASLParser.SWITCH, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NEWLINE);
	    } else {
	        return this.getToken(ASLParser.NEWLINE, i);
	    }
	};


	ENDSWITCH() {
	    return this.getToken(ASLParser.ENDSWITCH, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.CASE);
	    } else {
	        return this.getToken(ASLParser.CASE, i);
	    }
	};


	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	DEFAULT() {
	    return this.getToken(ASLParser.DEFAULT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSwitch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSwitch_statement(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_if_statement;
    }

	IF() {
	    return this.getToken(ASLParser.IF, 0);
	};

	THEN() {
	    return this.getToken(ASLParser.THEN, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NEWLINE);
	    } else {
	        return this.getToken(ASLParser.NEWLINE, i);
	    }
	};


	ENDIF() {
	    return this.getToken(ASLParser.ENDIF, 0);
	};

	logical_condition() {
	    return this.getTypedRuleContext(Logical_conditionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(ASLParser.ELSE, 0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Logical_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_logical_condition;
    }

	compound_logical_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compound_logical_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Compound_logical_conditionContext,i);
	    }
	};

	LOGICAL_NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_NOT);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_NOT, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NOT);
	    } else {
	        return this.getToken(ASLParser.NOT, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.AND);
	    } else {
	        return this.getToken(ASLParser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.OR);
	    } else {
	        return this.getToken(ASLParser.OR, i);
	    }
	};


	LOGICAL_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_AND);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_AND, i);
	    }
	};


	LOGICAL_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_OR);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterLogical_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitLogical_condition(this);
		}
	}


}



class Compound_logical_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_compound_logical_condition;
    }

	simple_logical_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_logical_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_logical_conditionContext,i);
	    }
	};

	LOGICAL_NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_NOT);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_NOT, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.NOT);
	    } else {
	        return this.getToken(ASLParser.NOT, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.AND);
	    } else {
	        return this.getToken(ASLParser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.OR);
	    } else {
	        return this.getToken(ASLParser.OR, i);
	    }
	};


	LOGICAL_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_AND);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_AND, i);
	    }
	};


	LOGICAL_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.LOGICAL_OR);
	    } else {
	        return this.getToken(ASLParser.LOGICAL_OR, i);
	    }
	};


	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterCompound_logical_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitCompound_logical_condition(this);
		}
	}


}



class Simple_logical_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_simple_logical_condition;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	L_PAREN() {
	    return this.getToken(ASLParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(ASLParser.R_PAREN, 0);
	};

	component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentContext);
	    } else {
	        return this.getTypedRuleContext(ComponentContext,i);
	    }
	};

	logical_operator() {
	    return this.getTypedRuleContext(Logical_operatorContext,0);
	};

	equality_operator() {
	    return this.getTypedRuleContext(Equality_operatorContext,0);
	};

	UNDEFINED() {
	    return this.getToken(ASLParser.UNDEFINED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSimple_logical_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSimple_logical_condition(this);
		}
	}


}



class ComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_component;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	object_attribute() {
	    return this.getTypedRuleContext(Object_attributeContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	COUNTOF() {
	    return this.getToken(ASLParser.COUNTOF, 0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	arithmetic_expression() {
	    return this.getTypedRuleContext(Arithmetic_expressionContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitComponent(this);
		}
	}


}



class For_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_for_loop;
    }

	FOR() {
	    return this.getToken(ASLParser.FOR, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	IN() {
	    return this.getToken(ASLParser.IN, 0);
	};

	set_variable() {
	    return this.getTypedRuleContext(Set_variableContext,0);
	};

	DO() {
	    return this.getToken(ASLParser.DO, 0);
	};

	NEWLINE() {
	    return this.getToken(ASLParser.NEWLINE, 0);
	};

	ENDFOR() {
	    return this.getToken(ASLParser.ENDFOR, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterFor_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitFor_loop(this);
		}
	}


}



class Break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_break_statement;
    }

	NEWLINE() {
	    return this.getToken(ASLParser.NEWLINE, 0);
	};

	BREAK() {
	    return this.getToken(ASLParser.BREAK, 0);
	};

	BREAKIF() {
	    return this.getToken(ASLParser.BREAKIF, 0);
	};

	logical_condition() {
	    return this.getTypedRuleContext(Logical_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterBreak_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitBreak_statement(this);
		}
	}


}



class Loop_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_loop_statement;
    }

	LOOP() {
	    return this.getToken(ASLParser.LOOP, 0);
	};

	NEWLINE() {
	    return this.getToken(ASLParser.NEWLINE, 0);
	};

	break_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Break_statementContext);
	    } else {
	        return this.getTypedRuleContext(Break_statementContext,i);
	    }
	};

	ENDLOOP() {
	    return this.getToken(ASLParser.ENDLOOP, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterLoop_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitLoop_statement(this);
		}
	}


}



class Native_language_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_native_language_section;
    }

	INLINE() {
	    return this.getToken(ASLParser.INLINE, 0);
	};

	NEWLINE() {
	    return this.getToken(ASLParser.NEWLINE, 0);
	};

	END_INLINE() {
	    return this.getToken(ASLParser.END_INLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterNative_language_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitNative_language_section(this);
		}
	}


}



class Set_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_set_variable;
    }

	L_CURLY() {
	    return this.getToken(ASLParser.L_CURLY, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	R_CURLY() {
	    return this.getToken(ASLParser.R_CURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterSet_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitSet_variable(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_variable;
    }

	LOWERCASE_ID() {
	    return this.getToken(ASLParser.LOWERCASE_ID, 0);
	};

	LOWERCASE_NUMBER_ID() {
	    return this.getToken(ASLParser.LOWERCASE_NUMBER_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitVariable(this);
		}
	}


}



class Object_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_object_name;
    }

	UPPERCASE_ID() {
	    return this.getToken(ASLParser.UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterObject_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitObject_name(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_attribute;
    }

	LEADING_FIRST_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_FIRST_UPPERCASE_ID, 0);
	};

	LEADING_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_UPPERCASE_ID, 0);
	};

	UPPERCASE_ID() {
	    return this.getToken(ASLParser.UPPERCASE_ID, 0);
	};

	INSTANCE_ID() {
	    return this.getToken(ASLParser.INSTANCE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class Object_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_object_attribute;
    }

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	THIS() {
	    return this.getToken(ASLParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterObject_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitObject_attribute(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_constant;
    }

	INTEGER_VALUE() {
	    return this.getToken(ASLParser.INTEGER_VALUE, 0);
	};

	REAL_VALUE() {
	    return this.getToken(ASLParser.REAL_VALUE, 0);
	};

	BOOLEAN_VALUE() {
	    return this.getToken(ASLParser.BOOLEAN_VALUE, 0);
	};

	text_string() {
	    return this.getTypedRuleContext(Text_stringContext,0);
	};

	enum_value() {
	    return this.getTypedRuleContext(Enum_valueContext,0);
	};

	DATE_VALUE() {
	    return this.getToken(ASLParser.DATE_VALUE, 0);
	};

	TIME_VALUE() {
	    return this.getToken(ASLParser.TIME_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitConstant(this);
		}
	}


}



class Text_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_text_string;
    }

	LOWERCASE_TEXT() {
	    return this.getToken(ASLParser.LOWERCASE_TEXT, 0);
	};

	OTHER_TEXT() {
	    return this.getToken(ASLParser.OTHER_TEXT, 0);
	};

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ASLParser.QUOTE);
	    } else {
	        return this.getToken(ASLParser.QUOTE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterText_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitText_string(this);
		}
	}


}



class Enum_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_enum_value;
    }

	UPPERCASE_ID() {
	    return this.getToken(ASLParser.UPPERCASE_ID, 0);
	};

	UPPERCASE_OR_NUMBER_ID() {
	    return this.getToken(ASLParser.UPPERCASE_OR_NUMBER_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterEnum_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitEnum_value(this);
		}
	}


}



class Structure_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_structure_field;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	LOWERCASE_ID() {
	    return this.getToken(ASLParser.LOWERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterStructure_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitStructure_field(this);
		}
	}


}



class User_defined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ASLParser.RULE_user_defined_type;
    }

	UPPERCASE_ID() {
	    return this.getToken(ASLParser.UPPERCASE_ID, 0);
	};

	DOT() {
	    return this.getToken(ASLParser.DOT, 0);
	};

	LEADING_FIRST_UPPERCASE_ID() {
	    return this.getToken(ASLParser.LEADING_FIRST_UPPERCASE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.enterUser_defined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ASLListener ) {
	        listener.exitUser_defined_type(this);
		}
	}


}




ASLParser.AslContext = AslContext; 
ASLParser.StatementContext = StatementContext; 
ASLParser.Simple_statementContext = Simple_statementContext; 
ASLParser.Sequential_logic_statementContext = Sequential_logic_statementContext; 
ASLParser.Assignment_statementContext = Assignment_statementContext; 
ASLParser.Constant_assignmentContext = Constant_assignmentContext; 
ASLParser.Date_time_assignmentContext = Date_time_assignmentContext; 
ASLParser.Variable_assignmentContext = Variable_assignmentContext; 
ASLParser.Object_attribute_assignmentContext = Object_attribute_assignmentContext; 
ASLParser.Arithmetic_assignmentContext = Arithmetic_assignmentContext; 
ASLParser.Arithmetic_expressionContext = Arithmetic_expressionContext; 
ASLParser.Arithmetic_componentContext = Arithmetic_componentContext; 
ASLParser.Countof_functionContext = Countof_functionContext; 
ASLParser.Create_statementContext = Create_statementContext; 
ASLParser.Attribute_assignmentsContext = Attribute_assignmentsContext; 
ASLParser.Attribute_assignmentContext = Attribute_assignmentContext; 
ASLParser.Delete_statementContext = Delete_statementContext; 
ASLParser.Find_statementContext = Find_statementContext; 
ASLParser.Find_instance_statementContext = Find_instance_statementContext; 
ASLParser.Find_set_statementContext = Find_set_statementContext; 
ASLParser.Object_conditionContext = Object_conditionContext; 
ASLParser.Equality_operatorContext = Equality_operatorContext; 
ASLParser.Logical_operatorContext = Logical_operatorContext; 
ASLParser.Relationship_navigationContext = Relationship_navigationContext; 
ASLParser.Associative_relationship_navigationContext = Associative_relationship_navigationContext; 
ASLParser.Relationship_linkContext = Relationship_linkContext; 
ASLParser.Relationship_unlinkContext = Relationship_unlinkContext; 
ASLParser.Relationship_specContext = Relationship_specContext; 
ASLParser.Qualified_relationshipContext = Qualified_relationshipContext; 
ASLParser.Relationship_roleContext = Relationship_roleContext; 
ASLParser.Event_generationContext = Event_generationContext; 
ASLParser.Internal_event_generationContext = Internal_event_generationContext; 
ASLParser.External_event_generationContext = External_event_generationContext; 
ASLParser.Event_specificationContext = Event_specificationContext; 
ASLParser.External_event_specificationContext = External_event_specificationContext; 
ASLParser.Event_parametersContext = Event_parametersContext; 
ASLParser.Event_parameterContext = Event_parameterContext; 
ASLParser.Operation_invocationContext = Operation_invocationContext; 
ASLParser.Object_operationContext = Object_operationContext; 
ASLParser.Domain_operationContext = Domain_operationContext; 
ASLParser.Bridge_operationContext = Bridge_operationContext; 
ASLParser.Oo_specificationContext = Oo_specificationContext; 
ASLParser.Do_specificationContext = Do_specificationContext; 
ASLParser.Bo_specificationContext = Bo_specificationContext; 
ASLParser.Output_parameter_listContext = Output_parameter_listContext; 
ASLParser.Output_parameterContext = Output_parameterContext; 
ASLParser.Input_parameter_listContext = Input_parameter_listContext; 
ASLParser.Input_parameterContext = Input_parameterContext; 
ASLParser.Timer_operationContext = Timer_operationContext; 
ASLParser.Timer_creationContext = Timer_creationContext; 
ASLParser.Timer_deletionContext = Timer_deletionContext; 
ASLParser.Set_relative_timerContext = Set_relative_timerContext; 
ASLParser.Set_absolute_timerContext = Set_absolute_timerContext; 
ASLParser.Set_recurring_timerContext = Set_recurring_timerContext; 
ASLParser.Timer_resetContext = Timer_resetContext; 
ASLParser.Timer_idContext = Timer_idContext; 
ASLParser.Time_to_fireContext = Time_to_fireContext; 
ASLParser.Return_eventContext = Return_eventContext; 
ASLParser.Target_instanceContext = Target_instanceContext; 
ASLParser.Fire_yearContext = Fire_yearContext; 
ASLParser.Fire_monthContext = Fire_monthContext; 
ASLParser.Fire_dateContext = Fire_dateContext; 
ASLParser.Fire_hourContext = Fire_hourContext; 
ASLParser.Fire_minuteContext = Fire_minuteContext; 
ASLParser.Fire_secondContext = Fire_secondContext; 
ASLParser.Start_timeContext = Start_timeContext; 
ASLParser.PeriodContext = PeriodContext; 
ASLParser.Set_operationContext = Set_operationContext; 
ASLParser.Unique_setContext = Unique_setContext; 
ASLParser.Set_combinationContext = Set_combinationContext; 
ASLParser.Set_differenceContext = Set_differenceContext; 
ASLParser.Struct_statementContext = Struct_statementContext; 
ASLParser.Struct_definitionContext = Struct_definitionContext; 
ASLParser.Member_nameContext = Member_nameContext; 
ASLParser.Member_typeContext = Member_typeContext; 
ASLParser.Struct_instantiationContext = Struct_instantiationContext; 
ASLParser.Struct_assemblyContext = Struct_assemblyContext; 
ASLParser.Struct_for_loopContext = Struct_for_loopContext; 
ASLParser.Order_structContext = Order_structContext; 
ASLParser.Struct_subsetContext = Struct_subsetContext; 
ASLParser.Struct_conditionContext = Struct_conditionContext; 
ASLParser.Struct_Context = Struct_Context; 
ASLParser.Struct_typeContext = Struct_typeContext; 
ASLParser.Value_listContext = Value_listContext; 
ASLParser.Struct_valueContext = Struct_valueContext; 
ASLParser.Variable_listContext = Variable_listContext; 
ASLParser.Switch_statementContext = Switch_statementContext; 
ASLParser.If_statementContext = If_statementContext; 
ASLParser.Logical_conditionContext = Logical_conditionContext; 
ASLParser.Compound_logical_conditionContext = Compound_logical_conditionContext; 
ASLParser.Simple_logical_conditionContext = Simple_logical_conditionContext; 
ASLParser.ComponentContext = ComponentContext; 
ASLParser.For_loopContext = For_loopContext; 
ASLParser.Break_statementContext = Break_statementContext; 
ASLParser.Loop_statementContext = Loop_statementContext; 
ASLParser.Native_language_sectionContext = Native_language_sectionContext; 
ASLParser.Set_variableContext = Set_variableContext; 
ASLParser.VariableContext = VariableContext; 
ASLParser.Object_nameContext = Object_nameContext; 
ASLParser.AttributeContext = AttributeContext; 
ASLParser.Object_attributeContext = Object_attributeContext; 
ASLParser.ConstantContext = ConstantContext; 
ASLParser.Text_stringContext = Text_stringContext; 
ASLParser.Enum_valueContext = Enum_valueContext; 
ASLParser.Structure_fieldContext = Structure_fieldContext; 
ASLParser.User_defined_typeContext = User_defined_typeContext; 
