// Generated from Resources/Parsers/focal/focal.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,41,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,
1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,
17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,
25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
1,33,1,33,1,33,5,33,181,8,33,10,33,12,33,184,9,33,1,34,4,34,187,8,34,11,
34,12,34,188,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,3,37,235,8,37,1,38,1,38,5,38,239,8,38,10,38,12,38,242,9,38,
1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,255,8,39,10,
39,12,39,258,9,39,1,40,4,40,261,8,40,11,40,12,40,262,1,40,1,40,1,240,0,41,
1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
39,79,40,81,41,1,0,6,2,0,43,43,45,45,3,0,42,42,47,47,94,94,2,0,65,90,97,
122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,280,0,1,1,0,0,0,0,3,1,
0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
1,83,1,0,0,0,3,85,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,96,1,
0,0,0,13,98,1,0,0,0,15,102,1,0,0,0,17,106,1,0,0,0,19,108,1,0,0,0,21,110,
1,0,0,0,23,112,1,0,0,0,25,117,1,0,0,0,27,121,1,0,0,0,29,123,1,0,0,0,31,128,
1,0,0,0,33,130,1,0,0,0,35,133,1,0,0,0,37,138,1,0,0,0,39,140,1,0,0,0,41,142,
1,0,0,0,43,144,1,0,0,0,45,146,1,0,0,0,47,153,1,0,0,0,49,159,1,0,0,0,51,161,
1,0,0,0,53,163,1,0,0,0,55,165,1,0,0,0,57,167,1,0,0,0,59,169,1,0,0,0,61,171,
1,0,0,0,63,173,1,0,0,0,65,175,1,0,0,0,67,177,1,0,0,0,69,186,1,0,0,0,71,190,
1,0,0,0,73,192,1,0,0,0,75,234,1,0,0,0,77,236,1,0,0,0,79,245,1,0,0,0,81,260,
1,0,0,0,83,84,5,46,0,0,84,2,1,0,0,0,85,86,5,65,0,0,86,87,5,83,0,0,87,88,
5,75,0,0,88,4,1,0,0,0,89,90,5,65,0,0,90,6,1,0,0,0,91,92,5,44,0,0,92,8,1,
0,0,0,93,94,5,68,0,0,94,95,5,79,0,0,95,10,1,0,0,0,96,97,5,68,0,0,97,12,1,
0,0,0,98,99,5,97,0,0,99,100,5,108,0,0,100,101,5,108,0,0,101,14,1,0,0,0,102,
103,5,70,0,0,103,104,5,79,0,0,104,105,5,82,0,0,105,16,1,0,0,0,106,107,5,
70,0,0,107,18,1,0,0,0,108,109,5,61,0,0,109,20,1,0,0,0,110,111,5,59,0,0,111,
22,1,0,0,0,112,113,5,81,0,0,113,114,5,85,0,0,114,115,5,73,0,0,115,116,5,
84,0,0,116,24,1,0,0,0,117,118,5,83,0,0,118,119,5,69,0,0,119,120,5,84,0,0,
120,26,1,0,0,0,121,122,5,83,0,0,122,28,1,0,0,0,123,124,5,71,0,0,124,125,
5,79,0,0,125,126,5,84,0,0,126,127,5,79,0,0,127,30,1,0,0,0,128,129,5,71,0,
0,129,32,1,0,0,0,130,131,5,73,0,0,131,132,5,70,0,0,132,34,1,0,0,0,133,134,
5,84,0,0,134,135,5,89,0,0,135,136,5,80,0,0,136,137,5,69,0,0,137,36,1,0,0,
0,138,139,5,84,0,0,139,38,1,0,0,0,140,141,5,33,0,0,141,40,1,0,0,0,142,143,
5,35,0,0,143,42,1,0,0,0,144,145,5,37,0,0,145,44,1,0,0,0,146,147,5,82,0,0,
147,148,5,69,0,0,148,149,5,84,0,0,149,150,5,85,0,0,150,151,5,82,0,0,151,
152,5,78,0,0,152,46,1,0,0,0,153,154,5,87,0,0,154,155,5,82,0,0,155,156,5,
73,0,0,156,157,5,84,0,0,157,158,5,69,0,0,158,48,1,0,0,0,159,160,5,40,0,0,
160,50,1,0,0,0,161,162,5,41,0,0,162,52,1,0,0,0,163,164,5,91,0,0,164,54,1,
0,0,0,165,166,5,93,0,0,166,56,1,0,0,0,167,168,5,60,0,0,168,58,1,0,0,0,169,
170,5,62,0,0,170,60,1,0,0,0,171,172,5,101,0,0,172,62,1,0,0,0,173,174,7,0,
0,0,174,64,1,0,0,0,175,176,7,1,0,0,176,66,1,0,0,0,177,182,3,71,35,0,178,
181,3,71,35,0,179,181,3,73,36,0,180,178,1,0,0,0,180,179,1,0,0,0,181,184,
1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,68,1,0,0,0,184,182,1,0,0,0,185,
187,3,73,36,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,
0,0,0,189,70,1,0,0,0,190,191,7,2,0,0,191,72,1,0,0,0,192,193,7,3,0,0,193,
74,1,0,0,0,194,195,5,102,0,0,195,196,5,115,0,0,196,197,5,105,0,0,197,235,
5,110,0,0,198,199,5,102,0,0,199,200,5,99,0,0,200,201,5,111,0,0,201,235,5,
115,0,0,202,203,5,102,0,0,203,204,5,101,0,0,204,205,5,120,0,0,205,235,5,
112,0,0,206,207,5,102,0,0,207,208,5,108,0,0,208,209,5,111,0,0,209,235,5,
103,0,0,210,211,5,102,0,0,211,212,5,97,0,0,212,213,5,116,0,0,213,235,5,110,
0,0,214,215,5,102,0,0,215,216,5,115,0,0,216,217,5,113,0,0,217,235,5,116,
0,0,218,219,5,102,0,0,219,220,5,97,0,0,220,221,5,98,0,0,221,235,5,115,0,
0,222,223,5,102,0,0,223,224,5,115,0,0,224,225,5,103,0,0,225,235,5,110,0,
0,226,227,5,102,0,0,227,228,5,105,0,0,228,229,5,116,0,0,229,235,5,114,0,
0,230,231,5,102,0,0,231,232,5,114,0,0,232,233,5,97,0,0,233,235,5,110,0,0,
234,194,1,0,0,0,234,198,1,0,0,0,234,202,1,0,0,0,234,206,1,0,0,0,234,210,
1,0,0,0,234,214,1,0,0,0,234,218,1,0,0,0,234,222,1,0,0,0,234,226,1,0,0,0,
234,230,1,0,0,0,235,76,1,0,0,0,236,240,5,34,0,0,237,239,9,0,0,0,238,237,
1,0,0,0,239,242,1,0,0,0,240,241,1,0,0,0,240,238,1,0,0,0,241,243,1,0,0,0,
242,240,1,0,0,0,243,244,5,34,0,0,244,78,1,0,0,0,245,246,5,67,0,0,246,247,
5,79,0,0,247,248,5,77,0,0,248,249,5,77,0,0,249,250,5,69,0,0,250,251,5,78,
0,0,251,252,5,84,0,0,252,256,1,0,0,0,253,255,8,4,0,0,254,253,1,0,0,0,255,
258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,80,1,0,0,0,258,256,1,0,0,
0,259,261,7,5,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,
1,0,0,0,263,264,1,0,0,0,264,265,6,40,0,0,265,82,1,0,0,0,8,0,180,182,188,
234,240,256,262,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class focalLexer extends antlr4.Lexer {

    static grammarFileName = "focal.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'.'", "'ASK'", "'A'", "','", "'DO'", "'D'", 
                         "'all'", "'FOR'", "'F'", "'='", "';'", "'QUIT'", 
                         "'SET'", "'S'", "'GOTO'", "'G'", "'IF'", "'TYPE'", 
                         "'T'", "'!'", "'#'", "'%'", "'RETURN'", "'WRITE'", 
                         "'('", "')'", "'['", "']'", "'<'", "'>'", "'e'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "PLUSMIN", "MULOP", "VARIABLE", "INTEGER", "ALPHA", 
                          "DIGIT", "BUILTIN", "STRING_LITERAL", "COMMENT", 
                          "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "PLUSMIN", "MULOP", "VARIABLE", "INTEGER", "ALPHA", 
                      "DIGIT", "BUILTIN", "STRING_LITERAL", "COMMENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

focalLexer.EOF = antlr4.Token.EOF;
focalLexer.T__0 = 1;
focalLexer.T__1 = 2;
focalLexer.T__2 = 3;
focalLexer.T__3 = 4;
focalLexer.T__4 = 5;
focalLexer.T__5 = 6;
focalLexer.T__6 = 7;
focalLexer.T__7 = 8;
focalLexer.T__8 = 9;
focalLexer.T__9 = 10;
focalLexer.T__10 = 11;
focalLexer.T__11 = 12;
focalLexer.T__12 = 13;
focalLexer.T__13 = 14;
focalLexer.T__14 = 15;
focalLexer.T__15 = 16;
focalLexer.T__16 = 17;
focalLexer.T__17 = 18;
focalLexer.T__18 = 19;
focalLexer.T__19 = 20;
focalLexer.T__20 = 21;
focalLexer.T__21 = 22;
focalLexer.T__22 = 23;
focalLexer.T__23 = 24;
focalLexer.T__24 = 25;
focalLexer.T__25 = 26;
focalLexer.T__26 = 27;
focalLexer.T__27 = 28;
focalLexer.T__28 = 29;
focalLexer.T__29 = 30;
focalLexer.T__30 = 31;
focalLexer.PLUSMIN = 32;
focalLexer.MULOP = 33;
focalLexer.VARIABLE = 34;
focalLexer.INTEGER = 35;
focalLexer.ALPHA = 36;
focalLexer.DIGIT = 37;
focalLexer.BUILTIN = 38;
focalLexer.STRING_LITERAL = 39;
focalLexer.COMMENT = 40;
focalLexer.WS = 41;



