// Generated from Resources/Parsers/informix/informix.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import informixListener from './informixListener.js';
const serializedATN = [4,1,350,3142,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,1,0,3,0,402,8,0,1,0,3,0,
405,8,0,1,0,3,0,408,8,0,1,0,1,0,3,0,412,8,0,1,0,1,0,1,1,1,1,1,2,3,2,419,
8,2,1,2,1,2,1,2,3,2,424,8,2,1,2,3,2,427,8,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
4,3,436,8,3,11,3,12,3,437,1,4,1,4,1,4,1,4,1,5,1,5,4,5,446,8,5,11,5,12,5,
447,1,6,1,6,3,6,452,8,6,1,7,1,7,1,7,3,7,457,8,7,1,7,1,7,1,7,3,7,462,8,7,
1,7,1,7,1,7,1,7,1,8,1,8,5,8,470,8,8,10,8,12,8,473,9,8,1,8,1,8,1,9,1,9,1,
9,5,9,480,8,9,10,9,12,9,483,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
492,8,10,1,10,1,10,1,11,4,11,497,8,11,11,11,12,11,498,1,12,1,12,1,12,1,12,
5,12,505,8,12,10,12,12,12,508,9,12,1,13,1,13,1,13,5,13,513,8,13,10,13,12,
13,516,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,526,8,13,10,13,
12,13,529,9,13,3,13,531,8,13,1,14,1,14,1,14,1,14,3,14,537,8,14,1,15,1,15,
1,15,1,15,1,15,1,16,1,16,1,16,3,16,547,8,16,1,17,1,17,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,557,8,18,1,18,1,18,3,18,561,8,18,1,18,1,18,1,18,1,18,1,18,
3,18,568,8,18,3,18,570,8,18,1,19,1,19,1,19,1,19,1,19,3,19,577,8,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,3,19,586,8,19,3,19,588,8,19,1,20,1,20,1,20,
1,20,1,20,3,20,595,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,618,8,21,1,22,
1,22,1,22,1,22,1,22,3,22,625,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
634,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,643,8,22,1,22,1,22,1,22,
1,22,1,22,1,22,1,22,3,22,652,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
661,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,670,8,22,1,22,1,22,1,22,
1,22,1,22,3,22,677,8,22,1,23,1,23,1,24,1,24,3,24,683,8,24,1,25,1,25,3,25,
687,8,25,1,26,1,26,3,26,691,8,26,1,27,1,27,3,27,695,8,27,1,28,1,28,3,28,
699,8,28,1,29,1,29,3,29,703,8,29,1,30,1,30,1,30,1,30,1,30,3,30,710,8,30,
1,31,1,31,1,31,3,31,715,8,31,1,32,1,32,1,32,1,32,1,32,5,32,722,8,32,10,32,
12,32,725,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,735,8,32,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,746,8,33,1,33,1,33,1,34,1,34,
1,34,1,34,1,34,1,34,3,34,756,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
3,35,766,8,35,1,36,1,36,1,37,1,37,1,37,3,37,773,8,37,1,37,1,37,1,38,1,38,
4,38,779,8,38,11,38,12,38,780,1,39,1,39,1,40,1,40,3,40,787,8,40,1,41,1,41,
1,41,1,41,3,41,793,8,41,1,41,1,41,1,41,1,41,1,41,3,41,800,8,41,1,42,1,42,
1,42,3,42,805,8,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,813,8,42,1,42,1,42,
1,42,1,42,3,42,819,8,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,827,8,43,10,43,
12,43,830,9,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,838,8,44,10,44,12,44,841,
9,44,3,44,843,8,44,1,44,3,44,846,8,44,1,44,1,44,1,44,1,44,5,44,852,8,44,
10,44,12,44,855,9,44,3,44,857,8,44,1,45,1,45,1,46,1,46,3,46,863,8,46,1,47,
1,47,3,47,867,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,876,8,48,10,48,
12,48,879,9,48,3,48,881,8,48,1,49,1,49,1,49,5,49,886,8,49,10,49,12,49,889,
9,49,1,50,1,50,1,50,3,50,894,8,50,1,50,1,50,1,50,1,50,3,50,900,8,50,1,50,
1,50,1,50,1,50,3,50,906,8,50,1,50,1,50,3,50,910,8,50,1,50,1,50,1,50,1,50,
3,50,916,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,926,8,50,1,50,
1,50,1,50,1,50,1,50,3,50,933,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,954,8,50,1,51,
1,51,1,51,3,51,959,8,51,1,51,1,51,1,51,1,51,1,51,3,51,966,8,51,1,51,1,51,
1,51,3,51,971,8,51,1,51,1,51,1,51,1,51,3,51,977,8,51,1,51,1,51,1,51,1,51,
3,51,983,8,51,1,52,1,52,1,52,1,52,3,52,989,8,52,1,53,1,53,1,53,1,53,1,54,
1,54,1,54,5,54,998,8,54,10,54,12,54,1001,9,54,1,55,3,55,1004,8,55,1,55,1,
55,1,56,1,56,1,56,1,56,3,56,1012,8,56,1,56,5,56,1015,8,56,10,56,12,56,1018,
9,56,1,57,1,57,1,58,1,58,1,58,5,58,1025,8,58,10,58,12,58,1028,9,58,1,59,
1,59,1,59,3,59,1033,8,59,1,59,1,59,1,59,3,59,1038,8,59,1,59,1,59,1,59,3,
59,1043,8,59,1,59,1,59,1,59,3,59,1048,8,59,1,59,1,59,1,59,3,59,1053,8,59,
1,59,1,59,1,59,5,59,1058,8,59,10,59,12,59,1061,9,59,3,59,1063,8,59,1,59,
1,59,1,59,1,59,1,59,3,59,1070,8,59,1,59,1,59,1,59,5,59,1075,8,59,10,59,12,
59,1078,9,59,3,59,1080,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,1089,
8,59,10,59,12,59,1092,9,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,1101,
8,59,10,59,12,59,1104,9,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1123,8,59,1,60,1,60,1,60,1,
60,4,60,1129,8,60,11,60,12,60,1130,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,
61,1140,8,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,1149,8,63,1,64,1,64,
1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,3,68,1161,8,68,1,69,1,69,1,70,1,
70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1173,8,70,1,70,3,70,1176,8,70,1,71,
1,71,1,71,1,71,1,71,1,71,5,71,1184,8,71,10,71,12,71,1187,9,71,3,71,1189,
8,71,1,72,1,72,1,72,5,72,1194,8,72,10,72,12,72,1197,9,72,1,73,1,73,1,73,
5,73,1202,8,73,10,73,12,73,1205,9,73,1,74,1,74,1,74,1,74,5,74,1211,8,74,
10,74,12,74,1214,9,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
1,75,1,75,1,75,1,75,3,75,1230,8,75,1,76,3,76,1233,8,76,1,76,1,76,1,76,1,
76,5,76,1239,8,76,10,76,12,76,1242,9,76,1,77,1,77,1,78,1,78,1,78,1,78,5,
78,1250,8,78,10,78,12,78,1253,9,78,1,79,1,79,1,80,3,80,1258,8,80,1,80,1,
80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1269,8,80,1,80,1,80,3,80,1273,
8,80,1,81,1,81,1,81,1,81,1,81,5,81,1280,8,81,10,81,12,81,1283,9,81,3,81,
1285,8,81,1,81,3,81,1288,8,81,1,82,1,82,3,82,1292,8,82,1,83,1,83,1,83,1,
83,3,83,1298,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1306,8,84,1,85,1,85,
1,85,1,85,3,85,1312,8,85,1,86,1,86,3,86,1316,8,86,1,87,1,87,1,88,1,88,1,
89,1,89,1,89,1,89,5,89,1326,8,89,10,89,12,89,1329,9,89,1,89,1,89,1,90,1,
90,3,90,1335,8,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1343,8,90,3,90,1345,
8,90,1,91,1,91,1,92,1,92,1,93,1,93,3,93,1353,8,93,1,94,1,94,3,94,1357,8,
94,1,95,1,95,1,95,1,95,3,95,1363,8,95,1,95,1,95,3,95,1367,8,95,3,95,1369,
8,95,1,95,1,95,1,95,1,96,1,96,1,96,3,96,1377,8,96,1,97,1,97,1,97,3,97,1382,
8,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1393,8,98,1,98,1,
98,3,98,1397,8,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,
101,1,101,1,102,1,102,1,103,1,103,1,103,1,103,3,103,1417,8,103,1,103,1,103,
3,103,1421,8,103,1,103,1,103,3,103,1425,8,103,1,103,1,103,3,103,1429,8,103,
1,103,1,103,1,103,1,103,1,104,1,104,1,104,5,104,1438,8,104,10,104,12,104,
1441,9,104,1,105,1,105,1,105,5,105,1446,8,105,10,105,12,105,1449,9,105,1,
106,1,106,1,106,1,106,1,106,3,106,1456,8,106,5,106,1458,8,106,10,106,12,
106,1461,9,106,1,106,1,106,3,106,1465,8,106,3,106,1467,8,106,1,106,1,106,
1,106,1,106,1,106,1,106,1,106,1,106,5,106,1477,8,106,10,106,12,106,1480,
9,106,1,106,1,106,3,106,1484,8,106,1,106,1,106,3,106,1488,8,106,1,107,1,
107,1,107,1,107,3,107,1494,8,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
3,108,1503,8,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
110,1,110,3,110,1516,8,110,3,110,1518,8,110,1,111,1,111,1,111,1,111,1,112,
1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
1536,8,112,3,112,1538,8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,
112,1,112,1,112,1,112,1,112,5,112,1552,8,112,10,112,12,112,1555,9,112,1,
112,1,112,1,112,1,112,5,112,1561,8,112,10,112,12,112,1564,9,112,1,112,1,
112,1,112,1,112,1,112,1,112,5,112,1572,8,112,10,112,12,112,1575,9,112,3,
112,1577,8,112,1,112,1,112,1,112,1,112,5,112,1583,8,112,10,112,12,112,1586,
9,112,1,112,1,112,1,112,1,112,5,112,1592,8,112,10,112,12,112,1595,9,112,
3,112,1597,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,
113,1608,8,113,1,113,1,113,1,113,1,113,3,113,1614,8,113,3,113,1616,8,113,
3,113,1618,8,113,1,114,1,114,1,114,5,114,1623,8,114,10,114,12,114,1626,9,
114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1636,8,115,3,115,
1638,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,
115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,5,115,1660,8,115,
10,115,12,115,1663,9,115,3,115,1665,8,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,3,115,1675,8,115,1,115,1,115,1,115,1,115,1,115,1,115,3,
115,1683,8,115,1,115,3,115,1686,8,115,1,115,1,115,3,115,1690,8,115,1,115,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1700,8,115,1,115,1,115,1,
115,1,115,1,115,1,115,1,115,1,115,5,115,1710,8,115,10,115,12,115,1713,9,
115,3,115,1715,8,115,1,115,1,115,3,115,1719,8,115,1,116,1,116,1,116,1,116,
1,116,3,116,1726,8,116,1,116,1,116,3,116,1730,8,116,1,116,1,116,1,116,1,
116,1,116,1,116,3,116,1738,8,116,1,116,1,116,1,116,1,116,3,116,1744,8,116,
3,116,1746,8,116,3,116,1748,8,116,1,117,1,117,1,117,3,117,1753,8,117,1,117,
1,117,1,118,1,118,1,118,5,118,1760,8,118,10,118,12,118,1763,9,118,1,119,
1,119,1,119,5,119,1768,8,119,10,119,12,119,1771,9,119,1,120,1,120,1,120,
1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
1,120,3,120,1789,8,120,1,121,1,121,1,121,1,121,1,121,3,121,1796,8,121,1,
121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1805,8,121,1,122,1,122,1,123,
3,123,1810,8,123,1,123,1,123,1,123,5,123,1815,8,123,10,123,12,123,1818,9,
123,1,124,1,124,1,124,1,124,1,124,1,125,1,125,4,125,1827,8,125,11,125,12,
125,1828,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
1,126,1,126,3,126,1844,8,126,1,126,3,126,1847,8,126,1,126,1,126,3,126,1851,
8,126,1,126,4,126,1854,8,126,11,126,12,126,1855,1,126,1,126,1,126,3,126,
1861,8,126,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1869,8,127,1,127,5,
127,1872,8,127,10,127,12,127,1875,9,127,1,127,1,127,3,127,1879,8,127,1,128,
1,128,1,128,1,128,3,128,1885,8,128,1,129,1,129,1,129,1,129,1,129,1,129,4,
129,1893,8,129,11,129,12,129,1894,1,130,1,130,1,130,1,130,1,130,1,130,5,
130,1903,8,130,10,130,12,130,1906,9,130,1,130,1,130,1,130,5,130,1911,8,130,
10,130,12,130,1914,9,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,
1923,8,130,3,130,1925,8,130,1,130,3,130,1928,8,130,1,130,1,130,1,131,1,131,
1,131,1,131,5,131,1936,8,131,10,131,12,131,1939,9,131,1,131,3,131,1942,8,
131,1,132,1,132,1,132,1,132,5,132,1948,8,132,10,132,12,132,1951,9,132,1,
132,3,132,1954,8,132,1,133,1,133,1,133,1,133,5,133,1960,8,133,10,133,12,
133,1963,9,133,1,133,3,133,1966,8,133,1,133,1,133,3,133,1970,8,133,1,133,
1,133,1,133,3,133,1975,8,133,1,133,3,133,1978,8,133,1,133,1,133,1,133,1,
133,1,133,1,133,3,133,1986,8,133,5,133,1988,8,133,10,133,12,133,1991,9,133,
1,133,1,133,3,133,1995,8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,
134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,2011,8,134,1,135,1,135,1,135,
1,135,3,135,2017,8,135,1,135,1,135,1,135,1,135,3,135,2023,8,135,3,135,2025,
8,135,1,136,1,136,5,136,2029,8,136,10,136,12,136,2032,9,136,1,137,1,137,
1,137,1,137,1,137,1,137,5,137,2040,8,137,10,137,12,137,2043,9,137,1,137,
1,137,3,137,2047,8,137,1,137,1,137,1,137,5,137,2052,8,137,10,137,12,137,
2055,9,137,1,137,1,137,3,137,2059,8,137,1,137,1,137,1,137,3,137,2064,8,137,
1,137,3,137,2067,8,137,1,137,1,137,3,137,2071,8,137,1,137,4,137,2074,8,137,
11,137,12,137,2075,1,137,1,137,1,137,3,137,2081,8,137,1,138,1,138,1,138,
1,138,1,138,3,138,2088,8,138,1,138,1,138,1,138,1,138,5,138,2094,8,138,10,
138,12,138,2097,9,138,1,138,1,138,3,138,2101,8,138,1,138,3,138,2104,8,138,
1,138,4,138,2107,8,138,11,138,12,138,2108,1,138,1,138,1,138,3,138,2114,8,
138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,2124,8,139,1,139,
1,139,3,139,2128,8,139,1,139,1,139,3,139,2132,8,139,3,139,2134,8,139,1,140,
1,140,1,140,1,140,3,140,2140,8,140,1,140,1,140,5,140,2144,8,140,10,140,12,
140,2147,9,140,1,140,1,140,1,140,1,140,3,140,2153,8,140,1,140,1,140,5,140,
2157,8,140,10,140,12,140,2160,9,140,1,140,1,140,1,140,1,140,3,140,2166,8,
140,1,140,1,140,5,140,2170,8,140,10,140,12,140,2173,9,140,1,140,1,140,1,
140,1,140,3,140,2179,8,140,1,141,1,141,3,141,2183,8,141,1,142,1,142,1,142,
5,142,2188,8,142,10,142,12,142,2191,9,142,1,142,1,142,1,142,1,143,1,143,
1,143,3,143,2199,8,143,1,143,1,143,1,143,1,143,3,143,2205,8,143,3,143,2207,
8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,
2219,8,144,3,144,2221,8,144,1,145,1,145,1,145,5,145,2226,8,145,10,145,12,
145,2229,9,145,1,146,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,
1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
1,147,1,147,1,147,1,147,1,147,3,147,2258,8,147,1,147,1,147,1,147,1,147,1,
147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,
147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,
147,1,147,1,147,3,147,2291,8,147,1,148,1,148,1,148,1,148,5,148,2297,8,148,
10,148,12,148,2300,9,148,1,149,1,149,1,149,1,149,1,149,3,149,2307,8,149,
1,149,1,149,3,149,2311,8,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,
149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,2329,8,149,1,149,
1,149,1,149,1,149,1,149,1,149,1,149,3,149,2338,8,149,1,149,1,149,1,149,1,
149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,
149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,
149,1,149,1,149,1,149,3,149,2371,8,149,1,149,3,149,2374,8,149,1,149,1,149,
1,149,1,149,1,149,5,149,2381,8,149,10,149,12,149,2384,9,149,1,149,1,149,
1,149,3,149,2389,8,149,3,149,2391,8,149,1,150,1,150,1,150,1,150,1,150,1,
150,1,150,3,150,2400,8,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
1,151,3,151,2411,8,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2419,8,
151,3,151,2421,8,151,1,151,1,151,3,151,2425,8,151,1,151,1,151,1,151,1,151,
3,151,2431,8,151,1,151,1,151,1,151,3,151,2436,8,151,3,151,2438,8,151,1,151,
1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2450,8,151,1,
151,1,151,1,151,3,151,2455,8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
1,151,3,151,2465,8,151,1,151,1,151,1,151,1,151,3,151,2471,8,151,3,151,2473,
8,151,1,152,1,152,1,152,5,152,2478,8,152,10,152,12,152,2481,9,152,1,153,
1,153,1,154,1,154,1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,156,3,156,
2495,8,156,3,156,2497,8,156,3,156,2499,8,156,1,156,1,156,3,156,2503,8,156,
1,156,1,156,1,156,1,156,1,156,5,156,2510,8,156,10,156,12,156,2513,9,156,
3,156,2515,8,156,1,156,1,156,1,156,3,156,2520,8,156,3,156,2522,8,156,1,157,
1,157,1,157,1,157,1,157,3,157,2529,8,157,1,157,1,157,1,157,1,157,1,157,1,
157,5,157,2537,8,157,10,157,12,157,2540,9,157,1,157,1,157,1,157,1,157,3,
157,2546,8,157,1,157,1,157,3,157,2550,8,157,1,157,1,157,1,157,3,157,2555,
8,157,1,157,1,157,1,157,3,157,2560,8,157,1,157,1,157,1,157,1,157,1,157,3,
157,2567,8,157,1,157,1,157,3,157,2571,8,157,1,157,3,157,2574,8,157,1,157,
1,157,1,157,1,157,1,157,1,157,1,157,3,157,2583,8,157,1,157,1,157,1,157,3,
157,2588,8,157,5,157,2590,8,157,10,157,12,157,2593,9,157,1,157,1,157,1,157,
1,157,1,157,3,157,2600,8,157,1,158,1,158,1,158,1,158,1,158,1,158,3,158,2608,
8,158,1,159,1,159,1,160,1,160,1,160,3,160,2615,8,160,1,160,1,160,1,160,1,
160,3,160,2621,8,160,3,160,2623,8,160,1,161,1,161,3,161,2627,8,161,1,161,
1,161,1,161,3,161,2632,8,161,5,161,2634,8,161,10,161,12,161,2637,9,161,1,
162,1,162,1,162,3,162,2642,8,162,1,162,1,162,1,163,1,163,1,163,1,163,1,163,
1,163,1,163,1,163,1,163,3,163,2655,8,163,1,164,3,164,2658,8,164,1,164,1,
164,1,165,3,165,2663,8,165,1,165,1,165,3,165,2667,8,165,1,166,1,166,1,167,
1,167,1,167,1,167,1,167,1,167,3,167,2677,8,167,3,167,2679,8,167,1,167,1,
167,1,167,1,167,1,167,1,167,3,167,2687,8,167,3,167,2689,8,167,5,167,2691,
8,167,10,167,12,167,2694,9,167,1,168,1,168,1,169,1,169,1,169,3,169,2701,
8,169,1,169,1,169,3,169,2705,8,169,1,169,3,169,2708,8,169,1,169,3,169,2711,
8,169,1,169,3,169,2714,8,169,1,169,3,169,2717,8,169,1,169,1,169,1,169,3,
169,2722,8,169,1,169,1,169,1,169,3,169,2727,8,169,1,170,1,170,3,170,2731,
8,170,1,170,1,170,1,171,1,171,1,171,3,171,2738,8,171,1,171,3,171,2741,8,
171,1,171,3,171,2744,8,171,1,171,3,171,2747,8,171,1,172,1,172,1,172,1,173,
1,173,1,173,1,173,1,174,1,174,1,174,1,175,1,175,3,175,2761,8,175,1,176,1,
176,1,176,1,176,1,176,5,176,2768,8,176,10,176,12,176,2771,9,176,1,177,1,
177,1,177,1,177,3,177,2777,8,177,1,177,1,177,1,177,3,177,2782,8,177,3,177,
2784,8,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,3,177,2793,8,177,1,
177,3,177,2796,8,177,1,177,1,177,1,178,1,178,1,178,1,178,3,178,2804,8,178,
1,178,1,178,1,178,3,178,2809,8,178,3,178,2811,8,178,1,178,1,178,1,178,1,
179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,2823,8,179,1,179,1,179,1,179,
1,179,1,179,5,179,2830,8,179,10,179,12,179,2833,9,179,1,179,1,179,1,179,
3,179,2838,8,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,
180,1,180,5,180,2851,8,180,10,180,12,180,2854,9,180,1,180,1,180,1,180,1,
180,1,180,1,180,1,180,3,180,2863,8,180,1,180,3,180,2866,8,180,1,180,1,180,
1,180,1,180,1,180,5,180,2873,8,180,10,180,12,180,2876,9,180,1,180,1,180,
1,180,1,180,1,180,3,180,2883,8,180,1,180,3,180,2886,8,180,3,180,2888,8,180,
1,180,1,180,1,180,1,180,1,180,3,180,2895,8,180,3,180,2897,8,180,1,181,1,
181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,2907,8,181,3,181,2909,8,181,
1,181,1,181,1,182,1,182,1,182,5,182,2916,8,182,10,182,12,182,2919,9,182,
1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,2930,8,183,1,
183,1,183,1,183,3,183,2935,8,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
3,183,2944,8,183,1,184,1,184,1,184,1,184,1,184,3,184,2951,8,184,1,184,1,
184,1,184,1,184,1,184,1,184,3,184,2959,8,184,1,184,1,184,3,184,2963,8,184,
1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,2975,8,
184,1,184,1,184,3,184,2979,8,184,1,184,3,184,2982,8,184,1,185,1,185,1,185,
1,185,3,185,2988,8,185,1,185,3,185,2991,8,185,1,185,3,185,2994,8,185,1,186,
1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3006,8,187,1,
188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,3,189,3016,8,189,1,189,1,189,
3,189,3020,8,189,1,190,1,190,1,190,1,190,1,190,1,190,3,190,3028,8,190,1,
190,3,190,3031,8,190,1,190,3,190,3034,8,190,1,191,1,191,1,191,3,191,3039,
8,191,1,191,3,191,3042,8,191,1,191,3,191,3045,8,191,1,191,1,191,3,191,3049,
8,191,1,191,1,191,3,191,3053,8,191,1,191,3,191,3056,8,191,1,191,1,191,1,
191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,3,192,3068,8,192,3,192,3070,
8,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,
1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,5,192,3091,8,192,10,192,
12,192,3094,9,192,1,193,1,193,1,193,1,193,3,193,3100,8,193,1,193,1,193,1,
193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,3111,8,193,1,193,1,193,1,193,
1,193,3,193,3117,8,193,1,193,4,193,3120,8,193,11,193,12,193,3121,3,193,3124,
8,193,1,194,1,194,1,195,1,195,3,195,3130,8,195,1,196,1,196,1,197,1,197,1,
198,1,198,1,199,1,199,3,199,3140,8,199,1,199,0,0,200,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
398,0,41,2,0,147,147,223,223,2,0,31,31,271,271,5,0,22,22,144,144,146,146,
226,226,254,255,3,0,66,67,183,183,194,194,2,0,83,83,109,109,2,0,196,196,
294,294,3,0,35,35,184,184,341,341,2,0,101,101,280,280,2,0,6,6,9,9,1,0,312,
313,3,0,6,6,81,81,314,314,4,0,62,62,64,64,182,182,310,310,5,0,17,17,54,54,
175,175,177,177,266,266,2,0,68,68,197,197,3,0,179,179,314,315,344,344,15,
0,17,17,43,43,54,54,62,62,64,64,98,98,138,138,175,177,182,182,216,216,266,
266,275,275,277,277,295,295,310,310,1,0,273,274,9,0,34,34,52,52,80,80,111,
111,115,115,140,140,171,171,234,234,303,303,2,0,162,162,211,211,1,0,256,
257,2,0,161,161,163,163,3,0,24,24,238,238,283,283,11,0,23,23,25,26,60,60,
77,77,125,125,149,149,169,169,189,189,228,228,304,304,311,311,1,0,14,15,
2,0,2,2,19,19,3,0,74,74,140,141,241,241,2,0,187,187,217,217,3,0,112,112,
171,172,221,221,1,0,199,200,2,0,50,50,282,282,2,0,84,84,288,288,2,0,217,
217,349,349,2,0,210,210,241,241,2,0,11,11,76,76,2,0,81,81,285,285,2,0,92,
92,250,250,3,0,48,48,79,79,232,232,2,0,89,89,259,259,2,0,260,260,299,299,
2,0,53,53,265,265,31,0,3,3,12,12,54,54,58,58,101,101,107,107,116,116,126,
126,130,130,136,136,145,145,147,147,156,156,158,158,162,162,176,176,190,
192,195,195,211,211,226,226,252,252,258,258,264,264,270,270,275,275,277,
277,280,280,290,290,295,295,297,297,309,309,3529,0,401,1,0,0,0,2,415,1,0,
0,0,4,418,1,0,0,0,6,435,1,0,0,0,8,439,1,0,0,0,10,445,1,0,0,0,12,449,1,0,
0,0,14,453,1,0,0,0,16,467,1,0,0,0,18,476,1,0,0,0,20,484,1,0,0,0,22,496,1,
0,0,0,24,500,1,0,0,0,26,530,1,0,0,0,28,536,1,0,0,0,30,538,1,0,0,0,32,546,
1,0,0,0,34,548,1,0,0,0,36,569,1,0,0,0,38,587,1,0,0,0,40,594,1,0,0,0,42,617,
1,0,0,0,44,676,1,0,0,0,46,678,1,0,0,0,48,682,1,0,0,0,50,686,1,0,0,0,52,690,
1,0,0,0,54,694,1,0,0,0,56,698,1,0,0,0,58,702,1,0,0,0,60,704,1,0,0,0,62,714,
1,0,0,0,64,716,1,0,0,0,66,736,1,0,0,0,68,749,1,0,0,0,70,757,1,0,0,0,72,767,
1,0,0,0,74,772,1,0,0,0,76,778,1,0,0,0,78,782,1,0,0,0,80,786,1,0,0,0,82,799,
1,0,0,0,84,801,1,0,0,0,86,820,1,0,0,0,88,831,1,0,0,0,90,858,1,0,0,0,92,862,
1,0,0,0,94,864,1,0,0,0,96,880,1,0,0,0,98,882,1,0,0,0,100,953,1,0,0,0,102,
982,1,0,0,0,104,988,1,0,0,0,106,990,1,0,0,0,108,994,1,0,0,0,110,1003,1,0,
0,0,112,1007,1,0,0,0,114,1019,1,0,0,0,116,1021,1,0,0,0,118,1122,1,0,0,0,
120,1124,1,0,0,0,122,1139,1,0,0,0,124,1141,1,0,0,0,126,1148,1,0,0,0,128,
1150,1,0,0,0,130,1152,1,0,0,0,132,1154,1,0,0,0,134,1156,1,0,0,0,136,1160,
1,0,0,0,138,1162,1,0,0,0,140,1175,1,0,0,0,142,1188,1,0,0,0,144,1190,1,0,
0,0,146,1198,1,0,0,0,148,1206,1,0,0,0,150,1229,1,0,0,0,152,1232,1,0,0,0,
154,1243,1,0,0,0,156,1245,1,0,0,0,158,1254,1,0,0,0,160,1268,1,0,0,0,162,
1274,1,0,0,0,164,1291,1,0,0,0,166,1297,1,0,0,0,168,1305,1,0,0,0,170,1311,
1,0,0,0,172,1315,1,0,0,0,174,1317,1,0,0,0,176,1319,1,0,0,0,178,1321,1,0,
0,0,180,1332,1,0,0,0,182,1346,1,0,0,0,184,1348,1,0,0,0,186,1352,1,0,0,0,
188,1356,1,0,0,0,190,1358,1,0,0,0,192,1376,1,0,0,0,194,1378,1,0,0,0,196,
1386,1,0,0,0,198,1402,1,0,0,0,200,1406,1,0,0,0,202,1408,1,0,0,0,204,1410,
1,0,0,0,206,1412,1,0,0,0,208,1434,1,0,0,0,210,1442,1,0,0,0,212,1487,1,0,
0,0,214,1493,1,0,0,0,216,1502,1,0,0,0,218,1504,1,0,0,0,220,1517,1,0,0,0,
222,1519,1,0,0,0,224,1596,1,0,0,0,226,1617,1,0,0,0,228,1619,1,0,0,0,230,
1718,1,0,0,0,232,1747,1,0,0,0,234,1749,1,0,0,0,236,1756,1,0,0,0,238,1764,
1,0,0,0,240,1788,1,0,0,0,242,1804,1,0,0,0,244,1806,1,0,0,0,246,1809,1,0,
0,0,248,1819,1,0,0,0,250,1824,1,0,0,0,252,1830,1,0,0,0,254,1862,1,0,0,0,
256,1884,1,0,0,0,258,1886,1,0,0,0,260,1896,1,0,0,0,262,1931,1,0,0,0,264,
1943,1,0,0,0,266,1955,1,0,0,0,268,2010,1,0,0,0,270,2024,1,0,0,0,272,2026,
1,0,0,0,274,2033,1,0,0,0,276,2082,1,0,0,0,278,2133,1,0,0,0,280,2178,1,0,
0,0,282,2180,1,0,0,0,284,2184,1,0,0,0,286,2206,1,0,0,0,288,2220,1,0,0,0,
290,2222,1,0,0,0,292,2230,1,0,0,0,294,2290,1,0,0,0,296,2292,1,0,0,0,298,
2390,1,0,0,0,300,2399,1,0,0,0,302,2472,1,0,0,0,304,2474,1,0,0,0,306,2482,
1,0,0,0,308,2484,1,0,0,0,310,2486,1,0,0,0,312,2521,1,0,0,0,314,2599,1,0,
0,0,316,2607,1,0,0,0,318,2609,1,0,0,0,320,2622,1,0,0,0,322,2624,1,0,0,0,
324,2638,1,0,0,0,326,2654,1,0,0,0,328,2657,1,0,0,0,330,2662,1,0,0,0,332,
2668,1,0,0,0,334,2670,1,0,0,0,336,2695,1,0,0,0,338,2697,1,0,0,0,340,2728,
1,0,0,0,342,2734,1,0,0,0,344,2748,1,0,0,0,346,2751,1,0,0,0,348,2755,1,0,
0,0,350,2758,1,0,0,0,352,2762,1,0,0,0,354,2772,1,0,0,0,356,2799,1,0,0,0,
358,2815,1,0,0,0,360,2839,1,0,0,0,362,2898,1,0,0,0,364,2912,1,0,0,0,366,
2943,1,0,0,0,368,2981,1,0,0,0,370,2983,1,0,0,0,372,2995,1,0,0,0,374,3005,
1,0,0,0,376,3007,1,0,0,0,378,3019,1,0,0,0,380,3033,1,0,0,0,382,3035,1,0,
0,0,384,3060,1,0,0,0,386,3095,1,0,0,0,388,3125,1,0,0,0,390,3129,1,0,0,0,
392,3131,1,0,0,0,394,3133,1,0,0,0,396,3135,1,0,0,0,398,3139,1,0,0,0,400,
402,3,370,185,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,
3,20,10,0,404,403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,3,22,11,
0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,411,3,4,2,0,410,412,
3,10,5,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,5,0,0,1,
414,1,1,0,0,0,415,416,5,332,0,0,416,3,1,0,0,0,417,419,3,388,194,0,418,417,
1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,5,173,0,0,421,423,3,388,
194,0,422,424,3,22,11,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,
425,427,3,6,3,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,
5,88,0,0,429,430,5,173,0,0,430,431,3,388,194,0,431,5,1,0,0,0,432,436,3,8,
4,0,433,436,3,76,38,0,434,436,3,388,194,0,435,432,1,0,0,0,435,433,1,0,0,
0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,7,
1,0,0,0,439,440,5,72,0,0,440,441,7,0,0,0,441,442,3,388,194,0,442,9,1,0,0,
0,443,446,3,382,191,0,444,446,3,14,7,0,445,443,1,0,0,0,445,444,1,0,0,0,446,
447,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,11,1,0,0,0,449,451,5,236,
0,0,450,452,3,210,105,0,451,450,1,0,0,0,451,452,1,0,0,0,452,13,1,0,0,0,453,
454,5,120,0,0,454,456,3,164,82,0,455,457,3,16,8,0,456,455,1,0,0,0,456,457,
1,0,0,0,457,458,1,0,0,0,458,459,3,388,194,0,459,461,3,22,11,0,460,462,3,
76,38,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,88,0,0,
464,465,5,120,0,0,465,466,3,388,194,0,466,15,1,0,0,0,467,471,5,325,0,0,468,
470,3,18,9,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,
0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,326,0,0,475,17,1,0,0,0,476,
481,3,2,1,0,477,478,5,316,0,0,478,480,3,2,1,0,479,477,1,0,0,0,480,483,1,
0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,19,1,0,0,0,483,481,1,0,0,0,484,
491,5,122,0,0,485,492,3,72,36,0,486,487,3,388,194,0,487,488,3,22,11,0,488,
489,5,88,0,0,489,490,5,122,0,0,490,492,1,0,0,0,491,485,1,0,0,0,491,486,1,
0,0,0,492,493,1,0,0,0,493,494,3,388,194,0,494,21,1,0,0,0,495,497,3,24,12,
0,496,495,1,0,0,0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,23,
1,0,0,0,500,501,5,73,0,0,501,506,3,26,13,0,502,503,5,316,0,0,503,505,3,26,
13,0,504,502,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,
25,1,0,0,0,508,506,1,0,0,0,509,514,3,398,199,0,510,511,5,316,0,0,511,513,
3,398,199,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,518,3,28,14,0,518,531,1,0,0,0,519,
520,3,398,199,0,520,527,3,28,14,0,521,522,5,316,0,0,522,523,3,398,199,0,
523,524,3,28,14,0,524,526,1,0,0,0,525,521,1,0,0,0,526,529,1,0,0,0,527,525,
1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,530,509,1,0,0,0,
530,519,1,0,0,0,531,27,1,0,0,0,532,537,3,32,16,0,533,537,3,30,15,0,534,537,
3,34,17,0,535,537,3,62,31,0,536,532,1,0,0,0,536,533,1,0,0,0,536,534,1,0,
0,0,536,535,1,0,0,0,537,29,1,0,0,0,538,539,5,160,0,0,539,540,3,328,164,0,
540,541,5,329,0,0,541,542,3,2,1,0,542,31,1,0,0,0,543,547,3,38,19,0,544,547,
3,36,18,0,545,547,3,40,20,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,
0,0,547,33,1,0,0,0,548,549,7,1,0,0,549,35,1,0,0,0,550,570,7,2,0,0,551,560,
7,3,0,0,552,553,5,325,0,0,553,556,3,170,85,0,554,555,5,316,0,0,555,557,3,
170,85,0,556,554,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,5,326,0,
0,559,561,1,0,0,0,560,552,1,0,0,0,560,561,1,0,0,0,561,570,1,0,0,0,562,567,
7,4,0,0,563,564,5,325,0,0,564,565,3,170,85,0,565,566,5,326,0,0,566,568,1,
0,0,0,567,563,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,550,1,0,0,0,569,
551,1,0,0,0,569,562,1,0,0,0,570,37,1,0,0,0,571,572,7,5,0,0,572,573,5,325,
0,0,573,576,3,170,85,0,574,575,5,316,0,0,575,577,3,170,85,0,576,574,1,0,
0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,5,326,0,0,579,588,1,0,0,0,580,
585,7,6,0,0,581,582,5,325,0,0,582,583,3,170,85,0,583,584,5,326,0,0,584,586,
1,0,0,0,585,581,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,571,1,0,0,0,
587,580,1,0,0,0,588,39,1,0,0,0,589,595,5,62,0,0,590,591,5,63,0,0,591,595,
3,42,21,0,592,593,5,148,0,0,593,595,3,44,22,0,594,589,1,0,0,0,594,590,1,
0,0,0,594,592,1,0,0,0,595,41,1,0,0,0,596,597,5,310,0,0,597,598,5,276,0,0,
598,618,3,48,24,0,599,600,5,182,0,0,600,601,5,276,0,0,601,618,3,50,25,0,
602,603,5,64,0,0,603,604,5,276,0,0,604,618,3,52,26,0,605,606,5,132,0,0,606,
607,5,276,0,0,607,618,3,54,27,0,608,609,5,178,0,0,609,610,5,276,0,0,610,
618,3,56,28,0,611,612,5,246,0,0,612,613,5,276,0,0,613,618,3,58,29,0,614,
615,5,117,0,0,615,616,5,276,0,0,616,618,3,60,30,0,617,596,1,0,0,0,617,599,
1,0,0,0,617,602,1,0,0,0,617,605,1,0,0,0,617,608,1,0,0,0,617,611,1,0,0,0,
617,614,1,0,0,0,618,43,1,0,0,0,619,624,5,310,0,0,620,621,5,325,0,0,621,622,
3,170,85,0,622,623,5,326,0,0,623,625,1,0,0,0,624,620,1,0,0,0,624,625,1,0,
0,0,625,626,1,0,0,0,626,627,5,276,0,0,627,677,3,48,24,0,628,633,5,182,0,
0,629,630,5,325,0,0,630,631,3,170,85,0,631,632,5,326,0,0,632,634,1,0,0,0,
633,629,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,636,5,276,0,0,636,677,
3,50,25,0,637,642,5,64,0,0,638,639,5,325,0,0,639,640,3,170,85,0,640,641,
5,326,0,0,641,643,1,0,0,0,642,638,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,
0,644,645,5,276,0,0,645,677,3,52,26,0,646,651,5,132,0,0,647,648,5,325,0,
0,648,649,3,170,85,0,649,650,5,326,0,0,650,652,1,0,0,0,651,647,1,0,0,0,651,
652,1,0,0,0,652,653,1,0,0,0,653,654,5,276,0,0,654,677,3,54,27,0,655,660,
5,178,0,0,656,657,5,325,0,0,657,658,3,170,85,0,658,659,5,326,0,0,659,661,
1,0,0,0,660,656,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,5,276,0,
0,663,677,3,56,28,0,664,669,5,246,0,0,665,666,5,325,0,0,666,667,3,170,85,
0,667,668,5,326,0,0,668,670,1,0,0,0,669,665,1,0,0,0,669,670,1,0,0,0,670,
671,1,0,0,0,671,672,5,276,0,0,672,677,3,58,29,0,673,674,5,117,0,0,674,675,
5,276,0,0,675,677,3,60,30,0,676,619,1,0,0,0,676,628,1,0,0,0,676,637,1,0,
0,0,676,646,1,0,0,0,676,655,1,0,0,0,676,664,1,0,0,0,676,673,1,0,0,0,677,
45,1,0,0,0,678,679,3,48,24,0,679,47,1,0,0,0,680,683,5,310,0,0,681,683,3,
50,25,0,682,680,1,0,0,0,682,681,1,0,0,0,683,49,1,0,0,0,684,687,5,182,0,0,
685,687,3,52,26,0,686,684,1,0,0,0,686,685,1,0,0,0,687,51,1,0,0,0,688,691,
5,64,0,0,689,691,3,54,27,0,690,688,1,0,0,0,690,689,1,0,0,0,691,53,1,0,0,
0,692,695,5,132,0,0,693,695,3,56,28,0,694,692,1,0,0,0,694,693,1,0,0,0,695,
55,1,0,0,0,696,699,5,178,0,0,697,699,3,58,29,0,698,696,1,0,0,0,698,697,1,
0,0,0,699,57,1,0,0,0,700,703,5,246,0,0,701,703,3,60,30,0,702,700,1,0,0,0,
702,701,1,0,0,0,703,59,1,0,0,0,704,709,5,117,0,0,705,706,5,325,0,0,706,707,
3,170,85,0,707,708,5,326,0,0,708,710,1,0,0,0,709,705,1,0,0,0,709,710,1,0,
0,0,710,61,1,0,0,0,711,715,3,64,32,0,712,715,3,68,34,0,713,715,3,70,35,0,
714,711,1,0,0,0,714,712,1,0,0,0,714,713,1,0,0,0,715,63,1,0,0,0,716,734,5,
225,0,0,717,718,3,388,194,0,718,723,3,26,13,0,719,720,5,316,0,0,720,722,
3,26,13,0,721,719,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,
0,724,726,1,0,0,0,725,723,1,0,0,0,726,727,5,88,0,0,727,728,5,225,0,0,728,
735,1,0,0,0,729,730,5,160,0,0,730,731,3,328,164,0,731,732,5,329,0,0,732,
733,5,314,0,0,733,735,1,0,0,0,734,717,1,0,0,0,734,729,1,0,0,0,735,65,1,0,
0,0,736,737,5,327,0,0,737,745,3,170,85,0,738,739,5,316,0,0,739,746,3,170,
85,0,740,741,5,316,0,0,741,742,3,170,85,0,742,743,5,316,0,0,743,744,3,170,
85,0,744,746,1,0,0,0,745,738,1,0,0,0,745,740,1,0,0,0,745,746,1,0,0,0,746,
747,1,0,0,0,747,748,5,328,0,0,748,67,1,0,0,0,749,750,5,18,0,0,750,751,3,
66,33,0,751,755,5,198,0,0,752,756,3,64,32,0,753,756,3,32,16,0,754,756,3,
34,17,0,755,752,1,0,0,0,755,753,1,0,0,0,755,754,1,0,0,0,756,69,1,0,0,0,757,
758,5,86,0,0,758,759,5,18,0,0,759,760,5,305,0,0,760,761,3,170,85,0,761,762,
5,78,0,0,762,765,5,198,0,0,763,766,3,64,32,0,764,766,3,32,16,0,765,763,1,
0,0,0,765,764,1,0,0,0,766,71,1,0,0,0,767,768,5,333,0,0,768,73,1,0,0,0,769,
770,3,78,39,0,770,771,5,318,0,0,771,773,1,0,0,0,772,769,1,0,0,0,772,773,
1,0,0,0,773,774,1,0,0,0,774,775,3,80,40,0,775,75,1,0,0,0,776,779,3,74,37,
0,777,779,3,370,185,0,778,776,1,0,0,0,778,777,1,0,0,0,779,780,1,0,0,0,780,
778,1,0,0,0,780,781,1,0,0,0,781,77,1,0,0,0,782,783,3,2,1,0,783,79,1,0,0,
0,784,787,3,82,41,0,785,787,3,186,93,0,786,784,1,0,0,0,786,785,1,0,0,0,787,
81,1,0,0,0,788,800,3,86,43,0,789,800,3,88,44,0,790,792,3,300,150,0,791,793,
5,317,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,800,1,0,0,0,794,800,3,214,
107,0,795,800,3,280,140,0,796,800,3,242,121,0,797,800,3,256,128,0,798,800,
3,270,135,0,799,788,1,0,0,0,799,789,1,0,0,0,799,790,1,0,0,0,799,794,1,0,
0,0,799,795,1,0,0,0,799,796,1,0,0,0,799,797,1,0,0,0,799,798,1,0,0,0,800,
83,1,0,0,0,801,804,5,243,0,0,802,805,3,172,86,0,803,805,3,72,36,0,804,802,
1,0,0,0,804,803,1,0,0,0,805,812,1,0,0,0,806,807,5,134,0,0,807,808,5,112,
0,0,808,813,5,180,0,0,809,810,5,134,0,0,810,811,5,161,0,0,811,813,5,180,
0,0,812,806,1,0,0,0,812,809,1,0,0,0,812,813,1,0,0,0,813,818,1,0,0,0,814,
815,5,306,0,0,815,819,5,298,0,0,816,817,5,237,0,0,817,819,3,172,86,0,818,
814,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,85,1,0,0,0,820,821,5,159,
0,0,821,822,3,172,86,0,822,823,5,319,0,0,823,828,3,148,74,0,824,825,5,316,
0,0,825,827,3,148,74,0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,
829,1,0,0,0,829,87,1,0,0,0,830,828,1,0,0,0,831,832,5,33,0,0,832,845,3,90,
45,0,833,842,5,325,0,0,834,839,3,92,46,0,835,836,5,316,0,0,836,838,3,92,
46,0,837,835,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,
843,1,0,0,0,841,839,1,0,0,0,842,834,1,0,0,0,842,843,1,0,0,0,843,844,1,0,
0,0,844,846,5,326,0,0,845,833,1,0,0,0,845,846,1,0,0,0,846,856,1,0,0,0,847,
848,5,237,0,0,848,853,3,172,86,0,849,850,5,316,0,0,850,852,3,172,86,0,851,
849,1,0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,857,1,0,
0,0,855,853,1,0,0,0,856,847,1,0,0,0,856,857,1,0,0,0,857,89,1,0,0,0,858,859,
3,164,82,0,859,91,1,0,0,0,860,863,5,314,0,0,861,863,3,148,74,0,862,860,1,
0,0,0,862,861,1,0,0,0,863,93,1,0,0,0,864,866,5,124,0,0,865,867,5,318,0,0,
866,865,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,869,3,78,39,0,869,870,
3,388,194,0,870,95,1,0,0,0,871,881,7,7,0,0,872,877,3,98,49,0,873,874,5,204,
0,0,874,876,3,98,49,0,875,873,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,
878,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,880,871,1,0,0,0,880,872,1,0,
0,0,881,97,1,0,0,0,882,887,3,100,50,0,883,884,5,8,0,0,884,886,3,100,50,0,
885,883,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,99,1,
0,0,0,889,887,1,0,0,0,890,954,1,0,0,0,891,893,3,108,54,0,892,894,5,191,0,
0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,896,5,160,0,0,896,
897,1,0,0,0,897,899,3,108,54,0,898,900,5,191,0,0,899,898,1,0,0,0,899,900,
1,0,0,0,900,901,1,0,0,0,901,902,5,160,0,0,902,905,3,108,54,0,903,904,5,342,
0,0,904,906,5,343,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,954,1,0,0,0,907,
909,3,108,54,0,908,910,5,191,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,
1,0,0,0,911,912,5,21,0,0,912,913,1,0,0,0,913,915,3,108,54,0,914,916,5,191,
0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,21,0,0,918,
919,3,108,54,0,919,920,5,8,0,0,920,921,3,108,54,0,921,954,1,0,0,0,922,923,
3,108,54,0,923,925,5,150,0,0,924,926,5,191,0,0,925,924,1,0,0,0,925,926,1,
0,0,0,926,927,1,0,0,0,927,928,5,195,0,0,928,929,1,0,0,0,929,930,3,108,54,
0,930,932,5,150,0,0,931,933,5,191,0,0,932,931,1,0,0,0,932,933,1,0,0,0,933,
934,1,0,0,0,934,935,5,195,0,0,935,954,1,0,0,0,936,937,3,102,51,0,937,938,
3,102,51,0,938,954,1,0,0,0,939,940,5,191,0,0,940,941,3,96,48,0,941,942,1,
0,0,0,942,943,5,191,0,0,943,944,3,96,48,0,944,954,1,0,0,0,945,946,5,325,
0,0,946,947,3,96,48,0,947,948,5,326,0,0,948,954,1,0,0,0,949,950,3,108,54,
0,950,951,3,140,70,0,951,952,3,108,54,0,952,954,1,0,0,0,953,890,1,0,0,0,
953,891,1,0,0,0,953,907,1,0,0,0,953,922,1,0,0,0,953,936,1,0,0,0,953,939,
1,0,0,0,953,945,1,0,0,0,953,949,1,0,0,0,954,101,1,0,0,0,955,956,3,108,54,
0,956,958,3,140,70,0,957,959,7,8,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,
960,1,0,0,0,960,961,3,106,53,0,961,962,1,0,0,0,962,963,3,108,54,0,963,965,
3,140,70,0,964,966,7,8,0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,
0,967,968,3,106,53,0,968,983,1,0,0,0,969,971,5,191,0,0,970,969,1,0,0,0,970,
971,1,0,0,0,971,972,1,0,0,0,972,973,5,96,0,0,973,974,3,106,53,0,974,976,
1,0,0,0,975,977,5,191,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,
0,978,979,5,96,0,0,979,980,3,106,53,0,980,983,1,0,0,0,981,983,3,106,53,0,
982,955,1,0,0,0,982,970,1,0,0,0,982,981,1,0,0,0,983,103,1,0,0,0,984,985,
3,108,54,0,985,986,3,108,54,0,986,989,1,0,0,0,987,989,3,106,53,0,988,984,
1,0,0,0,988,987,1,0,0,0,989,105,1,0,0,0,990,991,5,325,0,0,991,992,3,318,
159,0,992,993,5,326,0,0,993,107,1,0,0,0,994,999,3,112,56,0,995,996,7,9,0,
0,996,998,3,112,56,0,997,995,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,
1000,1,0,0,0,1000,109,1,0,0,0,1001,999,1,0,0,0,1002,1004,5,10,0,0,1003,1002,
1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1006,3,2,1,0,1006,111,1,
0,0,0,1007,1016,3,116,58,0,1008,1012,3,114,57,0,1009,1012,5,344,0,0,1010,
1012,5,315,0,0,1011,1008,1,0,0,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,
1013,1,0,0,0,1013,1015,3,116,58,0,1014,1011,1,0,0,0,1015,1018,1,0,0,0,1016,
1014,1,0,0,0,1016,1017,1,0,0,0,1017,113,1,0,0,0,1018,1016,1,0,0,0,1019,1020,
5,314,0,0,1020,115,1,0,0,0,1021,1026,3,118,59,0,1022,1023,5,331,0,0,1023,
1025,3,118,59,0,1024,1022,1,0,0,0,1025,1028,1,0,0,0,1026,1024,1,0,0,0,1026,
1027,1,0,0,0,1027,117,1,0,0,0,1028,1026,1,0,0,0,1029,1032,3,124,62,0,1030,
1031,5,286,0,0,1031,1033,3,46,23,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,
1034,1,0,0,0,1034,1037,3,124,62,0,1035,1036,5,286,0,0,1036,1038,3,46,23,
0,1037,1035,1,0,0,0,1037,1038,1,0,0,0,1038,1123,1,0,0,0,1039,1042,3,122,
61,0,1040,1041,5,286,0,0,1041,1043,3,46,23,0,1042,1040,1,0,0,0,1042,1043,
1,0,0,0,1043,1044,1,0,0,0,1044,1047,3,122,61,0,1045,1046,5,286,0,0,1046,
1048,3,46,23,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1123,1,0,0,0,1049,
1050,3,134,67,0,1050,1052,5,325,0,0,1051,1053,7,10,0,0,1052,1051,1,0,0,0,
1052,1053,1,0,0,0,1053,1062,1,0,0,0,1054,1059,3,108,54,0,1055,1056,5,316,
0,0,1056,1058,3,108,54,0,1057,1055,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,
0,0,0,1059,1060,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1062,1054,1,
0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,326,0,0,1065,1066,
1,0,0,0,1066,1067,3,134,67,0,1067,1069,5,325,0,0,1068,1070,7,10,0,0,1069,
1068,1,0,0,0,1069,1070,1,0,0,0,1070,1079,1,0,0,0,1071,1076,3,108,54,0,1072,
1073,5,316,0,0,1073,1075,3,108,54,0,1074,1072,1,0,0,0,1075,1078,1,0,0,0,
1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,
1079,1071,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1082,5,326,0,
0,1082,1123,1,0,0,0,1083,1084,3,126,63,0,1084,1085,5,325,0,0,1085,1090,3,
108,54,0,1086,1087,5,316,0,0,1087,1089,3,108,54,0,1088,1086,1,0,0,0,1089,
1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1093,1,0,0,0,1092,
1090,1,0,0,0,1093,1094,5,326,0,0,1094,1095,1,0,0,0,1095,1096,3,126,63,0,
1096,1097,5,325,0,0,1097,1102,3,108,54,0,1098,1099,5,316,0,0,1099,1101,3,
108,54,0,1100,1098,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,
1,0,0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,1105,1106,5,326,0,0,1106,1123,
1,0,0,0,1107,1108,7,9,0,0,1108,1109,3,108,54,0,1109,1110,1,0,0,0,1110,1111,
7,9,0,0,1111,1112,3,108,54,0,1112,1123,1,0,0,0,1113,1114,5,325,0,0,1114,
1115,3,108,54,0,1115,1116,5,326,0,0,1116,1117,1,0,0,0,1117,1118,5,325,0,
0,1118,1119,3,108,54,0,1119,1120,5,326,0,0,1120,1123,1,0,0,0,1121,1123,3,
120,60,0,1122,1029,1,0,0,0,1122,1039,1,0,0,0,1122,1049,1,0,0,0,1122,1083,
1,0,0,0,1122,1107,1,0,0,0,1122,1113,1,0,0,0,1122,1121,1,0,0,0,1123,119,1,
0,0,0,1124,1125,5,325,0,0,1125,1128,3,108,54,0,1126,1127,5,316,0,0,1127,
1129,3,108,54,0,1128,1126,1,0,0,0,1129,1130,1,0,0,0,1130,1128,1,0,0,0,1130,
1131,1,0,0,0,1131,1132,1,0,0,0,1132,1133,5,326,0,0,1133,121,1,0,0,0,1134,
1140,3,166,83,0,1135,1140,3,72,36,0,1136,1140,5,195,0,0,1137,1140,5,101,
0,0,1138,1140,5,280,0,0,1139,1134,1,0,0,0,1139,1135,1,0,0,0,1139,1136,1,
0,0,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,123,1,0,0,0,1141,1142,3,320,
160,0,1142,1143,3,320,160,0,1143,125,1,0,0,0,1144,1149,3,130,65,0,1145,1149,
3,132,66,0,1146,1149,3,128,64,0,1147,1149,3,136,68,0,1148,1144,1,0,0,0,1148,
1145,1,0,0,0,1148,1146,1,0,0,0,1148,1147,1,0,0,0,1149,127,1,0,0,0,1150,1151,
7,11,0,0,1151,129,1,0,0,0,1152,1153,5,179,0,0,1153,131,1,0,0,0,1154,1155,
5,158,0,0,1155,133,1,0,0,0,1156,1157,7,12,0,0,1157,135,1,0,0,0,1158,1161,
7,13,0,0,1159,1161,3,398,199,0,1160,1158,1,0,0,0,1160,1159,1,0,0,0,1161,
137,1,0,0,0,1162,1163,5,290,0,0,1163,139,1,0,0,0,1164,1176,5,319,0,0,1165,
1176,5,320,0,0,1166,1176,5,322,0,0,1167,1176,5,321,0,0,1168,1176,5,323,0,
0,1169,1176,5,324,0,0,1170,1176,5,160,0,0,1171,1173,5,191,0,0,1172,1171,
1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,0,0,1174,1176,5,170,0,0,1175,1164,
1,0,0,0,1175,1165,1,0,0,0,1175,1166,1,0,0,0,1175,1167,1,0,0,0,1175,1168,
1,0,0,0,1175,1169,1,0,0,0,1175,1170,1,0,0,0,1175,1172,1,0,0,0,1176,141,1,
0,0,0,1177,1189,5,280,0,0,1178,1189,5,101,0,0,1179,1185,3,144,72,0,1180,
1181,3,140,70,0,1181,1182,3,144,72,0,1182,1184,1,0,0,0,1183,1180,1,0,0,0,
1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1189,1,0,0,0,
1187,1185,1,0,0,0,1188,1177,1,0,0,0,1188,1178,1,0,0,0,1188,1179,1,0,0,0,
1189,143,1,0,0,0,1190,1195,3,146,73,0,1191,1192,5,204,0,0,1192,1194,3,146,
73,0,1193,1191,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,1,0,
0,0,1196,145,1,0,0,0,1197,1195,1,0,0,0,1198,1203,3,150,75,0,1199,1200,5,
8,0,0,1200,1202,3,150,75,0,1201,1199,1,0,0,0,1202,1205,1,0,0,0,1203,1201,
1,0,0,0,1203,1204,1,0,0,0,1204,147,1,0,0,0,1205,1203,1,0,0,0,1206,1212,3,
152,76,0,1207,1211,5,40,0,0,1208,1209,5,291,0,0,1209,1211,3,72,36,0,1210,
1207,1,0,0,0,1210,1208,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1212,
1213,1,0,0,0,1213,149,1,0,0,0,1214,1212,1,0,0,0,1215,1230,1,0,0,0,1216,1217,
5,191,0,0,1217,1218,3,142,71,0,1218,1219,1,0,0,0,1219,1220,5,191,0,0,1220,
1221,3,142,71,0,1221,1230,1,0,0,0,1222,1223,5,325,0,0,1223,1224,3,142,71,
0,1224,1225,5,326,0,0,1225,1230,1,0,0,0,1226,1227,3,152,76,0,1227,1228,3,
152,76,0,1228,1230,1,0,0,0,1229,1215,1,0,0,0,1229,1216,1,0,0,0,1229,1222,
1,0,0,0,1229,1226,1,0,0,0,1230,151,1,0,0,0,1231,1233,3,396,198,0,1232,1231,
1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1240,3,156,78,0,1235,1236,
3,154,77,0,1236,1237,3,156,78,0,1237,1239,1,0,0,0,1238,1235,1,0,0,0,1239,
1242,1,0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,153,1,0,0,0,1242,1240,
1,0,0,0,1243,1244,7,9,0,0,1244,155,1,0,0,0,1245,1251,3,160,80,0,1246,1247,
3,158,79,0,1247,1248,3,160,80,0,1248,1250,1,0,0,0,1249,1246,1,0,0,0,1250,
1253,1,0,0,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,157,1,0,0,0,1253,1251,
1,0,0,0,1254,1255,7,14,0,0,1255,159,1,0,0,0,1256,1258,5,126,0,0,1257,1256,
1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1269,3,162,81,0,1260,1269,
3,172,86,0,1261,1269,3,168,84,0,1262,1263,5,325,0,0,1263,1264,3,148,74,0,
1264,1265,5,326,0,0,1265,1269,1,0,0,0,1266,1267,5,191,0,0,1267,1269,3,160,
80,0,1268,1257,1,0,0,0,1268,1260,1,0,0,0,1268,1261,1,0,0,0,1268,1262,1,0,
0,0,1268,1266,1,0,0,0,1269,1272,1,0,0,0,1270,1271,5,286,0,0,1271,1273,3,
46,23,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,161,1,0,0,0,1274,1287,3,
164,82,0,1275,1284,5,325,0,0,1276,1281,3,92,46,0,1277,1278,5,316,0,0,1278,
1280,3,92,46,0,1279,1277,1,0,0,0,1280,1283,1,0,0,0,1281,1279,1,0,0,0,1281,
1282,1,0,0,0,1282,1285,1,0,0,0,1283,1281,1,0,0,0,1284,1276,1,0,0,0,1284,
1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,5,326,0,0,1287,1275,1,0,0,0,1287,
1288,1,0,0,0,1288,163,1,0,0,0,1289,1292,7,15,0,0,1290,1292,3,398,199,0,1291,
1289,1,0,0,0,1291,1290,1,0,0,0,1292,165,1,0,0,0,1293,1298,3,390,195,0,1294,
1298,3,72,36,0,1295,1298,3,398,199,0,1296,1298,5,195,0,0,1297,1293,1,0,0,
0,1297,1294,1,0,0,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,167,1,0,0,0,
1299,1306,3,170,85,0,1300,1306,3,398,199,0,1301,1302,3,396,198,0,1302,1303,
3,2,1,0,1303,1306,1,0,0,0,1304,1306,3,72,36,0,1305,1299,1,0,0,0,1305,1300,
1,0,0,0,1305,1301,1,0,0,0,1305,1304,1,0,0,0,1306,169,1,0,0,0,1307,1312,3,
390,195,0,1308,1309,3,396,198,0,1309,1310,3,390,195,0,1310,1312,1,0,0,0,
1311,1307,1,0,0,0,1311,1308,1,0,0,0,1312,171,1,0,0,0,1313,1316,3,174,87,
0,1314,1316,3,180,90,0,1315,1313,1,0,0,0,1315,1314,1,0,0,0,1316,173,1,0,
0,0,1317,1318,3,176,88,0,1318,175,1,0,0,0,1319,1320,3,398,199,0,1320,177,
1,0,0,0,1321,1322,5,327,0,0,1322,1327,3,148,74,0,1323,1324,5,316,0,0,1324,
1326,3,148,74,0,1325,1323,1,0,0,0,1326,1329,1,0,0,0,1327,1325,1,0,0,0,1327,
1328,1,0,0,0,1328,1330,1,0,0,0,1329,1327,1,0,0,0,1330,1331,5,328,0,0,1331,
179,1,0,0,0,1332,1334,3,182,91,0,1333,1335,3,178,89,0,1334,1333,1,0,0,0,
1334,1335,1,0,0,0,1335,1344,1,0,0,0,1336,1337,5,329,0,0,1337,1345,5,314,
0,0,1338,1339,5,329,0,0,1339,1342,3,180,90,0,1340,1341,7,16,0,0,1341,1343,
3,180,90,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1336,
1,0,0,0,1344,1338,1,0,0,0,1344,1345,1,0,0,0,1345,181,1,0,0,0,1346,1347,3,
398,199,0,1347,183,1,0,0,0,1348,1349,3,398,199,0,1349,185,1,0,0,0,1350,1353,
3,188,94,0,1351,1353,3,192,96,0,1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,
187,1,0,0,0,1354,1357,3,190,95,0,1355,1357,3,212,106,0,1356,1354,1,0,0,0,
1356,1355,1,0,0,0,1357,189,1,0,0,0,1358,1359,5,133,0,0,1359,1360,3,142,71,
0,1360,1362,5,272,0,0,1361,1363,3,76,38,0,1362,1361,1,0,0,0,1362,1363,1,
0,0,0,1363,1368,1,0,0,0,1364,1366,5,87,0,0,1365,1367,3,76,38,0,1366,1365,
1,0,0,0,1366,1367,1,0,0,0,1367,1369,1,0,0,0,1368,1364,1,0,0,0,1368,1369,
1,0,0,0,1369,1370,1,0,0,0,1370,1371,5,88,0,0,1371,1372,5,133,0,0,1372,191,
1,0,0,0,1373,1377,3,194,97,0,1374,1377,3,206,103,0,1375,1377,3,196,98,0,
1376,1373,1,0,0,0,1376,1374,1,0,0,0,1376,1375,1,0,0,0,1377,193,1,0,0,0,1378,
1379,5,303,0,0,1379,1381,3,142,71,0,1380,1382,3,76,38,0,1381,1380,1,0,0,
0,1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,1384,5,88,0,0,1384,1385,5,303,
0,0,1385,195,1,0,0,0,1386,1387,5,111,0,0,1387,1388,3,200,100,0,1388,1389,
5,319,0,0,1389,1392,3,198,99,0,1390,1391,5,345,0,0,1391,1393,3,170,85,0,
1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,1396,3,388,194,
0,1395,1397,3,76,38,0,1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,
0,0,1398,1399,5,88,0,0,1399,1400,5,111,0,0,1400,1401,3,388,194,0,1401,197,
1,0,0,0,1402,1403,3,202,101,0,1403,1404,5,276,0,0,1404,1405,3,204,102,0,
1405,199,1,0,0,0,1406,1407,3,2,1,0,1407,201,1,0,0,0,1408,1409,3,148,74,0,
1409,203,1,0,0,0,1410,1411,3,148,74,0,1411,205,1,0,0,0,1412,1413,5,115,0,
0,1413,1416,3,2,1,0,1414,1415,5,291,0,0,1415,1417,3,208,104,0,1416,1414,
1,0,0,0,1416,1417,1,0,0,0,1417,1420,1,0,0,0,1418,1419,5,143,0,0,1419,1421,
3,208,104,0,1420,1418,1,0,0,0,1420,1421,1,0,0,0,1421,1424,1,0,0,0,1422,1423,
5,305,0,0,1423,1425,5,231,0,0,1424,1422,1,0,0,0,1424,1425,1,0,0,0,1425,1426,
1,0,0,0,1426,1428,3,388,194,0,1427,1429,3,76,38,0,1428,1427,1,0,0,0,1428,
1429,1,0,0,0,1429,1430,1,0,0,0,1430,1431,5,88,0,0,1431,1432,5,115,0,0,1432,
1433,3,388,194,0,1433,207,1,0,0,0,1434,1439,3,172,86,0,1435,1436,5,316,0,
0,1436,1438,3,172,86,0,1437,1435,1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,
0,0,1439,1440,1,0,0,0,1440,209,1,0,0,0,1441,1439,1,0,0,0,1442,1447,3,148,
74,0,1443,1444,5,316,0,0,1444,1446,3,148,74,0,1445,1443,1,0,0,0,1446,1449,
1,0,0,0,1447,1445,1,0,0,0,1447,1448,1,0,0,0,1448,211,1,0,0,0,1449,1447,1,
0,0,0,1450,1451,5,34,0,0,1451,1459,3,148,74,0,1452,1453,5,300,0,0,1453,1455,
3,148,74,0,1454,1456,3,76,38,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,
1458,1,0,0,0,1457,1452,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,
1460,1,0,0,0,1460,1466,1,0,0,0,1461,1459,1,0,0,0,1462,1464,5,209,0,0,1463,
1465,3,76,38,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,
1462,1,0,0,0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1469,5,88,0,0,1469,
1470,5,34,0,0,1470,1488,1,0,0,0,1471,1478,5,34,0,0,1472,1473,5,300,0,0,1473,
1474,3,142,71,0,1474,1475,3,76,38,0,1475,1477,1,0,0,0,1476,1472,1,0,0,0,
1477,1480,1,0,0,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,1483,1,0,0,0,
1480,1478,1,0,0,0,1481,1482,5,209,0,0,1482,1484,3,76,38,0,1483,1481,1,0,
0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1486,5,88,0,0,1486,1488,5,34,
0,0,1487,1450,1,0,0,0,1487,1471,1,0,0,0,1488,213,1,0,0,0,1489,1494,3,216,
108,0,1490,1494,3,224,112,0,1491,1494,3,230,115,0,1492,1494,3,298,149,0,
1493,1489,1,0,0,0,1493,1490,1,0,0,0,1493,1491,1,0,0,0,1493,1492,1,0,0,0,
1494,215,1,0,0,0,1495,1503,3,84,42,0,1496,1503,3,94,47,0,1497,1498,5,253,
0,0,1498,1503,3,148,74,0,1499,1503,3,220,110,0,1500,1503,3,222,111,0,1501,
1503,3,12,6,0,1502,1495,1,0,0,0,1502,1496,1,0,0,0,1502,1497,1,0,0,0,1502,
1499,1,0,0,0,1502,1500,1,0,0,0,1502,1501,1,0,0,0,1503,217,1,0,0,0,1504,1505,
7,17,0,0,1505,219,1,0,0,0,1506,1507,5,95,0,0,1507,1518,3,218,109,0,1508,
1509,5,95,0,0,1509,1515,5,220,0,0,1510,1511,5,325,0,0,1511,1512,3,148,74,
0,1512,1513,5,326,0,0,1513,1516,1,0,0,0,1514,1516,3,148,74,0,1515,1510,1,
0,0,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1506,1,
0,0,0,1517,1508,1,0,0,0,1518,221,1,0,0,0,1519,1520,5,53,0,0,1520,1521,3,
218,109,0,1521,1522,3,388,194,0,1522,223,1,0,0,0,1523,1524,5,5,0,0,1524,
1525,5,18,0,0,1525,1526,3,2,1,0,1526,1527,3,66,33,0,1527,1597,1,0,0,0,1528,
1529,5,165,0,0,1529,1530,3,208,104,0,1530,1537,5,134,0,0,1531,1538,5,346,
0,0,1532,1535,5,105,0,0,1533,1536,3,172,86,0,1534,1536,3,72,36,0,1535,1533,
1,0,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1538,1,0,0,0,1537,1531,
1,0,0,0,1537,1532,1,0,0,0,1538,1597,1,0,0,0,1539,1540,5,65,0,0,1540,1541,
5,18,0,0,1541,1597,3,2,1,0,1542,1543,5,235,0,0,1543,1544,5,18,0,0,1544,1545,
3,2,1,0,1545,1546,3,66,33,0,1546,1597,1,0,0,0,1547,1548,5,118,0,0,1548,1553,
3,172,86,0,1549,1550,5,316,0,0,1550,1552,3,172,86,0,1551,1549,1,0,0,0,1552,
1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1597,1,0,0,0,1555,
1553,1,0,0,0,1556,1557,5,139,0,0,1557,1562,3,172,86,0,1558,1559,5,316,0,
0,1559,1561,3,172,86,0,1560,1558,1,0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,
0,0,1562,1563,1,0,0,0,1563,1576,1,0,0,0,1564,1562,1,0,0,0,1565,1566,5,276,
0,0,1566,1577,5,195,0,0,1567,1568,5,160,0,0,1568,1573,3,148,74,0,1569,1570,
5,316,0,0,1570,1572,3,148,74,0,1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,
1571,1,0,0,0,1573,1574,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1576,
1565,1,0,0,0,1576,1567,1,0,0,0,1577,1597,1,0,0,0,1578,1579,5,292,0,0,1579,
1584,3,172,86,0,1580,1581,5,316,0,0,1581,1583,3,172,86,0,1582,1580,1,0,0,
0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,
0,1586,1584,1,0,0,0,1587,1588,5,160,0,0,1588,1593,3,148,74,0,1589,1590,5,
316,0,0,1590,1592,3,148,74,0,1591,1589,1,0,0,0,1592,1595,1,0,0,0,1593,1591,
1,0,0,0,1593,1594,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,1596,1523,
1,0,0,0,1596,1528,1,0,0,0,1596,1539,1,0,0,0,1596,1542,1,0,0,0,1596,1547,
1,0,0,0,1596,1556,1,0,0,0,1596,1578,1,0,0,0,1597,225,1,0,0,0,1598,1599,5,
43,0,0,1599,1618,3,148,74,0,1600,1618,7,18,0,0,1601,1602,5,31,0,0,1602,1618,
3,172,86,0,1603,1604,5,271,0,0,1604,1618,3,172,86,0,1605,1607,3,148,74,0,
1606,1608,7,19,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1615,1,0,0,0,
1609,1613,5,308,0,0,1610,1611,5,239,0,0,1611,1612,5,174,0,0,1612,1614,3,
170,85,0,1613,1610,1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,1615,1609,
1,0,0,0,1615,1616,1,0,0,0,1616,1618,1,0,0,0,1617,1598,1,0,0,0,1617,1600,
1,0,0,0,1617,1601,1,0,0,0,1617,1603,1,0,0,0,1617,1605,1,0,0,0,1618,227,1,
0,0,0,1619,1624,3,226,113,0,1620,1621,5,316,0,0,1621,1623,3,226,113,0,1622,
1620,1,0,0,0,1623,1626,1,0,0,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,
229,1,0,0,0,1626,1624,1,0,0,0,1627,1628,5,261,0,0,1628,1629,5,234,0,0,1629,
1637,3,398,199,0,1630,1635,5,276,0,0,1631,1636,3,148,74,0,1632,1633,5,214,
0,0,1633,1636,3,148,74,0,1634,1636,5,219,0,0,1635,1631,1,0,0,0,1635,1632,
1,0,0,0,1635,1634,1,0,0,0,1636,1638,1,0,0,0,1637,1630,1,0,0,0,1637,1638,
1,0,0,0,1638,1664,1,0,0,0,1639,1661,5,305,0,0,1640,1641,5,157,0,0,1641,1642,
5,174,0,0,1642,1660,3,170,85,0,1643,1644,5,239,0,0,1644,1645,5,174,0,0,1645,
1660,3,170,85,0,1646,1647,5,278,0,0,1647,1648,5,174,0,0,1648,1660,3,170,
85,0,1649,1650,5,28,0,0,1650,1651,5,174,0,0,1651,1660,3,170,85,0,1652,1653,
5,210,0,0,1653,1654,5,158,0,0,1654,1660,3,170,85,0,1655,1656,5,278,0,0,1656,
1657,5,198,0,0,1657,1658,5,210,0,0,1658,1660,3,72,36,0,1659,1640,1,0,0,0,
1659,1643,1,0,0,0,1659,1646,1,0,0,0,1659,1649,1,0,0,0,1659,1652,1,0,0,0,
1659,1655,1,0,0,0,1660,1663,1,0,0,0,1661,1659,1,0,0,0,1661,1662,1,0,0,0,
1662,1665,1,0,0,0,1663,1661,1,0,0,0,1664,1639,1,0,0,0,1664,1665,1,0,0,0,
1665,1719,1,0,0,0,1666,1667,5,269,0,0,1667,1668,5,234,0,0,1668,1719,3,398,
199,0,1669,1670,5,106,0,0,1670,1671,5,234,0,0,1671,1719,3,398,199,0,1672,
1674,5,212,0,0,1673,1675,3,72,36,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,
1719,1,0,0,0,1676,1677,5,186,0,0,1677,1678,3,148,74,0,1678,1679,5,163,0,
0,1679,1719,1,0,0,0,1680,1689,5,218,0,0,1681,1683,3,228,114,0,1682,1681,
1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1686,5,317,0,0,1685,1684,
1,0,0,0,1685,1686,1,0,0,0,1686,1690,1,0,0,0,1687,1688,5,105,0,0,1688,1690,
3,72,36,0,1689,1682,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1719,
1,0,0,0,1691,1699,5,247,0,0,1692,1693,3,148,74,0,1693,1694,7,20,0,0,1694,
1700,1,0,0,0,1695,1696,5,276,0,0,1696,1697,5,278,0,0,1697,1698,5,198,0,0,
1698,1700,5,210,0,0,1699,1692,1,0,0,0,1699,1695,1,0,0,0,1700,1719,1,0,0,
0,1701,1702,5,207,0,0,1702,1703,5,276,0,0,1703,1704,5,234,0,0,1704,1705,
3,398,199,0,1705,1714,5,325,0,0,1706,1711,3,148,74,0,1707,1708,5,316,0,0,
1708,1710,3,148,74,0,1709,1707,1,0,0,0,1710,1713,1,0,0,0,1711,1709,1,0,0,
0,1711,1712,1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1714,1706,1,0,0,
0,1714,1715,1,0,0,0,1715,1716,1,0,0,0,1716,1717,5,326,0,0,1717,1719,1,0,
0,0,1718,1627,1,0,0,0,1718,1666,1,0,0,0,1718,1669,1,0,0,0,1718,1672,1,0,
0,0,1718,1676,1,0,0,0,1718,1680,1,0,0,0,1718,1691,1,0,0,0,1718,1701,1,0,
0,0,1719,231,1,0,0,0,1720,1725,3,2,1,0,1721,1722,5,327,0,0,1722,1723,3,170,
85,0,1723,1724,5,328,0,0,1724,1726,1,0,0,0,1725,1721,1,0,0,0,1725,1726,1,
0,0,0,1726,1727,1,0,0,0,1727,1728,5,329,0,0,1728,1730,1,0,0,0,1729,1720,
1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1748,3,2,1,0,1732,1737,
3,2,1,0,1733,1734,5,327,0,0,1734,1735,3,170,85,0,1735,1736,5,328,0,0,1736,
1738,1,0,0,0,1737,1733,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,
1745,5,329,0,0,1740,1746,5,314,0,0,1741,1743,3,2,1,0,1742,1744,3,234,117,
0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1746,1,0,0,0,1745,1740,1,0,0,
0,1745,1741,1,0,0,0,1746,1748,1,0,0,0,1747,1729,1,0,0,0,1747,1732,1,0,0,
0,1748,233,1,0,0,0,1749,1752,7,16,0,0,1750,1751,5,347,0,0,1751,1753,5,329,
0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,1754,1,0,0,0,1754,1755,3,2,
1,0,1755,235,1,0,0,0,1756,1761,3,148,74,0,1757,1758,5,316,0,0,1758,1760,
3,148,74,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,
1,0,0,0,1762,237,1,0,0,0,1763,1761,1,0,0,0,1764,1769,3,148,74,0,1765,1766,
5,316,0,0,1766,1768,3,148,74,0,1767,1765,1,0,0,0,1768,1771,1,0,0,0,1769,
1767,1,0,0,0,1769,1770,1,0,0,0,1770,239,1,0,0,0,1771,1769,1,0,0,0,1772,1773,
5,19,0,0,1773,1789,5,52,0,0,1774,1775,5,2,0,0,1775,1789,5,52,0,0,1776,1777,
5,19,0,0,1777,1778,5,103,0,0,1778,1789,3,236,118,0,1779,1780,5,2,0,0,1780,
1781,5,103,0,0,1781,1789,3,236,118,0,1782,1783,5,200,0,0,1783,1784,5,154,
0,0,1784,1785,5,325,0,0,1785,1786,3,238,119,0,1786,1787,5,326,0,0,1787,1789,
1,0,0,0,1788,1772,1,0,0,0,1788,1774,1,0,0,0,1788,1776,1,0,0,0,1788,1779,
1,0,0,0,1788,1782,1,0,0,0,1789,241,1,0,0,0,1790,1791,5,187,0,0,1791,1795,
5,103,0,0,1792,1796,3,232,116,0,1793,1796,5,187,0,0,1794,1796,5,217,0,0,
1795,1792,1,0,0,0,1795,1793,1,0,0,0,1795,1794,1,0,0,0,1796,1797,1,0,0,0,
1797,1805,3,388,194,0,1798,1799,5,53,0,0,1799,1800,5,52,0,0,1800,1805,3,
388,194,0,1801,1802,5,95,0,0,1802,1803,5,52,0,0,1803,1805,3,388,194,0,1804,
1790,1,0,0,0,1804,1798,1,0,0,0,1804,1801,1,0,0,0,1805,243,1,0,0,0,1806,1807,
7,21,0,0,1807,245,1,0,0,0,1808,1810,7,22,0,0,1809,1808,1,0,0,0,1809,1810,
1,0,0,0,1810,1811,1,0,0,0,1811,1816,3,244,122,0,1812,1813,5,316,0,0,1813,
1815,3,244,122,0,1814,1812,1,0,0,0,1815,1818,1,0,0,0,1816,1814,1,0,0,0,1816,
1817,1,0,0,0,1817,247,1,0,0,0,1818,1816,1,0,0,0,1819,1820,7,23,0,0,1820,
1821,5,325,0,0,1821,1822,3,246,123,0,1822,1823,5,326,0,0,1823,249,1,0,0,
0,1824,1826,3,240,120,0,1825,1827,3,76,38,0,1826,1825,1,0,0,0,1827,1828,
1,0,0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,251,1,0,0,0,1830,1843,5,
52,0,0,1831,1832,5,30,0,0,1832,1833,5,185,0,0,1833,1834,3,172,86,0,1834,
1835,5,200,0,0,1835,1836,3,304,152,0,1836,1844,1,0,0,0,1837,1838,3,172,86,
0,1838,1839,5,200,0,0,1839,1840,3,304,152,0,1840,1841,5,119,0,0,1841,1842,
3,236,118,0,1842,1844,1,0,0,0,1843,1831,1,0,0,0,1843,1837,1,0,0,0,1844,1846,
1,0,0,0,1845,1847,3,248,124,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1850,
1,0,0,0,1848,1849,5,129,0,0,1849,1851,3,170,85,0,1850,1848,1,0,0,0,1850,
1851,1,0,0,0,1851,1860,1,0,0,0,1852,1854,3,250,125,0,1853,1852,1,0,0,0,1854,
1855,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,
1858,5,88,0,0,1858,1859,5,52,0,0,1859,1861,1,0,0,0,1860,1853,1,0,0,0,1860,
1861,1,0,0,0,1861,253,1,0,0,0,1862,1863,5,80,0,0,1863,1864,5,18,0,0,1864,
1865,3,148,74,0,1865,1866,5,276,0,0,1866,1868,3,148,74,0,1867,1869,3,248,
124,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1873,1,0,0,0,1870,1872,3,
258,129,0,1871,1870,1,0,0,0,1872,1875,1,0,0,0,1873,1871,1,0,0,0,1873,1874,
1,0,0,0,1874,1878,1,0,0,0,1875,1873,1,0,0,0,1876,1877,5,88,0,0,1877,1879,
5,80,0,0,1878,1876,1,0,0,0,1878,1879,1,0,0,0,1879,255,1,0,0,0,1880,1881,
5,53,0,0,1881,1885,5,80,0,0,1882,1883,5,95,0,0,1883,1885,5,80,0,0,1884,1880,
1,0,0,0,1884,1882,1,0,0,0,1885,257,1,0,0,0,1886,1887,5,200,0,0,1887,1888,
5,154,0,0,1888,1889,5,325,0,0,1889,1890,3,238,119,0,1890,1892,5,326,0,0,
1891,1893,3,76,38,0,1892,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1892,1,0,0,
0,1894,1895,1,0,0,0,1895,259,1,0,0,0,1896,1924,5,80,0,0,1897,1898,5,30,0,
0,1898,1899,5,185,0,0,1899,1904,3,148,74,0,1900,1901,5,316,0,0,1901,1903,
3,148,74,0,1902,1900,1,0,0,0,1903,1906,1,0,0,0,1904,1902,1,0,0,0,1904,1905,
1,0,0,0,1905,1925,1,0,0,0,1906,1904,1,0,0,0,1907,1912,3,148,74,0,1908,1909,
5,316,0,0,1909,1911,3,148,74,0,1910,1908,1,0,0,0,1911,1914,1,0,0,0,1912,
1910,1,0,0,0,1912,1913,1,0,0,0,1913,1922,1,0,0,0,1914,1912,1,0,0,0,1915,
1916,5,276,0,0,1916,1923,3,236,118,0,1917,1918,5,13,0,0,1918,1919,3,148,
74,0,1919,1920,5,316,0,0,1920,1921,3,148,74,0,1921,1923,1,0,0,0,1922,1915,
1,0,0,0,1922,1917,1,0,0,0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1897,
1,0,0,0,1924,1907,1,0,0,0,1925,1927,1,0,0,0,1926,1928,3,248,124,0,1927,1926,
1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,3,388,194,0,1930,261,
1,0,0,0,1931,1932,5,89,0,0,1932,1937,3,148,74,0,1933,1934,5,316,0,0,1934,
1936,3,148,74,0,1935,1933,1,0,0,0,1936,1939,1,0,0,0,1937,1935,1,0,0,0,1937,
1938,1,0,0,0,1938,1941,1,0,0,0,1939,1937,1,0,0,0,1940,1942,3,248,124,0,1941,
1940,1,0,0,0,1941,1942,1,0,0,0,1942,263,1,0,0,0,1943,1944,5,172,0,0,1944,
1949,3,148,74,0,1945,1946,5,316,0,0,1946,1948,3,148,74,0,1947,1945,1,0,0,
0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,0,0,1950,1953,1,0,0,
0,1951,1949,1,0,0,0,1952,1954,3,248,124,0,1953,1952,1,0,0,0,1953,1954,1,
0,0,0,1954,265,1,0,0,0,1955,1956,5,221,0,0,1956,1961,3,148,74,0,1957,1958,
5,316,0,0,1958,1960,3,148,74,0,1959,1957,1,0,0,0,1960,1963,1,0,0,0,1961,
1959,1,0,0,0,1961,1962,1,0,0,0,1962,1965,1,0,0,0,1963,1961,1,0,0,0,1964,
1966,3,248,124,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,
1969,5,111,0,0,1968,1970,5,35,0,0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,
1971,1,0,0,0,1971,1974,3,172,86,0,1972,1973,5,129,0,0,1973,1975,3,170,85,
0,1974,1972,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,1978,3,248,
124,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1994,1,0,0,0,1979,1980,5,
200,0,0,1980,1981,5,154,0,0,1981,1982,5,325,0,0,1982,1983,3,238,119,0,1983,
1985,5,326,0,0,1984,1986,3,76,38,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,
1988,1,0,0,0,1987,1979,1,0,0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,0,1989,
1990,1,0,0,0,1990,1992,1,0,0,0,1991,1989,1,0,0,0,1992,1993,5,88,0,0,1993,
1995,5,221,0,0,1994,1989,1,0,0,0,1994,1995,1,0,0,0,1995,267,1,0,0,0,1996,
1997,7,24,0,0,1997,2011,7,25,0,0,1998,1999,5,19,0,0,1999,2000,5,103,0,0,
2000,2011,3,236,118,0,2001,2002,5,2,0,0,2002,2003,5,103,0,0,2003,2011,3,
236,118,0,2004,2005,5,200,0,0,2005,2006,5,154,0,0,2006,2007,5,325,0,0,2007,
2008,3,238,119,0,2008,2009,5,326,0,0,2009,2011,1,0,0,0,2010,1996,1,0,0,0,
2010,1998,1,0,0,0,2010,2001,1,0,0,0,2010,2004,1,0,0,0,2011,269,1,0,0,0,2012,
2013,5,187,0,0,2013,2016,5,103,0,0,2014,2017,3,232,116,0,2015,2017,7,26,
0,0,2016,2014,1,0,0,0,2016,2015,1,0,0,0,2017,2025,1,0,0,0,2018,2019,5,53,
0,0,2019,2023,5,140,0,0,2020,2021,5,95,0,0,2021,2023,5,140,0,0,2022,2018,
1,0,0,0,2022,2020,1,0,0,0,2023,2025,1,0,0,0,2024,2012,1,0,0,0,2024,2022,
1,0,0,0,2025,271,1,0,0,0,2026,2030,3,268,134,0,2027,2029,3,76,38,0,2028,
2027,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,2030,2031,1,0,0,0,2031,
273,1,0,0,0,2032,2030,1,0,0,0,2033,2063,5,140,0,0,2034,2035,5,30,0,0,2035,
2036,5,185,0,0,2036,2041,3,148,74,0,2037,2038,5,316,0,0,2038,2040,3,148,
74,0,2039,2037,1,0,0,0,2040,2043,1,0,0,0,2041,2039,1,0,0,0,2041,2042,1,0,
0,0,2042,2046,1,0,0,0,2043,2041,1,0,0,0,2044,2045,5,306,0,0,2045,2047,5,
71,0,0,2046,2044,1,0,0,0,2046,2047,1,0,0,0,2047,2064,1,0,0,0,2048,2053,3,
148,74,0,2049,2050,5,316,0,0,2050,2052,3,148,74,0,2051,2049,1,0,0,0,2052,
2055,1,0,0,0,2053,2051,1,0,0,0,2053,2054,1,0,0,0,2054,2058,1,0,0,0,2055,
2053,1,0,0,0,2056,2057,5,306,0,0,2057,2059,5,71,0,0,2058,2056,1,0,0,0,2058,
2059,1,0,0,0,2059,2060,1,0,0,0,2060,2061,5,119,0,0,2061,2062,3,236,118,0,
2062,2064,1,0,0,0,2063,2034,1,0,0,0,2063,2048,1,0,0,0,2064,2066,1,0,0,0,
2065,2067,3,248,124,0,2066,2065,1,0,0,0,2066,2067,1,0,0,0,2067,2070,1,0,
0,0,2068,2069,5,129,0,0,2069,2071,3,170,85,0,2070,2068,1,0,0,0,2070,2071,
1,0,0,0,2071,2080,1,0,0,0,2072,2074,3,272,136,0,2073,2072,1,0,0,0,2074,2075,
1,0,0,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
5,88,0,0,2078,2079,5,140,0,0,2079,2081,1,0,0,0,2080,2073,1,0,0,0,2080,2081,
1,0,0,0,2081,275,1,0,0,0,2082,2083,5,140,0,0,2083,2084,5,18,0,0,2084,2087,
3,148,74,0,2085,2086,5,306,0,0,2086,2088,5,71,0,0,2087,2085,1,0,0,0,2087,
2088,1,0,0,0,2088,2089,1,0,0,0,2089,2090,5,119,0,0,2090,2095,3,148,74,0,
2091,2092,5,316,0,0,2092,2094,3,148,74,0,2093,2091,1,0,0,0,2094,2097,1,0,
0,0,2095,2093,1,0,0,0,2095,2096,1,0,0,0,2096,2100,1,0,0,0,2097,2095,1,0,
0,0,2098,2099,5,129,0,0,2099,2101,3,170,85,0,2100,2098,1,0,0,0,2100,2101,
1,0,0,0,2101,2103,1,0,0,0,2102,2104,3,248,124,0,2103,2102,1,0,0,0,2103,2104,
1,0,0,0,2104,2113,1,0,0,0,2105,2107,3,272,136,0,2106,2105,1,0,0,0,2107,2108,
1,0,0,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2111,
5,88,0,0,2111,2112,5,140,0,0,2112,2114,1,0,0,0,2113,2106,1,0,0,0,2113,2114,
1,0,0,0,2114,277,1,0,0,0,2115,2116,5,19,0,0,2116,2134,5,171,0,0,2117,2123,
5,45,0,0,2118,2119,5,154,0,0,2119,2120,5,325,0,0,2120,2121,3,238,119,0,2121,
2122,5,326,0,0,2122,2124,1,0,0,0,2123,2118,1,0,0,0,2123,2124,1,0,0,0,2124,
2125,1,0,0,0,2125,2127,3,148,74,0,2126,2128,3,148,74,0,2127,2126,1,0,0,0,
2127,2128,1,0,0,0,2128,2131,1,0,0,0,2129,2130,5,129,0,0,2130,2132,3,170,
85,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2134,1,0,0,0,2133,2115,1,0,
0,0,2133,2117,1,0,0,0,2134,279,1,0,0,0,2135,2136,5,187,0,0,2136,2139,5,202,
0,0,2137,2140,3,148,74,0,2138,2140,5,6,0,0,2139,2137,1,0,0,0,2139,2138,1,
0,0,0,2140,2145,1,0,0,0,2141,2142,5,316,0,0,2142,2144,3,148,74,0,2143,2141,
1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,2179,
1,0,0,0,2147,2145,1,0,0,0,2148,2149,5,251,0,0,2149,2152,5,202,0,0,2150,2153,
3,148,74,0,2151,2153,5,6,0,0,2152,2150,1,0,0,0,2152,2151,1,0,0,0,2153,2158,
1,0,0,0,2154,2155,5,316,0,0,2155,2157,3,148,74,0,2156,2154,1,0,0,0,2157,
2160,1,0,0,0,2158,2156,1,0,0,0,2158,2159,1,0,0,0,2159,2179,1,0,0,0,2160,
2158,1,0,0,0,2161,2162,5,130,0,0,2162,2165,5,202,0,0,2163,2166,3,148,74,
0,2164,2166,5,6,0,0,2165,2163,1,0,0,0,2165,2164,1,0,0,0,2166,2171,1,0,0,
0,2167,2168,5,316,0,0,2168,2170,3,148,74,0,2169,2167,1,0,0,0,2170,2173,1,
0,0,0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2179,1,0,0,0,2173,2171,1,
0,0,0,2174,2175,5,53,0,0,2175,2179,5,171,0,0,2176,2177,5,95,0,0,2177,2179,
5,171,0,0,2178,2135,1,0,0,0,2178,2148,1,0,0,0,2178,2161,1,0,0,0,2178,2174,
1,0,0,0,2178,2176,1,0,0,0,2179,281,1,0,0,0,2180,2182,3,278,139,0,2181,2183,
3,76,38,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,283,1,0,0,0,2184,2185,
5,171,0,0,2185,2189,3,148,74,0,2186,2188,3,282,141,0,2187,2186,1,0,0,0,2188,
2191,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2192,1,0,0,0,2191,
2189,1,0,0,0,2192,2193,5,88,0,0,2193,2194,5,171,0,0,2194,285,1,0,0,0,2195,
2198,5,107,0,0,2196,2197,5,312,0,0,2197,2199,3,170,85,0,2198,2196,1,0,0,
0,2198,2199,1,0,0,0,2199,2207,1,0,0,0,2200,2207,3,170,85,0,2201,2204,5,156,
0,0,2202,2203,5,313,0,0,2203,2205,3,170,85,0,2204,2202,1,0,0,0,2204,2205,
1,0,0,0,2205,2207,1,0,0,0,2206,2195,1,0,0,0,2206,2200,1,0,0,0,2206,2201,
1,0,0,0,2207,287,1,0,0,0,2208,2221,7,22,0,0,2209,2221,5,238,0,0,2210,2221,
5,27,0,0,2211,2212,7,27,0,0,2212,2213,5,161,0,0,2213,2221,3,286,143,0,2214,
2215,5,46,0,0,2215,2218,5,161,0,0,2216,2219,3,286,143,0,2217,2219,5,199,
0,0,2218,2216,1,0,0,0,2218,2217,1,0,0,0,2219,2221,1,0,0,0,2220,2208,1,0,
0,0,2220,2209,1,0,0,0,2220,2210,1,0,0,0,2220,2211,1,0,0,0,2220,2214,1,0,
0,0,2221,289,1,0,0,0,2222,2227,3,288,144,0,2223,2224,5,316,0,0,2224,2226,
3,288,144,0,2225,2223,1,0,0,0,2226,2229,1,0,0,0,2227,2225,1,0,0,0,2227,2228,
1,0,0,0,2228,291,1,0,0,0,2229,2227,1,0,0,0,2230,2231,7,23,0,0,2231,2232,
5,325,0,0,2232,2233,3,290,145,0,2233,2234,5,326,0,0,2234,293,1,0,0,0,2235,
2236,5,172,0,0,2236,2237,5,161,0,0,2237,2291,3,148,74,0,2238,2239,5,221,
0,0,2239,2240,5,161,0,0,2240,2291,3,148,74,0,2241,2242,5,171,0,0,2242,2243,
5,161,0,0,2243,2291,3,148,74,0,2244,2245,5,46,0,0,2245,2246,5,161,0,0,2246,
2291,3,148,74,0,2247,2248,5,89,0,0,2248,2249,5,161,0,0,2249,2291,3,148,74,
0,2250,2251,5,112,0,0,2251,2252,5,161,0,0,2252,2291,3,148,74,0,2253,2257,
5,140,0,0,2254,2258,5,348,0,0,2255,2256,5,190,0,0,2256,2258,5,348,0,0,2257,
2254,1,0,0,0,2257,2255,1,0,0,0,2258,2291,1,0,0,0,2259,2260,5,141,0,0,2260,
2261,5,154,0,0,2261,2291,3,148,74,0,2262,2263,5,74,0,0,2263,2264,5,154,0,
0,2264,2291,3,148,74,0,2265,2266,5,187,0,0,2266,2267,5,154,0,0,2267,2291,
3,148,74,0,2268,2269,5,217,0,0,2269,2270,5,154,0,0,2270,2291,3,148,74,0,
2271,2272,5,3,0,0,2272,2273,5,154,0,0,2273,2291,3,148,74,0,2274,2275,5,129,
0,0,2275,2276,5,105,0,0,2276,2291,3,148,74,0,2277,2278,5,129,0,0,2278,2279,
5,154,0,0,2279,2291,3,148,74,0,2280,2281,5,140,0,0,2281,2291,3,248,124,0,
2282,2283,5,80,0,0,2283,2291,3,248,124,0,2284,2285,5,258,0,0,2285,2286,5,
147,0,0,2286,2291,7,28,0,0,2287,2288,5,103,0,0,2288,2289,5,206,0,0,2289,
2291,7,29,0,0,2290,2235,1,0,0,0,2290,2238,1,0,0,0,2290,2241,1,0,0,0,2290,
2244,1,0,0,0,2290,2247,1,0,0,0,2290,2250,1,0,0,0,2290,2253,1,0,0,0,2290,
2259,1,0,0,0,2290,2262,1,0,0,0,2290,2265,1,0,0,0,2290,2268,1,0,0,0,2290,
2271,1,0,0,0,2290,2274,1,0,0,0,2290,2277,1,0,0,0,2290,2280,1,0,0,0,2290,
2282,1,0,0,0,2290,2284,1,0,0,0,2290,2287,1,0,0,0,2291,295,1,0,0,0,2292,2293,
5,203,0,0,2293,2298,3,294,147,0,2294,2295,5,316,0,0,2295,2297,3,294,147,
0,2296,2294,1,0,0,0,2297,2300,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,
0,2299,297,1,0,0,0,2300,2298,1,0,0,0,2301,2310,5,39,0,0,2302,2311,5,112,
0,0,2303,2304,5,307,0,0,2304,2311,3,2,1,0,2305,2307,5,307,0,0,2306,2305,
1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2311,5,244,0,0,2309,2311,
3,236,118,0,2310,2302,1,0,0,0,2310,2303,1,0,0,0,2310,2306,1,0,0,0,2310,2309,
1,0,0,0,2311,2391,1,0,0,0,2312,2313,5,41,0,0,2313,2314,5,307,0,0,2314,2315,
3,2,1,0,2315,2316,3,388,194,0,2316,2391,1,0,0,0,2317,2318,5,41,0,0,2318,
2319,5,112,0,0,2319,2320,3,2,1,0,2320,2321,3,388,194,0,2321,2391,1,0,0,0,
2322,2391,3,252,126,0,2323,2324,5,58,0,0,2324,2325,5,307,0,0,2325,2328,5,
150,0,0,2326,2329,5,244,0,0,2327,2329,3,2,1,0,2328,2326,1,0,0,0,2328,2327,
1,0,0,0,2329,2330,1,0,0,0,2330,2391,3,388,194,0,2331,2391,3,260,130,0,2332,
2391,3,254,127,0,2333,2334,5,80,0,0,2334,2335,5,112,0,0,2335,2337,3,2,1,
0,2336,2338,3,248,124,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,2339,1,
0,0,0,2339,2340,3,388,194,0,2340,2391,1,0,0,0,2341,2391,3,262,131,0,2342,
2391,3,264,132,0,2343,2391,3,266,133,0,2344,2391,3,274,137,0,2345,2391,3,
276,138,0,2346,2391,3,284,142,0,2347,2348,5,201,0,0,2348,2349,5,112,0,0,
2349,2350,3,148,74,0,2350,2351,5,119,0,0,2351,2352,3,148,74,0,2352,2391,
1,0,0,0,2353,2354,5,201,0,0,2354,2355,5,307,0,0,2355,2356,3,148,74,0,2356,
2357,5,13,0,0,2357,2358,3,148,74,0,2358,2359,5,316,0,0,2359,2370,3,148,74,
0,2360,2361,5,305,0,0,2361,2362,5,112,0,0,2362,2371,3,148,74,0,2363,2364,
5,305,0,0,2364,2365,3,148,74,0,2365,2366,5,242,0,0,2366,2367,5,316,0,0,2367,
2368,3,148,74,0,2368,2369,5,44,0,0,2369,2371,1,0,0,0,2370,2360,1,0,0,0,2370,
2363,1,0,0,0,2371,2373,1,0,0,0,2372,2374,3,292,146,0,2373,2372,1,0,0,0,2373,
2374,1,0,0,0,2374,2391,1,0,0,0,2375,2391,3,296,148,0,2376,2377,5,245,0,0,
2377,2382,3,236,118,0,2378,2379,5,316,0,0,2379,2381,3,236,118,0,2380,2378,
1,0,0,0,2381,2384,1,0,0,0,2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,2385,
1,0,0,0,2384,2382,1,0,0,0,2385,2388,7,30,0,0,2386,2387,5,30,0,0,2387,2389,
3,170,85,0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2391,1,0,0,0,2390,2301,
1,0,0,0,2390,2312,1,0,0,0,2390,2317,1,0,0,0,2390,2322,1,0,0,0,2390,2323,
1,0,0,0,2390,2331,1,0,0,0,2390,2332,1,0,0,0,2390,2333,1,0,0,0,2390,2341,
1,0,0,0,2390,2342,1,0,0,0,2390,2343,1,0,0,0,2390,2344,1,0,0,0,2390,2345,
1,0,0,0,2390,2346,1,0,0,0,2390,2347,1,0,0,0,2390,2353,1,0,0,0,2390,2375,
1,0,0,0,2390,2376,1,0,0,0,2391,299,1,0,0,0,2392,2400,3,302,151,0,2393,2400,
3,314,157,0,2394,2400,3,316,158,0,2395,2400,3,366,183,0,2396,2400,3,368,
184,0,2397,2400,3,374,187,0,2398,2400,3,372,186,0,2399,2392,1,0,0,0,2399,
2393,1,0,0,0,2399,2394,1,0,0,0,2399,2395,1,0,0,0,2399,2396,1,0,0,0,2399,
2397,1,0,0,0,2399,2398,1,0,0,0,2400,301,1,0,0,0,2401,2402,5,41,0,0,2402,
2403,3,308,154,0,2403,2404,3,388,194,0,2404,2473,1,0,0,0,2405,2406,5,69,
0,0,2406,2437,3,308,154,0,2407,2410,5,59,0,0,2408,2409,5,305,0,0,2409,2411,
5,131,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,2412,2424,
5,111,0,0,2413,2420,3,318,159,0,2414,2415,5,111,0,0,2415,2418,5,289,0,0,
2416,2417,5,198,0,0,2417,2419,3,304,152,0,2418,2416,1,0,0,0,2418,2419,1,
0,0,0,2419,2421,1,0,0,0,2420,2414,1,0,0,0,2420,2421,1,0,0,0,2421,2425,1,
0,0,0,2422,2425,3,358,179,0,2423,2425,3,306,153,0,2424,2413,1,0,0,0,2424,
2422,1,0,0,0,2424,2423,1,0,0,0,2425,2438,1,0,0,0,2426,2427,5,245,0,0,2427,
2430,5,59,0,0,2428,2429,5,305,0,0,2429,2431,5,131,0,0,2430,2428,1,0,0,0,
2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2435,5,111,0,0,2433,2436,3,318,
159,0,2434,2436,3,306,153,0,2435,2433,1,0,0,0,2435,2434,1,0,0,0,2436,2438,
1,0,0,0,2437,2407,1,0,0,0,2437,2426,1,0,0,0,2438,2473,1,0,0,0,2439,2449,
5,102,0,0,2440,2450,5,187,0,0,2441,2450,7,31,0,0,2442,2450,5,107,0,0,2443,
2450,5,156,0,0,2444,2450,5,58,0,0,2445,2446,5,229,0,0,2446,2450,3,148,74,
0,2447,2448,5,1,0,0,2448,2450,3,148,74,0,2449,2440,1,0,0,0,2449,2441,1,0,
0,0,2449,2442,1,0,0,0,2449,2443,1,0,0,0,2449,2444,1,0,0,0,2449,2445,1,0,
0,0,2449,2447,1,0,0,0,2449,2450,1,0,0,0,2450,2451,1,0,0,0,2451,2454,3,308,
154,0,2452,2453,5,143,0,0,2453,2455,3,208,104,0,2454,2452,1,0,0,0,2454,2455,
1,0,0,0,2455,2473,1,0,0,0,2456,2457,5,110,0,0,2457,2458,3,308,154,0,2458,
2459,3,388,194,0,2459,2473,1,0,0,0,2460,2461,5,201,0,0,2461,2464,3,308,154,
0,2462,2463,5,291,0,0,2463,2465,3,208,104,0,2464,2462,1,0,0,0,2464,2465,
1,0,0,0,2465,2473,1,0,0,0,2466,2467,5,222,0,0,2467,2470,3,308,154,0,2468,
2469,5,119,0,0,2469,2471,3,210,105,0,2470,2468,1,0,0,0,2470,2471,1,0,0,0,
2471,2473,1,0,0,0,2472,2401,1,0,0,0,2472,2405,1,0,0,0,2472,2439,1,0,0,0,
2472,2456,1,0,0,0,2472,2460,1,0,0,0,2472,2466,1,0,0,0,2473,303,1,0,0,0,2474,
2479,3,320,160,0,2475,2476,5,316,0,0,2476,2478,3,320,160,0,2477,2475,1,0,
0,0,2478,2481,1,0,0,0,2479,2477,1,0,0,0,2479,2480,1,0,0,0,2480,305,1,0,0,
0,2481,2479,1,0,0,0,2482,2483,3,398,199,0,2483,307,1,0,0,0,2484,2485,3,2,
1,0,2485,309,1,0,0,0,2486,2487,3,28,14,0,2487,311,1,0,0,0,2488,2498,3,398,
199,0,2489,2499,3,310,155,0,2490,2496,7,1,0,0,2491,2494,5,134,0,0,2492,2495,
5,267,0,0,2493,2495,3,398,199,0,2494,2492,1,0,0,0,2494,2493,1,0,0,0,2495,
2497,1,0,0,0,2496,2491,1,0,0,0,2496,2497,1,0,0,0,2497,2499,1,0,0,0,2498,
2489,1,0,0,0,2498,2490,1,0,0,0,2499,2502,1,0,0,0,2500,2501,5,191,0,0,2501,
2503,5,195,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,2522,1,0,0,0,2504,
2505,5,285,0,0,2505,2514,5,325,0,0,2506,2511,3,398,199,0,2507,2508,5,316,
0,0,2508,2510,3,398,199,0,2509,2507,1,0,0,0,2510,2513,1,0,0,0,2511,2509,
1,0,0,0,2511,2512,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2514,2506,
1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2519,5,326,0,0,2517,2518,
5,51,0,0,2518,2520,3,398,199,0,2519,2517,1,0,0,0,2519,2520,1,0,0,0,2520,
2522,1,0,0,0,2521,2488,1,0,0,0,2521,2504,1,0,0,0,2522,313,1,0,0,0,2523,2524,
5,85,0,0,2524,2525,5,267,0,0,2525,2600,3,398,199,0,2526,2528,5,57,0,0,2527,
2529,5,270,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,0,0,2530,
2531,5,267,0,0,2531,2532,3,398,199,0,2532,2533,5,325,0,0,2533,2538,3,312,
156,0,2534,2535,5,316,0,0,2535,2537,3,312,156,0,2536,2534,1,0,0,0,2537,2540,
1,0,0,0,2538,2536,1,0,0,0,2538,2539,1,0,0,0,2539,2541,1,0,0,0,2540,2538,
1,0,0,0,2541,2545,5,326,0,0,2542,2543,5,305,0,0,2543,2544,5,190,0,0,2544,
2546,5,167,0,0,2545,2542,1,0,0,0,2545,2546,1,0,0,0,2546,2549,1,0,0,0,2547,
2548,5,134,0,0,2548,2550,3,398,199,0,2549,2547,1,0,0,0,2549,2550,1,0,0,0,
2550,2554,1,0,0,0,2551,2552,5,99,0,0,2552,2553,5,252,0,0,2553,2555,3,170,
85,0,2554,2551,1,0,0,0,2554,2555,1,0,0,0,2555,2559,1,0,0,0,2556,2557,5,187,
0,0,2557,2558,5,252,0,0,2558,2560,3,170,85,0,2559,2556,1,0,0,0,2559,2560,
1,0,0,0,2560,2566,1,0,0,0,2561,2562,5,166,0,0,2562,2563,5,180,0,0,2563,2564,
5,325,0,0,2564,2565,7,32,0,0,2565,2567,5,326,0,0,2566,2561,1,0,0,0,2566,
2567,1,0,0,0,2567,2600,1,0,0,0,2568,2570,5,57,0,0,2569,2571,5,285,0,0,2570,
2569,1,0,0,0,2570,2571,1,0,0,0,2571,2573,1,0,0,0,2572,2574,5,42,0,0,2573,
2572,1,0,0,0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,2576,5,136,0,0,2576,
2577,3,398,199,0,2577,2578,5,200,0,0,2578,2579,3,398,199,0,2579,2580,5,325,
0,0,2580,2582,3,398,199,0,2581,2583,7,33,0,0,2582,2581,1,0,0,0,2582,2583,
1,0,0,0,2583,2591,1,0,0,0,2584,2585,5,316,0,0,2585,2587,3,398,199,0,2586,
2588,7,33,0,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2590,1,0,0,0,2589,
2584,1,0,0,0,2590,2593,1,0,0,0,2591,2589,1,0,0,0,2591,2592,1,0,0,0,2592,
2594,1,0,0,0,2593,2591,1,0,0,0,2594,2595,5,326,0,0,2595,2600,1,0,0,0,2596,
2597,5,85,0,0,2597,2598,5,136,0,0,2598,2600,3,398,199,0,2599,2523,1,0,0,
0,2599,2526,1,0,0,0,2599,2568,1,0,0,0,2599,2596,1,0,0,0,2600,315,1,0,0,0,
2601,2608,3,358,179,0,2602,2608,3,362,181,0,2603,2608,3,318,159,0,2604,2608,
3,360,180,0,2605,2608,3,354,177,0,2606,2608,3,356,178,0,2607,2601,1,0,0,
0,2607,2602,1,0,0,0,2607,2603,1,0,0,0,2607,2604,1,0,0,0,2607,2605,1,0,0,
0,2607,2606,1,0,0,0,2608,317,1,0,0,0,2609,2610,3,338,169,0,2610,319,1,0,
0,0,2611,2623,5,314,0,0,2612,2614,3,328,164,0,2613,2615,3,178,89,0,2614,
2613,1,0,0,0,2614,2615,1,0,0,0,2615,2620,1,0,0,0,2616,2617,5,329,0,0,2617,
2621,5,314,0,0,2618,2619,5,329,0,0,2619,2621,3,320,160,0,2620,2616,1,0,0,
0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,2623,1,0,0,0,2622,2611,1,0,0,
0,2622,2612,1,0,0,0,2623,321,1,0,0,0,2624,2626,3,108,54,0,2625,2627,3,110,
55,0,2626,2625,1,0,0,0,2626,2627,1,0,0,0,2627,2635,1,0,0,0,2628,2629,5,316,
0,0,2629,2631,3,108,54,0,2630,2632,3,110,55,0,2631,2630,1,0,0,0,2631,2632,
1,0,0,0,2632,2634,1,0,0,0,2633,2628,1,0,0,0,2634,2637,1,0,0,0,2635,2633,
1,0,0,0,2635,2636,1,0,0,0,2636,323,1,0,0,0,2637,2635,1,0,0,0,2638,2641,5,
248,0,0,2639,2642,5,6,0,0,2640,2642,7,34,0,0,2641,2639,1,0,0,0,2641,2640,
1,0,0,0,2641,2642,1,0,0,0,2642,2643,1,0,0,0,2643,2644,3,322,161,0,2644,325,
1,0,0,0,2645,2646,3,398,199,0,2646,2647,5,318,0,0,2647,2655,1,0,0,0,2648,
2649,3,398,199,0,2649,2650,5,330,0,0,2650,2651,3,398,199,0,2651,2652,5,318,
0,0,2652,2655,1,0,0,0,2653,2655,3,72,36,0,2654,2645,1,0,0,0,2654,2648,1,
0,0,0,2654,2653,1,0,0,0,2655,327,1,0,0,0,2656,2658,3,326,163,0,2657,2656,
1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,0,0,0,2659,2660,3,398,199,0,2660,329,
1,0,0,0,2661,2663,5,208,0,0,2662,2661,1,0,0,0,2662,2663,1,0,0,0,2663,2664,
1,0,0,0,2664,2666,3,328,164,0,2665,2667,3,110,55,0,2666,2665,1,0,0,0,2666,
2667,1,0,0,0,2667,331,1,0,0,0,2668,2669,3,342,171,0,2669,333,1,0,0,0,2670,
2678,5,119,0,0,2671,2679,3,330,165,0,2672,2673,5,325,0,0,2673,2674,3,332,
166,0,2674,2676,5,326,0,0,2675,2677,3,110,55,0,2676,2675,1,0,0,0,2676,2677,
1,0,0,0,2677,2679,1,0,0,0,2678,2671,1,0,0,0,2678,2672,1,0,0,0,2679,2692,
1,0,0,0,2680,2688,5,316,0,0,2681,2689,3,330,165,0,2682,2683,5,325,0,0,2683,
2684,3,332,166,0,2684,2686,5,326,0,0,2685,2687,3,110,55,0,2686,2685,1,0,
0,0,2686,2687,1,0,0,0,2687,2689,1,0,0,0,2688,2681,1,0,0,0,2688,2682,1,0,
0,0,2689,2691,1,0,0,0,2690,2680,1,0,0,0,2691,2694,1,0,0,0,2692,2690,1,0,
0,0,2692,2693,1,0,0,0,2693,335,1,0,0,0,2694,2692,1,0,0,0,2695,2696,3,2,1,
0,2696,337,1,0,0,0,2697,2700,3,324,162,0,2698,2699,5,143,0,0,2699,2701,3,
208,104,0,2700,2698,1,0,0,0,2700,2701,1,0,0,0,2701,2702,1,0,0,0,2702,2704,
3,334,167,0,2703,2705,3,344,172,0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,
2707,1,0,0,0,2706,2708,3,346,173,0,2707,2706,1,0,0,0,2707,2708,1,0,0,0,2708,
2710,1,0,0,0,2709,2711,3,348,174,0,2710,2709,1,0,0,0,2710,2711,1,0,0,0,2711,
2713,1,0,0,0,2712,2714,3,340,170,0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,
2716,1,0,0,0,2715,2717,3,352,176,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,
2721,1,0,0,0,2718,2719,5,143,0,0,2719,2720,5,270,0,0,2720,2722,3,2,1,0,2721,
2718,1,0,0,0,2721,2722,1,0,0,0,2722,2726,1,0,0,0,2723,2724,5,305,0,0,2724,
2725,5,190,0,0,2725,2727,5,167,0,0,2726,2723,1,0,0,0,2726,2727,1,0,0,0,2727,
339,1,0,0,0,2728,2730,5,284,0,0,2729,2731,5,6,0,0,2730,2729,1,0,0,0,2730,
2731,1,0,0,0,2731,2732,1,0,0,0,2732,2733,3,342,171,0,2733,341,1,0,0,0,2734,
2735,3,324,162,0,2735,2737,3,334,167,0,2736,2738,3,344,172,0,2737,2736,1,
0,0,0,2737,2738,1,0,0,0,2738,2740,1,0,0,0,2739,2741,3,346,173,0,2740,2739,
1,0,0,0,2740,2741,1,0,0,0,2741,2743,1,0,0,0,2742,2744,3,348,174,0,2743,2742,
1,0,0,0,2743,2744,1,0,0,0,2744,2746,1,0,0,0,2745,2747,3,340,170,0,2746,2745,
1,0,0,0,2746,2747,1,0,0,0,2747,343,1,0,0,0,2748,2749,5,302,0,0,2749,2750,
3,96,48,0,2750,345,1,0,0,0,2751,2752,5,126,0,0,2752,2753,5,30,0,0,2753,2754,
3,210,105,0,2754,347,1,0,0,0,2755,2756,5,127,0,0,2756,2757,3,96,48,0,2757,
349,1,0,0,0,2758,2760,3,148,74,0,2759,2761,7,33,0,0,2760,2759,1,0,0,0,2760,
2761,1,0,0,0,2761,351,1,0,0,0,2762,2763,5,206,0,0,2763,2764,5,30,0,0,2764,
2769,3,350,175,0,2765,2766,5,316,0,0,2766,2768,3,350,175,0,2767,2765,1,0,
0,0,2768,2771,1,0,0,0,2769,2767,1,0,0,0,2769,2770,1,0,0,0,2770,353,1,0,0,
0,2771,2769,1,0,0,0,2772,2773,5,164,0,0,2773,2776,5,119,0,0,2774,2777,3,
172,86,0,2775,2777,3,72,36,0,2776,2774,1,0,0,0,2776,2775,1,0,0,0,2777,2783,
1,0,0,0,2778,2781,5,75,0,0,2779,2782,3,172,86,0,2780,2782,3,72,36,0,2781,
2779,1,0,0,0,2781,2780,1,0,0,0,2782,2784,1,0,0,0,2783,2778,1,0,0,0,2783,
2784,1,0,0,0,2784,2795,1,0,0,0,2785,2786,5,141,0,0,2786,2787,5,143,0,0,2787,
2792,3,328,164,0,2788,2789,5,325,0,0,2789,2790,3,304,152,0,2790,2791,5,326,
0,0,2791,2793,1,0,0,0,2792,2788,1,0,0,0,2792,2793,1,0,0,0,2793,2796,1,0,
0,0,2794,2796,3,358,179,0,2795,2785,1,0,0,0,2795,2794,1,0,0,0,2796,2797,
1,0,0,0,2797,2798,3,388,194,0,2798,355,1,0,0,0,2799,2800,5,287,0,0,2800,
2803,5,276,0,0,2801,2804,3,172,86,0,2802,2804,3,72,36,0,2803,2801,1,0,0,
0,2803,2802,1,0,0,0,2804,2810,1,0,0,0,2805,2808,5,75,0,0,2806,2809,3,172,
86,0,2807,2809,3,72,36,0,2808,2806,1,0,0,0,2808,2807,1,0,0,0,2809,2811,1,
0,0,0,2810,2805,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,0,2812,2813,3,
318,159,0,2813,2814,3,388,194,0,2814,357,1,0,0,0,2815,2816,5,141,0,0,2816,
2817,5,143,0,0,2817,2822,3,328,164,0,2818,2819,5,325,0,0,2819,2820,3,304,
152,0,2820,2821,5,326,0,0,2821,2823,1,0,0,0,2822,2818,1,0,0,0,2822,2823,
1,0,0,0,2823,2837,1,0,0,0,2824,2825,5,293,0,0,2825,2826,5,325,0,0,2826,2831,
3,148,74,0,2827,2828,5,316,0,0,2828,2830,3,148,74,0,2829,2827,1,0,0,0,2830,
2833,1,0,0,0,2831,2829,1,0,0,0,2831,2832,1,0,0,0,2832,2834,1,0,0,0,2833,
2831,1,0,0,0,2834,2835,5,326,0,0,2835,2838,1,0,0,0,2836,2838,3,342,171,0,
2837,2824,1,0,0,0,2837,2836,1,0,0,0,2838,359,1,0,0,0,2839,2840,5,289,0,0,
2840,2841,3,328,164,0,2841,2887,5,249,0,0,2842,2843,3,320,160,0,2843,2844,
5,319,0,0,2844,2852,3,148,74,0,2845,2846,5,316,0,0,2846,2847,3,320,160,0,
2847,2848,5,319,0,0,2848,2849,3,148,74,0,2849,2851,1,0,0,0,2850,2845,1,0,
0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,2888,1,0,
0,0,2854,2852,1,0,0,0,2855,2856,5,325,0,0,2856,2857,3,304,152,0,2857,2858,
5,326,0,0,2858,2866,1,0,0,0,2859,2860,3,336,168,0,2860,2861,5,329,0,0,2861,
2863,1,0,0,0,2862,2859,1,0,0,0,2862,2863,1,0,0,0,2863,2864,1,0,0,0,2864,
2866,5,314,0,0,2865,2855,1,0,0,0,2865,2862,1,0,0,0,2866,2867,1,0,0,0,2867,
2885,5,319,0,0,2868,2869,5,325,0,0,2869,2874,3,148,74,0,2870,2871,5,316,
0,0,2871,2873,3,148,74,0,2872,2870,1,0,0,0,2873,2876,1,0,0,0,2874,2872,1,
0,0,0,2874,2875,1,0,0,0,2875,2877,1,0,0,0,2876,2874,1,0,0,0,2877,2878,5,
326,0,0,2878,2886,1,0,0,0,2879,2880,3,336,168,0,2880,2881,5,329,0,0,2881,
2883,1,0,0,0,2882,2879,1,0,0,0,2882,2883,1,0,0,0,2883,2884,1,0,0,0,2884,
2886,5,314,0,0,2885,2868,1,0,0,0,2885,2882,1,0,0,0,2886,2888,1,0,0,0,2887,
2842,1,0,0,0,2887,2865,1,0,0,0,2888,2896,1,0,0,0,2889,2894,5,302,0,0,2890,
2895,3,96,48,0,2891,2892,5,58,0,0,2892,2893,5,198,0,0,2893,2895,3,308,154,
0,2894,2890,1,0,0,0,2894,2891,1,0,0,0,2895,2897,1,0,0,0,2896,2889,1,0,0,
0,2896,2897,1,0,0,0,2897,361,1,0,0,0,2898,2899,5,74,0,0,2899,2900,5,119,
0,0,2900,2908,3,328,164,0,2901,2906,5,302,0,0,2902,2907,3,96,48,0,2903,2904,
5,58,0,0,2904,2905,5,198,0,0,2905,2907,3,308,154,0,2906,2902,1,0,0,0,2906,
2903,1,0,0,0,2907,2909,1,0,0,0,2908,2901,1,0,0,0,2908,2909,1,0,0,0,2909,
2910,1,0,0,0,2910,2911,3,388,194,0,2911,363,1,0,0,0,2912,2917,3,92,46,0,
2913,2914,5,316,0,0,2914,2916,3,92,46,0,2915,2913,1,0,0,0,2916,2919,1,0,
0,0,2917,2915,1,0,0,0,2917,2918,1,0,0,0,2918,365,1,0,0,0,2919,2917,1,0,0,
0,2920,2921,5,216,0,0,2921,2922,3,308,154,0,2922,2923,5,119,0,0,2923,2924,
3,148,74,0,2924,2944,1,0,0,0,2925,2926,5,94,0,0,2926,2929,3,308,154,0,2927,
2928,5,291,0,0,2928,2930,3,208,104,0,2929,2927,1,0,0,0,2929,2930,1,0,0,0,
2930,2944,1,0,0,0,2931,2934,5,118,0,0,2932,2935,3,308,154,0,2933,2935,3,
306,153,0,2934,2932,1,0,0,0,2934,2933,1,0,0,0,2935,2944,1,0,0,0,2936,2937,
5,166,0,0,2937,2938,5,267,0,0,2938,2939,3,148,74,0,2939,2940,5,134,0,0,2940,
2941,7,35,0,0,2941,2942,5,180,0,0,2942,2944,1,0,0,0,2943,2920,1,0,0,0,2943,
2925,1,0,0,0,2943,2931,1,0,0,0,2943,2936,1,0,0,0,2944,367,1,0,0,0,2945,2946,
5,289,0,0,2946,2950,5,263,0,0,2947,2948,5,111,0,0,2948,2949,5,267,0,0,2949,
2951,3,328,164,0,2950,2947,1,0,0,0,2950,2951,1,0,0,0,2951,2982,1,0,0,0,2952,
2953,5,249,0,0,2953,2954,5,166,0,0,2954,2955,5,180,0,0,2955,2962,5,276,0,
0,2956,2958,5,297,0,0,2957,2959,5,350,0,0,2958,2957,1,0,0,0,2958,2959,1,
0,0,0,2959,2963,1,0,0,0,2960,2961,5,191,0,0,2961,2963,5,297,0,0,2962,2956,
1,0,0,0,2962,2960,1,0,0,0,2963,2982,1,0,0,0,2964,2965,5,249,0,0,2965,2966,
5,97,0,0,2966,2982,7,28,0,0,2967,2968,5,249,0,0,2968,2969,5,152,0,0,2969,
2974,5,276,0,0,2970,2971,5,59,0,0,2971,2975,5,262,0,0,2972,2973,7,36,0,0,
2973,2975,5,227,0,0,2974,2970,1,0,0,0,2974,2972,1,0,0,0,2975,2982,1,0,0,
0,2976,2978,5,249,0,0,2977,2979,5,29,0,0,2978,2977,1,0,0,0,2978,2979,1,0,
0,0,2979,2980,1,0,0,0,2980,2982,5,167,0,0,2981,2945,1,0,0,0,2981,2952,1,
0,0,0,2981,2964,1,0,0,0,2981,2967,1,0,0,0,2981,2976,1,0,0,0,2982,369,1,0,
0,0,2983,2984,5,61,0,0,2984,2987,3,398,199,0,2985,2986,5,330,0,0,2986,2988,
3,398,199,0,2987,2985,1,0,0,0,2987,2988,1,0,0,0,2988,2990,1,0,0,0,2989,2991,
5,92,0,0,2990,2989,1,0,0,0,2990,2991,1,0,0,0,2991,2993,1,0,0,0,2992,2994,
5,317,0,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,2994,371,1,0,0,0,2995,2996,
5,41,0,0,2996,2997,5,61,0,0,2997,373,1,0,0,0,2998,3006,3,376,188,0,2999,
3000,5,20,0,0,3000,3006,5,309,0,0,3001,3002,5,47,0,0,3002,3006,5,309,0,0,
3003,3004,5,240,0,0,3004,3006,5,309,0,0,3005,2998,1,0,0,0,3005,2999,1,0,
0,0,3005,3001,1,0,0,0,3005,3003,1,0,0,0,3006,375,1,0,0,0,3007,3008,5,301,
0,0,3008,3009,3,378,189,0,3009,3010,3,380,190,0,3010,3011,3,388,194,0,3011,
377,1,0,0,0,3012,3013,5,191,0,0,3013,3020,5,116,0,0,3014,3016,5,9,0,0,3015,
3014,1,0,0,0,3015,3016,1,0,0,0,3016,3017,1,0,0,0,3017,3020,7,37,0,0,3018,
3020,7,38,0,0,3019,3012,1,0,0,0,3019,3015,1,0,0,0,3019,3018,1,0,0,0,3020,
379,1,0,0,0,3021,3034,7,39,0,0,3022,3023,5,33,0,0,3023,3034,3,2,1,0,3024,
3025,5,123,0,0,3025,3028,5,276,0,0,3026,3028,5,124,0,0,3027,3024,1,0,0,0,
3027,3026,1,0,0,0,3028,3030,1,0,0,0,3029,3031,5,318,0,0,3030,3029,1,0,0,
0,3030,3031,1,0,0,0,3031,3032,1,0,0,0,3032,3034,3,2,1,0,3033,3021,1,0,0,
0,3033,3022,1,0,0,0,3033,3027,1,0,0,0,3034,381,1,0,0,0,3035,3036,5,234,0,
0,3036,3038,3,2,1,0,3037,3039,3,16,8,0,3038,3037,1,0,0,0,3038,3039,1,0,0,
0,3039,3041,1,0,0,0,3040,3042,3,22,11,0,3041,3040,1,0,0,0,3041,3042,1,0,
0,0,3042,3044,1,0,0,0,3043,3045,3,384,192,0,3044,3043,1,0,0,0,3044,3045,
1,0,0,0,3045,3052,1,0,0,0,3046,3048,5,206,0,0,3047,3049,5,100,0,0,3048,3047,
1,0,0,0,3048,3049,1,0,0,0,3049,3050,1,0,0,0,3050,3051,5,30,0,0,3051,3053,
3,208,104,0,3052,3046,1,0,0,0,3052,3053,1,0,0,0,3053,3055,1,0,0,0,3054,3056,
3,386,193,0,3055,3054,1,0,0,0,3055,3056,1,0,0,0,3056,3057,1,0,0,0,3057,3058,
5,88,0,0,3058,3059,5,234,0,0,3059,383,1,0,0,0,3060,3069,5,207,0,0,3061,3062,
5,234,0,0,3062,3067,5,276,0,0,3063,3068,3,72,36,0,3064,3065,5,214,0,0,3065,
3068,3,72,36,0,3066,3068,5,219,0,0,3067,3063,1,0,0,0,3067,3064,1,0,0,0,3067,
3066,1,0,0,0,3068,3070,1,0,0,0,3069,3061,1,0,0,0,3069,3070,1,0,0,0,3070,
3092,1,0,0,0,3071,3072,5,157,0,0,3072,3073,5,174,0,0,3073,3091,3,170,85,
0,3074,3075,5,239,0,0,3075,3076,5,174,0,0,3076,3091,3,170,85,0,3077,3078,
5,278,0,0,3078,3079,5,174,0,0,3079,3091,3,170,85,0,3080,3081,5,28,0,0,3081,
3082,5,174,0,0,3082,3091,3,170,85,0,3083,3084,5,210,0,0,3084,3085,5,158,
0,0,3085,3091,3,170,85,0,3086,3087,5,278,0,0,3087,3088,5,198,0,0,3088,3089,
5,210,0,0,3089,3091,3,72,36,0,3090,3071,1,0,0,0,3090,3074,1,0,0,0,3090,3077,
1,0,0,0,3090,3080,1,0,0,0,3090,3083,1,0,0,0,3090,3086,1,0,0,0,3091,3094,
1,0,0,0,3092,3090,1,0,0,0,3092,3093,1,0,0,0,3093,385,1,0,0,0,3094,3092,1,
0,0,0,3095,3123,5,113,0,0,3096,3097,5,91,0,0,3097,3124,5,241,0,0,3098,3100,
5,107,0,0,3099,3098,1,0,0,0,3099,3100,1,0,0,0,3100,3101,1,0,0,0,3101,3102,
5,210,0,0,3102,3117,5,128,0,0,3103,3104,5,210,0,0,3104,3117,5,279,0,0,3105,
3110,5,200,0,0,3106,3107,5,91,0,0,3107,3111,5,241,0,0,3108,3109,5,156,0,
0,3109,3111,5,241,0,0,3110,3106,1,0,0,0,3110,3108,1,0,0,0,3111,3117,1,0,
0,0,3112,3113,7,24,0,0,3113,3114,5,126,0,0,3114,3115,5,198,0,0,3115,3117,
3,172,86,0,3116,3099,1,0,0,0,3116,3103,1,0,0,0,3116,3105,1,0,0,0,3116,3112,
1,0,0,0,3117,3118,1,0,0,0,3118,3120,3,76,38,0,3119,3116,1,0,0,0,3120,3121,
1,0,0,0,3121,3119,1,0,0,0,3121,3122,1,0,0,0,3122,3124,1,0,0,0,3123,3096,
1,0,0,0,3123,3119,1,0,0,0,3124,387,1,0,0,0,3125,3126,5,339,0,0,3126,389,
1,0,0,0,3127,3130,3,392,196,0,3128,3130,3,394,197,0,3129,3127,1,0,0,0,3129,
3128,1,0,0,0,3130,391,1,0,0,0,3131,3132,5,334,0,0,3132,393,1,0,0,0,3133,
3134,5,335,0,0,3134,395,1,0,0,0,3135,3136,7,9,0,0,3136,397,1,0,0,0,3137,
3140,7,40,0,0,3138,3140,3,2,1,0,3139,3137,1,0,0,0,3139,3138,1,0,0,0,3140,
399,1,0,0,0,407,401,404,407,411,418,423,426,435,437,445,447,451,456,461,
471,481,491,498,506,514,527,530,536,546,556,560,567,569,576,585,587,594,
617,624,633,642,651,660,669,676,682,686,690,694,698,702,709,714,723,734,
745,755,765,772,778,780,786,792,799,804,812,818,828,839,842,845,853,856,
862,866,877,880,887,893,899,905,909,915,925,932,953,958,965,970,976,982,
988,999,1003,1011,1016,1026,1032,1037,1042,1047,1052,1059,1062,1069,1076,
1079,1090,1102,1122,1130,1139,1148,1160,1172,1175,1185,1188,1195,1203,1210,
1212,1229,1232,1240,1251,1257,1268,1272,1281,1284,1287,1291,1297,1305,1311,
1315,1327,1334,1342,1344,1352,1356,1362,1366,1368,1376,1381,1392,1396,1416,
1420,1424,1428,1439,1447,1455,1459,1464,1466,1478,1483,1487,1493,1502,1515,
1517,1535,1537,1553,1562,1573,1576,1584,1593,1596,1607,1613,1615,1617,1624,
1635,1637,1659,1661,1664,1674,1682,1685,1689,1699,1711,1714,1718,1725,1729,
1737,1743,1745,1747,1752,1761,1769,1788,1795,1804,1809,1816,1828,1843,1846,
1850,1855,1860,1868,1873,1878,1884,1894,1904,1912,1922,1924,1927,1937,1941,
1949,1953,1961,1965,1969,1974,1977,1985,1989,1994,2010,2016,2022,2024,2030,
2041,2046,2053,2058,2063,2066,2070,2075,2080,2087,2095,2100,2103,2108,2113,
2123,2127,2131,2133,2139,2145,2152,2158,2165,2171,2178,2182,2189,2198,2204,
2206,2218,2220,2227,2257,2290,2298,2306,2310,2328,2337,2370,2373,2382,2388,
2390,2399,2410,2418,2420,2424,2430,2435,2437,2449,2454,2464,2470,2472,2479,
2494,2496,2498,2502,2511,2514,2519,2521,2528,2538,2545,2549,2554,2559,2566,
2570,2573,2582,2587,2591,2599,2607,2614,2620,2622,2626,2631,2635,2641,2654,
2657,2662,2666,2676,2678,2686,2688,2692,2700,2704,2707,2710,2713,2716,2721,
2726,2730,2737,2740,2743,2746,2760,2769,2776,2781,2783,2792,2795,2803,2808,
2810,2822,2831,2837,2852,2862,2865,2874,2882,2885,2887,2894,2896,2906,2908,
2917,2929,2934,2943,2950,2958,2962,2974,2978,2981,2987,2990,2993,3005,3015,
3019,3027,3030,3033,3038,3041,3044,3048,3052,3055,3067,3069,3090,3092,3099,
3110,3116,3121,3123,3129,3139];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class informixParser extends antlr4.Parser {

    static grammarFileName = "informix.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'+'", "'-'", "'*'", "'/'", "','", "';'", "':'", 
                            "'='", null, "'<'", "'<='", "'>='", "'>'", "'('", 
                            "')'", "'['", "']'", "'.'", "'@'", "'||'" ];
    static symbolicNames = [ null, "ABSOLUTE", "AFTER", "ACCEPT", "AGGREGATE", 
                             "ALLOCATE", "ALL", "ALL_ROWS", "AND", "ANY", 
                             "AS", "ASC", "ASCII", "AT", "ATTRIBUTE", "ATTRIBUTES", 
                             "AVERAGE", "AVG", "ARRAY", "BEFORE", "BEGIN", 
                             "BETWEEN", "BIGINT", "BLACK", "BLINK", "BLUE", 
                             "BOLD", "BORDER", "BOTTOM", "BUFFERED", "BY", 
                             "BYTE", "CACHE", "CALL", "CASE", "CHAR", "CHARARACTER", 
                             "CHAR_LENGTH", "CHECK", "CLEAR", "CLIPPED", 
                             "CLOSE", "CLUSTER", "COLUMN", "COLUMNS", "COMMAND", 
                             "COMMENT", "COMMIT", "COMMITTED", "CONSTANT", 
                             "CONSTRAINED", "CONSTRAINT", "CONSTRUCT", "CONTINUE", 
                             "COUNT", "COPY", "CRCOLS", "CREATE", "CURRENT", 
                             "CURSOR", "CYAN", "DATABASE", "DATE", "DATETIME", 
                             "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECODE", 
                             "DECLARE", "DEFAULT", "DEFAULTS", "DEFER", 
                             "DEFINE", "DELETE", "DELIMITER", "DESC", "DIM", 
                             "DIMENSIONS", "DIRTY", "DISPLAY", "DISTINCT", 
                             "DO", "DOUBLE", "DOWN", "DROP", "DYNAMIC", 
                             "ELSE", "END", "ERROR", "ESCAPE", "EVERY", 
                             "EXCLUSIVE", "EXEC", "EXECUTE", "EXIT", "EXISTS", 
                             "EXPLAIN", "EXTEND", "EXTENT", "EXTERNAL", 
                             "FALSE", "FETCH", "FIELD", "FIELD_TOUCHED", 
                             "FILE", "FINISH", "FIRST", "FIRST_ROWS", "FLOAT", 
                             "FLUSH", "FOR", "FORM", "FORMAT", "FORMONLY", 
                             "FOREACH", "FOUND", "FRACTION", "FREE", "FROM", 
                             "FUNCTION", "GET_FLDBUF", "GLOBALS", "GO", 
                             "GOTO", "GREEN", "GROUP", "HAVING", "HEADER", 
                             "HELP", "HIDE", "HOLD", "HOUR", "IF", "IN", 
                             "INNER", "INDEX", "INDICATOR", "INFIELD", "INITIALIZE", 
                             "INPUT", "INSERT", "INSTRUCTIONS", "INTO", 
                             "INT", "INT_FLAG", "INTEGER", "INTERRUPT", 
                             "INTERVAL", "INVISIBLE", "IS", "ISNULL", "ISOLATION", 
                             "JOIN", "KEY", "LABEL", "LAST", "LEFT", "LENGTH", 
                             "LET", "LIKE", "LINE", "LINENO", "LINES", "LOAD", 
                             "LOCATE", "LOCK", "LOG", "LONG", "MAGENTA", 
                             "MATCHES", "MENU", "MESSAGE", "MAIN", "MARGIN", 
                             "MAX", "MDY", "MIN", "MINUTE", "MOD", "MODE", 
                             "MODULE", "MONTH", "MONEY", "NCHAR", "NAME", 
                             "NEED", "NEXT", "NEW", "NORMAL", "NO", "NOT", 
                             "NOTFOUND", "NOW", "NUMERIC", "NULL_", "NVARCHAR", 
                             "NVL", "OF", "OFF", "ON", "OPEN", "OPTION", 
                             "OPTIONS", "OR", "ORD", "ORDER", "OUTPUT", 
                             "OUTER", "OTHERWISE", "PAGE", "PAGENO", "PAUSE", 
                             "PERCENT", "PIPE", "PRECISION", "PREPARE", 
                             "PREVIOUS", "PRINT", "PRINTER", "PROGRAM", 
                             "PROMPT", "PUT", "QUIT", "QUIT_FLAG", "RECORD", 
                             "REAL", "READ", "RED", "RELATIVE", "REMOVE", 
                             "REOPTIMIZATION", "REPEATABLE", "REPEAT", "REPORT", 
                             "RESIZE", "RETURN", "RETURNING", "REVERSE", 
                             "RIGHT", "ROLLBACK", "ROW", "ROWS", "RUN", 
                             "SCREEN", "SCROLL", "SECOND", "SKIP2", "SELECT", 
                             "SET", "SHARE", "SHOW", "SIZE", "SLEEP", "SMALLFLOAT", 
                             "SMALLINT", "SPACE", "SPACES", "SQL", "SQLERROR", 
                             "SQLWARNING", "START", "STABILITY", "STATISTICS", 
                             "STATUS", "STOP", "SUM", "TABLE", "TABLES", 
                             "TERMINATE", "TEMP", "TEXT", "THEN", "THROUGH", 
                             "THRU", "TIME", "TO", "TODAY", "TOP", "TRAILER", 
                             "TRUE", "TYPE", "UNCONSTRAINED", "UNDERLINE", 
                             "UNION", "UNIQUE", "UNITS", "UNLOAD", "UP", 
                             "UPDATE", "USER", "USING", "VALIDATE", "VALUES", 
                             "VARCHAR", "WEEKDAY", "VIEW", "WAIT", "WAITING", 
                             "WARNING", "WHEN", "WHENEVER", "WHERE", "WHILE", 
                             "WHITE", "WITH", "WITHOUT", "WINDOW", "WORDWRAP", 
                             "WORK", "YEAR", "YELLOW", "PLUS", "MINUS", 
                             "STAR", "SLASH", "COMMA", "SEMI", "COLON", 
                             "EQUAL", "NOT_EQUAL", "LT", "LE", "GE", "GT", 
                             "LPAREN", "RPAREN", "LBRACK", "RBRACK", "DOT", 
                             "ATSYMBOL", "DOUBLEVERTBAR", "IDENT", "STRING_LITERAL", 
                             "NUM_INT", "NUM_REAL", "HEX_DIGIT", "SL_COMMENT", 
                             "SL_COMMENT_2", "EOL", "WS", "CHARACTER", "ESC", 
                             "QUOTED_STRING", "DIV", "STEP", "MEMORY", "SAME", 
                             "WRAP", "PRIOR", "SECONDS" ];
    static ruleNames = [ "compilation_unit", "identifier", "mainBlock", 
                         "mainStatements", "deferStatement", "functionOrReportDefinitions", 
                         "returnStatement", "functionDefinition", "parameterList", 
                         "parameterGroup", "globalDeclaration", "typeDeclarations", 
                         "typeDeclaration", "variableDeclaration", "type_", 
                         "indirectType", "typeIdentifier", "largeType", 
                         "numberType", "charType", "timeType", "datetimeQualifier", 
                         "intervalQualifier", "unitType", "yearQualifier", 
                         "monthQualifier", "dayQualifier", "hourQualifier", 
                         "minuteQualifier", "secondQualifier", "fractionQualifier", 
                         "structuredType", "recordType", "arrayIndexer", 
                         "arrayType", "dynArrayType", "string", "statement", 
                         "codeBlock", "label", "unlabelledStatement", "simpleStatement", 
                         "runStatement", "assignmentStatement", "procedureStatement", 
                         "procedureIdentifier", "actualParameter", "gotoStatement", 
                         "condition", "logicalTerm", "logicalFactor", "quantifiedFactor", 
                         "expressionSet", "subquery", "sqlExpression", "sqlAlias", 
                         "sqlTerm", "sqlMultiply", "sqlFactor", "sqlFactor2", 
                         "sqlExpressionList", "sqlLiteral", "sqlVariable", 
                         "sqlFunction", "dateFunction", "numberFunction", 
                         "charFunction", "groupFunction", "otherFunction", 
                         "sqlPseudoColumn", "relationalOperator", "ifCondition", 
                         "ifCondition2", "ifLogicalTerm", "expression", 
                         "ifLogicalFactor", "simpleExpression", "addingOperator", 
                         "term", "multiplyingOperator", "factor", "functionDesignator", 
                         "functionIdentifier", "unsignedConstant", "constant", 
                         "numericConstant", "variable", "entireVariable", 
                         "variableIdentifier", "indexingVariable", "componentVariable", 
                         "recordVariable", "fieldIdentifier", "structuredStatement", 
                         "conditionalStatement", "ifStatement", "repetetiveStatement", 
                         "whileStatement", "forStatement", "forList", "controlVariable", 
                         "initialValue", "finalValue", "forEachStatement", 
                         "variableList", "variableOrConstantList", "caseStatement", 
                         "otherFGLStatement", "otherProgramFlowStatement", 
                         "exitTypes", "exitStatements", "continueStatements", 
                         "otherStorageStatement", "printExpressionItem", 
                         "printExpressionList", "reportStatement", "fieldName", 
                         "thruNotation", "fieldList", "keyList", "constructEvents", 
                         "constructInsideStatement", "specialAttribute", 
                         "attribute", "attributeList", "constructGroupStatement", 
                         "constructStatement", "displayArrayStatement", 
                         "displayInsideStatement", "displayEvents", "displayStatement", 
                         "errorStatement", "messageStatement", "promptStatement", 
                         "inputEvents", "inputInsideStatement", "inputGroupStatement", 
                         "inputStatement", "inputArrayStatement", "menuEvents", 
                         "menuInsideStatement", "menuGroupStatement", "menuStatement", 
                         "reservedLinePosition", "specialWindowAttribute", 
                         "windowAttribute", "windowAttributeList", "optionStatement", 
                         "optionsStatement", "screenStatement", "sqlStatements", 
                         "cursorManipulationStatement", "columnsList", "statementId", 
                         "cursorName", "dataType", "columnItem", "dataDefinitionStatement", 
                         "dataManipulationStatement", "sqlSelectStatement", 
                         "columnsTableId", "selectList", "headSelectStatement", 
                         "tableQualifier", "tableIdentifier", "fromTable", 
                         "tableExpression", "fromSelectStatement", "aliasName", 
                         "mainSelectStatement", "unionSelectStatement", 
                         "simpleSelectStatement", "whereStatement", "groupByStatement", 
                         "havingStatement", "orderbyColumn", "orderbyStatement", 
                         "sqlLoadStatement", "sqlUnLoadStatement", "sqlInsertStatement", 
                         "sqlUpdateStatement", "sqlDeleteStatement", "actualParameterList", 
                         "dynamicManagementStatement", "queryOptimizationStatement", 
                         "databaseDeclaration", "clientServerStatement", 
                         "dataIntegrityStatement", "wheneverStatement", 
                         "wheneverType", "wheneverFlow", "reportDefinition", 
                         "outputReport", "formatReport", "eol", "unsignedNumber", 
                         "unsignedInteger", "unsignedReal", "sign", "constantIdentifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = informixParser.ruleNames;
        this.literalNames = informixParser.literalNames;
        this.symbolicNames = informixParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	compilation_unit() {
	    let localctx = new Compilation_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, informixParser.RULE_compilation_unit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DATABASE) {
	            this.state = 400;
	            this.databaseDeclaration();
	        }

	        this.state = 404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.GLOBALS) {
	            this.state = 403;
	            this.globalDeclaration();
	        }

	        this.state = 407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DEFINE) {
	            this.state = 406;
	            this.typeDeclarations();
	        }

	        this.state = 409;
	        this.mainBlock();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.FUNCTION || _la===informixParser.REPORT) {
	            this.state = 410;
	            this.functionOrReportDefinitions();
	        }

	        this.state = 413;
	        this.match(informixParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, informixParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        this.match(informixParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainBlock() {
	    let localctx = new MainBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, informixParser.RULE_mainBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.EOL) {
	            this.state = 417;
	            this.eol();
	        }

	        this.state = 420;
	        this.match(informixParser.MAIN);
	        this.state = 421;
	        this.eol();
	        this.state = 423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DEFINE) {
	            this.state = 422;
	            this.typeDeclarations();
	        }

	        this.state = 426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DEFER - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0) || _la===informixParser.EOL) {
	            this.state = 425;
	            this.mainStatements();
	        }

	        this.state = 428;
	        this.match(informixParser.END);
	        this.state = 429;
	        this.match(informixParser.MAIN);
	        this.state = 430;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainStatements() {
	    let localctx = new MainStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, informixParser.RULE_mainStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 435;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.DEFER:
	                this.state = 432;
	                this.deferStatement();
	                break;
	            case informixParser.ALLOCATE:
	            case informixParser.BEGIN:
	            case informixParser.CALL:
	            case informixParser.CASE:
	            case informixParser.CLEAR:
	            case informixParser.CLOSE:
	            case informixParser.COMMIT:
	            case informixParser.CONSTRUCT:
	            case informixParser.CONTINUE:
	            case informixParser.CREATE:
	            case informixParser.CURRENT:
	            case informixParser.DATABASE:
	            case informixParser.DEALLOCATE:
	            case informixParser.DECLARE:
	            case informixParser.DELETE:
	            case informixParser.DISPLAY:
	            case informixParser.DROP:
	            case informixParser.ERROR:
	            case informixParser.EXECUTE:
	            case informixParser.EXIT:
	            case informixParser.FETCH:
	            case informixParser.FINISH:
	            case informixParser.FLUSH:
	            case informixParser.FOR:
	            case informixParser.FOREACH:
	            case informixParser.FREE:
	            case informixParser.GOTO:
	            case informixParser.HIDE:
	            case informixParser.IF:
	            case informixParser.INITIALIZE:
	            case informixParser.INPUT:
	            case informixParser.INSERT:
	            case informixParser.LET:
	            case informixParser.LOAD:
	            case informixParser.LOCATE:
	            case informixParser.LOCK:
	            case informixParser.MENU:
	            case informixParser.MESSAGE:
	            case informixParser.NEED:
	            case informixParser.NEXT:
	            case informixParser.OPEN:
	            case informixParser.OPTIONS:
	            case informixParser.OUTPUT:
	            case informixParser.PAUSE:
	            case informixParser.PREPARE:
	            case informixParser.PRINT:
	            case informixParser.PROMPT:
	            case informixParser.PUT:
	            case informixParser.RESIZE:
	            case informixParser.RETURN:
	            case informixParser.ROLLBACK:
	            case informixParser.RUN:
	            case informixParser.SCROLL:
	            case informixParser.SKIP2:
	            case informixParser.SELECT:
	            case informixParser.SET:
	            case informixParser.SHOW:
	            case informixParser.SLEEP:
	            case informixParser.START:
	            case informixParser.TERMINATE:
	            case informixParser.UNLOAD:
	            case informixParser.UPDATE:
	            case informixParser.VALIDATE:
	            case informixParser.WHENEVER:
	            case informixParser.WHILE:
	            case informixParser.IDENT:
	                this.state = 433;
	                this.codeBlock();
	                break;
	            case informixParser.EOL:
	                this.state = 434;
	                this.eol();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 437; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DEFER - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0) || _la===informixParser.EOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deferStatement() {
	    let localctx = new DeferStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, informixParser.RULE_deferStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.match(informixParser.DEFER);
	        this.state = 440;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.INTERRUPT || _la===informixParser.QUIT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 441;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionOrReportDefinitions() {
	    let localctx = new FunctionOrReportDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, informixParser.RULE_functionOrReportDefinitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 445;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.REPORT:
	                this.state = 443;
	                this.reportDefinition();
	                break;
	            case informixParser.FUNCTION:
	                this.state = 444;
	                this.functionDefinition();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 447; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===informixParser.FUNCTION || _la===informixParser.REPORT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, informixParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(informixParser.RETURN);
	        this.state = 451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 450;
	            this.variableOrConstantList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, informixParser.RULE_functionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.match(informixParser.FUNCTION);
	        this.state = 454;
	        this.functionIdentifier();
	        this.state = 456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.LPAREN) {
	            this.state = 455;
	            this.parameterList();
	        }

	        this.state = 458;
	        this.eol();
	        this.state = 459;
	        this.typeDeclarations();
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 460;
	            this.codeBlock();
	        }

	        this.state = 463;
	        this.match(informixParser.END);
	        this.state = 464;
	        this.match(informixParser.FUNCTION);
	        this.state = 465;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, informixParser.RULE_parameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.match(informixParser.LPAREN);
	        this.state = 471;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.IDENT) {
	            this.state = 468;
	            this.parameterGroup();
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 474;
	        this.match(informixParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterGroup() {
	    let localctx = new ParameterGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, informixParser.RULE_parameterGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this.identifier();
	        this.state = 481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 477;
	            this.match(informixParser.COMMA);
	            this.state = 478;
	            this.identifier();
	            this.state = 483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalDeclaration() {
	    let localctx = new GlobalDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, informixParser.RULE_globalDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.match(informixParser.GLOBALS);
	        this.state = 491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.STRING_LITERAL:
	            this.state = 485;
	            this.string();
	            break;
	        case informixParser.EOL:
	            this.state = 486;
	            this.eol();
	            this.state = 487;
	            this.typeDeclarations();
	            this.state = 488;
	            this.match(informixParser.END);
	            this.state = 489;
	            this.match(informixParser.GLOBALS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 493;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclarations() {
	    let localctx = new TypeDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, informixParser.RULE_typeDeclarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 495;
	            this.typeDeclaration();
	            this.state = 498; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===informixParser.DEFINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, informixParser.RULE_typeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.match(informixParser.DEFINE);
	        this.state = 501;
	        this.variableDeclaration();
	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 502;
	            this.match(informixParser.COMMA);
	            this.state = 503;
	            this.variableDeclaration();
	            this.state = 508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, informixParser.RULE_variableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.constantIdentifier();
	            this.state = 514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 510;
	                this.match(informixParser.COMMA);
	                this.state = 511;
	                this.constantIdentifier();
	                this.state = 516;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 517;
	            this.type_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.constantIdentifier();
	            this.state = 520;
	            this.type_();
	            this.state = 527;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 521;
	                    this.match(informixParser.COMMA);
	                    this.state = 522;
	                    this.constantIdentifier();
	                    this.state = 523;
	                    this.type_(); 
	                }
	                this.state = 529;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, informixParser.RULE_type_);
	    try {
	        this.state = 536;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BIGINT:
	        case informixParser.CHAR:
	        case informixParser.DATE:
	        case informixParser.DATETIME:
	        case informixParser.DEC:
	        case informixParser.DECIMAL:
	        case informixParser.DOUBLE:
	        case informixParser.FLOAT:
	        case informixParser.INT:
	        case informixParser.INTEGER:
	        case informixParser.INTERVAL:
	        case informixParser.MONEY:
	        case informixParser.NCHAR:
	        case informixParser.NUMERIC:
	        case informixParser.NVARCHAR:
	        case informixParser.REAL:
	        case informixParser.SMALLFLOAT:
	        case informixParser.SMALLINT:
	        case informixParser.VARCHAR:
	        case informixParser.CHARACTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 532;
	            this.typeIdentifier();
	            break;
	        case informixParser.LIKE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 533;
	            this.indirectType();
	            break;
	        case informixParser.BYTE:
	        case informixParser.TEXT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 534;
	            this.largeType();
	            break;
	        case informixParser.ARRAY:
	        case informixParser.DYNAMIC:
	        case informixParser.RECORD:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 535;
	            this.structuredType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indirectType() {
	    let localctx = new IndirectTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, informixParser.RULE_indirectType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(informixParser.LIKE);
	        this.state = 539;
	        this.tableIdentifier();
	        this.state = 540;
	        this.match(informixParser.DOT);
	        this.state = 541;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdentifier() {
	    let localctx = new TypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, informixParser.RULE_typeIdentifier);
	    try {
	        this.state = 546;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CHAR:
	        case informixParser.NCHAR:
	        case informixParser.NVARCHAR:
	        case informixParser.VARCHAR:
	        case informixParser.CHARACTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 543;
	            this.charType();
	            break;
	        case informixParser.BIGINT:
	        case informixParser.DEC:
	        case informixParser.DECIMAL:
	        case informixParser.DOUBLE:
	        case informixParser.FLOAT:
	        case informixParser.INT:
	        case informixParser.INTEGER:
	        case informixParser.MONEY:
	        case informixParser.NUMERIC:
	        case informixParser.REAL:
	        case informixParser.SMALLFLOAT:
	        case informixParser.SMALLINT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 544;
	            this.numberType();
	            break;
	        case informixParser.DATE:
	        case informixParser.DATETIME:
	        case informixParser.INTERVAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 545;
	            this.timeType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	largeType() {
	    let localctx = new LargeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, informixParser.RULE_largeType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.BYTE || _la===informixParser.TEXT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberType() {
	    let localctx = new NumberTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, informixParser.RULE_numberType);
	    var _la = 0; // Token type
	    try {
	        this.state = 569;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BIGINT:
	        case informixParser.INT:
	        case informixParser.INTEGER:
	        case informixParser.REAL:
	        case informixParser.SMALLFLOAT:
	        case informixParser.SMALLINT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 550;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.BIGINT || _la===informixParser.INT || _la===informixParser.INTEGER || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (informixParser.REAL - 226)) | (1 << (informixParser.SMALLFLOAT - 226)) | (1 << (informixParser.SMALLINT - 226)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.DEC:
	        case informixParser.DECIMAL:
	        case informixParser.MONEY:
	        case informixParser.NUMERIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 551;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.DEC || _la===informixParser.DECIMAL || _la===informixParser.MONEY || _la===informixParser.NUMERIC)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 552;
	                this.match(informixParser.LPAREN);
	                this.state = 553;
	                this.numericConstant();
	                this.state = 556;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.COMMA) {
	                    this.state = 554;
	                    this.match(informixParser.COMMA);
	                    this.state = 555;
	                    this.numericConstant();
	                }

	                this.state = 558;
	                this.match(informixParser.RPAREN);
	            }

	            break;
	        case informixParser.DOUBLE:
	        case informixParser.FLOAT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 562;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.DOUBLE || _la===informixParser.FLOAT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 567;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 563;
	                this.match(informixParser.LPAREN);
	                this.state = 564;
	                this.numericConstant();
	                this.state = 565;
	                this.match(informixParser.RPAREN);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charType() {
	    let localctx = new CharTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, informixParser.RULE_charType);
	    var _la = 0; // Token type
	    try {
	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NVARCHAR:
	        case informixParser.VARCHAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 571;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.NVARCHAR || _la===informixParser.VARCHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 572;
	            this.match(informixParser.LPAREN);
	            this.state = 573;
	            this.numericConstant();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.COMMA) {
	                this.state = 574;
	                this.match(informixParser.COMMA);
	                this.state = 575;
	                this.numericConstant();
	            }

	            this.state = 578;
	            this.match(informixParser.RPAREN);
	            break;
	        case informixParser.CHAR:
	        case informixParser.NCHAR:
	        case informixParser.CHARACTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 580;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.CHAR || _la===informixParser.NCHAR || _la===informixParser.CHARACTER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 581;
	                this.match(informixParser.LPAREN);
	                this.state = 582;
	                this.numericConstant();
	                this.state = 583;
	                this.match(informixParser.RPAREN);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeType() {
	    let localctx = new TimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, informixParser.RULE_timeType);
	    try {
	        this.state = 594;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.DATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 589;
	            this.match(informixParser.DATE);
	            break;
	        case informixParser.DATETIME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 590;
	            this.match(informixParser.DATETIME);
	            this.state = 591;
	            this.datetimeQualifier();
	            break;
	        case informixParser.INTERVAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 592;
	            this.match(informixParser.INTERVAL);
	            this.state = 593;
	            this.intervalQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeQualifier() {
	    let localctx = new DatetimeQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, informixParser.RULE_datetimeQualifier);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.YEAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 596;
	            this.match(informixParser.YEAR);
	            this.state = 597;
	            this.match(informixParser.TO);
	            this.state = 598;
	            this.yearQualifier();
	            break;
	        case informixParser.MONTH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 599;
	            this.match(informixParser.MONTH);
	            this.state = 600;
	            this.match(informixParser.TO);
	            this.state = 601;
	            this.monthQualifier();
	            break;
	        case informixParser.DAY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 602;
	            this.match(informixParser.DAY);
	            this.state = 603;
	            this.match(informixParser.TO);
	            this.state = 604;
	            this.dayQualifier();
	            break;
	        case informixParser.HOUR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 605;
	            this.match(informixParser.HOUR);
	            this.state = 606;
	            this.match(informixParser.TO);
	            this.state = 607;
	            this.hourQualifier();
	            break;
	        case informixParser.MINUTE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 608;
	            this.match(informixParser.MINUTE);
	            this.state = 609;
	            this.match(informixParser.TO);
	            this.state = 610;
	            this.minuteQualifier();
	            break;
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 611;
	            this.match(informixParser.SECOND);
	            this.state = 612;
	            this.match(informixParser.TO);
	            this.state = 613;
	            this.secondQualifier();
	            break;
	        case informixParser.FRACTION:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 614;
	            this.match(informixParser.FRACTION);
	            this.state = 615;
	            this.match(informixParser.TO);
	            this.state = 616;
	            this.fractionQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalQualifier() {
	    let localctx = new IntervalQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, informixParser.RULE_intervalQualifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.YEAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 619;
	            this.match(informixParser.YEAR);
	            this.state = 624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 620;
	                this.match(informixParser.LPAREN);
	                this.state = 621;
	                this.numericConstant();
	                this.state = 622;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 626;
	            this.match(informixParser.TO);
	            this.state = 627;
	            this.yearQualifier();
	            break;
	        case informixParser.MONTH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.match(informixParser.MONTH);
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 629;
	                this.match(informixParser.LPAREN);
	                this.state = 630;
	                this.numericConstant();
	                this.state = 631;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 635;
	            this.match(informixParser.TO);
	            this.state = 636;
	            this.monthQualifier();
	            break;
	        case informixParser.DAY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 637;
	            this.match(informixParser.DAY);
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 638;
	                this.match(informixParser.LPAREN);
	                this.state = 639;
	                this.numericConstant();
	                this.state = 640;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 644;
	            this.match(informixParser.TO);
	            this.state = 645;
	            this.dayQualifier();
	            break;
	        case informixParser.HOUR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 646;
	            this.match(informixParser.HOUR);
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 647;
	                this.match(informixParser.LPAREN);
	                this.state = 648;
	                this.numericConstant();
	                this.state = 649;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 653;
	            this.match(informixParser.TO);
	            this.state = 654;
	            this.hourQualifier();
	            break;
	        case informixParser.MINUTE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 655;
	            this.match(informixParser.MINUTE);
	            this.state = 660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 656;
	                this.match(informixParser.LPAREN);
	                this.state = 657;
	                this.numericConstant();
	                this.state = 658;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 662;
	            this.match(informixParser.TO);
	            this.state = 663;
	            this.minuteQualifier();
	            break;
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 664;
	            this.match(informixParser.SECOND);
	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 665;
	                this.match(informixParser.LPAREN);
	                this.state = 666;
	                this.numericConstant();
	                this.state = 667;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 671;
	            this.match(informixParser.TO);
	            this.state = 672;
	            this.secondQualifier();
	            break;
	        case informixParser.FRACTION:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 673;
	            this.match(informixParser.FRACTION);
	            this.state = 674;
	            this.match(informixParser.TO);
	            this.state = 675;
	            this.fractionQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitType() {
	    let localctx = new UnitTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, informixParser.RULE_unitType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this.yearQualifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yearQualifier() {
	    let localctx = new YearQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, informixParser.RULE_yearQualifier);
	    try {
	        this.state = 682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.YEAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.match(informixParser.YEAR);
	            break;
	        case informixParser.DAY:
	        case informixParser.FRACTION:
	        case informixParser.HOUR:
	        case informixParser.MINUTE:
	        case informixParser.MONTH:
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 681;
	            this.monthQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	monthQualifier() {
	    let localctx = new MonthQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, informixParser.RULE_monthQualifier);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.MONTH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 684;
	            this.match(informixParser.MONTH);
	            break;
	        case informixParser.DAY:
	        case informixParser.FRACTION:
	        case informixParser.HOUR:
	        case informixParser.MINUTE:
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 685;
	            this.dayQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dayQualifier() {
	    let localctx = new DayQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, informixParser.RULE_dayQualifier);
	    try {
	        this.state = 690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.DAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.match(informixParser.DAY);
	            break;
	        case informixParser.FRACTION:
	        case informixParser.HOUR:
	        case informixParser.MINUTE:
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 689;
	            this.hourQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hourQualifier() {
	    let localctx = new HourQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, informixParser.RULE_hourQualifier);
	    try {
	        this.state = 694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.HOUR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 692;
	            this.match(informixParser.HOUR);
	            break;
	        case informixParser.FRACTION:
	        case informixParser.MINUTE:
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 693;
	            this.minuteQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minuteQualifier() {
	    let localctx = new MinuteQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, informixParser.RULE_minuteQualifier);
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.MINUTE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 696;
	            this.match(informixParser.MINUTE);
	            break;
	        case informixParser.FRACTION:
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.secondQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondQualifier() {
	    let localctx = new SecondQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, informixParser.RULE_secondQualifier);
	    try {
	        this.state = 702;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.SECOND:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 700;
	            this.match(informixParser.SECOND);
	            break;
	        case informixParser.FRACTION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 701;
	            this.fractionQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fractionQualifier() {
	    let localctx = new FractionQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, informixParser.RULE_fractionQualifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.match(informixParser.FRACTION);
	        this.state = 709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 705;
	            this.match(informixParser.LPAREN);
	            this.state = 706;
	            this.numericConstant();
	            this.state = 707;
	            this.match(informixParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structuredType() {
	    let localctx = new StructuredTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, informixParser.RULE_structuredType);
	    try {
	        this.state = 714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.RECORD:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 711;
	            this.recordType();
	            break;
	        case informixParser.ARRAY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 712;
	            this.arrayType();
	            break;
	        case informixParser.DYNAMIC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 713;
	            this.dynArrayType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, informixParser.RULE_recordType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(informixParser.RECORD);
	        this.state = 734;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.EOL:
	            this.state = 717;
	            this.eol();

	            this.state = 718;
	            this.variableDeclaration();
	            this.state = 723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 719;
	                this.match(informixParser.COMMA);
	                this.state = 720;
	                this.variableDeclaration();
	                this.state = 725;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 726;
	            this.match(informixParser.END);
	            this.state = 727;
	            this.match(informixParser.RECORD);
	            break;
	        case informixParser.LIKE:
	            this.state = 729;
	            this.match(informixParser.LIKE);
	            this.state = 730;
	            this.tableIdentifier();
	            this.state = 731;
	            this.match(informixParser.DOT);
	            this.state = 732;
	            this.match(informixParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayIndexer() {
	    let localctx = new ArrayIndexerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, informixParser.RULE_arrayIndexer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(informixParser.LBRACK);
	        this.state = 737;
	        this.numericConstant();
	        this.state = 745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 738;
	            this.match(informixParser.COMMA);
	            this.state = 739;
	            this.numericConstant();

	        } else if(la_===2) {
	            this.state = 740;
	            this.match(informixParser.COMMA);
	            this.state = 741;
	            this.numericConstant();
	            this.state = 742;
	            this.match(informixParser.COMMA);
	            this.state = 743;
	            this.numericConstant();

	        }
	        this.state = 747;
	        this.match(informixParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, informixParser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.match(informixParser.ARRAY);
	        this.state = 750;
	        this.arrayIndexer();
	        this.state = 751;
	        this.match(informixParser.OF);
	        this.state = 755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.RECORD:
	            this.state = 752;
	            this.recordType();
	            break;
	        case informixParser.BIGINT:
	        case informixParser.CHAR:
	        case informixParser.DATE:
	        case informixParser.DATETIME:
	        case informixParser.DEC:
	        case informixParser.DECIMAL:
	        case informixParser.DOUBLE:
	        case informixParser.FLOAT:
	        case informixParser.INT:
	        case informixParser.INTEGER:
	        case informixParser.INTERVAL:
	        case informixParser.MONEY:
	        case informixParser.NCHAR:
	        case informixParser.NUMERIC:
	        case informixParser.NVARCHAR:
	        case informixParser.REAL:
	        case informixParser.SMALLFLOAT:
	        case informixParser.SMALLINT:
	        case informixParser.VARCHAR:
	        case informixParser.CHARACTER:
	            this.state = 753;
	            this.typeIdentifier();
	            break;
	        case informixParser.BYTE:
	        case informixParser.TEXT:
	            this.state = 754;
	            this.largeType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynArrayType() {
	    let localctx = new DynArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, informixParser.RULE_dynArrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(informixParser.DYNAMIC);
	        this.state = 758;
	        this.match(informixParser.ARRAY);
	        this.state = 759;
	        this.match(informixParser.WITH);
	        this.state = 760;
	        this.numericConstant();
	        this.state = 761;
	        this.match(informixParser.DIMENSIONS);
	        this.state = 762;
	        this.match(informixParser.OF);
	        this.state = 765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.RECORD:
	            this.state = 763;
	            this.recordType();
	            break;
	        case informixParser.BIGINT:
	        case informixParser.CHAR:
	        case informixParser.DATE:
	        case informixParser.DATETIME:
	        case informixParser.DEC:
	        case informixParser.DECIMAL:
	        case informixParser.DOUBLE:
	        case informixParser.FLOAT:
	        case informixParser.INT:
	        case informixParser.INTEGER:
	        case informixParser.INTERVAL:
	        case informixParser.MONEY:
	        case informixParser.NCHAR:
	        case informixParser.NUMERIC:
	        case informixParser.NVARCHAR:
	        case informixParser.REAL:
	        case informixParser.SMALLFLOAT:
	        case informixParser.SMALLINT:
	        case informixParser.VARCHAR:
	        case informixParser.CHARACTER:
	            this.state = 764;
	            this.typeIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, informixParser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.match(informixParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, informixParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.IDENT) {
	            this.state = 769;
	            this.label();
	            this.state = 770;
	            this.match(informixParser.COLON);
	        }

	        this.state = 774;
	        this.unlabelledStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeBlock() {
	    let localctx = new CodeBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, informixParser.RULE_codeBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 778;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case informixParser.ALLOCATE:
	        		case informixParser.BEGIN:
	        		case informixParser.CALL:
	        		case informixParser.CASE:
	        		case informixParser.CLEAR:
	        		case informixParser.CLOSE:
	        		case informixParser.COMMIT:
	        		case informixParser.CONSTRUCT:
	        		case informixParser.CONTINUE:
	        		case informixParser.CREATE:
	        		case informixParser.CURRENT:
	        		case informixParser.DEALLOCATE:
	        		case informixParser.DECLARE:
	        		case informixParser.DELETE:
	        		case informixParser.DISPLAY:
	        		case informixParser.DROP:
	        		case informixParser.ERROR:
	        		case informixParser.EXECUTE:
	        		case informixParser.EXIT:
	        		case informixParser.FETCH:
	        		case informixParser.FINISH:
	        		case informixParser.FLUSH:
	        		case informixParser.FOR:
	        		case informixParser.FOREACH:
	        		case informixParser.FREE:
	        		case informixParser.GOTO:
	        		case informixParser.HIDE:
	        		case informixParser.IF:
	        		case informixParser.INITIALIZE:
	        		case informixParser.INPUT:
	        		case informixParser.INSERT:
	        		case informixParser.LET:
	        		case informixParser.LOAD:
	        		case informixParser.LOCATE:
	        		case informixParser.LOCK:
	        		case informixParser.MENU:
	        		case informixParser.MESSAGE:
	        		case informixParser.NEED:
	        		case informixParser.NEXT:
	        		case informixParser.OPEN:
	        		case informixParser.OPTIONS:
	        		case informixParser.OUTPUT:
	        		case informixParser.PAUSE:
	        		case informixParser.PREPARE:
	        		case informixParser.PRINT:
	        		case informixParser.PROMPT:
	        		case informixParser.PUT:
	        		case informixParser.RESIZE:
	        		case informixParser.RETURN:
	        		case informixParser.ROLLBACK:
	        		case informixParser.RUN:
	        		case informixParser.SCROLL:
	        		case informixParser.SKIP2:
	        		case informixParser.SELECT:
	        		case informixParser.SET:
	        		case informixParser.SHOW:
	        		case informixParser.SLEEP:
	        		case informixParser.START:
	        		case informixParser.TERMINATE:
	        		case informixParser.UNLOAD:
	        		case informixParser.UPDATE:
	        		case informixParser.VALIDATE:
	        		case informixParser.WHENEVER:
	        		case informixParser.WHILE:
	        		case informixParser.IDENT:
	        		    this.state = 776;
	        		    this.statement();
	        		    break;
	        		case informixParser.DATABASE:
	        		    this.state = 777;
	        		    this.databaseDeclaration();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 780; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,55, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, informixParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlabelledStatement() {
	    let localctx = new UnlabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, informixParser.RULE_unlabelledStatement);
	    try {
	        this.state = 786;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ALLOCATE:
	        case informixParser.BEGIN:
	        case informixParser.CALL:
	        case informixParser.CLEAR:
	        case informixParser.CLOSE:
	        case informixParser.COMMIT:
	        case informixParser.CONSTRUCT:
	        case informixParser.CONTINUE:
	        case informixParser.CREATE:
	        case informixParser.CURRENT:
	        case informixParser.DEALLOCATE:
	        case informixParser.DECLARE:
	        case informixParser.DELETE:
	        case informixParser.DISPLAY:
	        case informixParser.DROP:
	        case informixParser.ERROR:
	        case informixParser.EXECUTE:
	        case informixParser.EXIT:
	        case informixParser.FETCH:
	        case informixParser.FINISH:
	        case informixParser.FLUSH:
	        case informixParser.FREE:
	        case informixParser.GOTO:
	        case informixParser.HIDE:
	        case informixParser.INITIALIZE:
	        case informixParser.INPUT:
	        case informixParser.INSERT:
	        case informixParser.LET:
	        case informixParser.LOAD:
	        case informixParser.LOCATE:
	        case informixParser.LOCK:
	        case informixParser.MENU:
	        case informixParser.MESSAGE:
	        case informixParser.NEED:
	        case informixParser.NEXT:
	        case informixParser.OPEN:
	        case informixParser.OPTIONS:
	        case informixParser.OUTPUT:
	        case informixParser.PAUSE:
	        case informixParser.PREPARE:
	        case informixParser.PRINT:
	        case informixParser.PROMPT:
	        case informixParser.PUT:
	        case informixParser.RESIZE:
	        case informixParser.RETURN:
	        case informixParser.ROLLBACK:
	        case informixParser.RUN:
	        case informixParser.SCROLL:
	        case informixParser.SKIP2:
	        case informixParser.SELECT:
	        case informixParser.SET:
	        case informixParser.SHOW:
	        case informixParser.SLEEP:
	        case informixParser.START:
	        case informixParser.TERMINATE:
	        case informixParser.UNLOAD:
	        case informixParser.UPDATE:
	        case informixParser.VALIDATE:
	        case informixParser.WHENEVER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 784;
	            this.simpleStatement();
	            break;
	        case informixParser.CASE:
	        case informixParser.FOR:
	        case informixParser.FOREACH:
	        case informixParser.IF:
	        case informixParser.WHILE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 785;
	            this.structuredStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStatement() {
	    let localctx = new SimpleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, informixParser.RULE_simpleStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 788;
	            this.assignmentStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 789;
	            this.procedureStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 790;
	            this.sqlStatements();
	            this.state = 792;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.SEMI) {
	                this.state = 791;
	                this.match(informixParser.SEMI);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 794;
	            this.otherFGLStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 795;
	            this.menuInsideStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 796;
	            this.constructInsideStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 797;
	            this.displayInsideStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 798;
	            this.inputInsideStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	runStatement() {
	    let localctx = new RunStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, informixParser.RULE_runStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        this.match(informixParser.RUN);
	        this.state = 804;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.state = 802;
	            this.variable();
	            break;
	        case informixParser.STRING_LITERAL:
	            this.state = 803;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 806;
	            this.match(informixParser.IN);
	            this.state = 807;
	            this.match(informixParser.FORM);
	            this.state = 808;
	            this.match(informixParser.MODE);

	        } else if(la_===2) {
	            this.state = 809;
	            this.match(informixParser.IN);
	            this.state = 810;
	            this.match(informixParser.LINE);
	            this.state = 811;
	            this.match(informixParser.MODE);

	        }
	        this.state = 818;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case informixParser.WITHOUT:
	        	this.state = 814;
	        	this.match(informixParser.WITHOUT);
	        	this.state = 815;
	        	this.match(informixParser.WAITING);
	        	break;
	        case informixParser.RETURNING:
	        	this.state = 816;
	        	this.match(informixParser.RETURNING);
	        	this.state = 817;
	        	this.variable();
	        	break;
	        case informixParser.AFTER:
	        case informixParser.ALLOCATE:
	        case informixParser.BEFORE:
	        case informixParser.BEGIN:
	        case informixParser.CALL:
	        case informixParser.CASE:
	        case informixParser.CLEAR:
	        case informixParser.CLOSE:
	        case informixParser.COMMAND:
	        case informixParser.COMMIT:
	        case informixParser.CONSTRUCT:
	        case informixParser.CONTINUE:
	        case informixParser.CREATE:
	        case informixParser.CURRENT:
	        case informixParser.DATABASE:
	        case informixParser.DEALLOCATE:
	        case informixParser.DECLARE:
	        case informixParser.DEFER:
	        case informixParser.DELETE:
	        case informixParser.DISPLAY:
	        case informixParser.DROP:
	        case informixParser.ELSE:
	        case informixParser.END:
	        case informixParser.ERROR:
	        case informixParser.EXECUTE:
	        case informixParser.EXIT:
	        case informixParser.FETCH:
	        case informixParser.FINISH:
	        case informixParser.FIRST:
	        case informixParser.FLUSH:
	        case informixParser.FOR:
	        case informixParser.FOREACH:
	        case informixParser.FREE:
	        case informixParser.GOTO:
	        case informixParser.HIDE:
	        case informixParser.IF:
	        case informixParser.INITIALIZE:
	        case informixParser.INPUT:
	        case informixParser.INSERT:
	        case informixParser.LET:
	        case informixParser.LOAD:
	        case informixParser.LOCATE:
	        case informixParser.LOCK:
	        case informixParser.MENU:
	        case informixParser.MESSAGE:
	        case informixParser.NEED:
	        case informixParser.NEXT:
	        case informixParser.ON:
	        case informixParser.OPEN:
	        case informixParser.OPTIONS:
	        case informixParser.OUTPUT:
	        case informixParser.OTHERWISE:
	        case informixParser.PAGE:
	        case informixParser.PAUSE:
	        case informixParser.PREPARE:
	        case informixParser.PRINT:
	        case informixParser.PROMPT:
	        case informixParser.PUT:
	        case informixParser.RESIZE:
	        case informixParser.RETURN:
	        case informixParser.ROLLBACK:
	        case informixParser.RUN:
	        case informixParser.SCROLL:
	        case informixParser.SKIP2:
	        case informixParser.SELECT:
	        case informixParser.SET:
	        case informixParser.SHOW:
	        case informixParser.SLEEP:
	        case informixParser.START:
	        case informixParser.TERMINATE:
	        case informixParser.UNLOAD:
	        case informixParser.UPDATE:
	        case informixParser.VALIDATE:
	        case informixParser.WHEN:
	        case informixParser.WHENEVER:
	        case informixParser.WHILE:
	        case informixParser.IDENT:
	        case informixParser.EOL:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStatement() {
	    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, informixParser.RULE_assignmentStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 820;
	        this.match(informixParser.LET);
	        this.state = 821;
	        this.variable();
	        this.state = 822;
	        this.match(informixParser.EQUAL);
	        this.state = 823;
	        this.expression();
	        this.state = 828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 824;
	            this.match(informixParser.COMMA);
	            this.state = 825;
	            this.expression();
	            this.state = 830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureStatement() {
	    let localctx = new ProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, informixParser.RULE_procedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(informixParser.CALL);
	        this.state = 832;
	        this.procedureIdentifier();
	        this.state = 845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.LPAREN) {
	            this.state = 833;
	            this.match(informixParser.LPAREN);
	            this.state = 842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.ACCEPT) | (1 << informixParser.ASCII) | (1 << informixParser.AVG))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (informixParser.COLUMN - 43)) | (1 << (informixParser.COUNT - 43)) | (1 << (informixParser.CURRENT - 43)) | (1 << (informixParser.DATE - 43)) | (1 << (informixParser.DAY - 43)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (informixParser.EXTEND - 98)) | (1 << (informixParser.FALSE - 98)) | (1 << (informixParser.FIRST - 98)) | (1 << (informixParser.FOUND - 98)) | (1 << (informixParser.GROUP - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (informixParser.HIDE - 130)) | (1 << (informixParser.INDEX - 130)) | (1 << (informixParser.INFIELD - 130)) | (1 << (informixParser.INT_FLAG - 130)) | (1 << (informixParser.INTERRUPT - 130)) | (1 << (informixParser.LAST - 130)) | (1 << (informixParser.LENGTH - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (informixParser.LINENO - 162)) | (1 << (informixParser.MAX - 162)) | (1 << (informixParser.MDY - 162)) | (1 << (informixParser.MIN - 162)) | (1 << (informixParser.MONTH - 162)) | (1 << (informixParser.NO - 162)) | (1 << (informixParser.NOT - 162)) | (1 << (informixParser.NOTFOUND - 162)))) !== 0) || ((((_la - 195)) & ~0x1f) == 0 && ((1 << (_la - 195)) & ((1 << (informixParser.NULL_ - 195)) | (1 << (informixParser.PAGENO - 195)) | (1 << (informixParser.PREPARE - 195)) | (1 << (informixParser.REAL - 195)))) !== 0) || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.SUM - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)) | (1 << (informixParser.YEAR - 290)) | (1 << (informixParser.PLUS - 290)) | (1 << (informixParser.MINUS - 290)) | (1 << (informixParser.STAR - 290)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (informixParser.LPAREN - 325)) | (1 << (informixParser.IDENT - 325)) | (1 << (informixParser.STRING_LITERAL - 325)) | (1 << (informixParser.NUM_INT - 325)) | (1 << (informixParser.NUM_REAL - 325)))) !== 0)) {
	                this.state = 834;
	                this.actualParameter();
	                this.state = 839;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 835;
	                    this.match(informixParser.COMMA);
	                    this.state = 836;
	                    this.actualParameter();
	                    this.state = 841;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 844;
	            this.match(informixParser.RPAREN);
	        }

	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.RETURNING) {
	            this.state = 847;
	            this.match(informixParser.RETURNING);
	            this.state = 848;
	            this.variable();
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 849;
	                this.match(informixParser.COMMA);
	                this.state = 850;
	                this.variable();
	                this.state = 855;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureIdentifier() {
	    let localctx = new ProcedureIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, informixParser.RULE_procedureIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.functionIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualParameter() {
	    let localctx = new ActualParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, informixParser.RULE_actualParameter);
	    try {
	        this.state = 862;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 860;
	            this.match(informixParser.STAR);
	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.AVG:
	        case informixParser.COLUMN:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.DATE:
	        case informixParser.DAY:
	        case informixParser.EXTEND:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INFIELD:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MAX:
	        case informixParser.MDY:
	        case informixParser.MIN:
	        case informixParser.MONTH:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.PREPARE:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.SUM:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.YEAR:
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	        case informixParser.LPAREN:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 861;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStatement() {
	    let localctx = new GotoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, informixParser.RULE_gotoStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.match(informixParser.GOTO);
	        this.state = 866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.COLON) {
	            this.state = 865;
	            this.match(informixParser.COLON);
	        }

	        this.state = 868;
	        this.label();
	        this.state = 869;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, informixParser.RULE_condition);
	    var _la = 0; // Token type
	    try {
	        this.state = 880;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 871;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.FALSE || _la===informixParser.TRUE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 872;
	            this.logicalTerm();
	            this.state = 877;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 873;
	                    this.match(informixParser.OR);
	                    this.state = 874;
	                    this.logicalTerm(); 
	                }
	                this.state = 879;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalTerm() {
	    let localctx = new LogicalTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, informixParser.RULE_logicalTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.logicalFactor();
	        this.state = 887;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 883;
	                this.match(informixParser.AND);
	                this.state = 884;
	                this.logicalFactor(); 
	            }
	            this.state = 889;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalFactor() {
	    let localctx = new LogicalFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, informixParser.RULE_logicalFactor);
	    var _la = 0; // Token type
	    try {
	        this.state = 953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 891;
	            this.sqlExpression();
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 892;
	                this.match(informixParser.NOT);
	            }

	            this.state = 895;
	            this.match(informixParser.LIKE);
	            this.state = 897;
	            this.sqlExpression();
	            this.state = 899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 898;
	                this.match(informixParser.NOT);
	            }

	            this.state = 901;
	            this.match(informixParser.LIKE);
	            this.state = 902;
	            this.sqlExpression();
	            this.state = 905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ESC) {
	                this.state = 903;
	                this.match(informixParser.ESC);
	                this.state = 904;
	                this.match(informixParser.QUOTED_STRING);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 907;
	            this.sqlExpression();
	            this.state = 909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 908;
	                this.match(informixParser.NOT);
	            }

	            this.state = 911;
	            this.match(informixParser.BETWEEN);
	            this.state = 913;
	            this.sqlExpression();
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 914;
	                this.match(informixParser.NOT);
	            }

	            this.state = 917;
	            this.match(informixParser.BETWEEN);
	            this.state = 918;
	            this.sqlExpression();
	            this.state = 919;
	            this.match(informixParser.AND);
	            this.state = 920;
	            this.sqlExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 922;
	            this.sqlExpression();
	            this.state = 923;
	            this.match(informixParser.IS);
	            this.state = 925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 924;
	                this.match(informixParser.NOT);
	            }

	            this.state = 927;
	            this.match(informixParser.NULL_);
	            this.state = 929;
	            this.sqlExpression();
	            this.state = 930;
	            this.match(informixParser.IS);
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 931;
	                this.match(informixParser.NOT);
	            }

	            this.state = 934;
	            this.match(informixParser.NULL_);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 936;
	            this.quantifiedFactor();
	            this.state = 937;
	            this.quantifiedFactor();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 939;
	            this.match(informixParser.NOT);
	            this.state = 940;
	            this.condition();
	            this.state = 942;
	            this.match(informixParser.NOT);
	            this.state = 943;
	            this.condition();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 945;
	            this.match(informixParser.LPAREN);
	            this.state = 946;
	            this.condition();
	            this.state = 947;
	            this.match(informixParser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 949;
	            this.sqlExpression();
	            this.state = 950;
	            this.relationalOperator();
	            this.state = 951;
	            this.sqlExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedFactor() {
	    let localctx = new QuantifiedFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, informixParser.RULE_quantifiedFactor);
	    var _la = 0; // Token type
	    try {
	        this.state = 982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 955;
	            this.sqlExpression();
	            this.state = 956;
	            this.relationalOperator();
	            this.state = 958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ALL || _la===informixParser.ANY) {
	                this.state = 957;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.ALL || _la===informixParser.ANY)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 960;
	            this.subquery();
	            this.state = 962;
	            this.sqlExpression();
	            this.state = 963;
	            this.relationalOperator();
	            this.state = 965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ALL || _la===informixParser.ANY) {
	                this.state = 964;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.ALL || _la===informixParser.ANY)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 967;
	            this.subquery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 969;
	                this.match(informixParser.NOT);
	            }

	            this.state = 972;
	            this.match(informixParser.EXISTS);
	            this.state = 973;
	            this.subquery();
	            this.state = 976;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 975;
	                this.match(informixParser.NOT);
	            }

	            this.state = 978;
	            this.match(informixParser.EXISTS);
	            this.state = 979;
	            this.subquery();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 981;
	            this.subquery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSet() {
	    let localctx = new ExpressionSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, informixParser.RULE_expressionSet);
	    try {
	        this.state = 988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 984;
	            this.sqlExpression();
	            this.state = 985;
	            this.sqlExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 987;
	            this.subquery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, informixParser.RULE_subquery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(informixParser.LPAREN);
	        this.state = 991;
	        this.sqlSelectStatement();
	        this.state = 992;
	        this.match(informixParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlExpression() {
	    let localctx = new SqlExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, informixParser.RULE_sqlExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 994;
	        this.sqlTerm();
	        this.state = 999;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 995;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.PLUS || _la===informixParser.MINUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 996;
	                this.sqlTerm(); 
	            }
	            this.state = 1001;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlAlias() {
	    let localctx = new SqlAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, informixParser.RULE_sqlAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.AS) {
	            this.state = 1002;
	            this.match(informixParser.AS);
	        }

	        this.state = 1005;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlTerm() {
	    let localctx = new SqlTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, informixParser.RULE_sqlTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1007;
	        this.sqlFactor();
	        this.state = 1016;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1011;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case informixParser.STAR:
	                    this.state = 1008;
	                    this.sqlMultiply();
	                    break;
	                case informixParser.DIV:
	                    this.state = 1009;
	                    this.match(informixParser.DIV);
	                    break;
	                case informixParser.SLASH:
	                    this.state = 1010;
	                    this.match(informixParser.SLASH);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1013;
	                this.sqlFactor(); 
	            }
	            this.state = 1018;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlMultiply() {
	    let localctx = new SqlMultiplyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, informixParser.RULE_sqlMultiply);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1019;
	        this.match(informixParser.STAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlFactor() {
	    let localctx = new SqlFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, informixParser.RULE_sqlFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.sqlFactor2();
	        this.state = 1026;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1022;
	                this.match(informixParser.DOUBLEVERTBAR);
	                this.state = 1023;
	                this.sqlFactor2(); 
	            }
	            this.state = 1028;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlFactor2() {
	    let localctx = new SqlFactor2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, informixParser.RULE_sqlFactor2);
	    var _la = 0; // Token type
	    try {
	        this.state = 1122;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1029;
	            this.sqlVariable();
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.UNITS) {
	                this.state = 1030;
	                this.match(informixParser.UNITS);
	                this.state = 1031;
	                this.unitType();
	            }

	            this.state = 1034;
	            this.sqlVariable();
	            this.state = 1037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.UNITS) {
	                this.state = 1035;
	                this.match(informixParser.UNITS);
	                this.state = 1036;
	                this.unitType();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1039;
	            this.sqlLiteral();
	            this.state = 1042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.UNITS) {
	                this.state = 1040;
	                this.match(informixParser.UNITS);
	                this.state = 1041;
	                this.unitType();
	            }

	            this.state = 1044;
	            this.sqlLiteral();
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.UNITS) {
	                this.state = 1045;
	                this.match(informixParser.UNITS);
	                this.state = 1046;
	                this.unitType();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1049;
	            this.groupFunction();
	            this.state = 1050;
	            this.match(informixParser.LPAREN);
	            this.state = 1052;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 1051;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.ALL || _la===informixParser.DISTINCT || _la===informixParser.STAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1062;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.ACCEPT) | (1 << informixParser.ASCII) | (1 << informixParser.AVG))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (informixParser.COUNT - 54)) | (1 << (informixParser.CURRENT - 54)) | (1 << (informixParser.DATE - 54)) | (1 << (informixParser.DAY - 54)) | (1 << (informixParser.DECODE - 54)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (informixParser.FALSE - 101)) | (1 << (informixParser.FIRST - 101)) | (1 << (informixParser.FOUND - 101)) | (1 << (informixParser.GROUP - 101)) | (1 << (informixParser.HIDE - 101)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (informixParser.INDEX - 136)) | (1 << (informixParser.INT_FLAG - 136)) | (1 << (informixParser.INTERRUPT - 136)) | (1 << (informixParser.LAST - 136)) | (1 << (informixParser.LENGTH - 136)) | (1 << (informixParser.LINENO - 136)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (informixParser.MAX - 175)) | (1 << (informixParser.MDY - 175)) | (1 << (informixParser.MIN - 175)) | (1 << (informixParser.MOD - 175)) | (1 << (informixParser.MONTH - 175)) | (1 << (informixParser.NO - 175)) | (1 << (informixParser.NOT - 175)) | (1 << (informixParser.NOTFOUND - 175)) | (1 << (informixParser.NULL_ - 175)) | (1 << (informixParser.NVL - 175)))) !== 0) || _la===informixParser.PAGENO || _la===informixParser.REAL || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.SUM - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)) | (1 << (informixParser.YEAR - 290)) | (1 << (informixParser.PLUS - 290)) | (1 << (informixParser.MINUS - 290)) | (1 << (informixParser.STAR - 290)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (informixParser.LPAREN - 325)) | (1 << (informixParser.IDENT - 325)) | (1 << (informixParser.STRING_LITERAL - 325)) | (1 << (informixParser.NUM_INT - 325)) | (1 << (informixParser.NUM_REAL - 325)))) !== 0)) {
	                this.state = 1054;
	                this.sqlExpression();
	                this.state = 1059;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 1055;
	                    this.match(informixParser.COMMA);
	                    this.state = 1056;
	                    this.sqlExpression();
	                    this.state = 1061;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1064;
	            this.match(informixParser.RPAREN);
	            this.state = 1066;
	            this.groupFunction();
	            this.state = 1067;
	            this.match(informixParser.LPAREN);
	            this.state = 1069;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	            if(la_===1) {
	                this.state = 1068;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.ALL || _la===informixParser.DISTINCT || _la===informixParser.STAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.ACCEPT) | (1 << informixParser.ASCII) | (1 << informixParser.AVG))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (informixParser.COUNT - 54)) | (1 << (informixParser.CURRENT - 54)) | (1 << (informixParser.DATE - 54)) | (1 << (informixParser.DAY - 54)) | (1 << (informixParser.DECODE - 54)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (informixParser.FALSE - 101)) | (1 << (informixParser.FIRST - 101)) | (1 << (informixParser.FOUND - 101)) | (1 << (informixParser.GROUP - 101)) | (1 << (informixParser.HIDE - 101)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (informixParser.INDEX - 136)) | (1 << (informixParser.INT_FLAG - 136)) | (1 << (informixParser.INTERRUPT - 136)) | (1 << (informixParser.LAST - 136)) | (1 << (informixParser.LENGTH - 136)) | (1 << (informixParser.LINENO - 136)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (informixParser.MAX - 175)) | (1 << (informixParser.MDY - 175)) | (1 << (informixParser.MIN - 175)) | (1 << (informixParser.MOD - 175)) | (1 << (informixParser.MONTH - 175)) | (1 << (informixParser.NO - 175)) | (1 << (informixParser.NOT - 175)) | (1 << (informixParser.NOTFOUND - 175)) | (1 << (informixParser.NULL_ - 175)) | (1 << (informixParser.NVL - 175)))) !== 0) || _la===informixParser.PAGENO || _la===informixParser.REAL || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.SUM - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)) | (1 << (informixParser.YEAR - 290)) | (1 << (informixParser.PLUS - 290)) | (1 << (informixParser.MINUS - 290)) | (1 << (informixParser.STAR - 290)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (informixParser.LPAREN - 325)) | (1 << (informixParser.IDENT - 325)) | (1 << (informixParser.STRING_LITERAL - 325)) | (1 << (informixParser.NUM_INT - 325)) | (1 << (informixParser.NUM_REAL - 325)))) !== 0)) {
	                this.state = 1071;
	                this.sqlExpression();
	                this.state = 1076;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 1072;
	                    this.match(informixParser.COMMA);
	                    this.state = 1073;
	                    this.sqlExpression();
	                    this.state = 1078;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1081;
	            this.match(informixParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1083;
	            this.sqlFunction();

	            this.state = 1084;
	            this.match(informixParser.LPAREN);
	            this.state = 1085;
	            this.sqlExpression();
	            this.state = 1090;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1086;
	                this.match(informixParser.COMMA);
	                this.state = 1087;
	                this.sqlExpression();
	                this.state = 1092;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1093;
	            this.match(informixParser.RPAREN);
	            this.state = 1095;
	            this.sqlFunction();

	            this.state = 1096;
	            this.match(informixParser.LPAREN);
	            this.state = 1097;
	            this.sqlExpression();
	            this.state = 1102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1098;
	                this.match(informixParser.COMMA);
	                this.state = 1099;
	                this.sqlExpression();
	                this.state = 1104;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1105;
	            this.match(informixParser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1107;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.PLUS || _la===informixParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1108;
	            this.sqlExpression();
	            this.state = 1110;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.PLUS || _la===informixParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1111;
	            this.sqlExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1113;
	            this.match(informixParser.LPAREN);
	            this.state = 1114;
	            this.sqlExpression();
	            this.state = 1115;
	            this.match(informixParser.RPAREN);
	            this.state = 1117;
	            this.match(informixParser.LPAREN);
	            this.state = 1118;
	            this.sqlExpression();
	            this.state = 1119;
	            this.match(informixParser.RPAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1121;
	            this.sqlExpressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlExpressionList() {
	    let localctx = new SqlExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, informixParser.RULE_sqlExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1124;
	        this.match(informixParser.LPAREN);
	        this.state = 1125;
	        this.sqlExpression();
	        this.state = 1128; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1126;
	            this.match(informixParser.COMMA);
	            this.state = 1127;
	            this.sqlExpression();
	            this.state = 1130; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===informixParser.COMMA);
	        this.state = 1132;
	        this.match(informixParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlLiteral() {
	    let localctx = new SqlLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, informixParser.RULE_sqlLiteral);
	    try {
	        this.state = 1139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1134;
	            this.unsignedConstant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1135;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1136;
	            this.match(informixParser.NULL_);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1137;
	            this.match(informixParser.FALSE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1138;
	            this.match(informixParser.TRUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlVariable() {
	    let localctx = new SqlVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, informixParser.RULE_sqlVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1141;
	        this.columnsTableId();
	        this.state = 1142;
	        this.columnsTableId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlFunction() {
	    let localctx = new SqlFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, informixParser.RULE_sqlFunction);
	    try {
	        this.state = 1148;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1144;
	            this.numberFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1145;
	            this.charFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1146;
	            this.dateFunction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1147;
	            this.otherFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, informixParser.RULE_dateFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1150;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.DATE || _la===informixParser.DAY || _la===informixParser.MONTH || _la===informixParser.YEAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberFunction() {
	    let localctx = new NumberFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, informixParser.RULE_numberFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        this.match(informixParser.MOD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charFunction() {
	    let localctx = new CharFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, informixParser.RULE_charFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this.match(informixParser.LENGTH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupFunction() {
	    let localctx = new GroupFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, informixParser.RULE_groupFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.AVG || _la===informixParser.COUNT || _la===informixParser.MAX || _la===informixParser.MIN || _la===informixParser.SUM)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherFunction() {
	    let localctx = new OtherFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, informixParser.RULE_otherFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.DECODE:
	        case informixParser.NVL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1158;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.DECODE || _la===informixParser.NVL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1159;
	            this.constantIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlPseudoColumn() {
	    let localctx = new SqlPseudoColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, informixParser.RULE_sqlPseudoColumn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.match(informixParser.USER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalOperator() {
	    let localctx = new RelationalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, informixParser.RULE_relationalOperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 1175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.EQUAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1164;
	            this.match(informixParser.EQUAL);
	            break;
	        case informixParser.NOT_EQUAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1165;
	            this.match(informixParser.NOT_EQUAL);
	            break;
	        case informixParser.LE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1166;
	            this.match(informixParser.LE);
	            break;
	        case informixParser.LT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1167;
	            this.match(informixParser.LT);
	            break;
	        case informixParser.GE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1168;
	            this.match(informixParser.GE);
	            break;
	        case informixParser.GT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1169;
	            this.match(informixParser.GT);
	            break;
	        case informixParser.LIKE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1170;
	            this.match(informixParser.LIKE);
	            break;
	        case informixParser.MATCHES:
	        case informixParser.NOT:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 1171;
	                this.match(informixParser.NOT);
	            }

	            this.state = 1174;
	            this.match(informixParser.MATCHES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifCondition() {
	    let localctx = new IfConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, informixParser.RULE_ifCondition);
	    try {
	        this.state = 1188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1177;
	            this.match(informixParser.TRUE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1178;
	            this.match(informixParser.FALSE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1179;
	            this.ifCondition2();
	            this.state = 1185;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1180;
	                    this.relationalOperator();
	                    this.state = 1181;
	                    this.ifCondition2(); 
	                }
	                this.state = 1187;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifCondition2() {
	    let localctx = new IfCondition2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, informixParser.RULE_ifCondition2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.ifLogicalTerm();
	        this.state = 1195;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1191;
	                this.match(informixParser.OR);
	                this.state = 1192;
	                this.ifLogicalTerm(); 
	            }
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifLogicalTerm() {
	    let localctx = new IfLogicalTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, informixParser.RULE_ifLogicalTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1198;
	        this.ifLogicalFactor();
	        this.state = 1203;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1199;
	                this.match(informixParser.AND);
	                this.state = 1200;
	                this.ifLogicalFactor(); 
	            }
	            this.state = 1205;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, informixParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.simpleExpression();
	        this.state = 1212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.CLIPPED || _la===informixParser.USING) {
	            this.state = 1210;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.CLIPPED:
	                this.state = 1207;
	                this.match(informixParser.CLIPPED);
	                break;
	            case informixParser.USING:
	                this.state = 1208;
	                this.match(informixParser.USING);
	                this.state = 1209;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifLogicalFactor() {
	    let localctx = new IfLogicalFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, informixParser.RULE_ifLogicalFactor);
	    try {
	        this.state = 1229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1216;
	            this.match(informixParser.NOT);
	            this.state = 1217;
	            this.ifCondition();
	            this.state = 1219;
	            this.match(informixParser.NOT);
	            this.state = 1220;
	            this.ifCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1222;
	            this.match(informixParser.LPAREN);
	            this.state = 1223;
	            this.ifCondition();
	            this.state = 1224;
	            this.match(informixParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1226;
	            this.simpleExpression();
	            this.state = 1227;
	            this.simpleExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleExpression() {
	    let localctx = new SimpleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, informixParser.RULE_simpleExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        if(la_===1) {
	            this.state = 1231;
	            this.sign();

	        }
	        this.state = 1234;
	        this.term();
	        this.state = 1240;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1235;
	                this.addingOperator();
	                this.state = 1236;
	                this.term(); 
	            }
	            this.state = 1242;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addingOperator() {
	    let localctx = new AddingOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, informixParser.RULE_addingOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.PLUS || _la===informixParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, informixParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.factor();
	        this.state = 1251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.MOD || ((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (informixParser.STAR - 314)) | (1 << (informixParser.SLASH - 314)) | (1 << (informixParser.DIV - 314)))) !== 0)) {
	            this.state = 1246;
	            this.multiplyingOperator();
	            this.state = 1247;
	            this.factor();
	            this.state = 1253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyingOperator() {
	    let localctx = new MultiplyingOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, informixParser.RULE_multiplyingOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.MOD || ((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (informixParser.STAR - 314)) | (1 << (informixParser.SLASH - 314)) | (1 << (informixParser.DIV - 314)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, informixParser.RULE_factor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1257;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 1256;
	                this.match(informixParser.GROUP);

	            }
	            this.state = 1259;
	            this.functionDesignator();
	            break;

	        case 2:
	            this.state = 1260;
	            this.variable();
	            break;

	        case 3:
	            this.state = 1261;
	            this.constant();
	            break;

	        case 4:
	            this.state = 1262;
	            this.match(informixParser.LPAREN);
	            this.state = 1263;
	            this.expression();
	            this.state = 1264;
	            this.match(informixParser.RPAREN);
	            break;

	        case 5:
	            this.state = 1266;
	            this.match(informixParser.NOT);
	            this.state = 1267;
	            this.factor();
	            break;

	        }
	        this.state = 1272;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 1270;
	            this.match(informixParser.UNITS);
	            this.state = 1271;
	            this.unitType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDesignator() {
	    let localctx = new FunctionDesignatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, informixParser.RULE_functionDesignator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.functionIdentifier();
	        this.state = 1287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1275;
	            this.match(informixParser.LPAREN);
	            this.state = 1284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.ACCEPT) | (1 << informixParser.ASCII) | (1 << informixParser.AVG))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (informixParser.COLUMN - 43)) | (1 << (informixParser.COUNT - 43)) | (1 << (informixParser.CURRENT - 43)) | (1 << (informixParser.DATE - 43)) | (1 << (informixParser.DAY - 43)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (informixParser.EXTEND - 98)) | (1 << (informixParser.FALSE - 98)) | (1 << (informixParser.FIRST - 98)) | (1 << (informixParser.FOUND - 98)) | (1 << (informixParser.GROUP - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (informixParser.HIDE - 130)) | (1 << (informixParser.INDEX - 130)) | (1 << (informixParser.INFIELD - 130)) | (1 << (informixParser.INT_FLAG - 130)) | (1 << (informixParser.INTERRUPT - 130)) | (1 << (informixParser.LAST - 130)) | (1 << (informixParser.LENGTH - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (informixParser.LINENO - 162)) | (1 << (informixParser.MAX - 162)) | (1 << (informixParser.MDY - 162)) | (1 << (informixParser.MIN - 162)) | (1 << (informixParser.MONTH - 162)) | (1 << (informixParser.NO - 162)) | (1 << (informixParser.NOT - 162)) | (1 << (informixParser.NOTFOUND - 162)))) !== 0) || ((((_la - 195)) & ~0x1f) == 0 && ((1 << (_la - 195)) & ((1 << (informixParser.NULL_ - 195)) | (1 << (informixParser.PAGENO - 195)) | (1 << (informixParser.PREPARE - 195)) | (1 << (informixParser.REAL - 195)))) !== 0) || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.SUM - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)) | (1 << (informixParser.YEAR - 290)) | (1 << (informixParser.PLUS - 290)) | (1 << (informixParser.MINUS - 290)) | (1 << (informixParser.STAR - 290)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (informixParser.LPAREN - 325)) | (1 << (informixParser.IDENT - 325)) | (1 << (informixParser.STRING_LITERAL - 325)) | (1 << (informixParser.NUM_INT - 325)) | (1 << (informixParser.NUM_REAL - 325)))) !== 0)) {
	                this.state = 1276;
	                this.actualParameter();
	                this.state = 1281;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 1277;
	                    this.match(informixParser.COMMA);
	                    this.state = 1278;
	                    this.actualParameter();
	                    this.state = 1283;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1286;
	            this.match(informixParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionIdentifier() {
	    let localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, informixParser.RULE_functionIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1289;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.AVG || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (informixParser.COLUMN - 43)) | (1 << (informixParser.COUNT - 43)) | (1 << (informixParser.DATE - 43)) | (1 << (informixParser.DAY - 43)))) !== 0) || _la===informixParser.EXTEND || _la===informixParser.INFIELD || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (informixParser.MAX - 175)) | (1 << (informixParser.MDY - 175)) | (1 << (informixParser.MIN - 175)) | (1 << (informixParser.MONTH - 175)))) !== 0) || _la===informixParser.PREPARE || ((((_la - 266)) & ~0x1f) == 0 && ((1 << (_la - 266)) & ((1 << (informixParser.SUM - 266)) | (1 << (informixParser.TIME - 266)) | (1 << (informixParser.TODAY - 266)) | (1 << (informixParser.WEEKDAY - 266)))) !== 0) || _la===informixParser.YEAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1290;
	            this.constantIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedConstant() {
	    let localctx = new UnsignedConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, informixParser.RULE_unsignedConstant);
	    try {
	        this.state = 1297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1293;
	            this.unsignedNumber();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1294;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1295;
	            this.constantIdentifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1296;
	            this.match(informixParser.NULL_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, informixParser.RULE_constant);
	    try {
	        this.state = 1305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1299;
	            this.numericConstant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1300;
	            this.constantIdentifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1301;
	            this.sign();
	            this.state = 1302;
	            this.identifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1304;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericConstant() {
	    let localctx = new NumericConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, informixParser.RULE_numericConstant);
	    try {
	        this.state = 1311;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1307;
	            this.unsignedNumber();
	            break;
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1308;
	            this.sign();
	            this.state = 1309;
	            this.unsignedNumber();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, informixParser.RULE_variable);
	    try {
	        this.state = 1315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1313;
	            this.entireVariable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1314;
	            this.componentVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entireVariable() {
	    let localctx = new EntireVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, informixParser.RULE_entireVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1317;
	        this.variableIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableIdentifier() {
	    let localctx = new VariableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, informixParser.RULE_variableIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1319;
	        this.constantIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexingVariable() {
	    let localctx = new IndexingVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, informixParser.RULE_indexingVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.match(informixParser.LBRACK);
	        this.state = 1322;
	        this.expression();
	        this.state = 1327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1323;
	            this.match(informixParser.COMMA);
	            this.state = 1324;
	            this.expression();
	            this.state = 1329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1330;
	        this.match(informixParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentVariable() {
	    let localctx = new ComponentVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, informixParser.RULE_componentVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.recordVariable();
	        this.state = 1334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.LBRACK) {
	            this.state = 1333;
	            this.indexingVariable();
	        }

	        this.state = 1344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        if(la_===1) {
	            this.state = 1336;
	            this.match(informixParser.DOT);
	            this.state = 1337;
	            this.match(informixParser.STAR);

	        } else if(la_===2) {
	            this.state = 1338;
	            this.match(informixParser.DOT);
	            this.state = 1339;
	            this.componentVariable();
	            this.state = 1342;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1340;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.THROUGH || _la===informixParser.THRU)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1341;
	                this.componentVariable();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariable() {
	    let localctx = new RecordVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, informixParser.RULE_recordVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.constantIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldIdentifier() {
	    let localctx = new FieldIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, informixParser.RULE_fieldIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this.constantIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structuredStatement() {
	    let localctx = new StructuredStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, informixParser.RULE_structuredStatement);
	    try {
	        this.state = 1352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CASE:
	        case informixParser.IF:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1350;
	            this.conditionalStatement();
	            break;
	        case informixParser.FOR:
	        case informixParser.FOREACH:
	        case informixParser.WHILE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1351;
	            this.repetetiveStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalStatement() {
	    let localctx = new ConditionalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, informixParser.RULE_conditionalStatement);
	    try {
	        this.state = 1356;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.IF:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.ifStatement();
	            break;
	        case informixParser.CASE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.caseStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, informixParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1358;
	        this.match(informixParser.IF);
	        this.state = 1359;
	        this.ifCondition();
	        this.state = 1360;
	        this.match(informixParser.THEN);
	        this.state = 1362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 1361;
	            this.codeBlock();
	        }

	        this.state = 1368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ELSE) {
	            this.state = 1364;
	            this.match(informixParser.ELSE);
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	                this.state = 1365;
	                this.codeBlock();
	            }

	        }

	        this.state = 1370;
	        this.match(informixParser.END);
	        this.state = 1371;
	        this.match(informixParser.IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repetetiveStatement() {
	    let localctx = new RepetetiveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, informixParser.RULE_repetetiveStatement);
	    try {
	        this.state = 1376;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.WHILE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1373;
	            this.whileStatement();
	            break;
	        case informixParser.FOREACH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1374;
	            this.forEachStatement();
	            break;
	        case informixParser.FOR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1375;
	            this.forStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, informixParser.RULE_whileStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1378;
	        this.match(informixParser.WHILE);
	        this.state = 1379;
	        this.ifCondition();
	        this.state = 1381;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 1380;
	            this.codeBlock();
	        }

	        this.state = 1383;
	        this.match(informixParser.END);
	        this.state = 1384;
	        this.match(informixParser.WHILE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, informixParser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1386;
	        this.match(informixParser.FOR);
	        this.state = 1387;
	        this.controlVariable();
	        this.state = 1388;
	        this.match(informixParser.EQUAL);
	        this.state = 1389;
	        this.forList();
	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.STEP) {
	            this.state = 1390;
	            this.match(informixParser.STEP);
	            this.state = 1391;
	            this.numericConstant();
	        }

	        this.state = 1394;
	        this.eol();
	        this.state = 1396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 1395;
	            this.codeBlock();
	        }

	        this.state = 1398;
	        this.match(informixParser.END);
	        this.state = 1399;
	        this.match(informixParser.FOR);
	        this.state = 1400;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forList() {
	    let localctx = new ForListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, informixParser.RULE_forList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.initialValue();
	        this.state = 1403;
	        this.match(informixParser.TO);
	        this.state = 1404;
	        this.finalValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controlVariable() {
	    let localctx = new ControlVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, informixParser.RULE_controlVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialValue() {
	    let localctx = new InitialValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, informixParser.RULE_initialValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finalValue() {
	    let localctx = new FinalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, informixParser.RULE_finalValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forEachStatement() {
	    let localctx = new ForEachStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, informixParser.RULE_forEachStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.match(informixParser.FOREACH);
	        this.state = 1413;
	        this.identifier();
	        this.state = 1416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.USING) {
	            this.state = 1414;
	            this.match(informixParser.USING);
	            this.state = 1415;
	            this.variableList();
	        }

	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.INTO) {
	            this.state = 1418;
	            this.match(informixParser.INTO);
	            this.state = 1419;
	            this.variableList();
	        }

	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WITH) {
	            this.state = 1422;
	            this.match(informixParser.WITH);
	            this.state = 1423;
	            this.match(informixParser.REOPTIMIZATION);
	        }

	        this.state = 1426;
	        this.eol();
	        this.state = 1428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 1427;
	            this.codeBlock();
	        }

	        this.state = 1430;
	        this.match(informixParser.END);
	        this.state = 1431;
	        this.match(informixParser.FOREACH);
	        this.state = 1432;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableList() {
	    let localctx = new VariableListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, informixParser.RULE_variableList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.variable();
	        this.state = 1439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1435;
	            this.match(informixParser.COMMA);
	            this.state = 1436;
	            this.variable();
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableOrConstantList() {
	    let localctx = new VariableOrConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, informixParser.RULE_variableOrConstantList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.expression();
	        this.state = 1447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1443;
	            this.match(informixParser.COMMA);
	            this.state = 1444;
	            this.expression();
	            this.state = 1449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStatement() {
	    let localctx = new CaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, informixParser.RULE_caseStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1450;
	            this.match(informixParser.CASE);
	            this.state = 1451;
	            this.expression();
	            this.state = 1459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.WHEN) {
	                this.state = 1452;
	                this.match(informixParser.WHEN);
	                this.state = 1453;
	                this.expression();
	                this.state = 1455;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	                    this.state = 1454;
	                    this.codeBlock();
	                }

	                this.state = 1461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.OTHERWISE) {
	                this.state = 1462;
	                this.match(informixParser.OTHERWISE);
	                this.state = 1464;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	                    this.state = 1463;
	                    this.codeBlock();
	                }

	            }

	            this.state = 1468;
	            this.match(informixParser.END);
	            this.state = 1469;
	            this.match(informixParser.CASE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1471;
	            this.match(informixParser.CASE);
	            this.state = 1478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.WHEN) {
	                this.state = 1472;
	                this.match(informixParser.WHEN);
	                this.state = 1473;
	                this.ifCondition();
	                this.state = 1474;
	                this.codeBlock();
	                this.state = 1480;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.OTHERWISE) {
	                this.state = 1481;
	                this.match(informixParser.OTHERWISE);
	                this.state = 1482;
	                this.codeBlock();
	            }

	            this.state = 1485;
	            this.match(informixParser.END);
	            this.state = 1486;
	            this.match(informixParser.CASE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherFGLStatement() {
	    let localctx = new OtherFGLStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, informixParser.RULE_otherFGLStatement);
	    try {
	        this.state = 1493;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CONTINUE:
	        case informixParser.EXIT:
	        case informixParser.GOTO:
	        case informixParser.RETURN:
	        case informixParser.RUN:
	        case informixParser.SLEEP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1489;
	            this.otherProgramFlowStatement();
	            break;
	        case informixParser.ALLOCATE:
	        case informixParser.DEALLOCATE:
	        case informixParser.FREE:
	        case informixParser.INITIALIZE:
	        case informixParser.LOCATE:
	        case informixParser.RESIZE:
	        case informixParser.VALIDATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1490;
	            this.otherStorageStatement();
	            break;
	        case informixParser.FINISH:
	        case informixParser.NEED:
	        case informixParser.OUTPUT:
	        case informixParser.PAUSE:
	        case informixParser.PRINT:
	        case informixParser.SKIP2:
	        case informixParser.START:
	        case informixParser.TERMINATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1491;
	            this.reportStatement();
	            break;
	        case informixParser.CLEAR:
	        case informixParser.CLOSE:
	        case informixParser.CONSTRUCT:
	        case informixParser.CURRENT:
	        case informixParser.DISPLAY:
	        case informixParser.ERROR:
	        case informixParser.INPUT:
	        case informixParser.MENU:
	        case informixParser.MESSAGE:
	        case informixParser.OPEN:
	        case informixParser.OPTIONS:
	        case informixParser.PROMPT:
	        case informixParser.SCROLL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1492;
	            this.screenStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherProgramFlowStatement() {
	    let localctx = new OtherProgramFlowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, informixParser.RULE_otherProgramFlowStatement);
	    try {
	        this.state = 1502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.RUN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1495;
	            this.runStatement();
	            break;
	        case informixParser.GOTO:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1496;
	            this.gotoStatement();
	            break;
	        case informixParser.SLEEP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1497;
	            this.match(informixParser.SLEEP);
	            this.state = 1498;
	            this.expression();
	            break;
	        case informixParser.EXIT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1499;
	            this.exitStatements();
	            break;
	        case informixParser.CONTINUE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1500;
	            this.continueStatements();
	            break;
	        case informixParser.RETURN:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1501;
	            this.returnStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitTypes() {
	    let localctx = new ExitTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, informixParser.RULE_exitTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.CASE || _la===informixParser.CONSTRUCT || _la===informixParser.DISPLAY || _la===informixParser.FOR || _la===informixParser.FOREACH || _la===informixParser.INPUT || _la===informixParser.MENU || _la===informixParser.REPORT || _la===informixParser.WHILE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStatements() {
	    let localctx = new ExitStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, informixParser.RULE_exitStatements);
	    try {
	        this.state = 1517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1506;
	            this.match(informixParser.EXIT);
	            this.state = 1507;
	            this.exitTypes();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1508;
	            this.match(informixParser.EXIT);
	            this.state = 1509;
	            this.match(informixParser.PROGRAM);
	            this.state = 1515;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	            if(la_===1) {
	                this.state = 1510;
	                this.match(informixParser.LPAREN);
	                this.state = 1511;
	                this.expression();
	                this.state = 1512;
	                this.match(informixParser.RPAREN);

	            } else if(la_===2) {
	                this.state = 1514;
	                this.expression();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatements() {
	    let localctx = new ContinueStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, informixParser.RULE_continueStatements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.match(informixParser.CONTINUE);
	        this.state = 1520;
	        this.exitTypes();
	        this.state = 1521;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherStorageStatement() {
	    let localctx = new OtherStorageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, informixParser.RULE_otherStorageStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ALLOCATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1523;
	            this.match(informixParser.ALLOCATE);
	            this.state = 1524;
	            this.match(informixParser.ARRAY);
	            this.state = 1525;
	            this.identifier();
	            this.state = 1526;
	            this.arrayIndexer();
	            break;
	        case informixParser.LOCATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1528;
	            this.match(informixParser.LOCATE);
	            this.state = 1529;
	            this.variableList();
	            this.state = 1530;
	            this.match(informixParser.IN);
	            this.state = 1537;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.MEMORY:
	                this.state = 1531;
	                this.match(informixParser.MEMORY);
	                break;
	            case informixParser.FILE:
	                this.state = 1532;
	                this.match(informixParser.FILE);
	                this.state = 1535;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	                if(la_===1) {
	                    this.state = 1533;
	                    this.variable();

	                } else if(la_===2) {
	                    this.state = 1534;
	                    this.string();

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case informixParser.DEALLOCATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1539;
	            this.match(informixParser.DEALLOCATE);
	            this.state = 1540;
	            this.match(informixParser.ARRAY);
	            this.state = 1541;
	            this.identifier();
	            break;
	        case informixParser.RESIZE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1542;
	            this.match(informixParser.RESIZE);
	            this.state = 1543;
	            this.match(informixParser.ARRAY);
	            this.state = 1544;
	            this.identifier();
	            this.state = 1545;
	            this.arrayIndexer();
	            break;
	        case informixParser.FREE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1547;
	            this.match(informixParser.FREE);
	            this.state = 1548;
	            this.variable();
	            this.state = 1553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1549;
	                this.match(informixParser.COMMA);
	                this.state = 1550;
	                this.variable();
	                this.state = 1555;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case informixParser.INITIALIZE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1556;
	            this.match(informixParser.INITIALIZE);
	            this.state = 1557;
	            this.variable();
	            this.state = 1562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1558;
	                this.match(informixParser.COMMA);
	                this.state = 1559;
	                this.variable();
	                this.state = 1564;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1576;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.TO:
	                this.state = 1565;
	                this.match(informixParser.TO);
	                this.state = 1566;
	                this.match(informixParser.NULL_);
	                break;
	            case informixParser.LIKE:
	                this.state = 1567;
	                this.match(informixParser.LIKE);
	                this.state = 1568;
	                this.expression();
	                this.state = 1573;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 1569;
	                    this.match(informixParser.COMMA);
	                    this.state = 1570;
	                    this.expression();
	                    this.state = 1575;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case informixParser.VALIDATE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1578;
	            this.match(informixParser.VALIDATE);
	            this.state = 1579;
	            this.variable();
	            this.state = 1584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1580;
	                this.match(informixParser.COMMA);
	                this.state = 1581;
	                this.variable();
	                this.state = 1586;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1587;
	            this.match(informixParser.LIKE);
	            this.state = 1588;
	            this.expression();
	            this.state = 1593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1589;
	                this.match(informixParser.COMMA);
	                this.state = 1590;
	                this.expression();
	                this.state = 1595;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printExpressionItem() {
	    let localctx = new PrintExpressionItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, informixParser.RULE_printExpressionItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 1617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1598;
	            this.match(informixParser.COLUMN);
	            this.state = 1599;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1600;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.LINENO || _la===informixParser.PAGENO)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1601;
	            this.match(informixParser.BYTE);
	            this.state = 1602;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1603;
	            this.match(informixParser.TEXT);
	            this.state = 1604;
	            this.variable();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1605;
	            this.expression();
	            this.state = 1607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.SPACE || _la===informixParser.SPACES) {
	                this.state = 1606;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.SPACE || _la===informixParser.SPACES)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.WORDWRAP) {
	                this.state = 1609;
	                this.match(informixParser.WORDWRAP);
	                this.state = 1613;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.RIGHT) {
	                    this.state = 1610;
	                    this.match(informixParser.RIGHT);
	                    this.state = 1611;
	                    this.match(informixParser.MARGIN);
	                    this.state = 1612;
	                    this.numericConstant();
	                }

	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printExpressionList() {
	    let localctx = new PrintExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, informixParser.RULE_printExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1619;
	        this.printExpressionItem();
	        this.state = 1624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1620;
	            this.match(informixParser.COMMA);
	            this.state = 1621;
	            this.printExpressionItem();
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportStatement() {
	    let localctx = new ReportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, informixParser.RULE_reportStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1718;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1627;
	            this.match(informixParser.START);
	            this.state = 1628;
	            this.match(informixParser.REPORT);
	            this.state = 1629;
	            this.constantIdentifier();
	            this.state = 1637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.TO) {
	                this.state = 1630;
	                this.match(informixParser.TO);
	                this.state = 1635;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case informixParser.ACCEPT:
	                case informixParser.ASCII:
	                case informixParser.AVG:
	                case informixParser.COLUMN:
	                case informixParser.COUNT:
	                case informixParser.CURRENT:
	                case informixParser.DATE:
	                case informixParser.DAY:
	                case informixParser.EXTEND:
	                case informixParser.FALSE:
	                case informixParser.FIRST:
	                case informixParser.FOUND:
	                case informixParser.GROUP:
	                case informixParser.HIDE:
	                case informixParser.INDEX:
	                case informixParser.INFIELD:
	                case informixParser.INT_FLAG:
	                case informixParser.INTERRUPT:
	                case informixParser.LAST:
	                case informixParser.LENGTH:
	                case informixParser.LINENO:
	                case informixParser.MAX:
	                case informixParser.MDY:
	                case informixParser.MIN:
	                case informixParser.MONTH:
	                case informixParser.NO:
	                case informixParser.NOT:
	                case informixParser.NOTFOUND:
	                case informixParser.NULL_:
	                case informixParser.PAGENO:
	                case informixParser.PREPARE:
	                case informixParser.REAL:
	                case informixParser.SIZE:
	                case informixParser.SQL:
	                case informixParser.STATUS:
	                case informixParser.SUM:
	                case informixParser.TEMP:
	                case informixParser.TIME:
	                case informixParser.TODAY:
	                case informixParser.TRUE:
	                case informixParser.USER:
	                case informixParser.WEEKDAY:
	                case informixParser.WAIT:
	                case informixParser.WORK:
	                case informixParser.YEAR:
	                case informixParser.PLUS:
	                case informixParser.MINUS:
	                case informixParser.LPAREN:
	                case informixParser.IDENT:
	                case informixParser.STRING_LITERAL:
	                case informixParser.NUM_INT:
	                case informixParser.NUM_REAL:
	                    this.state = 1631;
	                    this.expression();
	                    break;
	                case informixParser.PIPE:
	                    this.state = 1632;
	                    this.match(informixParser.PIPE);
	                    this.state = 1633;
	                    this.expression();
	                    break;
	                case informixParser.PRINTER:
	                    this.state = 1634;
	                    this.match(informixParser.PRINTER);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.WITH) {
	                this.state = 1639;
	                this.match(informixParser.WITH);
	                this.state = 1661;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1659;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	                        switch(la_) {
	                        case 1:
	                            this.state = 1640;
	                            this.match(informixParser.LEFT);
	                            this.state = 1641;
	                            this.match(informixParser.MARGIN);
	                            this.state = 1642;
	                            this.numericConstant();
	                            break;

	                        case 2:
	                            this.state = 1643;
	                            this.match(informixParser.RIGHT);
	                            this.state = 1644;
	                            this.match(informixParser.MARGIN);
	                            this.state = 1645;
	                            this.numericConstant();
	                            break;

	                        case 3:
	                            this.state = 1646;
	                            this.match(informixParser.TOP);
	                            this.state = 1647;
	                            this.match(informixParser.MARGIN);
	                            this.state = 1648;
	                            this.numericConstant();
	                            break;

	                        case 4:
	                            this.state = 1649;
	                            this.match(informixParser.BOTTOM);
	                            this.state = 1650;
	                            this.match(informixParser.MARGIN);
	                            this.state = 1651;
	                            this.numericConstant();
	                            break;

	                        case 5:
	                            this.state = 1652;
	                            this.match(informixParser.PAGE);
	                            this.state = 1653;
	                            this.match(informixParser.LENGTH);
	                            this.state = 1654;
	                            this.numericConstant();
	                            break;

	                        case 6:
	                            this.state = 1655;
	                            this.match(informixParser.TOP);
	                            this.state = 1656;
	                            this.match(informixParser.OF);
	                            this.state = 1657;
	                            this.match(informixParser.PAGE);
	                            this.state = 1658;
	                            this.string();
	                            break;

	                        } 
	                    }
	                    this.state = 1663;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	                }

	            }

	            break;
	        case informixParser.TERMINATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1666;
	            this.match(informixParser.TERMINATE);
	            this.state = 1667;
	            this.match(informixParser.REPORT);
	            this.state = 1668;
	            this.constantIdentifier();
	            break;
	        case informixParser.FINISH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1669;
	            this.match(informixParser.FINISH);
	            this.state = 1670;
	            this.match(informixParser.REPORT);
	            this.state = 1671;
	            this.constantIdentifier();
	            break;
	        case informixParser.PAUSE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1672;
	            this.match(informixParser.PAUSE);
	            this.state = 1674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.STRING_LITERAL) {
	                this.state = 1673;
	                this.string();
	            }

	            break;
	        case informixParser.NEED:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1676;
	            this.match(informixParser.NEED);
	            this.state = 1677;
	            this.expression();
	            this.state = 1678;
	            this.match(informixParser.LINES);
	            break;
	        case informixParser.PRINT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1680;
	            this.match(informixParser.PRINT);
	            this.state = 1689;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	            if(la_===1) {
	                this.state = 1682;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	                if(la_===1) {
	                    this.state = 1681;
	                    this.printExpressionList();

	                }
	                this.state = 1685;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.SEMI) {
	                    this.state = 1684;
	                    this.match(informixParser.SEMI);
	                }


	            } else if(la_===2) {
	                this.state = 1687;
	                this.match(informixParser.FILE);
	                this.state = 1688;
	                this.string();

	            }
	            break;
	        case informixParser.SKIP2:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1691;
	            this.match(informixParser.SKIP2);
	            this.state = 1699;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.AVG:
	            case informixParser.COLUMN:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.DATE:
	            case informixParser.DAY:
	            case informixParser.EXTEND:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INFIELD:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MAX:
	            case informixParser.MDY:
	            case informixParser.MIN:
	            case informixParser.MONTH:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.PREPARE:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.SUM:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.YEAR:
	            case informixParser.PLUS:
	            case informixParser.MINUS:
	            case informixParser.LPAREN:
	            case informixParser.IDENT:
	            case informixParser.STRING_LITERAL:
	            case informixParser.NUM_INT:
	            case informixParser.NUM_REAL:
	                this.state = 1692;
	                this.expression();
	                this.state = 1693;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.LINE || _la===informixParser.LINES)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case informixParser.TO:
	                this.state = 1695;
	                this.match(informixParser.TO);
	                this.state = 1696;
	                this.match(informixParser.TOP);
	                this.state = 1697;
	                this.match(informixParser.OF);
	                this.state = 1698;
	                this.match(informixParser.PAGE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case informixParser.OUTPUT:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1701;
	            this.match(informixParser.OUTPUT);
	            this.state = 1702;
	            this.match(informixParser.TO);
	            this.state = 1703;
	            this.match(informixParser.REPORT);
	            this.state = 1704;
	            this.constantIdentifier();
	            this.state = 1705;
	            this.match(informixParser.LPAREN);
	            this.state = 1714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.ACCEPT) | (1 << informixParser.ASCII) | (1 << informixParser.AVG))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (informixParser.COLUMN - 43)) | (1 << (informixParser.COUNT - 43)) | (1 << (informixParser.CURRENT - 43)) | (1 << (informixParser.DATE - 43)) | (1 << (informixParser.DAY - 43)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (informixParser.EXTEND - 98)) | (1 << (informixParser.FALSE - 98)) | (1 << (informixParser.FIRST - 98)) | (1 << (informixParser.FOUND - 98)) | (1 << (informixParser.GROUP - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (informixParser.HIDE - 130)) | (1 << (informixParser.INDEX - 130)) | (1 << (informixParser.INFIELD - 130)) | (1 << (informixParser.INT_FLAG - 130)) | (1 << (informixParser.INTERRUPT - 130)) | (1 << (informixParser.LAST - 130)) | (1 << (informixParser.LENGTH - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (informixParser.LINENO - 162)) | (1 << (informixParser.MAX - 162)) | (1 << (informixParser.MDY - 162)) | (1 << (informixParser.MIN - 162)) | (1 << (informixParser.MONTH - 162)) | (1 << (informixParser.NO - 162)) | (1 << (informixParser.NOT - 162)) | (1 << (informixParser.NOTFOUND - 162)))) !== 0) || ((((_la - 195)) & ~0x1f) == 0 && ((1 << (_la - 195)) & ((1 << (informixParser.NULL_ - 195)) | (1 << (informixParser.PAGENO - 195)) | (1 << (informixParser.PREPARE - 195)) | (1 << (informixParser.REAL - 195)))) !== 0) || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.SUM - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)) | (1 << (informixParser.YEAR - 290)) | (1 << (informixParser.PLUS - 290)) | (1 << (informixParser.MINUS - 290)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (informixParser.LPAREN - 325)) | (1 << (informixParser.IDENT - 325)) | (1 << (informixParser.STRING_LITERAL - 325)) | (1 << (informixParser.NUM_INT - 325)) | (1 << (informixParser.NUM_REAL - 325)))) !== 0)) {
	                this.state = 1706;
	                this.expression();
	                this.state = 1711;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 1707;
	                    this.match(informixParser.COMMA);
	                    this.state = 1708;
	                    this.expression();
	                    this.state = 1713;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1716;
	            this.match(informixParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldName() {
	    let localctx = new FieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, informixParser.RULE_fieldName);
	    var _la = 0; // Token type
	    try {
	        this.state = 1747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	            if(la_===1) {
	                this.state = 1720;
	                this.identifier();
	                this.state = 1725;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.LBRACK) {
	                    this.state = 1721;
	                    this.match(informixParser.LBRACK);
	                    this.state = 1722;
	                    this.numericConstant();
	                    this.state = 1723;
	                    this.match(informixParser.RBRACK);
	                }

	                this.state = 1727;
	                this.match(informixParser.DOT);

	            }
	            this.state = 1731;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1732;
	            this.identifier();
	            this.state = 1737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LBRACK) {
	                this.state = 1733;
	                this.match(informixParser.LBRACK);
	                this.state = 1734;
	                this.numericConstant();
	                this.state = 1735;
	                this.match(informixParser.RBRACK);
	            }

	            this.state = 1739;
	            this.match(informixParser.DOT);
	            this.state = 1745;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.STAR:
	                this.state = 1740;
	                this.match(informixParser.STAR);
	                break;
	            case informixParser.IDENT:
	                this.state = 1741;
	                this.identifier();
	                this.state = 1743;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.THROUGH || _la===informixParser.THRU) {
	                    this.state = 1742;
	                    this.thruNotation();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thruNotation() {
	    let localctx = new ThruNotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, informixParser.RULE_thruNotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1749;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.THROUGH || _la===informixParser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.SAME) {
	            this.state = 1750;
	            this.match(informixParser.SAME);
	            this.state = 1751;
	            this.match(informixParser.DOT);
	        }

	        this.state = 1754;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, informixParser.RULE_fieldList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.expression();
	        this.state = 1761;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1757;
	                this.match(informixParser.COMMA);
	                this.state = 1758;
	                this.expression(); 
	            }
	            this.state = 1763;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyList() {
	    let localctx = new KeyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, informixParser.RULE_keyList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.expression();
	        this.state = 1769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1765;
	            this.match(informixParser.COMMA);
	            this.state = 1766;
	            this.expression();
	            this.state = 1771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructEvents() {
	    let localctx = new ConstructEventsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, informixParser.RULE_constructEvents);
	    try {
	        this.state = 1788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1772;
	            this.match(informixParser.BEFORE);
	            this.state = 1773;
	            this.match(informixParser.CONSTRUCT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1774;
	            this.match(informixParser.AFTER);
	            this.state = 1775;
	            this.match(informixParser.CONSTRUCT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1776;
	            this.match(informixParser.BEFORE);
	            this.state = 1777;
	            this.match(informixParser.FIELD);
	            this.state = 1778;
	            this.fieldList();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1779;
	            this.match(informixParser.AFTER);
	            this.state = 1780;
	            this.match(informixParser.FIELD);
	            this.state = 1781;
	            this.fieldList();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1782;
	            this.match(informixParser.ON);
	            this.state = 1783;
	            this.match(informixParser.KEY);
	            this.state = 1784;
	            this.match(informixParser.LPAREN);
	            this.state = 1785;
	            this.keyList();
	            this.state = 1786;
	            this.match(informixParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructInsideStatement() {
	    let localctx = new ConstructInsideStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, informixParser.RULE_constructInsideStatement);
	    try {
	        this.state = 1804;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NEXT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1790;
	            this.match(informixParser.NEXT);
	            this.state = 1791;
	            this.match(informixParser.FIELD);
	            this.state = 1795;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.IDENT:
	                this.state = 1792;
	                this.fieldName();
	                break;
	            case informixParser.NEXT:
	                this.state = 1793;
	                this.match(informixParser.NEXT);
	                break;
	            case informixParser.PREVIOUS:
	                this.state = 1794;
	                this.match(informixParser.PREVIOUS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1797;
	            this.eol();
	            break;
	        case informixParser.CONTINUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1798;
	            this.match(informixParser.CONTINUE);
	            this.state = 1799;
	            this.match(informixParser.CONSTRUCT);
	            this.state = 1800;
	            this.eol();
	            break;
	        case informixParser.EXIT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1801;
	            this.match(informixParser.EXIT);
	            this.state = 1802;
	            this.match(informixParser.CONSTRUCT);
	            this.state = 1803;
	            this.eol();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialAttribute() {
	    let localctx = new SpecialAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, informixParser.RULE_specialAttribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1806;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.BLINK || _la===informixParser.REVERSE || _la===informixParser.UNDERLINE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, informixParser.RULE_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.BLACK) | (1 << informixParser.BLUE) | (1 << informixParser.BOLD))) !== 0) || _la===informixParser.CYAN || _la===informixParser.DIM || _la===informixParser.GREEN || _la===informixParser.INVISIBLE || _la===informixParser.MAGENTA || _la===informixParser.NORMAL || _la===informixParser.RED || _la===informixParser.WHITE || _la===informixParser.YELLOW) {
	            this.state = 1808;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.BLACK) | (1 << informixParser.BLUE) | (1 << informixParser.BOLD))) !== 0) || _la===informixParser.CYAN || _la===informixParser.DIM || _la===informixParser.GREEN || _la===informixParser.INVISIBLE || _la===informixParser.MAGENTA || _la===informixParser.NORMAL || _la===informixParser.RED || _la===informixParser.WHITE || _la===informixParser.YELLOW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1811;
	        this.specialAttribute();
	        this.state = 1816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1812;
	            this.match(informixParser.COMMA);
	            this.state = 1813;
	            this.specialAttribute();
	            this.state = 1818;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeList() {
	    let localctx = new AttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, informixParser.RULE_attributeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1819;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1820;
	        this.match(informixParser.LPAREN);
	        this.state = 1821;
	        this.attribute();
	        this.state = 1822;
	        this.match(informixParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructGroupStatement() {
	    let localctx = new ConstructGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, informixParser.RULE_constructGroupStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1824;
	        this.constructEvents();
	        this.state = 1826; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1825;
	            this.codeBlock();
	            this.state = 1828; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructStatement() {
	    let localctx = new ConstructStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, informixParser.RULE_constructStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.match(informixParser.CONSTRUCT);
	        this.state = 1843;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BY:
	            this.state = 1831;
	            this.match(informixParser.BY);
	            this.state = 1832;
	            this.match(informixParser.NAME);
	            this.state = 1833;
	            this.variable();
	            this.state = 1834;
	            this.match(informixParser.ON);
	            this.state = 1835;
	            this.columnsList();
	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.state = 1837;
	            this.variable();
	            this.state = 1838;
	            this.match(informixParser.ON);
	            this.state = 1839;
	            this.columnsList();
	            this.state = 1840;
	            this.match(informixParser.FROM);
	            this.state = 1841;
	            this.fieldList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1845;
	            this.attributeList();
	        }

	        this.state = 1850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HELP) {
	            this.state = 1848;
	            this.match(informixParser.HELP);
	            this.state = 1849;
	            this.numericConstant();
	        }

	        this.state = 1860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        if(la_===1) {
	            this.state = 1853; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1852;
	                this.constructGroupStatement();
	                this.state = 1855; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===informixParser.AFTER || _la===informixParser.BEFORE || _la===informixParser.ON);
	            this.state = 1857;
	            this.match(informixParser.END);
	            this.state = 1858;
	            this.match(informixParser.CONSTRUCT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayArrayStatement() {
	    let localctx = new DisplayArrayStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, informixParser.RULE_displayArrayStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1862;
	        this.match(informixParser.DISPLAY);
	        this.state = 1863;
	        this.match(informixParser.ARRAY);
	        this.state = 1864;
	        this.expression();
	        this.state = 1865;
	        this.match(informixParser.TO);
	        this.state = 1866;
	        this.expression();
	        this.state = 1868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1867;
	            this.attributeList();
	        }

	        this.state = 1873;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1870;
	                this.displayEvents(); 
	            }
	            this.state = 1875;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	        this.state = 1878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        if(la_===1) {
	            this.state = 1876;
	            this.match(informixParser.END);
	            this.state = 1877;
	            this.match(informixParser.DISPLAY);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayInsideStatement() {
	    let localctx = new DisplayInsideStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, informixParser.RULE_displayInsideStatement);
	    try {
	        this.state = 1884;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CONTINUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1880;
	            this.match(informixParser.CONTINUE);
	            this.state = 1881;
	            this.match(informixParser.DISPLAY);
	            break;
	        case informixParser.EXIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1882;
	            this.match(informixParser.EXIT);
	            this.state = 1883;
	            this.match(informixParser.DISPLAY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayEvents() {
	    let localctx = new DisplayEventsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, informixParser.RULE_displayEvents);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        this.match(informixParser.ON);
	        this.state = 1887;
	        this.match(informixParser.KEY);
	        this.state = 1888;
	        this.match(informixParser.LPAREN);
	        this.state = 1889;
	        this.keyList();
	        this.state = 1890;
	        this.match(informixParser.RPAREN);
	        this.state = 1892; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1891;
	        		this.codeBlock();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1894; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,213, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayStatement() {
	    let localctx = new DisplayStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, informixParser.RULE_displayStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1896;
	        this.match(informixParser.DISPLAY);
	        this.state = 1924;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BY:
	            this.state = 1897;
	            this.match(informixParser.BY);
	            this.state = 1898;
	            this.match(informixParser.NAME);

	            this.state = 1899;
	            this.expression();
	            this.state = 1904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1900;
	                this.match(informixParser.COMMA);
	                this.state = 1901;
	                this.expression();
	                this.state = 1906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.AVG:
	        case informixParser.COLUMN:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.DATE:
	        case informixParser.DAY:
	        case informixParser.EXTEND:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INFIELD:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MAX:
	        case informixParser.MDY:
	        case informixParser.MIN:
	        case informixParser.MONTH:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.PREPARE:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.SUM:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.YEAR:
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	        case informixParser.LPAREN:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	            this.state = 1907;
	            this.expression();
	            this.state = 1912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 1908;
	                this.match(informixParser.COMMA);
	                this.state = 1909;
	                this.expression();
	                this.state = 1914;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1922;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case informixParser.TO:
	            	this.state = 1915;
	            	this.match(informixParser.TO);
	            	this.state = 1916;
	            	this.fieldList();
	            	break;
	            case informixParser.AT:
	            	this.state = 1917;
	            	this.match(informixParser.AT);
	            	this.state = 1918;
	            	this.expression();
	            	this.state = 1919;
	            	this.match(informixParser.COMMA);
	            	this.state = 1920;
	            	this.expression();
	            	break;
	            case informixParser.ATTRIBUTE:
	            case informixParser.ATTRIBUTES:
	            case informixParser.EOL:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1926;
	            this.attributeList();
	        }

	        this.state = 1929;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorStatement() {
	    let localctx = new ErrorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, informixParser.RULE_errorStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.match(informixParser.ERROR);
	        this.state = 1932;
	        this.expression();
	        this.state = 1937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1933;
	            this.match(informixParser.COMMA);
	            this.state = 1934;
	            this.expression();
	            this.state = 1939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1940;
	            this.attributeList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	messageStatement() {
	    let localctx = new MessageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, informixParser.RULE_messageStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1943;
	        this.match(informixParser.MESSAGE);
	        this.state = 1944;
	        this.expression();
	        this.state = 1949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1945;
	            this.match(informixParser.COMMA);
	            this.state = 1946;
	            this.expression();
	            this.state = 1951;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1952;
	            this.attributeList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	promptStatement() {
	    let localctx = new PromptStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, informixParser.RULE_promptStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1955;
	        this.match(informixParser.PROMPT);
	        this.state = 1956;
	        this.expression();
	        this.state = 1961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 1957;
	            this.match(informixParser.COMMA);
	            this.state = 1958;
	            this.expression();
	            this.state = 1963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1964;
	            this.attributeList();
	        }

	        this.state = 1967;
	        this.match(informixParser.FOR);
	        this.state = 1969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.CHAR) {
	            this.state = 1968;
	            this.match(informixParser.CHAR);
	        }

	        this.state = 1971;
	        this.variable();
	        this.state = 1974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HELP) {
	            this.state = 1972;
	            this.match(informixParser.HELP);
	            this.state = 1973;
	            this.numericConstant();
	        }

	        this.state = 1977;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 1976;
	            this.attributeList();
	        }

	        this.state = 1994;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 1989;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.ON) {
	                this.state = 1979;
	                this.match(informixParser.ON);
	                this.state = 1980;
	                this.match(informixParser.KEY);
	                this.state = 1981;
	                this.match(informixParser.LPAREN);
	                this.state = 1982;
	                this.keyList();
	                this.state = 1983;
	                this.match(informixParser.RPAREN);
	                this.state = 1985;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	                    this.state = 1984;
	                    this.codeBlock();
	                }

	                this.state = 1991;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1992;
	            this.match(informixParser.END);
	            this.state = 1993;
	            this.match(informixParser.PROMPT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputEvents() {
	    let localctx = new InputEventsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, informixParser.RULE_inputEvents);
	    var _la = 0; // Token type
	    try {
	        this.state = 2010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1996;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.AFTER || _la===informixParser.BEFORE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1997;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.DELETE || _la===informixParser.INPUT || _la===informixParser.INSERT || _la===informixParser.ROW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1998;
	            this.match(informixParser.BEFORE);
	            this.state = 1999;
	            this.match(informixParser.FIELD);
	            this.state = 2000;
	            this.fieldList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2001;
	            this.match(informixParser.AFTER);
	            this.state = 2002;
	            this.match(informixParser.FIELD);
	            this.state = 2003;
	            this.fieldList();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2004;
	            this.match(informixParser.ON);
	            this.state = 2005;
	            this.match(informixParser.KEY);
	            this.state = 2006;
	            this.match(informixParser.LPAREN);
	            this.state = 2007;
	            this.keyList();
	            this.state = 2008;
	            this.match(informixParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputInsideStatement() {
	    let localctx = new InputInsideStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, informixParser.RULE_inputInsideStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NEXT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2012;
	            this.match(informixParser.NEXT);
	            this.state = 2013;
	            this.match(informixParser.FIELD);
	            this.state = 2016;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.IDENT:
	                this.state = 2014;
	                this.fieldName();
	                break;
	            case informixParser.NEXT:
	            case informixParser.PREVIOUS:
	                this.state = 2015;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.NEXT || _la===informixParser.PREVIOUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case informixParser.CONTINUE:
	        case informixParser.EXIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2022;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.CONTINUE:
	                this.state = 2018;
	                this.match(informixParser.CONTINUE);
	                this.state = 2019;
	                this.match(informixParser.INPUT);
	                break;
	            case informixParser.EXIT:
	                this.state = 2020;
	                this.match(informixParser.EXIT);
	                this.state = 2021;
	                this.match(informixParser.INPUT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputGroupStatement() {
	    let localctx = new InputGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, informixParser.RULE_inputGroupStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2026;
	        this.inputEvents();
	        this.state = 2030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 2027;
	            this.codeBlock();
	            this.state = 2032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputStatement() {
	    let localctx = new InputStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, informixParser.RULE_inputStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2033;
	        this.match(informixParser.INPUT);
	        this.state = 2063;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BY:
	            this.state = 2034;
	            this.match(informixParser.BY);
	            this.state = 2035;
	            this.match(informixParser.NAME);
	            this.state = 2036;
	            this.expression();
	            this.state = 2041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2037;
	                this.match(informixParser.COMMA);
	                this.state = 2038;
	                this.expression();
	                this.state = 2043;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.WITHOUT) {
	                this.state = 2044;
	                this.match(informixParser.WITHOUT);
	                this.state = 2045;
	                this.match(informixParser.DEFAULTS);
	            }

	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.AVG:
	        case informixParser.COLUMN:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.DATE:
	        case informixParser.DAY:
	        case informixParser.EXTEND:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INFIELD:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MAX:
	        case informixParser.MDY:
	        case informixParser.MIN:
	        case informixParser.MONTH:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.PREPARE:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.SUM:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.YEAR:
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	        case informixParser.LPAREN:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	            this.state = 2048;
	            this.expression();
	            this.state = 2053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2049;
	                this.match(informixParser.COMMA);
	                this.state = 2050;
	                this.expression();
	                this.state = 2055;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.WITHOUT) {
	                this.state = 2056;
	                this.match(informixParser.WITHOUT);
	                this.state = 2057;
	                this.match(informixParser.DEFAULTS);
	            }

	            this.state = 2060;
	            this.match(informixParser.FROM);
	            this.state = 2061;
	            this.fieldList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 2065;
	            this.attributeList();
	        }

	        this.state = 2070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HELP) {
	            this.state = 2068;
	            this.match(informixParser.HELP);
	            this.state = 2069;
	            this.numericConstant();
	        }

	        this.state = 2080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        if(la_===1) {
	            this.state = 2073; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2072;
	                this.inputGroupStatement();
	                this.state = 2075; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===informixParser.AFTER || _la===informixParser.BEFORE || _la===informixParser.ON);
	            this.state = 2077;
	            this.match(informixParser.END);
	            this.state = 2078;
	            this.match(informixParser.INPUT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputArrayStatement() {
	    let localctx = new InputArrayStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, informixParser.RULE_inputArrayStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2082;
	        this.match(informixParser.INPUT);
	        this.state = 2083;
	        this.match(informixParser.ARRAY);
	        this.state = 2084;
	        this.expression();
	        this.state = 2087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WITHOUT) {
	            this.state = 2085;
	            this.match(informixParser.WITHOUT);
	            this.state = 2086;
	            this.match(informixParser.DEFAULTS);
	        }

	        this.state = 2089;
	        this.match(informixParser.FROM);
	        this.state = 2090;
	        this.expression();
	        this.state = 2095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2091;
	            this.match(informixParser.COMMA);
	            this.state = 2092;
	            this.expression();
	            this.state = 2097;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HELP) {
	            this.state = 2098;
	            this.match(informixParser.HELP);
	            this.state = 2099;
	            this.numericConstant();
	        }

	        this.state = 2103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	            this.state = 2102;
	            this.attributeList();
	        }

	        this.state = 2113;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        if(la_===1) {
	            this.state = 2106; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2105;
	                this.inputGroupStatement();
	                this.state = 2108; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===informixParser.AFTER || _la===informixParser.BEFORE || _la===informixParser.ON);
	            this.state = 2110;
	            this.match(informixParser.END);
	            this.state = 2111;
	            this.match(informixParser.INPUT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	menuEvents() {
	    let localctx = new MenuEventsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, informixParser.RULE_menuEvents);
	    var _la = 0; // Token type
	    try {
	        this.state = 2133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BEFORE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2115;
	            this.match(informixParser.BEFORE);
	            this.state = 2116;
	            this.match(informixParser.MENU);
	            break;
	        case informixParser.COMMAND:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2117;
	            this.match(informixParser.COMMAND);

	            this.state = 2123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.KEY) {
	                this.state = 2118;
	                this.match(informixParser.KEY);
	                this.state = 2119;
	                this.match(informixParser.LPAREN);
	                this.state = 2120;
	                this.keyList();
	                this.state = 2121;
	                this.match(informixParser.RPAREN);
	            }

	            this.state = 2125;
	            this.expression();
	            this.state = 2127;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2126;
	                this.expression();

	            }
	            this.state = 2131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.HELP) {
	                this.state = 2129;
	                this.match(informixParser.HELP);
	                this.state = 2130;
	                this.numericConstant();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	menuInsideStatement() {
	    let localctx = new MenuInsideStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, informixParser.RULE_menuInsideStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2178;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NEXT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2135;
	            this.match(informixParser.NEXT);
	            this.state = 2136;
	            this.match(informixParser.OPTION);
	            this.state = 2139;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.AVG:
	            case informixParser.COLUMN:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.DATE:
	            case informixParser.DAY:
	            case informixParser.EXTEND:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INFIELD:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MAX:
	            case informixParser.MDY:
	            case informixParser.MIN:
	            case informixParser.MONTH:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.PREPARE:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.SUM:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.YEAR:
	            case informixParser.PLUS:
	            case informixParser.MINUS:
	            case informixParser.LPAREN:
	            case informixParser.IDENT:
	            case informixParser.STRING_LITERAL:
	            case informixParser.NUM_INT:
	            case informixParser.NUM_REAL:
	                this.state = 2137;
	                this.expression();
	                break;
	            case informixParser.ALL:
	                this.state = 2138;
	                this.match(informixParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2141;
	                this.match(informixParser.COMMA);
	                this.state = 2142;
	                this.expression();
	                this.state = 2147;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case informixParser.SHOW:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2148;
	            this.match(informixParser.SHOW);
	            this.state = 2149;
	            this.match(informixParser.OPTION);
	            this.state = 2152;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.AVG:
	            case informixParser.COLUMN:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.DATE:
	            case informixParser.DAY:
	            case informixParser.EXTEND:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INFIELD:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MAX:
	            case informixParser.MDY:
	            case informixParser.MIN:
	            case informixParser.MONTH:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.PREPARE:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.SUM:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.YEAR:
	            case informixParser.PLUS:
	            case informixParser.MINUS:
	            case informixParser.LPAREN:
	            case informixParser.IDENT:
	            case informixParser.STRING_LITERAL:
	            case informixParser.NUM_INT:
	            case informixParser.NUM_REAL:
	                this.state = 2150;
	                this.expression();
	                break;
	            case informixParser.ALL:
	                this.state = 2151;
	                this.match(informixParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2154;
	                this.match(informixParser.COMMA);
	                this.state = 2155;
	                this.expression();
	                this.state = 2160;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case informixParser.HIDE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2161;
	            this.match(informixParser.HIDE);
	            this.state = 2162;
	            this.match(informixParser.OPTION);
	            this.state = 2165;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.AVG:
	            case informixParser.COLUMN:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.DATE:
	            case informixParser.DAY:
	            case informixParser.EXTEND:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INFIELD:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MAX:
	            case informixParser.MDY:
	            case informixParser.MIN:
	            case informixParser.MONTH:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.PREPARE:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.SUM:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.YEAR:
	            case informixParser.PLUS:
	            case informixParser.MINUS:
	            case informixParser.LPAREN:
	            case informixParser.IDENT:
	            case informixParser.STRING_LITERAL:
	            case informixParser.NUM_INT:
	            case informixParser.NUM_REAL:
	                this.state = 2163;
	                this.expression();
	                break;
	            case informixParser.ALL:
	                this.state = 2164;
	                this.match(informixParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2167;
	                this.match(informixParser.COMMA);
	                this.state = 2168;
	                this.expression();
	                this.state = 2173;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case informixParser.CONTINUE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2174;
	            this.match(informixParser.CONTINUE);
	            this.state = 2175;
	            this.match(informixParser.MENU);
	            break;
	        case informixParser.EXIT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2176;
	            this.match(informixParser.EXIT);
	            this.state = 2177;
	            this.match(informixParser.MENU);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	menuGroupStatement() {
	    let localctx = new MenuGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, informixParser.RULE_menuGroupStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2180;
	        this.menuEvents();
	        this.state = 2182;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALLOCATE || _la===informixParser.BEGIN || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (informixParser.CALL - 33)) | (1 << (informixParser.CASE - 33)) | (1 << (informixParser.CLEAR - 33)) | (1 << (informixParser.CLOSE - 33)) | (1 << (informixParser.COMMIT - 33)) | (1 << (informixParser.CONSTRUCT - 33)) | (1 << (informixParser.CONTINUE - 33)) | (1 << (informixParser.CREATE - 33)) | (1 << (informixParser.CURRENT - 33)) | (1 << (informixParser.DATABASE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (informixParser.DEALLOCATE - 65)) | (1 << (informixParser.DECLARE - 65)) | (1 << (informixParser.DELETE - 65)) | (1 << (informixParser.DISPLAY - 65)) | (1 << (informixParser.DROP - 65)) | (1 << (informixParser.ERROR - 65)) | (1 << (informixParser.EXECUTE - 65)) | (1 << (informixParser.EXIT - 65)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (informixParser.FETCH - 102)) | (1 << (informixParser.FINISH - 102)) | (1 << (informixParser.FLUSH - 102)) | (1 << (informixParser.FOR - 102)) | (1 << (informixParser.FOREACH - 102)) | (1 << (informixParser.FREE - 102)) | (1 << (informixParser.GOTO - 102)) | (1 << (informixParser.HIDE - 102)) | (1 << (informixParser.IF - 102)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (informixParser.INITIALIZE - 139)) | (1 << (informixParser.INPUT - 139)) | (1 << (informixParser.INSERT - 139)) | (1 << (informixParser.LET - 139)) | (1 << (informixParser.LOAD - 139)) | (1 << (informixParser.LOCATE - 139)) | (1 << (informixParser.LOCK - 139)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (informixParser.MENU - 171)) | (1 << (informixParser.MESSAGE - 171)) | (1 << (informixParser.NEED - 171)) | (1 << (informixParser.NEXT - 171)) | (1 << (informixParser.OPEN - 171)))) !== 0) || ((((_la - 203)) & ~0x1f) == 0 && ((1 << (_la - 203)) & ((1 << (informixParser.OPTIONS - 203)) | (1 << (informixParser.OUTPUT - 203)) | (1 << (informixParser.PAUSE - 203)) | (1 << (informixParser.PREPARE - 203)) | (1 << (informixParser.PRINT - 203)) | (1 << (informixParser.PROMPT - 203)) | (1 << (informixParser.PUT - 203)))) !== 0) || ((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (informixParser.RESIZE - 235)) | (1 << (informixParser.RETURN - 235)) | (1 << (informixParser.ROLLBACK - 235)) | (1 << (informixParser.RUN - 235)) | (1 << (informixParser.SCROLL - 235)) | (1 << (informixParser.SKIP2 - 235)) | (1 << (informixParser.SELECT - 235)) | (1 << (informixParser.SET - 235)) | (1 << (informixParser.SHOW - 235)) | (1 << (informixParser.SLEEP - 235)) | (1 << (informixParser.START - 235)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (informixParser.TERMINATE - 269)) | (1 << (informixParser.UNLOAD - 269)) | (1 << (informixParser.UPDATE - 269)) | (1 << (informixParser.VALIDATE - 269)))) !== 0) || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (informixParser.WHENEVER - 301)) | (1 << (informixParser.WHILE - 301)) | (1 << (informixParser.IDENT - 301)))) !== 0)) {
	            this.state = 2181;
	            this.codeBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	menuStatement() {
	    let localctx = new MenuStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, informixParser.RULE_menuStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2184;
	        this.match(informixParser.MENU);
	        this.state = 2185;
	        this.expression();
	        this.state = 2189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.BEFORE || _la===informixParser.COMMAND) {
	            this.state = 2186;
	            this.menuGroupStatement();
	            this.state = 2191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2192;
	        this.match(informixParser.END);
	        this.state = 2193;
	        this.match(informixParser.MENU);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedLinePosition() {
	    let localctx = new ReservedLinePositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, informixParser.RULE_reservedLinePosition);
	    var _la = 0; // Token type
	    try {
	        this.state = 2206;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.FIRST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2195;
	            this.match(informixParser.FIRST);
	            this.state = 2198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.PLUS) {
	                this.state = 2196;
	                this.match(informixParser.PLUS);
	                this.state = 2197;
	                this.numericConstant();
	            }

	            break;
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2200;
	            this.numericConstant();
	            break;
	        case informixParser.LAST:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2201;
	            this.match(informixParser.LAST);
	            this.state = 2204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.MINUS) {
	                this.state = 2202;
	                this.match(informixParser.MINUS);
	                this.state = 2203;
	                this.numericConstant();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialWindowAttribute() {
	    let localctx = new SpecialWindowAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, informixParser.RULE_specialWindowAttribute);
	    var _la = 0; // Token type
	    try {
	        this.state = 2220;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.BLACK:
	        case informixParser.BLUE:
	        case informixParser.BOLD:
	        case informixParser.CYAN:
	        case informixParser.DIM:
	        case informixParser.GREEN:
	        case informixParser.INVISIBLE:
	        case informixParser.MAGENTA:
	        case informixParser.NORMAL:
	        case informixParser.RED:
	        case informixParser.WHITE:
	        case informixParser.YELLOW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2208;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << informixParser.BLACK) | (1 << informixParser.BLUE) | (1 << informixParser.BOLD))) !== 0) || _la===informixParser.CYAN || _la===informixParser.DIM || _la===informixParser.GREEN || _la===informixParser.INVISIBLE || _la===informixParser.MAGENTA || _la===informixParser.NORMAL || _la===informixParser.RED || _la===informixParser.WHITE || _la===informixParser.YELLOW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.REVERSE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2209;
	            this.match(informixParser.REVERSE);
	            break;
	        case informixParser.BORDER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2210;
	            this.match(informixParser.BORDER);
	            break;
	        case informixParser.FORM:
	        case informixParser.MENU:
	        case informixParser.MESSAGE:
	        case informixParser.PROMPT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2211;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.FORM || _la===informixParser.MENU || _la===informixParser.MESSAGE || _la===informixParser.PROMPT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2212;
	            this.match(informixParser.LINE);
	            this.state = 2213;
	            this.reservedLinePosition();
	            break;
	        case informixParser.COMMENT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2214;
	            this.match(informixParser.COMMENT);
	            this.state = 2215;
	            this.match(informixParser.LINE);
	            this.state = 2218;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.FIRST:
	            case informixParser.LAST:
	            case informixParser.PLUS:
	            case informixParser.MINUS:
	            case informixParser.NUM_INT:
	            case informixParser.NUM_REAL:
	                this.state = 2216;
	                this.reservedLinePosition();
	                break;
	            case informixParser.OFF:
	                this.state = 2217;
	                this.match(informixParser.OFF);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowAttribute() {
	    let localctx = new WindowAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, informixParser.RULE_windowAttribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2222;
	        this.specialWindowAttribute();
	        this.state = 2227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2223;
	            this.match(informixParser.COMMA);
	            this.state = 2224;
	            this.specialWindowAttribute();
	            this.state = 2229;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowAttributeList() {
	    let localctx = new WindowAttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, informixParser.RULE_windowAttributeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2230;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2231;
	        this.match(informixParser.LPAREN);
	        this.state = 2232;
	        this.windowAttribute();
	        this.state = 2233;
	        this.match(informixParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionStatement() {
	    let localctx = new OptionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, informixParser.RULE_optionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2235;
	            this.match(informixParser.MESSAGE);
	            this.state = 2236;
	            this.match(informixParser.LINE);
	            this.state = 2237;
	            this.expression();
	            break;

	        case 2:
	            this.state = 2238;
	            this.match(informixParser.PROMPT);
	            this.state = 2239;
	            this.match(informixParser.LINE);
	            this.state = 2240;
	            this.expression();
	            break;

	        case 3:
	            this.state = 2241;
	            this.match(informixParser.MENU);
	            this.state = 2242;
	            this.match(informixParser.LINE);
	            this.state = 2243;
	            this.expression();
	            break;

	        case 4:
	            this.state = 2244;
	            this.match(informixParser.COMMENT);
	            this.state = 2245;
	            this.match(informixParser.LINE);
	            this.state = 2246;
	            this.expression();
	            break;

	        case 5:
	            this.state = 2247;
	            this.match(informixParser.ERROR);
	            this.state = 2248;
	            this.match(informixParser.LINE);
	            this.state = 2249;
	            this.expression();
	            break;

	        case 6:
	            this.state = 2250;
	            this.match(informixParser.FORM);
	            this.state = 2251;
	            this.match(informixParser.LINE);
	            this.state = 2252;
	            this.expression();
	            break;

	        case 7:
	            this.state = 2253;
	            this.match(informixParser.INPUT);
	            this.state = 2257;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.WRAP:
	                this.state = 2254;
	                this.match(informixParser.WRAP);
	                break;
	            case informixParser.NO:
	                this.state = 2255;
	                this.match(informixParser.NO);
	                this.state = 2256;
	                this.match(informixParser.WRAP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.state = 2259;
	            this.match(informixParser.INSERT);
	            this.state = 2260;
	            this.match(informixParser.KEY);
	            this.state = 2261;
	            this.expression();
	            break;

	        case 9:
	            this.state = 2262;
	            this.match(informixParser.DELETE);
	            this.state = 2263;
	            this.match(informixParser.KEY);
	            this.state = 2264;
	            this.expression();
	            break;

	        case 10:
	            this.state = 2265;
	            this.match(informixParser.NEXT);
	            this.state = 2266;
	            this.match(informixParser.KEY);
	            this.state = 2267;
	            this.expression();
	            break;

	        case 11:
	            this.state = 2268;
	            this.match(informixParser.PREVIOUS);
	            this.state = 2269;
	            this.match(informixParser.KEY);
	            this.state = 2270;
	            this.expression();
	            break;

	        case 12:
	            this.state = 2271;
	            this.match(informixParser.ACCEPT);
	            this.state = 2272;
	            this.match(informixParser.KEY);
	            this.state = 2273;
	            this.expression();
	            break;

	        case 13:
	            this.state = 2274;
	            this.match(informixParser.HELP);
	            this.state = 2275;
	            this.match(informixParser.FILE);
	            this.state = 2276;
	            this.expression();
	            break;

	        case 14:
	            this.state = 2277;
	            this.match(informixParser.HELP);
	            this.state = 2278;
	            this.match(informixParser.KEY);
	            this.state = 2279;
	            this.expression();
	            break;

	        case 15:
	            this.state = 2280;
	            this.match(informixParser.INPUT);
	            this.state = 2281;
	            this.attributeList();
	            break;

	        case 16:
	            this.state = 2282;
	            this.match(informixParser.DISPLAY);
	            this.state = 2283;
	            this.attributeList();
	            break;

	        case 17:
	            this.state = 2284;
	            this.match(informixParser.SQL);
	            this.state = 2285;
	            this.match(informixParser.INTERRUPT);
	            this.state = 2286;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.OFF || _la===informixParser.ON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 18:
	            this.state = 2287;
	            this.match(informixParser.FIELD);
	            this.state = 2288;
	            this.match(informixParser.ORDER);
	            this.state = 2289;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.CONSTRAINED || _la===informixParser.UNCONSTRAINED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionsStatement() {
	    let localctx = new OptionsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, informixParser.RULE_optionsStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2292;
	        this.match(informixParser.OPTIONS);
	        this.state = 2293;
	        this.optionStatement();
	        this.state = 2298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2294;
	            this.match(informixParser.COMMA);
	            this.state = 2295;
	            this.optionStatement();
	            this.state = 2300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenStatement() {
	    let localctx = new ScreenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, informixParser.RULE_screenStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2301;
	            this.match(informixParser.CLEAR);
	            this.state = 2310;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2302;
	                this.match(informixParser.FORM);
	                break;

	            case 2:
	                this.state = 2303;
	                this.match(informixParser.WINDOW);
	                this.state = 2304;
	                this.identifier();
	                break;

	            case 3:
	                this.state = 2306;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.WINDOW) {
	                    this.state = 2305;
	                    this.match(informixParser.WINDOW);
	                }

	                this.state = 2308;
	                this.match(informixParser.SCREEN);
	                break;

	            case 4:
	                this.state = 2309;
	                this.fieldList();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2312;
	            this.match(informixParser.CLOSE);
	            this.state = 2313;
	            this.match(informixParser.WINDOW);
	            this.state = 2314;
	            this.identifier();
	            this.state = 2315;
	            this.eol();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2317;
	            this.match(informixParser.CLOSE);
	            this.state = 2318;
	            this.match(informixParser.FORM);
	            this.state = 2319;
	            this.identifier();
	            this.state = 2320;
	            this.eol();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2322;
	            this.constructStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2323;
	            this.match(informixParser.CURRENT);
	            this.state = 2324;
	            this.match(informixParser.WINDOW);
	            this.state = 2325;
	            this.match(informixParser.IS);
	            this.state = 2328;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.SCREEN:
	                this.state = 2326;
	                this.match(informixParser.SCREEN);
	                break;
	            case informixParser.IDENT:
	                this.state = 2327;
	                this.identifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2330;
	            this.eol();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2331;
	            this.displayStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2332;
	            this.displayArrayStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2333;
	            this.match(informixParser.DISPLAY);
	            this.state = 2334;
	            this.match(informixParser.FORM);
	            this.state = 2335;
	            this.identifier();
	            this.state = 2337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	                this.state = 2336;
	                this.attributeList();
	            }

	            this.state = 2339;
	            this.eol();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2341;
	            this.errorStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2342;
	            this.messageStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2343;
	            this.promptStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2344;
	            this.inputStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2345;
	            this.inputArrayStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2346;
	            this.menuStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2347;
	            this.match(informixParser.OPEN);
	            this.state = 2348;
	            this.match(informixParser.FORM);
	            this.state = 2349;
	            this.expression();
	            this.state = 2350;
	            this.match(informixParser.FROM);
	            this.state = 2351;
	            this.expression();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2353;
	            this.match(informixParser.OPEN);
	            this.state = 2354;
	            this.match(informixParser.WINDOW);
	            this.state = 2355;
	            this.expression();
	            this.state = 2356;
	            this.match(informixParser.AT);
	            this.state = 2357;
	            this.expression();
	            this.state = 2358;
	            this.match(informixParser.COMMA);
	            this.state = 2359;
	            this.expression();
	            this.state = 2370;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2360;
	                this.match(informixParser.WITH);
	                this.state = 2361;
	                this.match(informixParser.FORM);
	                this.state = 2362;
	                this.expression();
	                break;

	            case 2:
	                this.state = 2363;
	                this.match(informixParser.WITH);
	                this.state = 2364;
	                this.expression();
	                this.state = 2365;
	                this.match(informixParser.ROWS);
	                this.state = 2366;
	                this.match(informixParser.COMMA);
	                this.state = 2367;
	                this.expression();
	                this.state = 2368;
	                this.match(informixParser.COLUMNS);
	                break;

	            }
	            this.state = 2373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ATTRIBUTE || _la===informixParser.ATTRIBUTES) {
	                this.state = 2372;
	                this.windowAttributeList();
	            }

	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2375;
	            this.optionsStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2376;
	            this.match(informixParser.SCROLL);
	            this.state = 2377;
	            this.fieldList();
	            this.state = 2382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2378;
	                this.match(informixParser.COMMA);
	                this.state = 2379;
	                this.fieldList();
	                this.state = 2384;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2385;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.DOWN || _la===informixParser.UP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.BY) {
	                this.state = 2386;
	                this.match(informixParser.BY);
	                this.state = 2387;
	                this.numericConstant();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatements() {
	    let localctx = new SqlStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, informixParser.RULE_sqlStatements);
	    try {
	        this.state = 2399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2392;
	            this.cursorManipulationStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2393;
	            this.dataDefinitionStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2394;
	            this.dataManipulationStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2395;
	            this.dynamicManagementStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2396;
	            this.queryOptimizationStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2397;
	            this.dataIntegrityStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2398;
	            this.clientServerStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorManipulationStatement() {
	    let localctx = new CursorManipulationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, informixParser.RULE_cursorManipulationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CLOSE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2401;
	            this.match(informixParser.CLOSE);
	            this.state = 2402;
	            this.cursorName();
	            this.state = 2403;
	            this.eol();
	            break;
	        case informixParser.DECLARE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2405;
	            this.match(informixParser.DECLARE);
	            this.state = 2406;
	            this.cursorName();
	            this.state = 2437;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.CURSOR:
	                this.state = 2407;
	                this.match(informixParser.CURSOR);
	                this.state = 2410;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.WITH) {
	                    this.state = 2408;
	                    this.match(informixParser.WITH);
	                    this.state = 2409;
	                    this.match(informixParser.HOLD);
	                }

	                this.state = 2412;
	                this.match(informixParser.FOR);
	                this.state = 2424;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case informixParser.SELECT:
	                    this.state = 2413;
	                    this.sqlSelectStatement();
	                    this.state = 2420;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	                    if(la_===1) {
	                        this.state = 2414;
	                        this.match(informixParser.FOR);
	                        this.state = 2415;
	                        this.match(informixParser.UPDATE);
	                        this.state = 2418;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===informixParser.OF) {
	                            this.state = 2416;
	                            this.match(informixParser.OF);
	                            this.state = 2417;
	                            this.columnsList();
	                        }


	                    }
	                    break;
	                case informixParser.INSERT:
	                    this.state = 2422;
	                    this.sqlInsertStatement();
	                    break;
	                case informixParser.ACCEPT:
	                case informixParser.ASCII:
	                case informixParser.COUNT:
	                case informixParser.CURRENT:
	                case informixParser.FALSE:
	                case informixParser.FIRST:
	                case informixParser.FOUND:
	                case informixParser.GROUP:
	                case informixParser.HIDE:
	                case informixParser.INDEX:
	                case informixParser.INT_FLAG:
	                case informixParser.INTERRUPT:
	                case informixParser.LAST:
	                case informixParser.LENGTH:
	                case informixParser.LINENO:
	                case informixParser.MDY:
	                case informixParser.NO:
	                case informixParser.NOT:
	                case informixParser.NOTFOUND:
	                case informixParser.NULL_:
	                case informixParser.PAGENO:
	                case informixParser.REAL:
	                case informixParser.SIZE:
	                case informixParser.SQL:
	                case informixParser.STATUS:
	                case informixParser.TEMP:
	                case informixParser.TIME:
	                case informixParser.TODAY:
	                case informixParser.TRUE:
	                case informixParser.USER:
	                case informixParser.WEEKDAY:
	                case informixParser.WAIT:
	                case informixParser.WORK:
	                case informixParser.IDENT:
	                    this.state = 2423;
	                    this.statementId();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case informixParser.SCROLL:
	                this.state = 2426;
	                this.match(informixParser.SCROLL);
	                this.state = 2427;
	                this.match(informixParser.CURSOR);
	                this.state = 2430;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.WITH) {
	                    this.state = 2428;
	                    this.match(informixParser.WITH);
	                    this.state = 2429;
	                    this.match(informixParser.HOLD);
	                }

	                this.state = 2432;
	                this.match(informixParser.FOR);
	                this.state = 2435;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case informixParser.SELECT:
	                    this.state = 2433;
	                    this.sqlSelectStatement();
	                    break;
	                case informixParser.ACCEPT:
	                case informixParser.ASCII:
	                case informixParser.COUNT:
	                case informixParser.CURRENT:
	                case informixParser.FALSE:
	                case informixParser.FIRST:
	                case informixParser.FOUND:
	                case informixParser.GROUP:
	                case informixParser.HIDE:
	                case informixParser.INDEX:
	                case informixParser.INT_FLAG:
	                case informixParser.INTERRUPT:
	                case informixParser.LAST:
	                case informixParser.LENGTH:
	                case informixParser.LINENO:
	                case informixParser.MDY:
	                case informixParser.NO:
	                case informixParser.NOT:
	                case informixParser.NOTFOUND:
	                case informixParser.NULL_:
	                case informixParser.PAGENO:
	                case informixParser.REAL:
	                case informixParser.SIZE:
	                case informixParser.SQL:
	                case informixParser.STATUS:
	                case informixParser.TEMP:
	                case informixParser.TIME:
	                case informixParser.TODAY:
	                case informixParser.TRUE:
	                case informixParser.USER:
	                case informixParser.WEEKDAY:
	                case informixParser.WAIT:
	                case informixParser.WORK:
	                case informixParser.IDENT:
	                    this.state = 2434;
	                    this.statementId();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case informixParser.FETCH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2439;
	            this.match(informixParser.FETCH);
	            this.state = 2449;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case informixParser.NEXT:
	            	this.state = 2440;
	            	this.match(informixParser.NEXT);
	            	break;
	            case informixParser.PREVIOUS:
	            case informixParser.PRIOR:
	            	this.state = 2441;
	            	_la = this._input.LA(1);
	            	if(!(_la===informixParser.PREVIOUS || _la===informixParser.PRIOR)) {
	            	this._errHandler.recoverInline(this);
	            	}
	            	else {
	            		this._errHandler.reportMatch(this);
	            	    this.consume();
	            	}
	            	break;
	            case informixParser.FIRST:
	            	this.state = 2442;
	            	this.match(informixParser.FIRST);
	            	break;
	            case informixParser.LAST:
	            	this.state = 2443;
	            	this.match(informixParser.LAST);
	            	break;
	            case informixParser.CURRENT:
	            	this.state = 2444;
	            	this.match(informixParser.CURRENT);
	            	break;
	            case informixParser.RELATIVE:
	            	this.state = 2445;
	            	this.match(informixParser.RELATIVE);
	            	this.state = 2446;
	            	this.expression();
	            	break;
	            case informixParser.ABSOLUTE:
	            	this.state = 2447;
	            	this.match(informixParser.ABSOLUTE);
	            	this.state = 2448;
	            	this.expression();
	            	break;
	            case informixParser.IDENT:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 2451;
	            this.cursorName();
	            this.state = 2454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.INTO) {
	                this.state = 2452;
	                this.match(informixParser.INTO);
	                this.state = 2453;
	                this.variableList();
	            }

	            break;
	        case informixParser.FLUSH:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2456;
	            this.match(informixParser.FLUSH);
	            this.state = 2457;
	            this.cursorName();
	            this.state = 2458;
	            this.eol();
	            break;
	        case informixParser.OPEN:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2460;
	            this.match(informixParser.OPEN);
	            this.state = 2461;
	            this.cursorName();
	            this.state = 2464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.USING) {
	                this.state = 2462;
	                this.match(informixParser.USING);
	                this.state = 2463;
	                this.variableList();
	            }

	            break;
	        case informixParser.PUT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2466;
	            this.match(informixParser.PUT);
	            this.state = 2467;
	            this.cursorName();
	            this.state = 2470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.FROM) {
	                this.state = 2468;
	                this.match(informixParser.FROM);
	                this.state = 2469;
	                this.variableOrConstantList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsList() {
	    let localctx = new ColumnsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, informixParser.RULE_columnsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2474;
	        this.columnsTableId();
	        this.state = 2479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2475;
	            this.match(informixParser.COMMA);
	            this.state = 2476;
	            this.columnsTableId();
	            this.state = 2481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementId() {
	    let localctx = new StatementIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, informixParser.RULE_statementId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2482;
	        this.constantIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorName() {
	    let localctx = new CursorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, informixParser.RULE_cursorName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, informixParser.RULE_dataType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnItem() {
	    let localctx = new ColumnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, informixParser.RULE_columnItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 2521;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2488;
	            this.constantIdentifier();
	            this.state = 2498;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2489;
	                this.dataType();
	                break;

	            case 2:
	                this.state = 2490;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.BYTE || _la===informixParser.TEXT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2496;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.IN) {
	                    this.state = 2491;
	                    this.match(informixParser.IN);
	                    this.state = 2494;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case informixParser.TABLE:
	                        this.state = 2492;
	                        this.match(informixParser.TABLE);
	                        break;
	                    case informixParser.ACCEPT:
	                    case informixParser.ASCII:
	                    case informixParser.COUNT:
	                    case informixParser.CURRENT:
	                    case informixParser.FALSE:
	                    case informixParser.FIRST:
	                    case informixParser.FOUND:
	                    case informixParser.GROUP:
	                    case informixParser.HIDE:
	                    case informixParser.INDEX:
	                    case informixParser.INT_FLAG:
	                    case informixParser.INTERRUPT:
	                    case informixParser.LAST:
	                    case informixParser.LENGTH:
	                    case informixParser.LINENO:
	                    case informixParser.MDY:
	                    case informixParser.NO:
	                    case informixParser.NOT:
	                    case informixParser.NOTFOUND:
	                    case informixParser.NULL_:
	                    case informixParser.PAGENO:
	                    case informixParser.REAL:
	                    case informixParser.SIZE:
	                    case informixParser.SQL:
	                    case informixParser.STATUS:
	                    case informixParser.TEMP:
	                    case informixParser.TIME:
	                    case informixParser.TODAY:
	                    case informixParser.TRUE:
	                    case informixParser.USER:
	                    case informixParser.WEEKDAY:
	                    case informixParser.WAIT:
	                    case informixParser.WORK:
	                    case informixParser.IDENT:
	                        this.state = 2493;
	                        this.constantIdentifier();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                }

	                break;

	            }
	            this.state = 2502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.NOT) {
	                this.state = 2500;
	                this.match(informixParser.NOT);
	                this.state = 2501;
	                this.match(informixParser.NULL_);
	            }

	            break;
	        case informixParser.UNIQUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2504;
	            this.match(informixParser.UNIQUE);
	            this.state = 2505;
	            this.match(informixParser.LPAREN);
	            this.state = 2514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ACCEPT || _la===informixParser.ASCII || _la===informixParser.COUNT || _la===informixParser.CURRENT || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (informixParser.FALSE - 101)) | (1 << (informixParser.FIRST - 101)) | (1 << (informixParser.FOUND - 101)) | (1 << (informixParser.GROUP - 101)) | (1 << (informixParser.HIDE - 101)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (informixParser.INDEX - 136)) | (1 << (informixParser.INT_FLAG - 136)) | (1 << (informixParser.INTERRUPT - 136)) | (1 << (informixParser.LAST - 136)) | (1 << (informixParser.LENGTH - 136)) | (1 << (informixParser.LINENO - 136)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (informixParser.MDY - 176)) | (1 << (informixParser.NO - 176)) | (1 << (informixParser.NOT - 176)) | (1 << (informixParser.NOTFOUND - 176)) | (1 << (informixParser.NULL_ - 176)))) !== 0) || _la===informixParser.PAGENO || _la===informixParser.REAL || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)))) !== 0) || _la===informixParser.IDENT) {
	                this.state = 2506;
	                this.constantIdentifier();
	                this.state = 2511;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 2507;
	                    this.match(informixParser.COMMA);
	                    this.state = 2508;
	                    this.constantIdentifier();
	                    this.state = 2513;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2516;
	            this.match(informixParser.RPAREN);
	            this.state = 2519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.CONSTRAINT) {
	                this.state = 2517;
	                this.match(informixParser.CONSTRAINT);
	                this.state = 2518;
	                this.constantIdentifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDefinitionStatement() {
	    let localctx = new DataDefinitionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, informixParser.RULE_dataDefinitionStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2523;
	            this.match(informixParser.DROP);
	            this.state = 2524;
	            this.match(informixParser.TABLE);
	            this.state = 2525;
	            this.constantIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2526;
	            this.match(informixParser.CREATE);
	            this.state = 2528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.TEMP) {
	                this.state = 2527;
	                this.match(informixParser.TEMP);
	            }

	            this.state = 2530;
	            this.match(informixParser.TABLE);
	            this.state = 2531;
	            this.constantIdentifier();
	            this.state = 2532;
	            this.match(informixParser.LPAREN);
	            this.state = 2533;
	            this.columnItem();
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2534;
	                this.match(informixParser.COMMA);
	                this.state = 2535;
	                this.columnItem();
	                this.state = 2540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2541;
	            this.match(informixParser.RPAREN);
	            this.state = 2545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.WITH) {
	                this.state = 2542;
	                this.match(informixParser.WITH);
	                this.state = 2543;
	                this.match(informixParser.NO);
	                this.state = 2544;
	                this.match(informixParser.LOG);
	            }

	            this.state = 2549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.IN) {
	                this.state = 2547;
	                this.match(informixParser.IN);
	                this.state = 2548;
	                this.constantIdentifier();
	            }

	            this.state = 2554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.EXTENT) {
	                this.state = 2551;
	                this.match(informixParser.EXTENT);
	                this.state = 2552;
	                this.match(informixParser.SIZE);
	                this.state = 2553;
	                this.numericConstant();
	            }

	            this.state = 2559;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 2556;
	                this.match(informixParser.NEXT);
	                this.state = 2557;
	                this.match(informixParser.SIZE);
	                this.state = 2558;
	                this.numericConstant();

	            }
	            this.state = 2566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            if(la_===1) {
	                this.state = 2561;
	                this.match(informixParser.LOCK);
	                this.state = 2562;
	                this.match(informixParser.MODE);
	                this.state = 2563;
	                this.match(informixParser.LPAREN);
	                this.state = 2564;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.PAGE || _la===informixParser.ROW)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2565;
	                this.match(informixParser.RPAREN);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2568;
	            this.match(informixParser.CREATE);
	            this.state = 2570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.UNIQUE) {
	                this.state = 2569;
	                this.match(informixParser.UNIQUE);
	            }

	            this.state = 2573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.CLUSTER) {
	                this.state = 2572;
	                this.match(informixParser.CLUSTER);
	            }

	            this.state = 2575;
	            this.match(informixParser.INDEX);
	            this.state = 2576;
	            this.constantIdentifier();
	            this.state = 2577;
	            this.match(informixParser.ON);
	            this.state = 2578;
	            this.constantIdentifier();
	            this.state = 2579;
	            this.match(informixParser.LPAREN);
	            this.state = 2580;
	            this.constantIdentifier();
	            this.state = 2582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ASC || _la===informixParser.DESC) {
	                this.state = 2581;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.ASC || _la===informixParser.DESC)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2584;
	                this.match(informixParser.COMMA);
	                this.state = 2585;
	                this.constantIdentifier();
	                this.state = 2587;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.ASC || _la===informixParser.DESC) {
	                    this.state = 2586;
	                    _la = this._input.LA(1);
	                    if(!(_la===informixParser.ASC || _la===informixParser.DESC)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 2593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2594;
	            this.match(informixParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2596;
	            this.match(informixParser.DROP);
	            this.state = 2597;
	            this.match(informixParser.INDEX);
	            this.state = 2598;
	            this.constantIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataManipulationStatement() {
	    let localctx = new DataManipulationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, informixParser.RULE_dataManipulationStatement);
	    try {
	        this.state = 2607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2601;
	            this.sqlInsertStatement();
	            break;
	        case informixParser.DELETE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2602;
	            this.sqlDeleteStatement();
	            break;
	        case informixParser.SELECT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2603;
	            this.sqlSelectStatement();
	            break;
	        case informixParser.UPDATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2604;
	            this.sqlUpdateStatement();
	            break;
	        case informixParser.LOAD:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2605;
	            this.sqlLoadStatement();
	            break;
	        case informixParser.UNLOAD:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2606;
	            this.sqlUnLoadStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlSelectStatement() {
	    let localctx = new SqlSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, informixParser.RULE_sqlSelectStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2609;
	        this.mainSelectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsTableId() {
	    let localctx = new ColumnsTableIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, informixParser.RULE_columnsTableId);
	    var _la = 0; // Token type
	    try {
	        this.state = 2622;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2611;
	            this.match(informixParser.STAR);
	            break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2612;
	            this.tableIdentifier();
	            this.state = 2614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LBRACK) {
	                this.state = 2613;
	                this.indexingVariable();
	            }

	            this.state = 2620;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	            if(la_===1) {
	                this.state = 2616;
	                this.match(informixParser.DOT);
	                this.state = 2617;
	                this.match(informixParser.STAR);

	            } else if(la_===2) {
	                this.state = 2618;
	                this.match(informixParser.DOT);
	                this.state = 2619;
	                this.columnsTableId();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectList() {
	    let localctx = new SelectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, informixParser.RULE_selectList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2624;
	        this.sqlExpression();
	        this.state = 2626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.AS || _la===informixParser.IDENT) {
	            this.state = 2625;
	            this.sqlAlias();
	        }

	        this.state = 2635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2628;
	            this.match(informixParser.COMMA);
	            this.state = 2629;
	            this.sqlExpression();
	            this.state = 2631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.AS || _la===informixParser.IDENT) {
	                this.state = 2630;
	                this.sqlAlias();
	            }

	            this.state = 2637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	headSelectStatement() {
	    let localctx = new HeadSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, informixParser.RULE_headSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2638;
	        this.match(informixParser.SELECT);
	        this.state = 2641;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case informixParser.ALL:
	        	this.state = 2639;
	        	this.match(informixParser.ALL);
	        	break;
	        case informixParser.DISTINCT:
	        case informixParser.UNIQUE:
	        	this.state = 2640;
	        	_la = this._input.LA(1);
	        	if(!(_la===informixParser.DISTINCT || _la===informixParser.UNIQUE)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	break;
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.AVG:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.DATE:
	        case informixParser.DAY:
	        case informixParser.DECODE:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MAX:
	        case informixParser.MDY:
	        case informixParser.MIN:
	        case informixParser.MOD:
	        case informixParser.MONTH:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.NVL:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.SUM:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.YEAR:
	        case informixParser.PLUS:
	        case informixParser.MINUS:
	        case informixParser.STAR:
	        case informixParser.LPAREN:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	        case informixParser.NUM_INT:
	        case informixParser.NUM_REAL:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2643;
	        this.selectList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableQualifier() {
	    let localctx = new TableQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, informixParser.RULE_tableQualifier);
	    try {
	        this.state = 2654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2645;
	            this.constantIdentifier();
	            this.state = 2646;
	            this.match(informixParser.COLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2648;
	            this.constantIdentifier();
	            this.state = 2649;
	            this.match(informixParser.ATSYMBOL);
	            this.state = 2650;
	            this.constantIdentifier();
	            this.state = 2651;
	            this.match(informixParser.COLON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2653;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIdentifier() {
	    let localctx = new TableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, informixParser.RULE_tableIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2657;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        if(la_===1) {
	            this.state = 2656;
	            this.tableQualifier();

	        }
	        this.state = 2659;
	        this.constantIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromTable() {
	    let localctx = new FromTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, informixParser.RULE_fromTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.OUTER) {
	            this.state = 2661;
	            this.match(informixParser.OUTER);
	        }

	        this.state = 2664;
	        this.tableIdentifier();
	        this.state = 2666;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        if(la_===1) {
	            this.state = 2665;
	            this.sqlAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableExpression() {
	    let localctx = new TableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, informixParser.RULE_tableExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2668;
	        this.simpleSelectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromSelectStatement() {
	    let localctx = new FromSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, informixParser.RULE_fromSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2670;
	        this.match(informixParser.FROM);
	        this.state = 2678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.OUTER:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	        case informixParser.STRING_LITERAL:
	            this.state = 2671;
	            this.fromTable();
	            break;
	        case informixParser.LPAREN:
	            this.state = 2672;
	            this.match(informixParser.LPAREN);
	            this.state = 2673;
	            this.tableExpression();
	            this.state = 2674;
	            this.match(informixParser.RPAREN);
	            this.state = 2676;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 2675;
	                this.sqlAlias();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2680;
	            this.match(informixParser.COMMA);
	            this.state = 2688;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MDY:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.OUTER:
	            case informixParser.PAGENO:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.IDENT:
	            case informixParser.STRING_LITERAL:
	                this.state = 2681;
	                this.fromTable();
	                break;
	            case informixParser.LPAREN:
	                this.state = 2682;
	                this.match(informixParser.LPAREN);
	                this.state = 2683;
	                this.tableExpression();
	                this.state = 2684;
	                this.match(informixParser.RPAREN);
	                this.state = 2686;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	                if(la_===1) {
	                    this.state = 2685;
	                    this.sqlAlias();

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, informixParser.RULE_aliasName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2695;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainSelectStatement() {
	    let localctx = new MainSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, informixParser.RULE_mainSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2697;
	        this.headSelectStatement();
	        this.state = 2700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.INTO) {
	            this.state = 2698;
	            this.match(informixParser.INTO);
	            this.state = 2699;
	            this.variableList();
	        }

	        this.state = 2702;
	        this.fromSelectStatement();
	        this.state = 2704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WHERE) {
	            this.state = 2703;
	            this.whereStatement();
	        }

	        this.state = 2707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.GROUP) {
	            this.state = 2706;
	            this.groupByStatement();
	        }

	        this.state = 2710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HAVING) {
	            this.state = 2709;
	            this.havingStatement();
	        }

	        this.state = 2713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.UNION) {
	            this.state = 2712;
	            this.unionSelectStatement();
	        }

	        this.state = 2716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ORDER) {
	            this.state = 2715;
	            this.orderbyStatement();
	        }

	        this.state = 2721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.INTO) {
	            this.state = 2718;
	            this.match(informixParser.INTO);
	            this.state = 2719;
	            this.match(informixParser.TEMP);
	            this.state = 2720;
	            this.identifier();
	        }

	        this.state = 2726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WITH) {
	            this.state = 2723;
	            this.match(informixParser.WITH);
	            this.state = 2724;
	            this.match(informixParser.NO);
	            this.state = 2725;
	            this.match(informixParser.LOG);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionSelectStatement() {
	    let localctx = new UnionSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, informixParser.RULE_unionSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2728;
	        this.match(informixParser.UNION);
	        this.state = 2730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ALL) {
	            this.state = 2729;
	            this.match(informixParser.ALL);
	        }

	        this.state = 2732;
	        this.simpleSelectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleSelectStatement() {
	    let localctx = new SimpleSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, informixParser.RULE_simpleSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2734;
	        this.headSelectStatement();
	        this.state = 2735;
	        this.fromSelectStatement();
	        this.state = 2737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WHERE) {
	            this.state = 2736;
	            this.whereStatement();
	        }

	        this.state = 2740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.GROUP) {
	            this.state = 2739;
	            this.groupByStatement();
	        }

	        this.state = 2743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.HAVING) {
	            this.state = 2742;
	            this.havingStatement();
	        }

	        this.state = 2746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.UNION) {
	            this.state = 2745;
	            this.unionSelectStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereStatement() {
	    let localctx = new WhereStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, informixParser.RULE_whereStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2748;
	        this.match(informixParser.WHERE);
	        this.state = 2749;
	        this.condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByStatement() {
	    let localctx = new GroupByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, informixParser.RULE_groupByStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2751;
	        this.match(informixParser.GROUP);
	        this.state = 2752;
	        this.match(informixParser.BY);
	        this.state = 2753;
	        this.variableOrConstantList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingStatement() {
	    let localctx = new HavingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, informixParser.RULE_havingStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2755;
	        this.match(informixParser.HAVING);
	        this.state = 2756;
	        this.condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderbyColumn() {
	    let localctx = new OrderbyColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, informixParser.RULE_orderbyColumn);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2758;
	        this.expression();
	        this.state = 2760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ASC || _la===informixParser.DESC) {
	            this.state = 2759;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.ASC || _la===informixParser.DESC)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderbyStatement() {
	    let localctx = new OrderbyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, informixParser.RULE_orderbyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2762;
	        this.match(informixParser.ORDER);
	        this.state = 2763;
	        this.match(informixParser.BY);
	        this.state = 2764;
	        this.orderbyColumn();
	        this.state = 2769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2765;
	            this.match(informixParser.COMMA);
	            this.state = 2766;
	            this.orderbyColumn();
	            this.state = 2771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlLoadStatement() {
	    let localctx = new SqlLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, informixParser.RULE_sqlLoadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2772;
	        this.match(informixParser.LOAD);
	        this.state = 2773;
	        this.match(informixParser.FROM);
	        this.state = 2776;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.state = 2774;
	            this.variable();
	            break;
	        case informixParser.STRING_LITERAL:
	            this.state = 2775;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DELIMITER) {
	            this.state = 2778;
	            this.match(informixParser.DELIMITER);
	            this.state = 2781;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MDY:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.IDENT:
	                this.state = 2779;
	                this.variable();
	                break;
	            case informixParser.STRING_LITERAL:
	                this.state = 2780;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 2795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2785;
	            this.match(informixParser.INSERT);
	            this.state = 2786;
	            this.match(informixParser.INTO);
	            this.state = 2787;
	            this.tableIdentifier();
	            this.state = 2792;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.LPAREN) {
	                this.state = 2788;
	                this.match(informixParser.LPAREN);
	                this.state = 2789;
	                this.columnsList();
	                this.state = 2790;
	                this.match(informixParser.RPAREN);
	            }

	            break;

	        case 2:
	            this.state = 2794;
	            this.sqlInsertStatement();
	            break;

	        }
	        this.state = 2797;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlUnLoadStatement() {
	    let localctx = new SqlUnLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, informixParser.RULE_sqlUnLoadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2799;
	        this.match(informixParser.UNLOAD);
	        this.state = 2800;
	        this.match(informixParser.TO);
	        this.state = 2803;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	        case informixParser.IDENT:
	            this.state = 2801;
	            this.variable();
	            break;
	        case informixParser.STRING_LITERAL:
	            this.state = 2802;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DELIMITER) {
	            this.state = 2805;
	            this.match(informixParser.DELIMITER);
	            this.state = 2808;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.ACCEPT:
	            case informixParser.ASCII:
	            case informixParser.COUNT:
	            case informixParser.CURRENT:
	            case informixParser.FALSE:
	            case informixParser.FIRST:
	            case informixParser.FOUND:
	            case informixParser.GROUP:
	            case informixParser.HIDE:
	            case informixParser.INDEX:
	            case informixParser.INT_FLAG:
	            case informixParser.INTERRUPT:
	            case informixParser.LAST:
	            case informixParser.LENGTH:
	            case informixParser.LINENO:
	            case informixParser.MDY:
	            case informixParser.NO:
	            case informixParser.NOT:
	            case informixParser.NOTFOUND:
	            case informixParser.NULL_:
	            case informixParser.PAGENO:
	            case informixParser.REAL:
	            case informixParser.SIZE:
	            case informixParser.SQL:
	            case informixParser.STATUS:
	            case informixParser.TEMP:
	            case informixParser.TIME:
	            case informixParser.TODAY:
	            case informixParser.TRUE:
	            case informixParser.USER:
	            case informixParser.WEEKDAY:
	            case informixParser.WAIT:
	            case informixParser.WORK:
	            case informixParser.IDENT:
	                this.state = 2806;
	                this.variable();
	                break;
	            case informixParser.STRING_LITERAL:
	                this.state = 2807;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 2812;
	        this.sqlSelectStatement();
	        this.state = 2813;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlInsertStatement() {
	    let localctx = new SqlInsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, informixParser.RULE_sqlInsertStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2815;
	        this.match(informixParser.INSERT);
	        this.state = 2816;
	        this.match(informixParser.INTO);
	        this.state = 2817;
	        this.tableIdentifier();
	        this.state = 2822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.LPAREN) {
	            this.state = 2818;
	            this.match(informixParser.LPAREN);
	            this.state = 2819;
	            this.columnsList();
	            this.state = 2820;
	            this.match(informixParser.RPAREN);
	        }

	        this.state = 2837;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.VALUES:
	            this.state = 2824;
	            this.match(informixParser.VALUES);
	            this.state = 2825;
	            this.match(informixParser.LPAREN);
	            this.state = 2826;
	            this.expression();
	            this.state = 2831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2827;
	                this.match(informixParser.COMMA);
	                this.state = 2828;
	                this.expression();
	                this.state = 2833;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2834;
	            this.match(informixParser.RPAREN);
	            break;
	        case informixParser.SELECT:
	            this.state = 2836;
	            this.simpleSelectStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlUpdateStatement() {
	    let localctx = new SqlUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, informixParser.RULE_sqlUpdateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2839;
	        this.match(informixParser.UPDATE);
	        this.state = 2840;
	        this.tableIdentifier();
	        this.state = 2841;
	        this.match(informixParser.SET);
	        this.state = 2887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2842;
	            this.columnsTableId();
	            this.state = 2843;
	            this.match(informixParser.EQUAL);
	            this.state = 2844;
	            this.expression();
	            this.state = 2852;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===informixParser.COMMA) {
	                this.state = 2845;
	                this.match(informixParser.COMMA);
	                this.state = 2846;
	                this.columnsTableId();
	                this.state = 2847;
	                this.match(informixParser.EQUAL);
	                this.state = 2848;
	                this.expression();
	                this.state = 2854;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 2865;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.LPAREN:
	                this.state = 2855;
	                this.match(informixParser.LPAREN);
	                this.state = 2856;
	                this.columnsList();
	                this.state = 2857;
	                this.match(informixParser.RPAREN);
	                break;
	            case informixParser.STAR:
	            case informixParser.IDENT:
	                this.state = 2862;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.IDENT) {
	                    this.state = 2859;
	                    this.aliasName();
	                    this.state = 2860;
	                    this.match(informixParser.DOT);
	                }

	                this.state = 2864;
	                this.match(informixParser.STAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2867;
	            this.match(informixParser.EQUAL);
	            this.state = 2885;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.LPAREN:
	                this.state = 2868;
	                this.match(informixParser.LPAREN);
	                this.state = 2869;
	                this.expression();
	                this.state = 2874;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===informixParser.COMMA) {
	                    this.state = 2870;
	                    this.match(informixParser.COMMA);
	                    this.state = 2871;
	                    this.expression();
	                    this.state = 2876;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2877;
	                this.match(informixParser.RPAREN);
	                break;
	            case informixParser.STAR:
	            case informixParser.IDENT:
	                this.state = 2882;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.IDENT) {
	                    this.state = 2879;
	                    this.aliasName();
	                    this.state = 2880;
	                    this.match(informixParser.DOT);
	                }

	                this.state = 2884;
	                this.match(informixParser.STAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this.state = 2896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WHERE) {
	            this.state = 2889;
	            this.match(informixParser.WHERE);
	            this.state = 2894;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2890;
	                this.condition();
	                break;

	            case 2:
	                this.state = 2891;
	                this.match(informixParser.CURRENT);
	                this.state = 2892;
	                this.match(informixParser.OF);
	                this.state = 2893;
	                this.cursorName();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDeleteStatement() {
	    let localctx = new SqlDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, informixParser.RULE_sqlDeleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2898;
	        this.match(informixParser.DELETE);
	        this.state = 2899;
	        this.match(informixParser.FROM);
	        this.state = 2900;
	        this.tableIdentifier();
	        this.state = 2908;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.WHERE) {
	            this.state = 2901;
	            this.match(informixParser.WHERE);
	            this.state = 2906;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2902;
	                this.condition();
	                break;

	            case 2:
	                this.state = 2903;
	                this.match(informixParser.CURRENT);
	                this.state = 2904;
	                this.match(informixParser.OF);
	                this.state = 2905;
	                this.cursorName();
	                break;

	            }
	        }

	        this.state = 2910;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualParameterList() {
	    let localctx = new ActualParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, informixParser.RULE_actualParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2912;
	        this.actualParameter();
	        this.state = 2917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.COMMA) {
	            this.state = 2913;
	            this.match(informixParser.COMMA);
	            this.state = 2914;
	            this.actualParameter();
	            this.state = 2919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicManagementStatement() {
	    let localctx = new DynamicManagementStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, informixParser.RULE_dynamicManagementStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2943;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.PREPARE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2920;
	            this.match(informixParser.PREPARE);
	            this.state = 2921;
	            this.cursorName();
	            this.state = 2922;
	            this.match(informixParser.FROM);
	            this.state = 2923;
	            this.expression();
	            break;
	        case informixParser.EXECUTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2925;
	            this.match(informixParser.EXECUTE);
	            this.state = 2926;
	            this.cursorName();
	            this.state = 2929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.USING) {
	                this.state = 2927;
	                this.match(informixParser.USING);
	                this.state = 2928;
	                this.variableList();
	            }

	            break;
	        case informixParser.FREE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2931;
	            this.match(informixParser.FREE);
	            this.state = 2934;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2932;
	                this.cursorName();
	                break;

	            case 2:
	                this.state = 2933;
	                this.statementId();
	                break;

	            }
	            break;
	        case informixParser.LOCK:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2936;
	            this.match(informixParser.LOCK);
	            this.state = 2937;
	            this.match(informixParser.TABLE);
	            this.state = 2938;
	            this.expression();
	            this.state = 2939;
	            this.match(informixParser.IN);
	            this.state = 2940;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.EXCLUSIVE || _la===informixParser.SHARE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2941;
	            this.match(informixParser.MODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryOptimizationStatement() {
	    let localctx = new QueryOptimizationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, informixParser.RULE_queryOptimizationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2945;
	            this.match(informixParser.UPDATE);
	            this.state = 2946;
	            this.match(informixParser.STATISTICS);
	            this.state = 2950;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	            if(la_===1) {
	                this.state = 2947;
	                this.match(informixParser.FOR);
	                this.state = 2948;
	                this.match(informixParser.TABLE);
	                this.state = 2949;
	                this.tableIdentifier();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2952;
	            this.match(informixParser.SET);
	            this.state = 2953;
	            this.match(informixParser.LOCK);
	            this.state = 2954;
	            this.match(informixParser.MODE);
	            this.state = 2955;
	            this.match(informixParser.TO);
	            this.state = 2962;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.WAIT:
	                this.state = 2956;
	                this.match(informixParser.WAIT);
	                this.state = 2958;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===informixParser.SECONDS) {
	                    this.state = 2957;
	                    this.match(informixParser.SECONDS);
	                }

	                break;
	            case informixParser.NOT:
	                this.state = 2960;
	                this.match(informixParser.NOT);
	                this.state = 2961;
	                this.match(informixParser.WAIT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2964;
	            this.match(informixParser.SET);
	            this.state = 2965;
	            this.match(informixParser.EXPLAIN);
	            this.state = 2966;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.OFF || _la===informixParser.ON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2967;
	            this.match(informixParser.SET);
	            this.state = 2968;
	            this.match(informixParser.ISOLATION);
	            this.state = 2969;
	            this.match(informixParser.TO);
	            this.state = 2974;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.CURSOR:
	                this.state = 2970;
	                this.match(informixParser.CURSOR);
	                this.state = 2971;
	                this.match(informixParser.STABILITY);
	                break;
	            case informixParser.COMMITTED:
	            case informixParser.DIRTY:
	            case informixParser.REPEATABLE:
	                this.state = 2972;
	                _la = this._input.LA(1);
	                if(!(_la===informixParser.COMMITTED || _la===informixParser.DIRTY || _la===informixParser.REPEATABLE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2973;
	                this.match(informixParser.READ);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2976;
	            this.match(informixParser.SET);
	            this.state = 2978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.BUFFERED) {
	                this.state = 2977;
	                this.match(informixParser.BUFFERED);
	            }

	            this.state = 2980;
	            this.match(informixParser.LOG);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseDeclaration() {
	    let localctx = new DatabaseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, informixParser.RULE_databaseDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2983;
	        this.match(informixParser.DATABASE);

	        this.state = 2984;
	        this.constantIdentifier();
	        this.state = 2987;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ATSYMBOL) {
	            this.state = 2985;
	            this.match(informixParser.ATSYMBOL);
	            this.state = 2986;
	            this.constantIdentifier();
	        }

	        this.state = 2990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.EXCLUSIVE) {
	            this.state = 2989;
	            this.match(informixParser.EXCLUSIVE);
	        }

	        this.state = 2993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.SEMI) {
	            this.state = 2992;
	            this.match(informixParser.SEMI);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clientServerStatement() {
	    let localctx = new ClientServerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, informixParser.RULE_clientServerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2995;
	        this.match(informixParser.CLOSE);
	        this.state = 2996;
	        this.match(informixParser.DATABASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataIntegrityStatement() {
	    let localctx = new DataIntegrityStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, informixParser.RULE_dataIntegrityStatement);
	    try {
	        this.state = 3005;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.WHENEVER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2998;
	            this.wheneverStatement();
	            break;
	        case informixParser.BEGIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2999;
	            this.match(informixParser.BEGIN);
	            this.state = 3000;
	            this.match(informixParser.WORK);
	            break;
	        case informixParser.COMMIT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3001;
	            this.match(informixParser.COMMIT);
	            this.state = 3002;
	            this.match(informixParser.WORK);
	            break;
	        case informixParser.ROLLBACK:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3003;
	            this.match(informixParser.ROLLBACK);
	            this.state = 3004;
	            this.match(informixParser.WORK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wheneverStatement() {
	    let localctx = new WheneverStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, informixParser.RULE_wheneverStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3007;
	        this.match(informixParser.WHENEVER);
	        this.state = 3008;
	        this.wheneverType();
	        this.state = 3009;
	        this.wheneverFlow();
	        this.state = 3010;
	        this.eol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wheneverType() {
	    let localctx = new WheneverTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, informixParser.RULE_wheneverType);
	    var _la = 0; // Token type
	    try {
	        this.state = 3019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3012;
	            this.match(informixParser.NOT);
	            this.state = 3013;
	            this.match(informixParser.FOUND);
	            break;
	        case informixParser.ANY:
	        case informixParser.ERROR:
	        case informixParser.SQLERROR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.ANY) {
	                this.state = 3014;
	                this.match(informixParser.ANY);
	            }

	            this.state = 3017;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.ERROR || _la===informixParser.SQLERROR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.SQLWARNING:
	        case informixParser.WARNING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3018;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.SQLWARNING || _la===informixParser.WARNING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wheneverFlow() {
	    let localctx = new WheneverFlowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, informixParser.RULE_wheneverFlow);
	    var _la = 0; // Token type
	    try {
	        this.state = 3033;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.CONTINUE:
	        case informixParser.STOP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3021;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.CONTINUE || _la===informixParser.STOP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.CALL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3022;
	            this.match(informixParser.CALL);
	            this.state = 3023;
	            this.identifier();
	            break;
	        case informixParser.GO:
	        case informixParser.GOTO:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3027;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.GO:
	                this.state = 3024;
	                this.match(informixParser.GO);
	                this.state = 3025;
	                this.match(informixParser.TO);
	                break;
	            case informixParser.GOTO:
	                this.state = 3026;
	                this.match(informixParser.GOTO);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.COLON) {
	                this.state = 3029;
	                this.match(informixParser.COLON);
	            }

	            this.state = 3032;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDefinition() {
	    let localctx = new ReportDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, informixParser.RULE_reportDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3035;
	        this.match(informixParser.REPORT);
	        this.state = 3036;
	        this.identifier();
	        this.state = 3038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.LPAREN) {
	            this.state = 3037;
	            this.parameterList();
	        }

	        this.state = 3041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.DEFINE) {
	            this.state = 3040;
	            this.typeDeclarations();
	        }

	        this.state = 3044;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.OUTPUT) {
	            this.state = 3043;
	            this.outputReport();
	        }

	        this.state = 3052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.ORDER) {
	            this.state = 3046;
	            this.match(informixParser.ORDER);
	            this.state = 3048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===informixParser.EXTERNAL) {
	                this.state = 3047;
	                this.match(informixParser.EXTERNAL);
	            }

	            this.state = 3050;
	            this.match(informixParser.BY);
	            this.state = 3051;
	            this.variableList();
	        }

	        this.state = 3055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.FORMAT) {
	            this.state = 3054;
	            this.formatReport();
	        }

	        this.state = 3057;
	        this.match(informixParser.END);
	        this.state = 3058;
	        this.match(informixParser.REPORT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outputReport() {
	    let localctx = new OutputReportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, informixParser.RULE_outputReport);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3060;
	        this.match(informixParser.OUTPUT);
	        this.state = 3069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===informixParser.REPORT) {
	            this.state = 3061;
	            this.match(informixParser.REPORT);
	            this.state = 3062;
	            this.match(informixParser.TO);
	            this.state = 3067;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case informixParser.STRING_LITERAL:
	                this.state = 3063;
	                this.string();
	                break;
	            case informixParser.PIPE:
	                this.state = 3064;
	                this.match(informixParser.PIPE);
	                this.state = 3065;
	                this.string();
	                break;
	            case informixParser.PRINTER:
	                this.state = 3066;
	                this.match(informixParser.PRINTER);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 3092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===informixParser.BOTTOM || _la===informixParser.LEFT || _la===informixParser.PAGE || _la===informixParser.RIGHT || _la===informixParser.TOP) {
	            this.state = 3090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3071;
	                this.match(informixParser.LEFT);
	                this.state = 3072;
	                this.match(informixParser.MARGIN);
	                this.state = 3073;
	                this.numericConstant();
	                break;

	            case 2:
	                this.state = 3074;
	                this.match(informixParser.RIGHT);
	                this.state = 3075;
	                this.match(informixParser.MARGIN);
	                this.state = 3076;
	                this.numericConstant();
	                break;

	            case 3:
	                this.state = 3077;
	                this.match(informixParser.TOP);
	                this.state = 3078;
	                this.match(informixParser.MARGIN);
	                this.state = 3079;
	                this.numericConstant();
	                break;

	            case 4:
	                this.state = 3080;
	                this.match(informixParser.BOTTOM);
	                this.state = 3081;
	                this.match(informixParser.MARGIN);
	                this.state = 3082;
	                this.numericConstant();
	                break;

	            case 5:
	                this.state = 3083;
	                this.match(informixParser.PAGE);
	                this.state = 3084;
	                this.match(informixParser.LENGTH);
	                this.state = 3085;
	                this.numericConstant();
	                break;

	            case 6:
	                this.state = 3086;
	                this.match(informixParser.TOP);
	                this.state = 3087;
	                this.match(informixParser.OF);
	                this.state = 3088;
	                this.match(informixParser.PAGE);
	                this.state = 3089;
	                this.string();
	                break;

	            }
	            this.state = 3094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatReport() {
	    let localctx = new FormatReportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, informixParser.RULE_formatReport);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3095;
	        this.match(informixParser.FORMAT);
	        this.state = 3123;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.EVERY:
	            this.state = 3096;
	            this.match(informixParser.EVERY);
	            this.state = 3097;
	            this.match(informixParser.ROW);
	            break;
	        case informixParser.AFTER:
	        case informixParser.BEFORE:
	        case informixParser.FIRST:
	        case informixParser.ON:
	        case informixParser.PAGE:
	            this.state = 3119; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3116;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3099;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===informixParser.FIRST) {
	                        this.state = 3098;
	                        this.match(informixParser.FIRST);
	                    }

	                    this.state = 3101;
	                    this.match(informixParser.PAGE);
	                    this.state = 3102;
	                    this.match(informixParser.HEADER);
	                    break;

	                case 2:
	                    this.state = 3103;
	                    this.match(informixParser.PAGE);
	                    this.state = 3104;
	                    this.match(informixParser.TRAILER);
	                    break;

	                case 3:
	                    this.state = 3105;
	                    this.match(informixParser.ON);
	                    this.state = 3110;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case informixParser.EVERY:
	                        this.state = 3106;
	                        this.match(informixParser.EVERY);
	                        this.state = 3107;
	                        this.match(informixParser.ROW);
	                        break;
	                    case informixParser.LAST:
	                        this.state = 3108;
	                        this.match(informixParser.LAST);
	                        this.state = 3109;
	                        this.match(informixParser.ROW);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 4:
	                    this.state = 3112;
	                    _la = this._input.LA(1);
	                    if(!(_la===informixParser.AFTER || _la===informixParser.BEFORE)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3113;
	                    this.match(informixParser.GROUP);
	                    this.state = 3114;
	                    this.match(informixParser.OF);
	                    this.state = 3115;
	                    this.variable();
	                    break;

	                }
	                this.state = 3118;
	                this.codeBlock();
	                this.state = 3121; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===informixParser.AFTER || _la===informixParser.BEFORE || _la===informixParser.FIRST || _la===informixParser.ON || _la===informixParser.PAGE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eol() {
	    let localctx = new EolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, informixParser.RULE_eol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3125;
	        this.match(informixParser.EOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedNumber() {
	    let localctx = new UnsignedNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, informixParser.RULE_unsignedNumber);
	    try {
	        this.state = 3129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.NUM_INT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3127;
	            this.unsignedInteger();
	            break;
	        case informixParser.NUM_REAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3128;
	            this.unsignedReal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedInteger() {
	    let localctx = new UnsignedIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, informixParser.RULE_unsignedInteger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3131;
	        this.match(informixParser.NUM_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedReal() {
	    let localctx = new UnsignedRealContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, informixParser.RULE_unsignedReal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3133;
	        this.match(informixParser.NUM_REAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sign() {
	    let localctx = new SignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, informixParser.RULE_sign);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3135;
	        _la = this._input.LA(1);
	        if(!(_la===informixParser.PLUS || _la===informixParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantIdentifier() {
	    let localctx = new ConstantIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, informixParser.RULE_constantIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 3139;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case informixParser.ACCEPT:
	        case informixParser.ASCII:
	        case informixParser.COUNT:
	        case informixParser.CURRENT:
	        case informixParser.FALSE:
	        case informixParser.FIRST:
	        case informixParser.FOUND:
	        case informixParser.GROUP:
	        case informixParser.HIDE:
	        case informixParser.INDEX:
	        case informixParser.INT_FLAG:
	        case informixParser.INTERRUPT:
	        case informixParser.LAST:
	        case informixParser.LENGTH:
	        case informixParser.LINENO:
	        case informixParser.MDY:
	        case informixParser.NO:
	        case informixParser.NOT:
	        case informixParser.NOTFOUND:
	        case informixParser.NULL_:
	        case informixParser.PAGENO:
	        case informixParser.REAL:
	        case informixParser.SIZE:
	        case informixParser.SQL:
	        case informixParser.STATUS:
	        case informixParser.TEMP:
	        case informixParser.TIME:
	        case informixParser.TODAY:
	        case informixParser.TRUE:
	        case informixParser.USER:
	        case informixParser.WEEKDAY:
	        case informixParser.WAIT:
	        case informixParser.WORK:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3137;
	            _la = this._input.LA(1);
	            if(!(_la===informixParser.ACCEPT || _la===informixParser.ASCII || _la===informixParser.COUNT || _la===informixParser.CURRENT || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (informixParser.FALSE - 101)) | (1 << (informixParser.FIRST - 101)) | (1 << (informixParser.FOUND - 101)) | (1 << (informixParser.GROUP - 101)) | (1 << (informixParser.HIDE - 101)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (informixParser.INDEX - 136)) | (1 << (informixParser.INT_FLAG - 136)) | (1 << (informixParser.INTERRUPT - 136)) | (1 << (informixParser.LAST - 136)) | (1 << (informixParser.LENGTH - 136)) | (1 << (informixParser.LINENO - 136)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (informixParser.MDY - 176)) | (1 << (informixParser.NO - 176)) | (1 << (informixParser.NOT - 176)) | (1 << (informixParser.NOTFOUND - 176)) | (1 << (informixParser.NULL_ - 176)))) !== 0) || _la===informixParser.PAGENO || _la===informixParser.REAL || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (informixParser.SIZE - 252)) | (1 << (informixParser.SQL - 252)) | (1 << (informixParser.STATUS - 252)) | (1 << (informixParser.TEMP - 252)) | (1 << (informixParser.TIME - 252)) | (1 << (informixParser.TODAY - 252)) | (1 << (informixParser.TRUE - 252)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (informixParser.USER - 290)) | (1 << (informixParser.WEEKDAY - 290)) | (1 << (informixParser.WAIT - 290)) | (1 << (informixParser.WORK - 290)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case informixParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3138;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

informixParser.EOF = antlr4.Token.EOF;
informixParser.ABSOLUTE = 1;
informixParser.AFTER = 2;
informixParser.ACCEPT = 3;
informixParser.AGGREGATE = 4;
informixParser.ALLOCATE = 5;
informixParser.ALL = 6;
informixParser.ALL_ROWS = 7;
informixParser.AND = 8;
informixParser.ANY = 9;
informixParser.AS = 10;
informixParser.ASC = 11;
informixParser.ASCII = 12;
informixParser.AT = 13;
informixParser.ATTRIBUTE = 14;
informixParser.ATTRIBUTES = 15;
informixParser.AVERAGE = 16;
informixParser.AVG = 17;
informixParser.ARRAY = 18;
informixParser.BEFORE = 19;
informixParser.BEGIN = 20;
informixParser.BETWEEN = 21;
informixParser.BIGINT = 22;
informixParser.BLACK = 23;
informixParser.BLINK = 24;
informixParser.BLUE = 25;
informixParser.BOLD = 26;
informixParser.BORDER = 27;
informixParser.BOTTOM = 28;
informixParser.BUFFERED = 29;
informixParser.BY = 30;
informixParser.BYTE = 31;
informixParser.CACHE = 32;
informixParser.CALL = 33;
informixParser.CASE = 34;
informixParser.CHAR = 35;
informixParser.CHARARACTER = 36;
informixParser.CHAR_LENGTH = 37;
informixParser.CHECK = 38;
informixParser.CLEAR = 39;
informixParser.CLIPPED = 40;
informixParser.CLOSE = 41;
informixParser.CLUSTER = 42;
informixParser.COLUMN = 43;
informixParser.COLUMNS = 44;
informixParser.COMMAND = 45;
informixParser.COMMENT = 46;
informixParser.COMMIT = 47;
informixParser.COMMITTED = 48;
informixParser.CONSTANT = 49;
informixParser.CONSTRAINED = 50;
informixParser.CONSTRAINT = 51;
informixParser.CONSTRUCT = 52;
informixParser.CONTINUE = 53;
informixParser.COUNT = 54;
informixParser.COPY = 55;
informixParser.CRCOLS = 56;
informixParser.CREATE = 57;
informixParser.CURRENT = 58;
informixParser.CURSOR = 59;
informixParser.CYAN = 60;
informixParser.DATABASE = 61;
informixParser.DATE = 62;
informixParser.DATETIME = 63;
informixParser.DAY = 64;
informixParser.DEALLOCATE = 65;
informixParser.DEC = 66;
informixParser.DECIMAL = 67;
informixParser.DECODE = 68;
informixParser.DECLARE = 69;
informixParser.DEFAULT = 70;
informixParser.DEFAULTS = 71;
informixParser.DEFER = 72;
informixParser.DEFINE = 73;
informixParser.DELETE = 74;
informixParser.DELIMITER = 75;
informixParser.DESC = 76;
informixParser.DIM = 77;
informixParser.DIMENSIONS = 78;
informixParser.DIRTY = 79;
informixParser.DISPLAY = 80;
informixParser.DISTINCT = 81;
informixParser.DO = 82;
informixParser.DOUBLE = 83;
informixParser.DOWN = 84;
informixParser.DROP = 85;
informixParser.DYNAMIC = 86;
informixParser.ELSE = 87;
informixParser.END = 88;
informixParser.ERROR = 89;
informixParser.ESCAPE = 90;
informixParser.EVERY = 91;
informixParser.EXCLUSIVE = 92;
informixParser.EXEC = 93;
informixParser.EXECUTE = 94;
informixParser.EXIT = 95;
informixParser.EXISTS = 96;
informixParser.EXPLAIN = 97;
informixParser.EXTEND = 98;
informixParser.EXTENT = 99;
informixParser.EXTERNAL = 100;
informixParser.FALSE = 101;
informixParser.FETCH = 102;
informixParser.FIELD = 103;
informixParser.FIELD_TOUCHED = 104;
informixParser.FILE = 105;
informixParser.FINISH = 106;
informixParser.FIRST = 107;
informixParser.FIRST_ROWS = 108;
informixParser.FLOAT = 109;
informixParser.FLUSH = 110;
informixParser.FOR = 111;
informixParser.FORM = 112;
informixParser.FORMAT = 113;
informixParser.FORMONLY = 114;
informixParser.FOREACH = 115;
informixParser.FOUND = 116;
informixParser.FRACTION = 117;
informixParser.FREE = 118;
informixParser.FROM = 119;
informixParser.FUNCTION = 120;
informixParser.GET_FLDBUF = 121;
informixParser.GLOBALS = 122;
informixParser.GO = 123;
informixParser.GOTO = 124;
informixParser.GREEN = 125;
informixParser.GROUP = 126;
informixParser.HAVING = 127;
informixParser.HEADER = 128;
informixParser.HELP = 129;
informixParser.HIDE = 130;
informixParser.HOLD = 131;
informixParser.HOUR = 132;
informixParser.IF = 133;
informixParser.IN = 134;
informixParser.INNER = 135;
informixParser.INDEX = 136;
informixParser.INDICATOR = 137;
informixParser.INFIELD = 138;
informixParser.INITIALIZE = 139;
informixParser.INPUT = 140;
informixParser.INSERT = 141;
informixParser.INSTRUCTIONS = 142;
informixParser.INTO = 143;
informixParser.INT = 144;
informixParser.INT_FLAG = 145;
informixParser.INTEGER = 146;
informixParser.INTERRUPT = 147;
informixParser.INTERVAL = 148;
informixParser.INVISIBLE = 149;
informixParser.IS = 150;
informixParser.ISNULL = 151;
informixParser.ISOLATION = 152;
informixParser.JOIN = 153;
informixParser.KEY = 154;
informixParser.LABEL = 155;
informixParser.LAST = 156;
informixParser.LEFT = 157;
informixParser.LENGTH = 158;
informixParser.LET = 159;
informixParser.LIKE = 160;
informixParser.LINE = 161;
informixParser.LINENO = 162;
informixParser.LINES = 163;
informixParser.LOAD = 164;
informixParser.LOCATE = 165;
informixParser.LOCK = 166;
informixParser.LOG = 167;
informixParser.LONG = 168;
informixParser.MAGENTA = 169;
informixParser.MATCHES = 170;
informixParser.MENU = 171;
informixParser.MESSAGE = 172;
informixParser.MAIN = 173;
informixParser.MARGIN = 174;
informixParser.MAX = 175;
informixParser.MDY = 176;
informixParser.MIN = 177;
informixParser.MINUTE = 178;
informixParser.MOD = 179;
informixParser.MODE = 180;
informixParser.MODULE = 181;
informixParser.MONTH = 182;
informixParser.MONEY = 183;
informixParser.NCHAR = 184;
informixParser.NAME = 185;
informixParser.NEED = 186;
informixParser.NEXT = 187;
informixParser.NEW = 188;
informixParser.NORMAL = 189;
informixParser.NO = 190;
informixParser.NOT = 191;
informixParser.NOTFOUND = 192;
informixParser.NOW = 193;
informixParser.NUMERIC = 194;
informixParser.NULL_ = 195;
informixParser.NVARCHAR = 196;
informixParser.NVL = 197;
informixParser.OF = 198;
informixParser.OFF = 199;
informixParser.ON = 200;
informixParser.OPEN = 201;
informixParser.OPTION = 202;
informixParser.OPTIONS = 203;
informixParser.OR = 204;
informixParser.ORD = 205;
informixParser.ORDER = 206;
informixParser.OUTPUT = 207;
informixParser.OUTER = 208;
informixParser.OTHERWISE = 209;
informixParser.PAGE = 210;
informixParser.PAGENO = 211;
informixParser.PAUSE = 212;
informixParser.PERCENT = 213;
informixParser.PIPE = 214;
informixParser.PRECISION = 215;
informixParser.PREPARE = 216;
informixParser.PREVIOUS = 217;
informixParser.PRINT = 218;
informixParser.PRINTER = 219;
informixParser.PROGRAM = 220;
informixParser.PROMPT = 221;
informixParser.PUT = 222;
informixParser.QUIT = 223;
informixParser.QUIT_FLAG = 224;
informixParser.RECORD = 225;
informixParser.REAL = 226;
informixParser.READ = 227;
informixParser.RED = 228;
informixParser.RELATIVE = 229;
informixParser.REMOVE = 230;
informixParser.REOPTIMIZATION = 231;
informixParser.REPEATABLE = 232;
informixParser.REPEAT = 233;
informixParser.REPORT = 234;
informixParser.RESIZE = 235;
informixParser.RETURN = 236;
informixParser.RETURNING = 237;
informixParser.REVERSE = 238;
informixParser.RIGHT = 239;
informixParser.ROLLBACK = 240;
informixParser.ROW = 241;
informixParser.ROWS = 242;
informixParser.RUN = 243;
informixParser.SCREEN = 244;
informixParser.SCROLL = 245;
informixParser.SECOND = 246;
informixParser.SKIP2 = 247;
informixParser.SELECT = 248;
informixParser.SET = 249;
informixParser.SHARE = 250;
informixParser.SHOW = 251;
informixParser.SIZE = 252;
informixParser.SLEEP = 253;
informixParser.SMALLFLOAT = 254;
informixParser.SMALLINT = 255;
informixParser.SPACE = 256;
informixParser.SPACES = 257;
informixParser.SQL = 258;
informixParser.SQLERROR = 259;
informixParser.SQLWARNING = 260;
informixParser.START = 261;
informixParser.STABILITY = 262;
informixParser.STATISTICS = 263;
informixParser.STATUS = 264;
informixParser.STOP = 265;
informixParser.SUM = 266;
informixParser.TABLE = 267;
informixParser.TABLES = 268;
informixParser.TERMINATE = 269;
informixParser.TEMP = 270;
informixParser.TEXT = 271;
informixParser.THEN = 272;
informixParser.THROUGH = 273;
informixParser.THRU = 274;
informixParser.TIME = 275;
informixParser.TO = 276;
informixParser.TODAY = 277;
informixParser.TOP = 278;
informixParser.TRAILER = 279;
informixParser.TRUE = 280;
informixParser.TYPE = 281;
informixParser.UNCONSTRAINED = 282;
informixParser.UNDERLINE = 283;
informixParser.UNION = 284;
informixParser.UNIQUE = 285;
informixParser.UNITS = 286;
informixParser.UNLOAD = 287;
informixParser.UP = 288;
informixParser.UPDATE = 289;
informixParser.USER = 290;
informixParser.USING = 291;
informixParser.VALIDATE = 292;
informixParser.VALUES = 293;
informixParser.VARCHAR = 294;
informixParser.WEEKDAY = 295;
informixParser.VIEW = 296;
informixParser.WAIT = 297;
informixParser.WAITING = 298;
informixParser.WARNING = 299;
informixParser.WHEN = 300;
informixParser.WHENEVER = 301;
informixParser.WHERE = 302;
informixParser.WHILE = 303;
informixParser.WHITE = 304;
informixParser.WITH = 305;
informixParser.WITHOUT = 306;
informixParser.WINDOW = 307;
informixParser.WORDWRAP = 308;
informixParser.WORK = 309;
informixParser.YEAR = 310;
informixParser.YELLOW = 311;
informixParser.PLUS = 312;
informixParser.MINUS = 313;
informixParser.STAR = 314;
informixParser.SLASH = 315;
informixParser.COMMA = 316;
informixParser.SEMI = 317;
informixParser.COLON = 318;
informixParser.EQUAL = 319;
informixParser.NOT_EQUAL = 320;
informixParser.LT = 321;
informixParser.LE = 322;
informixParser.GE = 323;
informixParser.GT = 324;
informixParser.LPAREN = 325;
informixParser.RPAREN = 326;
informixParser.LBRACK = 327;
informixParser.RBRACK = 328;
informixParser.DOT = 329;
informixParser.ATSYMBOL = 330;
informixParser.DOUBLEVERTBAR = 331;
informixParser.IDENT = 332;
informixParser.STRING_LITERAL = 333;
informixParser.NUM_INT = 334;
informixParser.NUM_REAL = 335;
informixParser.HEX_DIGIT = 336;
informixParser.SL_COMMENT = 337;
informixParser.SL_COMMENT_2 = 338;
informixParser.EOL = 339;
informixParser.WS = 340;
informixParser.CHARACTER = 341;
informixParser.ESC = 342;
informixParser.QUOTED_STRING = 343;
informixParser.DIV = 344;
informixParser.STEP = 345;
informixParser.MEMORY = 346;
informixParser.SAME = 347;
informixParser.WRAP = 348;
informixParser.PRIOR = 349;
informixParser.SECONDS = 350;

informixParser.RULE_compilation_unit = 0;
informixParser.RULE_identifier = 1;
informixParser.RULE_mainBlock = 2;
informixParser.RULE_mainStatements = 3;
informixParser.RULE_deferStatement = 4;
informixParser.RULE_functionOrReportDefinitions = 5;
informixParser.RULE_returnStatement = 6;
informixParser.RULE_functionDefinition = 7;
informixParser.RULE_parameterList = 8;
informixParser.RULE_parameterGroup = 9;
informixParser.RULE_globalDeclaration = 10;
informixParser.RULE_typeDeclarations = 11;
informixParser.RULE_typeDeclaration = 12;
informixParser.RULE_variableDeclaration = 13;
informixParser.RULE_type_ = 14;
informixParser.RULE_indirectType = 15;
informixParser.RULE_typeIdentifier = 16;
informixParser.RULE_largeType = 17;
informixParser.RULE_numberType = 18;
informixParser.RULE_charType = 19;
informixParser.RULE_timeType = 20;
informixParser.RULE_datetimeQualifier = 21;
informixParser.RULE_intervalQualifier = 22;
informixParser.RULE_unitType = 23;
informixParser.RULE_yearQualifier = 24;
informixParser.RULE_monthQualifier = 25;
informixParser.RULE_dayQualifier = 26;
informixParser.RULE_hourQualifier = 27;
informixParser.RULE_minuteQualifier = 28;
informixParser.RULE_secondQualifier = 29;
informixParser.RULE_fractionQualifier = 30;
informixParser.RULE_structuredType = 31;
informixParser.RULE_recordType = 32;
informixParser.RULE_arrayIndexer = 33;
informixParser.RULE_arrayType = 34;
informixParser.RULE_dynArrayType = 35;
informixParser.RULE_string = 36;
informixParser.RULE_statement = 37;
informixParser.RULE_codeBlock = 38;
informixParser.RULE_label = 39;
informixParser.RULE_unlabelledStatement = 40;
informixParser.RULE_simpleStatement = 41;
informixParser.RULE_runStatement = 42;
informixParser.RULE_assignmentStatement = 43;
informixParser.RULE_procedureStatement = 44;
informixParser.RULE_procedureIdentifier = 45;
informixParser.RULE_actualParameter = 46;
informixParser.RULE_gotoStatement = 47;
informixParser.RULE_condition = 48;
informixParser.RULE_logicalTerm = 49;
informixParser.RULE_logicalFactor = 50;
informixParser.RULE_quantifiedFactor = 51;
informixParser.RULE_expressionSet = 52;
informixParser.RULE_subquery = 53;
informixParser.RULE_sqlExpression = 54;
informixParser.RULE_sqlAlias = 55;
informixParser.RULE_sqlTerm = 56;
informixParser.RULE_sqlMultiply = 57;
informixParser.RULE_sqlFactor = 58;
informixParser.RULE_sqlFactor2 = 59;
informixParser.RULE_sqlExpressionList = 60;
informixParser.RULE_sqlLiteral = 61;
informixParser.RULE_sqlVariable = 62;
informixParser.RULE_sqlFunction = 63;
informixParser.RULE_dateFunction = 64;
informixParser.RULE_numberFunction = 65;
informixParser.RULE_charFunction = 66;
informixParser.RULE_groupFunction = 67;
informixParser.RULE_otherFunction = 68;
informixParser.RULE_sqlPseudoColumn = 69;
informixParser.RULE_relationalOperator = 70;
informixParser.RULE_ifCondition = 71;
informixParser.RULE_ifCondition2 = 72;
informixParser.RULE_ifLogicalTerm = 73;
informixParser.RULE_expression = 74;
informixParser.RULE_ifLogicalFactor = 75;
informixParser.RULE_simpleExpression = 76;
informixParser.RULE_addingOperator = 77;
informixParser.RULE_term = 78;
informixParser.RULE_multiplyingOperator = 79;
informixParser.RULE_factor = 80;
informixParser.RULE_functionDesignator = 81;
informixParser.RULE_functionIdentifier = 82;
informixParser.RULE_unsignedConstant = 83;
informixParser.RULE_constant = 84;
informixParser.RULE_numericConstant = 85;
informixParser.RULE_variable = 86;
informixParser.RULE_entireVariable = 87;
informixParser.RULE_variableIdentifier = 88;
informixParser.RULE_indexingVariable = 89;
informixParser.RULE_componentVariable = 90;
informixParser.RULE_recordVariable = 91;
informixParser.RULE_fieldIdentifier = 92;
informixParser.RULE_structuredStatement = 93;
informixParser.RULE_conditionalStatement = 94;
informixParser.RULE_ifStatement = 95;
informixParser.RULE_repetetiveStatement = 96;
informixParser.RULE_whileStatement = 97;
informixParser.RULE_forStatement = 98;
informixParser.RULE_forList = 99;
informixParser.RULE_controlVariable = 100;
informixParser.RULE_initialValue = 101;
informixParser.RULE_finalValue = 102;
informixParser.RULE_forEachStatement = 103;
informixParser.RULE_variableList = 104;
informixParser.RULE_variableOrConstantList = 105;
informixParser.RULE_caseStatement = 106;
informixParser.RULE_otherFGLStatement = 107;
informixParser.RULE_otherProgramFlowStatement = 108;
informixParser.RULE_exitTypes = 109;
informixParser.RULE_exitStatements = 110;
informixParser.RULE_continueStatements = 111;
informixParser.RULE_otherStorageStatement = 112;
informixParser.RULE_printExpressionItem = 113;
informixParser.RULE_printExpressionList = 114;
informixParser.RULE_reportStatement = 115;
informixParser.RULE_fieldName = 116;
informixParser.RULE_thruNotation = 117;
informixParser.RULE_fieldList = 118;
informixParser.RULE_keyList = 119;
informixParser.RULE_constructEvents = 120;
informixParser.RULE_constructInsideStatement = 121;
informixParser.RULE_specialAttribute = 122;
informixParser.RULE_attribute = 123;
informixParser.RULE_attributeList = 124;
informixParser.RULE_constructGroupStatement = 125;
informixParser.RULE_constructStatement = 126;
informixParser.RULE_displayArrayStatement = 127;
informixParser.RULE_displayInsideStatement = 128;
informixParser.RULE_displayEvents = 129;
informixParser.RULE_displayStatement = 130;
informixParser.RULE_errorStatement = 131;
informixParser.RULE_messageStatement = 132;
informixParser.RULE_promptStatement = 133;
informixParser.RULE_inputEvents = 134;
informixParser.RULE_inputInsideStatement = 135;
informixParser.RULE_inputGroupStatement = 136;
informixParser.RULE_inputStatement = 137;
informixParser.RULE_inputArrayStatement = 138;
informixParser.RULE_menuEvents = 139;
informixParser.RULE_menuInsideStatement = 140;
informixParser.RULE_menuGroupStatement = 141;
informixParser.RULE_menuStatement = 142;
informixParser.RULE_reservedLinePosition = 143;
informixParser.RULE_specialWindowAttribute = 144;
informixParser.RULE_windowAttribute = 145;
informixParser.RULE_windowAttributeList = 146;
informixParser.RULE_optionStatement = 147;
informixParser.RULE_optionsStatement = 148;
informixParser.RULE_screenStatement = 149;
informixParser.RULE_sqlStatements = 150;
informixParser.RULE_cursorManipulationStatement = 151;
informixParser.RULE_columnsList = 152;
informixParser.RULE_statementId = 153;
informixParser.RULE_cursorName = 154;
informixParser.RULE_dataType = 155;
informixParser.RULE_columnItem = 156;
informixParser.RULE_dataDefinitionStatement = 157;
informixParser.RULE_dataManipulationStatement = 158;
informixParser.RULE_sqlSelectStatement = 159;
informixParser.RULE_columnsTableId = 160;
informixParser.RULE_selectList = 161;
informixParser.RULE_headSelectStatement = 162;
informixParser.RULE_tableQualifier = 163;
informixParser.RULE_tableIdentifier = 164;
informixParser.RULE_fromTable = 165;
informixParser.RULE_tableExpression = 166;
informixParser.RULE_fromSelectStatement = 167;
informixParser.RULE_aliasName = 168;
informixParser.RULE_mainSelectStatement = 169;
informixParser.RULE_unionSelectStatement = 170;
informixParser.RULE_simpleSelectStatement = 171;
informixParser.RULE_whereStatement = 172;
informixParser.RULE_groupByStatement = 173;
informixParser.RULE_havingStatement = 174;
informixParser.RULE_orderbyColumn = 175;
informixParser.RULE_orderbyStatement = 176;
informixParser.RULE_sqlLoadStatement = 177;
informixParser.RULE_sqlUnLoadStatement = 178;
informixParser.RULE_sqlInsertStatement = 179;
informixParser.RULE_sqlUpdateStatement = 180;
informixParser.RULE_sqlDeleteStatement = 181;
informixParser.RULE_actualParameterList = 182;
informixParser.RULE_dynamicManagementStatement = 183;
informixParser.RULE_queryOptimizationStatement = 184;
informixParser.RULE_databaseDeclaration = 185;
informixParser.RULE_clientServerStatement = 186;
informixParser.RULE_dataIntegrityStatement = 187;
informixParser.RULE_wheneverStatement = 188;
informixParser.RULE_wheneverType = 189;
informixParser.RULE_wheneverFlow = 190;
informixParser.RULE_reportDefinition = 191;
informixParser.RULE_outputReport = 192;
informixParser.RULE_formatReport = 193;
informixParser.RULE_eol = 194;
informixParser.RULE_unsignedNumber = 195;
informixParser.RULE_unsignedInteger = 196;
informixParser.RULE_unsignedReal = 197;
informixParser.RULE_sign = 198;
informixParser.RULE_constantIdentifier = 199;

class Compilation_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_compilation_unit;
    }

	mainBlock() {
	    return this.getTypedRuleContext(MainBlockContext,0);
	};

	EOF() {
	    return this.getToken(informixParser.EOF, 0);
	};

	databaseDeclaration() {
	    return this.getTypedRuleContext(DatabaseDeclarationContext,0);
	};

	globalDeclaration() {
	    return this.getTypedRuleContext(GlobalDeclarationContext,0);
	};

	typeDeclarations() {
	    return this.getTypedRuleContext(TypeDeclarationsContext,0);
	};

	functionOrReportDefinitions() {
	    return this.getTypedRuleContext(FunctionOrReportDefinitionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCompilation_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCompilation_unit(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(informixParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class MainBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_mainBlock;
    }

	MAIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MAIN);
	    } else {
	        return this.getToken(informixParser.MAIN, i);
	    }
	};


	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	typeDeclarations() {
	    return this.getTypedRuleContext(TypeDeclarationsContext,0);
	};

	mainStatements() {
	    return this.getTypedRuleContext(MainStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMainBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMainBlock(this);
		}
	}


}



class MainStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_mainStatements;
    }

	deferStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeferStatementContext);
	    } else {
	        return this.getTypedRuleContext(DeferStatementContext,i);
	    }
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMainStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMainStatements(this);
		}
	}


}



class DeferStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_deferStatement;
    }

	DEFER() {
	    return this.getToken(informixParser.DEFER, 0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	INTERRUPT() {
	    return this.getToken(informixParser.INTERRUPT, 0);
	};

	QUIT() {
	    return this.getToken(informixParser.QUIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDeferStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDeferStatement(this);
		}
	}


}



class FunctionOrReportDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_functionOrReportDefinitions;
    }

	reportDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ReportDefinitionContext,i);
	    }
	};

	functionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFunctionOrReportDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFunctionOrReportDefinitions(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(informixParser.RETURN, 0);
	};

	variableOrConstantList() {
	    return this.getTypedRuleContext(VariableOrConstantListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_functionDefinition;
    }

	FUNCTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.FUNCTION);
	    } else {
	        return this.getToken(informixParser.FUNCTION, i);
	    }
	};


	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	typeDeclarations() {
	    return this.getTypedRuleContext(TypeDeclarationsContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_parameterList;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	parameterGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterGroupContext);
	    } else {
	        return this.getTypedRuleContext(ParameterGroupContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class ParameterGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_parameterGroup;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterParameterGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitParameterGroup(this);
		}
	}


}



class GlobalDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_globalDeclaration;
    }

	GLOBALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.GLOBALS);
	    } else {
	        return this.getToken(informixParser.GLOBALS, i);
	    }
	};


	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	typeDeclarations() {
	    return this.getTypedRuleContext(TypeDeclarationsContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterGlobalDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitGlobalDeclaration(this);
		}
	}


}



class TypeDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_typeDeclarations;
    }

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTypeDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTypeDeclarations(this);
		}
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_typeDeclaration;
    }

	DEFINE() {
	    return this.getToken(informixParser.DEFINE, 0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_variableDeclaration;
    }

	constantIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantIdentifierContext,i);
	    }
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_type_;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	indirectType() {
	    return this.getTypedRuleContext(IndirectTypeContext,0);
	};

	largeType() {
	    return this.getTypedRuleContext(LargeTypeContext,0);
	};

	structuredType() {
	    return this.getTypedRuleContext(StructuredTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitType_(this);
		}
	}


}



class IndirectTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_indirectType;
    }

	LIKE() {
	    return this.getToken(informixParser.LIKE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIndirectType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIndirectType(this);
		}
	}


}



class TypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_typeIdentifier;
    }

	charType() {
	    return this.getTypedRuleContext(CharTypeContext,0);
	};

	numberType() {
	    return this.getTypedRuleContext(NumberTypeContext,0);
	};

	timeType() {
	    return this.getTypedRuleContext(TimeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}


}



class LargeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_largeType;
    }

	TEXT() {
	    return this.getToken(informixParser.TEXT, 0);
	};

	BYTE() {
	    return this.getToken(informixParser.BYTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterLargeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitLargeType(this);
		}
	}


}



class NumberTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_numberType;
    }

	BIGINT() {
	    return this.getToken(informixParser.BIGINT, 0);
	};

	INTEGER() {
	    return this.getToken(informixParser.INTEGER, 0);
	};

	INT() {
	    return this.getToken(informixParser.INT, 0);
	};

	SMALLINT() {
	    return this.getToken(informixParser.SMALLINT, 0);
	};

	REAL() {
	    return this.getToken(informixParser.REAL, 0);
	};

	SMALLFLOAT() {
	    return this.getToken(informixParser.SMALLFLOAT, 0);
	};

	DECIMAL() {
	    return this.getToken(informixParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(informixParser.DEC, 0);
	};

	NUMERIC() {
	    return this.getToken(informixParser.NUMERIC, 0);
	};

	MONEY() {
	    return this.getToken(informixParser.MONEY, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	COMMA() {
	    return this.getToken(informixParser.COMMA, 0);
	};

	FLOAT() {
	    return this.getToken(informixParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(informixParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterNumberType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitNumberType(this);
		}
	}


}



class CharTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_charType;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	VARCHAR() {
	    return this.getToken(informixParser.VARCHAR, 0);
	};

	NVARCHAR() {
	    return this.getToken(informixParser.NVARCHAR, 0);
	};

	COMMA() {
	    return this.getToken(informixParser.COMMA, 0);
	};

	CHAR() {
	    return this.getToken(informixParser.CHAR, 0);
	};

	NCHAR() {
	    return this.getToken(informixParser.NCHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(informixParser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCharType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCharType(this);
		}
	}


}



class TimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_timeType;
    }

	DATE() {
	    return this.getToken(informixParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(informixParser.DATETIME, 0);
	};

	datetimeQualifier() {
	    return this.getTypedRuleContext(DatetimeQualifierContext,0);
	};

	INTERVAL() {
	    return this.getToken(informixParser.INTERVAL, 0);
	};

	intervalQualifier() {
	    return this.getTypedRuleContext(IntervalQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTimeType(this);
		}
	}


}



class DatetimeQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_datetimeQualifier;
    }

	YEAR() {
	    return this.getToken(informixParser.YEAR, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	yearQualifier() {
	    return this.getTypedRuleContext(YearQualifierContext,0);
	};

	MONTH() {
	    return this.getToken(informixParser.MONTH, 0);
	};

	monthQualifier() {
	    return this.getTypedRuleContext(MonthQualifierContext,0);
	};

	DAY() {
	    return this.getToken(informixParser.DAY, 0);
	};

	dayQualifier() {
	    return this.getTypedRuleContext(DayQualifierContext,0);
	};

	HOUR() {
	    return this.getToken(informixParser.HOUR, 0);
	};

	hourQualifier() {
	    return this.getTypedRuleContext(HourQualifierContext,0);
	};

	MINUTE() {
	    return this.getToken(informixParser.MINUTE, 0);
	};

	minuteQualifier() {
	    return this.getTypedRuleContext(MinuteQualifierContext,0);
	};

	SECOND() {
	    return this.getToken(informixParser.SECOND, 0);
	};

	secondQualifier() {
	    return this.getTypedRuleContext(SecondQualifierContext,0);
	};

	FRACTION() {
	    return this.getToken(informixParser.FRACTION, 0);
	};

	fractionQualifier() {
	    return this.getTypedRuleContext(FractionQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDatetimeQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDatetimeQualifier(this);
		}
	}


}



class IntervalQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_intervalQualifier;
    }

	YEAR() {
	    return this.getToken(informixParser.YEAR, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	yearQualifier() {
	    return this.getTypedRuleContext(YearQualifierContext,0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	MONTH() {
	    return this.getToken(informixParser.MONTH, 0);
	};

	monthQualifier() {
	    return this.getTypedRuleContext(MonthQualifierContext,0);
	};

	DAY() {
	    return this.getToken(informixParser.DAY, 0);
	};

	dayQualifier() {
	    return this.getTypedRuleContext(DayQualifierContext,0);
	};

	HOUR() {
	    return this.getToken(informixParser.HOUR, 0);
	};

	hourQualifier() {
	    return this.getTypedRuleContext(HourQualifierContext,0);
	};

	MINUTE() {
	    return this.getToken(informixParser.MINUTE, 0);
	};

	minuteQualifier() {
	    return this.getTypedRuleContext(MinuteQualifierContext,0);
	};

	SECOND() {
	    return this.getToken(informixParser.SECOND, 0);
	};

	secondQualifier() {
	    return this.getTypedRuleContext(SecondQualifierContext,0);
	};

	FRACTION() {
	    return this.getToken(informixParser.FRACTION, 0);
	};

	fractionQualifier() {
	    return this.getTypedRuleContext(FractionQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIntervalQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIntervalQualifier(this);
		}
	}


}



class UnitTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unitType;
    }

	yearQualifier() {
	    return this.getTypedRuleContext(YearQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnitType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnitType(this);
		}
	}


}



class YearQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_yearQualifier;
    }

	YEAR() {
	    return this.getToken(informixParser.YEAR, 0);
	};

	monthQualifier() {
	    return this.getTypedRuleContext(MonthQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterYearQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitYearQualifier(this);
		}
	}


}



class MonthQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_monthQualifier;
    }

	MONTH() {
	    return this.getToken(informixParser.MONTH, 0);
	};

	dayQualifier() {
	    return this.getTypedRuleContext(DayQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMonthQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMonthQualifier(this);
		}
	}


}



class DayQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dayQualifier;
    }

	DAY() {
	    return this.getToken(informixParser.DAY, 0);
	};

	hourQualifier() {
	    return this.getTypedRuleContext(HourQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDayQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDayQualifier(this);
		}
	}


}



class HourQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_hourQualifier;
    }

	HOUR() {
	    return this.getToken(informixParser.HOUR, 0);
	};

	minuteQualifier() {
	    return this.getTypedRuleContext(MinuteQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterHourQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitHourQualifier(this);
		}
	}


}



class MinuteQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_minuteQualifier;
    }

	MINUTE() {
	    return this.getToken(informixParser.MINUTE, 0);
	};

	secondQualifier() {
	    return this.getTypedRuleContext(SecondQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMinuteQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMinuteQualifier(this);
		}
	}


}



class SecondQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_secondQualifier;
    }

	SECOND() {
	    return this.getToken(informixParser.SECOND, 0);
	};

	fractionQualifier() {
	    return this.getTypedRuleContext(FractionQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSecondQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSecondQualifier(this);
		}
	}


}



class FractionQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fractionQualifier;
    }

	FRACTION() {
	    return this.getToken(informixParser.FRACTION, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFractionQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFractionQualifier(this);
		}
	}


}



class StructuredTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_structuredType;
    }

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	dynArrayType() {
	    return this.getTypedRuleContext(DynArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterStructuredType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitStructuredType(this);
		}
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_recordType;
    }

	RECORD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RECORD);
	    } else {
	        return this.getToken(informixParser.RECORD, i);
	    }
	};


	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(informixParser.LIKE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterRecordType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitRecordType(this);
		}
	}


}



class ArrayIndexerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_arrayIndexer;
    }

	LBRACK() {
	    return this.getToken(informixParser.LBRACK, 0);
	};

	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(informixParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterArrayIndexer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitArrayIndexer(this);
		}
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_arrayType;
    }

	ARRAY() {
	    return this.getToken(informixParser.ARRAY, 0);
	};

	arrayIndexer() {
	    return this.getTypedRuleContext(ArrayIndexerContext,0);
	};

	OF() {
	    return this.getToken(informixParser.OF, 0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	largeType() {
	    return this.getTypedRuleContext(LargeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitArrayType(this);
		}
	}


}



class DynArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dynArrayType;
    }

	DYNAMIC() {
	    return this.getToken(informixParser.DYNAMIC, 0);
	};

	ARRAY() {
	    return this.getToken(informixParser.ARRAY, 0);
	};

	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	DIMENSIONS() {
	    return this.getToken(informixParser.DIMENSIONS, 0);
	};

	OF() {
	    return this.getToken(informixParser.OF, 0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDynArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDynArrayType(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_string;
    }

	STRING_LITERAL() {
	    return this.getToken(informixParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitString(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_statement;
    }

	unlabelledStatement() {
	    return this.getTypedRuleContext(UnlabelledStatementContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	COLON() {
	    return this.getToken(informixParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitStatement(this);
		}
	}


}



class CodeBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_codeBlock;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	databaseDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatabaseDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DatabaseDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCodeBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCodeBlock(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_label;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitLabel(this);
		}
	}


}



class UnlabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unlabelledStatement;
    }

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	structuredStatement() {
	    return this.getTypedRuleContext(StructuredStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnlabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnlabelledStatement(this);
		}
	}


}



class SimpleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_simpleStatement;
    }

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	procedureStatement() {
	    return this.getTypedRuleContext(ProcedureStatementContext,0);
	};

	sqlStatements() {
	    return this.getTypedRuleContext(SqlStatementsContext,0);
	};

	SEMI() {
	    return this.getToken(informixParser.SEMI, 0);
	};

	otherFGLStatement() {
	    return this.getTypedRuleContext(OtherFGLStatementContext,0);
	};

	menuInsideStatement() {
	    return this.getTypedRuleContext(MenuInsideStatementContext,0);
	};

	constructInsideStatement() {
	    return this.getTypedRuleContext(ConstructInsideStatementContext,0);
	};

	displayInsideStatement() {
	    return this.getTypedRuleContext(DisplayInsideStatementContext,0);
	};

	inputInsideStatement() {
	    return this.getTypedRuleContext(InputInsideStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSimpleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSimpleStatement(this);
		}
	}


}



class RunStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_runStatement;
    }

	RUN() {
	    return this.getToken(informixParser.RUN, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	IN() {
	    return this.getToken(informixParser.IN, 0);
	};

	FORM() {
	    return this.getToken(informixParser.FORM, 0);
	};

	MODE() {
	    return this.getToken(informixParser.MODE, 0);
	};

	LINE() {
	    return this.getToken(informixParser.LINE, 0);
	};

	WITHOUT() {
	    return this.getToken(informixParser.WITHOUT, 0);
	};

	WAITING() {
	    return this.getToken(informixParser.WAITING, 0);
	};

	RETURNING() {
	    return this.getToken(informixParser.RETURNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterRunStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitRunStatement(this);
		}
	}


}



class AssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_assignmentStatement;
    }

	LET() {
	    return this.getToken(informixParser.LET, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	EQUAL() {
	    return this.getToken(informixParser.EQUAL, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterAssignmentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitAssignmentStatement(this);
		}
	}


}



class ProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_procedureStatement;
    }

	CALL() {
	    return this.getToken(informixParser.CALL, 0);
	};

	procedureIdentifier() {
	    return this.getTypedRuleContext(ProcedureIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	RETURNING() {
	    return this.getToken(informixParser.RETURNING, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	actualParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActualParameterContext);
	    } else {
	        return this.getTypedRuleContext(ActualParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitProcedureStatement(this);
		}
	}


}



class ProcedureIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_procedureIdentifier;
    }

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterProcedureIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitProcedureIdentifier(this);
		}
	}


}



class ActualParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_actualParameter;
    }

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterActualParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitActualParameter(this);
		}
	}


}



class GotoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_gotoStatement;
    }

	GOTO() {
	    return this.getToken(informixParser.GOTO, 0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	COLON() {
	    return this.getToken(informixParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitGotoStatement(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_condition;
    }

	TRUE() {
	    return this.getToken(informixParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(informixParser.FALSE, 0);
	};

	logicalTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalTermContext);
	    } else {
	        return this.getTypedRuleContext(LogicalTermContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.OR);
	    } else {
	        return this.getToken(informixParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCondition(this);
		}
	}


}



class LogicalTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_logicalTerm;
    }

	logicalFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalFactorContext);
	    } else {
	        return this.getTypedRuleContext(LogicalFactorContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.AND);
	    } else {
	        return this.getToken(informixParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterLogicalTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitLogicalTerm(this);
		}
	}


}



class LogicalFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_logicalFactor;
    }

	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	LIKE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LIKE);
	    } else {
	        return this.getToken(informixParser.LIKE, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NOT);
	    } else {
	        return this.getToken(informixParser.NOT, i);
	    }
	};


	ESC() {
	    return this.getToken(informixParser.ESC, 0);
	};

	QUOTED_STRING() {
	    return this.getToken(informixParser.QUOTED_STRING, 0);
	};

	BETWEEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.BETWEEN);
	    } else {
	        return this.getToken(informixParser.BETWEEN, i);
	    }
	};


	AND() {
	    return this.getToken(informixParser.AND, 0);
	};

	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.IS);
	    } else {
	        return this.getToken(informixParser.IS, i);
	    }
	};


	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NULL_);
	    } else {
	        return this.getToken(informixParser.NULL_, i);
	    }
	};


	quantifiedFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QuantifiedFactorContext);
	    } else {
	        return this.getTypedRuleContext(QuantifiedFactorContext,i);
	    }
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterLogicalFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitLogicalFactor(this);
		}
	}


}



class QuantifiedFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_quantifiedFactor;
    }

	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	relationalOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalOperatorContext);
	    } else {
	        return this.getTypedRuleContext(RelationalOperatorContext,i);
	    }
	};

	subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubqueryContext);
	    } else {
	        return this.getTypedRuleContext(SubqueryContext,i);
	    }
	};

	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ALL);
	    } else {
	        return this.getToken(informixParser.ALL, i);
	    }
	};


	ANY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ANY);
	    } else {
	        return this.getToken(informixParser.ANY, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.EXISTS);
	    } else {
	        return this.getToken(informixParser.EXISTS, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NOT);
	    } else {
	        return this.getToken(informixParser.NOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterQuantifiedFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitQuantifiedFactor(this);
		}
	}


}



class ExpressionSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_expressionSet;
    }

	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterExpressionSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitExpressionSet(this);
		}
	}


}



class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_subquery;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	sqlSelectStatement() {
	    return this.getTypedRuleContext(SqlSelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSubquery(this);
		}
	}


}



class SqlExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlExpression;
    }

	sqlTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlTermContext);
	    } else {
	        return this.getTypedRuleContext(SqlTermContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PLUS);
	    } else {
	        return this.getToken(informixParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MINUS);
	    } else {
	        return this.getToken(informixParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlExpression(this);
		}
	}


}



class SqlAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(informixParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlAlias(this);
		}
	}


}



class SqlTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlTerm;
    }

	sqlFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlFactorContext);
	    } else {
	        return this.getTypedRuleContext(SqlFactorContext,i);
	    }
	};

	sqlMultiply = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlMultiplyContext);
	    } else {
	        return this.getTypedRuleContext(SqlMultiplyContext,i);
	    }
	};

	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DIV);
	    } else {
	        return this.getToken(informixParser.DIV, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.SLASH);
	    } else {
	        return this.getToken(informixParser.SLASH, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlTerm(this);
		}
	}


}



class SqlMultiplyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlMultiply;
    }

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlMultiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlMultiply(this);
		}
	}


}



class SqlFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlFactor;
    }

	sqlFactor2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlFactor2Context);
	    } else {
	        return this.getTypedRuleContext(SqlFactor2Context,i);
	    }
	};

	DOUBLEVERTBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DOUBLEVERTBAR);
	    } else {
	        return this.getToken(informixParser.DOUBLEVERTBAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlFactor(this);
		}
	}


}



class SqlFactor2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlFactor2;
    }

	sqlVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlVariableContext);
	    } else {
	        return this.getTypedRuleContext(SqlVariableContext,i);
	    }
	};

	UNITS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.UNITS);
	    } else {
	        return this.getToken(informixParser.UNITS, i);
	    }
	};


	unitType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnitTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnitTypeContext,i);
	    }
	};

	sqlLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlLiteralContext);
	    } else {
	        return this.getTypedRuleContext(SqlLiteralContext,i);
	    }
	};

	groupFunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupFunctionContext);
	    } else {
	        return this.getTypedRuleContext(GroupFunctionContext,i);
	    }
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.STAR);
	    } else {
	        return this.getToken(informixParser.STAR, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ALL);
	    } else {
	        return this.getToken(informixParser.ALL, i);
	    }
	};


	DISTINCT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DISTINCT);
	    } else {
	        return this.getToken(informixParser.DISTINCT, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	sqlFunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlFunctionContext);
	    } else {
	        return this.getTypedRuleContext(SqlFunctionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PLUS);
	    } else {
	        return this.getToken(informixParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MINUS);
	    } else {
	        return this.getToken(informixParser.MINUS, i);
	    }
	};


	sqlExpressionList() {
	    return this.getTypedRuleContext(SqlExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlFactor2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlFactor2(this);
		}
	}


}



class SqlExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlExpressionList;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlExpressionList(this);
		}
	}


}



class SqlLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlLiteral;
    }

	unsignedConstant() {
	    return this.getTypedRuleContext(UnsignedConstantContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	NULL_() {
	    return this.getToken(informixParser.NULL_, 0);
	};

	FALSE() {
	    return this.getToken(informixParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(informixParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlLiteral(this);
		}
	}


}



class SqlVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlVariable;
    }

	columnsTableId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnsTableIdContext);
	    } else {
	        return this.getTypedRuleContext(ColumnsTableIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlVariable(this);
		}
	}


}



class SqlFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlFunction;
    }

	numberFunction() {
	    return this.getTypedRuleContext(NumberFunctionContext,0);
	};

	charFunction() {
	    return this.getTypedRuleContext(CharFunctionContext,0);
	};

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	otherFunction() {
	    return this.getTypedRuleContext(OtherFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlFunction(this);
		}
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dateFunction;
    }

	YEAR() {
	    return this.getToken(informixParser.YEAR, 0);
	};

	DATE() {
	    return this.getToken(informixParser.DATE, 0);
	};

	DAY() {
	    return this.getToken(informixParser.DAY, 0);
	};

	MONTH() {
	    return this.getToken(informixParser.MONTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDateFunction(this);
		}
	}


}



class NumberFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_numberFunction;
    }

	MOD() {
	    return this.getToken(informixParser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterNumberFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitNumberFunction(this);
		}
	}


}



class CharFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_charFunction;
    }

	LENGTH() {
	    return this.getToken(informixParser.LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCharFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCharFunction(this);
		}
	}


}



class GroupFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_groupFunction;
    }

	AVG() {
	    return this.getToken(informixParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(informixParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(informixParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(informixParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(informixParser.SUM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterGroupFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitGroupFunction(this);
		}
	}


}



class OtherFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_otherFunction;
    }

	DECODE() {
	    return this.getToken(informixParser.DECODE, 0);
	};

	NVL() {
	    return this.getToken(informixParser.NVL, 0);
	};

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOtherFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOtherFunction(this);
		}
	}


}



class SqlPseudoColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlPseudoColumn;
    }

	USER() {
	    return this.getToken(informixParser.USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlPseudoColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlPseudoColumn(this);
		}
	}


}



class RelationalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_relationalOperator;
    }

	EQUAL() {
	    return this.getToken(informixParser.EQUAL, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(informixParser.NOT_EQUAL, 0);
	};

	LE() {
	    return this.getToken(informixParser.LE, 0);
	};

	LT() {
	    return this.getToken(informixParser.LT, 0);
	};

	GE() {
	    return this.getToken(informixParser.GE, 0);
	};

	GT() {
	    return this.getToken(informixParser.GT, 0);
	};

	LIKE() {
	    return this.getToken(informixParser.LIKE, 0);
	};

	MATCHES() {
	    return this.getToken(informixParser.MATCHES, 0);
	};

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterRelationalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitRelationalOperator(this);
		}
	}


}



class IfConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_ifCondition;
    }

	TRUE() {
	    return this.getToken(informixParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(informixParser.FALSE, 0);
	};

	ifCondition2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfCondition2Context);
	    } else {
	        return this.getTypedRuleContext(IfCondition2Context,i);
	    }
	};

	relationalOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalOperatorContext);
	    } else {
	        return this.getTypedRuleContext(RelationalOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIfCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIfCondition(this);
		}
	}


}



class IfCondition2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_ifCondition2;
    }

	ifLogicalTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfLogicalTermContext);
	    } else {
	        return this.getTypedRuleContext(IfLogicalTermContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.OR);
	    } else {
	        return this.getToken(informixParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIfCondition2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIfCondition2(this);
		}
	}


}



class IfLogicalTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_ifLogicalTerm;
    }

	ifLogicalFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfLogicalFactorContext);
	    } else {
	        return this.getTypedRuleContext(IfLogicalFactorContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.AND);
	    } else {
	        return this.getToken(informixParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIfLogicalTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIfLogicalTerm(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_expression;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	CLIPPED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.CLIPPED);
	    } else {
	        return this.getToken(informixParser.CLIPPED, i);
	    }
	};


	USING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.USING);
	    } else {
	        return this.getToken(informixParser.USING, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitExpression(this);
		}
	}


}



class IfLogicalFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_ifLogicalFactor;
    }

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NOT);
	    } else {
	        return this.getToken(informixParser.NOT, i);
	    }
	};


	ifCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfConditionContext);
	    } else {
	        return this.getTypedRuleContext(IfConditionContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	simpleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIfLogicalFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIfLogicalFactor(this);
		}
	}


}



class SimpleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_simpleExpression;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	addingOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddingOperatorContext);
	    } else {
	        return this.getTypedRuleContext(AddingOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSimpleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSimpleExpression(this);
		}
	}


}



class AddingOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_addingOperator;
    }

	PLUS() {
	    return this.getToken(informixParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(informixParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterAddingOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitAddingOperator(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	multiplyingOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyingOperatorContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyingOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTerm(this);
		}
	}


}



class MultiplyingOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_multiplyingOperator;
    }

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	SLASH() {
	    return this.getToken(informixParser.SLASH, 0);
	};

	DIV() {
	    return this.getToken(informixParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(informixParser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMultiplyingOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMultiplyingOperator(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_factor;
    }

	functionDesignator() {
	    return this.getTypedRuleContext(FunctionDesignatorContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	UNITS() {
	    return this.getToken(informixParser.UNITS, 0);
	};

	unitType() {
	    return this.getTypedRuleContext(UnitTypeContext,0);
	};

	GROUP() {
	    return this.getToken(informixParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFactor(this);
		}
	}


}



class FunctionDesignatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_functionDesignator;
    }

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	actualParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActualParameterContext);
	    } else {
	        return this.getTypedRuleContext(ActualParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFunctionDesignator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFunctionDesignator(this);
		}
	}


}



class FunctionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_functionIdentifier;
    }

	DAY() {
	    return this.getToken(informixParser.DAY, 0);
	};

	YEAR() {
	    return this.getToken(informixParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(informixParser.MONTH, 0);
	};

	TODAY() {
	    return this.getToken(informixParser.TODAY, 0);
	};

	WEEKDAY() {
	    return this.getToken(informixParser.WEEKDAY, 0);
	};

	MDY() {
	    return this.getToken(informixParser.MDY, 0);
	};

	COLUMN() {
	    return this.getToken(informixParser.COLUMN, 0);
	};

	SUM() {
	    return this.getToken(informixParser.SUM, 0);
	};

	COUNT() {
	    return this.getToken(informixParser.COUNT, 0);
	};

	AVG() {
	    return this.getToken(informixParser.AVG, 0);
	};

	MIN() {
	    return this.getToken(informixParser.MIN, 0);
	};

	MAX() {
	    return this.getToken(informixParser.MAX, 0);
	};

	EXTEND() {
	    return this.getToken(informixParser.EXTEND, 0);
	};

	DATE() {
	    return this.getToken(informixParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(informixParser.TIME, 0);
	};

	INFIELD() {
	    return this.getToken(informixParser.INFIELD, 0);
	};

	PREPARE() {
	    return this.getToken(informixParser.PREPARE, 0);
	};

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFunctionIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFunctionIdentifier(this);
		}
	}


}



class UnsignedConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unsignedConstant;
    }

	unsignedNumber() {
	    return this.getTypedRuleContext(UnsignedNumberContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	NULL_() {
	    return this.getToken(informixParser.NULL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnsignedConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnsignedConstant(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constant;
    }

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstant(this);
		}
	}


}



class NumericConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_numericConstant;
    }

	unsignedNumber() {
	    return this.getTypedRuleContext(UnsignedNumberContext,0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterNumericConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitNumericConstant(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_variable;
    }

	entireVariable() {
	    return this.getTypedRuleContext(EntireVariableContext,0);
	};

	componentVariable() {
	    return this.getTypedRuleContext(ComponentVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitVariable(this);
		}
	}


}



class EntireVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_entireVariable;
    }

	variableIdentifier() {
	    return this.getTypedRuleContext(VariableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterEntireVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitEntireVariable(this);
		}
	}


}



class VariableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_variableIdentifier;
    }

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterVariableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitVariableIdentifier(this);
		}
	}


}



class IndexingVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_indexingVariable;
    }

	LBRACK() {
	    return this.getToken(informixParser.LBRACK, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(informixParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIndexingVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIndexingVariable(this);
		}
	}


}



class ComponentVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_componentVariable;
    }

	recordVariable() {
	    return this.getTypedRuleContext(RecordVariableContext,0);
	};

	indexingVariable() {
	    return this.getTypedRuleContext(IndexingVariableContext,0);
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	componentVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentVariableContext);
	    } else {
	        return this.getTypedRuleContext(ComponentVariableContext,i);
	    }
	};

	THROUGH() {
	    return this.getToken(informixParser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(informixParser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterComponentVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitComponentVariable(this);
		}
	}


}



class RecordVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_recordVariable;
    }

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterRecordVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitRecordVariable(this);
		}
	}


}



class FieldIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fieldIdentifier;
    }

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFieldIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFieldIdentifier(this);
		}
	}


}



class StructuredStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_structuredStatement;
    }

	conditionalStatement() {
	    return this.getTypedRuleContext(ConditionalStatementContext,0);
	};

	repetetiveStatement() {
	    return this.getTypedRuleContext(RepetetiveStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterStructuredStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitStructuredStatement(this);
		}
	}


}



class ConditionalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_conditionalStatement;
    }

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	caseStatement() {
	    return this.getTypedRuleContext(CaseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConditionalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConditionalStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_ifStatement;
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.IF);
	    } else {
	        return this.getToken(informixParser.IF, i);
	    }
	};


	ifCondition() {
	    return this.getTypedRuleContext(IfConditionContext,0);
	};

	THEN() {
	    return this.getToken(informixParser.THEN, 0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(informixParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class RepetetiveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_repetetiveStatement;
    }

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forEachStatement() {
	    return this.getTypedRuleContext(ForEachStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterRepetetiveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitRepetetiveStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_whileStatement;
    }

	WHILE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.WHILE);
	    } else {
	        return this.getToken(informixParser.WHILE, i);
	    }
	};


	ifCondition() {
	    return this.getTypedRuleContext(IfConditionContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_forStatement;
    }

	FOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.FOR);
	    } else {
	        return this.getToken(informixParser.FOR, i);
	    }
	};


	controlVariable() {
	    return this.getTypedRuleContext(ControlVariableContext,0);
	};

	EQUAL() {
	    return this.getToken(informixParser.EQUAL, 0);
	};

	forList() {
	    return this.getTypedRuleContext(ForListContext,0);
	};

	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	STEP() {
	    return this.getToken(informixParser.STEP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_forList;
    }

	initialValue() {
	    return this.getTypedRuleContext(InitialValueContext,0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	finalValue() {
	    return this.getTypedRuleContext(FinalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterForList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitForList(this);
		}
	}


}



class ControlVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_controlVariable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterControlVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitControlVariable(this);
		}
	}


}



class InitialValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_initialValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInitialValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInitialValue(this);
		}
	}


}



class FinalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_finalValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFinalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFinalValue(this);
		}
	}


}



class ForEachStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_forEachStatement;
    }

	FOREACH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.FOREACH);
	    } else {
	        return this.getToken(informixParser.FOREACH, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	eol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EolContext);
	    } else {
	        return this.getTypedRuleContext(EolContext,i);
	    }
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	USING() {
	    return this.getToken(informixParser.USING, 0);
	};

	variableList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableListContext);
	    } else {
	        return this.getTypedRuleContext(VariableListContext,i);
	    }
	};

	INTO() {
	    return this.getToken(informixParser.INTO, 0);
	};

	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	REOPTIMIZATION() {
	    return this.getToken(informixParser.REOPTIMIZATION, 0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterForEachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitForEachStatement(this);
		}
	}


}



class VariableListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_variableList;
    }

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterVariableList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitVariableList(this);
		}
	}


}



class VariableOrConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_variableOrConstantList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterVariableOrConstantList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitVariableOrConstantList(this);
		}
	}


}



class CaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_caseStatement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.CASE);
	    } else {
	        return this.getToken(informixParser.CASE, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.WHEN);
	    } else {
	        return this.getToken(informixParser.WHEN, i);
	    }
	};


	OTHERWISE() {
	    return this.getToken(informixParser.OTHERWISE, 0);
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	ifCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfConditionContext);
	    } else {
	        return this.getTypedRuleContext(IfConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCaseStatement(this);
		}
	}


}



class OtherFGLStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_otherFGLStatement;
    }

	otherProgramFlowStatement() {
	    return this.getTypedRuleContext(OtherProgramFlowStatementContext,0);
	};

	otherStorageStatement() {
	    return this.getTypedRuleContext(OtherStorageStatementContext,0);
	};

	reportStatement() {
	    return this.getTypedRuleContext(ReportStatementContext,0);
	};

	screenStatement() {
	    return this.getTypedRuleContext(ScreenStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOtherFGLStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOtherFGLStatement(this);
		}
	}


}



class OtherProgramFlowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_otherProgramFlowStatement;
    }

	runStatement() {
	    return this.getTypedRuleContext(RunStatementContext,0);
	};

	gotoStatement() {
	    return this.getTypedRuleContext(GotoStatementContext,0);
	};

	SLEEP() {
	    return this.getToken(informixParser.SLEEP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	exitStatements() {
	    return this.getTypedRuleContext(ExitStatementsContext,0);
	};

	continueStatements() {
	    return this.getTypedRuleContext(ContinueStatementsContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOtherProgramFlowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOtherProgramFlowStatement(this);
		}
	}


}



class ExitTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_exitTypes;
    }

	FOREACH() {
	    return this.getToken(informixParser.FOREACH, 0);
	};

	FOR() {
	    return this.getToken(informixParser.FOR, 0);
	};

	CASE() {
	    return this.getToken(informixParser.CASE, 0);
	};

	CONSTRUCT() {
	    return this.getToken(informixParser.CONSTRUCT, 0);
	};

	DISPLAY() {
	    return this.getToken(informixParser.DISPLAY, 0);
	};

	INPUT() {
	    return this.getToken(informixParser.INPUT, 0);
	};

	MENU() {
	    return this.getToken(informixParser.MENU, 0);
	};

	REPORT() {
	    return this.getToken(informixParser.REPORT, 0);
	};

	WHILE() {
	    return this.getToken(informixParser.WHILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterExitTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitExitTypes(this);
		}
	}


}



class ExitStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_exitStatements;
    }

	EXIT() {
	    return this.getToken(informixParser.EXIT, 0);
	};

	exitTypes() {
	    return this.getTypedRuleContext(ExitTypesContext,0);
	};

	PROGRAM() {
	    return this.getToken(informixParser.PROGRAM, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterExitStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitExitStatements(this);
		}
	}


}



class ContinueStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_continueStatements;
    }

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	exitTypes() {
	    return this.getTypedRuleContext(ExitTypesContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterContinueStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitContinueStatements(this);
		}
	}


}



class OtherStorageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_otherStorageStatement;
    }

	ALLOCATE() {
	    return this.getToken(informixParser.ALLOCATE, 0);
	};

	ARRAY() {
	    return this.getToken(informixParser.ARRAY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayIndexer() {
	    return this.getTypedRuleContext(ArrayIndexerContext,0);
	};

	LOCATE() {
	    return this.getToken(informixParser.LOCATE, 0);
	};

	variableList() {
	    return this.getTypedRuleContext(VariableListContext,0);
	};

	IN() {
	    return this.getToken(informixParser.IN, 0);
	};

	MEMORY() {
	    return this.getToken(informixParser.MEMORY, 0);
	};

	FILE() {
	    return this.getToken(informixParser.FILE, 0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DEALLOCATE() {
	    return this.getToken(informixParser.DEALLOCATE, 0);
	};

	RESIZE() {
	    return this.getToken(informixParser.RESIZE, 0);
	};

	FREE() {
	    return this.getToken(informixParser.FREE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	INITIALIZE() {
	    return this.getToken(informixParser.INITIALIZE, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	NULL_() {
	    return this.getToken(informixParser.NULL_, 0);
	};

	LIKE() {
	    return this.getToken(informixParser.LIKE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	VALIDATE() {
	    return this.getToken(informixParser.VALIDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOtherStorageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOtherStorageStatement(this);
		}
	}


}



class PrintExpressionItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_printExpressionItem;
    }

	COLUMN() {
	    return this.getToken(informixParser.COLUMN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PAGENO() {
	    return this.getToken(informixParser.PAGENO, 0);
	};

	LINENO() {
	    return this.getToken(informixParser.LINENO, 0);
	};

	BYTE() {
	    return this.getToken(informixParser.BYTE, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	TEXT() {
	    return this.getToken(informixParser.TEXT, 0);
	};

	WORDWRAP() {
	    return this.getToken(informixParser.WORDWRAP, 0);
	};

	SPACE() {
	    return this.getToken(informixParser.SPACE, 0);
	};

	SPACES() {
	    return this.getToken(informixParser.SPACES, 0);
	};

	RIGHT() {
	    return this.getToken(informixParser.RIGHT, 0);
	};

	MARGIN() {
	    return this.getToken(informixParser.MARGIN, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterPrintExpressionItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitPrintExpressionItem(this);
		}
	}


}



class PrintExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_printExpressionList;
    }

	printExpressionItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrintExpressionItemContext);
	    } else {
	        return this.getTypedRuleContext(PrintExpressionItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterPrintExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitPrintExpressionList(this);
		}
	}


}



class ReportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_reportStatement;
    }

	START() {
	    return this.getToken(informixParser.START, 0);
	};

	REPORT() {
	    return this.getToken(informixParser.REPORT, 0);
	};

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PIPE() {
	    return this.getToken(informixParser.PIPE, 0);
	};

	PRINTER() {
	    return this.getToken(informixParser.PRINTER, 0);
	};

	LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LEFT);
	    } else {
	        return this.getToken(informixParser.LEFT, i);
	    }
	};


	MARGIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MARGIN);
	    } else {
	        return this.getToken(informixParser.MARGIN, i);
	    }
	};


	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	RIGHT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RIGHT);
	    } else {
	        return this.getToken(informixParser.RIGHT, i);
	    }
	};


	TOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.TOP);
	    } else {
	        return this.getToken(informixParser.TOP, i);
	    }
	};


	BOTTOM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.BOTTOM);
	    } else {
	        return this.getToken(informixParser.BOTTOM, i);
	    }
	};


	PAGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PAGE);
	    } else {
	        return this.getToken(informixParser.PAGE, i);
	    }
	};


	LENGTH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LENGTH);
	    } else {
	        return this.getToken(informixParser.LENGTH, i);
	    }
	};


	OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.OF);
	    } else {
	        return this.getToken(informixParser.OF, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	TERMINATE() {
	    return this.getToken(informixParser.TERMINATE, 0);
	};

	FINISH() {
	    return this.getToken(informixParser.FINISH, 0);
	};

	PAUSE() {
	    return this.getToken(informixParser.PAUSE, 0);
	};

	NEED() {
	    return this.getToken(informixParser.NEED, 0);
	};

	LINES() {
	    return this.getToken(informixParser.LINES, 0);
	};

	PRINT() {
	    return this.getToken(informixParser.PRINT, 0);
	};

	FILE() {
	    return this.getToken(informixParser.FILE, 0);
	};

	printExpressionList() {
	    return this.getTypedRuleContext(PrintExpressionListContext,0);
	};

	SEMI() {
	    return this.getToken(informixParser.SEMI, 0);
	};

	SKIP2() {
	    return this.getToken(informixParser.SKIP2, 0);
	};

	LINE() {
	    return this.getToken(informixParser.LINE, 0);
	};

	OUTPUT() {
	    return this.getToken(informixParser.OUTPUT, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterReportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitReportStatement(this);
		}
	}


}



class FieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fieldName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	LBRACK() {
	    return this.getToken(informixParser.LBRACK, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	RBRACK() {
	    return this.getToken(informixParser.RBRACK, 0);
	};

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	thruNotation() {
	    return this.getTypedRuleContext(ThruNotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFieldName(this);
		}
	}


}



class ThruNotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_thruNotation;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	THROUGH() {
	    return this.getToken(informixParser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(informixParser.THRU, 0);
	};

	SAME() {
	    return this.getToken(informixParser.SAME, 0);
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterThruNotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitThruNotation(this);
		}
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fieldList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFieldList(this);
		}
	}


}



class KeyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_keyList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterKeyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitKeyList(this);
		}
	}


}



class ConstructEventsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constructEvents;
    }

	BEFORE() {
	    return this.getToken(informixParser.BEFORE, 0);
	};

	CONSTRUCT() {
	    return this.getToken(informixParser.CONSTRUCT, 0);
	};

	AFTER() {
	    return this.getToken(informixParser.AFTER, 0);
	};

	FIELD() {
	    return this.getToken(informixParser.FIELD, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	KEY() {
	    return this.getToken(informixParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstructEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstructEvents(this);
		}
	}


}



class ConstructInsideStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constructInsideStatement;
    }

	NEXT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NEXT);
	    } else {
	        return this.getToken(informixParser.NEXT, i);
	    }
	};


	FIELD() {
	    return this.getToken(informixParser.FIELD, 0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	PREVIOUS() {
	    return this.getToken(informixParser.PREVIOUS, 0);
	};

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	CONSTRUCT() {
	    return this.getToken(informixParser.CONSTRUCT, 0);
	};

	EXIT() {
	    return this.getToken(informixParser.EXIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstructInsideStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstructInsideStatement(this);
		}
	}


}



class SpecialAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_specialAttribute;
    }

	REVERSE() {
	    return this.getToken(informixParser.REVERSE, 0);
	};

	BLINK() {
	    return this.getToken(informixParser.BLINK, 0);
	};

	UNDERLINE() {
	    return this.getToken(informixParser.UNDERLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSpecialAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSpecialAttribute(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_attribute;
    }

	specialAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpecialAttributeContext);
	    } else {
	        return this.getTypedRuleContext(SpecialAttributeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	BLACK() {
	    return this.getToken(informixParser.BLACK, 0);
	};

	BLUE() {
	    return this.getToken(informixParser.BLUE, 0);
	};

	CYAN() {
	    return this.getToken(informixParser.CYAN, 0);
	};

	GREEN() {
	    return this.getToken(informixParser.GREEN, 0);
	};

	MAGENTA() {
	    return this.getToken(informixParser.MAGENTA, 0);
	};

	RED() {
	    return this.getToken(informixParser.RED, 0);
	};

	WHITE() {
	    return this.getToken(informixParser.WHITE, 0);
	};

	YELLOW() {
	    return this.getToken(informixParser.YELLOW, 0);
	};

	BOLD() {
	    return this.getToken(informixParser.BOLD, 0);
	};

	DIM() {
	    return this.getToken(informixParser.DIM, 0);
	};

	NORMAL() {
	    return this.getToken(informixParser.NORMAL, 0);
	};

	INVISIBLE() {
	    return this.getToken(informixParser.INVISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class AttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_attributeList;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(informixParser.ATTRIBUTE, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(informixParser.ATTRIBUTES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitAttributeList(this);
		}
	}


}



class ConstructGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constructGroupStatement;
    }

	constructEvents() {
	    return this.getTypedRuleContext(ConstructEventsContext,0);
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstructGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstructGroupStatement(this);
		}
	}


}



class ConstructStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constructStatement;
    }

	CONSTRUCT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.CONSTRUCT);
	    } else {
	        return this.getToken(informixParser.CONSTRUCT, i);
	    }
	};


	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	NAME() {
	    return this.getToken(informixParser.NAME, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	columnsList() {
	    return this.getTypedRuleContext(ColumnsListContext,0);
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	constructGroupStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructGroupStatementContext);
	    } else {
	        return this.getTypedRuleContext(ConstructGroupStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstructStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstructStatement(this);
		}
	}


}



class DisplayArrayStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_displayArrayStatement;
    }

	DISPLAY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DISPLAY);
	    } else {
	        return this.getToken(informixParser.DISPLAY, i);
	    }
	};


	ARRAY() {
	    return this.getToken(informixParser.ARRAY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	displayEvents = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayEventsContext);
	    } else {
	        return this.getTypedRuleContext(DisplayEventsContext,i);
	    }
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDisplayArrayStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDisplayArrayStatement(this);
		}
	}


}



class DisplayInsideStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_displayInsideStatement;
    }

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	DISPLAY() {
	    return this.getToken(informixParser.DISPLAY, 0);
	};

	EXIT() {
	    return this.getToken(informixParser.EXIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDisplayInsideStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDisplayInsideStatement(this);
		}
	}


}



class DisplayEventsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_displayEvents;
    }

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	KEY() {
	    return this.getToken(informixParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDisplayEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDisplayEvents(this);
		}
	}


}



class DisplayStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_displayStatement;
    }

	DISPLAY() {
	    return this.getToken(informixParser.DISPLAY, 0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	NAME() {
	    return this.getToken(informixParser.NAME, 0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	AT() {
	    return this.getToken(informixParser.AT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDisplayStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDisplayStatement(this);
		}
	}


}



class ErrorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_errorStatement;
    }

	ERROR() {
	    return this.getToken(informixParser.ERROR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterErrorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitErrorStatement(this);
		}
	}


}



class MessageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_messageStatement;
    }

	MESSAGE() {
	    return this.getToken(informixParser.MESSAGE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMessageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMessageStatement(this);
		}
	}


}



class PromptStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_promptStatement;
    }

	PROMPT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PROMPT);
	    } else {
	        return this.getToken(informixParser.PROMPT, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	FOR() {
	    return this.getToken(informixParser.FOR, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	attributeList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeListContext);
	    } else {
	        return this.getTypedRuleContext(AttributeListContext,i);
	    }
	};

	CHAR() {
	    return this.getToken(informixParser.CHAR, 0);
	};

	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ON);
	    } else {
	        return this.getToken(informixParser.ON, i);
	    }
	};


	KEY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.KEY);
	    } else {
	        return this.getToken(informixParser.KEY, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	keyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyListContext);
	    } else {
	        return this.getTypedRuleContext(KeyListContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterPromptStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitPromptStatement(this);
		}
	}


}



class InputEventsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_inputEvents;
    }

	BEFORE() {
	    return this.getToken(informixParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(informixParser.AFTER, 0);
	};

	INPUT() {
	    return this.getToken(informixParser.INPUT, 0);
	};

	ROW() {
	    return this.getToken(informixParser.ROW, 0);
	};

	INSERT() {
	    return this.getToken(informixParser.INSERT, 0);
	};

	DELETE() {
	    return this.getToken(informixParser.DELETE, 0);
	};

	FIELD() {
	    return this.getToken(informixParser.FIELD, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	KEY() {
	    return this.getToken(informixParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInputEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInputEvents(this);
		}
	}


}



class InputInsideStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_inputInsideStatement;
    }

	NEXT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.NEXT);
	    } else {
	        return this.getToken(informixParser.NEXT, i);
	    }
	};


	FIELD() {
	    return this.getToken(informixParser.FIELD, 0);
	};

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	PREVIOUS() {
	    return this.getToken(informixParser.PREVIOUS, 0);
	};

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	INPUT() {
	    return this.getToken(informixParser.INPUT, 0);
	};

	EXIT() {
	    return this.getToken(informixParser.EXIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInputInsideStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInputInsideStatement(this);
		}
	}


}



class InputGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_inputGroupStatement;
    }

	inputEvents() {
	    return this.getTypedRuleContext(InputEventsContext,0);
	};

	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInputGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInputGroupStatement(this);
		}
	}


}



class InputStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_inputStatement;
    }

	INPUT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.INPUT);
	    } else {
	        return this.getToken(informixParser.INPUT, i);
	    }
	};


	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	NAME() {
	    return this.getToken(informixParser.NAME, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	WITHOUT() {
	    return this.getToken(informixParser.WITHOUT, 0);
	};

	DEFAULTS() {
	    return this.getToken(informixParser.DEFAULTS, 0);
	};

	inputGroupStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InputGroupStatementContext);
	    } else {
	        return this.getTypedRuleContext(InputGroupStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInputStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInputStatement(this);
		}
	}


}



class InputArrayStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_inputArrayStatement;
    }

	INPUT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.INPUT);
	    } else {
	        return this.getToken(informixParser.INPUT, i);
	    }
	};


	ARRAY() {
	    return this.getToken(informixParser.ARRAY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	WITHOUT() {
	    return this.getToken(informixParser.WITHOUT, 0);
	};

	DEFAULTS() {
	    return this.getToken(informixParser.DEFAULTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	inputGroupStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InputGroupStatementContext);
	    } else {
	        return this.getTypedRuleContext(InputGroupStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterInputArrayStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitInputArrayStatement(this);
		}
	}


}



class MenuEventsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_menuEvents;
    }

	BEFORE() {
	    return this.getToken(informixParser.BEFORE, 0);
	};

	MENU() {
	    return this.getToken(informixParser.MENU, 0);
	};

	COMMAND() {
	    return this.getToken(informixParser.COMMAND, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KEY() {
	    return this.getToken(informixParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMenuEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMenuEvents(this);
		}
	}


}



class MenuInsideStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_menuInsideStatement;
    }

	NEXT() {
	    return this.getToken(informixParser.NEXT, 0);
	};

	OPTION() {
	    return this.getToken(informixParser.OPTION, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ALL() {
	    return this.getToken(informixParser.ALL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	SHOW() {
	    return this.getToken(informixParser.SHOW, 0);
	};

	HIDE() {
	    return this.getToken(informixParser.HIDE, 0);
	};

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	MENU() {
	    return this.getToken(informixParser.MENU, 0);
	};

	EXIT() {
	    return this.getToken(informixParser.EXIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMenuInsideStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMenuInsideStatement(this);
		}
	}


}



class MenuGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_menuGroupStatement;
    }

	menuEvents() {
	    return this.getTypedRuleContext(MenuEventsContext,0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMenuGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMenuGroupStatement(this);
		}
	}


}



class MenuStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_menuStatement;
    }

	MENU = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MENU);
	    } else {
	        return this.getToken(informixParser.MENU, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	menuGroupStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MenuGroupStatementContext);
	    } else {
	        return this.getTypedRuleContext(MenuGroupStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMenuStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMenuStatement(this);
		}
	}


}



class ReservedLinePositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_reservedLinePosition;
    }

	FIRST() {
	    return this.getToken(informixParser.FIRST, 0);
	};

	PLUS() {
	    return this.getToken(informixParser.PLUS, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	LAST() {
	    return this.getToken(informixParser.LAST, 0);
	};

	MINUS() {
	    return this.getToken(informixParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterReservedLinePosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitReservedLinePosition(this);
		}
	}


}



class SpecialWindowAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_specialWindowAttribute;
    }

	BLACK() {
	    return this.getToken(informixParser.BLACK, 0);
	};

	BLUE() {
	    return this.getToken(informixParser.BLUE, 0);
	};

	CYAN() {
	    return this.getToken(informixParser.CYAN, 0);
	};

	GREEN() {
	    return this.getToken(informixParser.GREEN, 0);
	};

	MAGENTA() {
	    return this.getToken(informixParser.MAGENTA, 0);
	};

	RED() {
	    return this.getToken(informixParser.RED, 0);
	};

	WHITE() {
	    return this.getToken(informixParser.WHITE, 0);
	};

	YELLOW() {
	    return this.getToken(informixParser.YELLOW, 0);
	};

	BOLD() {
	    return this.getToken(informixParser.BOLD, 0);
	};

	DIM() {
	    return this.getToken(informixParser.DIM, 0);
	};

	NORMAL() {
	    return this.getToken(informixParser.NORMAL, 0);
	};

	INVISIBLE() {
	    return this.getToken(informixParser.INVISIBLE, 0);
	};

	REVERSE() {
	    return this.getToken(informixParser.REVERSE, 0);
	};

	BORDER() {
	    return this.getToken(informixParser.BORDER, 0);
	};

	LINE() {
	    return this.getToken(informixParser.LINE, 0);
	};

	reservedLinePosition() {
	    return this.getTypedRuleContext(ReservedLinePositionContext,0);
	};

	PROMPT() {
	    return this.getToken(informixParser.PROMPT, 0);
	};

	FORM() {
	    return this.getToken(informixParser.FORM, 0);
	};

	MENU() {
	    return this.getToken(informixParser.MENU, 0);
	};

	MESSAGE() {
	    return this.getToken(informixParser.MESSAGE, 0);
	};

	COMMENT() {
	    return this.getToken(informixParser.COMMENT, 0);
	};

	OFF() {
	    return this.getToken(informixParser.OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSpecialWindowAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSpecialWindowAttribute(this);
		}
	}


}



class WindowAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_windowAttribute;
    }

	specialWindowAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpecialWindowAttributeContext);
	    } else {
	        return this.getTypedRuleContext(SpecialWindowAttributeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWindowAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWindowAttribute(this);
		}
	}


}



class WindowAttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_windowAttributeList;
    }

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	windowAttribute() {
	    return this.getTypedRuleContext(WindowAttributeContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(informixParser.ATTRIBUTE, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(informixParser.ATTRIBUTES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWindowAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWindowAttributeList(this);
		}
	}


}



class OptionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_optionStatement;
    }

	MESSAGE() {
	    return this.getToken(informixParser.MESSAGE, 0);
	};

	LINE() {
	    return this.getToken(informixParser.LINE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PROMPT() {
	    return this.getToken(informixParser.PROMPT, 0);
	};

	MENU() {
	    return this.getToken(informixParser.MENU, 0);
	};

	COMMENT() {
	    return this.getToken(informixParser.COMMENT, 0);
	};

	ERROR() {
	    return this.getToken(informixParser.ERROR, 0);
	};

	FORM() {
	    return this.getToken(informixParser.FORM, 0);
	};

	INPUT() {
	    return this.getToken(informixParser.INPUT, 0);
	};

	INSERT() {
	    return this.getToken(informixParser.INSERT, 0);
	};

	KEY() {
	    return this.getToken(informixParser.KEY, 0);
	};

	DELETE() {
	    return this.getToken(informixParser.DELETE, 0);
	};

	NEXT() {
	    return this.getToken(informixParser.NEXT, 0);
	};

	PREVIOUS() {
	    return this.getToken(informixParser.PREVIOUS, 0);
	};

	ACCEPT() {
	    return this.getToken(informixParser.ACCEPT, 0);
	};

	HELP() {
	    return this.getToken(informixParser.HELP, 0);
	};

	FILE() {
	    return this.getToken(informixParser.FILE, 0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	DISPLAY() {
	    return this.getToken(informixParser.DISPLAY, 0);
	};

	SQL() {
	    return this.getToken(informixParser.SQL, 0);
	};

	INTERRUPT() {
	    return this.getToken(informixParser.INTERRUPT, 0);
	};

	FIELD() {
	    return this.getToken(informixParser.FIELD, 0);
	};

	ORDER() {
	    return this.getToken(informixParser.ORDER, 0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	OFF() {
	    return this.getToken(informixParser.OFF, 0);
	};

	CONSTRAINED() {
	    return this.getToken(informixParser.CONSTRAINED, 0);
	};

	UNCONSTRAINED() {
	    return this.getToken(informixParser.UNCONSTRAINED, 0);
	};

	WRAP() {
	    return this.getToken(informixParser.WRAP, 0);
	};

	NO() {
	    return this.getToken(informixParser.NO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOptionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOptionStatement(this);
		}
	}


}



class OptionsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_optionsStatement;
    }

	OPTIONS() {
	    return this.getToken(informixParser.OPTIONS, 0);
	};

	optionStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionStatementContext);
	    } else {
	        return this.getTypedRuleContext(OptionStatementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOptionsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOptionsStatement(this);
		}
	}


}



class ScreenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_screenStatement;
    }

	CLEAR() {
	    return this.getToken(informixParser.CLEAR, 0);
	};

	FORM() {
	    return this.getToken(informixParser.FORM, 0);
	};

	WINDOW() {
	    return this.getToken(informixParser.WINDOW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SCREEN() {
	    return this.getToken(informixParser.SCREEN, 0);
	};

	fieldList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldListContext);
	    } else {
	        return this.getTypedRuleContext(FieldListContext,i);
	    }
	};

	CLOSE() {
	    return this.getToken(informixParser.CLOSE, 0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	constructStatement() {
	    return this.getTypedRuleContext(ConstructStatementContext,0);
	};

	CURRENT() {
	    return this.getToken(informixParser.CURRENT, 0);
	};

	IS() {
	    return this.getToken(informixParser.IS, 0);
	};

	displayStatement() {
	    return this.getTypedRuleContext(DisplayStatementContext,0);
	};

	displayArrayStatement() {
	    return this.getTypedRuleContext(DisplayArrayStatementContext,0);
	};

	DISPLAY() {
	    return this.getToken(informixParser.DISPLAY, 0);
	};

	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	errorStatement() {
	    return this.getTypedRuleContext(ErrorStatementContext,0);
	};

	messageStatement() {
	    return this.getTypedRuleContext(MessageStatementContext,0);
	};

	promptStatement() {
	    return this.getTypedRuleContext(PromptStatementContext,0);
	};

	inputStatement() {
	    return this.getTypedRuleContext(InputStatementContext,0);
	};

	inputArrayStatement() {
	    return this.getTypedRuleContext(InputArrayStatementContext,0);
	};

	menuStatement() {
	    return this.getTypedRuleContext(MenuStatementContext,0);
	};

	OPEN() {
	    return this.getToken(informixParser.OPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	AT() {
	    return this.getToken(informixParser.AT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	ROWS() {
	    return this.getToken(informixParser.ROWS, 0);
	};

	COLUMNS() {
	    return this.getToken(informixParser.COLUMNS, 0);
	};

	windowAttributeList() {
	    return this.getTypedRuleContext(WindowAttributeListContext,0);
	};

	optionsStatement() {
	    return this.getTypedRuleContext(OptionsStatementContext,0);
	};

	SCROLL() {
	    return this.getToken(informixParser.SCROLL, 0);
	};

	UP() {
	    return this.getToken(informixParser.UP, 0);
	};

	DOWN() {
	    return this.getToken(informixParser.DOWN, 0);
	};

	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	numericConstant() {
	    return this.getTypedRuleContext(NumericConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterScreenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitScreenStatement(this);
		}
	}


}



class SqlStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlStatements;
    }

	cursorManipulationStatement() {
	    return this.getTypedRuleContext(CursorManipulationStatementContext,0);
	};

	dataDefinitionStatement() {
	    return this.getTypedRuleContext(DataDefinitionStatementContext,0);
	};

	dataManipulationStatement() {
	    return this.getTypedRuleContext(DataManipulationStatementContext,0);
	};

	dynamicManagementStatement() {
	    return this.getTypedRuleContext(DynamicManagementStatementContext,0);
	};

	queryOptimizationStatement() {
	    return this.getTypedRuleContext(QueryOptimizationStatementContext,0);
	};

	dataIntegrityStatement() {
	    return this.getTypedRuleContext(DataIntegrityStatementContext,0);
	};

	clientServerStatement() {
	    return this.getTypedRuleContext(ClientServerStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlStatements(this);
		}
	}


}



class CursorManipulationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_cursorManipulationStatement;
    }

	CLOSE() {
	    return this.getToken(informixParser.CLOSE, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	DECLARE() {
	    return this.getToken(informixParser.DECLARE, 0);
	};

	CURSOR() {
	    return this.getToken(informixParser.CURSOR, 0);
	};

	FOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.FOR);
	    } else {
	        return this.getToken(informixParser.FOR, i);
	    }
	};


	SCROLL() {
	    return this.getToken(informixParser.SCROLL, 0);
	};

	sqlSelectStatement() {
	    return this.getTypedRuleContext(SqlSelectStatementContext,0);
	};

	sqlInsertStatement() {
	    return this.getTypedRuleContext(SqlInsertStatementContext,0);
	};

	statementId() {
	    return this.getTypedRuleContext(StatementIdContext,0);
	};

	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	HOLD() {
	    return this.getToken(informixParser.HOLD, 0);
	};

	UPDATE() {
	    return this.getToken(informixParser.UPDATE, 0);
	};

	OF() {
	    return this.getToken(informixParser.OF, 0);
	};

	columnsList() {
	    return this.getTypedRuleContext(ColumnsListContext,0);
	};

	FETCH() {
	    return this.getToken(informixParser.FETCH, 0);
	};

	NEXT() {
	    return this.getToken(informixParser.NEXT, 0);
	};

	FIRST() {
	    return this.getToken(informixParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(informixParser.LAST, 0);
	};

	CURRENT() {
	    return this.getToken(informixParser.CURRENT, 0);
	};

	RELATIVE() {
	    return this.getToken(informixParser.RELATIVE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ABSOLUTE() {
	    return this.getToken(informixParser.ABSOLUTE, 0);
	};

	INTO() {
	    return this.getToken(informixParser.INTO, 0);
	};

	variableList() {
	    return this.getTypedRuleContext(VariableListContext,0);
	};

	PREVIOUS() {
	    return this.getToken(informixParser.PREVIOUS, 0);
	};

	PRIOR() {
	    return this.getToken(informixParser.PRIOR, 0);
	};

	FLUSH() {
	    return this.getToken(informixParser.FLUSH, 0);
	};

	OPEN() {
	    return this.getToken(informixParser.OPEN, 0);
	};

	USING() {
	    return this.getToken(informixParser.USING, 0);
	};

	PUT() {
	    return this.getToken(informixParser.PUT, 0);
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	variableOrConstantList() {
	    return this.getTypedRuleContext(VariableOrConstantListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCursorManipulationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCursorManipulationStatement(this);
		}
	}


}



class ColumnsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_columnsList;
    }

	columnsTableId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnsTableIdContext);
	    } else {
	        return this.getTypedRuleContext(ColumnsTableIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterColumnsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitColumnsList(this);
		}
	}


}



class StatementIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_statementId;
    }

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterStatementId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitStatementId(this);
		}
	}


}



class CursorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_cursorName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterCursorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitCursorName(this);
		}
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dataType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDataType(this);
		}
	}


}



class ColumnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_columnItem;
    }

	constantIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantIdentifierContext,i);
	    }
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	BYTE() {
	    return this.getToken(informixParser.BYTE, 0);
	};

	TEXT() {
	    return this.getToken(informixParser.TEXT, 0);
	};

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	NULL_() {
	    return this.getToken(informixParser.NULL_, 0);
	};

	IN() {
	    return this.getToken(informixParser.IN, 0);
	};

	TABLE() {
	    return this.getToken(informixParser.TABLE, 0);
	};

	UNIQUE() {
	    return this.getToken(informixParser.UNIQUE, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	CONSTRAINT() {
	    return this.getToken(informixParser.CONSTRAINT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterColumnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitColumnItem(this);
		}
	}


}



class DataDefinitionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dataDefinitionStatement;
    }

	DROP() {
	    return this.getToken(informixParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(informixParser.TABLE, 0);
	};

	constantIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantIdentifierContext,i);
	    }
	};

	CREATE() {
	    return this.getToken(informixParser.CREATE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	columnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnItemContext);
	    } else {
	        return this.getTypedRuleContext(ColumnItemContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	TEMP() {
	    return this.getToken(informixParser.TEMP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	NO() {
	    return this.getToken(informixParser.NO, 0);
	};

	LOG() {
	    return this.getToken(informixParser.LOG, 0);
	};

	IN() {
	    return this.getToken(informixParser.IN, 0);
	};

	EXTENT() {
	    return this.getToken(informixParser.EXTENT, 0);
	};

	SIZE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.SIZE);
	    } else {
	        return this.getToken(informixParser.SIZE, i);
	    }
	};


	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	NEXT() {
	    return this.getToken(informixParser.NEXT, 0);
	};

	LOCK() {
	    return this.getToken(informixParser.LOCK, 0);
	};

	MODE() {
	    return this.getToken(informixParser.MODE, 0);
	};

	PAGE() {
	    return this.getToken(informixParser.PAGE, 0);
	};

	ROW() {
	    return this.getToken(informixParser.ROW, 0);
	};

	INDEX() {
	    return this.getToken(informixParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	UNIQUE() {
	    return this.getToken(informixParser.UNIQUE, 0);
	};

	CLUSTER() {
	    return this.getToken(informixParser.CLUSTER, 0);
	};

	ASC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ASC);
	    } else {
	        return this.getToken(informixParser.ASC, i);
	    }
	};


	DESC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DESC);
	    } else {
	        return this.getToken(informixParser.DESC, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDataDefinitionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDataDefinitionStatement(this);
		}
	}


}



class DataManipulationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dataManipulationStatement;
    }

	sqlInsertStatement() {
	    return this.getTypedRuleContext(SqlInsertStatementContext,0);
	};

	sqlDeleteStatement() {
	    return this.getTypedRuleContext(SqlDeleteStatementContext,0);
	};

	sqlSelectStatement() {
	    return this.getTypedRuleContext(SqlSelectStatementContext,0);
	};

	sqlUpdateStatement() {
	    return this.getTypedRuleContext(SqlUpdateStatementContext,0);
	};

	sqlLoadStatement() {
	    return this.getTypedRuleContext(SqlLoadStatementContext,0);
	};

	sqlUnLoadStatement() {
	    return this.getTypedRuleContext(SqlUnLoadStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDataManipulationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDataManipulationStatement(this);
		}
	}


}



class SqlSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlSelectStatement;
    }

	mainSelectStatement() {
	    return this.getTypedRuleContext(MainSelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlSelectStatement(this);
		}
	}


}



class ColumnsTableIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_columnsTableId;
    }

	STAR() {
	    return this.getToken(informixParser.STAR, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(informixParser.DOT, 0);
	};

	columnsTableId() {
	    return this.getTypedRuleContext(ColumnsTableIdContext,0);
	};

	indexingVariable() {
	    return this.getTypedRuleContext(IndexingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterColumnsTableId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitColumnsTableId(this);
		}
	}


}



class SelectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_selectList;
    }

	sqlExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SqlExpressionContext,i);
	    }
	};

	sqlAlias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlAliasContext);
	    } else {
	        return this.getTypedRuleContext(SqlAliasContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSelectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSelectList(this);
		}
	}


}



class HeadSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_headSelectStatement;
    }

	SELECT() {
	    return this.getToken(informixParser.SELECT, 0);
	};

	selectList() {
	    return this.getTypedRuleContext(SelectListContext,0);
	};

	ALL() {
	    return this.getToken(informixParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(informixParser.DISTINCT, 0);
	};

	UNIQUE() {
	    return this.getToken(informixParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterHeadSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitHeadSelectStatement(this);
		}
	}


}



class TableQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_tableQualifier;
    }

	constantIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantIdentifierContext,i);
	    }
	};

	COLON() {
	    return this.getToken(informixParser.COLON, 0);
	};

	ATSYMBOL() {
	    return this.getToken(informixParser.ATSYMBOL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTableQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTableQualifier(this);
		}
	}


}



class TableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_tableIdentifier;
    }

	constantIdentifier() {
	    return this.getTypedRuleContext(ConstantIdentifierContext,0);
	};

	tableQualifier() {
	    return this.getTypedRuleContext(TableQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTableIdentifier(this);
		}
	}


}



class FromTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fromTable;
    }

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	OUTER() {
	    return this.getToken(informixParser.OUTER, 0);
	};

	sqlAlias() {
	    return this.getTypedRuleContext(SqlAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFromTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFromTable(this);
		}
	}


}



class TableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_tableExpression;
    }

	simpleSelectStatement() {
	    return this.getTypedRuleContext(SimpleSelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitTableExpression(this);
		}
	}


}



class FromSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_fromSelectStatement;
    }

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	fromTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromTableContext);
	    } else {
	        return this.getTypedRuleContext(FromTableContext,i);
	    }
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	tableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TableExpressionContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	sqlAlias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlAliasContext);
	    } else {
	        return this.getTypedRuleContext(SqlAliasContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFromSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFromSelectStatement(this);
		}
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_aliasName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitAliasName(this);
		}
	}


}



class MainSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_mainSelectStatement;
    }

	headSelectStatement() {
	    return this.getTypedRuleContext(HeadSelectStatementContext,0);
	};

	fromSelectStatement() {
	    return this.getTypedRuleContext(FromSelectStatementContext,0);
	};

	INTO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.INTO);
	    } else {
	        return this.getToken(informixParser.INTO, i);
	    }
	};


	variableList() {
	    return this.getTypedRuleContext(VariableListContext,0);
	};

	whereStatement() {
	    return this.getTypedRuleContext(WhereStatementContext,0);
	};

	groupByStatement() {
	    return this.getTypedRuleContext(GroupByStatementContext,0);
	};

	havingStatement() {
	    return this.getTypedRuleContext(HavingStatementContext,0);
	};

	unionSelectStatement() {
	    return this.getTypedRuleContext(UnionSelectStatementContext,0);
	};

	orderbyStatement() {
	    return this.getTypedRuleContext(OrderbyStatementContext,0);
	};

	TEMP() {
	    return this.getToken(informixParser.TEMP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH() {
	    return this.getToken(informixParser.WITH, 0);
	};

	NO() {
	    return this.getToken(informixParser.NO, 0);
	};

	LOG() {
	    return this.getToken(informixParser.LOG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterMainSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitMainSelectStatement(this);
		}
	}


}



class UnionSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unionSelectStatement;
    }

	UNION() {
	    return this.getToken(informixParser.UNION, 0);
	};

	simpleSelectStatement() {
	    return this.getTypedRuleContext(SimpleSelectStatementContext,0);
	};

	ALL() {
	    return this.getToken(informixParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnionSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnionSelectStatement(this);
		}
	}


}



class SimpleSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_simpleSelectStatement;
    }

	headSelectStatement() {
	    return this.getTypedRuleContext(HeadSelectStatementContext,0);
	};

	fromSelectStatement() {
	    return this.getTypedRuleContext(FromSelectStatementContext,0);
	};

	whereStatement() {
	    return this.getTypedRuleContext(WhereStatementContext,0);
	};

	groupByStatement() {
	    return this.getTypedRuleContext(GroupByStatementContext,0);
	};

	havingStatement() {
	    return this.getTypedRuleContext(HavingStatementContext,0);
	};

	unionSelectStatement() {
	    return this.getTypedRuleContext(UnionSelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSimpleSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSimpleSelectStatement(this);
		}
	}


}



class WhereStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_whereStatement;
    }

	WHERE() {
	    return this.getToken(informixParser.WHERE, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWhereStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWhereStatement(this);
		}
	}


}



class GroupByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_groupByStatement;
    }

	GROUP() {
	    return this.getToken(informixParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	variableOrConstantList() {
	    return this.getTypedRuleContext(VariableOrConstantListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterGroupByStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitGroupByStatement(this);
		}
	}


}



class HavingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_havingStatement;
    }

	HAVING() {
	    return this.getToken(informixParser.HAVING, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterHavingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitHavingStatement(this);
		}
	}


}



class OrderbyColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_orderbyColumn;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(informixParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(informixParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOrderbyColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOrderbyColumn(this);
		}
	}


}



class OrderbyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_orderbyStatement;
    }

	ORDER() {
	    return this.getToken(informixParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	orderbyColumn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderbyColumnContext);
	    } else {
	        return this.getTypedRuleContext(OrderbyColumnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOrderbyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOrderbyStatement(this);
		}
	}


}



class SqlLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlLoadStatement;
    }

	LOAD() {
	    return this.getToken(informixParser.LOAD, 0);
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	INSERT() {
	    return this.getToken(informixParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(informixParser.INTO, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	sqlInsertStatement() {
	    return this.getTypedRuleContext(SqlInsertStatementContext,0);
	};

	DELIMITER() {
	    return this.getToken(informixParser.DELIMITER, 0);
	};

	LPAREN() {
	    return this.getToken(informixParser.LPAREN, 0);
	};

	columnsList() {
	    return this.getTypedRuleContext(ColumnsListContext,0);
	};

	RPAREN() {
	    return this.getToken(informixParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlLoadStatement(this);
		}
	}


}



class SqlUnLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlUnLoadStatement;
    }

	UNLOAD() {
	    return this.getToken(informixParser.UNLOAD, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	sqlSelectStatement() {
	    return this.getTypedRuleContext(SqlSelectStatementContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	DELIMITER() {
	    return this.getToken(informixParser.DELIMITER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlUnLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlUnLoadStatement(this);
		}
	}


}



class SqlInsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlInsertStatement;
    }

	INSERT() {
	    return this.getToken(informixParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(informixParser.INTO, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	VALUES() {
	    return this.getToken(informixParser.VALUES, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	simpleSelectStatement() {
	    return this.getTypedRuleContext(SimpleSelectStatementContext,0);
	};

	columnsList() {
	    return this.getTypedRuleContext(ColumnsListContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlInsertStatement(this);
		}
	}


}



class SqlUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlUpdateStatement;
    }

	UPDATE() {
	    return this.getToken(informixParser.UPDATE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	SET() {
	    return this.getToken(informixParser.SET, 0);
	};

	WHERE() {
	    return this.getToken(informixParser.WHERE, 0);
	};

	columnsTableId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnsTableIdContext);
	    } else {
	        return this.getTypedRuleContext(ColumnsTableIdContext,i);
	    }
	};

	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.EQUAL);
	    } else {
	        return this.getToken(informixParser.EQUAL, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	CURRENT() {
	    return this.getToken(informixParser.CURRENT, 0);
	};

	OF() {
	    return this.getToken(informixParser.OF, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LPAREN);
	    } else {
	        return this.getToken(informixParser.LPAREN, i);
	    }
	};


	columnsList() {
	    return this.getTypedRuleContext(ColumnsListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RPAREN);
	    } else {
	        return this.getToken(informixParser.RPAREN, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.STAR);
	    } else {
	        return this.getToken(informixParser.STAR, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	aliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AliasNameContext);
	    } else {
	        return this.getTypedRuleContext(AliasNameContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.DOT);
	    } else {
	        return this.getToken(informixParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlUpdateStatement(this);
		}
	}


}



class SqlDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sqlDeleteStatement;
    }

	DELETE() {
	    return this.getToken(informixParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	WHERE() {
	    return this.getToken(informixParser.WHERE, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	CURRENT() {
	    return this.getToken(informixParser.CURRENT, 0);
	};

	OF() {
	    return this.getToken(informixParser.OF, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSqlDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSqlDeleteStatement(this);
		}
	}


}



class ActualParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_actualParameterList;
    }

	actualParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActualParameterContext);
	    } else {
	        return this.getTypedRuleContext(ActualParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.COMMA);
	    } else {
	        return this.getToken(informixParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterActualParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitActualParameterList(this);
		}
	}


}



class DynamicManagementStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dynamicManagementStatement;
    }

	PREPARE() {
	    return this.getToken(informixParser.PREPARE, 0);
	};

	cursorName() {
	    return this.getTypedRuleContext(CursorNameContext,0);
	};

	FROM() {
	    return this.getToken(informixParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EXECUTE() {
	    return this.getToken(informixParser.EXECUTE, 0);
	};

	USING() {
	    return this.getToken(informixParser.USING, 0);
	};

	variableList() {
	    return this.getTypedRuleContext(VariableListContext,0);
	};

	FREE() {
	    return this.getToken(informixParser.FREE, 0);
	};

	statementId() {
	    return this.getTypedRuleContext(StatementIdContext,0);
	};

	LOCK() {
	    return this.getToken(informixParser.LOCK, 0);
	};

	TABLE() {
	    return this.getToken(informixParser.TABLE, 0);
	};

	IN() {
	    return this.getToken(informixParser.IN, 0);
	};

	MODE() {
	    return this.getToken(informixParser.MODE, 0);
	};

	SHARE() {
	    return this.getToken(informixParser.SHARE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(informixParser.EXCLUSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDynamicManagementStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDynamicManagementStatement(this);
		}
	}


}



class QueryOptimizationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_queryOptimizationStatement;
    }

	UPDATE() {
	    return this.getToken(informixParser.UPDATE, 0);
	};

	STATISTICS() {
	    return this.getToken(informixParser.STATISTICS, 0);
	};

	FOR() {
	    return this.getToken(informixParser.FOR, 0);
	};

	TABLE() {
	    return this.getToken(informixParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	SET() {
	    return this.getToken(informixParser.SET, 0);
	};

	LOCK() {
	    return this.getToken(informixParser.LOCK, 0);
	};

	MODE() {
	    return this.getToken(informixParser.MODE, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	WAIT() {
	    return this.getToken(informixParser.WAIT, 0);
	};

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	SECONDS() {
	    return this.getToken(informixParser.SECONDS, 0);
	};

	EXPLAIN() {
	    return this.getToken(informixParser.EXPLAIN, 0);
	};

	ON() {
	    return this.getToken(informixParser.ON, 0);
	};

	OFF() {
	    return this.getToken(informixParser.OFF, 0);
	};

	ISOLATION() {
	    return this.getToken(informixParser.ISOLATION, 0);
	};

	CURSOR() {
	    return this.getToken(informixParser.CURSOR, 0);
	};

	STABILITY() {
	    return this.getToken(informixParser.STABILITY, 0);
	};

	READ() {
	    return this.getToken(informixParser.READ, 0);
	};

	DIRTY() {
	    return this.getToken(informixParser.DIRTY, 0);
	};

	COMMITTED() {
	    return this.getToken(informixParser.COMMITTED, 0);
	};

	REPEATABLE() {
	    return this.getToken(informixParser.REPEATABLE, 0);
	};

	LOG() {
	    return this.getToken(informixParser.LOG, 0);
	};

	BUFFERED() {
	    return this.getToken(informixParser.BUFFERED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterQueryOptimizationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitQueryOptimizationStatement(this);
		}
	}


}



class DatabaseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_databaseDeclaration;
    }

	DATABASE() {
	    return this.getToken(informixParser.DATABASE, 0);
	};

	constantIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantIdentifierContext,i);
	    }
	};

	EXCLUSIVE() {
	    return this.getToken(informixParser.EXCLUSIVE, 0);
	};

	SEMI() {
	    return this.getToken(informixParser.SEMI, 0);
	};

	ATSYMBOL() {
	    return this.getToken(informixParser.ATSYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDatabaseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDatabaseDeclaration(this);
		}
	}


}



class ClientServerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_clientServerStatement;
    }

	CLOSE() {
	    return this.getToken(informixParser.CLOSE, 0);
	};

	DATABASE() {
	    return this.getToken(informixParser.DATABASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterClientServerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitClientServerStatement(this);
		}
	}


}



class DataIntegrityStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_dataIntegrityStatement;
    }

	wheneverStatement() {
	    return this.getTypedRuleContext(WheneverStatementContext,0);
	};

	BEGIN() {
	    return this.getToken(informixParser.BEGIN, 0);
	};

	WORK() {
	    return this.getToken(informixParser.WORK, 0);
	};

	COMMIT() {
	    return this.getToken(informixParser.COMMIT, 0);
	};

	ROLLBACK() {
	    return this.getToken(informixParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterDataIntegrityStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitDataIntegrityStatement(this);
		}
	}


}



class WheneverStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_wheneverStatement;
    }

	WHENEVER() {
	    return this.getToken(informixParser.WHENEVER, 0);
	};

	wheneverType() {
	    return this.getTypedRuleContext(WheneverTypeContext,0);
	};

	wheneverFlow() {
	    return this.getTypedRuleContext(WheneverFlowContext,0);
	};

	eol() {
	    return this.getTypedRuleContext(EolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWheneverStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWheneverStatement(this);
		}
	}


}



class WheneverTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_wheneverType;
    }

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	FOUND() {
	    return this.getToken(informixParser.FOUND, 0);
	};

	SQLERROR() {
	    return this.getToken(informixParser.SQLERROR, 0);
	};

	ERROR() {
	    return this.getToken(informixParser.ERROR, 0);
	};

	ANY() {
	    return this.getToken(informixParser.ANY, 0);
	};

	SQLWARNING() {
	    return this.getToken(informixParser.SQLWARNING, 0);
	};

	WARNING() {
	    return this.getToken(informixParser.WARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWheneverType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWheneverType(this);
		}
	}


}



class WheneverFlowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_wheneverFlow;
    }

	CONTINUE() {
	    return this.getToken(informixParser.CONTINUE, 0);
	};

	STOP() {
	    return this.getToken(informixParser.STOP, 0);
	};

	CALL() {
	    return this.getToken(informixParser.CALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	GO() {
	    return this.getToken(informixParser.GO, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	GOTO() {
	    return this.getToken(informixParser.GOTO, 0);
	};

	COLON() {
	    return this.getToken(informixParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterWheneverFlow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitWheneverFlow(this);
		}
	}


}



class ReportDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_reportDefinition;
    }

	REPORT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.REPORT);
	    } else {
	        return this.getToken(informixParser.REPORT, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	END() {
	    return this.getToken(informixParser.END, 0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	typeDeclarations() {
	    return this.getTypedRuleContext(TypeDeclarationsContext,0);
	};

	outputReport() {
	    return this.getTypedRuleContext(OutputReportContext,0);
	};

	ORDER() {
	    return this.getToken(informixParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(informixParser.BY, 0);
	};

	variableList() {
	    return this.getTypedRuleContext(VariableListContext,0);
	};

	formatReport() {
	    return this.getTypedRuleContext(FormatReportContext,0);
	};

	EXTERNAL() {
	    return this.getToken(informixParser.EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterReportDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitReportDefinition(this);
		}
	}


}



class OutputReportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_outputReport;
    }

	OUTPUT() {
	    return this.getToken(informixParser.OUTPUT, 0);
	};

	REPORT() {
	    return this.getToken(informixParser.REPORT, 0);
	};

	TO() {
	    return this.getToken(informixParser.TO, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	PIPE() {
	    return this.getToken(informixParser.PIPE, 0);
	};

	PRINTER() {
	    return this.getToken(informixParser.PRINTER, 0);
	};

	LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LEFT);
	    } else {
	        return this.getToken(informixParser.LEFT, i);
	    }
	};


	MARGIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.MARGIN);
	    } else {
	        return this.getToken(informixParser.MARGIN, i);
	    }
	};


	numericConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericConstantContext);
	    } else {
	        return this.getTypedRuleContext(NumericConstantContext,i);
	    }
	};

	RIGHT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.RIGHT);
	    } else {
	        return this.getToken(informixParser.RIGHT, i);
	    }
	};


	TOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.TOP);
	    } else {
	        return this.getToken(informixParser.TOP, i);
	    }
	};


	BOTTOM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.BOTTOM);
	    } else {
	        return this.getToken(informixParser.BOTTOM, i);
	    }
	};


	PAGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PAGE);
	    } else {
	        return this.getToken(informixParser.PAGE, i);
	    }
	};


	LENGTH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LENGTH);
	    } else {
	        return this.getToken(informixParser.LENGTH, i);
	    }
	};


	OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.OF);
	    } else {
	        return this.getToken(informixParser.OF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterOutputReport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitOutputReport(this);
		}
	}


}



class FormatReportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_formatReport;
    }

	FORMAT() {
	    return this.getToken(informixParser.FORMAT, 0);
	};

	EVERY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.EVERY);
	    } else {
	        return this.getToken(informixParser.EVERY, i);
	    }
	};


	ROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ROW);
	    } else {
	        return this.getToken(informixParser.ROW, i);
	    }
	};


	codeBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodeBlockContext);
	    } else {
	        return this.getTypedRuleContext(CodeBlockContext,i);
	    }
	};

	PAGE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.PAGE);
	    } else {
	        return this.getToken(informixParser.PAGE, i);
	    }
	};


	HEADER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.HEADER);
	    } else {
	        return this.getToken(informixParser.HEADER, i);
	    }
	};


	TRAILER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.TRAILER);
	    } else {
	        return this.getToken(informixParser.TRAILER, i);
	    }
	};


	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.ON);
	    } else {
	        return this.getToken(informixParser.ON, i);
	    }
	};


	GROUP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.GROUP);
	    } else {
	        return this.getToken(informixParser.GROUP, i);
	    }
	};


	OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.OF);
	    } else {
	        return this.getToken(informixParser.OF, i);
	    }
	};


	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	BEFORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.BEFORE);
	    } else {
	        return this.getToken(informixParser.BEFORE, i);
	    }
	};


	AFTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.AFTER);
	    } else {
	        return this.getToken(informixParser.AFTER, i);
	    }
	};


	LAST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.LAST);
	    } else {
	        return this.getToken(informixParser.LAST, i);
	    }
	};


	FIRST = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(informixParser.FIRST);
	    } else {
	        return this.getToken(informixParser.FIRST, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterFormatReport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitFormatReport(this);
		}
	}


}



class EolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_eol;
    }

	EOL() {
	    return this.getToken(informixParser.EOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterEol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitEol(this);
		}
	}


}



class UnsignedNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unsignedNumber;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	unsignedReal() {
	    return this.getTypedRuleContext(UnsignedRealContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnsignedNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnsignedNumber(this);
		}
	}


}



class UnsignedIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unsignedInteger;
    }

	NUM_INT() {
	    return this.getToken(informixParser.NUM_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnsignedInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnsignedInteger(this);
		}
	}


}



class UnsignedRealContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_unsignedReal;
    }

	NUM_REAL() {
	    return this.getToken(informixParser.NUM_REAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterUnsignedReal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitUnsignedReal(this);
		}
	}


}



class SignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_sign;
    }

	PLUS() {
	    return this.getToken(informixParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(informixParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterSign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitSign(this);
		}
	}


}



class ConstantIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = informixParser.RULE_constantIdentifier;
    }

	ACCEPT() {
	    return this.getToken(informixParser.ACCEPT, 0);
	};

	ASCII() {
	    return this.getToken(informixParser.ASCII, 0);
	};

	COUNT() {
	    return this.getToken(informixParser.COUNT, 0);
	};

	CURRENT() {
	    return this.getToken(informixParser.CURRENT, 0);
	};

	FALSE() {
	    return this.getToken(informixParser.FALSE, 0);
	};

	FIRST() {
	    return this.getToken(informixParser.FIRST, 0);
	};

	FOUND() {
	    return this.getToken(informixParser.FOUND, 0);
	};

	GROUP() {
	    return this.getToken(informixParser.GROUP, 0);
	};

	HIDE() {
	    return this.getToken(informixParser.HIDE, 0);
	};

	INDEX() {
	    return this.getToken(informixParser.INDEX, 0);
	};

	INT_FLAG() {
	    return this.getToken(informixParser.INT_FLAG, 0);
	};

	INTERRUPT() {
	    return this.getToken(informixParser.INTERRUPT, 0);
	};

	LAST() {
	    return this.getToken(informixParser.LAST, 0);
	};

	LENGTH() {
	    return this.getToken(informixParser.LENGTH, 0);
	};

	LINENO() {
	    return this.getToken(informixParser.LINENO, 0);
	};

	MDY() {
	    return this.getToken(informixParser.MDY, 0);
	};

	NO() {
	    return this.getToken(informixParser.NO, 0);
	};

	NOT() {
	    return this.getToken(informixParser.NOT, 0);
	};

	NOTFOUND() {
	    return this.getToken(informixParser.NOTFOUND, 0);
	};

	NULL_() {
	    return this.getToken(informixParser.NULL_, 0);
	};

	PAGENO() {
	    return this.getToken(informixParser.PAGENO, 0);
	};

	REAL() {
	    return this.getToken(informixParser.REAL, 0);
	};

	SIZE() {
	    return this.getToken(informixParser.SIZE, 0);
	};

	SQL() {
	    return this.getToken(informixParser.SQL, 0);
	};

	STATUS() {
	    return this.getToken(informixParser.STATUS, 0);
	};

	TEMP() {
	    return this.getToken(informixParser.TEMP, 0);
	};

	TIME() {
	    return this.getToken(informixParser.TIME, 0);
	};

	TODAY() {
	    return this.getToken(informixParser.TODAY, 0);
	};

	TRUE() {
	    return this.getToken(informixParser.TRUE, 0);
	};

	USER() {
	    return this.getToken(informixParser.USER, 0);
	};

	WAIT() {
	    return this.getToken(informixParser.WAIT, 0);
	};

	WEEKDAY() {
	    return this.getToken(informixParser.WEEKDAY, 0);
	};

	WORK() {
	    return this.getToken(informixParser.WORK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.enterConstantIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof informixListener ) {
	        listener.exitConstantIdentifier(this);
		}
	}


}




informixParser.Compilation_unitContext = Compilation_unitContext; 
informixParser.IdentifierContext = IdentifierContext; 
informixParser.MainBlockContext = MainBlockContext; 
informixParser.MainStatementsContext = MainStatementsContext; 
informixParser.DeferStatementContext = DeferStatementContext; 
informixParser.FunctionOrReportDefinitionsContext = FunctionOrReportDefinitionsContext; 
informixParser.ReturnStatementContext = ReturnStatementContext; 
informixParser.FunctionDefinitionContext = FunctionDefinitionContext; 
informixParser.ParameterListContext = ParameterListContext; 
informixParser.ParameterGroupContext = ParameterGroupContext; 
informixParser.GlobalDeclarationContext = GlobalDeclarationContext; 
informixParser.TypeDeclarationsContext = TypeDeclarationsContext; 
informixParser.TypeDeclarationContext = TypeDeclarationContext; 
informixParser.VariableDeclarationContext = VariableDeclarationContext; 
informixParser.Type_Context = Type_Context; 
informixParser.IndirectTypeContext = IndirectTypeContext; 
informixParser.TypeIdentifierContext = TypeIdentifierContext; 
informixParser.LargeTypeContext = LargeTypeContext; 
informixParser.NumberTypeContext = NumberTypeContext; 
informixParser.CharTypeContext = CharTypeContext; 
informixParser.TimeTypeContext = TimeTypeContext; 
informixParser.DatetimeQualifierContext = DatetimeQualifierContext; 
informixParser.IntervalQualifierContext = IntervalQualifierContext; 
informixParser.UnitTypeContext = UnitTypeContext; 
informixParser.YearQualifierContext = YearQualifierContext; 
informixParser.MonthQualifierContext = MonthQualifierContext; 
informixParser.DayQualifierContext = DayQualifierContext; 
informixParser.HourQualifierContext = HourQualifierContext; 
informixParser.MinuteQualifierContext = MinuteQualifierContext; 
informixParser.SecondQualifierContext = SecondQualifierContext; 
informixParser.FractionQualifierContext = FractionQualifierContext; 
informixParser.StructuredTypeContext = StructuredTypeContext; 
informixParser.RecordTypeContext = RecordTypeContext; 
informixParser.ArrayIndexerContext = ArrayIndexerContext; 
informixParser.ArrayTypeContext = ArrayTypeContext; 
informixParser.DynArrayTypeContext = DynArrayTypeContext; 
informixParser.StringContext = StringContext; 
informixParser.StatementContext = StatementContext; 
informixParser.CodeBlockContext = CodeBlockContext; 
informixParser.LabelContext = LabelContext; 
informixParser.UnlabelledStatementContext = UnlabelledStatementContext; 
informixParser.SimpleStatementContext = SimpleStatementContext; 
informixParser.RunStatementContext = RunStatementContext; 
informixParser.AssignmentStatementContext = AssignmentStatementContext; 
informixParser.ProcedureStatementContext = ProcedureStatementContext; 
informixParser.ProcedureIdentifierContext = ProcedureIdentifierContext; 
informixParser.ActualParameterContext = ActualParameterContext; 
informixParser.GotoStatementContext = GotoStatementContext; 
informixParser.ConditionContext = ConditionContext; 
informixParser.LogicalTermContext = LogicalTermContext; 
informixParser.LogicalFactorContext = LogicalFactorContext; 
informixParser.QuantifiedFactorContext = QuantifiedFactorContext; 
informixParser.ExpressionSetContext = ExpressionSetContext; 
informixParser.SubqueryContext = SubqueryContext; 
informixParser.SqlExpressionContext = SqlExpressionContext; 
informixParser.SqlAliasContext = SqlAliasContext; 
informixParser.SqlTermContext = SqlTermContext; 
informixParser.SqlMultiplyContext = SqlMultiplyContext; 
informixParser.SqlFactorContext = SqlFactorContext; 
informixParser.SqlFactor2Context = SqlFactor2Context; 
informixParser.SqlExpressionListContext = SqlExpressionListContext; 
informixParser.SqlLiteralContext = SqlLiteralContext; 
informixParser.SqlVariableContext = SqlVariableContext; 
informixParser.SqlFunctionContext = SqlFunctionContext; 
informixParser.DateFunctionContext = DateFunctionContext; 
informixParser.NumberFunctionContext = NumberFunctionContext; 
informixParser.CharFunctionContext = CharFunctionContext; 
informixParser.GroupFunctionContext = GroupFunctionContext; 
informixParser.OtherFunctionContext = OtherFunctionContext; 
informixParser.SqlPseudoColumnContext = SqlPseudoColumnContext; 
informixParser.RelationalOperatorContext = RelationalOperatorContext; 
informixParser.IfConditionContext = IfConditionContext; 
informixParser.IfCondition2Context = IfCondition2Context; 
informixParser.IfLogicalTermContext = IfLogicalTermContext; 
informixParser.ExpressionContext = ExpressionContext; 
informixParser.IfLogicalFactorContext = IfLogicalFactorContext; 
informixParser.SimpleExpressionContext = SimpleExpressionContext; 
informixParser.AddingOperatorContext = AddingOperatorContext; 
informixParser.TermContext = TermContext; 
informixParser.MultiplyingOperatorContext = MultiplyingOperatorContext; 
informixParser.FactorContext = FactorContext; 
informixParser.FunctionDesignatorContext = FunctionDesignatorContext; 
informixParser.FunctionIdentifierContext = FunctionIdentifierContext; 
informixParser.UnsignedConstantContext = UnsignedConstantContext; 
informixParser.ConstantContext = ConstantContext; 
informixParser.NumericConstantContext = NumericConstantContext; 
informixParser.VariableContext = VariableContext; 
informixParser.EntireVariableContext = EntireVariableContext; 
informixParser.VariableIdentifierContext = VariableIdentifierContext; 
informixParser.IndexingVariableContext = IndexingVariableContext; 
informixParser.ComponentVariableContext = ComponentVariableContext; 
informixParser.RecordVariableContext = RecordVariableContext; 
informixParser.FieldIdentifierContext = FieldIdentifierContext; 
informixParser.StructuredStatementContext = StructuredStatementContext; 
informixParser.ConditionalStatementContext = ConditionalStatementContext; 
informixParser.IfStatementContext = IfStatementContext; 
informixParser.RepetetiveStatementContext = RepetetiveStatementContext; 
informixParser.WhileStatementContext = WhileStatementContext; 
informixParser.ForStatementContext = ForStatementContext; 
informixParser.ForListContext = ForListContext; 
informixParser.ControlVariableContext = ControlVariableContext; 
informixParser.InitialValueContext = InitialValueContext; 
informixParser.FinalValueContext = FinalValueContext; 
informixParser.ForEachStatementContext = ForEachStatementContext; 
informixParser.VariableListContext = VariableListContext; 
informixParser.VariableOrConstantListContext = VariableOrConstantListContext; 
informixParser.CaseStatementContext = CaseStatementContext; 
informixParser.OtherFGLStatementContext = OtherFGLStatementContext; 
informixParser.OtherProgramFlowStatementContext = OtherProgramFlowStatementContext; 
informixParser.ExitTypesContext = ExitTypesContext; 
informixParser.ExitStatementsContext = ExitStatementsContext; 
informixParser.ContinueStatementsContext = ContinueStatementsContext; 
informixParser.OtherStorageStatementContext = OtherStorageStatementContext; 
informixParser.PrintExpressionItemContext = PrintExpressionItemContext; 
informixParser.PrintExpressionListContext = PrintExpressionListContext; 
informixParser.ReportStatementContext = ReportStatementContext; 
informixParser.FieldNameContext = FieldNameContext; 
informixParser.ThruNotationContext = ThruNotationContext; 
informixParser.FieldListContext = FieldListContext; 
informixParser.KeyListContext = KeyListContext; 
informixParser.ConstructEventsContext = ConstructEventsContext; 
informixParser.ConstructInsideStatementContext = ConstructInsideStatementContext; 
informixParser.SpecialAttributeContext = SpecialAttributeContext; 
informixParser.AttributeContext = AttributeContext; 
informixParser.AttributeListContext = AttributeListContext; 
informixParser.ConstructGroupStatementContext = ConstructGroupStatementContext; 
informixParser.ConstructStatementContext = ConstructStatementContext; 
informixParser.DisplayArrayStatementContext = DisplayArrayStatementContext; 
informixParser.DisplayInsideStatementContext = DisplayInsideStatementContext; 
informixParser.DisplayEventsContext = DisplayEventsContext; 
informixParser.DisplayStatementContext = DisplayStatementContext; 
informixParser.ErrorStatementContext = ErrorStatementContext; 
informixParser.MessageStatementContext = MessageStatementContext; 
informixParser.PromptStatementContext = PromptStatementContext; 
informixParser.InputEventsContext = InputEventsContext; 
informixParser.InputInsideStatementContext = InputInsideStatementContext; 
informixParser.InputGroupStatementContext = InputGroupStatementContext; 
informixParser.InputStatementContext = InputStatementContext; 
informixParser.InputArrayStatementContext = InputArrayStatementContext; 
informixParser.MenuEventsContext = MenuEventsContext; 
informixParser.MenuInsideStatementContext = MenuInsideStatementContext; 
informixParser.MenuGroupStatementContext = MenuGroupStatementContext; 
informixParser.MenuStatementContext = MenuStatementContext; 
informixParser.ReservedLinePositionContext = ReservedLinePositionContext; 
informixParser.SpecialWindowAttributeContext = SpecialWindowAttributeContext; 
informixParser.WindowAttributeContext = WindowAttributeContext; 
informixParser.WindowAttributeListContext = WindowAttributeListContext; 
informixParser.OptionStatementContext = OptionStatementContext; 
informixParser.OptionsStatementContext = OptionsStatementContext; 
informixParser.ScreenStatementContext = ScreenStatementContext; 
informixParser.SqlStatementsContext = SqlStatementsContext; 
informixParser.CursorManipulationStatementContext = CursorManipulationStatementContext; 
informixParser.ColumnsListContext = ColumnsListContext; 
informixParser.StatementIdContext = StatementIdContext; 
informixParser.CursorNameContext = CursorNameContext; 
informixParser.DataTypeContext = DataTypeContext; 
informixParser.ColumnItemContext = ColumnItemContext; 
informixParser.DataDefinitionStatementContext = DataDefinitionStatementContext; 
informixParser.DataManipulationStatementContext = DataManipulationStatementContext; 
informixParser.SqlSelectStatementContext = SqlSelectStatementContext; 
informixParser.ColumnsTableIdContext = ColumnsTableIdContext; 
informixParser.SelectListContext = SelectListContext; 
informixParser.HeadSelectStatementContext = HeadSelectStatementContext; 
informixParser.TableQualifierContext = TableQualifierContext; 
informixParser.TableIdentifierContext = TableIdentifierContext; 
informixParser.FromTableContext = FromTableContext; 
informixParser.TableExpressionContext = TableExpressionContext; 
informixParser.FromSelectStatementContext = FromSelectStatementContext; 
informixParser.AliasNameContext = AliasNameContext; 
informixParser.MainSelectStatementContext = MainSelectStatementContext; 
informixParser.UnionSelectStatementContext = UnionSelectStatementContext; 
informixParser.SimpleSelectStatementContext = SimpleSelectStatementContext; 
informixParser.WhereStatementContext = WhereStatementContext; 
informixParser.GroupByStatementContext = GroupByStatementContext; 
informixParser.HavingStatementContext = HavingStatementContext; 
informixParser.OrderbyColumnContext = OrderbyColumnContext; 
informixParser.OrderbyStatementContext = OrderbyStatementContext; 
informixParser.SqlLoadStatementContext = SqlLoadStatementContext; 
informixParser.SqlUnLoadStatementContext = SqlUnLoadStatementContext; 
informixParser.SqlInsertStatementContext = SqlInsertStatementContext; 
informixParser.SqlUpdateStatementContext = SqlUpdateStatementContext; 
informixParser.SqlDeleteStatementContext = SqlDeleteStatementContext; 
informixParser.ActualParameterListContext = ActualParameterListContext; 
informixParser.DynamicManagementStatementContext = DynamicManagementStatementContext; 
informixParser.QueryOptimizationStatementContext = QueryOptimizationStatementContext; 
informixParser.DatabaseDeclarationContext = DatabaseDeclarationContext; 
informixParser.ClientServerStatementContext = ClientServerStatementContext; 
informixParser.DataIntegrityStatementContext = DataIntegrityStatementContext; 
informixParser.WheneverStatementContext = WheneverStatementContext; 
informixParser.WheneverTypeContext = WheneverTypeContext; 
informixParser.WheneverFlowContext = WheneverFlowContext; 
informixParser.ReportDefinitionContext = ReportDefinitionContext; 
informixParser.OutputReportContext = OutputReportContext; 
informixParser.FormatReportContext = FormatReportContext; 
informixParser.EolContext = EolContext; 
informixParser.UnsignedNumberContext = UnsignedNumberContext; 
informixParser.UnsignedIntegerContext = UnsignedIntegerContext; 
informixParser.UnsignedRealContext = UnsignedRealContext; 
informixParser.SignContext = SignContext; 
informixParser.ConstantIdentifierContext = ConstantIdentifierContext; 
