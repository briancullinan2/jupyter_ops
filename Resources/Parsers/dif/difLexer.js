// Generated from ./dif/dif.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,11,85,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,
1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,
63,8,8,1,8,4,8,66,8,8,11,8,12,8,67,1,9,1,9,5,9,72,8,9,10,9,12,9,75,9,9,1,
9,1,9,1,10,4,10,80,8,10,11,10,12,10,81,1,10,1,10,1,73,0,11,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,2,1,0,48,57,3,0,9,10,13,13,32,
32,88,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,
23,1,0,0,0,3,29,1,0,0,0,5,37,1,0,0,0,7,44,1,0,0,0,9,49,1,0,0,0,11,53,1,0,
0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,62,1,0,0,0,19,69,1,0,0,0,21,79,1,0,0,
0,23,24,5,84,0,0,24,25,5,65,0,0,25,26,5,66,0,0,26,27,5,76,0,0,27,28,5,69,
0,0,28,2,1,0,0,0,29,30,5,86,0,0,30,31,5,69,0,0,31,32,5,67,0,0,32,33,5,84,
0,0,33,34,5,79,0,0,34,35,5,82,0,0,35,36,5,83,0,0,36,4,1,0,0,0,37,38,5,84,
0,0,38,39,5,85,0,0,39,40,5,80,0,0,40,41,5,76,0,0,41,42,5,69,0,0,42,43,5,
83,0,0,43,6,1,0,0,0,44,45,5,68,0,0,45,46,5,65,0,0,46,47,5,84,0,0,47,48,5,
65,0,0,48,8,1,0,0,0,49,50,5,66,0,0,50,51,5,79,0,0,51,52,5,84,0,0,52,10,1,
0,0,0,53,54,5,69,0,0,54,55,5,79,0,0,55,56,5,68,0,0,56,12,1,0,0,0,57,58,5,
86,0,0,58,14,1,0,0,0,59,60,5,44,0,0,60,16,1,0,0,0,61,63,5,45,0,0,62,61,1,
0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,66,7,0,0,0,65,64,1,0,0,0,66,67,1,0,
0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,18,1,0,0,0,69,73,5,34,0,0,70,72,9,0,0,
0,71,70,1,0,0,0,72,75,1,0,0,0,73,74,1,0,0,0,73,71,1,0,0,0,74,76,1,0,0,0,
75,73,1,0,0,0,76,77,5,34,0,0,77,20,1,0,0,0,78,80,7,1,0,0,79,78,1,0,0,0,80,
81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,84,6,10,0,0,84,22,
1,0,0,0,5,0,62,67,73,81,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class difLexer extends antlr4.Lexer {

    static grammarFileName = "dif.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'TABLE'", "'VECTORS'", "'TUPLES'", "'DATA'", 
                         "'BOT'", "'EOD'", "'V'", "','" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, "NUM", "STRING", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "NUM", "STRING", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

difLexer.EOF = antlr4.Token.EOF;
difLexer.T__0 = 1;
difLexer.T__1 = 2;
difLexer.T__2 = 3;
difLexer.T__3 = 4;
difLexer.T__4 = 5;
difLexer.T__5 = 6;
difLexer.T__6 = 7;
difLexer.T__7 = 8;
difLexer.NUM = 9;
difLexer.STRING = 10;
difLexer.WS = 11;



