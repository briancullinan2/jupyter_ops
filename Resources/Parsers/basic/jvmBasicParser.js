// Generated from Resources/Parsers/basic/jvmBasic.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import jvmBasicListener from './jvmBasicListener.js';
const serializedATN = [4,1,122,891,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,1,0,4,0,204,8,0,11,0,12,0,205,1,0,1,0,1,1,1,1,1,1,1,1,3,1,214,
8,1,5,1,216,8,1,10,1,12,1,219,9,1,1,1,3,1,222,8,1,1,2,1,2,1,3,1,3,1,4,3,
4,229,8,4,1,4,1,4,3,4,233,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,3,5,284,8,5,1,6,1,6,1,6,1,6,1,6,5,6,291,8,6,10,6,12,6,294,9,6,
1,7,1,7,3,7,298,8,7,1,8,1,8,1,8,3,8,303,8,8,5,8,305,8,8,10,8,12,8,308,9,
8,1,9,1,9,1,9,1,10,3,10,314,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,336,8,12,
1,13,1,13,1,13,1,14,1,14,1,14,3,14,344,8,14,1,14,1,14,3,14,348,8,14,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,358,8,15,1,15,1,15,1,15,3,15,363,
8,15,3,15,365,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,375,8,16,
1,17,1,17,1,17,1,17,5,17,381,8,17,10,17,12,17,384,9,17,3,17,386,8,17,1,18,
1,18,1,18,3,18,391,8,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
25,1,25,1,25,3,25,420,8,25,1,25,1,25,1,25,1,25,1,25,5,25,427,8,25,10,25,
12,25,430,9,25,1,26,1,26,1,26,1,26,1,26,3,26,437,8,26,1,26,1,26,1,26,1,26,
1,26,5,26,444,8,26,10,26,12,26,447,9,26,1,27,1,27,1,27,1,27,1,27,1,28,1,
28,1,28,1,28,1,28,1,28,5,28,460,8,28,10,28,12,28,463,9,28,1,29,1,29,1,29,
1,29,1,29,1,29,5,29,471,8,29,10,29,12,29,474,9,29,1,30,1,30,1,30,1,31,1,
31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,
494,8,34,5,34,496,8,34,10,34,12,34,499,9,34,1,35,1,35,3,35,503,8,35,1,36,
1,36,1,36,1,36,1,36,1,36,3,36,511,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
3,37,520,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,529,8,38,1,39,1,39,
3,39,533,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,
44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,
50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,3,53,599,8,53,1,54,1,54,1,54,
1,54,1,54,3,54,606,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,
1,59,1,59,1,60,3,60,621,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,
660,8,61,1,62,3,62,663,8,62,1,62,3,62,666,8,62,1,62,1,62,1,63,1,63,1,63,
5,63,673,8,63,10,63,12,63,676,9,63,1,64,1,64,1,64,5,64,681,8,64,10,64,12,
64,684,9,64,1,65,1,65,1,65,5,65,689,8,65,10,65,12,65,692,9,65,1,66,1,66,
1,66,1,66,3,66,698,8,66,1,67,1,67,1,67,1,67,5,67,704,8,67,10,67,12,67,707,
9,67,3,67,709,8,67,1,68,1,68,3,68,713,8,68,1,69,1,69,5,69,717,8,69,10,69,
12,69,720,9,69,1,70,1,70,1,71,1,71,1,71,5,71,727,8,71,10,71,12,71,730,9,
71,1,72,1,72,1,72,5,72,735,8,72,10,72,12,72,738,9,72,1,73,1,73,1,73,1,73,
1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,
76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,
1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,
81,1,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,
1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,
86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,
1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,
91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,
1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,
97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,
100,1,100,1,100,1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
194,196,198,200,0,10,2,0,10,10,117,117,11,0,22,22,29,29,41,43,53,53,60,60,
63,65,71,72,94,94,109,109,112,113,116,116,2,0,4,4,114,114,2,0,27,27,37,37,
1,0,18,19,1,0,120,121,1,0,20,21,1,0,73,74,1,0,119,120,1,0,1,2,925,0,203,
1,0,0,0,2,209,1,0,0,0,4,223,1,0,0,0,6,225,1,0,0,0,8,232,1,0,0,0,10,283,1,
0,0,0,12,285,1,0,0,0,14,295,1,0,0,0,16,299,1,0,0,0,18,309,1,0,0,0,20,313,
1,0,0,0,22,317,1,0,0,0,24,335,1,0,0,0,26,337,1,0,0,0,28,340,1,0,0,0,30,349,
1,0,0,0,32,366,1,0,0,0,34,376,1,0,0,0,36,387,1,0,0,0,38,394,1,0,0,0,40,397,
1,0,0,0,42,400,1,0,0,0,44,403,1,0,0,0,46,406,1,0,0,0,48,411,1,0,0,0,50,414,
1,0,0,0,52,431,1,0,0,0,54,448,1,0,0,0,56,453,1,0,0,0,58,464,1,0,0,0,60,475,
1,0,0,0,62,478,1,0,0,0,64,481,1,0,0,0,66,485,1,0,0,0,68,489,1,0,0,0,70,502,
1,0,0,0,72,504,1,0,0,0,74,512,1,0,0,0,76,521,1,0,0,0,78,530,1,0,0,0,80,541,
1,0,0,0,82,546,1,0,0,0,84,550,1,0,0,0,86,554,1,0,0,0,88,558,1,0,0,0,90,562,
1,0,0,0,92,566,1,0,0,0,94,573,1,0,0,0,96,580,1,0,0,0,98,584,1,0,0,0,100,
587,1,0,0,0,102,590,1,0,0,0,104,593,1,0,0,0,106,596,1,0,0,0,108,600,1,0,
0,0,110,607,1,0,0,0,112,610,1,0,0,0,114,613,1,0,0,0,116,615,1,0,0,0,118,
617,1,0,0,0,120,620,1,0,0,0,122,659,1,0,0,0,124,662,1,0,0,0,126,669,1,0,
0,0,128,677,1,0,0,0,130,685,1,0,0,0,132,693,1,0,0,0,134,708,1,0,0,0,136,
710,1,0,0,0,138,714,1,0,0,0,140,721,1,0,0,0,142,723,1,0,0,0,144,731,1,0,
0,0,146,739,1,0,0,0,148,744,1,0,0,0,150,749,1,0,0,0,152,754,1,0,0,0,154,
759,1,0,0,0,156,768,1,0,0,0,158,773,1,0,0,0,160,778,1,0,0,0,162,783,1,0,
0,0,164,788,1,0,0,0,166,793,1,0,0,0,168,798,1,0,0,0,170,803,1,0,0,0,172,
810,1,0,0,0,174,817,1,0,0,0,176,822,1,0,0,0,178,828,1,0,0,0,180,833,1,0,
0,0,182,840,1,0,0,0,184,845,1,0,0,0,186,850,1,0,0,0,188,855,1,0,0,0,190,
860,1,0,0,0,192,865,1,0,0,0,194,870,1,0,0,0,196,875,1,0,0,0,198,880,1,0,
0,0,200,885,1,0,0,0,202,204,3,2,1,0,203,202,1,0,0,0,204,205,1,0,0,0,205,
203,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,5,0,0,1,208,1,1,0,0,
0,209,221,3,6,3,0,210,217,3,8,4,0,211,213,5,40,0,0,212,214,3,8,4,0,213,212,
1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,211,1,0,0,0,216,219,1,0,0,0,
217,215,1,0,0,0,217,218,1,0,0,0,218,222,1,0,0,0,219,217,1,0,0,0,220,222,
7,0,0,0,221,210,1,0,0,0,221,220,1,0,0,0,222,3,1,0,0,0,223,224,5,108,0,0,
224,5,1,0,0,0,225,226,5,120,0,0,226,7,1,0,0,0,227,229,3,4,2,0,228,227,1,
0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,233,3,10,5,0,231,233,7,0,0,0,232,
228,1,0,0,0,232,231,1,0,0,0,233,9,1,0,0,0,234,284,7,1,0,0,235,284,3,114,
57,0,236,284,3,116,58,0,237,284,3,118,59,0,238,284,3,110,55,0,239,284,3,
108,54,0,240,284,3,106,53,0,241,284,3,102,51,0,242,284,3,18,9,0,243,284,
3,104,52,0,244,284,3,34,17,0,245,284,3,100,50,0,246,284,3,98,49,0,247,284,
3,96,48,0,248,284,3,92,46,0,249,284,3,94,47,0,250,284,3,88,44,0,251,284,
3,82,41,0,252,284,3,86,43,0,253,284,3,84,42,0,254,284,3,90,45,0,255,284,
3,64,32,0,256,284,3,66,33,0,257,284,3,14,7,0,258,284,3,46,23,0,259,284,3,
54,27,0,260,284,3,56,28,0,261,284,3,58,29,0,262,284,3,28,14,0,263,284,3,
30,15,0,264,284,3,32,16,0,265,284,3,36,18,0,266,284,3,80,40,0,267,284,3,
40,20,0,268,284,3,42,21,0,269,284,3,44,22,0,270,284,3,48,24,0,271,284,3,
38,19,0,272,284,3,50,25,0,273,284,3,52,26,0,274,284,3,60,30,0,275,284,3,
62,31,0,276,284,3,72,36,0,277,284,3,68,34,0,278,284,3,74,37,0,279,284,3,
76,38,0,280,284,3,78,39,0,281,284,3,20,10,0,282,284,3,112,56,0,283,234,1,
0,0,0,283,235,1,0,0,0,283,236,1,0,0,0,283,237,1,0,0,0,283,238,1,0,0,0,283,
239,1,0,0,0,283,240,1,0,0,0,283,241,1,0,0,0,283,242,1,0,0,0,283,243,1,0,
0,0,283,244,1,0,0,0,283,245,1,0,0,0,283,246,1,0,0,0,283,247,1,0,0,0,283,
248,1,0,0,0,283,249,1,0,0,0,283,250,1,0,0,0,283,251,1,0,0,0,283,252,1,0,
0,0,283,253,1,0,0,0,283,254,1,0,0,0,283,255,1,0,0,0,283,256,1,0,0,0,283,
257,1,0,0,0,283,258,1,0,0,0,283,259,1,0,0,0,283,260,1,0,0,0,283,261,1,0,
0,0,283,262,1,0,0,0,283,263,1,0,0,0,283,264,1,0,0,0,283,265,1,0,0,0,283,
266,1,0,0,0,283,267,1,0,0,0,283,268,1,0,0,0,283,269,1,0,0,0,283,270,1,0,
0,0,283,271,1,0,0,0,283,272,1,0,0,0,283,273,1,0,0,0,283,274,1,0,0,0,283,
275,1,0,0,0,283,276,1,0,0,0,283,277,1,0,0,0,283,278,1,0,0,0,283,279,1,0,
0,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,11,1,0,0,0,285,292,
3,136,68,0,286,287,5,16,0,0,287,288,3,144,72,0,288,289,5,17,0,0,289,291,
1,0,0,0,290,286,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,
293,13,1,0,0,0,294,292,1,0,0,0,295,297,7,2,0,0,296,298,3,16,8,0,297,296,
1,0,0,0,297,298,1,0,0,0,298,15,1,0,0,0,299,306,3,134,67,0,300,302,7,3,0,
0,301,303,3,134,67,0,302,301,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,
300,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,17,1,0,0,
0,308,306,1,0,0,0,309,310,5,106,0,0,310,311,3,144,72,0,311,19,1,0,0,0,312,
314,5,31,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,3,22,
11,0,316,21,1,0,0,0,317,318,3,12,6,0,318,319,5,32,0,0,319,320,3,144,72,0,
320,23,1,0,0,0,321,336,5,23,0,0,322,323,5,25,0,0,323,336,5,32,0,0,324,325,
5,32,0,0,325,336,5,25,0,0,326,336,5,24,0,0,327,328,5,26,0,0,328,336,5,32,
0,0,329,330,5,32,0,0,330,336,5,26,0,0,331,336,3,26,13,0,332,336,5,32,0,0,
333,336,5,25,0,0,334,336,5,26,0,0,335,321,1,0,0,0,335,322,1,0,0,0,335,324,
1,0,0,0,335,326,1,0,0,0,335,327,1,0,0,0,335,329,1,0,0,0,335,331,1,0,0,0,
335,332,1,0,0,0,335,333,1,0,0,0,335,334,1,0,0,0,336,25,1,0,0,0,337,338,5,
26,0,0,338,339,5,25,0,0,339,27,1,0,0,0,340,341,5,7,0,0,341,343,3,134,67,
0,342,344,5,9,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,347,1,0,0,0,345,348,
3,10,5,0,346,348,3,6,3,0,347,345,1,0,0,0,347,346,1,0,0,0,348,29,1,0,0,0,
349,350,5,33,0,0,350,351,3,12,6,0,351,352,5,32,0,0,352,353,3,134,67,0,353,
354,5,34,0,0,354,357,3,134,67,0,355,356,5,35,0,0,356,358,3,134,67,0,357,
355,1,0,0,0,357,358,1,0,0,0,358,364,1,0,0,0,359,360,3,10,5,0,360,362,5,8,
0,0,361,363,3,12,6,0,362,361,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,
359,1,0,0,0,364,365,1,0,0,0,365,31,1,0,0,0,366,367,5,33,0,0,367,368,3,12,
6,0,368,369,5,32,0,0,369,370,3,134,67,0,370,371,5,34,0,0,371,374,3,134,67,
0,372,373,5,35,0,0,373,375,3,134,67,0,374,372,1,0,0,0,374,375,1,0,0,0,375,
33,1,0,0,0,376,385,5,8,0,0,377,382,3,12,6,0,378,379,5,27,0,0,379,381,3,12,
6,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,
386,1,0,0,0,384,382,1,0,0,0,385,377,1,0,0,0,385,386,1,0,0,0,386,35,1,0,0,
0,387,390,5,36,0,0,388,389,5,118,0,0,389,391,7,3,0,0,390,388,1,0,0,0,390,
391,1,0,0,0,391,392,1,0,0,0,392,393,3,142,71,0,393,37,1,0,0,0,394,395,5,
77,0,0,395,396,3,142,71,0,396,39,1,0,0,0,397,398,5,38,0,0,398,399,3,142,
71,0,399,41,1,0,0,0,400,401,5,5,0,0,401,402,3,6,3,0,402,43,1,0,0,0,403,404,
5,6,0,0,404,405,3,134,67,0,405,45,1,0,0,0,406,407,5,58,0,0,407,408,3,134,
67,0,408,409,5,27,0,0,409,410,3,134,67,0,410,47,1,0,0,0,411,412,5,45,0,0,
412,413,3,144,72,0,413,49,1,0,0,0,414,419,5,47,0,0,415,416,3,134,67,0,416,
417,5,27,0,0,417,418,3,134,67,0,418,420,1,0,0,0,419,415,1,0,0,0,419,420,
1,0,0,0,420,428,1,0,0,0,421,422,5,34,0,0,422,423,3,134,67,0,423,424,5,27,
0,0,424,425,3,134,67,0,425,427,1,0,0,0,426,421,1,0,0,0,427,430,1,0,0,0,428,
426,1,0,0,0,428,429,1,0,0,0,429,51,1,0,0,0,430,428,1,0,0,0,431,436,5,48,
0,0,432,433,3,134,67,0,433,434,5,27,0,0,434,435,3,134,67,0,435,437,1,0,0,
0,436,432,1,0,0,0,436,437,1,0,0,0,437,445,1,0,0,0,438,439,5,34,0,0,439,440,
3,134,67,0,440,441,5,27,0,0,441,442,3,134,67,0,442,444,1,0,0,0,443,438,1,
0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,53,1,0,0,0,447,
445,1,0,0,0,448,449,5,56,0,0,449,450,3,134,67,0,450,451,5,27,0,0,451,452,
3,134,67,0,452,55,1,0,0,0,453,454,5,54,0,0,454,455,3,134,67,0,455,456,5,
5,0,0,456,461,3,6,3,0,457,458,5,27,0,0,458,460,3,6,3,0,459,457,1,0,0,0,460,
463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,57,1,0,0,0,463,461,1,0,0,
0,464,465,5,54,0,0,465,466,3,134,67,0,466,467,5,6,0,0,467,472,3,6,3,0,468,
469,5,27,0,0,469,471,3,6,3,0,470,468,1,0,0,0,471,474,1,0,0,0,472,470,1,0,
0,0,472,473,1,0,0,0,473,59,1,0,0,0,474,472,1,0,0,0,475,476,5,51,0,0,476,
477,3,134,67,0,477,61,1,0,0,0,478,479,5,52,0,0,479,480,3,134,67,0,480,63,
1,0,0,0,481,482,5,61,0,0,482,483,5,40,0,0,483,484,3,134,67,0,484,65,1,0,
0,0,485,486,5,62,0,0,486,487,5,40,0,0,487,488,3,134,67,0,488,67,1,0,0,0,
489,490,5,75,0,0,490,497,3,70,35,0,491,493,5,27,0,0,492,494,3,70,35,0,493,
492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,491,1,0,0,0,496,499,1,0,
0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,69,1,0,0,0,499,497,1,0,0,0,500,503,
3,120,60,0,501,503,5,118,0,0,502,500,1,0,0,0,502,501,1,0,0,0,503,71,1,0,
0,0,504,505,5,76,0,0,505,506,3,134,67,0,506,507,5,27,0,0,507,510,3,134,67,
0,508,509,5,27,0,0,509,511,3,134,67,0,510,508,1,0,0,0,510,511,1,0,0,0,511,
73,1,0,0,0,512,513,5,78,0,0,513,519,3,134,67,0,514,515,5,80,0,0,515,516,
3,134,67,0,516,517,5,27,0,0,517,518,3,134,67,0,518,520,1,0,0,0,519,514,1,
0,0,0,519,520,1,0,0,0,520,75,1,0,0,0,521,522,5,79,0,0,522,528,3,134,67,0,
523,524,5,80,0,0,524,525,3,134,67,0,525,526,5,27,0,0,526,527,3,134,67,0,
527,529,1,0,0,0,528,523,1,0,0,0,528,529,1,0,0,0,529,77,1,0,0,0,530,532,5,
81,0,0,531,533,5,82,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,
534,535,3,136,68,0,535,536,5,16,0,0,536,537,3,136,68,0,537,538,5,17,0,0,
538,539,5,32,0,0,539,540,3,134,67,0,540,79,1,0,0,0,541,542,5,84,0,0,542,
543,5,16,0,0,543,544,3,134,67,0,544,545,5,17,0,0,545,81,1,0,0,0,546,547,
5,85,0,0,547,548,5,32,0,0,548,549,3,134,67,0,549,83,1,0,0,0,550,551,5,86,
0,0,551,552,5,32,0,0,552,553,3,134,67,0,553,85,1,0,0,0,554,555,5,87,0,0,
555,556,5,32,0,0,556,557,3,134,67,0,557,87,1,0,0,0,558,559,5,88,0,0,559,
560,5,32,0,0,560,561,3,134,67,0,561,89,1,0,0,0,562,563,5,89,0,0,563,564,
5,32,0,0,564,565,3,134,67,0,565,91,1,0,0,0,566,567,5,90,0,0,567,568,3,134,
67,0,568,569,5,27,0,0,569,570,3,134,67,0,570,571,5,80,0,0,571,572,3,134,
67,0,572,93,1,0,0,0,573,574,5,91,0,0,574,575,3,134,67,0,575,576,5,27,0,0,
576,577,3,134,67,0,577,578,5,80,0,0,578,579,3,134,67,0,579,95,1,0,0,0,580,
581,5,66,0,0,581,582,5,5,0,0,582,583,3,6,3,0,583,97,1,0,0,0,584,585,5,49,
0,0,585,586,5,120,0,0,586,99,1,0,0,0,587,588,5,50,0,0,588,589,5,120,0,0,
589,101,1,0,0,0,590,591,5,104,0,0,591,592,3,12,6,0,592,103,1,0,0,0,593,594,
5,105,0,0,594,595,3,12,6,0,595,105,1,0,0,0,596,598,5,28,0,0,597,599,3,134,
67,0,598,597,1,0,0,0,598,599,1,0,0,0,599,107,1,0,0,0,600,605,5,93,0,0,601,
602,3,134,67,0,602,603,5,27,0,0,603,604,3,134,67,0,604,606,1,0,0,0,605,601,
1,0,0,0,605,606,1,0,0,0,606,109,1,0,0,0,607,608,5,108,0,0,608,609,3,134,
67,0,609,111,1,0,0,0,610,611,5,115,0,0,611,612,3,134,67,0,612,113,1,0,0,
0,613,614,5,30,0,0,614,115,1,0,0,0,615,616,5,3,0,0,616,117,1,0,0,0,617,618,
5,111,0,0,618,119,1,0,0,0,619,621,7,4,0,0,620,619,1,0,0,0,620,621,1,0,0,
0,621,622,1,0,0,0,622,623,7,5,0,0,623,121,1,0,0,0,624,660,5,118,0,0,625,
660,3,120,60,0,626,660,3,200,100,0,627,660,3,12,6,0,628,660,3,148,74,0,629,
660,3,146,73,0,630,660,3,150,75,0,631,660,3,174,87,0,632,660,3,152,76,0,
633,660,3,180,90,0,634,660,3,154,77,0,635,660,3,156,78,0,636,660,3,158,79,
0,637,660,3,160,80,0,638,660,3,162,81,0,639,660,3,164,82,0,640,660,3,166,
83,0,641,660,3,168,84,0,642,660,3,170,85,0,643,660,3,178,89,0,644,660,3,
172,86,0,645,660,3,176,88,0,646,660,3,182,91,0,647,660,3,184,92,0,648,660,
3,186,93,0,649,660,3,188,94,0,650,660,3,190,95,0,651,660,3,192,96,0,652,
660,3,194,97,0,653,660,3,196,98,0,654,660,3,198,99,0,655,656,5,16,0,0,656,
657,3,134,67,0,657,658,5,17,0,0,658,660,1,0,0,0,659,624,1,0,0,0,659,625,
1,0,0,0,659,626,1,0,0,0,659,627,1,0,0,0,659,628,1,0,0,0,659,629,1,0,0,0,
659,630,1,0,0,0,659,631,1,0,0,0,659,632,1,0,0,0,659,633,1,0,0,0,659,634,
1,0,0,0,659,635,1,0,0,0,659,636,1,0,0,0,659,637,1,0,0,0,659,638,1,0,0,0,
659,639,1,0,0,0,659,640,1,0,0,0,659,641,1,0,0,0,659,642,1,0,0,0,659,643,
1,0,0,0,659,644,1,0,0,0,659,645,1,0,0,0,659,646,1,0,0,0,659,647,1,0,0,0,
659,648,1,0,0,0,659,649,1,0,0,0,659,650,1,0,0,0,659,651,1,0,0,0,659,652,
1,0,0,0,659,653,1,0,0,0,659,654,1,0,0,0,659,655,1,0,0,0,660,123,1,0,0,0,
661,663,5,110,0,0,662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,666,
7,4,0,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,3,122,61,
0,668,125,1,0,0,0,669,674,3,124,62,0,670,671,5,107,0,0,671,673,3,124,62,
0,672,670,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,127,
1,0,0,0,676,674,1,0,0,0,677,682,3,126,63,0,678,679,7,6,0,0,679,681,3,126,
63,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,
129,1,0,0,0,684,682,1,0,0,0,685,690,3,128,64,0,686,687,7,4,0,0,687,689,3,
128,64,0,688,686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,
691,131,1,0,0,0,692,690,1,0,0,0,693,697,3,130,65,0,694,695,3,24,12,0,695,
696,3,130,65,0,696,698,1,0,0,0,697,694,1,0,0,0,697,698,1,0,0,0,698,133,1,
0,0,0,699,709,3,122,61,0,700,705,3,132,66,0,701,702,7,7,0,0,702,704,3,132,
66,0,703,701,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,
709,1,0,0,0,707,705,1,0,0,0,708,699,1,0,0,0,708,700,1,0,0,0,709,135,1,0,
0,0,710,712,3,138,69,0,711,713,3,140,70,0,712,711,1,0,0,0,712,713,1,0,0,
0,713,137,1,0,0,0,714,718,5,119,0,0,715,717,7,8,0,0,716,715,1,0,0,0,717,
720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,139,1,0,0,0,720,718,1,0,
0,0,721,722,7,9,0,0,722,141,1,0,0,0,723,728,3,12,6,0,724,725,5,27,0,0,725,
727,3,12,6,0,726,724,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,1,0,
0,0,729,143,1,0,0,0,730,728,1,0,0,0,731,736,3,134,67,0,732,733,5,27,0,0,
733,735,3,134,67,0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,
1,0,0,0,737,145,1,0,0,0,738,736,1,0,0,0,739,740,5,39,0,0,740,741,5,16,0,
0,741,742,3,134,67,0,742,743,5,17,0,0,743,147,1,0,0,0,744,745,5,11,0,0,745,
746,5,16,0,0,746,747,3,134,67,0,747,748,5,17,0,0,748,149,1,0,0,0,749,750,
5,44,0,0,750,751,5,16,0,0,751,752,3,134,67,0,752,753,5,17,0,0,753,151,1,
0,0,0,754,755,5,46,0,0,755,756,5,16,0,0,756,757,3,134,67,0,757,758,5,17,
0,0,758,153,1,0,0,0,759,760,5,12,0,0,760,761,5,16,0,0,761,762,3,134,67,0,
762,763,5,27,0,0,763,764,3,134,67,0,764,765,5,27,0,0,765,766,3,134,67,0,
766,767,5,17,0,0,767,155,1,0,0,0,768,769,5,55,0,0,769,770,5,16,0,0,770,771,
3,134,67,0,771,772,5,17,0,0,772,157,1,0,0,0,773,774,5,57,0,0,774,775,5,16,
0,0,775,776,3,134,67,0,776,777,5,17,0,0,777,159,1,0,0,0,778,779,5,59,0,0,
779,780,5,16,0,0,780,781,3,134,67,0,781,782,5,17,0,0,782,161,1,0,0,0,783,
784,5,67,0,0,784,785,5,16,0,0,785,786,3,134,67,0,786,787,5,17,0,0,787,163,
1,0,0,0,788,789,5,68,0,0,789,790,5,16,0,0,790,791,3,134,67,0,791,792,5,17,
0,0,792,165,1,0,0,0,793,794,5,69,0,0,794,795,5,16,0,0,795,796,3,134,67,0,
796,797,5,17,0,0,797,167,1,0,0,0,798,799,5,70,0,0,799,800,5,16,0,0,800,801,
3,134,67,0,801,802,5,17,0,0,802,169,1,0,0,0,803,804,5,13,0,0,804,805,5,16,
0,0,805,806,3,134,67,0,806,807,5,27,0,0,807,808,3,134,67,0,808,809,5,17,
0,0,809,171,1,0,0,0,810,811,5,14,0,0,811,812,5,16,0,0,812,813,3,134,67,0,
813,814,5,27,0,0,814,815,3,134,67,0,815,816,5,17,0,0,816,173,1,0,0,0,817,
818,5,15,0,0,818,819,5,16,0,0,819,820,3,134,67,0,820,821,5,17,0,0,821,175,
1,0,0,0,822,823,5,82,0,0,823,824,3,136,68,0,824,825,5,16,0,0,825,826,3,134,
67,0,826,827,5,17,0,0,827,177,1,0,0,0,828,829,5,83,0,0,829,830,5,16,0,0,
830,831,3,134,67,0,831,832,5,17,0,0,832,179,1,0,0,0,833,834,5,92,0,0,834,
835,5,16,0,0,835,836,3,134,67,0,836,837,5,27,0,0,837,838,3,134,67,0,838,
839,5,17,0,0,839,181,1,0,0,0,840,841,5,95,0,0,841,842,5,16,0,0,842,843,3,
134,67,0,843,844,5,17,0,0,844,183,1,0,0,0,845,846,5,96,0,0,846,847,5,16,
0,0,847,848,3,134,67,0,848,849,5,17,0,0,849,185,1,0,0,0,850,851,5,97,0,0,
851,852,5,16,0,0,852,853,3,134,67,0,853,854,5,17,0,0,854,187,1,0,0,0,855,
856,5,98,0,0,856,857,5,16,0,0,857,858,3,134,67,0,858,859,5,17,0,0,859,189,
1,0,0,0,860,861,5,99,0,0,861,862,5,16,0,0,862,863,3,134,67,0,863,864,5,17,
0,0,864,191,1,0,0,0,865,866,5,100,0,0,866,867,5,16,0,0,867,868,3,134,67,
0,868,869,5,17,0,0,869,193,1,0,0,0,870,871,5,101,0,0,871,872,5,16,0,0,872,
873,3,134,67,0,873,874,5,17,0,0,874,195,1,0,0,0,875,876,5,102,0,0,876,877,
5,16,0,0,877,878,3,134,67,0,878,879,5,17,0,0,879,197,1,0,0,0,880,881,5,103,
0,0,881,882,5,16,0,0,882,883,3,134,67,0,883,884,5,17,0,0,884,199,1,0,0,0,
885,886,5,84,0,0,886,887,5,16,0,0,887,888,3,134,67,0,888,889,5,17,0,0,889,
201,1,0,0,0,51,205,213,217,221,228,232,283,292,297,302,306,313,335,343,347,
357,362,364,374,382,385,390,419,428,436,445,461,472,493,497,502,510,519,
528,532,598,605,620,659,662,665,674,682,690,697,705,708,712,718,728,736];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class jvmBasicParser extends antlr4.Parser {

    static grammarFileName = "jvmBasic.g4";
    static literalNames = [ null, "'$'", "'%'", null, null, null, null, 
                            null, null, null, null, "'CHR$'", "'MID$'", 
                            "'LEFT$'", "'RIGHT$'", "'STR$'", "'('", "')'", 
                            "'+'", "'-'", "'*'", "'/'", null, "'>: '", "'<: '", 
                            "'>'", "'<'", "','", null, null, null, null, 
                            "'='", null, null, null, null, "';'", null, 
                            null, "':'", null, null, null, null, null, null, 
                            null, null, "'PR#'", "'IN#'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'^'", "'&'", 
                            null, null, null, null, null, "'?'" ];
    static symbolicNames = [ null, "DOLLAR", "PERCENT", "RETURN", "PRINT", 
                             "GOTO", "GOSUB", "IF", "NEXT", "THEN", "REM", 
                             "CHR", "MID", "LEFT", "RIGHT", "STR", "LPAREN", 
                             "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", 
                             "CLEAR", "GTE", "LTE", "GT", "LT", "COMMA", 
                             "LIST", "RUN", "END", "LET", "EQ", "FOR", "TO", 
                             "STEP", "INPUT", "SEMICOLON", "DIM", "SQR", 
                             "COLON", "TEXT", "HGR", "HGR2", "LEN", "CALL", 
                             "ASC", "HPLOT", "VPLOT", "PRNUMBER", "INNUMBER", 
                             "VTAB", "HTAB", "HOME", "ON", "PDL", "PLOT", 
                             "PEEK", "POKE", "INTF", "STOP", "HIMEM", "LOMEM", 
                             "FLASH", "INVERSE", "NORMAL", "ONERR", "SPC", 
                             "FRE", "POS", "USR", "TRACE", "NOTRACE", "AND", 
                             "OR", "DATA", "WAIT", "READ", "XDRAW", "DRAW", 
                             "AT", "DEF", "FN", "VAL", "TAB", "SPEED", "ROT", 
                             "SCALE", "COLOR", "HCOLOR", "HLIN", "VLIN", 
                             "SCRN", "POP", "SHLOAD", "SIN", "COS", "TAN", 
                             "ATN", "RND", "SGN", "EXP", "LOG", "ABS", "STORE", 
                             "RECALL", "GET", "EXPONENT", "AMPERSAND", "GR", 
                             "NOT", "RESTORE", "SAVE", "LOAD", "QUESTION", 
                             "INCLUDE", "CLS", "COMMENT", "STRINGLITERAL", 
                             "LETTERS", "NUMBER", "FLOAT", "WS" ];
    static ruleNames = [ "prog", "line", "amperoper", "linenumber", "amprstmt", 
                         "statement", "vardecl", "printstmt1", "printlist", 
                         "getstmt", "letstmt", "variableassignment", "relop", 
                         "neq", "ifstmt", "forstmt1", "forstmt2", "nextstmt", 
                         "inputstmt", "readstmt", "dimstmt", "gotostmt", 
                         "gosubstmt", "pokestmt", "callstmt", "hplotstmt", 
                         "vplotstmt", "plotstmt", "ongotostmt", "ongosubstmt", 
                         "vtabstmnt", "htabstmnt", "himemstmt", "lomemstmt", 
                         "datastmt", "datum", "waitstmt", "xdrawstmt", "drawstmt", 
                         "defstmt", "tabstmt", "speedstmt", "rotstmt", "scalestmt", 
                         "colorstmt", "hcolorstmt", "hlinstmt", "vlinstmt", 
                         "onerrstmt", "prstmt", "instmt", "storestmt", "recallstmt", 
                         "liststmt", "popstmt", "amptstmt", "includestmt", 
                         "endstmt", "returnstmt", "restorestmt", "number", 
                         "func_", "signExpression", "exponentExpression", 
                         "multiplyingExpression", "addingExpression", "relationalExpression", 
                         "expression", "var_", "varname", "varsuffix", "varlist", 
                         "exprlist", "sqrfunc", "chrfunc", "lenfunc", "ascfunc", 
                         "midfunc", "pdlfunc", "peekfunc", "intfunc", "spcfunc", 
                         "frefunc", "posfunc", "usrfunc", "leftfunc", "rightfunc", 
                         "strfunc", "fnfunc", "valfunc", "scrnfunc", "sinfunc", 
                         "cosfunc", "tanfunc", "atnfunc", "rndfunc", "sgnfunc", 
                         "expfunc", "logfunc", "absfunc", "tabfunc" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = jvmBasicParser.ruleNames;
        this.literalNames = jvmBasicParser.literalNames;
        this.symbolicNames = jvmBasicParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	prog() {
	    let localctx = new ProgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, jvmBasicParser.RULE_prog);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 202;
	            this.line();
	            this.state = 205; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===jvmBasicParser.NUMBER);
	        this.state = 207;
	        this.match(jvmBasicParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	line() {
	    let localctx = new LineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, jvmBasicParser.RULE_line);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this.linenumber();
	        this.state = 221;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 210;
	            this.amprstmt();
	            this.state = 217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===jvmBasicParser.COLON) {
	                this.state = 211;
	                this.match(jvmBasicParser.COLON);
	                this.state = 213;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << jvmBasicParser.RETURN) | (1 << jvmBasicParser.PRINT) | (1 << jvmBasicParser.GOTO) | (1 << jvmBasicParser.GOSUB) | (1 << jvmBasicParser.IF) | (1 << jvmBasicParser.NEXT) | (1 << jvmBasicParser.REM) | (1 << jvmBasicParser.CLEAR) | (1 << jvmBasicParser.LIST) | (1 << jvmBasicParser.RUN) | (1 << jvmBasicParser.END) | (1 << jvmBasicParser.LET))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (jvmBasicParser.FOR - 33)) | (1 << (jvmBasicParser.INPUT - 33)) | (1 << (jvmBasicParser.DIM - 33)) | (1 << (jvmBasicParser.TEXT - 33)) | (1 << (jvmBasicParser.HGR - 33)) | (1 << (jvmBasicParser.HGR2 - 33)) | (1 << (jvmBasicParser.CALL - 33)) | (1 << (jvmBasicParser.HPLOT - 33)) | (1 << (jvmBasicParser.VPLOT - 33)) | (1 << (jvmBasicParser.PRNUMBER - 33)) | (1 << (jvmBasicParser.INNUMBER - 33)) | (1 << (jvmBasicParser.VTAB - 33)) | (1 << (jvmBasicParser.HTAB - 33)) | (1 << (jvmBasicParser.HOME - 33)) | (1 << (jvmBasicParser.ON - 33)) | (1 << (jvmBasicParser.PLOT - 33)) | (1 << (jvmBasicParser.POKE - 33)) | (1 << (jvmBasicParser.STOP - 33)) | (1 << (jvmBasicParser.HIMEM - 33)) | (1 << (jvmBasicParser.LOMEM - 33)) | (1 << (jvmBasicParser.FLASH - 33)) | (1 << (jvmBasicParser.INVERSE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (jvmBasicParser.NORMAL - 65)) | (1 << (jvmBasicParser.ONERR - 65)) | (1 << (jvmBasicParser.TRACE - 65)) | (1 << (jvmBasicParser.NOTRACE - 65)) | (1 << (jvmBasicParser.DATA - 65)) | (1 << (jvmBasicParser.WAIT - 65)) | (1 << (jvmBasicParser.READ - 65)) | (1 << (jvmBasicParser.XDRAW - 65)) | (1 << (jvmBasicParser.DRAW - 65)) | (1 << (jvmBasicParser.DEF - 65)) | (1 << (jvmBasicParser.TAB - 65)) | (1 << (jvmBasicParser.SPEED - 65)) | (1 << (jvmBasicParser.ROT - 65)) | (1 << (jvmBasicParser.SCALE - 65)) | (1 << (jvmBasicParser.COLOR - 65)) | (1 << (jvmBasicParser.HCOLOR - 65)) | (1 << (jvmBasicParser.HLIN - 65)) | (1 << (jvmBasicParser.VLIN - 65)) | (1 << (jvmBasicParser.POP - 65)) | (1 << (jvmBasicParser.SHLOAD - 65)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (jvmBasicParser.STORE - 104)) | (1 << (jvmBasicParser.RECALL - 104)) | (1 << (jvmBasicParser.GET - 104)) | (1 << (jvmBasicParser.AMPERSAND - 104)) | (1 << (jvmBasicParser.GR - 104)) | (1 << (jvmBasicParser.RESTORE - 104)) | (1 << (jvmBasicParser.SAVE - 104)) | (1 << (jvmBasicParser.LOAD - 104)) | (1 << (jvmBasicParser.QUESTION - 104)) | (1 << (jvmBasicParser.INCLUDE - 104)) | (1 << (jvmBasicParser.CLS - 104)) | (1 << (jvmBasicParser.COMMENT - 104)) | (1 << (jvmBasicParser.LETTERS - 104)))) !== 0)) {
	                    this.state = 212;
	                    this.amprstmt();
	                }

	                this.state = 219;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 220;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.REM || _la===jvmBasicParser.COMMENT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amperoper() {
	    let localctx = new AmperoperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, jvmBasicParser.RULE_amperoper);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 223;
	        this.match(jvmBasicParser.AMPERSAND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linenumber() {
	    let localctx = new LinenumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, jvmBasicParser.RULE_linenumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amprstmt() {
	    let localctx = new AmprstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, jvmBasicParser.RULE_amprstmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 232;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case jvmBasicParser.RETURN:
	        case jvmBasicParser.PRINT:
	        case jvmBasicParser.GOTO:
	        case jvmBasicParser.GOSUB:
	        case jvmBasicParser.IF:
	        case jvmBasicParser.NEXT:
	        case jvmBasicParser.CLEAR:
	        case jvmBasicParser.LIST:
	        case jvmBasicParser.RUN:
	        case jvmBasicParser.END:
	        case jvmBasicParser.LET:
	        case jvmBasicParser.FOR:
	        case jvmBasicParser.INPUT:
	        case jvmBasicParser.DIM:
	        case jvmBasicParser.TEXT:
	        case jvmBasicParser.HGR:
	        case jvmBasicParser.HGR2:
	        case jvmBasicParser.CALL:
	        case jvmBasicParser.HPLOT:
	        case jvmBasicParser.VPLOT:
	        case jvmBasicParser.PRNUMBER:
	        case jvmBasicParser.INNUMBER:
	        case jvmBasicParser.VTAB:
	        case jvmBasicParser.HTAB:
	        case jvmBasicParser.HOME:
	        case jvmBasicParser.ON:
	        case jvmBasicParser.PLOT:
	        case jvmBasicParser.POKE:
	        case jvmBasicParser.STOP:
	        case jvmBasicParser.HIMEM:
	        case jvmBasicParser.LOMEM:
	        case jvmBasicParser.FLASH:
	        case jvmBasicParser.INVERSE:
	        case jvmBasicParser.NORMAL:
	        case jvmBasicParser.ONERR:
	        case jvmBasicParser.TRACE:
	        case jvmBasicParser.NOTRACE:
	        case jvmBasicParser.DATA:
	        case jvmBasicParser.WAIT:
	        case jvmBasicParser.READ:
	        case jvmBasicParser.XDRAW:
	        case jvmBasicParser.DRAW:
	        case jvmBasicParser.DEF:
	        case jvmBasicParser.TAB:
	        case jvmBasicParser.SPEED:
	        case jvmBasicParser.ROT:
	        case jvmBasicParser.SCALE:
	        case jvmBasicParser.COLOR:
	        case jvmBasicParser.HCOLOR:
	        case jvmBasicParser.HLIN:
	        case jvmBasicParser.VLIN:
	        case jvmBasicParser.POP:
	        case jvmBasicParser.SHLOAD:
	        case jvmBasicParser.STORE:
	        case jvmBasicParser.RECALL:
	        case jvmBasicParser.GET:
	        case jvmBasicParser.AMPERSAND:
	        case jvmBasicParser.GR:
	        case jvmBasicParser.RESTORE:
	        case jvmBasicParser.SAVE:
	        case jvmBasicParser.LOAD:
	        case jvmBasicParser.QUESTION:
	        case jvmBasicParser.INCLUDE:
	        case jvmBasicParser.CLS:
	        case jvmBasicParser.LETTERS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 228;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 227;
	                this.amperoper();

	            }
	            this.state = 230;
	            this.statement();
	            break;
	        case jvmBasicParser.REM:
	        case jvmBasicParser.COMMENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 231;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.REM || _la===jvmBasicParser.COMMENT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, jvmBasicParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 234;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.CLEAR || _la===jvmBasicParser.RUN || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (jvmBasicParser.TEXT - 41)) | (1 << (jvmBasicParser.HGR - 41)) | (1 << (jvmBasicParser.HGR2 - 41)) | (1 << (jvmBasicParser.HOME - 41)) | (1 << (jvmBasicParser.STOP - 41)) | (1 << (jvmBasicParser.FLASH - 41)) | (1 << (jvmBasicParser.INVERSE - 41)) | (1 << (jvmBasicParser.NORMAL - 41)) | (1 << (jvmBasicParser.TRACE - 41)) | (1 << (jvmBasicParser.NOTRACE - 41)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (jvmBasicParser.SHLOAD - 94)) | (1 << (jvmBasicParser.GR - 94)) | (1 << (jvmBasicParser.SAVE - 94)) | (1 << (jvmBasicParser.LOAD - 94)) | (1 << (jvmBasicParser.CLS - 94)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 235;
	            this.endstmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 236;
	            this.returnstmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 237;
	            this.restorestmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 238;
	            this.amptstmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 239;
	            this.popstmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 240;
	            this.liststmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 241;
	            this.storestmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 242;
	            this.getstmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 243;
	            this.recallstmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 244;
	            this.nextstmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 245;
	            this.instmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 246;
	            this.prstmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 247;
	            this.onerrstmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 248;
	            this.hlinstmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 249;
	            this.vlinstmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 250;
	            this.colorstmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 251;
	            this.speedstmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 252;
	            this.scalestmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 253;
	            this.rotstmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 254;
	            this.hcolorstmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 255;
	            this.himemstmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 256;
	            this.lomemstmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 257;
	            this.printstmt1();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 258;
	            this.pokestmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 259;
	            this.plotstmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 260;
	            this.ongotostmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 261;
	            this.ongosubstmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 262;
	            this.ifstmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 263;
	            this.forstmt1();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 264;
	            this.forstmt2();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 265;
	            this.inputstmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 266;
	            this.tabstmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 267;
	            this.dimstmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 268;
	            this.gotostmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 269;
	            this.gosubstmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 270;
	            this.callstmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 271;
	            this.readstmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 272;
	            this.hplotstmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 273;
	            this.vplotstmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 274;
	            this.vtabstmnt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 275;
	            this.htabstmnt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 276;
	            this.waitstmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 277;
	            this.datastmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 278;
	            this.xdrawstmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 279;
	            this.drawstmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 280;
	            this.defstmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 281;
	            this.letstmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 282;
	            this.includestmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vardecl() {
	    let localctx = new VardeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, jvmBasicParser.RULE_vardecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this.var_();
	        this.state = 292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.LPAREN) {
	            this.state = 286;
	            this.match(jvmBasicParser.LPAREN);
	            this.state = 287;
	            this.exprlist();
	            this.state = 288;
	            this.match(jvmBasicParser.RPAREN);
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printstmt1() {
	    let localctx = new Printstmt1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, jvmBasicParser.RULE_printstmt1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 295;
	        _la = this._input.LA(1);
	        if(!(_la===jvmBasicParser.PRINT || _la===jvmBasicParser.QUESTION)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 296;
	            this.printlist();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	printlist() {
	    let localctx = new PrintlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, jvmBasicParser.RULE_printlist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 299;
	        this.expression();
	        this.state = 306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA || _la===jvmBasicParser.SEMICOLON) {
	            this.state = 300;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.COMMA || _la===jvmBasicParser.SEMICOLON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            if(la_===1) {
	                this.state = 301;
	                this.expression();

	            }
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getstmt() {
	    let localctx = new GetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, jvmBasicParser.RULE_getstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(jvmBasicParser.GET);
	        this.state = 310;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letstmt() {
	    let localctx = new LetstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, jvmBasicParser.RULE_letstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.LET) {
	            this.state = 312;
	            this.match(jvmBasicParser.LET);
	        }

	        this.state = 315;
	        this.variableassignment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableassignment() {
	    let localctx = new VariableassignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, jvmBasicParser.RULE_variableassignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.vardecl();
	        this.state = 318;
	        this.match(jvmBasicParser.EQ);
	        this.state = 319;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relop() {
	    let localctx = new RelopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, jvmBasicParser.RULE_relop);
	    try {
	        this.state = 335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 321;
	            this.match(jvmBasicParser.GTE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 322;
	            this.match(jvmBasicParser.GT);
	            this.state = 323;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 324;
	            this.match(jvmBasicParser.EQ);
	            this.state = 325;
	            this.match(jvmBasicParser.GT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 326;
	            this.match(jvmBasicParser.LTE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 327;
	            this.match(jvmBasicParser.LT);
	            this.state = 328;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 329;
	            this.match(jvmBasicParser.EQ);
	            this.state = 330;
	            this.match(jvmBasicParser.LT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 331;
	            this.neq();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 332;
	            this.match(jvmBasicParser.EQ);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 333;
	            this.match(jvmBasicParser.GT);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 334;
	            this.match(jvmBasicParser.LT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	neq() {
	    let localctx = new NeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, jvmBasicParser.RULE_neq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.match(jvmBasicParser.LT);
	        this.state = 338;
	        this.match(jvmBasicParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifstmt() {
	    let localctx = new IfstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, jvmBasicParser.RULE_ifstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.match(jvmBasicParser.IF);
	        this.state = 341;
	        this.expression();
	        this.state = 343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.THEN) {
	            this.state = 342;
	            this.match(jvmBasicParser.THEN);
	        }

	        this.state = 347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case jvmBasicParser.RETURN:
	        case jvmBasicParser.PRINT:
	        case jvmBasicParser.GOTO:
	        case jvmBasicParser.GOSUB:
	        case jvmBasicParser.IF:
	        case jvmBasicParser.NEXT:
	        case jvmBasicParser.CLEAR:
	        case jvmBasicParser.LIST:
	        case jvmBasicParser.RUN:
	        case jvmBasicParser.END:
	        case jvmBasicParser.LET:
	        case jvmBasicParser.FOR:
	        case jvmBasicParser.INPUT:
	        case jvmBasicParser.DIM:
	        case jvmBasicParser.TEXT:
	        case jvmBasicParser.HGR:
	        case jvmBasicParser.HGR2:
	        case jvmBasicParser.CALL:
	        case jvmBasicParser.HPLOT:
	        case jvmBasicParser.VPLOT:
	        case jvmBasicParser.PRNUMBER:
	        case jvmBasicParser.INNUMBER:
	        case jvmBasicParser.VTAB:
	        case jvmBasicParser.HTAB:
	        case jvmBasicParser.HOME:
	        case jvmBasicParser.ON:
	        case jvmBasicParser.PLOT:
	        case jvmBasicParser.POKE:
	        case jvmBasicParser.STOP:
	        case jvmBasicParser.HIMEM:
	        case jvmBasicParser.LOMEM:
	        case jvmBasicParser.FLASH:
	        case jvmBasicParser.INVERSE:
	        case jvmBasicParser.NORMAL:
	        case jvmBasicParser.ONERR:
	        case jvmBasicParser.TRACE:
	        case jvmBasicParser.NOTRACE:
	        case jvmBasicParser.DATA:
	        case jvmBasicParser.WAIT:
	        case jvmBasicParser.READ:
	        case jvmBasicParser.XDRAW:
	        case jvmBasicParser.DRAW:
	        case jvmBasicParser.DEF:
	        case jvmBasicParser.TAB:
	        case jvmBasicParser.SPEED:
	        case jvmBasicParser.ROT:
	        case jvmBasicParser.SCALE:
	        case jvmBasicParser.COLOR:
	        case jvmBasicParser.HCOLOR:
	        case jvmBasicParser.HLIN:
	        case jvmBasicParser.VLIN:
	        case jvmBasicParser.POP:
	        case jvmBasicParser.SHLOAD:
	        case jvmBasicParser.STORE:
	        case jvmBasicParser.RECALL:
	        case jvmBasicParser.GET:
	        case jvmBasicParser.AMPERSAND:
	        case jvmBasicParser.GR:
	        case jvmBasicParser.RESTORE:
	        case jvmBasicParser.SAVE:
	        case jvmBasicParser.LOAD:
	        case jvmBasicParser.QUESTION:
	        case jvmBasicParser.INCLUDE:
	        case jvmBasicParser.CLS:
	        case jvmBasicParser.LETTERS:
	            this.state = 345;
	            this.statement();
	            break;
	        case jvmBasicParser.NUMBER:
	            this.state = 346;
	            this.linenumber();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forstmt1() {
	    let localctx = new Forstmt1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, jvmBasicParser.RULE_forstmt1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 349;
	        this.match(jvmBasicParser.FOR);
	        this.state = 350;
	        this.vardecl();
	        this.state = 351;
	        this.match(jvmBasicParser.EQ);
	        this.state = 352;
	        this.expression();
	        this.state = 353;
	        this.match(jvmBasicParser.TO);
	        this.state = 354;
	        this.expression();
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.STEP) {
	            this.state = 355;
	            this.match(jvmBasicParser.STEP);
	            this.state = 356;
	            this.expression();
	        }

	        this.state = 364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 359;
	            this.statement();
	            this.state = 360;
	            this.match(jvmBasicParser.NEXT);
	            this.state = 362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===jvmBasicParser.LETTERS) {
	                this.state = 361;
	                this.vardecl();
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forstmt2() {
	    let localctx = new Forstmt2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, jvmBasicParser.RULE_forstmt2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this.match(jvmBasicParser.FOR);
	        this.state = 367;
	        this.vardecl();
	        this.state = 368;
	        this.match(jvmBasicParser.EQ);
	        this.state = 369;
	        this.expression();
	        this.state = 370;
	        this.match(jvmBasicParser.TO);
	        this.state = 371;
	        this.expression();
	        this.state = 374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.STEP) {
	            this.state = 372;
	            this.match(jvmBasicParser.STEP);
	            this.state = 373;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextstmt() {
	    let localctx = new NextstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, jvmBasicParser.RULE_nextstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.match(jvmBasicParser.NEXT);
	        this.state = 385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.LETTERS) {
	            this.state = 377;
	            this.vardecl();
	            this.state = 382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===jvmBasicParser.COMMA) {
	                this.state = 378;
	                this.match(jvmBasicParser.COMMA);
	                this.state = 379;
	                this.vardecl();
	                this.state = 384;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputstmt() {
	    let localctx = new InputstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, jvmBasicParser.RULE_inputstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(jvmBasicParser.INPUT);
	        this.state = 390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.STRINGLITERAL) {
	            this.state = 388;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            this.state = 389;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.COMMA || _la===jvmBasicParser.SEMICOLON)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 392;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readstmt() {
	    let localctx = new ReadstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, jvmBasicParser.RULE_readstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.match(jvmBasicParser.READ);
	        this.state = 395;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimstmt() {
	    let localctx = new DimstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, jvmBasicParser.RULE_dimstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(jvmBasicParser.DIM);
	        this.state = 398;
	        this.varlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotostmt() {
	    let localctx = new GotostmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, jvmBasicParser.RULE_gotostmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 400;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 401;
	        this.linenumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gosubstmt() {
	    let localctx = new GosubstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, jvmBasicParser.RULE_gosubstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.match(jvmBasicParser.GOSUB);
	        this.state = 404;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pokestmt() {
	    let localctx = new PokestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, jvmBasicParser.RULE_pokestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.match(jvmBasicParser.POKE);
	        this.state = 407;
	        this.expression();
	        this.state = 408;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 409;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callstmt() {
	    let localctx = new CallstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, jvmBasicParser.RULE_callstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.match(jvmBasicParser.CALL);
	        this.state = 412;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hplotstmt() {
	    let localctx = new HplotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, jvmBasicParser.RULE_hplotstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.match(jvmBasicParser.HPLOT);
	        this.state = 419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 415;
	            this.expression();
	            this.state = 416;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 417;
	            this.expression();

	        }
	        this.state = 428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.TO) {
	            this.state = 421;
	            this.match(jvmBasicParser.TO);
	            this.state = 422;
	            this.expression();
	            this.state = 423;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 424;
	            this.expression();
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vplotstmt() {
	    let localctx = new VplotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, jvmBasicParser.RULE_vplotstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.match(jvmBasicParser.VPLOT);
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 432;
	            this.expression();
	            this.state = 433;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 434;
	            this.expression();

	        }
	        this.state = 445;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.TO) {
	            this.state = 438;
	            this.match(jvmBasicParser.TO);
	            this.state = 439;
	            this.expression();
	            this.state = 440;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 441;
	            this.expression();
	            this.state = 447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plotstmt() {
	    let localctx = new PlotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, jvmBasicParser.RULE_plotstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.match(jvmBasicParser.PLOT);
	        this.state = 449;
	        this.expression();
	        this.state = 450;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 451;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ongotostmt() {
	    let localctx = new OngotostmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, jvmBasicParser.RULE_ongotostmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.match(jvmBasicParser.ON);
	        this.state = 454;
	        this.expression();
	        this.state = 455;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 456;
	        this.linenumber();
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA) {
	            this.state = 457;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 458;
	            this.linenumber();
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ongosubstmt() {
	    let localctx = new OngosubstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, jvmBasicParser.RULE_ongosubstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(jvmBasicParser.ON);
	        this.state = 465;
	        this.expression();
	        this.state = 466;
	        this.match(jvmBasicParser.GOSUB);
	        this.state = 467;
	        this.linenumber();
	        this.state = 472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA) {
	            this.state = 468;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 469;
	            this.linenumber();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vtabstmnt() {
	    let localctx = new VtabstmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, jvmBasicParser.RULE_vtabstmnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this.match(jvmBasicParser.VTAB);
	        this.state = 476;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	htabstmnt() {
	    let localctx = new HtabstmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, jvmBasicParser.RULE_htabstmnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this.match(jvmBasicParser.HTAB);
	        this.state = 479;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	himemstmt() {
	    let localctx = new HimemstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, jvmBasicParser.RULE_himemstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.match(jvmBasicParser.HIMEM);
	        this.state = 482;
	        this.match(jvmBasicParser.COLON);
	        this.state = 483;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lomemstmt() {
	    let localctx = new LomemstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, jvmBasicParser.RULE_lomemstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(jvmBasicParser.LOMEM);
	        this.state = 486;
	        this.match(jvmBasicParser.COLON);
	        this.state = 487;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datastmt() {
	    let localctx = new DatastmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, jvmBasicParser.RULE_datastmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(jvmBasicParser.DATA);
	        this.state = 490;
	        this.datum();
	        this.state = 497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA) {
	            this.state = 491;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            if(la_===1) {
	                this.state = 492;
	                this.datum();

	            }
	            this.state = 499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datum() {
	    let localctx = new DatumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, jvmBasicParser.RULE_datum);
	    try {
	        this.state = 502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case jvmBasicParser.PLUS:
	        case jvmBasicParser.MINUS:
	        case jvmBasicParser.NUMBER:
	        case jvmBasicParser.FLOAT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 500;
	            this.number();
	            break;
	        case jvmBasicParser.STRINGLITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 501;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	waitstmt() {
	    let localctx = new WaitstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, jvmBasicParser.RULE_waitstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(jvmBasicParser.WAIT);
	        this.state = 505;
	        this.expression();
	        this.state = 506;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 507;
	        this.expression();
	        this.state = 510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.COMMA) {
	            this.state = 508;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 509;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xdrawstmt() {
	    let localctx = new XdrawstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, jvmBasicParser.RULE_xdrawstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(jvmBasicParser.XDRAW);
	        this.state = 513;
	        this.expression();
	        this.state = 519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.AT) {
	            this.state = 514;
	            this.match(jvmBasicParser.AT);
	            this.state = 515;
	            this.expression();
	            this.state = 516;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 517;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drawstmt() {
	    let localctx = new DrawstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, jvmBasicParser.RULE_drawstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.match(jvmBasicParser.DRAW);
	        this.state = 522;
	        this.expression();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.AT) {
	            this.state = 523;
	            this.match(jvmBasicParser.AT);
	            this.state = 524;
	            this.expression();
	            this.state = 525;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 526;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defstmt() {
	    let localctx = new DefstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, jvmBasicParser.RULE_defstmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this.match(jvmBasicParser.DEF);
	        this.state = 532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.FN) {
	            this.state = 531;
	            this.match(jvmBasicParser.FN);
	        }

	        this.state = 534;
	        this.var_();
	        this.state = 535;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 536;
	        this.var_();
	        this.state = 537;
	        this.match(jvmBasicParser.RPAREN);
	        this.state = 538;
	        this.match(jvmBasicParser.EQ);
	        this.state = 539;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabstmt() {
	    let localctx = new TabstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, jvmBasicParser.RULE_tabstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(jvmBasicParser.TAB);
	        this.state = 542;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 543;
	        this.expression();
	        this.state = 544;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	speedstmt() {
	    let localctx = new SpeedstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, jvmBasicParser.RULE_speedstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(jvmBasicParser.SPEED);
	        this.state = 547;
	        this.match(jvmBasicParser.EQ);
	        this.state = 548;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rotstmt() {
	    let localctx = new RotstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, jvmBasicParser.RULE_rotstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(jvmBasicParser.ROT);
	        this.state = 551;
	        this.match(jvmBasicParser.EQ);
	        this.state = 552;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalestmt() {
	    let localctx = new ScalestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, jvmBasicParser.RULE_scalestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(jvmBasicParser.SCALE);
	        this.state = 555;
	        this.match(jvmBasicParser.EQ);
	        this.state = 556;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colorstmt() {
	    let localctx = new ColorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, jvmBasicParser.RULE_colorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.match(jvmBasicParser.COLOR);
	        this.state = 559;
	        this.match(jvmBasicParser.EQ);
	        this.state = 560;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hcolorstmt() {
	    let localctx = new HcolorstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, jvmBasicParser.RULE_hcolorstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.match(jvmBasicParser.HCOLOR);
	        this.state = 563;
	        this.match(jvmBasicParser.EQ);
	        this.state = 564;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hlinstmt() {
	    let localctx = new HlinstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, jvmBasicParser.RULE_hlinstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        this.match(jvmBasicParser.HLIN);
	        this.state = 567;
	        this.expression();
	        this.state = 568;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 569;
	        this.expression();
	        this.state = 570;
	        this.match(jvmBasicParser.AT);
	        this.state = 571;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vlinstmt() {
	    let localctx = new VlinstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, jvmBasicParser.RULE_vlinstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 573;
	        this.match(jvmBasicParser.VLIN);
	        this.state = 574;
	        this.expression();
	        this.state = 575;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 576;
	        this.expression();
	        this.state = 577;
	        this.match(jvmBasicParser.AT);
	        this.state = 578;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onerrstmt() {
	    let localctx = new OnerrstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, jvmBasicParser.RULE_onerrstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.match(jvmBasicParser.ONERR);
	        this.state = 581;
	        this.match(jvmBasicParser.GOTO);
	        this.state = 582;
	        this.linenumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prstmt() {
	    let localctx = new PrstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, jvmBasicParser.RULE_prstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(jvmBasicParser.PRNUMBER);
	        this.state = 585;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instmt() {
	    let localctx = new InstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, jvmBasicParser.RULE_instmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(jvmBasicParser.INNUMBER);
	        this.state = 588;
	        this.match(jvmBasicParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storestmt() {
	    let localctx = new StorestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, jvmBasicParser.RULE_storestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.match(jvmBasicParser.STORE);
	        this.state = 591;
	        this.vardecl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recallstmt() {
	    let localctx = new RecallstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, jvmBasicParser.RULE_recallstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.match(jvmBasicParser.RECALL);
	        this.state = 594;
	        this.vardecl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	liststmt() {
	    let localctx = new ListstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, jvmBasicParser.RULE_liststmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.match(jvmBasicParser.LIST);
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 597;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	popstmt() {
	    let localctx = new PopstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, jvmBasicParser.RULE_popstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(jvmBasicParser.POP);
	        this.state = 605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 601;
	            this.expression();
	            this.state = 602;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 603;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	amptstmt() {
	    let localctx = new AmptstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, jvmBasicParser.RULE_amptstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(jvmBasicParser.AMPERSAND);
	        this.state = 608;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includestmt() {
	    let localctx = new IncludestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, jvmBasicParser.RULE_includestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this.match(jvmBasicParser.INCLUDE);
	        this.state = 611;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endstmt() {
	    let localctx = new EndstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, jvmBasicParser.RULE_endstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.match(jvmBasicParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnstmt() {
	    let localctx = new ReturnstmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, jvmBasicParser.RULE_returnstmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.match(jvmBasicParser.RETURN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restorestmt() {
	    let localctx = new RestorestmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, jvmBasicParser.RULE_restorestmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.match(jvmBasicParser.RESTORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, jvmBasicParser.RULE_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.PLUS || _la===jvmBasicParser.MINUS) {
	            this.state = 619;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.PLUS || _la===jvmBasicParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 622;
	        _la = this._input.LA(1);
	        if(!(_la===jvmBasicParser.NUMBER || _la===jvmBasicParser.FLOAT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_() {
	    let localctx = new Func_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, jvmBasicParser.RULE_func_);
	    try {
	        this.state = 659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case jvmBasicParser.STRINGLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.match(jvmBasicParser.STRINGLITERAL);
	            break;
	        case jvmBasicParser.PLUS:
	        case jvmBasicParser.MINUS:
	        case jvmBasicParser.NUMBER:
	        case jvmBasicParser.FLOAT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.number();
	            break;
	        case jvmBasicParser.TAB:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 626;
	            this.tabfunc();
	            break;
	        case jvmBasicParser.LETTERS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 627;
	            this.vardecl();
	            break;
	        case jvmBasicParser.CHR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 628;
	            this.chrfunc();
	            break;
	        case jvmBasicParser.SQR:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 629;
	            this.sqrfunc();
	            break;
	        case jvmBasicParser.LEN:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 630;
	            this.lenfunc();
	            break;
	        case jvmBasicParser.STR:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 631;
	            this.strfunc();
	            break;
	        case jvmBasicParser.ASC:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 632;
	            this.ascfunc();
	            break;
	        case jvmBasicParser.SCRN:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 633;
	            this.scrnfunc();
	            break;
	        case jvmBasicParser.MID:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 634;
	            this.midfunc();
	            break;
	        case jvmBasicParser.PDL:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 635;
	            this.pdlfunc();
	            break;
	        case jvmBasicParser.PEEK:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 636;
	            this.peekfunc();
	            break;
	        case jvmBasicParser.INTF:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 637;
	            this.intfunc();
	            break;
	        case jvmBasicParser.SPC:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 638;
	            this.spcfunc();
	            break;
	        case jvmBasicParser.FRE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 639;
	            this.frefunc();
	            break;
	        case jvmBasicParser.POS:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 640;
	            this.posfunc();
	            break;
	        case jvmBasicParser.USR:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 641;
	            this.usrfunc();
	            break;
	        case jvmBasicParser.LEFT:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 642;
	            this.leftfunc();
	            break;
	        case jvmBasicParser.VAL:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 643;
	            this.valfunc();
	            break;
	        case jvmBasicParser.RIGHT:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 644;
	            this.rightfunc();
	            break;
	        case jvmBasicParser.FN:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 645;
	            this.fnfunc();
	            break;
	        case jvmBasicParser.SIN:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 646;
	            this.sinfunc();
	            break;
	        case jvmBasicParser.COS:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 647;
	            this.cosfunc();
	            break;
	        case jvmBasicParser.TAN:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 648;
	            this.tanfunc();
	            break;
	        case jvmBasicParser.ATN:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 649;
	            this.atnfunc();
	            break;
	        case jvmBasicParser.RND:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 650;
	            this.rndfunc();
	            break;
	        case jvmBasicParser.SGN:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 651;
	            this.sgnfunc();
	            break;
	        case jvmBasicParser.EXP:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 652;
	            this.expfunc();
	            break;
	        case jvmBasicParser.LOG:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 653;
	            this.logfunc();
	            break;
	        case jvmBasicParser.ABS:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 654;
	            this.absfunc();
	            break;
	        case jvmBasicParser.LPAREN:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 655;
	            this.match(jvmBasicParser.LPAREN);
	            this.state = 656;
	            this.expression();
	            this.state = 657;
	            this.match(jvmBasicParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signExpression() {
	    let localctx = new SignExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, jvmBasicParser.RULE_signExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.NOT) {
	            this.state = 661;
	            this.match(jvmBasicParser.NOT);
	        }

	        this.state = 665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 664;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.PLUS || _la===jvmBasicParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 667;
	        this.func_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentExpression() {
	    let localctx = new ExponentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, jvmBasicParser.RULE_exponentExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.signExpression();
	        this.state = 674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.EXPONENT) {
	            this.state = 670;
	            this.match(jvmBasicParser.EXPONENT);
	            this.state = 671;
	            this.signExpression();
	            this.state = 676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyingExpression() {
	    let localctx = new MultiplyingExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, jvmBasicParser.RULE_multiplyingExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.exponentExpression();
	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.TIMES || _la===jvmBasicParser.DIV) {
	            this.state = 678;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.TIMES || _la===jvmBasicParser.DIV)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 679;
	            this.exponentExpression();
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addingExpression() {
	    let localctx = new AddingExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, jvmBasicParser.RULE_addingExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.multiplyingExpression();
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.PLUS || _la===jvmBasicParser.MINUS) {
	            this.state = 686;
	            _la = this._input.LA(1);
	            if(!(_la===jvmBasicParser.PLUS || _la===jvmBasicParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 687;
	            this.multiplyingExpression();
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, jvmBasicParser.RULE_relationalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.addingExpression();
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (jvmBasicParser.GTE - 23)) | (1 << (jvmBasicParser.LTE - 23)) | (1 << (jvmBasicParser.GT - 23)) | (1 << (jvmBasicParser.LT - 23)) | (1 << (jvmBasicParser.EQ - 23)))) !== 0)) {
	            this.state = 694;
	            this.relop();
	            this.state = 695;
	            this.addingExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, jvmBasicParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 699;
	            this.func_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 700;
	            this.relationalExpression();
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===jvmBasicParser.AND || _la===jvmBasicParser.OR) {
	                this.state = 701;
	                _la = this._input.LA(1);
	                if(!(_la===jvmBasicParser.AND || _la===jvmBasicParser.OR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 702;
	                this.relationalExpression();
	                this.state = 707;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new Var_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, jvmBasicParser.RULE_var_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.varname();
	        this.state = 712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===jvmBasicParser.DOLLAR || _la===jvmBasicParser.PERCENT) {
	            this.state = 711;
	            this.varsuffix();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varname() {
	    let localctx = new VarnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, jvmBasicParser.RULE_varname);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.match(jvmBasicParser.LETTERS);
	        this.state = 718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 715;
	                _la = this._input.LA(1);
	                if(!(_la===jvmBasicParser.LETTERS || _la===jvmBasicParser.NUMBER)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varsuffix() {
	    let localctx = new VarsuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, jvmBasicParser.RULE_varsuffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        _la = this._input.LA(1);
	        if(!(_la===jvmBasicParser.DOLLAR || _la===jvmBasicParser.PERCENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varlist() {
	    let localctx = new VarlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, jvmBasicParser.RULE_varlist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this.vardecl();
	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA) {
	            this.state = 724;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 725;
	            this.vardecl();
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprlist() {
	    let localctx = new ExprlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, jvmBasicParser.RULE_exprlist);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.expression();
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===jvmBasicParser.COMMA) {
	            this.state = 732;
	            this.match(jvmBasicParser.COMMA);
	            this.state = 733;
	            this.expression();
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqrfunc() {
	    let localctx = new SqrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, jvmBasicParser.RULE_sqrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.match(jvmBasicParser.SQR);
	        this.state = 740;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 741;
	        this.expression();
	        this.state = 742;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	chrfunc() {
	    let localctx = new ChrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, jvmBasicParser.RULE_chrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this.match(jvmBasicParser.CHR);
	        this.state = 745;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 746;
	        this.expression();
	        this.state = 747;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lenfunc() {
	    let localctx = new LenfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, jvmBasicParser.RULE_lenfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.match(jvmBasicParser.LEN);
	        this.state = 750;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 751;
	        this.expression();
	        this.state = 752;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ascfunc() {
	    let localctx = new AscfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, jvmBasicParser.RULE_ascfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.match(jvmBasicParser.ASC);
	        this.state = 755;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 756;
	        this.expression();
	        this.state = 757;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	midfunc() {
	    let localctx = new MidfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, jvmBasicParser.RULE_midfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(jvmBasicParser.MID);
	        this.state = 760;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 761;
	        this.expression();
	        this.state = 762;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 763;
	        this.expression();
	        this.state = 764;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 765;
	        this.expression();
	        this.state = 766;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pdlfunc() {
	    let localctx = new PdlfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, jvmBasicParser.RULE_pdlfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.match(jvmBasicParser.PDL);
	        this.state = 769;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 770;
	        this.expression();
	        this.state = 771;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	peekfunc() {
	    let localctx = new PeekfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, jvmBasicParser.RULE_peekfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.match(jvmBasicParser.PEEK);
	        this.state = 774;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 775;
	        this.expression();
	        this.state = 776;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intfunc() {
	    let localctx = new IntfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, jvmBasicParser.RULE_intfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(jvmBasicParser.INTF);
	        this.state = 779;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 780;
	        this.expression();
	        this.state = 781;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spcfunc() {
	    let localctx = new SpcfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, jvmBasicParser.RULE_spcfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        this.match(jvmBasicParser.SPC);
	        this.state = 784;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 785;
	        this.expression();
	        this.state = 786;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frefunc() {
	    let localctx = new FrefuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, jvmBasicParser.RULE_frefunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.match(jvmBasicParser.FRE);
	        this.state = 789;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 790;
	        this.expression();
	        this.state = 791;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	posfunc() {
	    let localctx = new PosfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, jvmBasicParser.RULE_posfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(jvmBasicParser.POS);
	        this.state = 794;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 795;
	        this.expression();
	        this.state = 796;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usrfunc() {
	    let localctx = new UsrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, jvmBasicParser.RULE_usrfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(jvmBasicParser.USR);
	        this.state = 799;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 800;
	        this.expression();
	        this.state = 801;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftfunc() {
	    let localctx = new LeftfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, jvmBasicParser.RULE_leftfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.match(jvmBasicParser.LEFT);
	        this.state = 804;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 805;
	        this.expression();
	        this.state = 806;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 807;
	        this.expression();
	        this.state = 808;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rightfunc() {
	    let localctx = new RightfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, jvmBasicParser.RULE_rightfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(jvmBasicParser.RIGHT);
	        this.state = 811;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 812;
	        this.expression();
	        this.state = 813;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 814;
	        this.expression();
	        this.state = 815;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strfunc() {
	    let localctx = new StrfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, jvmBasicParser.RULE_strfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.match(jvmBasicParser.STR);
	        this.state = 818;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 819;
	        this.expression();
	        this.state = 820;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fnfunc() {
	    let localctx = new FnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, jvmBasicParser.RULE_fnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.match(jvmBasicParser.FN);
	        this.state = 823;
	        this.var_();
	        this.state = 824;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 825;
	        this.expression();
	        this.state = 826;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valfunc() {
	    let localctx = new ValfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, jvmBasicParser.RULE_valfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(jvmBasicParser.VAL);
	        this.state = 829;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 830;
	        this.expression();
	        this.state = 831;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scrnfunc() {
	    let localctx = new ScrnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, jvmBasicParser.RULE_scrnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.match(jvmBasicParser.SCRN);
	        this.state = 834;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 835;
	        this.expression();
	        this.state = 836;
	        this.match(jvmBasicParser.COMMA);
	        this.state = 837;
	        this.expression();
	        this.state = 838;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sinfunc() {
	    let localctx = new SinfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, jvmBasicParser.RULE_sinfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.match(jvmBasicParser.SIN);
	        this.state = 841;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 842;
	        this.expression();
	        this.state = 843;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosfunc() {
	    let localctx = new CosfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, jvmBasicParser.RULE_cosfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.match(jvmBasicParser.COS);
	        this.state = 846;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 847;
	        this.expression();
	        this.state = 848;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tanfunc() {
	    let localctx = new TanfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, jvmBasicParser.RULE_tanfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.match(jvmBasicParser.TAN);
	        this.state = 851;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 852;
	        this.expression();
	        this.state = 853;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atnfunc() {
	    let localctx = new AtnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, jvmBasicParser.RULE_atnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.match(jvmBasicParser.ATN);
	        this.state = 856;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 857;
	        this.expression();
	        this.state = 858;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rndfunc() {
	    let localctx = new RndfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, jvmBasicParser.RULE_rndfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(jvmBasicParser.RND);
	        this.state = 861;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 862;
	        this.expression();
	        this.state = 863;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sgnfunc() {
	    let localctx = new SgnfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, jvmBasicParser.RULE_sgnfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.match(jvmBasicParser.SGN);
	        this.state = 866;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 867;
	        this.expression();
	        this.state = 868;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expfunc() {
	    let localctx = new ExpfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, jvmBasicParser.RULE_expfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 870;
	        this.match(jvmBasicParser.EXP);
	        this.state = 871;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 872;
	        this.expression();
	        this.state = 873;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfunc() {
	    let localctx = new LogfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, jvmBasicParser.RULE_logfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this.match(jvmBasicParser.LOG);
	        this.state = 876;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 877;
	        this.expression();
	        this.state = 878;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absfunc() {
	    let localctx = new AbsfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, jvmBasicParser.RULE_absfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        this.match(jvmBasicParser.ABS);
	        this.state = 881;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 882;
	        this.expression();
	        this.state = 883;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabfunc() {
	    let localctx = new TabfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, jvmBasicParser.RULE_tabfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 885;
	        this.match(jvmBasicParser.TAB);
	        this.state = 886;
	        this.match(jvmBasicParser.LPAREN);
	        this.state = 887;
	        this.expression();
	        this.state = 888;
	        this.match(jvmBasicParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

jvmBasicParser.EOF = antlr4.Token.EOF;
jvmBasicParser.DOLLAR = 1;
jvmBasicParser.PERCENT = 2;
jvmBasicParser.RETURN = 3;
jvmBasicParser.PRINT = 4;
jvmBasicParser.GOTO = 5;
jvmBasicParser.GOSUB = 6;
jvmBasicParser.IF = 7;
jvmBasicParser.NEXT = 8;
jvmBasicParser.THEN = 9;
jvmBasicParser.REM = 10;
jvmBasicParser.CHR = 11;
jvmBasicParser.MID = 12;
jvmBasicParser.LEFT = 13;
jvmBasicParser.RIGHT = 14;
jvmBasicParser.STR = 15;
jvmBasicParser.LPAREN = 16;
jvmBasicParser.RPAREN = 17;
jvmBasicParser.PLUS = 18;
jvmBasicParser.MINUS = 19;
jvmBasicParser.TIMES = 20;
jvmBasicParser.DIV = 21;
jvmBasicParser.CLEAR = 22;
jvmBasicParser.GTE = 23;
jvmBasicParser.LTE = 24;
jvmBasicParser.GT = 25;
jvmBasicParser.LT = 26;
jvmBasicParser.COMMA = 27;
jvmBasicParser.LIST = 28;
jvmBasicParser.RUN = 29;
jvmBasicParser.END = 30;
jvmBasicParser.LET = 31;
jvmBasicParser.EQ = 32;
jvmBasicParser.FOR = 33;
jvmBasicParser.TO = 34;
jvmBasicParser.STEP = 35;
jvmBasicParser.INPUT = 36;
jvmBasicParser.SEMICOLON = 37;
jvmBasicParser.DIM = 38;
jvmBasicParser.SQR = 39;
jvmBasicParser.COLON = 40;
jvmBasicParser.TEXT = 41;
jvmBasicParser.HGR = 42;
jvmBasicParser.HGR2 = 43;
jvmBasicParser.LEN = 44;
jvmBasicParser.CALL = 45;
jvmBasicParser.ASC = 46;
jvmBasicParser.HPLOT = 47;
jvmBasicParser.VPLOT = 48;
jvmBasicParser.PRNUMBER = 49;
jvmBasicParser.INNUMBER = 50;
jvmBasicParser.VTAB = 51;
jvmBasicParser.HTAB = 52;
jvmBasicParser.HOME = 53;
jvmBasicParser.ON = 54;
jvmBasicParser.PDL = 55;
jvmBasicParser.PLOT = 56;
jvmBasicParser.PEEK = 57;
jvmBasicParser.POKE = 58;
jvmBasicParser.INTF = 59;
jvmBasicParser.STOP = 60;
jvmBasicParser.HIMEM = 61;
jvmBasicParser.LOMEM = 62;
jvmBasicParser.FLASH = 63;
jvmBasicParser.INVERSE = 64;
jvmBasicParser.NORMAL = 65;
jvmBasicParser.ONERR = 66;
jvmBasicParser.SPC = 67;
jvmBasicParser.FRE = 68;
jvmBasicParser.POS = 69;
jvmBasicParser.USR = 70;
jvmBasicParser.TRACE = 71;
jvmBasicParser.NOTRACE = 72;
jvmBasicParser.AND = 73;
jvmBasicParser.OR = 74;
jvmBasicParser.DATA = 75;
jvmBasicParser.WAIT = 76;
jvmBasicParser.READ = 77;
jvmBasicParser.XDRAW = 78;
jvmBasicParser.DRAW = 79;
jvmBasicParser.AT = 80;
jvmBasicParser.DEF = 81;
jvmBasicParser.FN = 82;
jvmBasicParser.VAL = 83;
jvmBasicParser.TAB = 84;
jvmBasicParser.SPEED = 85;
jvmBasicParser.ROT = 86;
jvmBasicParser.SCALE = 87;
jvmBasicParser.COLOR = 88;
jvmBasicParser.HCOLOR = 89;
jvmBasicParser.HLIN = 90;
jvmBasicParser.VLIN = 91;
jvmBasicParser.SCRN = 92;
jvmBasicParser.POP = 93;
jvmBasicParser.SHLOAD = 94;
jvmBasicParser.SIN = 95;
jvmBasicParser.COS = 96;
jvmBasicParser.TAN = 97;
jvmBasicParser.ATN = 98;
jvmBasicParser.RND = 99;
jvmBasicParser.SGN = 100;
jvmBasicParser.EXP = 101;
jvmBasicParser.LOG = 102;
jvmBasicParser.ABS = 103;
jvmBasicParser.STORE = 104;
jvmBasicParser.RECALL = 105;
jvmBasicParser.GET = 106;
jvmBasicParser.EXPONENT = 107;
jvmBasicParser.AMPERSAND = 108;
jvmBasicParser.GR = 109;
jvmBasicParser.NOT = 110;
jvmBasicParser.RESTORE = 111;
jvmBasicParser.SAVE = 112;
jvmBasicParser.LOAD = 113;
jvmBasicParser.QUESTION = 114;
jvmBasicParser.INCLUDE = 115;
jvmBasicParser.CLS = 116;
jvmBasicParser.COMMENT = 117;
jvmBasicParser.STRINGLITERAL = 118;
jvmBasicParser.LETTERS = 119;
jvmBasicParser.NUMBER = 120;
jvmBasicParser.FLOAT = 121;
jvmBasicParser.WS = 122;

jvmBasicParser.RULE_prog = 0;
jvmBasicParser.RULE_line = 1;
jvmBasicParser.RULE_amperoper = 2;
jvmBasicParser.RULE_linenumber = 3;
jvmBasicParser.RULE_amprstmt = 4;
jvmBasicParser.RULE_statement = 5;
jvmBasicParser.RULE_vardecl = 6;
jvmBasicParser.RULE_printstmt1 = 7;
jvmBasicParser.RULE_printlist = 8;
jvmBasicParser.RULE_getstmt = 9;
jvmBasicParser.RULE_letstmt = 10;
jvmBasicParser.RULE_variableassignment = 11;
jvmBasicParser.RULE_relop = 12;
jvmBasicParser.RULE_neq = 13;
jvmBasicParser.RULE_ifstmt = 14;
jvmBasicParser.RULE_forstmt1 = 15;
jvmBasicParser.RULE_forstmt2 = 16;
jvmBasicParser.RULE_nextstmt = 17;
jvmBasicParser.RULE_inputstmt = 18;
jvmBasicParser.RULE_readstmt = 19;
jvmBasicParser.RULE_dimstmt = 20;
jvmBasicParser.RULE_gotostmt = 21;
jvmBasicParser.RULE_gosubstmt = 22;
jvmBasicParser.RULE_pokestmt = 23;
jvmBasicParser.RULE_callstmt = 24;
jvmBasicParser.RULE_hplotstmt = 25;
jvmBasicParser.RULE_vplotstmt = 26;
jvmBasicParser.RULE_plotstmt = 27;
jvmBasicParser.RULE_ongotostmt = 28;
jvmBasicParser.RULE_ongosubstmt = 29;
jvmBasicParser.RULE_vtabstmnt = 30;
jvmBasicParser.RULE_htabstmnt = 31;
jvmBasicParser.RULE_himemstmt = 32;
jvmBasicParser.RULE_lomemstmt = 33;
jvmBasicParser.RULE_datastmt = 34;
jvmBasicParser.RULE_datum = 35;
jvmBasicParser.RULE_waitstmt = 36;
jvmBasicParser.RULE_xdrawstmt = 37;
jvmBasicParser.RULE_drawstmt = 38;
jvmBasicParser.RULE_defstmt = 39;
jvmBasicParser.RULE_tabstmt = 40;
jvmBasicParser.RULE_speedstmt = 41;
jvmBasicParser.RULE_rotstmt = 42;
jvmBasicParser.RULE_scalestmt = 43;
jvmBasicParser.RULE_colorstmt = 44;
jvmBasicParser.RULE_hcolorstmt = 45;
jvmBasicParser.RULE_hlinstmt = 46;
jvmBasicParser.RULE_vlinstmt = 47;
jvmBasicParser.RULE_onerrstmt = 48;
jvmBasicParser.RULE_prstmt = 49;
jvmBasicParser.RULE_instmt = 50;
jvmBasicParser.RULE_storestmt = 51;
jvmBasicParser.RULE_recallstmt = 52;
jvmBasicParser.RULE_liststmt = 53;
jvmBasicParser.RULE_popstmt = 54;
jvmBasicParser.RULE_amptstmt = 55;
jvmBasicParser.RULE_includestmt = 56;
jvmBasicParser.RULE_endstmt = 57;
jvmBasicParser.RULE_returnstmt = 58;
jvmBasicParser.RULE_restorestmt = 59;
jvmBasicParser.RULE_number = 60;
jvmBasicParser.RULE_func_ = 61;
jvmBasicParser.RULE_signExpression = 62;
jvmBasicParser.RULE_exponentExpression = 63;
jvmBasicParser.RULE_multiplyingExpression = 64;
jvmBasicParser.RULE_addingExpression = 65;
jvmBasicParser.RULE_relationalExpression = 66;
jvmBasicParser.RULE_expression = 67;
jvmBasicParser.RULE_var_ = 68;
jvmBasicParser.RULE_varname = 69;
jvmBasicParser.RULE_varsuffix = 70;
jvmBasicParser.RULE_varlist = 71;
jvmBasicParser.RULE_exprlist = 72;
jvmBasicParser.RULE_sqrfunc = 73;
jvmBasicParser.RULE_chrfunc = 74;
jvmBasicParser.RULE_lenfunc = 75;
jvmBasicParser.RULE_ascfunc = 76;
jvmBasicParser.RULE_midfunc = 77;
jvmBasicParser.RULE_pdlfunc = 78;
jvmBasicParser.RULE_peekfunc = 79;
jvmBasicParser.RULE_intfunc = 80;
jvmBasicParser.RULE_spcfunc = 81;
jvmBasicParser.RULE_frefunc = 82;
jvmBasicParser.RULE_posfunc = 83;
jvmBasicParser.RULE_usrfunc = 84;
jvmBasicParser.RULE_leftfunc = 85;
jvmBasicParser.RULE_rightfunc = 86;
jvmBasicParser.RULE_strfunc = 87;
jvmBasicParser.RULE_fnfunc = 88;
jvmBasicParser.RULE_valfunc = 89;
jvmBasicParser.RULE_scrnfunc = 90;
jvmBasicParser.RULE_sinfunc = 91;
jvmBasicParser.RULE_cosfunc = 92;
jvmBasicParser.RULE_tanfunc = 93;
jvmBasicParser.RULE_atnfunc = 94;
jvmBasicParser.RULE_rndfunc = 95;
jvmBasicParser.RULE_sgnfunc = 96;
jvmBasicParser.RULE_expfunc = 97;
jvmBasicParser.RULE_logfunc = 98;
jvmBasicParser.RULE_absfunc = 99;
jvmBasicParser.RULE_tabfunc = 100;

class ProgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_prog;
    }

	EOF() {
	    return this.getToken(jvmBasicParser.EOF, 0);
	};

	line = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LineContext);
	    } else {
	        return this.getTypedRuleContext(LineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterProg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitProg(this);
		}
	}


}



class LineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_line;
    }

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	COMMENT() {
	    return this.getToken(jvmBasicParser.COMMENT, 0);
	};

	REM() {
	    return this.getToken(jvmBasicParser.REM, 0);
	};

	amprstmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AmprstmtContext);
	    } else {
	        return this.getTypedRuleContext(AmprstmtContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COLON);
	    } else {
	        return this.getToken(jvmBasicParser.COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLine(this);
		}
	}


}



class AmperoperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amperoper;
    }

	AMPERSAND() {
	    return this.getToken(jvmBasicParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmperoper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmperoper(this);
		}
	}


}



class LinenumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_linenumber;
    }

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLinenumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLinenumber(this);
		}
	}


}



class AmprstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amprstmt;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	amperoper() {
	    return this.getTypedRuleContext(AmperoperContext,0);
	};

	COMMENT() {
	    return this.getToken(jvmBasicParser.COMMENT, 0);
	};

	REM() {
	    return this.getToken(jvmBasicParser.REM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmprstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmprstmt(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_statement;
    }

	CLS() {
	    return this.getToken(jvmBasicParser.CLS, 0);
	};

	LOAD() {
	    return this.getToken(jvmBasicParser.LOAD, 0);
	};

	SAVE() {
	    return this.getToken(jvmBasicParser.SAVE, 0);
	};

	TRACE() {
	    return this.getToken(jvmBasicParser.TRACE, 0);
	};

	NOTRACE() {
	    return this.getToken(jvmBasicParser.NOTRACE, 0);
	};

	FLASH() {
	    return this.getToken(jvmBasicParser.FLASH, 0);
	};

	INVERSE() {
	    return this.getToken(jvmBasicParser.INVERSE, 0);
	};

	GR() {
	    return this.getToken(jvmBasicParser.GR, 0);
	};

	NORMAL() {
	    return this.getToken(jvmBasicParser.NORMAL, 0);
	};

	SHLOAD() {
	    return this.getToken(jvmBasicParser.SHLOAD, 0);
	};

	CLEAR() {
	    return this.getToken(jvmBasicParser.CLEAR, 0);
	};

	RUN() {
	    return this.getToken(jvmBasicParser.RUN, 0);
	};

	STOP() {
	    return this.getToken(jvmBasicParser.STOP, 0);
	};

	TEXT() {
	    return this.getToken(jvmBasicParser.TEXT, 0);
	};

	HOME() {
	    return this.getToken(jvmBasicParser.HOME, 0);
	};

	HGR() {
	    return this.getToken(jvmBasicParser.HGR, 0);
	};

	HGR2() {
	    return this.getToken(jvmBasicParser.HGR2, 0);
	};

	endstmt() {
	    return this.getTypedRuleContext(EndstmtContext,0);
	};

	returnstmt() {
	    return this.getTypedRuleContext(ReturnstmtContext,0);
	};

	restorestmt() {
	    return this.getTypedRuleContext(RestorestmtContext,0);
	};

	amptstmt() {
	    return this.getTypedRuleContext(AmptstmtContext,0);
	};

	popstmt() {
	    return this.getTypedRuleContext(PopstmtContext,0);
	};

	liststmt() {
	    return this.getTypedRuleContext(ListstmtContext,0);
	};

	storestmt() {
	    return this.getTypedRuleContext(StorestmtContext,0);
	};

	getstmt() {
	    return this.getTypedRuleContext(GetstmtContext,0);
	};

	recallstmt() {
	    return this.getTypedRuleContext(RecallstmtContext,0);
	};

	nextstmt() {
	    return this.getTypedRuleContext(NextstmtContext,0);
	};

	instmt() {
	    return this.getTypedRuleContext(InstmtContext,0);
	};

	prstmt() {
	    return this.getTypedRuleContext(PrstmtContext,0);
	};

	onerrstmt() {
	    return this.getTypedRuleContext(OnerrstmtContext,0);
	};

	hlinstmt() {
	    return this.getTypedRuleContext(HlinstmtContext,0);
	};

	vlinstmt() {
	    return this.getTypedRuleContext(VlinstmtContext,0);
	};

	colorstmt() {
	    return this.getTypedRuleContext(ColorstmtContext,0);
	};

	speedstmt() {
	    return this.getTypedRuleContext(SpeedstmtContext,0);
	};

	scalestmt() {
	    return this.getTypedRuleContext(ScalestmtContext,0);
	};

	rotstmt() {
	    return this.getTypedRuleContext(RotstmtContext,0);
	};

	hcolorstmt() {
	    return this.getTypedRuleContext(HcolorstmtContext,0);
	};

	himemstmt() {
	    return this.getTypedRuleContext(HimemstmtContext,0);
	};

	lomemstmt() {
	    return this.getTypedRuleContext(LomemstmtContext,0);
	};

	printstmt1() {
	    return this.getTypedRuleContext(Printstmt1Context,0);
	};

	pokestmt() {
	    return this.getTypedRuleContext(PokestmtContext,0);
	};

	plotstmt() {
	    return this.getTypedRuleContext(PlotstmtContext,0);
	};

	ongotostmt() {
	    return this.getTypedRuleContext(OngotostmtContext,0);
	};

	ongosubstmt() {
	    return this.getTypedRuleContext(OngosubstmtContext,0);
	};

	ifstmt() {
	    return this.getTypedRuleContext(IfstmtContext,0);
	};

	forstmt1() {
	    return this.getTypedRuleContext(Forstmt1Context,0);
	};

	forstmt2() {
	    return this.getTypedRuleContext(Forstmt2Context,0);
	};

	inputstmt() {
	    return this.getTypedRuleContext(InputstmtContext,0);
	};

	tabstmt() {
	    return this.getTypedRuleContext(TabstmtContext,0);
	};

	dimstmt() {
	    return this.getTypedRuleContext(DimstmtContext,0);
	};

	gotostmt() {
	    return this.getTypedRuleContext(GotostmtContext,0);
	};

	gosubstmt() {
	    return this.getTypedRuleContext(GosubstmtContext,0);
	};

	callstmt() {
	    return this.getTypedRuleContext(CallstmtContext,0);
	};

	readstmt() {
	    return this.getTypedRuleContext(ReadstmtContext,0);
	};

	hplotstmt() {
	    return this.getTypedRuleContext(HplotstmtContext,0);
	};

	vplotstmt() {
	    return this.getTypedRuleContext(VplotstmtContext,0);
	};

	vtabstmnt() {
	    return this.getTypedRuleContext(VtabstmntContext,0);
	};

	htabstmnt() {
	    return this.getTypedRuleContext(HtabstmntContext,0);
	};

	waitstmt() {
	    return this.getTypedRuleContext(WaitstmtContext,0);
	};

	datastmt() {
	    return this.getTypedRuleContext(DatastmtContext,0);
	};

	xdrawstmt() {
	    return this.getTypedRuleContext(XdrawstmtContext,0);
	};

	drawstmt() {
	    return this.getTypedRuleContext(DrawstmtContext,0);
	};

	defstmt() {
	    return this.getTypedRuleContext(DefstmtContext,0);
	};

	letstmt() {
	    return this.getTypedRuleContext(LetstmtContext,0);
	};

	includestmt() {
	    return this.getTypedRuleContext(IncludestmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStatement(this);
		}
	}


}



class VardeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vardecl;
    }

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.LPAREN);
	    } else {
	        return this.getToken(jvmBasicParser.LPAREN, i);
	    }
	};


	exprlist = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprlistContext);
	    } else {
	        return this.getTypedRuleContext(ExprlistContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.RPAREN);
	    } else {
	        return this.getToken(jvmBasicParser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVardecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVardecl(this);
		}
	}


}



class Printstmt1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_printstmt1;
    }

	PRINT() {
	    return this.getToken(jvmBasicParser.PRINT, 0);
	};

	QUESTION() {
	    return this.getToken(jvmBasicParser.QUESTION, 0);
	};

	printlist() {
	    return this.getTypedRuleContext(PrintlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrintstmt1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrintstmt1(this);
		}
	}


}



class PrintlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_printlist;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.SEMICOLON);
	    } else {
	        return this.getToken(jvmBasicParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrintlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrintlist(this);
		}
	}


}



class GetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_getstmt;
    }

	GET() {
	    return this.getToken(jvmBasicParser.GET, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGetstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGetstmt(this);
		}
	}


}



class LetstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_letstmt;
    }

	variableassignment() {
	    return this.getTypedRuleContext(VariableassignmentContext,0);
	};

	LET() {
	    return this.getToken(jvmBasicParser.LET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLetstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLetstmt(this);
		}
	}


}



class VariableassignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_variableassignment;
    }

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVariableassignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVariableassignment(this);
		}
	}


}



class RelopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_relop;
    }

	GTE() {
	    return this.getToken(jvmBasicParser.GTE, 0);
	};

	GT() {
	    return this.getToken(jvmBasicParser.GT, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	LTE() {
	    return this.getToken(jvmBasicParser.LTE, 0);
	};

	LT() {
	    return this.getToken(jvmBasicParser.LT, 0);
	};

	neq() {
	    return this.getTypedRuleContext(NeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRelop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRelop(this);
		}
	}


}



class NeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_neq;
    }

	LT() {
	    return this.getToken(jvmBasicParser.LT, 0);
	};

	GT() {
	    return this.getToken(jvmBasicParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNeq(this);
		}
	}


}



class IfstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ifstmt;
    }

	IF() {
	    return this.getToken(jvmBasicParser.IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	THEN() {
	    return this.getToken(jvmBasicParser.THEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIfstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIfstmt(this);
		}
	}


}



class Forstmt1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_forstmt1;
    }

	FOR() {
	    return this.getToken(jvmBasicParser.FOR, 0);
	};

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(jvmBasicParser.TO, 0);
	};

	STEP() {
	    return this.getToken(jvmBasicParser.STEP, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	NEXT() {
	    return this.getToken(jvmBasicParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterForstmt1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitForstmt1(this);
		}
	}


}



class Forstmt2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_forstmt2;
    }

	FOR() {
	    return this.getToken(jvmBasicParser.FOR, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	TO() {
	    return this.getToken(jvmBasicParser.TO, 0);
	};

	STEP() {
	    return this.getToken(jvmBasicParser.STEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterForstmt2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitForstmt2(this);
		}
	}


}



class NextstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_nextstmt;
    }

	NEXT() {
	    return this.getToken(jvmBasicParser.NEXT, 0);
	};

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNextstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNextstmt(this);
		}
	}


}



class InputstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_inputstmt;
    }

	INPUT() {
	    return this.getToken(jvmBasicParser.INPUT, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	SEMICOLON() {
	    return this.getToken(jvmBasicParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterInputstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitInputstmt(this);
		}
	}


}



class ReadstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_readstmt;
    }

	READ() {
	    return this.getToken(jvmBasicParser.READ, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterReadstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitReadstmt(this);
		}
	}


}



class DimstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_dimstmt;
    }

	DIM() {
	    return this.getToken(jvmBasicParser.DIM, 0);
	};

	varlist() {
	    return this.getTypedRuleContext(VarlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDimstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDimstmt(this);
		}
	}


}



class GotostmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_gotostmt;
    }

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGotostmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGotostmt(this);
		}
	}


}



class GosubstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_gosubstmt;
    }

	GOSUB() {
	    return this.getToken(jvmBasicParser.GOSUB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterGosubstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitGosubstmt(this);
		}
	}


}



class PokestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_pokestmt;
    }

	POKE() {
	    return this.getToken(jvmBasicParser.POKE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPokestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPokestmt(this);
		}
	}


}



class CallstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_callstmt;
    }

	CALL() {
	    return this.getToken(jvmBasicParser.CALL, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterCallstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitCallstmt(this);
		}
	}


}



class HplotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hplotstmt;
    }

	HPLOT() {
	    return this.getToken(jvmBasicParser.HPLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TO);
	    } else {
	        return this.getToken(jvmBasicParser.TO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHplotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHplotstmt(this);
		}
	}


}



class VplotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vplotstmt;
    }

	VPLOT() {
	    return this.getToken(jvmBasicParser.VPLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TO);
	    } else {
	        return this.getToken(jvmBasicParser.TO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVplotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVplotstmt(this);
		}
	}


}



class PlotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_plotstmt;
    }

	PLOT() {
	    return this.getToken(jvmBasicParser.PLOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPlotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPlotstmt(this);
		}
	}


}



class OngotostmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ongotostmt;
    }

	ON() {
	    return this.getToken(jvmBasicParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinenumberContext);
	    } else {
	        return this.getTypedRuleContext(LinenumberContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOngotostmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOngotostmt(this);
		}
	}


}



class OngosubstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ongosubstmt;
    }

	ON() {
	    return this.getToken(jvmBasicParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	GOSUB() {
	    return this.getToken(jvmBasicParser.GOSUB, 0);
	};

	linenumber = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinenumberContext);
	    } else {
	        return this.getTypedRuleContext(LinenumberContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOngosubstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOngosubstmt(this);
		}
	}


}



class VtabstmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vtabstmnt;
    }

	VTAB() {
	    return this.getToken(jvmBasicParser.VTAB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVtabstmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVtabstmnt(this);
		}
	}


}



class HtabstmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_htabstmnt;
    }

	HTAB() {
	    return this.getToken(jvmBasicParser.HTAB, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHtabstmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHtabstmnt(this);
		}
	}


}



class HimemstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_himemstmt;
    }

	HIMEM() {
	    return this.getToken(jvmBasicParser.HIMEM, 0);
	};

	COLON() {
	    return this.getToken(jvmBasicParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHimemstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHimemstmt(this);
		}
	}


}



class LomemstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_lomemstmt;
    }

	LOMEM() {
	    return this.getToken(jvmBasicParser.LOMEM, 0);
	};

	COLON() {
	    return this.getToken(jvmBasicParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLomemstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLomemstmt(this);
		}
	}


}



class DatastmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_datastmt;
    }

	DATA() {
	    return this.getToken(jvmBasicParser.DATA, 0);
	};

	datum = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatumContext);
	    } else {
	        return this.getTypedRuleContext(DatumContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDatastmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDatastmt(this);
		}
	}


}



class DatumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_datum;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDatum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDatum(this);
		}
	}


}



class WaitstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_waitstmt;
    }

	WAIT() {
	    return this.getToken(jvmBasicParser.WAIT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterWaitstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitWaitstmt(this);
		}
	}


}



class XdrawstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_xdrawstmt;
    }

	XDRAW() {
	    return this.getToken(jvmBasicParser.XDRAW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterXdrawstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitXdrawstmt(this);
		}
	}


}



class DrawstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_drawstmt;
    }

	DRAW() {
	    return this.getToken(jvmBasicParser.DRAW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDrawstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDrawstmt(this);
		}
	}


}



class DefstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_defstmt;
    }

	DEF() {
	    return this.getToken(jvmBasicParser.DEF, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_Context);
	    } else {
	        return this.getTypedRuleContext(Var_Context,i);
	    }
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FN() {
	    return this.getToken(jvmBasicParser.FN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterDefstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitDefstmt(this);
		}
	}


}



class TabstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tabstmt;
    }

	TAB() {
	    return this.getToken(jvmBasicParser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTabstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTabstmt(this);
		}
	}


}



class SpeedstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_speedstmt;
    }

	SPEED() {
	    return this.getToken(jvmBasicParser.SPEED, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSpeedstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSpeedstmt(this);
		}
	}


}



class RotstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rotstmt;
    }

	ROT() {
	    return this.getToken(jvmBasicParser.ROT, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRotstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRotstmt(this);
		}
	}


}



class ScalestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_scalestmt;
    }

	SCALE() {
	    return this.getToken(jvmBasicParser.SCALE, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterScalestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitScalestmt(this);
		}
	}


}



class ColorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_colorstmt;
    }

	COLOR() {
	    return this.getToken(jvmBasicParser.COLOR, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterColorstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitColorstmt(this);
		}
	}


}



class HcolorstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hcolorstmt;
    }

	HCOLOR() {
	    return this.getToken(jvmBasicParser.HCOLOR, 0);
	};

	EQ() {
	    return this.getToken(jvmBasicParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHcolorstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHcolorstmt(this);
		}
	}


}



class HlinstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_hlinstmt;
    }

	HLIN() {
	    return this.getToken(jvmBasicParser.HLIN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterHlinstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitHlinstmt(this);
		}
	}


}



class VlinstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_vlinstmt;
    }

	VLIN() {
	    return this.getToken(jvmBasicParser.VLIN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	AT() {
	    return this.getToken(jvmBasicParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVlinstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVlinstmt(this);
		}
	}


}



class OnerrstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_onerrstmt;
    }

	ONERR() {
	    return this.getToken(jvmBasicParser.ONERR, 0);
	};

	GOTO() {
	    return this.getToken(jvmBasicParser.GOTO, 0);
	};

	linenumber() {
	    return this.getTypedRuleContext(LinenumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterOnerrstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitOnerrstmt(this);
		}
	}


}



class PrstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_prstmt;
    }

	PRNUMBER() {
	    return this.getToken(jvmBasicParser.PRNUMBER, 0);
	};

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPrstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPrstmt(this);
		}
	}


}



class InstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_instmt;
    }

	INNUMBER() {
	    return this.getToken(jvmBasicParser.INNUMBER, 0);
	};

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterInstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitInstmt(this);
		}
	}


}



class StorestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_storestmt;
    }

	STORE() {
	    return this.getToken(jvmBasicParser.STORE, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStorestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStorestmt(this);
		}
	}


}



class RecallstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_recallstmt;
    }

	RECALL() {
	    return this.getToken(jvmBasicParser.RECALL, 0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRecallstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRecallstmt(this);
		}
	}


}



class ListstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_liststmt;
    }

	LIST() {
	    return this.getToken(jvmBasicParser.LIST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterListstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitListstmt(this);
		}
	}


}



class PopstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_popstmt;
    }

	POP() {
	    return this.getToken(jvmBasicParser.POP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPopstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPopstmt(this);
		}
	}


}



class AmptstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_amptstmt;
    }

	AMPERSAND() {
	    return this.getToken(jvmBasicParser.AMPERSAND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAmptstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAmptstmt(this);
		}
	}


}



class IncludestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_includestmt;
    }

	INCLUDE() {
	    return this.getToken(jvmBasicParser.INCLUDE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIncludestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIncludestmt(this);
		}
	}


}



class EndstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_endstmt;
    }

	END() {
	    return this.getToken(jvmBasicParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterEndstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitEndstmt(this);
		}
	}


}



class ReturnstmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_returnstmt;
    }

	RETURN() {
	    return this.getToken(jvmBasicParser.RETURN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterReturnstmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitReturnstmt(this);
		}
	}


}



class RestorestmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_restorestmt;
    }

	RESTORE() {
	    return this.getToken(jvmBasicParser.RESTORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRestorestmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRestorestmt(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_number;
    }

	NUMBER() {
	    return this.getToken(jvmBasicParser.NUMBER, 0);
	};

	FLOAT() {
	    return this.getToken(jvmBasicParser.FLOAT, 0);
	};

	PLUS() {
	    return this.getToken(jvmBasicParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(jvmBasicParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitNumber(this);
		}
	}


}



class Func_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_func_;
    }

	STRINGLITERAL() {
	    return this.getToken(jvmBasicParser.STRINGLITERAL, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	tabfunc() {
	    return this.getTypedRuleContext(TabfuncContext,0);
	};

	vardecl() {
	    return this.getTypedRuleContext(VardeclContext,0);
	};

	chrfunc() {
	    return this.getTypedRuleContext(ChrfuncContext,0);
	};

	sqrfunc() {
	    return this.getTypedRuleContext(SqrfuncContext,0);
	};

	lenfunc() {
	    return this.getTypedRuleContext(LenfuncContext,0);
	};

	strfunc() {
	    return this.getTypedRuleContext(StrfuncContext,0);
	};

	ascfunc() {
	    return this.getTypedRuleContext(AscfuncContext,0);
	};

	scrnfunc() {
	    return this.getTypedRuleContext(ScrnfuncContext,0);
	};

	midfunc() {
	    return this.getTypedRuleContext(MidfuncContext,0);
	};

	pdlfunc() {
	    return this.getTypedRuleContext(PdlfuncContext,0);
	};

	peekfunc() {
	    return this.getTypedRuleContext(PeekfuncContext,0);
	};

	intfunc() {
	    return this.getTypedRuleContext(IntfuncContext,0);
	};

	spcfunc() {
	    return this.getTypedRuleContext(SpcfuncContext,0);
	};

	frefunc() {
	    return this.getTypedRuleContext(FrefuncContext,0);
	};

	posfunc() {
	    return this.getTypedRuleContext(PosfuncContext,0);
	};

	usrfunc() {
	    return this.getTypedRuleContext(UsrfuncContext,0);
	};

	leftfunc() {
	    return this.getTypedRuleContext(LeftfuncContext,0);
	};

	valfunc() {
	    return this.getTypedRuleContext(ValfuncContext,0);
	};

	rightfunc() {
	    return this.getTypedRuleContext(RightfuncContext,0);
	};

	fnfunc() {
	    return this.getTypedRuleContext(FnfuncContext,0);
	};

	sinfunc() {
	    return this.getTypedRuleContext(SinfuncContext,0);
	};

	cosfunc() {
	    return this.getTypedRuleContext(CosfuncContext,0);
	};

	tanfunc() {
	    return this.getTypedRuleContext(TanfuncContext,0);
	};

	atnfunc() {
	    return this.getTypedRuleContext(AtnfuncContext,0);
	};

	rndfunc() {
	    return this.getTypedRuleContext(RndfuncContext,0);
	};

	sgnfunc() {
	    return this.getTypedRuleContext(SgnfuncContext,0);
	};

	expfunc() {
	    return this.getTypedRuleContext(ExpfuncContext,0);
	};

	logfunc() {
	    return this.getTypedRuleContext(LogfuncContext,0);
	};

	absfunc() {
	    return this.getTypedRuleContext(AbsfuncContext,0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFunc_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFunc_(this);
		}
	}


}



class SignExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_signExpression;
    }

	func_() {
	    return this.getTypedRuleContext(Func_Context,0);
	};

	NOT() {
	    return this.getToken(jvmBasicParser.NOT, 0);
	};

	PLUS() {
	    return this.getToken(jvmBasicParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(jvmBasicParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSignExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSignExpression(this);
		}
	}


}



class ExponentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_exponentExpression;
    }

	signExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SignExpressionContext,i);
	    }
	};

	EXPONENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.EXPONENT);
	    } else {
	        return this.getToken(jvmBasicParser.EXPONENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExponentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExponentExpression(this);
		}
	}


}



class MultiplyingExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_multiplyingExpression;
    }

	exponentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExponentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExponentExpressionContext,i);
	    }
	};

	TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.TIMES);
	    } else {
	        return this.getToken(jvmBasicParser.TIMES, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.DIV);
	    } else {
	        return this.getToken(jvmBasicParser.DIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterMultiplyingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitMultiplyingExpression(this);
		}
	}


}



class AddingExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_addingExpression;
    }

	multiplyingExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyingExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyingExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.PLUS);
	    } else {
	        return this.getToken(jvmBasicParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.MINUS);
	    } else {
	        return this.getToken(jvmBasicParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAddingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAddingExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_relationalExpression;
    }

	addingExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddingExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AddingExpressionContext,i);
	    }
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_expression;
    }

	func_() {
	    return this.getTypedRuleContext(Func_Context,0);
	};

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.AND);
	    } else {
	        return this.getToken(jvmBasicParser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.OR);
	    } else {
	        return this.getToken(jvmBasicParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Var_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_var_;
    }

	varname() {
	    return this.getTypedRuleContext(VarnameContext,0);
	};

	varsuffix() {
	    return this.getTypedRuleContext(VarsuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVar_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVar_(this);
		}
	}


}



class VarnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varname;
    }

	LETTERS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.LETTERS);
	    } else {
	        return this.getToken(jvmBasicParser.LETTERS, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.NUMBER);
	    } else {
	        return this.getToken(jvmBasicParser.NUMBER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarname(this);
		}
	}


}



class VarsuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varsuffix;
    }

	DOLLAR() {
	    return this.getToken(jvmBasicParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(jvmBasicParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarsuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarsuffix(this);
		}
	}


}



class VarlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_varlist;
    }

	vardecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VardeclContext);
	    } else {
	        return this.getTypedRuleContext(VardeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterVarlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitVarlist(this);
		}
	}


}



class ExprlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_exprlist;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExprlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExprlist(this);
		}
	}


}



class SqrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sqrfunc;
    }

	SQR() {
	    return this.getToken(jvmBasicParser.SQR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSqrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSqrfunc(this);
		}
	}


}



class ChrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_chrfunc;
    }

	CHR() {
	    return this.getToken(jvmBasicParser.CHR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterChrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitChrfunc(this);
		}
	}


}



class LenfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_lenfunc;
    }

	LEN() {
	    return this.getToken(jvmBasicParser.LEN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLenfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLenfunc(this);
		}
	}


}



class AscfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_ascfunc;
    }

	ASC() {
	    return this.getToken(jvmBasicParser.ASC, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAscfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAscfunc(this);
		}
	}


}



class MidfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_midfunc;
    }

	MID() {
	    return this.getToken(jvmBasicParser.MID, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(jvmBasicParser.COMMA);
	    } else {
	        return this.getToken(jvmBasicParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterMidfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitMidfunc(this);
		}
	}


}



class PdlfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_pdlfunc;
    }

	PDL() {
	    return this.getToken(jvmBasicParser.PDL, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPdlfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPdlfunc(this);
		}
	}


}



class PeekfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_peekfunc;
    }

	PEEK() {
	    return this.getToken(jvmBasicParser.PEEK, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPeekfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPeekfunc(this);
		}
	}


}



class IntfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_intfunc;
    }

	INTF() {
	    return this.getToken(jvmBasicParser.INTF, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterIntfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitIntfunc(this);
		}
	}


}



class SpcfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_spcfunc;
    }

	SPC() {
	    return this.getToken(jvmBasicParser.SPC, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSpcfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSpcfunc(this);
		}
	}


}



class FrefuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_frefunc;
    }

	FRE() {
	    return this.getToken(jvmBasicParser.FRE, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFrefunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFrefunc(this);
		}
	}


}



class PosfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_posfunc;
    }

	POS() {
	    return this.getToken(jvmBasicParser.POS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterPosfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitPosfunc(this);
		}
	}


}



class UsrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_usrfunc;
    }

	USR() {
	    return this.getToken(jvmBasicParser.USR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterUsrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitUsrfunc(this);
		}
	}


}



class LeftfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_leftfunc;
    }

	LEFT() {
	    return this.getToken(jvmBasicParser.LEFT, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLeftfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLeftfunc(this);
		}
	}


}



class RightfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rightfunc;
    }

	RIGHT() {
	    return this.getToken(jvmBasicParser.RIGHT, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRightfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRightfunc(this);
		}
	}


}



class StrfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_strfunc;
    }

	STR() {
	    return this.getToken(jvmBasicParser.STR, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterStrfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitStrfunc(this);
		}
	}


}



class FnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_fnfunc;
    }

	FN() {
	    return this.getToken(jvmBasicParser.FN, 0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterFnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitFnfunc(this);
		}
	}


}



class ValfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_valfunc;
    }

	VAL() {
	    return this.getToken(jvmBasicParser.VAL, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterValfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitValfunc(this);
		}
	}


}



class ScrnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_scrnfunc;
    }

	SCRN() {
	    return this.getToken(jvmBasicParser.SCRN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(jvmBasicParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterScrnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitScrnfunc(this);
		}
	}


}



class SinfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sinfunc;
    }

	SIN() {
	    return this.getToken(jvmBasicParser.SIN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSinfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSinfunc(this);
		}
	}


}



class CosfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_cosfunc;
    }

	COS() {
	    return this.getToken(jvmBasicParser.COS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterCosfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitCosfunc(this);
		}
	}


}



class TanfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tanfunc;
    }

	TAN() {
	    return this.getToken(jvmBasicParser.TAN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTanfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTanfunc(this);
		}
	}


}



class AtnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_atnfunc;
    }

	ATN() {
	    return this.getToken(jvmBasicParser.ATN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAtnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAtnfunc(this);
		}
	}


}



class RndfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_rndfunc;
    }

	RND() {
	    return this.getToken(jvmBasicParser.RND, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterRndfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitRndfunc(this);
		}
	}


}



class SgnfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_sgnfunc;
    }

	SGN() {
	    return this.getToken(jvmBasicParser.SGN, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterSgnfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitSgnfunc(this);
		}
	}


}



class ExpfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_expfunc;
    }

	EXP() {
	    return this.getToken(jvmBasicParser.EXP, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterExpfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitExpfunc(this);
		}
	}


}



class LogfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_logfunc;
    }

	LOG() {
	    return this.getToken(jvmBasicParser.LOG, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterLogfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitLogfunc(this);
		}
	}


}



class AbsfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_absfunc;
    }

	ABS() {
	    return this.getToken(jvmBasicParser.ABS, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterAbsfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitAbsfunc(this);
		}
	}


}



class TabfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = jvmBasicParser.RULE_tabfunc;
    }

	TAB() {
	    return this.getToken(jvmBasicParser.TAB, 0);
	};

	LPAREN() {
	    return this.getToken(jvmBasicParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(jvmBasicParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.enterTabfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof jvmBasicListener ) {
	        listener.exitTabfunc(this);
		}
	}


}




jvmBasicParser.ProgContext = ProgContext; 
jvmBasicParser.LineContext = LineContext; 
jvmBasicParser.AmperoperContext = AmperoperContext; 
jvmBasicParser.LinenumberContext = LinenumberContext; 
jvmBasicParser.AmprstmtContext = AmprstmtContext; 
jvmBasicParser.StatementContext = StatementContext; 
jvmBasicParser.VardeclContext = VardeclContext; 
jvmBasicParser.Printstmt1Context = Printstmt1Context; 
jvmBasicParser.PrintlistContext = PrintlistContext; 
jvmBasicParser.GetstmtContext = GetstmtContext; 
jvmBasicParser.LetstmtContext = LetstmtContext; 
jvmBasicParser.VariableassignmentContext = VariableassignmentContext; 
jvmBasicParser.RelopContext = RelopContext; 
jvmBasicParser.NeqContext = NeqContext; 
jvmBasicParser.IfstmtContext = IfstmtContext; 
jvmBasicParser.Forstmt1Context = Forstmt1Context; 
jvmBasicParser.Forstmt2Context = Forstmt2Context; 
jvmBasicParser.NextstmtContext = NextstmtContext; 
jvmBasicParser.InputstmtContext = InputstmtContext; 
jvmBasicParser.ReadstmtContext = ReadstmtContext; 
jvmBasicParser.DimstmtContext = DimstmtContext; 
jvmBasicParser.GotostmtContext = GotostmtContext; 
jvmBasicParser.GosubstmtContext = GosubstmtContext; 
jvmBasicParser.PokestmtContext = PokestmtContext; 
jvmBasicParser.CallstmtContext = CallstmtContext; 
jvmBasicParser.HplotstmtContext = HplotstmtContext; 
jvmBasicParser.VplotstmtContext = VplotstmtContext; 
jvmBasicParser.PlotstmtContext = PlotstmtContext; 
jvmBasicParser.OngotostmtContext = OngotostmtContext; 
jvmBasicParser.OngosubstmtContext = OngosubstmtContext; 
jvmBasicParser.VtabstmntContext = VtabstmntContext; 
jvmBasicParser.HtabstmntContext = HtabstmntContext; 
jvmBasicParser.HimemstmtContext = HimemstmtContext; 
jvmBasicParser.LomemstmtContext = LomemstmtContext; 
jvmBasicParser.DatastmtContext = DatastmtContext; 
jvmBasicParser.DatumContext = DatumContext; 
jvmBasicParser.WaitstmtContext = WaitstmtContext; 
jvmBasicParser.XdrawstmtContext = XdrawstmtContext; 
jvmBasicParser.DrawstmtContext = DrawstmtContext; 
jvmBasicParser.DefstmtContext = DefstmtContext; 
jvmBasicParser.TabstmtContext = TabstmtContext; 
jvmBasicParser.SpeedstmtContext = SpeedstmtContext; 
jvmBasicParser.RotstmtContext = RotstmtContext; 
jvmBasicParser.ScalestmtContext = ScalestmtContext; 
jvmBasicParser.ColorstmtContext = ColorstmtContext; 
jvmBasicParser.HcolorstmtContext = HcolorstmtContext; 
jvmBasicParser.HlinstmtContext = HlinstmtContext; 
jvmBasicParser.VlinstmtContext = VlinstmtContext; 
jvmBasicParser.OnerrstmtContext = OnerrstmtContext; 
jvmBasicParser.PrstmtContext = PrstmtContext; 
jvmBasicParser.InstmtContext = InstmtContext; 
jvmBasicParser.StorestmtContext = StorestmtContext; 
jvmBasicParser.RecallstmtContext = RecallstmtContext; 
jvmBasicParser.ListstmtContext = ListstmtContext; 
jvmBasicParser.PopstmtContext = PopstmtContext; 
jvmBasicParser.AmptstmtContext = AmptstmtContext; 
jvmBasicParser.IncludestmtContext = IncludestmtContext; 
jvmBasicParser.EndstmtContext = EndstmtContext; 
jvmBasicParser.ReturnstmtContext = ReturnstmtContext; 
jvmBasicParser.RestorestmtContext = RestorestmtContext; 
jvmBasicParser.NumberContext = NumberContext; 
jvmBasicParser.Func_Context = Func_Context; 
jvmBasicParser.SignExpressionContext = SignExpressionContext; 
jvmBasicParser.ExponentExpressionContext = ExponentExpressionContext; 
jvmBasicParser.MultiplyingExpressionContext = MultiplyingExpressionContext; 
jvmBasicParser.AddingExpressionContext = AddingExpressionContext; 
jvmBasicParser.RelationalExpressionContext = RelationalExpressionContext; 
jvmBasicParser.ExpressionContext = ExpressionContext; 
jvmBasicParser.Var_Context = Var_Context; 
jvmBasicParser.VarnameContext = VarnameContext; 
jvmBasicParser.VarsuffixContext = VarsuffixContext; 
jvmBasicParser.VarlistContext = VarlistContext; 
jvmBasicParser.ExprlistContext = ExprlistContext; 
jvmBasicParser.SqrfuncContext = SqrfuncContext; 
jvmBasicParser.ChrfuncContext = ChrfuncContext; 
jvmBasicParser.LenfuncContext = LenfuncContext; 
jvmBasicParser.AscfuncContext = AscfuncContext; 
jvmBasicParser.MidfuncContext = MidfuncContext; 
jvmBasicParser.PdlfuncContext = PdlfuncContext; 
jvmBasicParser.PeekfuncContext = PeekfuncContext; 
jvmBasicParser.IntfuncContext = IntfuncContext; 
jvmBasicParser.SpcfuncContext = SpcfuncContext; 
jvmBasicParser.FrefuncContext = FrefuncContext; 
jvmBasicParser.PosfuncContext = PosfuncContext; 
jvmBasicParser.UsrfuncContext = UsrfuncContext; 
jvmBasicParser.LeftfuncContext = LeftfuncContext; 
jvmBasicParser.RightfuncContext = RightfuncContext; 
jvmBasicParser.StrfuncContext = StrfuncContext; 
jvmBasicParser.FnfuncContext = FnfuncContext; 
jvmBasicParser.ValfuncContext = ValfuncContext; 
jvmBasicParser.ScrnfuncContext = ScrnfuncContext; 
jvmBasicParser.SinfuncContext = SinfuncContext; 
jvmBasicParser.CosfuncContext = CosfuncContext; 
jvmBasicParser.TanfuncContext = TanfuncContext; 
jvmBasicParser.AtnfuncContext = AtnfuncContext; 
jvmBasicParser.RndfuncContext = RndfuncContext; 
jvmBasicParser.SgnfuncContext = SgnfuncContext; 
jvmBasicParser.ExpfuncContext = ExpfuncContext; 
jvmBasicParser.LogfuncContext = LogfuncContext; 
jvmBasicParser.AbsfuncContext = AbsfuncContext; 
jvmBasicParser.TabfuncContext = TabfuncContext; 
